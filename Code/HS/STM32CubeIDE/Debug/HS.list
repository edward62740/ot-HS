
HS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf84  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c7bc  0800c7bc  0001c7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c7c0  0800c7c0  0001c7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000008  0800c7c4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 SYSTEM_DRIVER_CONTEXT 00000011  200000a4  0800c860  000200a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006c8  200000b8  0800c871  000200b8  2**2
                  ALLOC
  8 ._user_heap_stack 00002800  20000780  0800c871  00020780  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 11 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 12 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 13 .debug_info   0003db1e  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007874  00000000  00000000  0005dc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003088  00000000  00000000  00065478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002d40  00000000  00000000  00068500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003374f  00000000  00000000  0006b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c9d2  00000000  00000000  0009e98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001140cd  00000000  00000000  000db361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ef42e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d0d8  00000000  00000000  001ef480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000b8 	.word	0x200000b8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c0ac 	.word	0x0800c0ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000bc 	.word	0x200000bc
 800017c:	0800c0ac 	.word	0x0800c0ac

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	460b      	mov	r3, r1
 800025a:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800025c:	23ff      	movs	r3, #255	; 0xff
 800025e:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000260:	2300      	movs	r3, #0
 8000262:	81fb      	strh	r3, [r7, #14]
 8000264:	e021      	b.n	80002aa <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8000266:	89fb      	ldrh	r3, [r7, #14]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	781a      	ldrb	r2, [r3, #0]
 800026e:	7b7b      	ldrb	r3, [r7, #13]
 8000270:	4053      	eors	r3, r2
 8000272:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000274:	2308      	movs	r3, #8
 8000276:	733b      	strb	r3, [r7, #12]
 8000278:	e011      	b.n	800029e <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800027a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800027e:	2b00      	cmp	r3, #0
 8000280:	da07      	bge.n	8000292 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000282:	7b7b      	ldrb	r3, [r7, #13]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	b25b      	sxtb	r3, r3
 8000288:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800028c:	b25b      	sxtb	r3, r3
 800028e:	737b      	strb	r3, [r7, #13]
 8000290:	e002      	b.n	8000298 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000292:	7b7b      	ldrb	r3, [r7, #13]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000298:	7b3b      	ldrb	r3, [r7, #12]
 800029a:	3b01      	subs	r3, #1
 800029c:	733b      	strb	r3, [r7, #12]
 800029e:	7b3b      	ldrb	r3, [r7, #12]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1ea      	bne.n	800027a <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80002a4:	89fb      	ldrh	r3, [r7, #14]
 80002a6:	3301      	adds	r3, #1
 80002a8:	81fb      	strh	r3, [r7, #14]
 80002aa:	89fa      	ldrh	r2, [r7, #14]
 80002ac:	887b      	ldrh	r3, [r7, #2]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d3d9      	bcc.n	8000266 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80002b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	807b      	strh	r3, [r7, #2]
 80002cc:	4613      	mov	r3, r2
 80002ce:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	4619      	mov	r1, r3
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f7ff ffbb 	bl	8000250 <sensirion_common_generate_crc>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	787b      	ldrb	r3, [r7, #1]
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d002      	beq.n	80002ea <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 80002e4:	f04f 33ff 	mov.w	r3, #4294967295
 80002e8:	e000      	b.n	80002ec <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 80002ea:	2300      	movs	r3, #0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <sensirion_i2c_read_words_as_bytes>:
    }
    return idx;
}

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b096      	sub	sp, #88	; 0x58
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	4613      	mov	r3, r2
 8000302:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000304:	88bb      	ldrh	r3, [r7, #4]
 8000306:	461a      	mov	r2, r3
 8000308:	0052      	lsls	r2, r2, #1
 800030a:	4413      	add	r3, r2
 800030c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000310:	f107 0308 	add.w	r3, r7, #8
 8000314:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8000316:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f8a2 	bl	8000468 <sensirion_i2c_read>
 8000324:	4603      	mov	r3, r0
 8000326:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 800032a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800032e:	2b00      	cmp	r3, #0
 8000330:	d002      	beq.n	8000338 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000332:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000336:	e047      	b.n	80003c8 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000338:	2300      	movs	r3, #0
 800033a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800033e:	2300      	movs	r3, #0
 8000340:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000344:	e039      	b.n	80003ba <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000346:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800034a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800034c:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 800034e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000352:	3302      	adds	r3, #2
 8000354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000356:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	2102      	movs	r1, #2
 800035e:	f7ff ffaf 	bl	80002c0 <sensirion_common_check_crc>
 8000362:	4603      	mov	r3, r0
 8000364:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 8000368:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000370:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000374:	e028      	b.n	80003c8 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 8000376:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800037a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800037c:	441a      	add	r2, r3
 800037e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000382:	1c59      	adds	r1, r3, #1
 8000384:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 8000388:	4619      	mov	r1, r3
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	440b      	add	r3, r1
 800038e:	7812      	ldrb	r2, [r2, #0]
 8000390:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000392:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000396:	3301      	adds	r3, #1
 8000398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800039a:	441a      	add	r2, r3
 800039c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80003a0:	1c59      	adds	r1, r3, #1
 80003a2:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80003a6:	4619      	mov	r1, r3
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	440b      	add	r3, r1
 80003ac:	7812      	ldrb	r2, [r2, #0]
 80003ae:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80003b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80003b4:	3303      	adds	r3, #3
 80003b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80003ba:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80003be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3bf      	bcc.n	8000346 <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80003c6:	2300      	movs	r3, #0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3758      	adds	r7, #88	; 0x58
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	6039      	str	r1, [r7, #0]
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	4613      	mov	r3, r2
 80003de:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80003e0:	88ba      	ldrh	r2, [r7, #4]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	6839      	ldr	r1, [r7, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff84 	bl	80002f4 <sensirion_i2c_read_words_as_bytes>
 80003ec:	4603      	mov	r3, r0
 80003ee:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 80003f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <sensirion_i2c_read_words+0x2e>
        return ret;
 80003f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003fc:	e020      	b.n	8000440 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e017      	b.n	8000434 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	683a      	ldr	r2, [r7, #0]
 800040a:	4413      	add	r3, r2
 800040c:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	021b      	lsls	r3, r3, #8
 8000414:	b21a      	sxth	r2, r3
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	3301      	adds	r3, #1
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b21b      	sxth	r3, r3
 800041e:	4313      	orrs	r3, r2
 8000420:	b219      	sxth	r1, r3
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	4413      	add	r3, r2
 800042a:	b28a      	uxth	r2, r1
 800042c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	3301      	adds	r3, #1
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	b29b      	uxth	r3, r3
 8000438:	88ba      	ldrh	r2, [r7, #4]
 800043a:	429a      	cmp	r2, r3
 800043c:	d8e2      	bhi.n	8000404 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(I2C_HandleTypeDef* i2c_handle) {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	i2c = i2c_handle;
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <sensirion_i2c_init+0x1c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6013      	str	r3, [r2, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	200000d4 	.word	0x200000d4

08000468 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af02      	add	r7, sp, #8
 800046e:	4603      	mov	r3, r0
 8000470:	6039      	str	r1, [r7, #0]
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Receive(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <sensirion_i2c_read+0x34>)
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	b29b      	uxth	r3, r3
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	b299      	uxth	r1, r3
 8000484:	88bb      	ldrh	r3, [r7, #4]
 8000486:	2205      	movs	r2, #5
 8000488:	9200      	str	r2, [sp, #0]
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	f004 fd54 	bl	8004f38 <HAL_I2C_Master_Receive>
 8000490:	4603      	mov	r3, r0
 8000492:	b25b      	sxtb	r3, r3
}
 8000494:	4618      	mov	r0, r3
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200000d4 	.word	0x200000d4

080004a0 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	4603      	mov	r3, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	4613      	mov	r3, r2
 80004ae:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Transmit(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <sensirion_i2c_write+0x34>)
 80004b2:	6818      	ldr	r0, [r3, #0]
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	b299      	uxth	r1, r3
 80004bc:	88bb      	ldrh	r3, [r7, #4]
 80004be:	2205      	movs	r2, #5
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	f004 fc44 	bl	8004d50 <HAL_I2C_Master_Transmit>
 80004c8:	4603      	mov	r3, r0
 80004ca:	b25b      	sxtb	r3, r3
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000d4 	.word	0x200000d4

080004d8 <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <sensirion_sleep_usec+0x40>)
 80004e4:	fba2 2303 	umull	r2, r3, r2, r3
 80004e8:	099b      	lsrs	r3, r3, #6
 80004ea:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <sensirion_sleep_usec+0x40>)
 80004f0:	fba3 1302 	umull	r1, r3, r3, r2
 80004f4:	099b      	lsrs	r3, r3, #6
 80004f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004fa:	fb01 f303 	mul.w	r3, r1, r3
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <sensirion_sleep_usec+0x32>
        msec++;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	3301      	adds	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f001 ff5a 	bl	80023c4 <HAL_Delay>
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	10624dd3 	.word	0x10624dd3

0800051c <sht4x_activate_medium_heater>:
#define SHT_DRV_VERSION_STR "5.3.0"
static uint8_t sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
static uint16_t sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;


int16_t sht4x_activate_medium_heater(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	81fb      	strh	r3, [r7, #14]
    buffer[offset++] = (uint8_t)0x24;
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	81fa      	strh	r2, [r7, #14]
 800052c:	3310      	adds	r3, #16
 800052e:	443b      	add	r3, r7
 8000530:	2224      	movs	r2, #36	; 0x24
 8000532:	f803 2c0c 	strb.w	r2, [r3, #-12]

    error = sensirion_i2c_write(SHT4X_ADDRESS, &buffer[0], offset);
 8000536:	89fa      	ldrh	r2, [r7, #14]
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4619      	mov	r1, r3
 800053c:	2044      	movs	r0, #68	; 0x44
 800053e:	f7ff ffaf 	bl	80004a0 <sensirion_i2c_write>
 8000542:	4603      	mov	r3, r0
 8000544:	81bb      	strh	r3, [r7, #12]
    if (error) {
 8000546:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <sht4x_activate_medium_heater+0x38>
        return error;
 800054e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000552:	e000      	b.n	8000556 <sht4x_activate_medium_heater+0x3a>
    }


    return NO_ERROR;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <sht4x_measure_blocking_read>:

int16_t sht4x_measure_blocking_read(int32_t* temperature, int32_t* humidity) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sht4x_measure();
 800056a:	f000 f819 	bl	80005a0 <sht4x_measure>
 800056e:	4603      	mov	r3, r0
 8000570:	81fb      	strh	r3, [r7, #14]
    if (ret)
 8000572:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <sht4x_measure_blocking_read+0x20>
        return ret;
 800057a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800057e:	e009      	b.n	8000594 <sht4x_measure_blocking_read+0x34>
    sensirion_sleep_usec(sht4x_cmd_measure_delay_us);
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <sht4x_measure_blocking_read+0x3c>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ffa7 	bl	80004d8 <sensirion_sleep_usec>
    return sht4x_read(temperature, humidity);
 800058a:	6839      	ldr	r1, [r7, #0]
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f815 	bl	80005bc <sht4x_read>
 8000592:	4603      	mov	r3, r0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000000a 	.word	0x2000000a

080005a0 <sht4x_measure>:

int16_t sht4x_measure(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    return sensirion_i2c_write(SHT4X_ADDRESS, &sht4x_cmd_measure, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	4904      	ldr	r1, [pc, #16]	; (80005b8 <sht4x_measure+0x18>)
 80005a8:	2044      	movs	r0, #68	; 0x44
 80005aa:	f7ff ff79 	bl	80004a0 <sensirion_i2c_write>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b21b      	sxth	r3, r3
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000008 	.word	0x20000008

080005bc <sht4x_read>:

int16_t sht4x_read(int32_t* temperature, int32_t* humidity) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHT4X_ADDRESS, words,
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2202      	movs	r2, #2
 80005cc:	4619      	mov	r1, r3
 80005ce:	2044      	movs	r0, #68	; 0x44
 80005d0:	f7ff fefe 	bl	80003d0 <sensirion_i2c_read_words>
 80005d4:	4603      	mov	r3, r0
 80005d6:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 65535 - 45
     * Relative Humidity = 125 * (S_RH / 65535) - 6
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 80005d8:	893b      	ldrh	r3, [r7, #8]
 80005da:	461a      	mov	r2, r3
 80005dc:	f245 5373 	movw	r3, #21875	; 0x5573
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	135b      	asrs	r3, r3, #13
 80005e6:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 80005ea:	3bc8      	subs	r3, #200	; 0xc8
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	6013      	str	r3, [r2, #0]
    *humidity = ((15625 * (int32_t)words[1]) >> 13) - 6000;
 80005f0:	897b      	ldrh	r3, [r7, #10]
 80005f2:	461a      	mov	r2, r3
 80005f4:	f643 5309 	movw	r3, #15625	; 0x3d09
 80005f8:	fb02 f303 	mul.w	r3, r2, r3
 80005fc:	135b      	asrs	r3, r3, #13
 80005fe:	f5a3 53bb 	sub.w	r3, r3, #5984	; 0x1760
 8000602:	3b10      	subs	r3, #16
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	6013      	str	r3, [r2, #0]

    return ret;
 8000608:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <sht4x_enable_low_power_mode>:
    uint32_t serial;

    return sht4x_read_serial(&serial);
}

void sht4x_enable_low_power_mode(uint8_t enable_low_power_mode) {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
    if (enable_low_power_mode) {
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d007      	beq.n	8000634 <sht4x_enable_low_power_mode+0x20>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_LPM;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <sht4x_enable_low_power_mode+0x3c>)
 8000626:	22e0      	movs	r2, #224	; 0xe0
 8000628:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_LPM_USEC;
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <sht4x_enable_low_power_mode+0x40>)
 800062c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000630:	801a      	strh	r2, [r3, #0]
    } else {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
    }
}
 8000632:	e006      	b.n	8000642 <sht4x_enable_low_power_mode+0x2e>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <sht4x_enable_low_power_mode+0x3c>)
 8000636:	22fd      	movs	r2, #253	; 0xfd
 8000638:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <sht4x_enable_low_power_mode+0x40>)
 800063c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000640:	801a      	strh	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000008 	.word	0x20000008
 8000654:	2000000a 	.word	0x2000000a

08000658 <platform_stts22h_init>:
#include <stm32wbxx_hal.h>
stmdev_ctx_t dev_ctx;
stmdev_ctx_t *ctx;

bool platform_stts22h_init(I2C_HandleTypeDef* i2c_handle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	  static uint8_t whoamI;
	  /* Initialize mems driver interface */

	  dev_ctx.write_reg = platform_write;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <platform_stts22h_init+0x3c>)
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <platform_stts22h_init+0x40>)
 8000664:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <platform_stts22h_init+0x3c>)
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <platform_stts22h_init+0x44>)
 800066a:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &i2c_handle;
 800066c:	4a09      	ldr	r2, [pc, #36]	; (8000694 <platform_stts22h_init+0x3c>)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	60d3      	str	r3, [r2, #12]
	  ctx = &dev_ctx;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <platform_stts22h_init+0x48>)
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <platform_stts22h_init+0x3c>)
 8000676:	601a      	str	r2, [r3, #0]
	  /* Check device ID */
	  stts22h_dev_id_get(&whoamI);
 8000678:	480a      	ldr	r0, [pc, #40]	; (80006a4 <platform_stts22h_init+0x4c>)
 800067a:	f000 f966 	bl	800094a <stts22h_dev_id_get>

	  return (whoamI == STTS22H_ID ? true : false);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <platform_stts22h_init+0x4c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2ba0      	cmp	r3, #160	; 0xa0
 8000684:	bf0c      	ite	eq
 8000686:	2301      	moveq	r3, #1
 8000688:	2300      	movne	r3, #0
 800068a:	b2db      	uxtb	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000d8 	.word	0x200000d8
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080006df 	.word	0x080006df
 80006a0:	200000e8 	.word	0x200000e8
 80006a4:	200000ec 	.word	0x200000ec

080006a8 <platform_write>:

int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	461a      	mov	r2, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	72fb      	strb	r3, [r7, #11]
 80006b8:	4613      	mov	r3, r2
 80006ba:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Receive(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	b299      	uxth	r1, r3
 80006c4:	893b      	ldrh	r3, [r7, #8]
 80006c6:	2205      	movs	r2, #5
 80006c8:	9200      	str	r2, [sp, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f004 fc33 	bl	8004f38 <HAL_I2C_Master_Receive>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b25b      	sxtb	r3, r3
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <platform_read>:


int32_t platform_read(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af02      	add	r7, sp, #8
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	461a      	mov	r2, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	72fb      	strb	r3, [r7, #11]
 80006ee:	4613      	mov	r3, r2
 80006f0:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Transmit(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	b299      	uxth	r1, r3
 80006fa:	893b      	ldrh	r3, [r7, #8]
 80006fc:	2205      	movs	r2, #5
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f004 fb24 	bl	8004d50 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	b25b      	sxtb	r3, r3
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg( uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <stts22h_read_reg+0x30>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	685c      	ldr	r4, [r3, #4]
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <stts22h_read_reg+0x30>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68d8      	ldr	r0, [r3, #12]
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	79f9      	ldrb	r1, [r7, #7]
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	47a0      	blx	r4
 8000738:	60f8      	str	r0, [r7, #12]

  return ret;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	200000e8 	.word	0x200000e8

08000748 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg( uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <stts22h_write_reg+0x30>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681c      	ldr	r4, [r3, #0]
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <stts22h_write_reg+0x30>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	79f9      	ldrb	r1, [r7, #7]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	47a0      	blx	r4
 800076c:	60f8      	str	r0, [r7, #12]

  return ret;
 800076e:	68fb      	ldr	r3, [r7, #12]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	200000e8 	.word	0x200000e8

0800077c <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(
                                   stts22h_odr_temp_t val)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	2004      	movs	r0, #4
 8000790:	f7ff ffc0 	bl	8000714 <stts22h_read_reg>
 8000794:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d107      	bne.n	80007ac <stts22h_temp_data_rate_set+0x30>
  {
    ret = stts22h_read_reg(STTS22H_SOFTWARE_RESET,
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	200c      	movs	r0, #12
 80007a6:	f7ff ffb5 	bl	8000714 <stts22h_read_reg>
 80007aa:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d11d      	bne.n	80007ee <stts22h_temp_data_rate_set+0x72>
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d11a      	bne.n	80007ee <stts22h_temp_data_rate_set+0x72>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 80007b8:	7c3b      	ldrb	r3, [r7, #16]
 80007ba:	f043 0302 	orr.w	r3, r3, #2
 80007be:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	200c      	movs	r0, #12
 80007ca:	f7ff ffbd 	bl	8000748 <stts22h_write_reg>
 80007ce:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10b      	bne.n	80007ee <stts22h_temp_data_rate_set+0x72>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 80007d6:	7c3b      	ldrb	r3, [r7, #16]
 80007d8:	f36f 0341 	bfc	r3, #1, #1
 80007dc:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	200c      	movs	r0, #12
 80007e8:	f7ff ffae 	bl	8000748 <stts22h_write_reg>
 80007ec:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d008      	beq.n	8000806 <stts22h_temp_data_rate_set+0x8a>
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b12      	cmp	r3, #18
 80007f8:	d005      	beq.n	8000806 <stts22h_temp_data_rate_set+0x8a>
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b22      	cmp	r3, #34	; 0x22
 80007fe:	d002      	beq.n	8000806 <stts22h_temp_data_rate_set+0x8a>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b32      	cmp	r3, #50	; 0x32
 8000804:	d123      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000806:	7b3b      	ldrb	r3, [r7, #12]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 800080e:	2b00      	cmp	r3, #0
 8000810:	d11d      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d11a      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000818:	7c3b      	ldrb	r3, [r7, #16]
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	200c      	movs	r0, #12
 800082a:	f7ff ff8d 	bl	8000748 <stts22h_write_reg>
 800082e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10b      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000836:	7c3b      	ldrb	r3, [r7, #16]
 8000838:	f36f 0341 	bfc	r3, #1, #1
 800083c:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	2201      	movs	r2, #1
 8000844:	4619      	mov	r1, r3
 8000846:	200c      	movs	r0, #12
 8000848:	f7ff ff7e 	bl	8000748 <stts22h_write_reg>
 800084c:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b04      	cmp	r3, #4
 8000852:	d125      	bne.n	80008a0 <stts22h_temp_data_rate_set+0x124>
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d122      	bne.n	80008a0 <stts22h_temp_data_rate_set+0x124>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800085a:	7c3b      	ldrb	r3, [r7, #16]
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000862:	7c3b      	ldrb	r3, [r7, #16]
 8000864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000868:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	2201      	movs	r2, #1
 8000870:	4619      	mov	r1, r3
 8000872:	200c      	movs	r0, #12
 8000874:	f7ff ff68 	bl	8000748 <stts22h_write_reg>
 8000878:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d10f      	bne.n	80008a0 <stts22h_temp_data_rate_set+0x124>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000880:	7c3b      	ldrb	r3, [r7, #16]
 8000882:	f36f 0341 	bfc	r3, #1, #1
 8000886:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000888:	7c3b      	ldrb	r3, [r7, #16]
 800088a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088e:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	200c      	movs	r0, #12
 800089a:	f7ff ff55 	bl	8000748 <stts22h_write_reg>
 800089e:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d12a      	bne.n	80008fc <stts22h_temp_data_rate_set+0x180>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	f362 0300 	bfi	r3, r2, #0, #1
 80008b4:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	7b3b      	ldrb	r3, [r7, #12]
 80008c2:	f362 0382 	bfi	r3, r2, #2, #1
 80008c6:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	f362 13c7 	bfi	r3, r2, #7, #1
 80008d8:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	091b      	lsrs	r3, r3, #4
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	7b3b      	ldrb	r3, [r7, #12]
 80008e6:	f362 1305 	bfi	r3, r2, #4, #2
 80008ea:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2201      	movs	r2, #1
 80008f2:	4619      	mov	r1, r3
 80008f4:	2004      	movs	r0, #4
 80008f6:	f7ff ff27 	bl	8000748 <stts22h_write_reg>
 80008fa:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80008fc:	697b      	ldr	r3, [r7, #20]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get( int16_t *val)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_TEMP_L_OUT, buff, 2);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2202      	movs	r2, #2
 8000914:	4619      	mov	r1, r3
 8000916:	2006      	movs	r0, #6
 8000918:	f7ff fefc 	bl	8000714 <stts22h_read_reg>
 800091c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800091e:	7a7b      	ldrb	r3, [r7, #9]
 8000920:	b21a      	sxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092c:	b29b      	uxth	r3, r3
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b29a      	uxth	r2, r3
 8000932:	7a3b      	ldrb	r3, [r7, #8]
 8000934:	b29b      	uxth	r3, r3
 8000936:	4413      	add	r3, r2
 8000938:	b29b      	uxth	r3, r3
 800093a:	b21a      	sxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	801a      	strh	r2, [r3, #0]

  return ret;
 8000940:	68fb      	ldr	r3, [r7, #12]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get( uint8_t *buff)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_WHOAMI, buff, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fedc 	bl	8000714 <stts22h_read_reg>
 800095c:	60f8      	str	r0, [r7, #12]

  return ret;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000968:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096c:	3304      	adds	r3, #4

0800096e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000970:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000972:	d3f9      	bcc.n	8000968 <CopyDataInit>
  bx lr
 8000974:	4770      	bx	lr

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000976:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000978:	3004      	adds	r0, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800097a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>
  bx lr
 800097e:	4770      	bx	lr

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000984:	f003 fa86 	bl	8003e94 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <LoopForever+0x8>)
 800098a:	490c      	ldr	r1, [pc, #48]	; (80009bc <LoopForever+0xc>)
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <LoopForever+0x10>)
 800098e:	2300      	movs	r3, #0
 8000990:	f7ff ffed 	bl	800096e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <LoopForever+0x14>)
 8000996:	490c      	ldr	r1, [pc, #48]	; (80009c8 <LoopForever+0x18>)
 8000998:	2300      	movs	r3, #0
 800099a:	f7ff ffee 	bl	800097a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <LoopForever+0x1c>)
 80009a0:	490b      	ldr	r1, [pc, #44]	; (80009d0 <LoopForever+0x20>)
 80009a2:	2300      	movs	r3, #0
 80009a4:	f7ff ffe9 	bl	800097a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a8:	f00a f994 	bl	800acd4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80009ac:	f002 fd00 	bl	80033b0 <main>

080009b0 <LoopForever>:

LoopForever:
  b LoopForever
 80009b0:	e7fe      	b.n	80009b0 <LoopForever>
 80009b2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80009b4:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 80009b8:	20000008 	.word	0x20000008
 80009bc:	200000a4 	.word	0x200000a4
 80009c0:	0800c7c4 	.word	0x0800c7c4
  INIT_BSS _sbss, _ebss
 80009c4:	200000b8 	.word	0x200000b8
 80009c8:	20000780 	.word	0x20000780
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80009cc:	200300e8 	.word	0x200300e8
 80009d0:	20030c6a 	.word	0x20030c6a

080009d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_IRQHandler>

080009d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  return 1;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <_kill>:

int _kill(int pid, int sig)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009f0:	f00a f958 	bl	800aca4 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2216      	movs	r2, #22
 80009f8:	601a      	str	r2, [r3, #0]
  return -1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_exit>:

void _exit (int status)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffe7 	bl	80009e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a18:	e7fe      	b.n	8000a18 <_exit+0x12>

08000a1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	60f8      	str	r0, [r7, #12]
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	e00a      	b.n	8000a42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a2c:	f3af 8000 	nop.w
 8000a30:	4601      	mov	r1, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	60ba      	str	r2, [r7, #8]
 8000a38:	b2ca      	uxtb	r2, r1
 8000a3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	dbf0      	blt.n	8000a2c <_read+0x12>
  }

  return len;
 8000a4a:	687b      	ldr	r3, [r7, #4]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e009      	b.n	8000a7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	60ba      	str	r2, [r7, #8]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	3301      	adds	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	dbf1      	blt.n	8000a66 <_write+0x12>
  }
  return len;
 8000a82:	687b      	ldr	r3, [r7, #4]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_close>:

int _close(int file)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_isatty>:

int _isatty(int file)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b085      	sub	sp, #20
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f00a f8be 	bl	800aca4 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20024000 	.word	0x20024000
 8000b54:	00002000 	.word	0x00002000
 8000b58:	200000f0 	.word	0x200000f0
 8000b5c:	20000780 	.word	0x20000780

08000b60 <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f007 ff2f 	bl	80089d6 <otCoapSendResponseWithParameters>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <APP_THREAD_Init>:
static otInstance *sInstance = NULL;

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

	/* USER CODE END APP_THREAD_INIT_1 */
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f008 fe38 	bl	8009802 <SHCI_C2_RADIO_AllowLowPower>
	SHCI_CmdStatus_t ThreadInitStatus;

	/* Check the compatibility with the Coprocessor Wireless Firmware loaded */
	APP_THREAD_CheckWirelessFirmwareInfo();
 8000b92:	f000 fafd 	bl	8001190 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
	  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
	#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

	/* Register cmdbuffer */
	APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000b96:	4835      	ldr	r0, [pc, #212]	; (8000c6c <APP_THREAD_Init+0xe8>)
 8000b98:	f000 fcf6 	bl	8001588 <APP_THREAD_RegisterCmdBuffer>

	/**
	 * Do not allow standby in the application
	 */
	UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	2002      	movs	r0, #2
 8000ba0:	f009 fd40 	bl	800a624 <UTIL_LPM_SetOffMode>
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f009 fd0c 	bl	800a5c4 <UTIL_LPM_SetStopMode>
	/* Init config buffer and call TL_THREAD_Init */
	APP_THREAD_TL_THREAD_INIT();
 8000bac:	f000 fdaa 	bl	8001704 <APP_THREAD_TL_THREAD_INIT>

	/* Configure UART for sending CLI command from M4 */
	APP_THREAD_Init_UART_CLI();
 8000bb0:	f000 fda0 	bl	80016f4 <APP_THREAD_Init_UART_CLI>

	/* Send Thread start system cmd to M0 */
	ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000bb4:	f008 fdf9 	bl	80097aa <SHCI_C2_THREAD_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]

	//otPlatRadioGetIeeeEui64(sInstance, &eui64);

	/* Prevent unused argument(s) compilation warning */
	UNUSED(ThreadInitStatus);
	sInstance = otInstanceInitSingle();
 8000bbc:	f007 ff73 	bl	8008aa6 <otInstanceInitSingle>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <APP_THREAD_Init+0xec>)
 8000bc4:	6013      	str	r3, [r2, #0]
	assert(sInstance);
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <APP_THREAD_Init+0xec>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <APP_THREAD_Init+0x56>
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <APP_THREAD_Init+0xf0>)
 8000bd0:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <APP_THREAD_Init+0xf4>)
 8000bd2:	21ad      	movs	r1, #173	; 0xad
 8000bd4:	4829      	ldr	r0, [pc, #164]	; (8000c7c <APP_THREAD_Init+0xf8>)
 8000bd6:	f00a f847 	bl	800ac68 <__assert_func>
	APP_THREAD_SetSleepyEndDeviceMode();
 8000bda:	f000 f9cb 	bl	8000f74 <APP_THREAD_SetSleepyEndDeviceMode>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000bde:	2102      	movs	r1, #2
 8000be0:	4827      	ldr	r0, [pc, #156]	; (8000c80 <APP_THREAD_Init+0xfc>)
 8000be2:	f003 ffc5 	bl	8004b70 <HAL_GPIO_TogglePin>
	/* Initialize and configure the Thread device*/
	otPlatRadioSetTransmitPower(sInstance, 6);
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <APP_THREAD_Init+0xec>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2106      	movs	r1, #6
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 fda9 	bl	8009744 <otPlatRadioSetTransmitPower>
	otLinkGetFactoryAssignedIeeeEui64(sInstance, &eui64);
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <APP_THREAD_Init+0xec>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4923      	ldr	r1, [pc, #140]	; (8000c84 <APP_THREAD_Init+0x100>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f007 ffd3 	bl	8008ba4 <otLinkGetFactoryAssignedIeeeEui64>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000bfe:	2102      	movs	r1, #2
 8000c00:	481f      	ldr	r0, [pc, #124]	; (8000c80 <APP_THREAD_Init+0xfc>)
 8000c02:	f003 ffb5 	bl	8004b70 <HAL_GPIO_TogglePin>
	APP_THREAD_DeviceConfig();
 8000c06:	f000 f9eb 	bl	8000fe0 <APP_THREAD_DeviceConfig>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	481c      	ldr	r0, [pc, #112]	; (8000c80 <APP_THREAD_Init+0xfc>)
 8000c0e:	f003 ffaf 	bl	8004b70 <HAL_GPIO_TogglePin>
	appSrpInit();
 8000c12:	f000 f855 	bl	8000cc0 <appSrpInit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4819      	ldr	r0, [pc, #100]	; (8000c80 <APP_THREAD_Init+0xfc>)
 8000c1c:	f003 ff90 	bl	8004b40 <HAL_GPIO_WritePin>

	/* Register task */
	/* Create the different tasks */
	UTIL_SEQ_RegTask(1 << (uint32_t) CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU,
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <APP_THREAD_Init+0x104>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	2001      	movs	r0, #1
 8000c26:	f009 fe5f 	bl	800a8e8 <UTIL_SEQ_RegTask>
			APP_THREAD_ProcessMsgM0ToM4);

	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &coapMessageTimerId, hw_ts_Repeated,
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <APP_THREAD_Init+0x108>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4918      	ldr	r1, [pc, #96]	; (8000c90 <APP_THREAD_Init+0x10c>)
 8000c30:	2000      	movs	r0, #0
 8000c32:	f002 f961 	bl	8002ef8 <HW_TS_Create>
			(HW_TS_pTimerCb_t) APP_THREAD_SendCoapMsg);
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &setThreadLpTimerId, hw_ts_SingleShot,
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <APP_THREAD_Init+0x110>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4917      	ldr	r1, [pc, #92]	; (8000c98 <APP_THREAD_Init+0x114>)
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f002 f95b 	bl	8002ef8 <HW_TS_Create>
			APP_THREAD_SetSleepyEndDeviceMode);
	//HW_TS_Create(CFG_TIM_PROC_ID_ISR, &srpRegisterTimerId, hw_ts_SingleShot, appSrpDeinit);
	HW_TS_Start(coapMessageTimerId, coapMessageIntervalMs);
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <APP_THREAD_Init+0x10c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 fa51 	bl	80030f4 <HW_TS_Start>
	//HW_TS_Start(srpRegisterTimerId, pollIntervalMs);

	/* USER CODE BEGIN INIT TASKS */

	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000c52:	2100      	movs	r1, #0
 8000c54:	2002      	movs	r0, #2
 8000c56:	f009 fcb5 	bl	800a5c4 <UTIL_LPM_SetStopMode>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f008 fdd0 	bl	8009802 <SHCI_C2_RADIO_AllowLowPower>

}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200300e8 	.word	0x200300e8
 8000c70:	20000244 	.word	0x20000244
 8000c74:	0800c0d0 	.word	0x0800c0d0
 8000c78:	0800c618 	.word	0x0800c618
 8000c7c:	0800c0dc 	.word	0x0800c0dc
 8000c80:	48000800 	.word	0x48000800
 8000c84:	20000238 	.word	0x20000238
 8000c88:	08001799 	.word	0x08001799
 8000c8c:	0800132d 	.word	0x0800132d
 8000c90:	20000104 	.word	0x20000104
 8000c94:	08000f75 	.word	0x08000f75
 8000c98:	20000105 	.word	0x20000105

08000c9c <appSrpCb>:

void appSrpCb(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	if (coapConnectionEstablished)
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <appSrpCb+0x1c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d104      	bne.n	8000cb2 <appSrpCb+0x16>
		return;
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4804      	ldr	r0, [pc, #16]	; (8000cbc <appSrpCb+0x20>)
 8000cac:	f003 ff60 	bl	8004b70 <HAL_GPIO_TogglePin>
 8000cb0:	e000      	b.n	8000cb4 <appSrpCb+0x18>
		return;
 8000cb2:	bf00      	nop
}
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000240 	.word	0x20000240
 8000cbc:	48000800 	.word	0x48000800

08000cc0 <appSrpInit>:
{
	otSrpClientDisableAutoStartMode(sInstance);
}

void appSrpInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b092      	sub	sp, #72	; 0x48
 8000cc4:	af00      	add	r7, sp, #0
	otError error = OT_ERROR_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	srpRunning = true;
 8000ccc:	4b47      	ldr	r3, [pc, #284]	; (8000dec <appSrpInit+0x12c>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
	char *hostName;
	otNetifAddress *self = otIp6GetUnicastAddresses(sInstance);
 8000cd2:	4b47      	ldr	r3, [pc, #284]	; (8000df0 <appSrpInit+0x130>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f007 ff3c 	bl	8008b54 <otIp6GetUnicastAddresses>
 8000cdc:	6438      	str	r0, [r7, #64]	; 0x40
	uint8_t addr_prf = self->mAddress.mFields.m8[15];
 8000cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ce0:	7bdb      	ldrb	r3, [r3, #15]
 8000ce2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint16_t size;
	hostName = otSrpClientBuffersGetHostNameString(sInstance, &size);
 8000ce6:	4b42      	ldr	r3, [pc, #264]	; (8000df0 <appSrpInit+0x130>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f009 f848 	bl	8009d86 <otSrpClientBuffersGetHostNameString>
 8000cf6:	63b8      	str	r0, [r7, #56]	; 0x38
	char *HOST_NAME = malloc(sizeof(char) * size);
 8000cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00a f80e 	bl	800ad1c <malloc>
 8000d00:	4603      	mov	r3, r0
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
	snprintf(HOST_NAME, size, "OT-HS-%d", addr_prf);
 8000d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d06:	4619      	mov	r1, r3
 8000d08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d0c:	4a39      	ldr	r2, [pc, #228]	; (8000df4 <appSrpInit+0x134>)
 8000d0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d10:	f00a fc08 	bl	800b524 <sniprintf>
	error |= otSrpClientSetHostName(sInstance, HOST_NAME);
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <appSrpInit+0x130>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f008 ffa6 	bl	8009c6c <otSrpClientSetHostName>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	memcpy(hostName, HOST_NAME, sizeof(HOST_NAME) + 1);
 8000d2e:	2205      	movs	r2, #5
 8000d30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d34:	f00a f802 	bl	800ad3c <memcpy>

	otSrpClientEnableAutoHostAddress(sInstance);
 8000d38:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <appSrpInit+0x130>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f008 ffc6 	bl	8009cce <otSrpClientEnableAutoHostAddress>

	otSrpClientBuffersServiceEntry *entry = NULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
	char *string;

	entry = otSrpClientBuffersAllocateService(sInstance);
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <appSrpInit+0x130>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f009 f84b 	bl	8009de6 <otSrpClientBuffersAllocateService>
 8000d50:	6338      	str	r0, [r7, #48]	; 0x30

	entry->mService.mPort = 33434;
 8000d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d54:	f248 229a 	movw	r2, #33434	; 0x829a
 8000d58:	821a      	strh	r2, [r3, #16]
	char INST_NAME[32];
	snprintf(INST_NAME, 32, "ipv6bc%d", addr_prf);
 8000d5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d5e:	1d38      	adds	r0, r7, #4
 8000d60:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <appSrpInit+0x138>)
 8000d62:	2120      	movs	r1, #32
 8000d64:	f00a fbde 	bl	800b524 <sniprintf>
	char *SERV_NAME = "_ot._udp";
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <appSrpInit+0x13c>)
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	string = otSrpClientBuffersGetServiceEntryInstanceNameString(entry, &size);
 8000d6c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000d70:	4619      	mov	r1, r3
 8000d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d74:	f009 f894 	bl	8009ea0 <otSrpClientBuffersGetServiceEntryInstanceNameString>
 8000d78:	62b8      	str	r0, [r7, #40]	; 0x28
	memcpy(string, INST_NAME, size);
 8000d7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d84:	f009 ffda 	bl	800ad3c <memcpy>

	string = otSrpClientBuffersGetServiceEntryServiceNameString(entry, &size);
 8000d88:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d90:	f009 f853 	bl	8009e3a <otSrpClientBuffersGetServiceEntryServiceNameString>
 8000d94:	62b8      	str	r0, [r7, #40]	; 0x28
	memcpy(string, SERV_NAME, size);
 8000d96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d98:	461a      	mov	r2, r3
 8000d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d9e:	f009 ffcd 	bl	800ad3c <memcpy>

	error |= otSrpClientAddService(sInstance, &entry->mService);
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <appSrpInit+0x130>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f008 ffba 	bl	8009d24 <otSrpClientAddService>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000db8:	4313      	orrs	r3, r2
 8000dba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	entry = NULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
	otSrpClientEnableAutoStartMode(sInstance, /* aCallback */appSrpCb, /* aContext */
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <appSrpInit+0x130>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	490d      	ldr	r1, [pc, #52]	; (8000e00 <appSrpInit+0x140>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f008 ff1a 	bl	8009c04 <otSrpClientEnableAutoStartMode>
			NULL);
	if (error != OT_ERROR_NONE)
 8000dd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <appSrpInit+0x122>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2102      	movs	r1, #2
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <appSrpInit+0x144>)
 8000dde:	f003 feaf 	bl	8004b40 <HAL_GPIO_WritePin>
}
 8000de2:	bf00      	nop
 8000de4:	3748      	adds	r7, #72	; 0x48
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000106 	.word	0x20000106
 8000df0:	20000244 	.word	0x20000244
 8000df4:	0800c12c 	.word	0x0800c12c
 8000df8:	0800c138 	.word	0x0800c138
 8000dfc:	0800c144 	.word	0x0800c144
 8000e00:	08000c9d 	.word	0x08000c9d
 8000e04:	48000800 	.word	0x48000800

08000e08 <APP_THREAD_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN APP_THREAD_Error_1 */

	/* USER CODE END APP_THREAD_Error_1 */
	switch (ErrId)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b16      	cmp	r3, #22
 8000e16:	f200 8081 	bhi.w	8000f1c <APP_THREAD_Error+0x114>
 8000e1a:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <APP_THREAD_Error+0x18>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e7d 	.word	0x08000e7d
 8000e24:	08000e87 	.word	0x08000e87
 8000e28:	08000e91 	.word	0x08000e91
 8000e2c:	08000e9b 	.word	0x08000e9b
 8000e30:	08000ea5 	.word	0x08000ea5
 8000e34:	08000eaf 	.word	0x08000eaf
 8000e38:	08000eb9 	.word	0x08000eb9
 8000e3c:	08000ec3 	.word	0x08000ec3
 8000e40:	08000ed7 	.word	0x08000ed7
 8000e44:	08000ee1 	.word	0x08000ee1
 8000e48:	08000eeb 	.word	0x08000eeb
 8000e4c:	08000ef5 	.word	0x08000ef5
 8000e50:	08000f1d 	.word	0x08000f1d
 8000e54:	08000eff 	.word	0x08000eff
 8000e58:	08000f09 	.word	0x08000f09
 8000e5c:	08000f1d 	.word	0x08000f1d
 8000e60:	08000f1d 	.word	0x08000f1d
 8000e64:	08000f1d 	.word	0x08000f1d
 8000e68:	08000f1d 	.word	0x08000f1d
 8000e6c:	08000f1d 	.word	0x08000f1d
 8000e70:	08000f13 	.word	0x08000f13
 8000e74:	08000f1d 	.word	0x08000f1d
 8000e78:	08000ecd 	.word	0x08000ecd
	{
	case ERR_REC_MULTI_MSG_FROM_M0:
		APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8000e7c:	6839      	ldr	r1, [r7, #0]
 8000e7e:	482c      	ldr	r0, [pc, #176]	; (8000f30 <APP_THREAD_Error+0x128>)
 8000e80:	f000 f97a 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000e84:	e04f      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_STATE_CB:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ", ErrCode);
 8000e86:	6839      	ldr	r1, [r7, #0]
 8000e88:	482a      	ldr	r0, [pc, #168]	; (8000f34 <APP_THREAD_Error+0x12c>)
 8000e8a:	f000 f975 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000e8e:	e04a      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_CHANNEL:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ", ErrCode);
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	4829      	ldr	r0, [pc, #164]	; (8000f38 <APP_THREAD_Error+0x130>)
 8000e94:	f000 f970 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000e98:	e045      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_PANID:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ", ErrCode);
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	4827      	ldr	r0, [pc, #156]	; (8000f3c <APP_THREAD_Error+0x134>)
 8000e9e:	f000 f96b 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000ea2:	e040      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_IPV6_ENABLE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ", ErrCode);
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	4826      	ldr	r0, [pc, #152]	; (8000f40 <APP_THREAD_Error+0x138>)
 8000ea8:	f000 f966 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000eac:	e03b      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_START:
		APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	4824      	ldr	r0, [pc, #144]	; (8000f44 <APP_THREAD_Error+0x13c>)
 8000eb2:	f000 f961 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000eb6:	e036      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_ERASE_PERSISTENT_INFO:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",
 8000eb8:	6839      	ldr	r1, [r7, #0]
 8000eba:	4823      	ldr	r0, [pc, #140]	; (8000f48 <APP_THREAD_Error+0x140>)
 8000ebc:	f000 f95c 	bl	8001178 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000ec0:	e031      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_NETWORK_KEY:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ", ErrCode);
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	4821      	ldr	r0, [pc, #132]	; (8000f4c <APP_THREAD_Error+0x144>)
 8000ec6:	f000 f957 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000eca:	e02c      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_CHECK_WIRELESS:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ", ErrCode);
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	4820      	ldr	r0, [pc, #128]	; (8000f50 <APP_THREAD_Error+0x148>)
 8000ed0:	f000 f952 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000ed4:	e027      	b.n	8000f26 <APP_THREAD_Error+0x11e>
		/* USER CODE BEGIN APP_THREAD_Error_2 */
	case ERR_THREAD_COAP_START:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ", ErrCode);
 8000ed6:	6839      	ldr	r1, [r7, #0]
 8000ed8:	481e      	ldr	r0, [pc, #120]	; (8000f54 <APP_THREAD_Error+0x14c>)
 8000eda:	f000 f94d 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000ede:	e022      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_ADD_RESSOURCE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",
 8000ee0:	6839      	ldr	r1, [r7, #0]
 8000ee2:	481d      	ldr	r0, [pc, #116]	; (8000f58 <APP_THREAD_Error+0x150>)
 8000ee4:	f000 f948 	bl	8001178 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000ee8:	e01d      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_MESSAGE_READ:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ", ErrCode);
 8000eea:	6839      	ldr	r1, [r7, #0]
 8000eec:	481b      	ldr	r0, [pc, #108]	; (8000f5c <APP_THREAD_Error+0x154>)
 8000eee:	f000 f943 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000ef2:	e018      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_SEND_RESPONSE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",
 8000ef4:	6839      	ldr	r1, [r7, #0]
 8000ef6:	481a      	ldr	r0, [pc, #104]	; (8000f60 <APP_THREAD_Error+0x158>)
 8000ef8:	f000 f93e 	bl	8001178 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000efc:	e013      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_APPEND:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ", ErrCode);
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	4818      	ldr	r0, [pc, #96]	; (8000f64 <APP_THREAD_Error+0x15c>)
 8000f02:	f000 f939 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000f06:	e00e      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_SEND_REQUEST:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ", ErrCode);
 8000f08:	6839      	ldr	r1, [r7, #0]
 8000f0a:	4817      	ldr	r0, [pc, #92]	; (8000f68 <APP_THREAD_Error+0x160>)
 8000f0c:	f000 f934 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000f10:	e009      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_MSG_COMPARE_FAILED:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	4815      	ldr	r0, [pc, #84]	; (8000f6c <APP_THREAD_Error+0x164>)
 8000f16:	f000 f92f 	bl	8001178 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000f1a:	e004      	b.n	8000f26 <APP_THREAD_Error+0x11e>
		/* USER CODE END APP_THREAD_Error_2 */
	default:
		APP_THREAD_TraceError("ERROR Unknown ", 0);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4814      	ldr	r0, [pc, #80]	; (8000f70 <APP_THREAD_Error+0x168>)
 8000f20:	f000 f92a 	bl	8001178 <APP_THREAD_TraceError>
		break;
 8000f24:	bf00      	nop
	}
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800c150 	.word	0x0800c150
 8000f34:	0800c174 	.word	0x0800c174
 8000f38:	0800c198 	.word	0x0800c198
 8000f3c:	0800c1b8 	.word	0x0800c1b8
 8000f40:	0800c1d8 	.word	0x0800c1d8
 8000f44:	0800c1f8 	.word	0x0800c1f8
 8000f48:	0800c214 	.word	0x0800c214
 8000f4c:	0800c240 	.word	0x0800c240
 8000f50:	0800c264 	.word	0x0800c264
 8000f54:	0800c288 	.word	0x0800c288
 8000f58:	0800c2a8 	.word	0x0800c2a8
 8000f5c:	0800c2d0 	.word	0x0800c2d0
 8000f60:	0800c2f4 	.word	0x0800c2f4
 8000f64:	0800c31c 	.word	0x0800c31c
 8000f68:	0800c33c 	.word	0x0800c33c
 8000f6c:	0800c364 	.word	0x0800c364
 8000f70:	0800c38c 	.word	0x0800c38c

08000f74 <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
	otError error = OT_ERROR_NONE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]

	/* Set the pool period to 5 sec. It means that when the device will enter
	 * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
	 * This message will act as keep alive message.
	 */
	otLinkSetPollPeriod(sInstance, pollIntervalMs);
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f007 fe37 	bl	8008bfc <otLinkSetPollPeriod>

	/* Set the sleepy end device mode */
	OT_LinkMode.mRxOnWhenIdle = 0;
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <APP_THREAD_SetSleepyEndDeviceMode+0x68>)
 8000f90:	7813      	ldrb	r3, [r2, #0]
 8000f92:	f36f 0300 	bfc	r3, #0, #1
 8000f96:	7013      	strb	r3, [r2, #0]
	OT_LinkMode.mDeviceType = 0;
 8000f98:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <APP_THREAD_SetSleepyEndDeviceMode+0x68>)
 8000f9a:	7813      	ldrb	r3, [r2, #0]
 8000f9c:	f36f 0341 	bfc	r3, #1, #1
 8000fa0:	7013      	strb	r3, [r2, #0]
	OT_LinkMode.mNetworkData = 0;
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <APP_THREAD_SetSleepyEndDeviceMode+0x68>)
 8000fa4:	7813      	ldrb	r3, [r2, #0]
 8000fa6:	f36f 0382 	bfc	r3, #2, #1
 8000faa:	7013      	strb	r3, [r2, #0]

	error = otThreadSetLinkMode(sInstance, OT_LinkMode);
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <APP_THREAD_SetSleepyEndDeviceMode+0x68>)
 8000fb2:	7811      	ldrb	r1, [r2, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f008 ffd6 	bl	8009f66 <otThreadSetLinkMode>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <APP_THREAD_SetSleepyEndDeviceMode+0x5a>
		APP_THREAD_Error(ERR_THREAD_LINK_MODE, error);
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2011      	movs	r0, #17
 8000fca:	f7ff ff1d 	bl	8000e08 <APP_THREAD_Error>

}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000244 	.word	0x20000244
 8000fdc:	200000f4 	.word	0x200000f4

08000fe0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b0a7      	sub	sp, #156	; 0x9c
 8000fe4:	af00      	add	r7, sp, #0
	coapConnectionEstablished = false;
 8000fe6:	4b5b      	ldr	r3, [pc, #364]	; (8001154 <APP_THREAD_DeviceConfig+0x174>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]

	static char aNetworkName[] = "OpenThread X-1";

	otOperationalDataset aDataset;

	memset(&aDataset, 0, sizeof(otOperationalDataset));
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	2278      	movs	r2, #120	; 0x78
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f009 feaf 	bl	800ad58 <memset>
	 * Fields that can be configured in otOperationDataset to override defaults:
	 *     Network Name, Mesh Local Prefix, Extended PAN ID, PAN ID, Delay Timer,
	 *     Channel, Channel Mask Page 0, Network Key, PSKc, Security Policy
	 */
	//aDataset.mActiveTimestamp.mSeconds             = 1;
	aDataset.mComponents.mIsActiveTimestampPresent = true;
 8000ffa:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Channel to 15 */
	aDataset.mChannel = 15;
 8001006:	230f      	movs	r3, #15
 8001008:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	aDataset.mComponents.mIsChannelPresent = true;
 800100c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

	/* Set Pan ID to 2222 */
	aDataset.mPanId = (otPanId) 0xDEAD;
 8001018:	f64d 63ad 	movw	r3, #57005	; 0xdead
 800101c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	aDataset.mComponents.mIsPanIdPresent = true;
 8001020:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001028:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Extended Pan ID to  */
	uint8_t extPanId[OT_EXT_PAN_ID_SIZE] =
 800102c:	4a4a      	ldr	r2, [pc, #296]	; (8001158 <APP_THREAD_DeviceConfig+0x178>)
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001036:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 0x72, 0x53, 0xc0, 0xf9, 0x58, 0xe3, 0x3f, 0x94 };
	memcpy(aDataset.mExtendedPanId.m8, extPanId,
 800103a:	f107 0259 	add.w	r2, r7, #89	; 0x59
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	cb03      	ldmia	r3!, {r0, r1}
 8001044:	6010      	str	r0, [r2, #0]
 8001046:	6051      	str	r1, [r2, #4]
			sizeof(aDataset.mExtendedPanId));
	aDataset.mComponents.mIsExtendedPanIdPresent = true;
 8001048:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set network key to  */
	uint8_t key[OT_NETWORK_KEY_SIZE] =
 8001054:	4b41      	ldr	r3, [pc, #260]	; (800115c <APP_THREAD_DeviceConfig+0x17c>)
 8001056:	463c      	mov	r4, r7
 8001058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{ 0xb3, 0x08, 0x8e, 0x0c, 0x4c, 0x97, 0x70, 0xa9, 0xca, 0x86, 0x85, 0xab,
			0x99, 0xda, 0xc9, 0x51 };
	memcpy(aDataset.mNetworkKey.m8, key, sizeof(aDataset.mNetworkKey));
 800105e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001062:	463b      	mov	r3, r7
 8001064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	aDataset.mComponents.mIsNetworkKeyPresent = true;
 800106a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Network Name */
	size_t length = strlen(aNetworkName);
 8001076:	483a      	ldr	r0, [pc, #232]	; (8001160 <APP_THREAD_DeviceConfig+0x180>)
 8001078:	f7ff f88c 	bl	8000194 <strlen>
 800107c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	assert(length <= OT_NETWORK_NAME_MAX_SIZE);
 8001080:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001084:	2b10      	cmp	r3, #16
 8001086:	d906      	bls.n	8001096 <APP_THREAD_DeviceConfig+0xb6>
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <APP_THREAD_DeviceConfig+0x184>)
 800108a:	4a37      	ldr	r2, [pc, #220]	; (8001168 <APP_THREAD_DeviceConfig+0x188>)
 800108c:	f240 119b 	movw	r1, #411	; 0x19b
 8001090:	4836      	ldr	r0, [pc, #216]	; (800116c <APP_THREAD_DeviceConfig+0x18c>)
 8001092:	f009 fde9 	bl	800ac68 <__assert_func>
	memcpy(aDataset.mNetworkName.m8, aNetworkName, length);
 8001096:	f107 0318 	add.w	r3, r7, #24
 800109a:	3330      	adds	r3, #48	; 0x30
 800109c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80010a0:	492f      	ldr	r1, [pc, #188]	; (8001160 <APP_THREAD_DeviceConfig+0x180>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f009 fe4a 	bl	800ad3c <memcpy>
	aDataset.mComponents.mIsNetworkNamePresent = true;
 80010a8:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	/* Set the Active Operational Dataset to this dataset */
	error = otDatasetSetActive(sInstance, &aDataset);
 80010b4:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <APP_THREAD_DeviceConfig+0x190>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f107 0218 	add.w	r2, r7, #24
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f007 fcc0 	bl	8008a44 <otDatasetSetActive>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	error = otIp6SetEnabled(sInstance, true);
 80010ca:	4b29      	ldr	r3, [pc, #164]	; (8001170 <APP_THREAD_DeviceConfig+0x190>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2101      	movs	r1, #1
 80010d0:	4618      	mov	r0, r3
 80010d2:	f007 fd0f 	bl	8008af4 <otIp6SetEnabled>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 80010dc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <APP_THREAD_DeviceConfig+0x110>
	{
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 80010e4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80010e8:	4619      	mov	r1, r3
 80010ea:	2004      	movs	r0, #4
 80010ec:	f7ff fe8c 	bl	8000e08 <APP_THREAD_Error>
	}
	error = otThreadSetEnabled(sInstance, true);
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <APP_THREAD_DeviceConfig+0x190>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	4618      	mov	r0, r3
 80010f8:	f008 ff05 	bl	8009f06 <otThreadSetEnabled>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 8001102:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <APP_THREAD_DeviceConfig+0x136>
	{
		APP_THREAD_Error(ERR_THREAD_START, error);
 800110a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800110e:	4619      	mov	r1, r3
 8001110:	2005      	movs	r0, #5
 8001112:	f7ff fe79 	bl	8000e08 <APP_THREAD_Error>
	}
	/* USER CODE BEGIN DEVICECONFIG */
	/* Start the COAP server */
	error = otCoapStart(sInstance, OT_DEFAULT_COAP_PORT);
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <APP_THREAD_DeviceConfig+0x190>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f241 6133 	movw	r1, #5683	; 0x1633
 800111e:	4618      	mov	r0, r3
 8001120:	f007 fbfd 	bl	800891e <otCoapStart>
 8001124:	4603      	mov	r3, r0
 8001126:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 800112a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <APP_THREAD_DeviceConfig+0x15e>
	{
		APP_THREAD_Error(ERR_THREAD_COAP_START, error);
 8001132:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001136:	4619      	mov	r1, r3
 8001138:	2008      	movs	r0, #8
 800113a:	f7ff fe65 	bl	8000e08 <APP_THREAD_Error>
	}
	/* Add COAP resources */
	otCoapAddResource(sInstance, &OT_Ressource);
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <APP_THREAD_DeviceConfig+0x190>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	490c      	ldr	r1, [pc, #48]	; (8001174 <APP_THREAD_DeviceConfig+0x194>)
 8001144:	4618      	mov	r0, r3
 8001146:	f007 fc1a 	bl	800897e <otCoapAddResource>

	/* USER CODE END DEVICECONFIG */
}
 800114a:	bf00      	nop
 800114c:	379c      	adds	r7, #156	; 0x9c
 800114e:	46bd      	mov	sp, r7
 8001150:	bd90      	pop	{r4, r7, pc}
 8001152:	bf00      	nop
 8001154:	20000240 	.word	0x20000240
 8001158:	0800c3c0 	.word	0x0800c3c0
 800115c:	0800c3c8 	.word	0x0800c3c8
 8001160:	2000001c 	.word	0x2000001c
 8001164:	0800c39c 	.word	0x0800c39c
 8001168:	0800c628 	.word	0x0800c628
 800116c:	0800c0dc 	.word	0x0800c0dc
 8001170:	20000244 	.word	0x20000244
 8001174:	2000000c 	.word	0x2000000c

08001178 <APP_THREAD_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
 * @retval None
 */
static void APP_THREAD_TraceError(const char *pMess, uint32_t ErrCode)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN TRACE_ERROR */
	//APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
	/* USER CODE END TRACE_ERROR */
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
	WirelessFwInfo_t wireless_info_instance;
	WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	617b      	str	r3, [r7, #20]

	if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f008 fb50 	bl	8009840 <SHCI_GetWirelessFwInfo>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
	{
		APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS,
 80011a6:	2101      	movs	r1, #1
 80011a8:	2016      	movs	r0, #22
 80011aa:	f7ff fe2d 	bl	8000e08 <APP_THREAD_Error>
					(uint32_t) ERR_INTERFACE_FATAL);
			break;
		}
		APP_DBG("**********************************************************");
	}
}
 80011ae:	e026      	b.n	80011fe <APP_THREAD_CheckWirelessFirmwareInfo+0x6e>
		switch (p_wireless_info->StackType)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	7a5b      	ldrb	r3, [r3, #9]
 80011b4:	2b50      	cmp	r3, #80	; 0x50
 80011b6:	d012      	beq.n	80011de <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
 80011b8:	2b50      	cmp	r3, #80	; 0x50
 80011ba:	dc16      	bgt.n	80011ea <APP_THREAD_CheckWirelessFirmwareInfo+0x5a>
 80011bc:	2b10      	cmp	r3, #16
 80011be:	d002      	beq.n	80011c6 <APP_THREAD_CheckWirelessFirmwareInfo+0x36>
 80011c0:	2b11      	cmp	r3, #17
 80011c2:	d006      	beq.n	80011d2 <APP_THREAD_CheckWirelessFirmwareInfo+0x42>
 80011c4:	e011      	b.n	80011ea <APP_THREAD_CheckWirelessFirmwareInfo+0x5a>
			APP_DBG("FW Type : Thread FTD")
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <APP_THREAD_CheckWirelessFirmwareInfo+0x78>)
 80011c8:	2101      	movs	r1, #1
 80011ca:	2000      	movs	r0, #0
 80011cc:	f002 fe52 	bl	8003e74 <logApplication>
			break;
 80011d0:	e010      	b.n	80011f4 <APP_THREAD_CheckWirelessFirmwareInfo+0x64>
			APP_DBG("FW Type : Thread MTD")
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>)
 80011d4:	2101      	movs	r1, #1
 80011d6:	2000      	movs	r0, #0
 80011d8:	f002 fe4c 	bl	8003e74 <logApplication>
			break;
 80011dc:	e00a      	b.n	80011f4 <APP_THREAD_CheckWirelessFirmwareInfo+0x64>
			APP_DBG("FW Type : Static Concurrent Mode BLE/Thread")
 80011de:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <APP_THREAD_CheckWirelessFirmwareInfo+0x80>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	2000      	movs	r0, #0
 80011e4:	f002 fe46 	bl	8003e74 <logApplication>
			break;
 80011e8:	e004      	b.n	80011f4 <APP_THREAD_CheckWirelessFirmwareInfo+0x64>
			APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS,
 80011ea:	2101      	movs	r1, #1
 80011ec:	2016      	movs	r0, #22
 80011ee:	f7ff fe0b 	bl	8000e08 <APP_THREAD_Error>
			break;
 80011f2:	bf00      	nop
		APP_DBG("**********************************************************");
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <APP_THREAD_CheckWirelessFirmwareInfo+0x84>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	2000      	movs	r0, #0
 80011fa:	f002 fe3b 	bl	8003e74 <logApplication>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	0800c3d8 	.word	0x0800c3d8
 800120c:	0800c3f0 	.word	0x0800c3f0
 8001210:	0800c408 	.word	0x0800c408
 8001214:	0800c434 	.word	0x0800c434

08001218 <APP_THREAD_CoapPermissionsRequestHandler>:
 */

static void APP_THREAD_CoapPermissionsRequestHandler(void *pContext,
		otMessage *pMessage, const otMessageInfo *pMessageInfo)

{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 8001224:	2100      	movs	r1, #0
 8001226:	2001      	movs	r0, #1
 8001228:	f008 faeb 	bl	8009802 <SHCI_C2_RADIO_AllowLowPower>
	coapConnectionEstablished = true;
 800122c:	4b39      	ldr	r3, [pc, #228]	; (8001314 <APP_THREAD_CoapPermissionsRequestHandler+0xfc>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2102      	movs	r1, #2
 8001236:	4838      	ldr	r0, [pc, #224]	; (8001318 <APP_THREAD_CoapPermissionsRequestHandler+0x100>)
 8001238:	f003 fc82 	bl	8004b40 <HAL_GPIO_WritePin>
	/* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
	//printIPv6Addr(&aMessageInfo->mPeerAddr);
	brAddr = pMessageInfo->mPeerAddr;
 800123c:	4a37      	ldr	r2, [pc, #220]	; (800131c <APP_THREAD_CoapPermissionsRequestHandler+0x104>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4614      	mov	r4, r2
 8001242:	3310      	adds	r3, #16
 8001244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	otError error = OT_ERROR_NONE;
 800124a:	2300      	movs	r3, #0
 800124c:	77fb      	strb	r3, [r7, #31]
	otMessage *responseMessage;
	otCoapCode responseCode = OT_COAP_CODE_CHANGED;
 800124e:	2344      	movs	r3, #68	; 0x44
 8001250:	77bb      	strb	r3, [r7, #30]
	otCoapCode messageCode = otCoapMessageGetCode(pMessage);
 8001252:	68b8      	ldr	r0, [r7, #8]
 8001254:	f007 fa6d 	bl	8008732 <otCoapMessageGetCode>
 8001258:	4603      	mov	r3, r0
 800125a:	777b      	strb	r3, [r7, #29]

	responseMessage = otCoapNewMessage((otInstance*) pContext, NULL);
 800125c:	2100      	movs	r1, #0
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f007 f8ff 	bl	8008462 <otCoapNewMessage>
 8001264:	61b8      	str	r0, [r7, #24]

	otCoapMessageInitResponse(responseMessage, pMessage,
 8001266:	7fbb      	ldrb	r3, [r7, #30]
 8001268:	2202      	movs	r2, #2
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	69b8      	ldr	r0, [r7, #24]
 800126e:	f007 f95b 	bl	8008528 <otCoapMessageInitResponse>
			OT_COAP_TYPE_ACKNOWLEDGMENT, responseCode);
	otCoapMessageSetToken(responseMessage, otCoapMessageGetToken(pMessage),
 8001272:	68b8      	ldr	r0, [r7, #8]
 8001274:	f007 fae9 	bl	800884a <otCoapMessageGetToken>
 8001278:	4604      	mov	r4, r0
 800127a:	68b8      	ldr	r0, [r7, #8]
 800127c:	f007 fab7 	bl	80087ee <otCoapMessageGetTokenLength>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4621      	mov	r1, r4
 8001286:	69b8      	ldr	r0, [r7, #24]
 8001288:	f007 f98c 	bl	80085a4 <otCoapMessageSetToken>
			otCoapMessageGetTokenLength(pMessage));
	otCoapMessageSetPayloadMarker(responseMessage);
 800128c:	69b8      	ldr	r0, [r7, #24]
 800128e:	f007 fa22 	bl	80086d6 <otCoapMessageSetPayloadMarker>

	uint16_t offset = otMessageGetOffset(pMessage);
 8001292:	68b8      	ldr	r0, [r7, #8]
 8001294:	f007 fd0e 	bl	8008cb4 <otMessageGetOffset>
 8001298:	4603      	mov	r3, r0
 800129a:	82fb      	strh	r3, [r7, #22]
	otMessageRead(pMessage, offset, resource_name, sizeof(resource_name) - 1);
 800129c:	8af9      	ldrh	r1, [r7, #22]
 800129e:	231f      	movs	r3, #31
 80012a0:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <APP_THREAD_CoapPermissionsRequestHandler+0x108>)
 80012a2:	68b8      	ldr	r0, [r7, #8]
 80012a4:	f007 fd6f 	bl	8008d86 <otMessageRead>

	if (OT_COAP_CODE_GET == messageCode)
 80012a8:	7f7b      	ldrb	r3, [r7, #29]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10e      	bne.n	80012cc <APP_THREAD_CoapPermissionsRequestHandler+0xb4>
	{

		error = otMessageAppend(responseMessage, "ack", 3);
 80012ae:	2203      	movs	r2, #3
 80012b0:	491c      	ldr	r1, [pc, #112]	; (8001324 <APP_THREAD_CoapPermissionsRequestHandler+0x10c>)
 80012b2:	69b8      	ldr	r0, [r7, #24]
 80012b4:	f007 fd2e 	bl	8008d14 <otMessageAppend>
 80012b8:	4603      	mov	r3, r0
 80012ba:	77fb      	strb	r3, [r7, #31]
		error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff fc4d 	bl	8000b60 <otCoapSendResponse>
 80012c6:	4603      	mov	r3, r0
 80012c8:	77fb      	strb	r3, [r7, #31]
 80012ca:	e011      	b.n	80012f0 <APP_THREAD_CoapPermissionsRequestHandler+0xd8>
				pMessageInfo);
	}
	else
	{
		error = otMessageAppend(responseMessage, "nack", 4);
 80012cc:	2204      	movs	r2, #4
 80012ce:	4916      	ldr	r1, [pc, #88]	; (8001328 <APP_THREAD_CoapPermissionsRequestHandler+0x110>)
 80012d0:	69b8      	ldr	r0, [r7, #24]
 80012d2:	f007 fd1f 	bl	8008d14 <otMessageAppend>
 80012d6:	4603      	mov	r3, r0
 80012d8:	77fb      	strb	r3, [r7, #31]
		otCoapMessageSetCode(responseMessage, OT_COAP_CODE_METHOD_NOT_ALLOWED);
 80012da:	2185      	movs	r1, #133	; 0x85
 80012dc:	69b8      	ldr	r0, [r7, #24]
 80012de:	f007 fa56 	bl	800878e <otCoapMessageSetCode>
		error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff fc3a 	bl	8000b60 <otCoapSendResponse>
 80012ec:	4603      	mov	r3, r0
 80012ee:	77fb      	strb	r3, [r7, #31]
				pMessageInfo);
	}

	if (error != OT_ERROR_NONE && responseMessage != NULL)
 80012f0:	7ffb      	ldrb	r3, [r7, #31]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <APP_THREAD_CoapPermissionsRequestHandler+0xea>
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <APP_THREAD_CoapPermissionsRequestHandler+0xea>
	{
		otMessageFree(responseMessage);
 80012fc:	69b8      	ldr	r0, [r7, #24]
 80012fe:	f007 fcac 	bl	8008c5a <otMessageFree>
	}

	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8001302:	2101      	movs	r1, #1
 8001304:	2001      	movs	r0, #1
 8001306:	f008 fa7c 	bl	8009802 <SHCI_C2_RADIO_AllowLowPower>
}
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}
 8001312:	bf00      	nop
 8001314:	20000240 	.word	0x20000240
 8001318:	48000800 	.word	0x48000800
 800131c:	20000228 	.word	0x20000228
 8001320:	20000208 	.word	0x20000208
 8001324:	0800c470 	.word	0x0800c470
 8001328:	0800c474 	.word	0x0800c474

0800132c <APP_THREAD_SendCoapMsg>:
 * @brief Task associated to the push button.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(char *buf)
{
 800132c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132e:	b0ab      	sub	sp, #172	; 0xac
 8001330:	af0e      	add	r7, sp, #56	; 0x38
 8001332:	61f8      	str	r0, [r7, #28]
	if (!coapConnectionEstablished
 8001334:	4b88      	ldr	r3, [pc, #544]	; (8001558 <APP_THREAD_SendCoapMsg+0x22c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f083 0301 	eor.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <APP_THREAD_SendCoapMsg+0x28>
			&& otThreadGetDeviceRole(sInstance) != OT_DEVICE_ROLE_CHILD)
 8001342:	4b86      	ldr	r3, [pc, #536]	; (800155c <APP_THREAD_SendCoapMsg+0x230>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f008 fe4e 	bl	8009fe8 <otThreadGetDeviceRole>
 800134c:	4603      	mov	r3, r0
 800134e:	2b02      	cmp	r3, #2
 8001350:	f040 80fe 	bne.w	8001550 <APP_THREAD_SendCoapMsg+0x224>
		return;
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 8001354:	2100      	movs	r1, #0
 8001356:	2001      	movs	r0, #1
 8001358:	f008 fa53 	bl	8009802 <SHCI_C2_RADIO_AllowLowPower>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	2102      	movs	r1, #2
 8001360:	487f      	ldr	r0, [pc, #508]	; (8001560 <APP_THREAD_SendCoapMsg+0x234>)
 8001362:	f003 fbed 	bl	8004b40 <HAL_GPIO_WritePin>
	//SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);

	sht4x_read(&sensor_data.temp_main, &sensor_data.humidity);
 8001366:	497f      	ldr	r1, [pc, #508]	; (8001564 <APP_THREAD_SendCoapMsg+0x238>)
 8001368:	487f      	ldr	r0, [pc, #508]	; (8001568 <APP_THREAD_SendCoapMsg+0x23c>)
 800136a:	f7ff f927 	bl	80005bc <sht4x_read>
	stts22h_temperature_raw_get(&sensor_data.temp_aux);
 800136e:	487f      	ldr	r0, [pc, #508]	; (800156c <APP_THREAD_SendCoapMsg+0x240>)
 8001370:	f7ff fac9 	bl	8000906 <stts22h_temperature_raw_get>

	int8_t state;
	int8_t ret = app_algo_proc(sensor_data, false, &state);
 8001374:	4a7b      	ldr	r2, [pc, #492]	; (8001564 <APP_THREAD_SendCoapMsg+0x238>)
 8001376:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2300      	movs	r3, #0
 800137e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001380:	f000 fdc0 	bl	8001f04 <app_algo_proc>
 8001384:	4603      	mov	r3, r0
 8001386:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (ret == RES_HEAT)
 800138a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <APP_THREAD_SendCoapMsg+0x6a>
		sht4x_activate_medium_heater();
 8001392:	f7ff f8c3 	bl	800051c <sht4x_activate_medium_heater>
	int8_t rssi;
	otThreadGetParentLastRssi(sInstance, &rssi);
 8001396:	4b71      	ldr	r3, [pc, #452]	; (800155c <APP_THREAD_SendCoapMsg+0x230>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f008 fe4a 	bl	800a03a <otThreadGetParentLastRssi>
	 * humidity (int32_t): radar presence score
	 * temp_aux (int16_t): radar presence distance
	 * rssi (int8_t): last rssi from parent
	 * appCoapSendTxCtr (uint32_t): total CoAP transmissions
	 */
	snprintf(tmp_tx_buf, 254,
 80013a6:	2301      	movs	r3, #1
 80013a8:	469c      	mov	ip, r3
			"%d,%02x%02x%02x%02x%02x%02x%02x%02x,%ld,%ld,%ld,%d,%ld,%d",
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[2], eui64.m8[3],
 80013aa:	4b71      	ldr	r3, [pc, #452]	; (8001570 <APP_THREAD_SendCoapMsg+0x244>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
	snprintf(tmp_tx_buf, 254,
 80013ae:	461c      	mov	r4, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[2], eui64.m8[3],
 80013b0:	4b6f      	ldr	r3, [pc, #444]	; (8001570 <APP_THREAD_SendCoapMsg+0x244>)
 80013b2:	785b      	ldrb	r3, [r3, #1]
	snprintf(tmp_tx_buf, 254,
 80013b4:	461d      	mov	r5, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[2], eui64.m8[3],
 80013b6:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <APP_THREAD_SendCoapMsg+0x244>)
 80013b8:	789b      	ldrb	r3, [r3, #2]
	snprintf(tmp_tx_buf, 254,
 80013ba:	461e      	mov	r6, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[2], eui64.m8[3],
 80013bc:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <APP_THREAD_SendCoapMsg+0x244>)
 80013be:	78db      	ldrb	r3, [r3, #3]
	snprintf(tmp_tx_buf, 254,
 80013c0:	61bb      	str	r3, [r7, #24]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80013c2:	4b6b      	ldr	r3, [pc, #428]	; (8001570 <APP_THREAD_SendCoapMsg+0x244>)
 80013c4:	791b      	ldrb	r3, [r3, #4]
	snprintf(tmp_tx_buf, 254,
 80013c6:	617b      	str	r3, [r7, #20]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80013c8:	4b69      	ldr	r3, [pc, #420]	; (8001570 <APP_THREAD_SendCoapMsg+0x244>)
 80013ca:	795b      	ldrb	r3, [r3, #5]
	snprintf(tmp_tx_buf, 254,
 80013cc:	613b      	str	r3, [r7, #16]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80013ce:	4b68      	ldr	r3, [pc, #416]	; (8001570 <APP_THREAD_SendCoapMsg+0x244>)
 80013d0:	799b      	ldrb	r3, [r3, #6]
	snprintf(tmp_tx_buf, 254,
 80013d2:	60fb      	str	r3, [r7, #12]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80013d4:	4b66      	ldr	r3, [pc, #408]	; (8001570 <APP_THREAD_SendCoapMsg+0x244>)
 80013d6:	79db      	ldrb	r3, [r3, #7]
	snprintf(tmp_tx_buf, 254,
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b62      	ldr	r3, [pc, #392]	; (8001564 <APP_THREAD_SendCoapMsg+0x238>)
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	4b61      	ldr	r3, [pc, #388]	; (8001564 <APP_THREAD_SendCoapMsg+0x238>)
 80013e0:	6819      	ldr	r1, [r3, #0]
			sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux,
 80013e2:	4b60      	ldr	r3, [pc, #384]	; (8001564 <APP_THREAD_SendCoapMsg+0x238>)
 80013e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	snprintf(tmp_tx_buf, 254,
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	f997 3064 	ldrsb.w	r3, [r7, #100]	; 0x64
 80013f4:	4618      	mov	r0, r3
 80013f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013fa:	930d      	str	r3, [sp, #52]	; 0x34
 80013fc:	900c      	str	r0, [sp, #48]	; 0x30
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	900b      	str	r0, [sp, #44]	; 0x2c
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	900a      	str	r0, [sp, #40]	; 0x28
 8001406:	9109      	str	r1, [sp, #36]	; 0x24
 8001408:	9208      	str	r2, [sp, #32]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	9207      	str	r2, [sp, #28]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	9206      	str	r2, [sp, #24]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	9205      	str	r2, [sp, #20]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	9204      	str	r2, [sp, #16]
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	9303      	str	r3, [sp, #12]
 800141e:	9602      	str	r6, [sp, #8]
 8001420:	9501      	str	r5, [sp, #4]
 8001422:	9400      	str	r4, [sp, #0]
 8001424:	4663      	mov	r3, ip
 8001426:	4a53      	ldr	r2, [pc, #332]	; (8001574 <APP_THREAD_SendCoapMsg+0x248>)
 8001428:	21fe      	movs	r1, #254	; 0xfe
 800142a:	4853      	ldr	r0, [pc, #332]	; (8001578 <APP_THREAD_SendCoapMsg+0x24c>)
 800142c:	f00a f87a 	bl	800b524 <sniprintf>
			rssi, state, ret);
	buf = tmp_tx_buf;
 8001430:	4b51      	ldr	r3, [pc, #324]	; (8001578 <APP_THREAD_SendCoapMsg+0x24c>)
 8001432:	61fb      	str	r3, [r7, #28]
	APP_DBG("In appthread handler temp:%d hum:%d temp_aux:%d",
 8001434:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <APP_THREAD_SendCoapMsg+0x238>)
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <APP_THREAD_SendCoapMsg+0x238>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4949      	ldr	r1, [pc, #292]	; (8001564 <APP_THREAD_SendCoapMsg+0x238>)
 800143e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8001442:	9101      	str	r1, [sp, #4]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4613      	mov	r3, r2
 8001448:	4a4c      	ldr	r2, [pc, #304]	; (800157c <APP_THREAD_SendCoapMsg+0x250>)
 800144a:	2101      	movs	r1, #1
 800144c:	2000      	movs	r0, #0
 800144e:	f002 fd11 	bl	8003e74 <logApplication>
			sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux);
	otError error = OT_ERROR_NONE;
 8001452:	2300      	movs	r3, #0
 8001454:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	otMessage *message = NULL;
 8001458:	2300      	movs	r3, #0
 800145a:	66bb      	str	r3, [r7, #104]	; 0x68
	otMessageInfo messageInfo;
	uint16_t payloadLength = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	// Default parameters
	otCoapType coapType = OT_COAP_TYPE_NON_CONFIRMABLE;
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	otIp6Address coapDestinationIp = brAddr;
 8001468:	4b45      	ldr	r3, [pc, #276]	; (8001580 <APP_THREAD_SendCoapMsg+0x254>)
 800146a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800146e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	message = otCoapNewMessage(sInstance, NULL);
 8001474:	4b39      	ldr	r3, [pc, #228]	; (800155c <APP_THREAD_SendCoapMsg+0x230>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f006 fff1 	bl	8008462 <otCoapNewMessage>
 8001480:	66b8      	str	r0, [r7, #104]	; 0x68

	otCoapMessageInit(message, coapType, OT_COAP_CODE_PUT);
 8001482:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001486:	2203      	movs	r2, #3
 8001488:	4619      	mov	r1, r3
 800148a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800148c:	f007 f817 	bl	80084be <otCoapMessageInit>
	otCoapMessageGenerateToken(message, OT_COAP_DEFAULT_TOKEN_LENGTH);
 8001490:	2102      	movs	r1, #2
 8001492:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001494:	f007 f8bd 	bl	8008612 <otCoapMessageGenerateToken>
	error = otCoapMessageAppendUriPathOptions(message, resource_name);
 8001498:	493a      	ldr	r1, [pc, #232]	; (8001584 <APP_THREAD_SendCoapMsg+0x258>)
 800149a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800149c:	f007 f8e9 	bl	8008672 <otCoapMessageAppendUriPathOptions>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	payloadLength = strlen(buf);
 80014a6:	69f8      	ldr	r0, [r7, #28]
 80014a8:	f7fe fe74 	bl	8000194 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	if (payloadLength > 0)
 80014b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <APP_THREAD_SendCoapMsg+0x19a>
	{
		error = otCoapMessageSetPayloadMarker(message);
 80014ba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80014bc:	f007 f90b 	bl	80086d6 <otCoapMessageSetPayloadMarker>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	}

	// Embed content into message if given
	if (payloadLength > 0)
 80014c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <APP_THREAD_SendCoapMsg+0x1b6>
	{
		error = otMessageAppend(message, buf, payloadLength);
 80014ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80014d2:	461a      	mov	r2, r3
 80014d4:	69f9      	ldr	r1, [r7, #28]
 80014d6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80014d8:	f007 fc1c 	bl	8008d14 <otMessageAppend>
 80014dc:	4603      	mov	r3, r0
 80014de:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	}

	memset(&messageInfo, 0, sizeof(messageInfo));
 80014e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014e6:	222c      	movs	r2, #44	; 0x2c
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f009 fc34 	bl	800ad58 <memset>
	messageInfo.mPeerAddr = coapDestinationIp;
 80014f0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	messageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 80014fe:	f241 6333 	movw	r3, #5683	; 0x1633
 8001502:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	error = otCoapSendRequestWithParameters(sInstance, message, &messageInfo,
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <APP_THREAD_SendCoapMsg+0x230>)
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800150e:	2300      	movs	r3, #0
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	2300      	movs	r3, #0
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2300      	movs	r3, #0
 8001518:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800151a:	f007 f9c3 	bl	80088a4 <otCoapSendRequestWithParameters>
 800151e:	4603      	mov	r3, r0
 8001520:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	NULL,
	NULL,
	NULL);

	if ((error != OT_ERROR_NONE) && (message != NULL))
 8001524:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <APP_THREAD_SendCoapMsg+0x20c>
 800152c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <APP_THREAD_SendCoapMsg+0x20c>
	{
		otMessageFree(message);
 8001532:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001534:	f007 fb91 	bl	8008c5a <otMessageFree>
	}
	sht4x_measure();
 8001538:	f7ff f832 	bl	80005a0 <sht4x_measure>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2102      	movs	r1, #2
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <APP_THREAD_SendCoapMsg+0x234>)
 8001542:	f003 fafd 	bl	8004b40 <HAL_GPIO_WritePin>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8001546:	2101      	movs	r1, #1
 8001548:	2001      	movs	r0, #1
 800154a:	f008 f95a 	bl	8009802 <SHCI_C2_RADIO_AllowLowPower>
 800154e:	e000      	b.n	8001552 <APP_THREAD_SendCoapMsg+0x226>
		return;
 8001550:	bf00      	nop
}
 8001552:	3774      	adds	r7, #116	; 0x74
 8001554:	46bd      	mov	sp, r7
 8001556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001558:	20000240 	.word	0x20000240
 800155c:	20000244 	.word	0x20000244
 8001560:	48000800 	.word	0x48000800
 8001564:	200005a0 	.word	0x200005a0
 8001568:	200005a4 	.word	0x200005a4
 800156c:	200005a8 	.word	0x200005a8
 8001570:	20000238 	.word	0x20000238
 8001574:	0800c47c 	.word	0x0800c47c
 8001578:	20000108 	.word	0x20000108
 800157c:	0800c4b8 	.word	0x0800c4b8
 8001580:	20000228 	.word	0x20000228
 8001584:	20000208 	.word	0x20000208

08001588 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	p_thread_otcmdbuffer = p_buffer;
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200000f8 	.word	0x200000f8

080015a8 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	330c      	adds	r3, #12
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	200000f8 	.word	0x200000f8

080015c0 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) ((TL_EvtPacket_t*) p_thread_otcmdbuffer)->evtserial.evt.payload;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	330b      	adds	r3, #11
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	200000f8 	.word	0x200000f8

080015d8 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) (p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <THREAD_Get_NotificationPayloadBuffer+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	330b      	adds	r3, #11
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	200000fc 	.word	0x200000fc

080015f0 <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

	/* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
	p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <Ot_Cmd_Transfer_Common+0x44>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001600:	725a      	strb	r2, [r3, #9]
 8001602:	2200      	movs	r2, #0
 8001604:	f042 0202 	orr.w	r2, r2, #2
 8001608:	729a      	strb	r2, [r3, #10]
	/* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
	 * + ID (4 bytes) + Size (4 bytes) */
	uint32_t l_size =
			((Thread_OT_Cmd_Request_t*) (p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <Ot_Cmd_Transfer_Common+0x44>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	330c      	adds	r3, #12
 8001610:	685b      	ldr	r3, [r3, #4]
					* 4U + 8U;
 8001612:	3302      	adds	r3, #2
	uint32_t l_size =
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	607b      	str	r3, [r7, #4]
	p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <Ot_Cmd_Transfer_Common+0x44>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	72da      	strb	r2, [r3, #11]

	TL_OT_SendCmd();
 8001622:	f008 fe51 	bl	800a2c8 <TL_OT_SendCmd>

	/* Wait completion of cmd */
	Wait_Getting_Ack_From_M0();
 8001626:	f000 f840 	bl	80016aa <Wait_Getting_Ack_From_M0>

}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200000f8 	.word	0x200000f8

08001638 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	Ot_Cmd_Transfer_Common();
 800163c:	f7ff ffd8 	bl	80015f0 <Ot_Cmd_Transfer_Common>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <Ot_Cmd_TransferWithNotif>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_TransferWithNotif(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	/* Flag to specify to UTIL_SEQ_EvtIdle that M0 to M4 notifications are allowed */
	g_ot_notification_allowed = 1U;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <Ot_Cmd_TransferWithNotif+0x14>)
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]

	Ot_Cmd_Transfer_Common();
 800164e:	f7ff ffcf 	bl	80015f0 <Ot_Cmd_Transfer_Common>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000258 	.word	0x20000258

0800165c <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(Otbuffer);

	Receive_Ack_From_M0();
 8001664:	f000 f828 	bl	80016b8 <Receive_Ack_From_M0>

	/* Does not allow OpenThread M0 to M4 notification */
	g_ot_notification_allowed = 0U;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <TL_OT_CmdEvtReceived+0x1c>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000258 	.word	0x20000258

0800167c <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	p_thread_notif_M0_to_M4 = Notbuffer;
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <TL_THREAD_NotReceived+0x1c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]

	Receive_Notification_From_M0();
 800168a:	f000 f81d 	bl	80016c8 <Receive_Notification_From_M0>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000fc 	.word	0x200000fc

0800169c <Pre_OtCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_OtCmdProcessing(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

	UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80016a0:	2004      	movs	r0, #4
 80016a2:	f009 f98f 	bl	800a9c4 <UTIL_SEQ_WaitEvt>

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}

080016aa <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
	UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 80016ae:	2002      	movs	r0, #2
 80016b0:	f009 f988 	bl	800a9c4 <UTIL_SEQ_WaitEvt>
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 80016bc:	2002      	movs	r0, #2
 80016be:	f009 f961 	bl	800a984 <UTIL_SEQ_SetEvt>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	CptReceiveMsgFromM0++;
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <Receive_Notification_From_M0+0x1c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <Receive_Notification_From_M0+0x1c>)
 80016d4:	6013      	str	r3, [r2, #0]
	UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80016d6:	2100      	movs	r1, #0
 80016d8:	2001      	movs	r0, #1
 80016da:	f009 f927 	bl	800a92c <UTIL_SEQ_SetTask>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000100 	.word	0x20000100

080016e8 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static inline void Send_CLI_Ack_For_OT(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

	/* Notify M0 that characters have been sent to UART */
	TL_THREAD_CliSendAck();
 80016ec:	f008 fe08 	bl	800a300 <TL_THREAD_CliSendAck>

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
	MX_LPUART1_UART_Init();
	HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*) &ThreadOtCmdBuffer;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <APP_THREAD_TL_THREAD_INIT+0x28>)
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 800170c:	601a      	str	r2, [r3, #0]
	ThreadConfigBuffer.p_ThreadNotAckBuffer =
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001710:	4a08      	ldr	r2, [pc, #32]	; (8001734 <APP_THREAD_TL_THREAD_INIT+0x30>)
 8001712:	609a      	str	r2, [r3, #8]
			(uint8_t*) ThreadNotifRspEvtBuffer;
	ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*) &ThreadCliCmdBuffer;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <APP_THREAD_TL_THREAD_INIT+0x34>)
 8001718:	605a      	str	r2, [r3, #4]
	ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*) &ThreadCliNotBuffer;
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <APP_THREAD_TL_THREAD_INIT+0x28>)
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <APP_THREAD_TL_THREAD_INIT+0x38>)
 800171e:	60da      	str	r2, [r3, #12]

	TL_THREAD_Init(&ThreadConfigBuffer);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001722:	f008 fdb1 	bl	800a288 <TL_THREAD_Init>
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20030028 	.word	0x20030028
 8001730:	200300e8 	.word	0x200300e8
 8001734:	200301f4 	.word	0x200301f4
 8001738:	20030300 	.word	0x20030300
 800173c:	2003040c 	.word	0x2003040c

08001740 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived(TL_EvtPacket_t *Notbuffer)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	TL_CmdPacket_t *l_CliBuffer = (TL_CmdPacket_t*) Notbuffer;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	60fb      	str	r3, [r7, #12]
	uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	7adb      	ldrb	r3, [r3, #11]
 8001750:	72fb      	strb	r3, [r7, #11]

	/* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
	if (strcmp((const char*) l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	330c      	adds	r3, #12
 8001756:	490b      	ldr	r1, [pc, #44]	; (8001784 <TL_THREAD_CliNotReceived+0x44>)
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fd11 	bl	8000180 <strcmp>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d009      	beq.n	8001778 <TL_THREAD_CliNotReceived+0x38>
	{
		/* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
		HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload,
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f103 010c 	add.w	r1, r3, #12
 800176a:	7afb      	ldrb	r3, [r7, #11]
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <TL_THREAD_CliNotReceived+0x48>)
 8001770:	2002      	movs	r0, #2
 8001772:	f001 fd53 	bl	800321c <HW_UART_Transmit_IT>
	}
	else
	{
		Send_CLI_Ack_For_OT();
	}
}
 8001776:	e001      	b.n	800177c <TL_THREAD_CliNotReceived+0x3c>
		Send_CLI_Ack_For_OT();
 8001778:	f7ff ffb6 	bl	80016e8 <Send_CLI_Ack_For_OT>
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	0800c4e8 	.word	0x0800c4e8
 8001788:	0800178d 	.word	0x0800178d

0800178c <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	Send_CLI_Ack_For_OT();
 8001790:	f7ff ffaa 	bl	80016e8 <Send_CLI_Ack_For_OT>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	if (CptReceiveMsgFromM0 != 0)
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00d      	beq.n	80017c0 <APP_THREAD_ProcessMsgM0ToM4+0x28>
	{
		/* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
		if (CptReceiveMsgFromM0 > 1U)
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d904      	bls.n	80017b6 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
		{
			APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80017ac:	2100      	movs	r1, #0
 80017ae:	2000      	movs	r0, #0
 80017b0:	f7ff fb2a 	bl	8000e08 <APP_THREAD_Error>
 80017b4:	e001      	b.n	80017ba <APP_THREAD_ProcessMsgM0ToM4+0x22>
		}
		else
		{
			OpenThread_CallBack_Processing();
 80017b6:	f007 fb25 	bl	8008e04 <OpenThread_CallBack_Processing>
		}
		/* Reset counter */
		CptReceiveMsgFromM0 = 0;
 80017ba:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
	}
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000100 	.word	0x20000100

080017c8 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <LL_PWR_EnableBootC2+0x1c>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <LL_PWR_EnableBootC2+0x1c>)
 80017d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	58000400 	.word	0x58000400

080017e8 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80017f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80017f6:	4905      	ldr	r1, [pc, #20]	; (800180c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	58000800 	.word	0x58000800

08001810 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800181a:	6a1a      	ldr	r2, [r3, #32]
 800181c:	4904      	ldr	r1, [pc, #16]	; (8001830 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	620b      	str	r3, [r1, #32]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	58000800 	.word	0x58000800

08001834 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001858:	68fb      	ldr	r3, [r7, #12]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800186e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001872:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4313      	orrs	r3, r2
 800187e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001886:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001890:	68fb      	ldr	r3, [r7, #12]
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	041b      	lsls	r3, r3, #16
 80018f0:	43db      	mvns	r3, r3
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	605a      	str	r2, [r3, #4]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	605a      	str	r2, [r3, #4]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	605a      	str	r2, [r3, #4]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	605a      	str	r2, [r3, #4]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	609a      	str	r2, [r3, #8]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	041a      	lsls	r2, r3, #16
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	609a      	str	r2, [r3, #8]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4013      	ands	r3, r2
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d101      	bne.n	80019c4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69da      	ldr	r2, [r3, #28]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	4013      	ands	r3, r2
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d101      	bne.n	80019ee <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001a00:	2102      	movs	r1, #2
 8001a02:	482a      	ldr	r0, [pc, #168]	; (8001aac <HW_IPCC_Rx_Handler+0xb0>)
 8001a04:	f7ff ffe5 	bl	80019d2 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <HW_IPCC_Rx_Handler+0x26>
 8001a0e:	4b27      	ldr	r3, [pc, #156]	; (8001aac <HW_IPCC_Rx_Handler+0xb0>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001a1c:	f000 f8f8 	bl	8001c10 <HW_IPCC_SYS_EvtHandler>
 8001a20:	e041      	b.n	8001aa6 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8001a22:	2104      	movs	r1, #4
 8001a24:	4821      	ldr	r0, [pc, #132]	; (8001aac <HW_IPCC_Rx_Handler+0xb0>)
 8001a26:	f7ff ffd4 	bl	80019d2 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d009      	beq.n	8001a44 <HW_IPCC_Rx_Handler+0x48>
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <HW_IPCC_Rx_Handler+0xb0>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8001a3e:	f000 f937 	bl	8001cb0 <HW_IPCC_THREAD_NotEvtHandler>
 8001a42:	e030      	b.n	8001aa6 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8001a44:	2110      	movs	r1, #16
 8001a46:	4819      	ldr	r0, [pc, #100]	; (8001aac <HW_IPCC_Rx_Handler+0xb0>)
 8001a48:	f7ff ffc3 	bl	80019d2 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HW_IPCC_Rx_Handler+0x6a>
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HW_IPCC_Rx_Handler+0xb0>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8001a60:	f000 f932 	bl	8001cc8 <HW_IPCC_THREAD_CliNotEvtHandler>
 8001a64:	e01f      	b.n	8001aa6 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001a66:	2101      	movs	r1, #1
 8001a68:	4810      	ldr	r0, [pc, #64]	; (8001aac <HW_IPCC_Rx_Handler+0xb0>)
 8001a6a:	f7ff ffb2 	bl	80019d2 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HW_IPCC_Rx_Handler+0x8a>
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HW_IPCC_Rx_Handler+0xb0>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8001a80:	f000 f88a 	bl	8001b98 <HW_IPCC_BLE_EvtHandler>
 8001a84:	e00f      	b.n	8001aa6 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001a86:	2108      	movs	r1, #8
 8001a88:	4808      	ldr	r0, [pc, #32]	; (8001aac <HW_IPCC_Rx_Handler+0xb0>)
 8001a8a:	f7ff ffa2 	bl	80019d2 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <HW_IPCC_Rx_Handler+0xac>
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HW_IPCC_Rx_Handler+0xb0>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001aa2:	f000 f95d 	bl	8001d60 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
}
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	58000c00 	.word	0x58000c00

08001ab0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	4822      	ldr	r0, [pc, #136]	; (8001b40 <HW_IPCC_Tx_Handler+0x90>)
 8001ab8:	f7ff ff76 	bl	80019a8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HW_IPCC_Tx_Handler+0x26>
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HW_IPCC_Tx_Handler+0x90>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001ad0:	f000 f892 	bl	8001bf8 <HW_IPCC_SYS_CmdEvtHandler>
 8001ad4:	e031      	b.n	8001b3a <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	4819      	ldr	r0, [pc, #100]	; (8001b40 <HW_IPCC_Tx_Handler+0x90>)
 8001ada:	f7ff ff65 	bl	80019a8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HW_IPCC_Tx_Handler+0x48>
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HW_IPCC_Tx_Handler+0x90>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8001af2:	f000 f8d1 	bl	8001c98 <HW_IPCC_OT_CmdEvtHandler>
 8001af6:	e020      	b.n	8001b3a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001af8:	2108      	movs	r1, #8
 8001afa:	4811      	ldr	r0, [pc, #68]	; (8001b40 <HW_IPCC_Tx_Handler+0x90>)
 8001afc:	f7ff ff54 	bl	80019a8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HW_IPCC_Tx_Handler+0x6a>
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HW_IPCC_Tx_Handler+0x90>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001b14:	f000 f906 	bl	8001d24 <HW_IPCC_MM_FreeBufHandler>
 8001b18:	e00f      	b.n	8001b3a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001b1a:	2120      	movs	r1, #32
 8001b1c:	4808      	ldr	r0, [pc, #32]	; (8001b40 <HW_IPCC_Tx_Handler+0x90>)
 8001b1e:	f7ff ff43 	bl	80019a8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HW_IPCC_Tx_Handler+0x8c>
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HW_IPCC_Tx_Handler+0x90>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001b36:	f000 f83b 	bl	8001bb0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001b3a:	bf00      	nop
 8001b3c:	bf00      	nop
}
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	58000c00 	.word	0x58000c00

08001b44 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001b48:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b4c:	f7ff fe8b 	bl	8001866 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001b50:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b54:	f7ff fe5c 	bl	8001810 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001b58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b5c:	f7ff fe44 	bl	80017e8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001b60:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001b62:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001b64:	f7ff fe30 	bl	80017c8 <LL_PWR_EnableBootC2>

  return;
 8001b68:	bf00      	nop
}
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001b70:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b74:	f7ff fe5e 	bl	8001834 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001b78:	4806      	ldr	r0, [pc, #24]	; (8001b94 <HW_IPCC_Init+0x28>)
 8001b7a:	f7ff fea0 	bl	80018be <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HW_IPCC_Init+0x28>)
 8001b80:	f7ff fe8d 	bl	800189e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001b84:	202c      	movs	r0, #44	; 0x2c
 8001b86:	f002 fbf8 	bl	800437a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001b8a:	202d      	movs	r0, #45	; 0x2d
 8001b8c:	f002 fbf5 	bl	800437a <HAL_NVIC_EnableIRQ>

  return;
 8001b90:	bf00      	nop
}
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58000c00 	.word	0x58000c00

08001b98 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001b9c:	f008 fabc 	bl	800a118 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	4802      	ldr	r0, [pc, #8]	; (8001bac <HW_IPCC_BLE_EvtHandler+0x14>)
 8001ba4:	f7ff fee3 	bl	800196e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001ba8:	bf00      	nop
}
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	58000c00 	.word	0x58000c00

08001bb0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001bb8:	f7ff fea4 	bl	8001904 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001bbc:	f008 fadc 	bl	800a178 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001bc0:	bf00      	nop
}
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	58000c00 	.word	0x58000c00

08001bc8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <HW_IPCC_SYS_Init+0x10>)
 8001bd0:	f7ff feaa 	bl	8001928 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001bd4:	bf00      	nop
}
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	58000c00 	.word	0x58000c00

08001bdc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001be0:	2102      	movs	r1, #2
 8001be2:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <HW_IPCC_SYS_SendCmd+0x18>)
 8001be4:	f7ff fed1 	bl	800198a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001be8:	2102      	movs	r1, #2
 8001bea:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <HW_IPCC_SYS_SendCmd+0x18>)
 8001bec:	f7ff fe77 	bl	80018de <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001bf0:	bf00      	nop
}
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	58000c00 	.word	0x58000c00

08001bf8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	4803      	ldr	r0, [pc, #12]	; (8001c0c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001c00:	f7ff fe80 	bl	8001904 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001c04:	f008 fb08 	bl	800a218 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001c08:	bf00      	nop
}
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	58000c00 	.word	0x58000c00

08001c10 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001c14:	f008 fb16 	bl	800a244 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001c18:	2102      	movs	r1, #2
 8001c1a:	4802      	ldr	r0, [pc, #8]	; (8001c24 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001c1c:	f7ff fea7 	bl	800196e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001c20:	bf00      	nop
}
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	58000c00 	.word	0x58000c00

08001c28 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <HW_IPCC_THREAD_Init+0x18>)
 8001c30:	f7ff fe7a 	bl	8001928 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001c34:	2110      	movs	r1, #16
 8001c36:	4802      	ldr	r0, [pc, #8]	; (8001c40 <HW_IPCC_THREAD_Init+0x18>)
 8001c38:	f7ff fe76 	bl	8001928 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001c3c:	bf00      	nop
}
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	58000c00 	.word	0x58000c00

08001c44 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001c48:	2104      	movs	r1, #4
 8001c4a:	4804      	ldr	r0, [pc, #16]	; (8001c5c <HW_IPCC_OT_SendCmd+0x18>)
 8001c4c:	f7ff fe9d 	bl	800198a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001c50:	2104      	movs	r1, #4
 8001c52:	4802      	ldr	r0, [pc, #8]	; (8001c5c <HW_IPCC_OT_SendCmd+0x18>)
 8001c54:	f7ff fe43 	bl	80018de <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001c58:	bf00      	nop
}
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	58000c00 	.word	0x58000c00

08001c60 <HW_IPCC_THREAD_SendAck>:

  return;
}

void HW_IPCC_THREAD_SendAck( void )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001c64:	2104      	movs	r1, #4
 8001c66:	4804      	ldr	r0, [pc, #16]	; (8001c78 <HW_IPCC_THREAD_SendAck+0x18>)
 8001c68:	f7ff fe81 	bl	800196e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	4802      	ldr	r0, [pc, #8]	; (8001c78 <HW_IPCC_THREAD_SendAck+0x18>)
 8001c70:	f7ff fe5a 	bl	8001928 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001c74:	bf00      	nop
}
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	58000c00 	.word	0x58000c00

08001c7c <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001c80:	2110      	movs	r1, #16
 8001c82:	4804      	ldr	r0, [pc, #16]	; (8001c94 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001c84:	f7ff fe73 	bl	800196e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001c88:	2110      	movs	r1, #16
 8001c8a:	4802      	ldr	r0, [pc, #8]	; (8001c94 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001c8c:	f7ff fe4c 	bl	8001928 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001c90:	bf00      	nop
}
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	58000c00 	.word	0x58000c00

08001c98 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	4803      	ldr	r0, [pc, #12]	; (8001cac <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8001ca0:	f7ff fe30 	bl	8001904 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8001ca4:	f008 fb3a 	bl	800a31c <HW_IPCC_OT_CmdEvtNot>

  return;
 8001ca8:	bf00      	nop
}
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	58000c00 	.word	0x58000c00

08001cb0 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8001cb8:	f7ff fe48 	bl	800194c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8001cbc:	f008 fb3a 	bl	800a334 <HW_IPCC_THREAD_EvtNot>

  return;
 8001cc0:	bf00      	nop
}
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	58000c00 	.word	0x58000c00

08001cc8 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001ccc:	2110      	movs	r1, #16
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8001cd0:	f7ff fe3c 	bl	800194c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8001cd4:	f008 fb3a 	bl	800a34c <HW_IPCC_THREAD_CliEvtNot>

  return;
 8001cd8:	bf00      	nop
}
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	58000c00 	.word	0x58000c00

08001ce0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001ce8:	2108      	movs	r1, #8
 8001cea:	480c      	ldr	r0, [pc, #48]	; (8001d1c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001cec:	f7ff fe5c 	bl	80019a8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	4807      	ldr	r0, [pc, #28]	; (8001d1c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001d00:	f7ff fded 	bl	80018de <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001d04:	e006      	b.n	8001d14 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001d0a:	2108      	movs	r1, #8
 8001d0c:	4803      	ldr	r0, [pc, #12]	; (8001d1c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001d0e:	f7ff fe3c 	bl	800198a <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001d12:	bf00      	nop
}
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	58000c00 	.word	0x58000c00
 8001d20:	20000248 	.word	0x20000248

08001d24 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001d28:	2108      	movs	r1, #8
 8001d2a:	4806      	ldr	r0, [pc, #24]	; (8001d44 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001d2c:	f7ff fdea 	bl	8001904 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001d36:	2108      	movs	r1, #8
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001d3a:	f7ff fe26 	bl	800198a <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001d3e:	bf00      	nop
}
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	58000c00 	.word	0x58000c00
 8001d48:	20000248 	.word	0x20000248

08001d4c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001d50:	2108      	movs	r1, #8
 8001d52:	4802      	ldr	r0, [pc, #8]	; (8001d5c <HW_IPCC_TRACES_Init+0x10>)
 8001d54:	f7ff fde8 	bl	8001928 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001d58:	bf00      	nop
}
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	58000c00 	.word	0x58000c00

08001d60 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001d64:	f008 fb84 	bl	800a470 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001d68:	2108      	movs	r1, #8
 8001d6a:	4802      	ldr	r0, [pc, #8]	; (8001d74 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001d6c:	f7ff fdff 	bl	800196e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001d70:	bf00      	nop
}
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	58000c00 	.word	0x58000c00

08001d78 <create_sensor_LL>:
	eStateFsm cur_state;
	int32_t baseline_temp_delta;
} fsm;

SensorQueueLL* create_sensor_LL(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
	SensorQueueLL *ret = malloc(sizeof(SensorQueueLL));
 8001d7e:	200c      	movs	r0, #12
 8001d80:	f008 ffcc 	bl	800ad1c <malloc>
 8001d84:	4603      	mov	r3, r0
 8001d86:	607b      	str	r3, [r7, #4]
	ret->front = NULL;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
	ret->rear = NULL;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
	ret->size = 0;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	721a      	strb	r2, [r3, #8]
	return ret;
 8001d9a:	687b      	ldr	r3, [r7, #4]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <update_sensor_LL>:

void update_sensor_LL(SensorQueueLL *ll, SensorData_t dat)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	4638      	mov	r0, r7
 8001dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	SensorDataNode *new = malloc(sizeof(SensorDataNode));
 8001db2:	2010      	movs	r0, #16
 8001db4:	f008 ffb2 	bl	800ad1c <malloc>
 8001db8:	4603      	mov	r3, r0
 8001dba:	617b      	str	r3, [r7, #20]
	if(new == NULL) return;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d039      	beq.n	8001e36 <update_sensor_LL+0x92>
	new->data = dat;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	463a      	mov	r2, r7
 8001dc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	new->next = NULL;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
	if (ll->size == 0)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	7a1b      	ldrb	r3, [r3, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <update_sensor_LL+0x4c>
	{
		ll->front = new;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]
		ll->rear = new;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	605a      	str	r2, [r3, #4]
		ll->size = 1;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	721a      	strb	r2, [r3, #8]
 8001dee:	e023      	b.n	8001e38 <update_sensor_LL+0x94>
	}
	else
	{
		if (ll->size >= 10)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	7a1b      	ldrb	r3, [r3, #8]
 8001df4:	2b09      	cmp	r3, #9
 8001df6:	d910      	bls.n	8001e1a <update_sensor_LL+0x76>
		{
			SensorDataNode *del = ll->front;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	613b      	str	r3, [r7, #16]
			ll->front = ll->front->next;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	601a      	str	r2, [r3, #0]
			free(del);
 8001e08:	6938      	ldr	r0, [r7, #16]
 8001e0a:	f008 ff8f 	bl	800ad2c <free>
			ll->size--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	7a1b      	ldrb	r3, [r3, #8]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	721a      	strb	r2, [r3, #8]
		}
		ll->rear->next = new;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	601a      	str	r2, [r3, #0]
		ll->rear = new;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	605a      	str	r2, [r3, #4]
		ll->size++;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	7a1b      	ldrb	r3, [r3, #8]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	721a      	strb	r2, [r3, #8]
 8001e34:	e000      	b.n	8001e38 <update_sensor_LL+0x94>
	if(new == NULL) return;
 8001e36:	bf00      	nop
	}
}
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <traverse_sensor_LL>:

uint8_t traverse_sensor_LL(SensorQueueLL *ll, bool isHum, int32_t l_th, int32_t u_th, int32_t *avg_temp, int32_t *avg_hum)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b087      	sub	sp, #28
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	72fb      	strb	r3, [r7, #11]
	SensorDataNode *cur = ll->front;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]
	uint8_t ret = 0, ctr = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	74fb      	strb	r3, [r7, #19]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	74bb      	strb	r3, [r7, #18]
	while (cur != NULL)
 8001e5c:	e029      	b.n	8001eb2 <traverse_sensor_LL+0x74>
	{
		if (isHum && (cur->data.humidity < l_th || cur->data.humidity > u_th))
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00d      	beq.n	8001e80 <traverse_sensor_LL+0x42>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	dc04      	bgt.n	8001e78 <traverse_sensor_LL+0x3a>
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	da03      	bge.n	8001e80 <traverse_sensor_LL+0x42>
			ret++;
 8001e78:	7cfb      	ldrb	r3, [r7, #19]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	74fb      	strb	r3, [r7, #19]
 8001e7e:	e012      	b.n	8001ea6 <traverse_sensor_LL+0x68>
		else if (!isHum && (cur->data.temp_main < l_th || cur->data.temp_main > u_th))
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	f083 0301 	eor.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00c      	beq.n	8001ea6 <traverse_sensor_LL+0x68>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dc04      	bgt.n	8001ea0 <traverse_sensor_LL+0x62>
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	da02      	bge.n	8001ea6 <traverse_sensor_LL+0x68>
			ret++;
 8001ea0:	7cfb      	ldrb	r3, [r7, #19]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	74fb      	strb	r3, [r7, #19]


		cur = cur->next;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	617b      	str	r3, [r7, #20]
		ctr++;
 8001eac:	7cbb      	ldrb	r3, [r7, #18]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	74bb      	strb	r3, [r7, #18]
	while (cur != NULL)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1d2      	bne.n	8001e5e <traverse_sensor_LL+0x20>
	}

	return ret;
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <app_algo_init>:

void app_algo_init(SensorData_t data)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fsm.data_hist = create_sensor_LL();
 8001ed4:	f7ff ff50 	bl	8001d78 <create_sensor_LL>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <app_algo_init+0x38>)
 8001edc:	6013      	str	r3, [r2, #0]
	fsm.data_hist->size = 0;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <app_algo_init+0x38>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	721a      	strb	r2, [r3, #8]
	fsm.cur_state = STATE_INIT;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <app_algo_init+0x38>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	711a      	strb	r2, [r3, #4]
	fsm.baseline_temp_delta = data.temp_main - (int32_t)data.temp_aux;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	4a02      	ldr	r2, [pc, #8]	; (8001f00 <app_algo_init+0x38>)
 8001ef6:	6093      	str	r3, [r2, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2000024c 	.word	0x2000024c

08001f04 <app_algo_proc>:

eResFsm app_algo_proc(SensorData_t data, bool ext_sig_reset, int8_t *state)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b08b      	sub	sp, #44	; 0x2c
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	1d3c      	adds	r4, r7, #4
 8001f0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f10:	70fb      	strb	r3, [r7, #3]
	update_sensor_LL(fsm.data_hist, data);
 8001f12:	4b4d      	ldr	r3, [pc, #308]	; (8002048 <app_algo_proc+0x144>)
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f1a:	f7ff ff43 	bl	8001da4 <update_sensor_LL>
	*state = fsm.cur_state;
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <app_algo_proc+0x144>)
 8001f20:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f26:	701a      	strb	r2, [r3, #0]
	if (ext_sig_reset)
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d004      	beq.n	8001f38 <app_algo_proc+0x34>
	{
		fsm.cur_state = STATE_INIT;
 8001f2e:	4b46      	ldr	r3, [pc, #280]	; (8002048 <app_algo_proc+0x144>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e082      	b.n	800203e <app_algo_proc+0x13a>
	}

	switch (fsm.cur_state)
 8001f38:	4b43      	ldr	r3, [pc, #268]	; (8002048 <app_algo_proc+0x144>)
 8001f3a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d87a      	bhi.n	800203a <app_algo_proc+0x136>
 8001f44:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <app_algo_proc+0x48>)
 8001f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4a:	bf00      	nop
 8001f4c:	08002035 	.word	0x08002035
 8001f50:	08001f65 	.word	0x08001f65
 8001f54:	08001f79 	.word	0x08001f79
 8001f58:	08001f95 	.word	0x08001f95
 8001f5c:	08001ff3 	.word	0x08001ff3
 8001f60:	08002007 	.word	0x08002007
	{
	case STATE_INIT:
	{
		fsm.cur_state = STATE_MEAS;
 8001f64:	4b38      	ldr	r3, [pc, #224]	; (8002048 <app_algo_proc+0x144>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	711a      	strb	r2, [r3, #4]
		APP_DBG("FSM STATE INIT");
 8001f6a:	4a38      	ldr	r2, [pc, #224]	; (800204c <app_algo_proc+0x148>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f001 ff80 	bl	8003e74 <logApplication>
		return RES_NONE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e062      	b.n	800203e <app_algo_proc+0x13a>
	}
	case STATE_MEAS:
	{
		APP_DBG("FSM STATE MEAS");
 8001f78:	4a35      	ldr	r2, [pc, #212]	; (8002050 <app_algo_proc+0x14c>)
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f001 ff79 	bl	8003e74 <logApplication>
		if (data.humidity > HUMIDITY_TRIG_TH_POS)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a33      	ldr	r2, [pc, #204]	; (8002054 <app_algo_proc+0x150>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	dd02      	ble.n	8001f90 <app_algo_proc+0x8c>
			fsm.cur_state = STATE_PRETRIG;
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <app_algo_proc+0x144>)
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e054      	b.n	800203e <app_algo_proc+0x13a>
	}
	case STATE_PRETRIG:
	{
		APP_DBG("FSM STATE PRETRIG\n");
 8001f94:	4a30      	ldr	r2, [pc, #192]	; (8002058 <app_algo_proc+0x154>)
 8001f96:	2101      	movs	r1, #1
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f001 ff6b 	bl	8003e74 <logApplication>
		if (data.humidity < HUMIDITY_TRIG_TH_NEG)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2e      	ldr	r2, [pc, #184]	; (800205c <app_algo_proc+0x158>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	da04      	bge.n	8001fb0 <app_algo_proc+0xac>
		{
			fsm.cur_state = STATE_MEAS;
 8001fa6:	4b28      	ldr	r3, [pc, #160]	; (8002048 <app_algo_proc+0x144>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	711a      	strb	r2, [r3, #4]
			return RES_NONE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e046      	b.n	800203e <app_algo_proc+0x13a>
		}
		int32_t t, h;
		uint8_t ct = traverse_sensor_LL(fsm.data_hist, true, 0, HUMIDITY_TRIG_TH_POS, &t, &h);
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <app_algo_proc+0x144>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	4a27      	ldr	r2, [pc, #156]	; (8002054 <app_algo_proc+0x150>)
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	f7ff ff39 	bl	8001e3e <traverse_sensor_LL>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	77fb      	strb	r3, [r7, #31]
		APP_DBG("Pretrig ctr:%d", ct);
 8001fd0:	7ffb      	ldrb	r3, [r7, #31]
 8001fd2:	4a23      	ldr	r2, [pc, #140]	; (8002060 <app_algo_proc+0x15c>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f001 ff4c 	bl	8003e74 <logApplication>
		if (ct >= HUMIDITY_SAMPLES_TRIG_TH)
 8001fdc:	2205      	movs	r2, #5
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d304      	bcc.n	8001fee <app_algo_proc+0xea>
		{
			fsm.cur_state = STATE_HEATING;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <app_algo_proc+0x144>)
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	711a      	strb	r2, [r3, #4]
			return RES_HEAT;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e027      	b.n	800203e <app_algo_proc+0x13a>
		}
		return RES_NONE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e025      	b.n	800203e <app_algo_proc+0x13a>
	}
	case STATE_HEATING:
	{
		APP_DBG("FSM STATE HEATING");
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	; (8002064 <app_algo_proc+0x160>)
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f001 ff3c 	bl	8003e74 <logApplication>
		fsm.cur_state = STATE_COOLDOWN;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <app_algo_proc+0x144>)
 8001ffe:	2204      	movs	r2, #4
 8002000:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8002002:	2300      	movs	r3, #0
 8002004:	e01b      	b.n	800203e <app_algo_proc+0x13a>
	}
	case STATE_COOLDOWN:
	{
		APP_DBG("FSM STATE COOLDOWN");
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <app_algo_proc+0x164>)
 8002008:	2101      	movs	r1, #1
 800200a:	2000      	movs	r0, #0
 800200c:	f001 ff32 	bl	8003e74 <logApplication>
		if(data.temp_main - data.temp_aux < fsm.baseline_temp_delta + TEMPERATURE_COOLDOWN_MAX_ALLOWED_DELTA)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002016:	1a9a      	subs	r2, r3, r2
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <app_algo_proc+0x144>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002020:	440b      	add	r3, r1
 8002022:	429a      	cmp	r2, r3
 8002024:	da04      	bge.n	8002030 <app_algo_proc+0x12c>
		{
			fsm.cur_state = STATE_MEAS;
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <app_algo_proc+0x144>)
 8002028:	2201      	movs	r2, #1
 800202a:	711a      	strb	r2, [r3, #4]
			return RES_NONE;
 800202c:	2300      	movs	r3, #0
 800202e:	e006      	b.n	800203e <app_algo_proc+0x13a>
		}
		else
		{
			return RES_INVL;
 8002030:	2302      	movs	r3, #2
 8002032:	e004      	b.n	800203e <app_algo_proc+0x13a>
		}
	}
	case STATE_UNDEF:
		return RES_FAULT;
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
 8002038:	e001      	b.n	800203e <app_algo_proc+0x13a>
	}
	return RES_FAULT;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	bf00      	nop
 8002048:	2000024c 	.word	0x2000024c
 800204c:	0800c4ec 	.word	0x0800c4ec
 8002050:	0800c4fc 	.word	0x0800c4fc
 8002054:	00017318 	.word	0x00017318
 8002058:	0800c50c 	.word	0x0800c50c
 800205c:	00016760 	.word	0x00016760
 8002060:	0800c520 	.word	0x0800c520
 8002064:	0800c530 	.word	0x0800c530
 8002068:	0800c544 	.word	0x0800c544

0800206c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <LL_C2_PWR_SetPowerMode+0x28>)
 8002076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	4905      	ldr	r1, [pc, #20]	; (8002094 <LL_C2_PWR_SetPowerMode+0x28>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	58000400 	.word	0x58000400

08002098 <LL_EXTI_EnableIT_32_63>:
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <LL_EXTI_EnableIT_32_63+0x24>)
 80020a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80020a6:	4905      	ldr	r1, [pc, #20]	; (80020bc <LL_EXTI_EnableIT_32_63+0x24>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	58000800 	.word	0x58000800

080020c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80020ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	cafecafe 	.word	0xcafecafe

080020fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800210e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <LL_LPM_EnableSleep+0x1c>)
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <LL_LPM_EnableSleep+0x1c>)
 800212e:	f023 0304 	bic.w	r3, r3, #4
 8002132:	6113      	str	r3, [r2, #16]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	22ff      	movs	r2, #255	; 0xff
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	22ca      	movs	r2, #202	; 0xca
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2253      	movs	r2, #83	; 0x53
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 0207 	bic.w	r2, r3, #7
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	609a      	str	r2, [r3, #8]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <MX_APPE_Config+0x18>)
 80021aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021ae:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80021b0:	f000 f82c 	bl	800220c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80021b4:	f000 f831 	bl	800221a <Config_HSE>

  return;
 80021b8:	bf00      	nop
}
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	58004000 	.word	0x58004000

080021c0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80021c4:	f000 f83d 	bl	8002242 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80021c8:	f000 f856 	bl	8002278 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80021cc:	4907      	ldr	r1, [pc, #28]	; (80021ec <MX_APPE_Init+0x2c>)
 80021ce:	2000      	movs	r0, #0
 80021d0:	f000 fdb8 	bl	8002d44 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //Init_Debug();
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80021d4:	2101      	movs	r1, #1
 80021d6:	2001      	movs	r0, #1
 80021d8:	f008 f9f4 	bl	800a5c4 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80021dc:	2101      	movs	r1, #1
 80021de:	2001      	movs	r0, #1
 80021e0:	f008 fa20 	bl	800a624 <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80021e4:	f000 f856 	bl	8002294 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80021e8:	bf00      	nop
}
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	2000057c 	.word	0x2000057c

080021f0 <Init_Smps>:

void Init_Smps(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80021f4:	bf00      	nop
}
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <Init_Exti>:

void Init_Exti(void)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8002202:	2050      	movs	r0, #80	; 0x50
 8002204:	f7ff ff48 	bl	8002098 <LL_EXTI_EnableIT_32_63>

  return;
 8002208:	bf00      	nop
}
 800220a:	bd80      	pop	{r7, pc}

0800220c <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8002210:	bf00      	nop
}
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002220:	2000      	movs	r0, #0
 8002222:	f008 f995 	bl	800a550 <OTP_Read>
 8002226:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	799b      	ldrb	r3, [r3, #6]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff44 	bl	80020c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8002238:	bf00      	nop
 800223a:	bf00      	nop
}
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <System_Init>:

static void System_Init(void)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	af00      	add	r7, sp, #0
  Init_Smps();
 8002246:	f7ff ffd3 	bl	80021f0 <Init_Smps>

  Init_Exti();
 800224a:	f7ff ffd8 	bl	80021fe <Init_Exti>

  Init_Rtc();
 800224e:	f000 f803 	bl	8002258 <Init_Rtc>

  return;
 8002252:	bf00      	nop
}
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <Init_Rtc>:

static void Init_Rtc(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800225c:	4805      	ldr	r0, [pc, #20]	; (8002274 <Init_Rtc+0x1c>)
 800225e:	f7ff ff7e 	bl	800215e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002262:	2100      	movs	r1, #0
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <Init_Rtc+0x1c>)
 8002266:	f7ff ff8a 	bl	800217e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800226a:	4802      	ldr	r0, [pc, #8]	; (8002274 <Init_Rtc+0x1c>)
 800226c:	f7ff ff6a 	bl	8002144 <LL_RTC_EnableWriteProtection>

  return;
 8002270:	bf00      	nop
}
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40002800 	.word	0x40002800

08002278 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800227c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002280:	f7ff ff3c 	bl	80020fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002284:	f008 f98c 	bl	800a5a0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002288:	2004      	movs	r0, #4
 800228a:	f7ff feef 	bl	800206c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800228e:	bf00      	nop
}
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800229a:	f007 ff03 	bl	800a0a4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 800229e:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <appe_Tl_Init+0x50>)
 80022a0:	2100      	movs	r1, #0
 80022a2:	2004      	movs	r0, #4
 80022a4:	f008 fb20 	bl	800a8e8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <appe_Tl_Init+0x54>)
 80022aa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <appe_Tl_Init+0x58>)
 80022ae:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80022b0:	463b      	mov	r3, r7
 80022b2:	4619      	mov	r1, r3
 80022b4:	480e      	ldr	r0, [pc, #56]	; (80022f0 <appe_Tl_Init+0x5c>)
 80022b6:	f007 fb71 	bl	800999c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <appe_Tl_Init+0x60>)
 80022c0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <appe_Tl_Init+0x64>)
 80022c4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80022c6:	f240 533c 	movw	r3, #1340	; 0x53c
 80022ca:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	4618      	mov	r0, r3
 80022d2:	f008 f847 	bl	800a364 <TL_MM_Init>

  TL_Enable();
 80022d6:	f007 fedf 	bl	800a098 <TL_Enable>

  return;
 80022da:	bf00      	nop
}
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	080099d5 	.word	0x080099d5
 80022e8:	20030a54 	.word	0x20030a54
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	08002313 	.word	0x08002313
 80022f4:	20030b60 	.word	0x20030b60
 80022f8:	20030518 	.word	0x20030518

080022fc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8002306:	bf00      	nop
}
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	330b      	adds	r3, #11
 8002320:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800232c:	d004      	beq.n	8002338 <APPE_SysUserEvtRx+0x26>
 800232e:	f249 2201 	movw	r2, #37377	; 0x9201
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8002336:	e008      	b.n	800234a <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8002338:	f000 f834 	bl	80023a4 <APPE_SysEvtReadyProcessing>
         break;
 800233c:	e005      	b.n	800234a <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	789b      	ldrb	r3, [r3, #2]
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f806 	bl	8002354 <APPE_SysEvtError>
         break;
 8002348:	bf00      	nop
  }
  return;
 800234a:	bf00      	nop
}
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b7d      	cmp	r3, #125	; 0x7d
 8002362:	d002      	beq.n	800236a <APPE_SysEvtError+0x16>
 8002364:	2b7e      	cmp	r3, #126	; 0x7e
 8002366:	d006      	beq.n	8002376 <APPE_SysEvtError+0x22>
 8002368:	e00b      	b.n	8002382 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <APPE_SysEvtError+0x44>)
 800236c:	2101      	movs	r1, #1
 800236e:	2000      	movs	r0, #0
 8002370:	f001 fd80 	bl	8003e74 <logApplication>
       break;
 8002374:	e00c      	b.n	8002390 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <APPE_SysEvtError+0x48>)
 8002378:	2101      	movs	r1, #1
 800237a:	2000      	movs	r0, #0
 800237c:	f001 fd7a 	bl	8003e74 <logApplication>
       break;
 8002380:	e006      	b.n	8002390 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <APPE_SysEvtError+0x4c>)
 8002386:	2101      	movs	r1, #1
 8002388:	2000      	movs	r0, #0
 800238a:	f001 fd73 	bl	8003e74 <logApplication>
       break;
 800238e:	bf00      	nop
  }
  return;
 8002390:	bf00      	nop
}
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	0800c558 	.word	0x0800c558
 800239c:	0800c57c 	.word	0x0800c57c
 80023a0:	0800c59c 	.word	0x0800c59c

080023a4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 80023a8:	f008 f850 	bl	800a44c <TL_TRACES_Init>

  APP_THREAD_Init();
 80023ac:	f7fe fbea 	bl	8000b84 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80023b0:	2100      	movs	r1, #0
 80023b2:	2001      	movs	r0, #1
 80023b4:	f008 f906 	bl	800a5c4 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80023b8:	2100      	movs	r1, #0
 80023ba:	2001      	movs	r0, #1
 80023bc:	f008 f932 	bl	800a624 <UTIL_LPM_SetOffMode>
  return;
 80023c0:	bf00      	nop
}
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f001 fe26 	bl	800401c <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d00a      	beq.n	80023f4 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80023de:	f001 fe35 	bl	800404c <HAL_GetTickFreq>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4413      	add	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ec:	e002      	b.n	80023f4 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80023ee:	f7ff fe99 	bl	8002124 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80023f2:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80023f4:	f001 fe12 	bl	800401c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	429a      	cmp	r2, r3
 8002402:	d8f4      	bhi.n	80023ee <HAL_Delay+0x2a>
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002412:	f04f 30ff 	mov.w	r0, #4294967295
 8002416:	f008 f96b 	bl	800a6f0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}

0800241e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8002422:	f008 f92f 	bl	800a684 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002426:	bf00      	nop
}
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d003      	beq.n	8002444 <UTIL_SEQ_EvtIdle+0x18>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d00c      	beq.n	800245c <UTIL_SEQ_EvtIdle+0x30>
 8002442:	e012      	b.n	800246a <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <UTIL_SEQ_EvtIdle+0x50>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d103      	bne.n	8002454 <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 800244c:	2001      	movs	r0, #1
 800244e:	f008 f94f 	bl	800a6f0 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 8002452:	e00f      	b.n	8002474 <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 8002454:	2000      	movs	r0, #0
 8002456:	f008 f94b 	bl	800a6f0 <UTIL_SEQ_Run>
    break;
 800245a:	e00b      	b.n	8002474 <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800245c:	2004      	movs	r0, #4
 800245e:	f008 fa91 	bl	800a984 <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8002462:	2001      	movs	r0, #1
 8002464:	f008 f944 	bl	800a6f0 <UTIL_SEQ_Run>
    break;
 8002468:	e004      	b.n	8002474 <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800246a:	f04f 30ff 	mov.w	r0, #4294967295
 800246e:	f008 f93f 	bl	800a6f0 <UTIL_SEQ_Run>
    break;
 8002472:	bf00      	nop
  }
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000258 	.word	0x20000258

08002480 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8002488:	2100      	movs	r1, #0
 800248a:	2004      	movs	r0, #4
 800248c:	f008 fa4e 	bl	800a92c <UTIL_SEQ_SetTask>
  return;
 8002490:	bf00      	nop
}
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80024a0:	2001      	movs	r0, #1
 80024a2:	f008 fa6f 	bl	800a984 <UTIL_SEQ_SetEvt>
  return;
 80024a6:	bf00      	nop
}
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f008 fa84 	bl	800a9c4 <UTIL_SEQ_WaitEvt>
  return;
 80024bc:	bf00      	nop
}
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f007 ff85 	bl	800a3dc <TL_MM_EvtDone>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <HAL_GPIO_EXTI_Callback+0x3c>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	2000      	movs	r0, #0
 80024ee:	f001 fcc1 	bl	8003e74 <logApplication>
  switch(GPIO_Pin)
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_EXTI_Callback+0x26>
 80024fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fe:	d005      	beq.n	800250c <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 8002500:	e005      	b.n	800250e <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 8002502:	2101      	movs	r1, #1
 8002504:	2008      	movs	r0, #8
 8002506:	f008 fa11 	bl	800a92c <UTIL_SEQ_SetTask>
        break;
 800250a:	e000      	b.n	800250e <HAL_GPIO_EXTI_Callback+0x32>
        break;
 800250c:	bf00      	nop
  }
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	0800c5bc 	.word	0x0800c5bc

0800251c <LL_EXTI_EnableIT_0_31>:
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <LL_EXTI_EnableIT_0_31+0x24>)
 8002526:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800252a:	4905      	ldr	r1, [pc, #20]	; (8002540 <LL_EXTI_EnableIT_0_31+0x24>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	58000800 	.word	0x58000800

08002544 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4904      	ldr	r1, [pc, #16]	; (8002564 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	58000800 	.word	0x58000800

08002568 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <ReadRtcSsrValue+0x3c>)
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	b29b      	uxth	r3, r3
 8002574:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <ReadRtcSsrValue+0x3c>)
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	b29b      	uxth	r3, r3
 800257c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800257e:	e005      	b.n	800258c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <ReadRtcSsrValue+0x3c>)
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	b29b      	uxth	r3, r3
 800258a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d1f5      	bne.n	8002580 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002594:	683b      	ldr	r3, [r7, #0]
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40002800 	.word	0x40002800

080025a8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	460a      	mov	r2, r1
 80025b2:	71fb      	strb	r3, [r7, #7]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80025b8:	79ba      	ldrb	r2, [r7, #6]
 80025ba:	491d      	ldr	r1, [pc, #116]	; (8002630 <LinkTimerAfter+0x88>)
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	440b      	add	r3, r1
 80025c6:	3315      	adds	r3, #21
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d009      	beq.n	80025e6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	4916      	ldr	r1, [pc, #88]	; (8002630 <LinkTimerAfter+0x88>)
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	3314      	adds	r3, #20
 80025e2:	79fa      	ldrb	r2, [r7, #7]
 80025e4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80025e6:	79fa      	ldrb	r2, [r7, #7]
 80025e8:	4911      	ldr	r1, [pc, #68]	; (8002630 <LinkTimerAfter+0x88>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	3315      	adds	r3, #21
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <LinkTimerAfter+0x88>)
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	3314      	adds	r3, #20
 800260a:	79ba      	ldrb	r2, [r7, #6]
 800260c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800260e:	79ba      	ldrb	r2, [r7, #6]
 8002610:	4907      	ldr	r1, [pc, #28]	; (8002630 <LinkTimerAfter+0x88>)
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	3315      	adds	r3, #21
 800261e:	79fa      	ldrb	r2, [r7, #7]
 8002620:	701a      	strb	r2, [r3, #0]

  return;
 8002622:	bf00      	nop
}
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	2000025c 	.word	0x2000025c

08002634 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	460a      	mov	r2, r1
 800263e:	71fb      	strb	r3, [r7, #7]
 8002640:	4613      	mov	r3, r2
 8002642:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <LinkTimerBefore+0xb8>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	79ba      	ldrb	r2, [r7, #6]
 800264c:	429a      	cmp	r2, r3
 800264e:	d032      	beq.n	80026b6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002650:	79ba      	ldrb	r2, [r7, #6]
 8002652:	4927      	ldr	r1, [pc, #156]	; (80026f0 <LinkTimerBefore+0xbc>)
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	440b      	add	r3, r1
 800265e:	3314      	adds	r3, #20
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	4922      	ldr	r1, [pc, #136]	; (80026f0 <LinkTimerBefore+0xbc>)
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	3315      	adds	r3, #21
 8002674:	79fa      	ldrb	r2, [r7, #7]
 8002676:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002678:	79fa      	ldrb	r2, [r7, #7]
 800267a:	491d      	ldr	r1, [pc, #116]	; (80026f0 <LinkTimerBefore+0xbc>)
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	3315      	adds	r3, #21
 8002688:	79ba      	ldrb	r2, [r7, #6]
 800268a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800268c:	79fa      	ldrb	r2, [r7, #7]
 800268e:	4918      	ldr	r1, [pc, #96]	; (80026f0 <LinkTimerBefore+0xbc>)
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	3314      	adds	r3, #20
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80026a0:	79ba      	ldrb	r2, [r7, #6]
 80026a2:	4913      	ldr	r1, [pc, #76]	; (80026f0 <LinkTimerBefore+0xbc>)
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	3314      	adds	r3, #20
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80026b4:	e014      	b.n	80026e0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80026b6:	79fa      	ldrb	r2, [r7, #7]
 80026b8:	490d      	ldr	r1, [pc, #52]	; (80026f0 <LinkTimerBefore+0xbc>)
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	3315      	adds	r3, #21
 80026c6:	79ba      	ldrb	r2, [r7, #6]
 80026c8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80026ca:	79ba      	ldrb	r2, [r7, #6]
 80026cc:	4908      	ldr	r1, [pc, #32]	; (80026f0 <LinkTimerBefore+0xbc>)
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	3314      	adds	r3, #20
 80026da:	79fa      	ldrb	r2, [r7, #7]
 80026dc:	701a      	strb	r2, [r3, #0]
  return;
 80026de:	bf00      	nop
}
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	200002ec 	.word	0x200002ec
 80026f0:	2000025c 	.word	0x2000025c

080026f4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026fe:	4b4e      	ldr	r3, [pc, #312]	; (8002838 <linkTimer+0x144>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b06      	cmp	r3, #6
 8002706:	d118      	bne.n	800273a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002708:	4b4b      	ldr	r3, [pc, #300]	; (8002838 <linkTimer+0x144>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b4b      	ldr	r3, [pc, #300]	; (800283c <linkTimer+0x148>)
 8002710:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002712:	4a49      	ldr	r2, [pc, #292]	; (8002838 <linkTimer+0x144>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002718:	79fa      	ldrb	r2, [r7, #7]
 800271a:	4949      	ldr	r1, [pc, #292]	; (8002840 <linkTimer+0x14c>)
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	3315      	adds	r3, #21
 8002728:	2206      	movs	r2, #6
 800272a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800272c:	4b45      	ldr	r3, [pc, #276]	; (8002844 <linkTimer+0x150>)
 800272e:	f04f 32ff 	mov.w	r2, #4294967295
 8002732:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	81fb      	strh	r3, [r7, #14]
 8002738:	e078      	b.n	800282c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800273a:	f000 f909 	bl	8002950 <ReturnTimeElapsed>
 800273e:	4603      	mov	r3, r0
 8002740:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002742:	79fa      	ldrb	r2, [r7, #7]
 8002744:	493e      	ldr	r1, [pc, #248]	; (8002840 <linkTimer+0x14c>)
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	3308      	adds	r3, #8
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	89fb      	ldrh	r3, [r7, #14]
 8002756:	79fa      	ldrb	r2, [r7, #7]
 8002758:	4419      	add	r1, r3
 800275a:	4839      	ldr	r0, [pc, #228]	; (8002840 <linkTimer+0x14c>)
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4403      	add	r3, r0
 8002766:	3308      	adds	r3, #8
 8002768:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800276a:	79fa      	ldrb	r2, [r7, #7]
 800276c:	4934      	ldr	r1, [pc, #208]	; (8002840 <linkTimer+0x14c>)
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	3308      	adds	r3, #8
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800277e:	4b2e      	ldr	r3, [pc, #184]	; (8002838 <linkTimer+0x144>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4619      	mov	r1, r3
 8002786:	4a2e      	ldr	r2, [pc, #184]	; (8002840 <linkTimer+0x14c>)
 8002788:	460b      	mov	r3, r1
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	440b      	add	r3, r1
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	3308      	adds	r3, #8
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	429a      	cmp	r2, r3
 800279a:	d337      	bcc.n	800280c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <linkTimer+0x144>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80027a2:	7b7a      	ldrb	r2, [r7, #13]
 80027a4:	4926      	ldr	r1, [pc, #152]	; (8002840 <linkTimer+0x14c>)
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	3315      	adds	r3, #21
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80027b6:	e013      	b.n	80027e0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80027b8:	7b7a      	ldrb	r2, [r7, #13]
 80027ba:	4921      	ldr	r1, [pc, #132]	; (8002840 <linkTimer+0x14c>)
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	3315      	adds	r3, #21
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80027cc:	7b7a      	ldrb	r2, [r7, #13]
 80027ce:	491c      	ldr	r1, [pc, #112]	; (8002840 <linkTimer+0x14c>)
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	3315      	adds	r3, #21
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80027e0:	7b3b      	ldrb	r3, [r7, #12]
 80027e2:	2b06      	cmp	r3, #6
 80027e4:	d00b      	beq.n	80027fe <linkTimer+0x10a>
 80027e6:	7b3a      	ldrb	r2, [r7, #12]
 80027e8:	4915      	ldr	r1, [pc, #84]	; (8002840 <linkTimer+0x14c>)
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	3308      	adds	r3, #8
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d2dc      	bcs.n	80027b8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80027fe:	7b7a      	ldrb	r2, [r7, #13]
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fecf 	bl	80025a8 <LinkTimerAfter>
 800280a:	e00f      	b.n	800282c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <linkTimer+0x144>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff0c 	bl	8002634 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <linkTimer+0x144>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <linkTimer+0x148>)
 8002824:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002826:	4a04      	ldr	r2, [pc, #16]	; (8002838 <linkTimer+0x144>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800282c:	89fb      	ldrh	r3, [r7, #14]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200002ec 	.word	0x200002ec
 800283c:	200002ed 	.word	0x200002ed
 8002840:	2000025c 	.word	0x2000025c
 8002844:	200002f0 	.word	0x200002f0

08002848 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	460a      	mov	r2, r1
 8002852:	71fb      	strb	r3, [r7, #7]
 8002854:	4613      	mov	r3, r2
 8002856:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <UnlinkTimer+0xf8>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	79fa      	ldrb	r2, [r7, #7]
 8002860:	429a      	cmp	r2, r3
 8002862:	d111      	bne.n	8002888 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002864:	4b36      	ldr	r3, [pc, #216]	; (8002940 <UnlinkTimer+0xf8>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4b36      	ldr	r3, [pc, #216]	; (8002944 <UnlinkTimer+0xfc>)
 800286c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800286e:	79fa      	ldrb	r2, [r7, #7]
 8002870:	4935      	ldr	r1, [pc, #212]	; (8002948 <UnlinkTimer+0x100>)
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	3315      	adds	r3, #21
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <UnlinkTimer+0xf8>)
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	e03e      	b.n	8002906 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002888:	79fa      	ldrb	r2, [r7, #7]
 800288a:	492f      	ldr	r1, [pc, #188]	; (8002948 <UnlinkTimer+0x100>)
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	3314      	adds	r3, #20
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800289c:	79fa      	ldrb	r2, [r7, #7]
 800289e:	492a      	ldr	r1, [pc, #168]	; (8002948 <UnlinkTimer+0x100>)
 80028a0:	4613      	mov	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	3315      	adds	r3, #21
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80028b0:	79f9      	ldrb	r1, [r7, #7]
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	4824      	ldr	r0, [pc, #144]	; (8002948 <UnlinkTimer+0x100>)
 80028b6:	460b      	mov	r3, r1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	440b      	add	r3, r1
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4403      	add	r3, r0
 80028c0:	3315      	adds	r3, #21
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	b2d8      	uxtb	r0, r3
 80028c6:	4920      	ldr	r1, [pc, #128]	; (8002948 <UnlinkTimer+0x100>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	3315      	adds	r3, #21
 80028d4:	4602      	mov	r2, r0
 80028d6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80028d8:	7bbb      	ldrb	r3, [r7, #14]
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d013      	beq.n	8002906 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80028de:	79f9      	ldrb	r1, [r7, #7]
 80028e0:	7bba      	ldrb	r2, [r7, #14]
 80028e2:	4819      	ldr	r0, [pc, #100]	; (8002948 <UnlinkTimer+0x100>)
 80028e4:	460b      	mov	r3, r1
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	440b      	add	r3, r1
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4403      	add	r3, r0
 80028ee:	3314      	adds	r3, #20
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b2d8      	uxtb	r0, r3
 80028f4:	4914      	ldr	r1, [pc, #80]	; (8002948 <UnlinkTimer+0x100>)
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	3314      	adds	r3, #20
 8002902:	4602      	mov	r2, r0
 8002904:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002906:	79fa      	ldrb	r2, [r7, #7]
 8002908:	490f      	ldr	r1, [pc, #60]	; (8002948 <UnlinkTimer+0x100>)
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	330c      	adds	r3, #12
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <UnlinkTimer+0xf8>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b06      	cmp	r3, #6
 8002922:	d107      	bne.n	8002934 <UnlinkTimer+0xec>
 8002924:	79bb      	ldrb	r3, [r7, #6]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d104      	bne.n	8002934 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <UnlinkTimer+0x104>)
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	601a      	str	r2, [r3, #0]
  }

  return;
 8002932:	bf00      	nop
 8002934:	bf00      	nop
}
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	200002ec 	.word	0x200002ec
 8002944:	200002ed 	.word	0x200002ed
 8002948:	2000025c 	.word	0x2000025c
 800294c:	200002f0 	.word	0x200002f0

08002950 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002956:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <ReturnTimeElapsed+0x70>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d026      	beq.n	80029ae <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002960:	f7ff fe02 	bl	8002568 <ReadRtcSsrValue>
 8002964:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <ReturnTimeElapsed+0x70>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	d805      	bhi.n	800297c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <ReturnTimeElapsed+0x70>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	e00a      	b.n	8002992 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <ReturnTimeElapsed+0x74>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <ReturnTimeElapsed+0x70>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	4413      	add	r3, r2
 8002990:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <ReturnTimeElapsed+0x78>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <ReturnTimeElapsed+0x7c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	40d3      	lsrs	r3, r2
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	e001      	b.n	80029b2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	b29b      	uxth	r3, r3
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200002f0 	.word	0x200002f0
 80029c4:	200002f8 	.word	0x200002f8
 80029c8:	200002f6 	.word	0x200002f6
 80029cc:	200002f5 	.word	0x200002f5

080029d0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d108      	bne.n	80029f2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80029e0:	f7ff fdc2 	bl	8002568 <ReadRtcSsrValue>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4a21      	ldr	r2, [pc, #132]	; (8002a6c <RestartWakeupCounter+0x9c>)
 80029e8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80029ea:	2003      	movs	r0, #3
 80029ec:	f001 fcf1 	bl	80043d2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80029f0:	e039      	b.n	8002a66 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d803      	bhi.n	8002a00 <RestartWakeupCounter+0x30>
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <RestartWakeupCounter+0xa0>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d002      	beq.n	8002a06 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002a06:	bf00      	nop
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <RestartWakeupCounter+0xa4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f8      	beq.n	8002a08 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <RestartWakeupCounter+0xa4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <RestartWakeupCounter+0xa4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002a26:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <RestartWakeupCounter+0xa8>)
 8002a2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a2e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002a30:	2003      	movs	r0, #3
 8002a32:	f001 fcdc 	bl	80043ee <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <RestartWakeupCounter+0xac>)
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	0c1b      	lsrs	r3, r3, #16
 8002a3c:	041b      	lsls	r3, r3, #16
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	490e      	ldr	r1, [pc, #56]	; (8002a7c <RestartWakeupCounter+0xac>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002a46:	f7ff fd8f 	bl	8002568 <ReadRtcSsrValue>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <RestartWakeupCounter+0x9c>)
 8002a4e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <RestartWakeupCounter+0xa4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <RestartWakeupCounter+0xa4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a5e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002a60:	f3af 8000 	nop.w
  return ;
 8002a64:	bf00      	nop
}
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200002f0 	.word	0x200002f0
 8002a70:	200002f5 	.word	0x200002f5
 8002a74:	2000057c 	.word	0x2000057c
 8002a78:	58000800 	.word	0x58000800
 8002a7c:	40002800 	.word	0x40002800

08002a80 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002a86:	4b45      	ldr	r3, [pc, #276]	; (8002b9c <RescheduleTimerList+0x11c>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a92:	d107      	bne.n	8002aa4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002a94:	bf00      	nop
 8002a96:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <RescheduleTimerList+0x120>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f8      	bne.n	8002a96 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002aa4:	4b3e      	ldr	r3, [pc, #248]	; (8002ba0 <RescheduleTimerList+0x120>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <RescheduleTimerList+0x120>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002ab4:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <RescheduleTimerList+0x124>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	493a      	ldr	r1, [pc, #232]	; (8002ba8 <RescheduleTimerList+0x128>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3308      	adds	r3, #8
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002ace:	f7ff ff3f 	bl	8002950 <ReturnTimeElapsed>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d205      	bcs.n	8002aea <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002ae2:	4b32      	ldr	r3, [pc, #200]	; (8002bac <RescheduleTimerList+0x12c>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e04d      	b.n	8002b86 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	4a30      	ldr	r2, [pc, #192]	; (8002bb0 <RescheduleTimerList+0x130>)
 8002aee:	8812      	ldrh	r2, [r2, #0]
 8002af0:	b292      	uxth	r2, r2
 8002af2:	4413      	add	r3, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d906      	bls.n	8002b0a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002afc:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <RescheduleTimerList+0x130>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <RescheduleTimerList+0x12c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e03d      	b.n	8002b86 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <RescheduleTimerList+0x12c>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b1a:	e034      	b.n	8002b86 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	4922      	ldr	r1, [pc, #136]	; (8002ba8 <RescheduleTimerList+0x128>)
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d20a      	bcs.n	8002b4a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	491c      	ldr	r1, [pc, #112]	; (8002ba8 <RescheduleTimerList+0x128>)
 8002b38:	4613      	mov	r3, r2
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4413      	add	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	440b      	add	r3, r1
 8002b42:	3308      	adds	r3, #8
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	e013      	b.n	8002b72 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	4916      	ldr	r1, [pc, #88]	; (8002ba8 <RescheduleTimerList+0x128>)
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	3308      	adds	r3, #8
 8002b5a:	6819      	ldr	r1, [r3, #0]
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	1ac9      	subs	r1, r1, r3
 8002b62:	4811      	ldr	r0, [pc, #68]	; (8002ba8 <RescheduleTimerList+0x128>)
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4403      	add	r3, r0
 8002b6e:	3308      	adds	r3, #8
 8002b70:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	490c      	ldr	r1, [pc, #48]	; (8002ba8 <RescheduleTimerList+0x128>)
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	3315      	adds	r3, #21
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b06      	cmp	r3, #6
 8002b8a:	d1c7      	bne.n	8002b1c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002b8c:	89bb      	ldrh	r3, [r7, #12]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ff1e 	bl	80029d0 <RestartWakeupCounter>

  return ;
 8002b94:	bf00      	nop
}
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40002800 	.word	0x40002800
 8002ba0:	2000057c 	.word	0x2000057c
 8002ba4:	200002ec 	.word	0x200002ec
 8002ba8:	2000025c 	.word	0x2000025c
 8002bac:	200002f4 	.word	0x200002f4
 8002bb0:	200002fa 	.word	0x200002fa

08002bb4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bba:	f3ef 8310 	mrs	r3, PRIMASK
 8002bbe:	617b      	str	r3, [r7, #20]
  return(result);
 8002bc0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc4:	b672      	cpsid	i
}
 8002bc6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	22ca      	movs	r2, #202	; 0xca
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24
 8002bd0:	4b57      	ldr	r3, [pc, #348]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2253      	movs	r2, #83	; 0x53
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002bd8:	4b55      	ldr	r3, [pc, #340]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002be8:	4b52      	ldr	r3, [pc, #328]	; (8002d34 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002bf0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002bf4:	4950      	ldr	r1, [pc, #320]	; (8002d38 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	330c      	adds	r3, #12
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d16e      	bne.n	8002ce8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002c0a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c0e:	494a      	ldr	r1, [pc, #296]	; (8002d38 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002c1e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c22:	4945      	ldr	r1, [pc, #276]	; (8002d38 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3310      	adds	r3, #16
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002c34:	4b41      	ldr	r3, [pc, #260]	; (8002d3c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d04c      	beq.n	8002cd8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002c3e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c42:	493d      	ldr	r1, [pc, #244]	; (8002d38 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	330d      	adds	r3, #13
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d124      	bne.n	8002ca2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fdf2 	bl	8002848 <UnlinkTimer>
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f383 8810 	msr	PRIMASK, r3
}
 8002c6e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002c70:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c74:	4930      	ldr	r1, [pc, #192]	; (8002d38 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	3304      	adds	r3, #4
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fa32 	bl	80030f4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002c90:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	22ca      	movs	r2, #202	; 0xca
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2253      	movs	r2, #83	; 0x53
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
 8002ca0:	e012      	b.n	8002cc8 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f383 8810 	msr	PRIMASK, r3
}
 8002cac:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002cae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f99a 	bl	8002fec <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	22ca      	movs	r2, #202	; 0xca
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2253      	movs	r2, #83	; 0x53
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	69b8      	ldr	r0, [r7, #24]
 8002cd2:	f000 fa95 	bl	8003200 <HW_TS_RTC_Int_AppNot>
 8002cd6:	e022      	b.n	8002d1e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002cd8:	f7ff fed2 	bl	8002a80 <RescheduleTimerList>
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f383 8810 	msr	PRIMASK, r3
}
 8002ce6:	e01a      	b.n	8002d1e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002ce8:	bf00      	nop
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f8      	beq.n	8002cea <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002cf8:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002d0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f383 8810 	msr	PRIMASK, r3
}
 8002d1c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	22ff      	movs	r2, #255	; 0xff
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002d26:	bf00      	nop
}
 8002d28:	3728      	adds	r7, #40	; 0x28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	2000057c 	.word	0x2000057c
 8002d34:	200002ec 	.word	0x200002ec
 8002d38:	2000025c 	.word	0x2000025c
 8002d3c:	200002f4 	.word	0x200002f4
 8002d40:	58000800 	.word	0x58000800

08002d44 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d50:	4b5e      	ldr	r3, [pc, #376]	; (8002ecc <HW_TS_Init+0x188>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	22ca      	movs	r2, #202	; 0xca
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
 8002d58:	4b5c      	ldr	r3, [pc, #368]	; (8002ecc <HW_TS_Init+0x188>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2253      	movs	r2, #83	; 0x53
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d60:	4b5b      	ldr	r3, [pc, #364]	; (8002ed0 <HW_TS_Init+0x18c>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4a5a      	ldr	r2, [pc, #360]	; (8002ed0 <HW_TS_Init+0x18c>)
 8002d66:	f043 0320 	orr.w	r3, r3, #32
 8002d6a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002d6c:	4b58      	ldr	r3, [pc, #352]	; (8002ed0 <HW_TS_Init+0x18c>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f1c3 0304 	rsb	r3, r3, #4
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <HW_TS_Init+0x190>)
 8002d80:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002d82:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HW_TS_Init+0x18c>)
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d8a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002d8e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	fa92 f2a2 	rbit	r2, r2
 8002d96:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	2a00      	cmp	r2, #0
 8002da0:	d101      	bne.n	8002da6 <HW_TS_Init+0x62>
  {
    return 32U;
 8002da2:	2220      	movs	r2, #32
 8002da4:	e003      	b.n	8002dae <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	fab2 f282 	clz	r2, r2
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	40d3      	lsrs	r3, r2
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	3301      	adds	r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4b48      	ldr	r3, [pc, #288]	; (8002ed8 <HW_TS_Init+0x194>)
 8002db8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002dba:	4b45      	ldr	r3, [pc, #276]	; (8002ed0 <HW_TS_Init+0x18c>)
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	4b44      	ldr	r3, [pc, #272]	; (8002edc <HW_TS_Init+0x198>)
 8002dcc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002dce:	4b43      	ldr	r3, [pc, #268]	; (8002edc <HW_TS_Init+0x198>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	4a40      	ldr	r2, [pc, #256]	; (8002ed8 <HW_TS_Init+0x194>)
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002de0:	4a3c      	ldr	r2, [pc, #240]	; (8002ed4 <HW_TS_Init+0x190>)
 8002de2:	7812      	ldrb	r2, [r2, #0]
 8002de4:	40d3      	lsrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d904      	bls.n	8002dfc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002df2:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HW_TS_Init+0x19c>)
 8002df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df8:	801a      	strh	r2, [r3, #0]
 8002dfa:	e003      	b.n	8002e04 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <HW_TS_Init+0x19c>)
 8002e02:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002e04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e08:	f7ff fb9c 	bl	8002544 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002e0c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e10:	f7ff fb84 	bl	800251c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d13d      	bne.n	8002e96 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002e1a:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <HW_TS_Init+0x1a0>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002e20:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <HW_TS_Init+0x1a4>)
 8002e22:	f04f 32ff 	mov.w	r2, #4294967295
 8002e26:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	77fb      	strb	r3, [r7, #31]
 8002e2c:	e00c      	b.n	8002e48 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002e2e:	7ffa      	ldrb	r2, [r7, #31]
 8002e30:	492e      	ldr	r1, [pc, #184]	; (8002eec <HW_TS_Init+0x1a8>)
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
 8002e44:	3301      	adds	r3, #1
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	7ffb      	ldrb	r3, [r7, #31]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d9ef      	bls.n	8002e2e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HW_TS_Init+0x1ac>)
 8002e50:	2206      	movs	r2, #6
 8002e52:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HW_TS_Init+0x188>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <HW_TS_Init+0x188>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e62:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HW_TS_Init+0x188>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <HW_TS_Init+0x188>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e74:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HW_TS_Init+0x1b0>)
 8002e78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e7c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002e7e:	2003      	movs	r0, #3
 8002e80:	f001 fab5 	bl	80043ee <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HW_TS_Init+0x188>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HW_TS_Init+0x188>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	e009      	b.n	8002eaa <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HW_TS_Init+0x188>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	f001 fa94 	bl	80043d2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HW_TS_Init+0x188>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	22ff      	movs	r2, #255	; 0xff
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2103      	movs	r1, #3
 8002eb6:	2003      	movs	r0, #3
 8002eb8:	f001 fa45 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	f001 fa5c 	bl	800437a <HAL_NVIC_EnableIRQ>

  return;
 8002ec2:	bf00      	nop
}
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	2000057c 	.word	0x2000057c
 8002ed0:	40002800 	.word	0x40002800
 8002ed4:	200002f5 	.word	0x200002f5
 8002ed8:	200002f6 	.word	0x200002f6
 8002edc:	200002f8 	.word	0x200002f8
 8002ee0:	200002fa 	.word	0x200002fa
 8002ee4:	200002f4 	.word	0x200002f4
 8002ee8:	200002f0 	.word	0x200002f0
 8002eec:	2000025c 	.word	0x2000025c
 8002ef0:	200002ec 	.word	0x200002ec
 8002ef4:	58000800 	.word	0x58000800

08002ef8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b08b      	sub	sp, #44	; 0x2c
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f12:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f14:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002f16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f18:	b672      	cpsid	i
}
 8002f1a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002f1c:	e004      	b.n	8002f28 <HW_TS_Create+0x30>
  {
    loop++;
 8002f1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f22:	3301      	adds	r3, #1
 8002f24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002f28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d80c      	bhi.n	8002f4a <HW_TS_Create+0x52>
 8002f30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f34:	492c      	ldr	r1, [pc, #176]	; (8002fe8 <HW_TS_Create+0xf0>)
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	440b      	add	r3, r1
 8002f40:	330c      	adds	r3, #12
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e9      	bne.n	8002f1e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d038      	beq.n	8002fc4 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002f52:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f56:	4924      	ldr	r1, [pc, #144]	; (8002fe8 <HW_TS_Create+0xf0>)
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	330c      	adds	r3, #12
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f383 8810 	msr	PRIMASK, r3
}
 8002f72:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002f74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f78:	491b      	ldr	r1, [pc, #108]	; (8002fe8 <HW_TS_Create+0xf0>)
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	440b      	add	r3, r1
 8002f84:	3310      	adds	r3, #16
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002f8a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f8e:	4916      	ldr	r1, [pc, #88]	; (8002fe8 <HW_TS_Create+0xf0>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	440b      	add	r3, r1
 8002f9a:	330d      	adds	r3, #13
 8002f9c:	79fa      	ldrb	r2, [r7, #7]
 8002f9e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002fa0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002fa4:	4910      	ldr	r1, [pc, #64]	; (8002fe8 <HW_TS_Create+0xf0>)
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	440b      	add	r3, r1
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002fba:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002fc2:	e008      	b.n	8002fd6 <HW_TS_Create+0xde>
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f383 8810 	msr	PRIMASK, r3
}
 8002fce:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	372c      	adds	r7, #44	; 0x2c
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	2000025c 	.word	0x2000025c

08002fec <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffa:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002ffe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003000:	b672      	cpsid	i
}
 8003002:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003004:	2003      	movs	r0, #3
 8003006:	f001 f9c6 	bl	8004396 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800300a:	4b34      	ldr	r3, [pc, #208]	; (80030dc <HW_TS_Stop+0xf0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	22ca      	movs	r2, #202	; 0xca
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
 8003012:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HW_TS_Stop+0xf0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2253      	movs	r2, #83	; 0x53
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800301a:	79fa      	ldrb	r2, [r7, #7]
 800301c:	4930      	ldr	r1, [pc, #192]	; (80030e0 <HW_TS_Stop+0xf4>)
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	330c      	adds	r3, #12
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d142      	bne.n	80030b8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fc06 	bl	8002848 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800303c:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HW_TS_Stop+0xf8>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	2b06      	cmp	r3, #6
 8003046:	d12f      	bne.n	80030a8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HW_TS_Stop+0xfc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003054:	d107      	bne.n	8003066 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003056:	bf00      	nop
 8003058:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HW_TS_Stop+0xf0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f8      	bne.n	8003058 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HW_TS_Stop+0xf0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HW_TS_Stop+0xf0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003074:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003076:	bf00      	nop
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HW_TS_Stop+0xf0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f8      	beq.n	8003078 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <HW_TS_Stop+0xf0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <HW_TS_Stop+0xf0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003096:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003098:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HW_TS_Stop+0x100>)
 800309a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800309e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80030a0:	2003      	movs	r0, #3
 80030a2:	f001 f9a4 	bl	80043ee <HAL_NVIC_ClearPendingIRQ>
 80030a6:	e007      	b.n	80030b8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HW_TS_Stop+0x104>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	7cfa      	ldrb	r2, [r7, #19]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80030b4:	f7ff fce4 	bl	8002a80 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HW_TS_Stop+0xf0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80030c0:	2003      	movs	r0, #3
 80030c2:	f001 f95a 	bl	800437a <HAL_NVIC_EnableIRQ>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f383 8810 	msr	PRIMASK, r3
}
 80030d0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80030d2:	bf00      	nop
}
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000057c 	.word	0x2000057c
 80030e0:	2000025c 	.word	0x2000025c
 80030e4:	200002ec 	.word	0x200002ec
 80030e8:	40002800 	.word	0x40002800
 80030ec:	58000800 	.word	0x58000800
 80030f0:	200002ed 	.word	0x200002ed

080030f4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	6039      	str	r1, [r7, #0]
 80030fe:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003100:	79fa      	ldrb	r2, [r7, #7]
 8003102:	493b      	ldr	r1, [pc, #236]	; (80031f0 <HW_TS_Start+0xfc>)
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	440b      	add	r3, r1
 800310e:	330c      	adds	r3, #12
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d103      	bne.n	8003120 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff66 	bl	8002fec <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003120:	f3ef 8310 	mrs	r3, PRIMASK
 8003124:	60fb      	str	r3, [r7, #12]
  return(result);
 8003126:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003128:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800312a:	b672      	cpsid	i
}
 800312c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800312e:	2003      	movs	r0, #3
 8003130:	f001 f931 	bl	8004396 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <HW_TS_Start+0x100>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	22ca      	movs	r2, #202	; 0xca
 800313a:	625a      	str	r2, [r3, #36]	; 0x24
 800313c:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <HW_TS_Start+0x100>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2253      	movs	r2, #83	; 0x53
 8003142:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003144:	79fa      	ldrb	r2, [r7, #7]
 8003146:	492a      	ldr	r1, [pc, #168]	; (80031f0 <HW_TS_Start+0xfc>)
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	440b      	add	r3, r1
 8003152:	330c      	adds	r3, #12
 8003154:	2202      	movs	r2, #2
 8003156:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003158:	79fa      	ldrb	r2, [r7, #7]
 800315a:	4925      	ldr	r1, [pc, #148]	; (80031f0 <HW_TS_Start+0xfc>)
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	440b      	add	r3, r1
 8003166:	3308      	adds	r3, #8
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800316c:	79fa      	ldrb	r2, [r7, #7]
 800316e:	4920      	ldr	r1, [pc, #128]	; (80031f0 <HW_TS_Start+0xfc>)
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	3304      	adds	r3, #4
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fab6 	bl	80026f4 <linkTimer>
 8003188:	4603      	mov	r3, r0
 800318a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800318c:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <HW_TS_Start+0x104>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003192:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <HW_TS_Start+0x108>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	7c7a      	ldrb	r2, [r7, #17]
 800319a:	429a      	cmp	r2, r3
 800319c:	d002      	beq.n	80031a4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800319e:	f7ff fc6f 	bl	8002a80 <RescheduleTimerList>
 80031a2:	e013      	b.n	80031cc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80031a4:	79fa      	ldrb	r2, [r7, #7]
 80031a6:	4912      	ldr	r1, [pc, #72]	; (80031f0 <HW_TS_Start+0xfc>)
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	3308      	adds	r3, #8
 80031b4:	6819      	ldr	r1, [r3, #0]
 80031b6:	8a7b      	ldrh	r3, [r7, #18]
 80031b8:	79fa      	ldrb	r2, [r7, #7]
 80031ba:	1ac9      	subs	r1, r1, r3
 80031bc:	480c      	ldr	r0, [pc, #48]	; (80031f0 <HW_TS_Start+0xfc>)
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4403      	add	r3, r0
 80031c8:	3308      	adds	r3, #8
 80031ca:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HW_TS_Start+0x100>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	22ff      	movs	r2, #255	; 0xff
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80031d4:	2003      	movs	r0, #3
 80031d6:	f001 f8d0 	bl	800437a <HAL_NVIC_EnableIRQ>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f383 8810 	msr	PRIMASK, r3
}
 80031e4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80031e6:	bf00      	nop
}
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	2000025c 	.word	0x2000025c
 80031f4:	2000057c 	.word	0x2000057c
 80031f8:	200002ec 	.word	0x200002ec
 80031fc:	200002ed 	.word	0x200002ed

08003200 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	460b      	mov	r3, r1
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4798      	blx	r3

  return;
 8003212:	bf00      	nop
}
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HW_UART_Transmit_IT>:

    return;
}

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	4603      	mov	r3, r0
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	4613      	mov	r3, r2
 800322c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HW_UART_Transmit_IT+0x1e>
 8003234:	2b02      	cmp	r3, #2
 8003236:	d00d      	beq.n	8003254 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8003238:	e019      	b.n	800326e <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 800323a:	4a0f      	ldr	r2, [pc, #60]	; (8003278 <HW_UART_Transmit_IT+0x5c>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <HW_UART_Transmit_IT+0x60>)
 8003242:	4a0f      	ldr	r2, [pc, #60]	; (8003280 <HW_UART_Transmit_IT+0x64>)
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	89bb      	ldrh	r3, [r7, #12]
 8003248:	461a      	mov	r2, r3
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	480b      	ldr	r0, [pc, #44]	; (800327c <HW_UART_Transmit_IT+0x60>)
 800324e:	f004 fad3 	bl	80077f8 <HAL_UART_Transmit_IT>
            break;
 8003252:	e00c      	b.n	800326e <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8003254:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <HW_UART_Transmit_IT+0x68>)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HW_UART_Transmit_IT+0x6c>)
 800325c:	4a0b      	ldr	r2, [pc, #44]	; (800328c <HW_UART_Transmit_IT+0x70>)
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	89bb      	ldrh	r3, [r7, #12]
 8003262:	461a      	mov	r2, r3
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4808      	ldr	r0, [pc, #32]	; (8003288 <HW_UART_Transmit_IT+0x6c>)
 8003268:	f004 fac6 	bl	80077f8 <HAL_UART_Transmit_IT>
            break;
 800326c:	bf00      	nop
    }

    return;
 800326e:	bf00      	nop
}
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200002fc 	.word	0x200002fc
 800327c:	200003d4 	.word	0x200003d4
 8003280:	40013800 	.word	0x40013800
 8003284:	20000300 	.word	0x20000300
 8003288:	20000340 	.word	0x20000340
 800328c:	40008000 	.word	0x40008000

08003290 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0f      	ldr	r2, [pc, #60]	; (80032dc <HAL_UART_TxCpltCallback+0x4c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00a      	beq.n	80032b8 <HAL_UART_TxCpltCallback+0x28>
 80032a2:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_UART_TxCpltCallback+0x50>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d10f      	bne.n	80032c8 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <HAL_UART_TxCpltCallback+0x54>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_UART_TxCpltCallback+0x54>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4798      	blx	r3
            }
            break;
 80032b6:	e009      	b.n	80032cc <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_UART_TxCpltCallback+0x58>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_UART_TxCpltCallback+0x58>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4798      	blx	r3
            }
            break;
 80032c6:	e003      	b.n	80032d0 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 80032c8:	bf00      	nop
 80032ca:	e002      	b.n	80032d2 <HAL_UART_TxCpltCallback+0x42>
            break;
 80032cc:	bf00      	nop
 80032ce:	e000      	b.n	80032d2 <HAL_UART_TxCpltCallback+0x42>
            break;
 80032d0:	bf00      	nop
    }

    return;
 80032d2:	bf00      	nop
}
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40008000 	.word	0x40008000
 80032e0:	40013800 	.word	0x40013800
 80032e4:	200002fc 	.word	0x200002fc
 80032e8:	20000300 	.word	0x20000300

080032ec <LL_RCC_LSE_SetDriveCapability>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80032f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f023 0218 	bic.w	r2, r3, #24
 8003300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_AHB1_GRP1_EnableClock>:
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4313      	orrs	r3, r2
 800332e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4013      	ands	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800333c:	68fb      	ldr	r3, [r7, #12]
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <LL_AHB2_GRP1_EnableClock>:
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4313      	orrs	r3, r2
 8003360:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4013      	ands	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800336e:	68fb      	ldr	r3, [r7, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_APB1_GRP1_EnableClock>:
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003388:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800338a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4313      	orrs	r3, r2
 8003392:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003398:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033a0:	68fb      	ldr	r3, [r7, #12]
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <main>:
SensorData_t sensor_data;
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80033b6:	f000 fdc3 	bl	8003f40 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 80033ba:	f7fe fef3 	bl	80021a4 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80033be:	f000 f84d 	bl	800345c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80033c2:	f000 f8a7 	bl	8003514 <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 80033c6:	f000 f8c5 	bl	8003554 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80033ca:	f000 f98b 	bl	80036e4 <MX_GPIO_Init>
	MX_DMA_Init();
 80033ce:	f000 f96f 	bl	80036b0 <MX_DMA_Init>
	MX_RF_Init();
 80033d2:	f000 f931 	bl	8003638 <MX_RF_Init>
	MX_RTC_Init();
 80033d6:	f000 f937 	bl	8003648 <MX_RTC_Init>
	MX_I2C1_Init();
 80033da:	f000 f8cf 	bl	800357c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	sensirion_i2c_init(&hi2c1);
 80033de:	481a      	ldr	r0, [pc, #104]	; (8003448 <main+0x98>)
 80033e0:	f7fd f832 	bl	8000448 <sensirion_i2c_init>
	sht4x_enable_low_power_mode(1);
 80033e4:	2001      	movs	r0, #1
 80033e6:	f7fd f915 	bl	8000614 <sht4x_enable_low_power_mode>
	platform_stts22h_init(&hi2c1);
 80033ea:	4817      	ldr	r0, [pc, #92]	; (8003448 <main+0x98>)
 80033ec:	f7fd f934 	bl	8000658 <platform_stts22h_init>
	stts22h_temp_data_rate_set(0x01);
 80033f0:	2001      	movs	r0, #1
 80033f2:	f7fd f9c3 	bl	800077c <stts22h_temp_data_rate_set>
	app_algo_init(sensor_data);
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <main+0x9c>)
 80033f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033fc:	f7fe fd64 	bl	8001ec8 <app_algo_init>

	// fill algo queue
	for(uint8_t i=0; i<10; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	71fb      	strb	r3, [r7, #7]
 8003404:	e017      	b.n	8003436 <main+0x86>
	{
		sht4x_measure_blocking_read(&sensor_data.temp_main, &sensor_data.humidity);
 8003406:	4911      	ldr	r1, [pc, #68]	; (800344c <main+0x9c>)
 8003408:	4811      	ldr	r0, [pc, #68]	; (8003450 <main+0xa0>)
 800340a:	f7fd f8a9 	bl	8000560 <sht4x_measure_blocking_read>
		stts22h_temperature_raw_get(&sensor_data.temp_aux);
 800340e:	4811      	ldr	r0, [pc, #68]	; (8003454 <main+0xa4>)
 8003410:	f7fd fa79 	bl	8000906 <stts22h_temperature_raw_get>
		int8_t tmp;
		app_algo_proc(sensor_data, 0, &tmp);
 8003414:	4a0d      	ldr	r2, [pc, #52]	; (800344c <main+0x9c>)
 8003416:	1dbb      	adds	r3, r7, #6
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	2300      	movs	r3, #0
 800341c:	ca07      	ldmia	r2, {r0, r1, r2}
 800341e:	f7fe fd71 	bl	8001f04 <app_algo_proc>
		HAL_Delay(100);
 8003422:	2064      	movs	r0, #100	; 0x64
 8003424:	f7fe ffce 	bl	80023c4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003428:	2102      	movs	r1, #2
 800342a:	480b      	ldr	r0, [pc, #44]	; (8003458 <main+0xa8>)
 800342c:	f001 fba0 	bl	8004b70 <HAL_GPIO_TogglePin>
	for(uint8_t i=0; i<10; i++)
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	3301      	adds	r3, #1
 8003434:	71fb      	strb	r3, [r7, #7]
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	2b09      	cmp	r3, #9
 800343a:	d9e4      	bls.n	8003406 <main+0x56>
	}

	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 800343c:	f7fe fec0 	bl	80021c0 <MX_APPE_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		MX_APPE_Process();
 8003440:	f7fe ffe5 	bl	800240e <MX_APPE_Process>
 8003444:	e7fc      	b.n	8003440 <main+0x90>
 8003446:	bf00      	nop
 8003448:	20000528 	.word	0x20000528
 800344c:	200005a0 	.word	0x200005a0
 8003450:	200005a4 	.word	0x200005a4
 8003454:	200005a8 	.word	0x200005a8
 8003458:	48000800 	.word	0x48000800

0800345c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b09a      	sub	sp, #104	; 0x68
 8003460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003462:	f107 0320 	add.w	r3, r7, #32
 8003466:	2248      	movs	r2, #72	; 0x48
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f007 fc74 	bl	800ad58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	60da      	str	r2, [r3, #12]
 800347c:	611a      	str	r2, [r3, #16]
 800347e:	615a      	str	r2, [r3, #20]
 8003480:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003482:	f002 f9f7 	bl	8005874 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003486:	2000      	movs	r0, #0
 8003488:	f7ff ff30 	bl	80032ec <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800348c:	4b20      	ldr	r3, [pc, #128]	; (8003510 <SystemClock_Config+0xb4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003494:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <SystemClock_Config+0xb4>)
 8003496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <SystemClock_Config+0xb4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80034a8:	2307      	movs	r3, #7
 80034aa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80034b2:	2301      	movs	r3, #1
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034bc:	2340      	movs	r3, #64	; 0x40
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034c4:	f107 0320 	add.w	r3, r7, #32
 80034c8:	4618      	mov	r0, r3
 80034ca:	f002 fdcd 	bl	8006068 <HAL_RCC_OscConfig>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80034d4:	f000 f930 	bl	8003738 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80034d8:	236f      	movs	r3, #111	; 0x6f
 80034da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80034dc:	2302      	movs	r3, #2
 80034de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80034f4:	1d3b      	adds	r3, r7, #4
 80034f6:	2101      	movs	r1, #1
 80034f8:	4618      	mov	r0, r3
 80034fa:	f003 f929 	bl	8006750 <HAL_RCC_ClockConfig>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003504:	f000 f918 	bl	8003738 <Error_Handler>
  }
}
 8003508:	bf00      	nop
 800350a:	3768      	adds	r7, #104	; 0x68
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	58000400 	.word	0x58000400

08003514 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b094      	sub	sp, #80	; 0x50
 8003518:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800351a:	463b      	mov	r3, r7
 800351c:	2250      	movs	r2, #80	; 0x50
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f007 fc19 	bl	800ad58 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003526:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800352a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800352c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003530:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003532:	2302      	movs	r3, #2
 8003534:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8003536:	2300      	movs	r3, #0
 8003538:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800353a:	463b      	mov	r3, r7
 800353c:	4618      	mov	r0, r3
 800353e:	f003 fd18 	bl	8006f72 <HAL_RCCEx_PeriphCLKConfig>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003548:	f000 f8f6 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800354c:	bf00      	nop
 800354e:	3750      	adds	r7, #80	; 0x50
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <MX_IPCC_Init+0x20>)
 800355a:	4a07      	ldr	r2, [pc, #28]	; (8003578 <MX_IPCC_Init+0x24>)
 800355c:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 800355e:	4805      	ldr	r0, [pc, #20]	; (8003574 <MX_IPCC_Init+0x20>)
 8003560:	f002 f902 	bl	8005768 <HAL_IPCC_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_IPCC_Init+0x1a>
		Error_Handler();
 800356a:	f000 f8e5 	bl	8003738 <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000304 	.word	0x20000304
 8003578:	58000c00 	.word	0x58000c00

0800357c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	// Configure PB8 and PB9 as alternate function pins
	__HAL_RCC_I2C1_CLK_ENABLE();
 8003582:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003586:	f7ff fef9 	bl	800337c <LL_APB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800358a:	2002      	movs	r0, #2
 800358c:	f7ff fedd 	bl	800334a <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef gpio_init;
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003590:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003594:	607b      	str	r3, [r7, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 8003596:	2312      	movs	r3, #18
 8003598:	60bb      	str	r3, [r7, #8]
	gpio_init.Pull = GPIO_PULLUP;
 800359a:	2301      	movs	r3, #1
 800359c:	60fb      	str	r3, [r7, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359e:	2303      	movs	r3, #3
 80035a0:	613b      	str	r3, [r7, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 80035a2:	2304      	movs	r3, #4
 80035a4:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &gpio_init);
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	4619      	mov	r1, r3
 80035aa:	4820      	ldr	r0, [pc, #128]	; (800362c <MX_I2C1_Init+0xb0>)
 80035ac:	f001 f958 	bl	8004860 <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 80035b0:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <MX_I2C1_Init+0xb4>)
 80035b2:	4a20      	ldr	r2, [pc, #128]	; (8003634 <MX_I2C1_Init+0xb8>)
 80035b4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 80035b6:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <MX_I2C1_Init+0xb4>)
 80035b8:	f640 6214 	movw	r2, #3604	; 0xe14
 80035bc:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0x00;
 80035be:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <MX_I2C1_Init+0xb4>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035c4:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <MX_I2C1_Init+0xb4>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035ca:	4b19      	ldr	r3, [pc, #100]	; (8003630 <MX_I2C1_Init+0xb4>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80035d0:	4b17      	ldr	r3, [pc, #92]	; (8003630 <MX_I2C1_Init+0xb4>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035d6:	4b16      	ldr	r3, [pc, #88]	; (8003630 <MX_I2C1_Init+0xb4>)
 80035d8:	2200      	movs	r2, #0
 80035da:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035dc:	4b14      	ldr	r3, [pc, #80]	; (8003630 <MX_I2C1_Init+0xb4>)
 80035de:	2200      	movs	r2, #0
 80035e0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <MX_I2C1_Init+0xb4>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80035e8:	4811      	ldr	r0, [pc, #68]	; (8003630 <MX_I2C1_Init+0xb4>)
 80035ea:	f001 fb17 	bl	8004c1c <HAL_I2C_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_I2C1_Init+0x7c>
		Error_Handler();
 80035f4:	f000 f8a0 	bl	8003738 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80035f8:	2100      	movs	r1, #0
 80035fa:	480d      	ldr	r0, [pc, #52]	; (8003630 <MX_I2C1_Init+0xb4>)
 80035fc:	f002 f80a 	bl	8005614 <HAL_I2CEx_ConfigAnalogFilter>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_I2C1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8003606:	f000 f897 	bl	8003738 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800360a:	2100      	movs	r1, #0
 800360c:	4808      	ldr	r0, [pc, #32]	; (8003630 <MX_I2C1_Init+0xb4>)
 800360e:	f002 f84c 	bl	80056aa <HAL_I2CEx_ConfigDigitalFilter>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <MX_I2C1_Init+0xa0>
		Error_Handler();
 8003618:	f000 f88e 	bl	8003738 <Error_Handler>
	}
	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800361c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003620:	f002 f890 	bl	8005744 <HAL_I2CEx_EnableFastModePlus>
}
 8003624:	bf00      	nop
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	48000400 	.word	0x48000400
 8003630:	20000528 	.word	0x20000528
 8003634:	40005400 	.word	0x40005400

08003638 <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800364c:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <MX_RTC_Init+0x60>)
 800364e:	4a17      	ldr	r2, [pc, #92]	; (80036ac <MX_RTC_Init+0x64>)
 8003650:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <MX_RTC_Init+0x60>)
 8003654:	2200      	movs	r2, #0
 8003656:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <MX_RTC_Init+0x60>)
 800365a:	220f      	movs	r2, #15
 800365c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <MX_RTC_Init+0x60>)
 8003660:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003664:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <MX_RTC_Init+0x60>)
 8003668:	2200      	movs	r2, #0
 800366a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <MX_RTC_Init+0x60>)
 800366e:	2200      	movs	r2, #0
 8003670:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <MX_RTC_Init+0x60>)
 8003674:	2200      	movs	r2, #0
 8003676:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <MX_RTC_Init+0x60>)
 800367a:	2200      	movs	r2, #0
 800367c:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800367e:	480a      	ldr	r0, [pc, #40]	; (80036a8 <MX_RTC_Init+0x60>)
 8003680:	f003 fefe 	bl	8007480 <HAL_RTC_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_RTC_Init+0x46>
		Error_Handler();
 800368a:	f000 f855 	bl	8003738 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 800368e:	2200      	movs	r2, #0
 8003690:	2100      	movs	r1, #0
 8003692:	4805      	ldr	r0, [pc, #20]	; (80036a8 <MX_RTC_Init+0x60>)
 8003694:	f003 fff4 	bl	8007680 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 800369e:	f000 f84b 	bl	8003738 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	2000057c 	.word	0x2000057c
 80036ac:	40002800 	.word	0x40002800

080036b0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80036b4:	2004      	movs	r0, #4
 80036b6:	f7ff fe2f 	bl	8003318 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80036ba:	2001      	movs	r0, #1
 80036bc:	f7ff fe2c 	bl	8003318 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2100      	movs	r1, #0
 80036c4:	200b      	movs	r0, #11
 80036c6:	f000 fe3e 	bl	8004346 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80036ca:	200b      	movs	r0, #11
 80036cc:	f000 fe55 	bl	800437a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2100      	movs	r1, #0
 80036d4:	200c      	movs	r0, #12
 80036d6:	f000 fe36 	bl	8004346 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80036da:	200c      	movs	r0, #12
 80036dc:	f000 fe4d 	bl	800437a <HAL_NVIC_EnableIRQ>

}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80036ea:	2004      	movs	r0, #4
 80036ec:	f7ff fe2d 	bl	800334a <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80036f0:	2001      	movs	r0, #1
 80036f2:	f7ff fe2a 	bl	800334a <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80036f6:	2002      	movs	r0, #2
 80036f8:	f7ff fe27 	bl	800334a <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80036fc:	1d3b      	adds	r3, r7, #4
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800370a:	2303      	movs	r3, #3
 800370c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370e:	2301      	movs	r3, #1
 8003710:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800371a:	1d3b      	adds	r3, r7, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4805      	ldr	r0, [pc, #20]	; (8003734 <MX_GPIO_Init+0x50>)
 8003720:	f001 f89e 	bl	8004860 <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003724:	2102      	movs	r1, #2
 8003726:	4803      	ldr	r0, [pc, #12]	; (8003734 <MX_GPIO_Init+0x50>)
 8003728:	f001 fa22 	bl	8004b70 <HAL_GPIO_TogglePin>

}
 800372c:	bf00      	nop
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	48000800 	.word	0x48000800

08003738 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <LL_PWR_SetPowerMode>:
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <LL_PWR_SetPowerMode+0x24>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f023 0207 	bic.w	r2, r3, #7
 8003758:	4904      	ldr	r1, [pc, #16]	; (800376c <LL_PWR_SetPowerMode+0x24>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4313      	orrs	r3, r2
 800375e:	600b      	str	r3, [r1, #0]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	58000400 	.word	0x58000400

08003770 <LL_C2_PWR_SetPowerMode>:
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <LL_C2_PWR_SetPowerMode+0x28>)
 800377a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800377e:	f023 0207 	bic.w	r2, r3, #7
 8003782:	4905      	ldr	r1, [pc, #20]	; (8003798 <LL_C2_PWR_SetPowerMode+0x28>)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	58000400 	.word	0x58000400

0800379c <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <LL_PWR_ClearFlag_WU+0x14>)
 80037a2:	221f      	movs	r2, #31
 80037a4:	619a      	str	r2, [r3, #24]
}
 80037a6:	bf00      	nop
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	58000400 	.word	0x58000400

080037b4 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c6:	d101      	bne.n	80037cc <LL_PWR_IsActiveFlag_C2SB+0x18>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <LL_PWR_IsActiveFlag_C2SB+0x1a>
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	58000400 	.word	0x58000400

080037dc <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ee:	d101      	bne.n	80037f4 <LL_PWR_IsActiveFlag_C2DS+0x18>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	58000400 	.word	0x58000400

08003804 <LL_RCC_HSE_Enable>:
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LL_RCC_HSE_IsReady>:
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003834:	d101      	bne.n	800383a <LL_RCC_HSE_IsReady+0x18>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <LL_RCC_HSE_IsReady+0x1a>
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <LL_RCC_HSI_Enable>:
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003858:	6013      	str	r3, [r2, #0]
}
 800385a:	bf00      	nop
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <LL_RCC_HSI_IsReady>:
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003876:	d101      	bne.n	800387c <LL_RCC_HSI_IsReady+0x18>
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <LL_RCC_HSI_IsReady+0x1a>
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_RCC_SetSysClkSource>:
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LL_RCC_GetSysClkSource>:
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
}
 80038be:	4618      	mov	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80038d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f023 0203 	bic.w	r2, r3, #3
 80038da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_LPM_EnableSleep>:
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <LL_LPM_EnableSleep+0x1c>)
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <LL_LPM_EnableSleep+0x1c>)
 80038fa:	f023 0304 	bic.w	r3, r3, #4
 80038fe:	6113      	str	r3, [r2, #16]
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <LL_LPM_EnableDeepSleep+0x1c>)
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	4a04      	ldr	r2, [pc, #16]	; (800392c <LL_LPM_EnableDeepSleep+0x1c>)
 800391a:	f043 0304 	orr.w	r3, r3, #4
 800391e:	6113      	str	r3, [r2, #16]
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	3220      	adds	r2, #32
 8003940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003944:	4a05      	ldr	r2, [pc, #20]	; (800395c <LL_HSEM_1StepLock+0x2c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d001      	beq.n	800394e <LL_HSEM_1StepLock+0x1e>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <LL_HSEM_1StepLock+0x20>
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	80000400 	.word	0x80000400

08003960 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 800398a:	f000 fb6b 	bl	8004064 <HAL_SuspendTick>

  EnterLowPower();
 800398e:	f000 f839 	bl	8003a04 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8003992:	f7ff ff03 	bl	800379c <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8003996:	2003      	movs	r0, #3
 8003998:	f7ff fed6 	bl	8003748 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800399c:	f7ff ffb8 	bl	8003910 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 80039a0:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 80039a2:	bf00      	nop
}
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 80039aa:	f000 fb6b 	bl	8004084 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 80039ae:	bf00      	nop
}
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 80039b6:	f000 fb55 	bl	8004064 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 80039ba:	f000 f823 	bl	8003a04 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/

  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 80039be:	2002      	movs	r0, #2
 80039c0:	f7ff fec2 	bl	8003748 <LL_PWR_SetPowerMode>

  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80039c4:	2004      	movs	r0, #4
 80039c6:	f7ff fed3 	bl	8003770 <LL_C2_PWR_SetPowerMode>
  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80039ca:	f7ff ffa1 	bl	8003910 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 80039ce:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 80039d0:	bf00      	nop
}
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 80039d8:	f000 f850 	bl	8003a7c <ExitLowPower>

  HAL_ResumeTick();
 80039dc:	f000 fb52 	bl	8004084 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 80039e0:	bf00      	nop
}
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 80039e8:	f000 fb3c 	bl	8004064 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80039ec:	f7ff ff80 	bl	80038f0 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 80039f0:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 80039f2:	bf00      	nop
}
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 80039fa:	f000 fb43 	bl	8004084 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 80039fe:	bf00      	nop
}
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8003a08:	bf00      	nop
 8003a0a:	2103      	movs	r1, #3
 8003a0c:	4819      	ldr	r0, [pc, #100]	; (8003a74 <EnterLowPower+0x70>)
 8003a0e:	f7ff ff8f 	bl	8003930 <LL_HSEM_1StepLock>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f8      	bne.n	8003a0a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8003a18:	2104      	movs	r1, #4
 8003a1a:	4816      	ldr	r0, [pc, #88]	; (8003a74 <EnterLowPower+0x70>)
 8003a1c:	f7ff ff88 	bl	8003930 <LL_HSEM_1StepLock>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d117      	bne.n	8003a56 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8003a26:	f7ff fed9 	bl	80037dc <LL_PWR_IsActiveFlag_C2DS>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d104      	bne.n	8003a3a <EnterLowPower+0x36>
 8003a30:	f7ff fec0 	bl	80037b4 <LL_PWR_IsActiveFlag_C2SB>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d015      	beq.n	8003a66 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	480d      	ldr	r0, [pc, #52]	; (8003a74 <EnterLowPower+0x70>)
 8003a40:	f7ff ff8e 	bl	8003960 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8003a44:	f000 f852 	bl	8003aec <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <EnterLowPower+0x74>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <EnterLowPower+0x74>)
 8003a4e:	f023 0307 	bic.w	r3, r3, #7
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	e007      	b.n	8003a66 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8003a56:	f000 f849 	bl	8003aec <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <EnterLowPower+0x74>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a06      	ldr	r2, [pc, #24]	; (8003a78 <EnterLowPower+0x74>)
 8003a60:	f023 0307 	bic.w	r3, r3, #7
 8003a64:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2103      	movs	r1, #3
 8003a6a:	4802      	ldr	r0, [pc, #8]	; (8003a74 <EnterLowPower+0x70>)
 8003a6c:	f7ff ff78 	bl	8003960 <LL_HSEM_ReleaseLock>

  return;
 8003a70:	bf00      	nop
}
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	58001400 	.word	0x58001400
 8003a78:	58004000 	.word	0x58004000

08003a7c <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2104      	movs	r1, #4
 8003a84:	4817      	ldr	r0, [pc, #92]	; (8003ae4 <ExitLowPower+0x68>)
 8003a86:	f7ff ff6b 	bl	8003960 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8003a8a:	bf00      	nop
 8003a8c:	2103      	movs	r1, #3
 8003a8e:	4815      	ldr	r0, [pc, #84]	; (8003ae4 <ExitLowPower+0x68>)
 8003a90:	f7ff ff4e 	bl	8003930 <LL_HSEM_1StepLock>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f8      	bne.n	8003a8c <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003a9a:	f7ff ff09 	bl	80038b0 <LL_RCC_GetSysClkSource>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d118      	bne.n	8003ad6 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 8003aa4:	f7ff feae 	bl	8003804 <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <ExitLowPower+0x6c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 0307 	bic.w	r3, r3, #7
 8003ab0:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <ExitLowPower+0x6c>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 8003ab8:	bf00      	nop
 8003aba:	f7ff feb2 	bl	8003822 <LL_RCC_HSE_IsReady>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0fa      	beq.n	8003aba <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8003ac4:	2002      	movs	r0, #2
 8003ac6:	f7ff fedf 	bl	8003888 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8003aca:	bf00      	nop
 8003acc:	f7ff fef0 	bl	80038b0 <LL_RCC_GetSysClkSource>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d1fa      	bne.n	8003acc <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2103      	movs	r1, #3
 8003ada:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <ExitLowPower+0x68>)
 8003adc:	f7ff ff40 	bl	8003960 <LL_HSEM_ReleaseLock>

  return;
 8003ae0:	bf00      	nop
}
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	58001400 	.word	0x58001400
 8003ae8:	58004000 	.word	0x58004000

08003aec <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8003af0:	f7ff fea9 	bl	8003846 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8003af4:	bf00      	nop
 8003af6:	f7ff feb5 	bl	8003864 <LL_RCC_HSI_IsReady>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0fa      	beq.n	8003af6 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003b00:	2001      	movs	r0, #1
 8003b02:	f7ff fec1 	bl	8003888 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8003b06:	2000      	movs	r0, #0
 8003b08:	f7ff fede 	bl	80038c8 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8003b0c:	bf00      	nop
 8003b0e:	f7ff fecf 	bl	80038b0 <LL_RCC_GetSysClkSource>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d1fa      	bne.n	8003b0e <Switch_On_HSI+0x22>
  return;
 8003b18:	bf00      	nop
}
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <LL_AHB3_GRP1_EnableClock>:
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_APB1_GRP1_EnableClock>:
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003bd2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bd6:	f7ff ffc8 	bl	8003b6a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2100      	movs	r1, #0
 8003bde:	2001      	movs	r0, #1
 8003be0:	f000 fbb1 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003be4:	2001      	movs	r0, #1
 8003be6:	f000 fbc8 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003bea:	2200      	movs	r2, #0
 8003bec:	2100      	movs	r1, #0
 8003bee:	2004      	movs	r0, #4
 8003bf0:	f000 fba9 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003bf4:	2004      	movs	r0, #4
 8003bf6:	f000 fbc0 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	2005      	movs	r0, #5
 8003c00:	f000 fba1 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003c04:	2005      	movs	r0, #5
 8003c06:	f000 fbb8 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2015      	movs	r0, #21
 8003c10:	f000 fb99 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8003c14:	2015      	movs	r0, #21
 8003c16:	f000 fbb0 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	202b      	movs	r0, #43	; 0x2b
 8003c20:	f000 fb91 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8003c24:	202b      	movs	r0, #43	; 0x2b
 8003c26:	f000 fba8 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	202e      	movs	r0, #46	; 0x2e
 8003c30:	f000 fb89 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003c34:	202e      	movs	r0, #46	; 0x2e
 8003c36:	f000 fba0 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	2036      	movs	r0, #54	; 0x36
 8003c40:	f000 fb81 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003c44:	2036      	movs	r0, #54	; 0x36
 8003c46:	f000 fb98 	bl	800437a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a0d      	ldr	r2, [pc, #52]	; (8003c94 <HAL_IPCC_MspInit+0x44>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d113      	bne.n	8003c8a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003c62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003c66:	f7ff ff80 	bl	8003b6a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	202c      	movs	r0, #44	; 0x2c
 8003c70:	f000 fb69 	bl	8004346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003c74:	202c      	movs	r0, #44	; 0x2c
 8003c76:	f000 fb80 	bl	800437a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	202d      	movs	r0, #45	; 0x2d
 8003c80:	f000 fb61 	bl	8004346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003c84:	202d      	movs	r0, #45	; 0x2d
 8003c86:	f000 fb78 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	58000c00 	.word	0x58000c00

08003c98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b096      	sub	sp, #88	; 0x58
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ca0:	f107 0308 	add.w	r3, r7, #8
 8003ca4:	2250      	movs	r2, #80	; 0x50
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f007 f855 	bl	800ad58 <memset>
  if(hrtc->Instance==RTC)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_RTC_MspInit+0x80>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d12b      	bne.n	8003d10 <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003cb8:	f001 fddc 	bl	8005874 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8003cbc:	f001 fdda 	bl	8005874 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 8003cc0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cc4:	f7ff ff2a 	bl	8003b1c <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003cc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ccc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cd2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cd4:	f107 0308 	add.w	r3, r7, #8
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f003 f94a 	bl	8006f72 <HAL_RCCEx_PeriphCLKConfig>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8003ce4:	f7ff fd28 	bl	8003738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ce8:	f7ff ff2e 	bl	8003b48 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003cec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003cf0:	f7ff ff54 	bl	8003b9c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	2003      	movs	r0, #3
 8003cfa:	f000 fb24 	bl	8004346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003cfe:	2003      	movs	r0, #3
 8003d00:	f000 fb3b 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <HAL_RTC_MspInit+0x80>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a03      	ldr	r2, [pc, #12]	; (8003d18 <HAL_RTC_MspInit+0x80>)
 8003d0a:	f023 0307 	bic.w	r3, r3, #7
 8003d0e:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d10:	bf00      	nop
 8003d12:	3758      	adds	r7, #88	; 0x58
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40002800 	.word	0x40002800

08003d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */

}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d3c:	e7fe      	b.n	8003d3c <MemManage_Handler+0x4>

08003d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */

}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */

}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d76:	b480      	push	{r7}
 8003d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d88:	f000 f934 	bl	8003ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d8c:	bf00      	nop
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003d94:	f001 fdd4 	bl	8005940 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003d98:	bf00      	nop
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003da0:	f7fe ff08 	bl	8002bb4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003da4:	bf00      	nop
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003dac:	f000 fc9a 	bl	80046e4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003dc8:	4802      	ldr	r0, [pc, #8]	; (8003dd4 <DMA1_Channel1_IRQHandler+0x10>)
 8003dca:	f000 fbdc 	bl	8004586 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000468 	.word	0x20000468

08003dd8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ddc:	4802      	ldr	r0, [pc, #8]	; (8003de8 <DMA1_Channel2_IRQHandler+0x10>)
 8003dde:	f000 fbd2 	bl	8004586 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200004c8 	.word	0x200004c8

08003dec <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e00:	4802      	ldr	r0, [pc, #8]	; (8003e0c <USART1_IRQHandler+0x10>)
 8003e02:	f003 fd8d 	bl	8007920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200003d4 	.word	0x200003d4

08003e10 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <LPUART1_IRQHandler+0x10>)
 8003e16:	f003 fd83 	bl	8007920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000340 	.word	0x20000340

08003e24 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003e36:	f7fd fde1 	bl	80019fc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003e42:	f7fd fe35 	bl	8001ab0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003e4e:	f000 fec1 	bl	8004bd4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003e56:	b480      	push	{r7}
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 8003e68:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e6c:	f000 fe9a 	bl	8004ba4 <HAL_GPIO_EXTI_IRQHandler>
}
 8003e70:	bf00      	nop
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8003e74:	b40c      	push	{r2, r3}
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	460a      	mov	r2, r1
 8003e80:	71fb      	strb	r3, [r7, #7]
 8003e82:	4613      	mov	r3, r2
 8003e84:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	b002      	add	sp, #8
 8003e92:	4770      	bx	lr

08003e94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003e98:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <SystemInit+0xa0>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003e9e:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <SystemInit+0xa0>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <SystemInit+0xa0>)
 8003ea6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003ec6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed2:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <SystemInit+0xa4>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ee4:	f023 0305 	bic.w	r3, r3, #5
 8003ee8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	4a0d      	ldr	r2, [pc, #52]	; (8003f3c <SystemInit+0xa8>)
 8003f06:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0c:	4a0b      	ldr	r2, [pc, #44]	; (8003f3c <SystemInit+0xa8>)
 8003f0e:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f24:	2200      	movs	r2, #0
 8003f26:	619a      	str	r2, [r3, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e000ed00 	.word	0xe000ed00
 8003f38:	faf6fefb 	.word	0xfaf6fefb
 8003f3c:	22041000 	.word	0x22041000

08003f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <HAL_Init+0x3c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a0b      	ldr	r2, [pc, #44]	; (8003f7c <HAL_Init+0x3c>)
 8003f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f56:	2003      	movs	r0, #3
 8003f58:	f000 f9ea 	bl	8004330 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f000 f80f 	bl	8003f80 <HAL_InitTick>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	71fb      	strb	r3, [r7, #7]
 8003f6c:	e001      	b.n	8003f72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f6e:	f7ff fe2e 	bl	8003bce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f72:	79fb      	ldrb	r3, [r7, #7]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	58004000 	.word	0x58004000

08003f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <HAL_InitTick+0x6c>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d024      	beq.n	8003fde <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003f94:	f002 fd88 	bl	8006aa8 <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <HAL_InitTick+0x6c>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fa04 	bl	80043ba <HAL_SYSTICK_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10f      	bne.n	8003fd8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d809      	bhi.n	8003fd2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc6:	f000 f9be 	bl	8004346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fca:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <HAL_InitTick+0x70>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	e007      	b.n	8003fe2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
 8003fd6:	e004      	b.n	8003fe2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
 8003fdc:	e001      	b.n	8003fe2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000034 	.word	0x20000034
 8003ff0:	20000030 	.word	0x20000030

08003ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_IncTick+0x20>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_IncTick+0x24>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4413      	add	r3, r2
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <HAL_IncTick+0x24>)
 8004006:	6013      	str	r3, [r2, #0]
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000034 	.word	0x20000034
 8004018:	200005ac 	.word	0x200005ac

0800401c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return uwTick;
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_GetTick+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	200005ac 	.word	0x200005ac

08004034 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <HAL_GetTickPrio+0x14>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000030 	.word	0x20000030

0800404c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_GetTickFreq+0x14>)
 8004052:	781b      	ldrb	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20000034 	.word	0x20000034

08004064 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_SuspendTick+0x1c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a04      	ldr	r2, [pc, #16]	; (8004080 <HAL_SuspendTick+0x1c>)
 800406e:	f023 0302 	bic.w	r3, r3, #2
 8004072:	6013      	str	r3, [r2, #0]
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	e000e010 	.word	0xe000e010

08004084 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_ResumeTick+0x1c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <HAL_ResumeTick+0x1c>)
 800408e:	f043 0302 	orr.w	r3, r3, #2
 8004092:	6013      	str	r3, [r2, #0]
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000e010 	.word	0xe000e010

080040a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <__NVIC_SetPriorityGrouping+0x44>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040c0:	4013      	ands	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <__NVIC_SetPriorityGrouping+0x44>)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	60d3      	str	r3, [r2, #12]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <__NVIC_GetPriorityGrouping+0x18>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	f003 0307 	and.w	r3, r3, #7
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004116:	2b00      	cmp	r3, #0
 8004118:	db0b      	blt.n	8004132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	f003 021f 	and.w	r2, r3, #31
 8004120:	4907      	ldr	r1, [pc, #28]	; (8004140 <__NVIC_EnableIRQ+0x38>)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2001      	movs	r0, #1
 800412a:	fa00 f202 	lsl.w	r2, r0, r2
 800412e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000e100 	.word	0xe000e100

08004144 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800414e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004152:	2b00      	cmp	r3, #0
 8004154:	db12      	blt.n	800417c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	f003 021f 	and.w	r2, r3, #31
 800415c:	490a      	ldr	r1, [pc, #40]	; (8004188 <__NVIC_DisableIRQ+0x44>)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	2001      	movs	r0, #1
 8004166:	fa00 f202 	lsl.w	r2, r0, r2
 800416a:	3320      	adds	r3, #32
 800416c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004170:	f3bf 8f4f 	dsb	sy
}
 8004174:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004176:	f3bf 8f6f 	isb	sy
}
 800417a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000e100 	.word	0xe000e100

0800418c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	2b00      	cmp	r3, #0
 800419c:	db0c      	blt.n	80041b8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	f003 021f 	and.w	r2, r3, #31
 80041a4:	4907      	ldr	r1, [pc, #28]	; (80041c4 <__NVIC_SetPendingIRQ+0x38>)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2001      	movs	r0, #1
 80041ae:	fa00 f202 	lsl.w	r2, r0, r2
 80041b2:	3340      	adds	r3, #64	; 0x40
 80041b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000e100 	.word	0xe000e100

080041c8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	db0c      	blt.n	80041f4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	f003 021f 	and.w	r2, r3, #31
 80041e0:	4907      	ldr	r1, [pc, #28]	; (8004200 <__NVIC_ClearPendingIRQ+0x38>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2001      	movs	r0, #1
 80041ea:	fa00 f202 	lsl.w	r2, r0, r2
 80041ee:	3360      	adds	r3, #96	; 0x60
 80041f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	e000e100 	.word	0xe000e100

08004204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	6039      	str	r1, [r7, #0]
 800420e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004214:	2b00      	cmp	r3, #0
 8004216:	db0a      	blt.n	800422e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	490c      	ldr	r1, [pc, #48]	; (8004250 <__NVIC_SetPriority+0x4c>)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	0112      	lsls	r2, r2, #4
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	440b      	add	r3, r1
 8004228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800422c:	e00a      	b.n	8004244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	4908      	ldr	r1, [pc, #32]	; (8004254 <__NVIC_SetPriority+0x50>)
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	3b04      	subs	r3, #4
 800423c:	0112      	lsls	r2, r2, #4
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	440b      	add	r3, r1
 8004242:	761a      	strb	r2, [r3, #24]
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	e000e100 	.word	0xe000e100
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004258:	b480      	push	{r7}
 800425a:	b089      	sub	sp, #36	; 0x24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f1c3 0307 	rsb	r3, r3, #7
 8004272:	2b04      	cmp	r3, #4
 8004274:	bf28      	it	cs
 8004276:	2304      	movcs	r3, #4
 8004278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3304      	adds	r3, #4
 800427e:	2b06      	cmp	r3, #6
 8004280:	d902      	bls.n	8004288 <NVIC_EncodePriority+0x30>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3b03      	subs	r3, #3
 8004286:	e000      	b.n	800428a <NVIC_EncodePriority+0x32>
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43da      	mvns	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	401a      	ands	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a0:	f04f 31ff 	mov.w	r1, #4294967295
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	43d9      	mvns	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	4313      	orrs	r3, r2
         );
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3724      	adds	r7, #36	; 0x24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80042c4:	f3bf 8f4f 	dsb	sy
}
 80042c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <__NVIC_SystemReset+0x24>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80042d2:	4904      	ldr	r1, [pc, #16]	; (80042e4 <__NVIC_SystemReset+0x24>)
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <__NVIC_SystemReset+0x28>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80042da:	f3bf 8f4f 	dsb	sy
}
 80042de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <__NVIC_SystemReset+0x20>
 80042e4:	e000ed00 	.word	0xe000ed00
 80042e8:	05fa0004 	.word	0x05fa0004

080042ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042fc:	d301      	bcc.n	8004302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042fe:	2301      	movs	r3, #1
 8004300:	e00f      	b.n	8004322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <SysTick_Config+0x40>)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800430a:	210f      	movs	r1, #15
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	f7ff ff78 	bl	8004204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <SysTick_Config+0x40>)
 8004316:	2200      	movs	r2, #0
 8004318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800431a:	4b04      	ldr	r3, [pc, #16]	; (800432c <SysTick_Config+0x40>)
 800431c:	2207      	movs	r2, #7
 800431e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	e000e010 	.word	0xe000e010

08004330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff feb3 	bl	80040a4 <__NVIC_SetPriorityGrouping>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	4603      	mov	r3, r0
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004354:	f7ff feca 	bl	80040ec <__NVIC_GetPriorityGrouping>
 8004358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	f7ff ff7a 	bl	8004258 <NVIC_EncodePriority>
 8004364:	4602      	mov	r2, r0
 8004366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff49 	bl	8004204 <__NVIC_SetPriority>
}
 8004372:	bf00      	nop
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	4603      	mov	r3, r0
 8004382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff febd 	bl	8004108 <__NVIC_EnableIRQ>
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	4603      	mov	r3, r0
 800439e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fecd 	bl	8004144 <__NVIC_DisableIRQ>
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80043b6:	f7ff ff83 	bl	80042c0 <__NVIC_SystemReset>

080043ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff ff92 	bl	80042ec <SysTick_Config>
 80043c8:	4603      	mov	r3, r0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80043dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fed3 	bl	800418c <__NVIC_SetPendingIRQ>
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	4603      	mov	r3, r0
 80043f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80043f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fee3 	bl	80041c8 <__NVIC_ClearPendingIRQ>
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e04f      	b.n	80044bc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d008      	beq.n	800443a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2204      	movs	r2, #4
 800442c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e040      	b.n	80044bc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 020e 	bic.w	r2, r2, #14
 8004448:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004458:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	f003 021c 	and.w	r2, r3, #28
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2101      	movs	r1, #1
 8004478:	fa01 f202 	lsl.w	r2, r1, r2
 800447c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004486:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00c      	beq.n	80044aa <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800449e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d005      	beq.n	80044ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2204      	movs	r2, #4
 80044e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
 80044ea:	e047      	b.n	800457c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 020e 	bic.w	r2, r2, #14
 80044fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0201 	bic.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	f003 021c 	and.w	r2, r3, #28
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	2101      	movs	r1, #1
 800452a:	fa01 f202 	lsl.w	r2, r1, r2
 800452e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004538:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00c      	beq.n	800455c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004550:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800455a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
    }
  }
  return status;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	f003 031c 	and.w	r3, r3, #28
 80045a6:	2204      	movs	r2, #4
 80045a8:	409a      	lsls	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d026      	beq.n	8004600 <HAL_DMA_IRQHandler+0x7a>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d021      	beq.n	8004600 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0204 	bic.w	r2, r2, #4
 80045d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	f003 021c 	and.w	r2, r3, #28
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	2104      	movs	r1, #4
 80045e8:	fa01 f202 	lsl.w	r2, r1, r2
 80045ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d071      	beq.n	80046da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045fe:	e06c      	b.n	80046da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	f003 031c 	and.w	r3, r3, #28
 8004608:	2202      	movs	r2, #2
 800460a:	409a      	lsls	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02e      	beq.n	8004672 <HAL_DMA_IRQHandler+0xec>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d029      	beq.n	8004672 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 020a 	bic.w	r2, r2, #10
 800463a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004648:	f003 021c 	and.w	r2, r3, #28
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	2102      	movs	r1, #2
 8004652:	fa01 f202 	lsl.w	r2, r1, r2
 8004656:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d038      	beq.n	80046da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004670:	e033      	b.n	80046da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	f003 031c 	and.w	r3, r3, #28
 800467a:	2208      	movs	r2, #8
 800467c:	409a      	lsls	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4013      	ands	r3, r2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d02a      	beq.n	80046dc <HAL_DMA_IRQHandler+0x156>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d025      	beq.n	80046dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 020e 	bic.w	r2, r2, #14
 800469e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a4:	f003 021c 	and.w	r2, r3, #28
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f202 	lsl.w	r2, r1, r2
 80046b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046da:	bf00      	nop
 80046dc:	bf00      	nop
}
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295
 80046ee:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <HAL_FLASH_IRQHandler+0x114>)
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80046f8:	4013      	ands	r3, r2
 80046fa:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 80046fc:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <HAL_FLASH_IRQHandler+0x114>)
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	4b3e      	ldr	r3, [pc, #248]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	43db      	mvns	r3, r3
 8004706:	493c      	ldr	r1, [pc, #240]	; (80047f8 <HAL_FLASH_IRQHandler+0x114>)
 8004708:	4013      	ands	r3, r2
 800470a:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 800470c:	4b3b      	ldr	r3, [pc, #236]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <HAL_FLASH_IRQHandler+0x11c>)
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 8004718:	4b38      	ldr	r3, [pc, #224]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	607b      	str	r3, [r7, #4]
 800471e:	e008      	b.n	8004732 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 8004720:	4b36      	ldr	r3, [pc, #216]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 800472c:	4b33      	ldr	r3, [pc, #204]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d022      	beq.n	800477e <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004738:	4b30      	ldr	r3, [pc, #192]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	4313      	orrs	r3, r2
 8004740:	4a2e      	ldr	r2, [pc, #184]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 8004742:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_FLASH_IRQHandler+0x7a>
 800474e:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <HAL_FLASH_IRQHandler+0x114>)
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004758:	4927      	ldr	r1, [pc, #156]	; (80047f8 <HAL_FLASH_IRQHandler+0x114>)
 800475a:	4313      	orrs	r3, r2
 800475c:	618b      	str	r3, [r1, #24]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <HAL_FLASH_IRQHandler+0x8e>
 8004768:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <HAL_FLASH_IRQHandler+0x114>)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004770:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004772:	4b22      	ldr	r3, [pc, #136]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 8004774:	2200      	movs	r2, #0
 8004776:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f84d 	bl	8004818 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_FLASH_IRQHandler+0x114>)
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d124      	bne.n	80047d4 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <HAL_FLASH_IRQHandler+0x114>)
 800478c:	2201      	movs	r2, #1
 800478e:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8004790:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d117      	bne.n	80047c8 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004798:	4b18      	ldr	r3, [pc, #96]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	3b01      	subs	r3, #1
 800479e:	4a17      	ldr	r2, [pc, #92]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 80047a0:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 80047a2:	4b16      	ldr	r3, [pc, #88]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 80047aa:	4b14      	ldr	r3, [pc, #80]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	3301      	adds	r3, #1
 80047b0:	4a12      	ldr	r2, [pc, #72]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 80047b2:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f837 	bl	800482c <FLASH_PageErase>
 80047be:	e006      	b.n	80047ce <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80047c0:	4b0e      	ldr	r3, [pc, #56]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
 80047c6:	e002      	b.n	80047ce <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f818 	bl	8004804 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d108      	bne.n	80047ee <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80047dc:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_FLASH_IRQHandler+0x114>)
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	4a05      	ldr	r2, [pc, #20]	; (80047f8 <HAL_FLASH_IRQHandler+0x114>)
 80047e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80047e6:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80047e8:	4b04      	ldr	r3, [pc, #16]	; (80047fc <HAL_FLASH_IRQHandler+0x118>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
  }
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	58004000 	.word	0x58004000
 80047fc:	200005b0 	.word	0x200005b0
 8004800:	00040001 	.word	0x00040001

08004804 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <FLASH_PageErase+0x30>)
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4313      	orrs	r3, r2
 8004842:	4a06      	ldr	r2, [pc, #24]	; (800485c <FLASH_PageErase+0x30>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	f043 0302 	orr.w	r3, r3, #2
 800484c:	6153      	str	r3, [r2, #20]
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	58004000 	.word	0x58004000

08004860 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800486e:	e14c      	b.n	8004b0a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	fa01 f303 	lsl.w	r3, r1, r3
 800487c:	4013      	ands	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 813e 	beq.w	8004b04 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d005      	beq.n	80048a0 <HAL_GPIO_Init+0x40>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d130      	bne.n	8004902 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	2203      	movs	r2, #3
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048d6:	2201      	movs	r2, #1
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4013      	ands	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	f003 0201 	and.w	r2, r3, #1
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b03      	cmp	r3, #3
 800490c:	d017      	beq.n	800493e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	2203      	movs	r2, #3
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4013      	ands	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d123      	bne.n	8004992 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	08da      	lsrs	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3208      	adds	r2, #8
 8004952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004956:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	220f      	movs	r2, #15
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	43db      	mvns	r3, r3
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4013      	ands	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	08da      	lsrs	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3208      	adds	r2, #8
 800498c:	6939      	ldr	r1, [r7, #16]
 800498e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	2203      	movs	r2, #3
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 0203 	and.w	r2, r3, #3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 8098 	beq.w	8004b04 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80049d4:	4a54      	ldr	r2, [pc, #336]	; (8004b28 <HAL_GPIO_Init+0x2c8>)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	089b      	lsrs	r3, r3, #2
 80049da:	3302      	adds	r3, #2
 80049dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	220f      	movs	r2, #15
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4013      	ands	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049fe:	d019      	beq.n	8004a34 <HAL_GPIO_Init+0x1d4>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a4a      	ldr	r2, [pc, #296]	; (8004b2c <HAL_GPIO_Init+0x2cc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <HAL_GPIO_Init+0x1d0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a49      	ldr	r2, [pc, #292]	; (8004b30 <HAL_GPIO_Init+0x2d0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00d      	beq.n	8004a2c <HAL_GPIO_Init+0x1cc>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a48      	ldr	r2, [pc, #288]	; (8004b34 <HAL_GPIO_Init+0x2d4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <HAL_GPIO_Init+0x1c8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a47      	ldr	r2, [pc, #284]	; (8004b38 <HAL_GPIO_Init+0x2d8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <HAL_GPIO_Init+0x1c4>
 8004a20:	2304      	movs	r3, #4
 8004a22:	e008      	b.n	8004a36 <HAL_GPIO_Init+0x1d6>
 8004a24:	2307      	movs	r3, #7
 8004a26:	e006      	b.n	8004a36 <HAL_GPIO_Init+0x1d6>
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e004      	b.n	8004a36 <HAL_GPIO_Init+0x1d6>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e002      	b.n	8004a36 <HAL_GPIO_Init+0x1d6>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <HAL_GPIO_Init+0x1d6>
 8004a34:	2300      	movs	r3, #0
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	f002 0203 	and.w	r2, r2, #3
 8004a3c:	0092      	lsls	r2, r2, #2
 8004a3e:	4093      	lsls	r3, r2
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a46:	4938      	ldr	r1, [pc, #224]	; (8004b28 <HAL_GPIO_Init+0x2c8>)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	089b      	lsrs	r3, r3, #2
 8004a4c:	3302      	adds	r3, #2
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a54:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <HAL_GPIO_Init+0x2dc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4013      	ands	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a78:	4a30      	ldr	r2, [pc, #192]	; (8004b3c <HAL_GPIO_Init+0x2dc>)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a7e:	4b2f      	ldr	r3, [pc, #188]	; (8004b3c <HAL_GPIO_Init+0x2dc>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004aa2:	4a26      	ldr	r2, [pc, #152]	; (8004b3c <HAL_GPIO_Init+0x2dc>)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004aa8:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <HAL_GPIO_Init+0x2dc>)
 8004aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ace:	4a1b      	ldr	r2, [pc, #108]	; (8004b3c <HAL_GPIO_Init+0x2dc>)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004ad6:	4b19      	ldr	r3, [pc, #100]	; (8004b3c <HAL_GPIO_Init+0x2dc>)
 8004ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004afc:	4a0f      	ldr	r2, [pc, #60]	; (8004b3c <HAL_GPIO_Init+0x2dc>)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	3301      	adds	r3, #1
 8004b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f47f aeab 	bne.w	8004870 <HAL_GPIO_Init+0x10>
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40010000 	.word	0x40010000
 8004b2c:	48000400 	.word	0x48000400
 8004b30:	48000800 	.word	0x48000800
 8004b34:	48000c00 	.word	0x48000c00
 8004b38:	48001000 	.word	0x48001000
 8004b3c:	58000800 	.word	0x58000800

08004b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	807b      	strh	r3, [r7, #2]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b50:	787b      	ldrb	r3, [r7, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b5c:	e002      	b.n	8004b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b5e:	887a      	ldrh	r2, [r7, #2]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b82:	887a      	ldrh	r2, [r7, #2]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4013      	ands	r3, r2
 8004b88:	041a      	lsls	r2, r3, #16
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	43d9      	mvns	r1, r3
 8004b8e:	887b      	ldrh	r3, [r7, #2]
 8004b90:	400b      	ands	r3, r1
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	619a      	str	r2, [r3, #24]
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bae:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d006      	beq.n	8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bba:	4a05      	ldr	r2, [pc, #20]	; (8004bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bbc:	88fb      	ldrh	r3, [r7, #6]
 8004bbe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fd fc8a 	bl	80024dc <HAL_GPIO_EXTI_Callback>
  }
}
 8004bc8:	bf00      	nop
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	58000800 	.word	0x58000800

08004bd4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004bda:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <HAL_HSEM_IRQHandler+0x30>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <HAL_HSEM_IRQHandler+0x30>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	4906      	ldr	r1, [pc, #24]	; (8004c04 <HAL_HSEM_IRQHandler+0x30>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004bee:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <HAL_HSEM_IRQHandler+0x30>)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f807 	bl	8004c08 <HAL_HSEM_FreeCallback>
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	58001500 	.word	0x58001500

08004c08 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e081      	b.n	8004d32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f879 	bl	8004d3a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2224      	movs	r2, #36	; 0x24
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d107      	bne.n	8004c96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c92:	609a      	str	r2, [r3, #8]
 8004c94:	e006      	b.n	8004ca4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ca2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d104      	bne.n	8004cb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69d9      	ldr	r1, [r3, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1a      	ldr	r2, [r3, #32]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	817b      	strh	r3, [r7, #10]
 8004d60:	4613      	mov	r3, r2
 8004d62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	f040 80da 	bne.w	8004f26 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_I2C_Master_Transmit+0x30>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e0d3      	b.n	8004f28 <HAL_I2C_Master_Transmit+0x1d8>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d88:	f7ff f948 	bl	800401c <HAL_GetTick>
 8004d8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	2319      	movs	r3, #25
 8004d94:	2201      	movs	r2, #1
 8004d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f9e6 	bl	800516c <I2C_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e0be      	b.n	8004f28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2221      	movs	r2, #33	; 0x21
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2210      	movs	r2, #16
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	893a      	ldrh	r2, [r7, #8]
 8004dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2bff      	cmp	r3, #255	; 0xff
 8004dda:	d90e      	bls.n	8004dfa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	22ff      	movs	r2, #255	; 0xff
 8004de0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	8979      	ldrh	r1, [r7, #10]
 8004dea:	4b51      	ldr	r3, [pc, #324]	; (8004f30 <HAL_I2C_Master_Transmit+0x1e0>)
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fbdc 	bl	80055b0 <I2C_TransferConfig>
 8004df8:	e06c      	b.n	8004ed4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	8979      	ldrh	r1, [r7, #10]
 8004e0c:	4b48      	ldr	r3, [pc, #288]	; (8004f30 <HAL_I2C_Master_Transmit+0x1e0>)
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fbcb 	bl	80055b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004e1a:	e05b      	b.n	8004ed4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	6a39      	ldr	r1, [r7, #32]
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 f9e3 	bl	80051ec <I2C_WaitOnTXISFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e07b      	b.n	8004f28 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d034      	beq.n	8004ed4 <HAL_I2C_Master_Transmit+0x184>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d130      	bne.n	8004ed4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2180      	movs	r1, #128	; 0x80
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f975 	bl	800516c <I2C_WaitOnFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e04d      	b.n	8004f28 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2bff      	cmp	r3, #255	; 0xff
 8004e94:	d90e      	bls.n	8004eb4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	22ff      	movs	r2, #255	; 0xff
 8004e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	8979      	ldrh	r1, [r7, #10]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fb7f 	bl	80055b0 <I2C_TransferConfig>
 8004eb2:	e00f      	b.n	8004ed4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	8979      	ldrh	r1, [r7, #10]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fb6e 	bl	80055b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d19e      	bne.n	8004e1c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	6a39      	ldr	r1, [r7, #32]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f9c2 	bl	800526c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e01a      	b.n	8004f28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6859      	ldr	r1, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_I2C_Master_Transmit+0x1e4>)
 8004f06:	400b      	ands	r3, r1
 8004f08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e000      	b.n	8004f28 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004f26:	2302      	movs	r3, #2
  }
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	80002000 	.word	0x80002000
 8004f34:	fe00e800 	.word	0xfe00e800

08004f38 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	461a      	mov	r2, r3
 8004f44:	460b      	mov	r3, r1
 8004f46:	817b      	strh	r3, [r7, #10]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	f040 80db 	bne.w	8005110 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_I2C_Master_Receive+0x30>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e0d4      	b.n	8005112 <HAL_I2C_Master_Receive+0x1da>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f70:	f7ff f854 	bl	800401c <HAL_GetTick>
 8004f74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	2319      	movs	r3, #25
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f8f2 	bl	800516c <I2C_WaitOnFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e0bf      	b.n	8005112 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2222      	movs	r2, #34	; 0x22
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	893a      	ldrh	r2, [r7, #8]
 8004fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2bff      	cmp	r3, #255	; 0xff
 8004fc2:	d90e      	bls.n	8004fe2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	22ff      	movs	r2, #255	; 0xff
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	8979      	ldrh	r1, [r7, #10]
 8004fd2:	4b52      	ldr	r3, [pc, #328]	; (800511c <HAL_I2C_Master_Receive+0x1e4>)
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fae8 	bl	80055b0 <I2C_TransferConfig>
 8004fe0:	e06d      	b.n	80050be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	8979      	ldrh	r1, [r7, #10]
 8004ff4:	4b49      	ldr	r3, [pc, #292]	; (800511c <HAL_I2C_Master_Receive+0x1e4>)
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fad7 	bl	80055b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005002:	e05c      	b.n	80050be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	6a39      	ldr	r1, [r7, #32]
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f96b 	bl	80052e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e07c      	b.n	8005112 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d034      	beq.n	80050be <HAL_I2C_Master_Receive+0x186>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005058:	2b00      	cmp	r3, #0
 800505a:	d130      	bne.n	80050be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	2200      	movs	r2, #0
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f880 	bl	800516c <I2C_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e04d      	b.n	8005112 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	2bff      	cmp	r3, #255	; 0xff
 800507e:	d90e      	bls.n	800509e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	22ff      	movs	r2, #255	; 0xff
 8005084:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508a:	b2da      	uxtb	r2, r3
 800508c:	8979      	ldrh	r1, [r7, #10]
 800508e:	2300      	movs	r3, #0
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fa8a 	bl	80055b0 <I2C_TransferConfig>
 800509c:	e00f      	b.n	80050be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	8979      	ldrh	r1, [r7, #10]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fa79 	bl	80055b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d19d      	bne.n	8005004 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	6a39      	ldr	r1, [r7, #32]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f8cd 	bl	800526c <I2C_WaitOnSTOPFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e01a      	b.n	8005112 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2220      	movs	r2, #32
 80050e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6859      	ldr	r1, [r3, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <HAL_I2C_Master_Receive+0x1e8>)
 80050f0:	400b      	ands	r3, r1
 80050f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	e000      	b.n	8005112 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005110:	2302      	movs	r3, #2
  }
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	80002400 	.word	0x80002400
 8005120:	fe00e800 	.word	0xfe00e800

08005124 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b02      	cmp	r3, #2
 8005138:	d103      	bne.n	8005142 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2200      	movs	r2, #0
 8005140:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b01      	cmp	r3, #1
 800514e:	d007      	beq.n	8005160 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	619a      	str	r2, [r3, #24]
  }
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800517c:	e022      	b.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d01e      	beq.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005186:	f7fe ff49 	bl	800401c <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d302      	bcc.n	800519c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d113      	bne.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	f043 0220 	orr.w	r2, r3, #32
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e00f      	b.n	80051e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4013      	ands	r3, r2
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d0cd      	beq.n	800517e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051f8:	e02c      	b.n	8005254 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f8ea 	bl	80053d8 <I2C_IsErrorOccurred>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e02a      	b.n	8005264 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d01e      	beq.n	8005254 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005216:	f7fe ff01 	bl	800401c <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	d302      	bcc.n	800522c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d113      	bne.n	8005254 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005230:	f043 0220 	orr.w	r2, r3, #32
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e007      	b.n	8005264 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b02      	cmp	r3, #2
 8005260:	d1cb      	bne.n	80051fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005278:	e028      	b.n	80052cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f8aa 	bl	80053d8 <I2C_IsErrorOccurred>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e026      	b.n	80052dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fe fec5 	bl	800401c <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	429a      	cmp	r2, r3
 800529c:	d302      	bcc.n	80052a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d113      	bne.n	80052cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	f043 0220 	orr.w	r2, r3, #32
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e007      	b.n	80052dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d1cf      	bne.n	800527a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052f0:	e064      	b.n	80053bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f86e 	bl	80053d8 <I2C_IsErrorOccurred>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e062      	b.n	80053cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b20      	cmp	r3, #32
 8005312:	d138      	bne.n	8005386 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b04      	cmp	r3, #4
 8005320:	d105      	bne.n	800532e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	e04e      	b.n	80053cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b10      	cmp	r3, #16
 800533a:	d107      	bne.n	800534c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2210      	movs	r2, #16
 8005342:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2204      	movs	r2, #4
 8005348:	645a      	str	r2, [r3, #68]	; 0x44
 800534a:	e002      	b.n	8005352 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2220      	movs	r2, #32
 8005358:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6859      	ldr	r1, [r3, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005366:	400b      	ands	r3, r1
 8005368:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e022      	b.n	80053cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005386:	f7fe fe49 	bl	800401c <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	d302      	bcc.n	800539c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10f      	bne.n	80053bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a0:	f043 0220 	orr.w	r2, r3, #32
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e007      	b.n	80053cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d193      	bne.n	80052f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	fe00e800 	.word	0xfe00e800

080053d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	d075      	beq.n	80054f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2210      	movs	r2, #16
 800540a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800540c:	e056      	b.n	80054bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d052      	beq.n	80054bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005416:	f7fe fe01 	bl	800401c <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	429a      	cmp	r2, r3
 8005424:	d302      	bcc.n	800542c <I2C_IsErrorOccurred+0x54>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d147      	bne.n	80054bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005436:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800543e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800544a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544e:	d12e      	bne.n	80054ae <I2C_IsErrorOccurred+0xd6>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005456:	d02a      	beq.n	80054ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005458:	7cfb      	ldrb	r3, [r7, #19]
 800545a:	2b20      	cmp	r3, #32
 800545c:	d027      	beq.n	80054ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800546c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800546e:	f7fe fdd5 	bl	800401c <HAL_GetTick>
 8005472:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005474:	e01b      	b.n	80054ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005476:	f7fe fdd1 	bl	800401c <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b19      	cmp	r3, #25
 8005482:	d914      	bls.n	80054ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005488:	f043 0220 	orr.w	r2, r3, #32
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d1dc      	bne.n	8005476 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d003      	beq.n	80054d2 <I2C_IsErrorOccurred+0xfa>
 80054ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d09d      	beq.n	800540e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2220      	movs	r2, #32
 80054e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	f043 0304 	orr.w	r3, r3, #4
 80054e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005512:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	f043 0308 	orr.w	r3, r3, #8
 800552a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005534:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	f043 0302 	orr.w	r3, r3, #2
 800554c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005556:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800555e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01c      	beq.n	80055a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f7ff fddc 	bl	8005124 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6859      	ldr	r1, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b0d      	ldr	r3, [pc, #52]	; (80055ac <I2C_IsErrorOccurred+0x1d4>)
 8005578:	400b      	ands	r3, r1
 800557a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	431a      	orrs	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80055a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3728      	adds	r7, #40	; 0x28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	fe00e800 	.word	0xfe00e800

080055b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	607b      	str	r3, [r7, #4]
 80055ba:	460b      	mov	r3, r1
 80055bc:	817b      	strh	r3, [r7, #10]
 80055be:	4613      	mov	r3, r2
 80055c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055c2:	897b      	ldrh	r3, [r7, #10]
 80055c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055c8:	7a7b      	ldrb	r3, [r7, #9]
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	4313      	orrs	r3, r2
 80055da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	0d5b      	lsrs	r3, r3, #21
 80055ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055ee:	4b08      	ldr	r3, [pc, #32]	; (8005610 <I2C_TransferConfig+0x60>)
 80055f0:	430b      	orrs	r3, r1
 80055f2:	43db      	mvns	r3, r3
 80055f4:	ea02 0103 	and.w	r1, r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	03ff63ff 	.word	0x03ff63ff

08005614 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b20      	cmp	r3, #32
 8005628:	d138      	bne.n	800569c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005634:	2302      	movs	r3, #2
 8005636:	e032      	b.n	800569e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2224      	movs	r2, #36	; 0x24
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005666:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6819      	ldr	r1, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	e000      	b.n	800569e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800569c:	2302      	movs	r3, #2
  }
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d139      	bne.n	8005734 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e033      	b.n	8005736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2224      	movs	r2, #36	; 0x24
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	e000      	b.n	8005736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005734:	2302      	movs	r3, #2
  }
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4904      	ldr	r1, [pc, #16]	; (8005764 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	40010000 	.word	0x40010000

08005768 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01e      	beq.n	80057b8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800577a:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <HAL_IPCC_Init+0x60>)
 800577c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fe fa60 	bl	8003c50 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005790:	68b8      	ldr	r0, [r7, #8]
 8005792:	f000 f85b 	bl	800584c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f82c 	bl	8005800 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80057b6:	e001      	b.n	80057bc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	58000c00 	.word	0x58000c00

080057cc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	4613      	mov	r3, r2
 80057f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e00f      	b.n	800582e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	4a0b      	ldr	r2, [pc, #44]	; (8005844 <IPCC_SetDefaultCallbacks+0x44>)
 8005818:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3306      	adds	r3, #6
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	4a08      	ldr	r2, [pc, #32]	; (8005848 <IPCC_SetDefaultCallbacks+0x48>)
 8005826:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3301      	adds	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b05      	cmp	r3, #5
 8005832:	d9ec      	bls.n	800580e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	080057cd 	.word	0x080057cd
 8005848:	080057e7 	.word	0x080057e7

0800584c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005860:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	223f      	movs	r2, #63	; 0x3f
 8005866:	609a      	str	r2, [r3, #8]
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a04      	ldr	r2, [pc, #16]	; (8005890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800587e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005882:	6013      	str	r3, [r2, #0]
}
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	58000400 	.word	0x58000400

08005894 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8005898:	bf00      	nop
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <LL_EXTI_ReadFlag_0_31+0x1c>)
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4013      	ands	r3, r2
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	58000800 	.word	0x58000800

080058c4 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <LL_EXTI_ReadFlag_32_63+0x1c>)
 80058ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4013      	ands	r3, r2
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	58000800 	.word	0x58000800

080058e4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80058ec:	4a04      	ldr	r2, [pc, #16]	; (8005900 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60d3      	str	r3, [r2, #12]
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	58000800 	.word	0x58000800

08005904 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800590c:	4a04      	ldr	r2, [pc, #16]	; (8005920 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	58000800 	.word	0x58000800

08005924 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <HAL_PWREx_GetVoltageRange+0x18>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	58000400 	.word	0x58000400

08005940 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8005944:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005948:	f7ff ffac 	bl	80058a4 <LL_EXTI_ReadFlag_0_31>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005952:	f7ff ff9f 	bl	8005894 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005956:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800595a:	f7ff ffc3 	bl	80058e4 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if (__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 800595e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005962:	f7ff ff9f 	bl	80058a4 <LL_EXTI_ReadFlag_0_31>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800596c:	f000 f811 	bl	8005992 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8005970:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005974:	f7ff ffb6 	bl	80058e4 <LL_EXTI_ClearFlag_0_31>
  }
#endif /* PWR_CR2_PVME1 */

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 8005978:	2002      	movs	r0, #2
 800597a:	f7ff ffa3 	bl	80058c4 <LL_EXTI_ReadFlag_32_63>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8005984:	f000 f80c 	bl	80059a0 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8005988:	2002      	movs	r0, #2
 800598a:	f7ff ffbb 	bl	8005904 <LL_EXTI_ClearFlag_32_63>
  }
}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8005992:	b480      	push	{r7}
 8005994:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8005996:	bf00      	nop
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <LL_RCC_HSE_IsEnabledDiv2>:
{
 80059ae:	b480      	push	{r7}
 80059b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059c0:	d101      	bne.n	80059c6 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <LL_RCC_HSE_Enable>:
{
 80059d2:	b480      	push	{r7}
 80059d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80059d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e4:	6013      	str	r3, [r2, #0]
}
 80059e6:	bf00      	nop
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <LL_RCC_HSE_Disable>:
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a02:	6013      	str	r3, [r2, #0]
}
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <LL_RCC_HSE_IsReady>:
{
 8005a0e:	b480      	push	{r7}
 8005a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a20:	d101      	bne.n	8005a26 <LL_RCC_HSE_IsReady+0x18>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <LL_RCC_HSE_IsReady+0x1a>
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <LL_RCC_HSI_Enable>:
{
 8005a32:	b480      	push	{r7}
 8005a34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a44:	6013      	str	r3, [r2, #0]
}
 8005a46:	bf00      	nop
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <LL_RCC_HSI_Disable>:
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a62:	6013      	str	r3, [r2, #0]
}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <LL_RCC_HSI_IsReady>:
{
 8005a6e:	b480      	push	{r7}
 8005a70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a80:	d101      	bne.n	8005a86 <LL_RCC_HSI_IsReady+0x18>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <LL_RCC_HSI_IsReady+0x1a>
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aac:	4313      	orrs	r3, r2
 8005aae:	604b      	str	r3, [r1, #4]
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <LL_RCC_HSI48_Enable>:
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <LL_RCC_HSI48_Disable>:
{
 8005ade:	b480      	push	{r7}
 8005ae0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005af6:	bf00      	nop
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <LL_RCC_HSI48_IsReady>:
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d101      	bne.n	8005b18 <LL_RCC_HSI48_IsReady+0x18>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <LL_RCC_HSI48_IsReady+0x1a>
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <LL_RCC_LSE_Enable>:
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b3c:	bf00      	nop
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <LL_RCC_LSE_Disable>:
{
 8005b46:	b480      	push	{r7}
 8005b48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b5e:	bf00      	nop
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <LL_RCC_LSE_EnableBypass>:
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b78:	f043 0304 	orr.w	r3, r3, #4
 8005b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b80:	bf00      	nop
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <LL_RCC_LSE_DisableBypass>:
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9a:	f023 0304 	bic.w	r3, r3, #4
 8005b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ba2:	bf00      	nop
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <LL_RCC_LSE_IsReady>:
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d101      	bne.n	8005bc4 <LL_RCC_LSE_IsReady+0x18>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <LL_RCC_LSE_IsReady+0x1a>
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <LL_RCC_LSI1_Enable>:
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be0:	f043 0301 	orr.w	r3, r3, #1
 8005be4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005be8:	bf00      	nop
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <LL_RCC_LSI1_Disable>:
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c0a:	bf00      	nop
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <LL_RCC_LSI1_IsReady>:
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d101      	bne.n	8005c2c <LL_RCC_LSI1_IsReady+0x18>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e000      	b.n	8005c2e <LL_RCC_LSI1_IsReady+0x1a>
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <LL_RCC_LSI2_Enable>:
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c48:	f043 0304 	orr.w	r3, r3, #4
 8005c4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <LL_RCC_LSI2_Disable>:
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c6a:	f023 0304 	bic.w	r3, r3, #4
 8005c6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c72:	bf00      	nop
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <LL_RCC_LSI2_IsReady>:
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d101      	bne.n	8005c94 <LL_RCC_LSI2_IsReady+0x18>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <LL_RCC_LSI2_IsReady+0x1a>
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <LL_RCC_LSI2_SetTrimming>:
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb0:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <LL_RCC_MSI_Enable>:
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6013      	str	r3, [r2, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <LL_RCC_MSI_Disable>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	6013      	str	r3, [r2, #0]
}
 8005d00:	bf00      	nop
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <LL_RCC_MSI_IsReady>:
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d101      	bne.n	8005d20 <LL_RCC_MSI_IsReady+0x16>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <LL_RCC_MSI_IsReady+0x18>
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <LL_RCC_MSI_SetRange>:
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	600b      	str	r3, [r1, #0]
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <LL_RCC_MSI_GetRange>:
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d64:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2bb0      	cmp	r3, #176	; 0xb0
 8005d6a:	d901      	bls.n	8005d70 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005d6c:	23b0      	movs	r3, #176	; 0xb0
 8005d6e:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005d70:	687b      	ldr	r3, [r7, #4]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <LL_RCC_MSI_SetCalibTrimming>:
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	604b      	str	r3, [r1, #4]
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <LL_RCC_SetSysClkSource>:
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f023 0203 	bic.w	r2, r3, #3
 8005dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	608b      	str	r3, [r1, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <LL_RCC_GetSysClkSource>:
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 030c 	and.w	r3, r3, #12
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <LL_RCC_SetAHBPrescaler>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	608b      	str	r3, [r1, #8]
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <LL_RCC_SetAHB4Prescaler>:
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e48:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e4c:	f023 020f 	bic.w	r2, r3, #15
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	091b      	lsrs	r3, r3, #4
 8005e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <LL_RCC_SetAPB1Prescaler>:
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	608b      	str	r3, [r1, #8]
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <LL_RCC_SetAPB2Prescaler>:
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <LL_RCC_GetAHBPrescaler>:
{
 8005eba:	b480      	push	{r7}
 8005ebc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <LL_RCC_GetAHB4Prescaler>:
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f00:	6013      	str	r3, [r2, #0]
}
 8005f02:	bf00      	nop
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f1e:	6013      	str	r3, [r2, #0]
}
 8005f20:	bf00      	nop
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f3c:	d101      	bne.n	8005f42 <LL_RCC_PLL_IsReady+0x18>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <LL_RCC_PLL_IsReady+0x1a>
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc2:	d101      	bne.n	8005fc8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fe8:	d101      	bne.n	8005fee <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800600a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600e:	d101      	bne.n	8006014 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006032:	d101      	bne.n	8006038 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006056:	d101      	bne.n	800605c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006058:	2301      	movs	r3, #1
 800605a:	e000      	b.n	800605e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006068:	b590      	push	{r4, r7, lr}
 800606a:	b08d      	sub	sp, #52	; 0x34
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e363      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 808d 	beq.w	80061a2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006088:	f7ff fea2 	bl	8005dd0 <LL_RCC_GetSysClkSource>
 800608c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800608e:	f7ff ff83 	bl	8005f98 <LL_RCC_PLL_GetMainSource>
 8006092:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d005      	beq.n	80060a6 <HAL_RCC_OscConfig+0x3e>
 800609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609c:	2b0c      	cmp	r3, #12
 800609e:	d147      	bne.n	8006130 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d144      	bne.n	8006130 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e347      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80060b6:	f7ff fe4d 	bl	8005d54 <LL_RCC_MSI_GetRange>
 80060ba:	4603      	mov	r3, r0
 80060bc:	429c      	cmp	r4, r3
 80060be:	d914      	bls.n	80060ea <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fd03 	bl	8006ad0 <RCC_SetFlashLatencyFromMSIRange>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e336      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fe27 	bl	8005d2c <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fe4b 	bl	8005d7e <LL_RCC_MSI_SetCalibTrimming>
 80060e8:	e013      	b.n	8006112 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fe1c 	bl	8005d2c <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fe40 	bl	8005d7e <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fce4 	bl	8006ad0 <RCC_SetFlashLatencyFromMSIRange>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e317      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006112:	f000 fcc9 	bl	8006aa8 <HAL_RCC_GetHCLKFreq>
 8006116:	4603      	mov	r3, r0
 8006118:	4aa4      	ldr	r2, [pc, #656]	; (80063ac <HAL_RCC_OscConfig+0x344>)
 800611a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800611c:	4ba4      	ldr	r3, [pc, #656]	; (80063b0 <HAL_RCC_OscConfig+0x348>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f7fd ff2d 	bl	8003f80 <HAL_InitTick>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d039      	beq.n	80061a0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e308      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01e      	beq.n	8006176 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006138:	f7ff fdc9 	bl	8005cce <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800613c:	f7fd ff6e 	bl	800401c <HAL_GetTick>
 8006140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006144:	f7fd ff6a 	bl	800401c <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e2f5      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006156:	f7ff fdd8 	bl	8005d0a <LL_RCC_MSI_IsReady>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f1      	beq.n	8006144 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff fde1 	bl	8005d2c <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fe05 	bl	8005d7e <LL_RCC_MSI_SetCalibTrimming>
 8006174:	e015      	b.n	80061a2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006176:	f7ff fdb9 	bl	8005cec <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800617a:	f7fd ff4f 	bl	800401c <HAL_GetTick>
 800617e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006182:	f7fd ff4b 	bl	800401c <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e2d6      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006194:	f7ff fdb9 	bl	8005d0a <LL_RCC_MSI_IsReady>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f1      	bne.n	8006182 <HAL_RCC_OscConfig+0x11a>
 800619e:	e000      	b.n	80061a2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80061a0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d047      	beq.n	800623e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061ae:	f7ff fe0f 	bl	8005dd0 <LL_RCC_GetSysClkSource>
 80061b2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061b4:	f7ff fef0 	bl	8005f98 <LL_RCC_PLL_GetMainSource>
 80061b8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d005      	beq.n	80061cc <HAL_RCC_OscConfig+0x164>
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	2b0c      	cmp	r3, #12
 80061c4:	d108      	bne.n	80061d8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d105      	bne.n	80061d8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d134      	bne.n	800623e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e2b4      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e0:	d102      	bne.n	80061e8 <HAL_RCC_OscConfig+0x180>
 80061e2:	f7ff fbf6 	bl	80059d2 <LL_RCC_HSE_Enable>
 80061e6:	e001      	b.n	80061ec <HAL_RCC_OscConfig+0x184>
 80061e8:	f7ff fc02 	bl	80059f0 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d012      	beq.n	800621a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f4:	f7fd ff12 	bl	800401c <HAL_GetTick>
 80061f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061fc:	f7fd ff0e 	bl	800401c <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b64      	cmp	r3, #100	; 0x64
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e299      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800620e:	f7ff fbfe 	bl	8005a0e <LL_RCC_HSE_IsReady>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f1      	beq.n	80061fc <HAL_RCC_OscConfig+0x194>
 8006218:	e011      	b.n	800623e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621a:	f7fd feff 	bl	800401c <HAL_GetTick>
 800621e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006222:	f7fd fefb 	bl	800401c <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b64      	cmp	r3, #100	; 0x64
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e286      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006234:	f7ff fbeb 	bl	8005a0e <LL_RCC_HSE_IsReady>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f1      	bne.n	8006222 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d04c      	beq.n	80062e4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800624a:	f7ff fdc1 	bl	8005dd0 <LL_RCC_GetSysClkSource>
 800624e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006250:	f7ff fea2 	bl	8005f98 <LL_RCC_PLL_GetMainSource>
 8006254:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2b04      	cmp	r3, #4
 800625a:	d005      	beq.n	8006268 <HAL_RCC_OscConfig+0x200>
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2b0c      	cmp	r3, #12
 8006260:	d10e      	bne.n	8006280 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d10b      	bne.n	8006280 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e266      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fc0a 	bl	8005a92 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800627e:	e031      	b.n	80062e4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d019      	beq.n	80062bc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006288:	f7ff fbd3 	bl	8005a32 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628c:	f7fd fec6 	bl	800401c <HAL_GetTick>
 8006290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006294:	f7fd fec2 	bl	800401c <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e24d      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80062a6:	f7ff fbe2 	bl	8005a6e <LL_RCC_HSI_IsReady>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0f1      	beq.n	8006294 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fbec 	bl	8005a92 <LL_RCC_HSI_SetCalibTrimming>
 80062ba:	e013      	b.n	80062e4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062bc:	f7ff fbc8 	bl	8005a50 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c0:	f7fd feac 	bl	800401c <HAL_GetTick>
 80062c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062c8:	f7fd fea8 	bl	800401c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e233      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80062da:	f7ff fbc8 	bl	8005a6e <LL_RCC_HSI_IsReady>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1f1      	bne.n	80062c8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 80a3 	beq.w	8006444 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d076      	beq.n	80063f4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0310 	and.w	r3, r3, #16
 800630e:	2b00      	cmp	r3, #0
 8006310:	d046      	beq.n	80063a0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006312:	f7ff fc7f 	bl	8005c14 <LL_RCC_LSI1_IsReady>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d113      	bne.n	8006344 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800631c:	f7ff fc58 	bl	8005bd0 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006320:	f7fd fe7c 	bl	800401c <HAL_GetTick>
 8006324:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006328:	f7fd fe78 	bl	800401c <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e203      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800633a:	f7ff fc6b 	bl	8005c14 <LL_RCC_LSI1_IsReady>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0f1      	beq.n	8006328 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006344:	f7ff fc78 	bl	8005c38 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006348:	f7fd fe68 	bl	800401c <HAL_GetTick>
 800634c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006350:	f7fd fe64 	bl	800401c <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b03      	cmp	r3, #3
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e1ef      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006362:	f7ff fc8b 	bl	8005c7c <LL_RCC_LSI2_IsReady>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f1      	beq.n	8006350 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff fc95 	bl	8005ca0 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006376:	f7ff fc3c 	bl	8005bf2 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637a:	f7fd fe4f 	bl	800401c <HAL_GetTick>
 800637e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006382:	f7fd fe4b 	bl	800401c <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e1d6      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006394:	f7ff fc3e 	bl	8005c14 <LL_RCC_LSI1_IsReady>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f1      	bne.n	8006382 <HAL_RCC_OscConfig+0x31a>
 800639e:	e051      	b.n	8006444 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80063a0:	f7ff fc16 	bl	8005bd0 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a4:	f7fd fe3a 	bl	800401c <HAL_GetTick>
 80063a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80063aa:	e00c      	b.n	80063c6 <HAL_RCC_OscConfig+0x35e>
 80063ac:	2000002c 	.word	0x2000002c
 80063b0:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80063b4:	f7fd fe32 	bl	800401c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e1bd      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80063c6:	f7ff fc25 	bl	8005c14 <LL_RCC_LSI1_IsReady>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f1      	beq.n	80063b4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80063d0:	f7ff fc43 	bl	8005c5a <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80063d4:	e008      	b.n	80063e8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80063d6:	f7fd fe21 	bl	800401c <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e1ac      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80063e8:	f7ff fc48 	bl	8005c7c <LL_RCC_LSI2_IsReady>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f1      	bne.n	80063d6 <HAL_RCC_OscConfig+0x36e>
 80063f2:	e027      	b.n	8006444 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80063f4:	f7ff fc31 	bl	8005c5a <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7fd fe10 	bl	800401c <HAL_GetTick>
 80063fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006400:	f7fd fe0c 	bl	800401c <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b03      	cmp	r3, #3
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e197      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006412:	f7ff fc33 	bl	8005c7c <LL_RCC_LSI2_IsReady>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f1      	bne.n	8006400 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800641c:	f7ff fbe9 	bl	8005bf2 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006420:	f7fd fdfc 	bl	800401c <HAL_GetTick>
 8006424:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006428:	f7fd fdf8 	bl	800401c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e183      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800643a:	f7ff fbeb 	bl	8005c14 <LL_RCC_LSI1_IsReady>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1f1      	bne.n	8006428 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d05b      	beq.n	8006508 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006450:	4ba7      	ldr	r3, [pc, #668]	; (80066f0 <HAL_RCC_OscConfig+0x688>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d114      	bne.n	8006486 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800645c:	f7ff fa0a 	bl	8005874 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006460:	f7fd fddc 	bl	800401c <HAL_GetTick>
 8006464:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006468:	f7fd fdd8 	bl	800401c <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e163      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800647a:	4b9d      	ldr	r3, [pc, #628]	; (80066f0 <HAL_RCC_OscConfig+0x688>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f0      	beq.n	8006468 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d102      	bne.n	8006494 <HAL_RCC_OscConfig+0x42c>
 800648e:	f7ff fb49 	bl	8005b24 <LL_RCC_LSE_Enable>
 8006492:	e00c      	b.n	80064ae <HAL_RCC_OscConfig+0x446>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b05      	cmp	r3, #5
 800649a:	d104      	bne.n	80064a6 <HAL_RCC_OscConfig+0x43e>
 800649c:	f7ff fb64 	bl	8005b68 <LL_RCC_LSE_EnableBypass>
 80064a0:	f7ff fb40 	bl	8005b24 <LL_RCC_LSE_Enable>
 80064a4:	e003      	b.n	80064ae <HAL_RCC_OscConfig+0x446>
 80064a6:	f7ff fb4e 	bl	8005b46 <LL_RCC_LSE_Disable>
 80064aa:	f7ff fb6e 	bl	8005b8a <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d014      	beq.n	80064e0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b6:	f7fd fdb1 	bl	800401c <HAL_GetTick>
 80064ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80064bc:	e00a      	b.n	80064d4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064be:	f7fd fdad 	bl	800401c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e136      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80064d4:	f7ff fb6a 	bl	8005bac <LL_RCC_LSE_IsReady>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0ef      	beq.n	80064be <HAL_RCC_OscConfig+0x456>
 80064de:	e013      	b.n	8006508 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e0:	f7fd fd9c 	bl	800401c <HAL_GetTick>
 80064e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80064e6:	e00a      	b.n	80064fe <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e8:	f7fd fd98 	bl	800401c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e121      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80064fe:	f7ff fb55 	bl	8005bac <LL_RCC_LSE_IsReady>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1ef      	bne.n	80064e8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d02c      	beq.n	800656e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006518:	2b00      	cmp	r3, #0
 800651a:	d014      	beq.n	8006546 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800651c:	f7ff face 	bl	8005abc <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006520:	f7fd fd7c 	bl	800401c <HAL_GetTick>
 8006524:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006528:	f7fd fd78 	bl	800401c <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e103      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800653a:	f7ff fae1 	bl	8005b00 <LL_RCC_HSI48_IsReady>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0f1      	beq.n	8006528 <HAL_RCC_OscConfig+0x4c0>
 8006544:	e013      	b.n	800656e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006546:	f7ff faca 	bl	8005ade <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654a:	f7fd fd67 	bl	800401c <HAL_GetTick>
 800654e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006552:	f7fd fd63 	bl	800401c <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e0ee      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006564:	f7ff facc 	bl	8005b00 <LL_RCC_HSI48_IsReady>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f1      	bne.n	8006552 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80e4 	beq.w	8006740 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006578:	f7ff fc2a 	bl	8005dd0 <LL_RCC_GetSysClkSource>
 800657c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800657e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	2b02      	cmp	r3, #2
 800658c:	f040 80b4 	bne.w	80066f8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f003 0203 	and.w	r2, r3, #3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	429a      	cmp	r2, r3
 800659c:	d123      	bne.n	80065e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d11c      	bne.n	80065e6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	0a1b      	lsrs	r3, r3, #8
 80065b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d114      	bne.n	80065e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d10d      	bne.n	80065e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d106      	bne.n	80065e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d05d      	beq.n	80066a2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b0c      	cmp	r3, #12
 80065ea:	d058      	beq.n	800669e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80065ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0a1      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80065fe:	f7ff fc85 	bl	8005f0c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006602:	f7fd fd0b 	bl	800401c <HAL_GetTick>
 8006606:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006608:	e008      	b.n	800661c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800660a:	f7fd fd07 	bl	800401c <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e092      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800661c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1ef      	bne.n	800660a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800662a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <HAL_RCC_OscConfig+0x68c>)
 8006632:	4013      	ands	r3, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800663c:	4311      	orrs	r1, r2
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006642:	0212      	lsls	r2, r2, #8
 8006644:	4311      	orrs	r1, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800664a:	4311      	orrs	r1, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006650:	4311      	orrs	r1, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006656:	430a      	orrs	r2, r1
 8006658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800665c:	4313      	orrs	r3, r2
 800665e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006660:	f7ff fc45 	bl	8005eee <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800666e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006672:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006674:	f7fd fcd2 	bl	800401c <HAL_GetTick>
 8006678:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800667c:	f7fd fcce 	bl	800401c <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e059      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800668e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0ef      	beq.n	800667c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800669c:	e050      	b.n	8006740 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e04f      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d147      	bne.n	8006740 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80066b0:	f7ff fc1d 	bl	8005eee <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066c4:	f7fd fcaa 	bl	800401c <HAL_GetTick>
 80066c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066cc:	f7fd fca6 	bl	800401c <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e031      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0ef      	beq.n	80066cc <HAL_RCC_OscConfig+0x664>
 80066ec:	e028      	b.n	8006740 <HAL_RCC_OscConfig+0x6d8>
 80066ee:	bf00      	nop
 80066f0:	58000400 	.word	0x58000400
 80066f4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b0c      	cmp	r3, #12
 80066fc:	d01e      	beq.n	800673c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066fe:	f7ff fc05 	bl	8005f0c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006702:	f7fd fc8b 	bl	800401c <HAL_GetTick>
 8006706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800670a:	f7fd fc87 	bl	800401c <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e012      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800671c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1ef      	bne.n	800670a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800672a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <HAL_RCC_OscConfig+0x6e4>)
 8006736:	4013      	ands	r3, r2
 8006738:	60cb      	str	r3, [r1, #12]
 800673a:	e001      	b.n	8006740 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3734      	adds	r7, #52	; 0x34
 8006746:	46bd      	mov	sp, r7
 8006748:	bd90      	pop	{r4, r7, pc}
 800674a:	bf00      	nop
 800674c:	eefefffc 	.word	0xeefefffc

08006750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e12d      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006764:	4b98      	ldr	r3, [pc, #608]	; (80069c8 <HAL_RCC_ClockConfig+0x278>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d91b      	bls.n	80067aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006772:	4b95      	ldr	r3, [pc, #596]	; (80069c8 <HAL_RCC_ClockConfig+0x278>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f023 0207 	bic.w	r2, r3, #7
 800677a:	4993      	ldr	r1, [pc, #588]	; (80069c8 <HAL_RCC_ClockConfig+0x278>)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	4313      	orrs	r3, r2
 8006780:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006782:	f7fd fc4b 	bl	800401c <HAL_GetTick>
 8006786:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006788:	e008      	b.n	800679c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800678a:	f7fd fc47 	bl	800401c <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e111      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800679c:	4b8a      	ldr	r3, [pc, #552]	; (80069c8 <HAL_RCC_ClockConfig+0x278>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d1ef      	bne.n	800678a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d016      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff fb14 	bl	8005de8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067c0:	f7fd fc2c 	bl	800401c <HAL_GetTick>
 80067c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80067c6:	e008      	b.n	80067da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067c8:	f7fd fc28 	bl	800401c <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e0f2      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80067da:	f7ff fbe9 	bl	8005fb0 <LL_RCC_IsActiveFlag_HPRE>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f1      	beq.n	80067c8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d016      	beq.n	800681e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff fb0b 	bl	8005e10 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067fa:	f7fd fc0f 	bl	800401c <HAL_GetTick>
 80067fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006800:	e008      	b.n	8006814 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006802:	f7fd fc0b 	bl	800401c <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e0d5      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006814:	f7ff fbde 	bl	8005fd4 <LL_RCC_IsActiveFlag_C2HPRE>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f1      	beq.n	8006802 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d016      	beq.n	8006858 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff fb04 	bl	8005e3c <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006834:	f7fd fbf2 	bl	800401c <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800683c:	f7fd fbee 	bl	800401c <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e0b8      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800684e:	f7ff fbd4 	bl	8005ffa <LL_RCC_IsActiveFlag_SHDHPRE>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f1      	beq.n	800683c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d016      	beq.n	8006892 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff fafe 	bl	8005e6a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800686e:	f7fd fbd5 	bl	800401c <HAL_GetTick>
 8006872:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006874:	e008      	b.n	8006888 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006876:	f7fd fbd1 	bl	800401c <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e09b      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006888:	f7ff fbca 	bl	8006020 <LL_RCC_IsActiveFlag_PPRE1>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0f1      	beq.n	8006876 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d017      	beq.n	80068ce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff faf4 	bl	8005e92 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068aa:	f7fd fbb7 	bl	800401c <HAL_GetTick>
 80068ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068b2:	f7fd fbb3 	bl	800401c <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e07d      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80068c4:	f7ff fbbe 	bl	8006044 <LL_RCC_IsActiveFlag_PPRE2>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0f1      	beq.n	80068b2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d043      	beq.n	8006962 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d106      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80068e2:	f7ff f894 	bl	8005a0e <LL_RCC_HSE_IsReady>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d11e      	bne.n	800692a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e067      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d106      	bne.n	8006906 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80068f8:	f7ff fb17 	bl	8005f2a <LL_RCC_PLL_IsReady>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d113      	bne.n	800692a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e05c      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d106      	bne.n	800691c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800690e:	f7ff f9fc 	bl	8005d0a <LL_RCC_MSI_IsReady>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d108      	bne.n	800692a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e051      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800691c:	f7ff f8a7 	bl	8005a6e <LL_RCC_HSI_IsReady>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e04a      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff fa3a 	bl	8005da8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006934:	f7fd fb72 	bl	800401c <HAL_GetTick>
 8006938:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693a:	e00a      	b.n	8006952 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800693c:	f7fd fb6e 	bl	800401c <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	f241 3288 	movw	r2, #5000	; 0x1388
 800694a:	4293      	cmp	r3, r2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e036      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006952:	f7ff fa3d 	bl	8005dd0 <LL_RCC_GetSysClkSource>
 8006956:	4602      	mov	r2, r0
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	429a      	cmp	r2, r3
 8006960:	d1ec      	bne.n	800693c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006962:	4b19      	ldr	r3, [pc, #100]	; (80069c8 <HAL_RCC_ClockConfig+0x278>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d21b      	bcs.n	80069a8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006970:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <HAL_RCC_ClockConfig+0x278>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f023 0207 	bic.w	r2, r3, #7
 8006978:	4913      	ldr	r1, [pc, #76]	; (80069c8 <HAL_RCC_ClockConfig+0x278>)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	4313      	orrs	r3, r2
 800697e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006980:	f7fd fb4c 	bl	800401c <HAL_GetTick>
 8006984:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	e008      	b.n	800699a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006988:	f7fd fb48 	bl	800401c <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e012      	b.n	80069c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <HAL_RCC_ClockConfig+0x278>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d1ef      	bne.n	8006988 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80069a8:	f000 f87e 	bl	8006aa8 <HAL_RCC_GetHCLKFreq>
 80069ac:	4603      	mov	r3, r0
 80069ae:	4a07      	ldr	r2, [pc, #28]	; (80069cc <HAL_RCC_ClockConfig+0x27c>)
 80069b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80069b2:	f7fd fb3f 	bl	8004034 <HAL_GetTickPrio>
 80069b6:	4603      	mov	r3, r0
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fd fae1 	bl	8003f80 <HAL_InitTick>
 80069be:	4603      	mov	r3, r0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	58004000 	.word	0x58004000
 80069cc:	2000002c 	.word	0x2000002c

080069d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069d0:	b590      	push	{r4, r7, lr}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069d6:	f7ff f9fb 	bl	8005dd0 <LL_RCC_GetSysClkSource>
 80069da:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80069e2:	f7ff f9b7 	bl	8005d54 <LL_RCC_MSI_GetRange>
 80069e6:	4603      	mov	r3, r0
 80069e8:	091b      	lsrs	r3, r3, #4
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	4a2b      	ldr	r2, [pc, #172]	; (8006a9c <HAL_RCC_GetSysClockFreq+0xcc>)
 80069f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	e04b      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d102      	bne.n	8006a04 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069fe:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e045      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d10a      	bne.n	8006a20 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a0a:	f7fe ffd0 	bl	80059ae <LL_RCC_HSE_IsEnabledDiv2>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d102      	bne.n	8006a1a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006a14:	4b22      	ldr	r3, [pc, #136]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e03a      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006a1a:	4b22      	ldr	r3, [pc, #136]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e037      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006a20:	f7ff faba 	bl	8005f98 <LL_RCC_PLL_GetMainSource>
 8006a24:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d003      	beq.n	8006a34 <HAL_RCC_GetSysClockFreq+0x64>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d003      	beq.n	8006a3a <HAL_RCC_GetSysClockFreq+0x6a>
 8006a32:	e00d      	b.n	8006a50 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006a34:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a36:	60bb      	str	r3, [r7, #8]
        break;
 8006a38:	e015      	b.n	8006a66 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a3a:	f7fe ffb8 	bl	80059ae <LL_RCC_HSE_IsEnabledDiv2>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d102      	bne.n	8006a4a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006a44:	4b16      	ldr	r3, [pc, #88]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a46:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006a48:	e00d      	b.n	8006a66 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006a4a:	4b16      	ldr	r3, [pc, #88]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006a4c:	60bb      	str	r3, [r7, #8]
        break;
 8006a4e:	e00a      	b.n	8006a66 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006a50:	f7ff f980 	bl	8005d54 <LL_RCC_MSI_GetRange>
 8006a54:	4603      	mov	r3, r0
 8006a56:	091b      	lsrs	r3, r3, #4
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	4a0f      	ldr	r2, [pc, #60]	; (8006a9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a62:	60bb      	str	r3, [r7, #8]
        break;
 8006a64:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006a66:	f7ff fa72 	bl	8005f4e <LL_RCC_PLL_GetN>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	fb03 f402 	mul.w	r4, r3, r2
 8006a72:	f7ff fa85 	bl	8005f80 <LL_RCC_PLL_GetDivider>
 8006a76:	4603      	mov	r3, r0
 8006a78:	091b      	lsrs	r3, r3, #4
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	fbb4 f4f3 	udiv	r4, r4, r3
 8006a80:	f7ff fa72 	bl	8005f68 <LL_RCC_PLL_GetR>
 8006a84:	4603      	mov	r3, r0
 8006a86:	0f5b      	lsrs	r3, r3, #29
 8006a88:	3301      	adds	r3, #1
 8006a8a:	fbb4 f3f3 	udiv	r3, r4, r3
 8006a8e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006a90:	68fb      	ldr	r3, [r7, #12]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd90      	pop	{r4, r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	0800c698 	.word	0x0800c698
 8006aa0:	00f42400 	.word	0x00f42400
 8006aa4:	01e84800 	.word	0x01e84800

08006aa8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006aa8:	b598      	push	{r3, r4, r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006aac:	f7ff ff90 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	f7ff fa02 	bl	8005eba <LL_RCC_GetAHBPrescaler>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	091b      	lsrs	r3, r3, #4
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	4a03      	ldr	r2, [pc, #12]	; (8006acc <HAL_RCC_GetHCLKFreq+0x24>)
 8006ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	bd98      	pop	{r3, r4, r7, pc}
 8006acc:	0800c658 	.word	0x0800c658

08006ad0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006ad0:	b590      	push	{r4, r7, lr}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2bb0      	cmp	r3, #176	; 0xb0
 8006adc:	d903      	bls.n	8006ae6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006ade:	4b15      	ldr	r3, [pc, #84]	; (8006b34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e007      	b.n	8006af6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	091b      	lsrs	r3, r3, #4
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	4a11      	ldr	r2, [pc, #68]	; (8006b34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006af6:	f7ff f9ec 	bl	8005ed2 <LL_RCC_GetAHB4Prescaler>
 8006afa:	4603      	mov	r3, r0
 8006afc:	091b      	lsrs	r3, r3, #4
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	4a0d      	ldr	r2, [pc, #52]	; (8006b38 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006b14:	fba2 2303 	umull	r2, r3, r2, r3
 8006b18:	0c9c      	lsrs	r4, r3, #18
 8006b1a:	f7fe ff03 	bl	8005924 <HAL_PWREx_GetVoltageRange>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	4619      	mov	r1, r3
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 f80c 	bl	8006b40 <RCC_SetFlashLatency>
 8006b28:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd90      	pop	{r4, r7, pc}
 8006b32:	bf00      	nop
 8006b34:	0800c698 	.word	0x0800c698
 8006b38:	0800c658 	.word	0x0800c658
 8006b3c:	431bde83 	.word	0x431bde83

08006b40 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006b40:	b590      	push	{r4, r7, lr}
 8006b42:	b093      	sub	sp, #76	; 0x4c
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006b4a:	4b37      	ldr	r3, [pc, #220]	; (8006c28 <RCC_SetFlashLatency+0xe8>)
 8006b4c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006b50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006b56:	4a35      	ldr	r2, [pc, #212]	; (8006c2c <RCC_SetFlashLatency+0xec>)
 8006b58:	f107 031c 	add.w	r3, r7, #28
 8006b5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006b62:	4b33      	ldr	r3, [pc, #204]	; (8006c30 <RCC_SetFlashLatency+0xf0>)
 8006b64:	f107 040c 	add.w	r4, r7, #12
 8006b68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006b6e:	2300      	movs	r3, #0
 8006b70:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b78:	d11a      	bne.n	8006bb0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b7e:	e013      	b.n	8006ba8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	3348      	adds	r3, #72	; 0x48
 8006b86:	443b      	add	r3, r7
 8006b88:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d807      	bhi.n	8006ba2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	3348      	adds	r3, #72	; 0x48
 8006b98:	443b      	add	r3, r7
 8006b9a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006b9e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006ba0:	e020      	b.n	8006be4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d9e8      	bls.n	8006b80 <RCC_SetFlashLatency+0x40>
 8006bae:	e019      	b.n	8006be4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb4:	e013      	b.n	8006bde <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	3348      	adds	r3, #72	; 0x48
 8006bbc:	443b      	add	r3, r7
 8006bbe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d807      	bhi.n	8006bd8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	3348      	adds	r3, #72	; 0x48
 8006bce:	443b      	add	r3, r7
 8006bd0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006bd4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006bd6:	e005      	b.n	8006be4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bda:	3301      	adds	r3, #1
 8006bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d9e8      	bls.n	8006bb6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006be4:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <RCC_SetFlashLatency+0xf4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f023 0207 	bic.w	r2, r3, #7
 8006bec:	4911      	ldr	r1, [pc, #68]	; (8006c34 <RCC_SetFlashLatency+0xf4>)
 8006bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006bf4:	f7fd fa12 	bl	800401c <HAL_GetTick>
 8006bf8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006bfa:	e008      	b.n	8006c0e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006bfc:	f7fd fa0e 	bl	800401c <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d901      	bls.n	8006c0e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e007      	b.n	8006c1e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <RCC_SetFlashLatency+0xf4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d1ef      	bne.n	8006bfc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	374c      	adds	r7, #76	; 0x4c
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd90      	pop	{r4, r7, pc}
 8006c26:	bf00      	nop
 8006c28:	0800c5ec 	.word	0x0800c5ec
 8006c2c:	0800c5fc 	.word	0x0800c5fc
 8006c30:	0800c608 	.word	0x0800c608
 8006c34:	58004000 	.word	0x58004000

08006c38 <LL_RCC_LSE_IsEnabled>:
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <LL_RCC_LSE_IsEnabled+0x18>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e000      	b.n	8006c52 <LL_RCC_LSE_IsEnabled+0x1a>
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <LL_RCC_LSE_IsReady>:
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d101      	bne.n	8006c74 <LL_RCC_LSE_IsReady+0x18>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <LL_RCC_LSE_IsReady+0x1a>
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <LL_RCC_SetRFWKPClockSource>:
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <LL_RCC_SetSMPSClockSource>:
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	f023 0203 	bic.w	r2, r3, #3
 8006cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <LL_RCC_SetSMPSPrescaler>:
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <LL_RCC_SetUSARTClockSource>:
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0c:	f023 0203 	bic.w	r2, r3, #3
 8006d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <LL_RCC_SetLPUARTClockSource>:
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <LL_RCC_SetI2CClockSource>:
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	091b      	lsrs	r3, r3, #4
 8006d68:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	401a      	ands	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	011b      	lsls	r3, r3, #4
 8006d74:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006d78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <LL_RCC_SetLPTIMClockSource>:
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	0c1b      	lsrs	r3, r3, #16
 8006da2:	041b      	lsls	r3, r3, #16
 8006da4:	43db      	mvns	r3, r3
 8006da6:	401a      	ands	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	041b      	lsls	r3, r3, #16
 8006dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <LL_RCC_SetSAIClockSource>:
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <LL_RCC_SetRNGClockSource>:
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <LL_RCC_SetCLK48ClockSource>:
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b083      	sub	sp, #12
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <LL_RCC_SetUSBClockSource>:
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff ffe3 	bl	8006e1a <LL_RCC_SetCLK48ClockSource>
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <LL_RCC_SetADCClockSource>:
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <LL_RCC_SetRTCClockSource>:
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <LL_RCC_GetRTCClockSource>:
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <LL_RCC_ForceBackupDomainReset>:
{
 8006ece:	b480      	push	{r7}
 8006ed0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ee6:	bf00      	nop
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f08:	bf00      	nop
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <LL_RCC_PLLSAI1_Enable>:
{
 8006f12:	b480      	push	{r7}
 8006f14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f24:	6013      	str	r3, [r2, #0]
}
 8006f26:	bf00      	nop
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <LL_RCC_PLLSAI1_Disable>:
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f42:	6013      	str	r3, [r2, #0]
}
 8006f44:	bf00      	nop
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <LL_RCC_PLLSAI1_IsReady>:
{
 8006f4e:	b480      	push	{r7}
 8006f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f60:	d101      	bne.n	8006f66 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b088      	sub	sp, #32
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006f7e:	2300      	movs	r3, #0
 8006f80:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d034      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f96:	d021      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006f98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f9c:	d81b      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fa2:	d01d      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006fa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fa8:	d815      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fb2:	d110      	bne.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006fc4:	e00d      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 f947 	bl	800725e <RCCEx_PLLSAI1_ConfigNP>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006fd4:	e005      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	77fb      	strb	r3, [r7, #31]
        break;
 8006fda:	e002      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006fdc:	bf00      	nop
 8006fde:	e000      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe2:	7ffb      	ldrb	r3, [r7, #31]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d105      	bne.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff fee8 	bl	8006dc2 <LL_RCC_SetSAIClockSource>
 8006ff2:	e001      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff4:	7ffb      	ldrb	r3, [r7, #31]
 8006ff6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007000:	2b00      	cmp	r3, #0
 8007002:	d046      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007004:	f7ff ff56 	bl	8006eb4 <LL_RCC_GetRTCClockSource>
 8007008:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	429a      	cmp	r2, r3
 8007012:	d03c      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007014:	f7fe fc2e 	bl	8005874 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d105      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff ff30 	bl	8006e88 <LL_RCC_SetRTCClockSource>
 8007028:	e02e      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800702a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800702e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007032:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007034:	f7ff ff4b 	bl	8006ece <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007038:	f7ff ff5a 	bl	8006ef0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800704a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007054:	f7ff fdf0 	bl	8006c38 <LL_RCC_LSE_IsEnabled>
 8007058:	4603      	mov	r3, r0
 800705a:	2b01      	cmp	r3, #1
 800705c:	d114      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800705e:	f7fc ffdd 	bl	800401c <HAL_GetTick>
 8007062:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007064:	e00b      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007066:	f7fc ffd9 	bl	800401c <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	f241 3288 	movw	r2, #5000	; 0x1388
 8007074:	4293      	cmp	r3, r2
 8007076:	d902      	bls.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	77fb      	strb	r3, [r7, #31]
              break;
 800707c:	e004      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800707e:	f7ff fded 	bl	8006c5c <LL_RCC_LSE_IsReady>
 8007082:	4603      	mov	r3, r0
 8007084:	2b01      	cmp	r3, #1
 8007086:	d1ee      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007088:	7ffb      	ldrb	r3, [r7, #31]
 800708a:	77bb      	strb	r3, [r7, #30]
 800708c:	e001      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708e:	7ffb      	ldrb	r3, [r7, #31]
 8007090:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff fe2a 	bl	8006cfc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff fe35 	bl	8006d28 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0310 	and.w	r3, r3, #16
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff fe5d 	bl	8006d8e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0320 	and.w	r3, r3, #32
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff fe52 	bl	8006d8e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff fe2a 	bl	8006d54 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	2b00      	cmp	r3, #0
 800710a:	d004      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff fe1f 	bl	8006d54 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d022      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff fe8d 	bl	8006e46 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007134:	d107      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007144:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800714e:	d10b      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	4618      	mov	r0, r3
 8007156:	f000 f8dd 	bl	8007314 <RCCEx_PLLSAI1_ConfigNQ>
 800715a:	4603      	mov	r3, r0
 800715c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800715e:	7ffb      	ldrb	r3, [r7, #31]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007164:	7ffb      	ldrb	r3, [r7, #31]
 8007166:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007170:	2b00      	cmp	r3, #0
 8007172:	d02b      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800717c:	d008      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007186:	d003      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d105      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff fe2a 	bl	8006dee <LL_RCC_SetRNGClockSource>
 800719a:	e00a      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	2000      	movs	r0, #0
 80071a8:	f7ff fe21 	bl	8006dee <LL_RCC_SetRNGClockSource>
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f7ff fe34 	bl	8006e1a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80071ba:	d107      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80071bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d022      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff fe3d 	bl	8006e5c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ea:	d107      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80071ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071fa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007200:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007204:	d10b      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3304      	adds	r3, #4
 800720a:	4618      	mov	r0, r3
 800720c:	f000 f8dd 	bl	80073ca <RCCEx_PLLSAI1_ConfigNR>
 8007210:	4603      	mov	r3, r0
 8007212:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007214:	7ffb      	ldrb	r3, [r7, #31]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800721a:	7ffb      	ldrb	r3, [r7, #31]
 800721c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d004      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fd26 	bl	8006c80 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d009      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff fd45 	bl	8006cd4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800724e:	4618      	mov	r0, r3
 8007250:	f7ff fd2c 	bl	8006cac <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007254:	7fbb      	ldrb	r3, [r7, #30]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800726a:	f7ff fe61 	bl	8006f30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800726e:	f7fc fed5 	bl	800401c <HAL_GetTick>
 8007272:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007274:	e009      	b.n	800728a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007276:	f7fc fed1 	bl	800401c <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d902      	bls.n	800728a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	73fb      	strb	r3, [r7, #15]
      break;
 8007288:	e004      	b.n	8007294 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800728a:	f7ff fe60 	bl	8006f4e <LL_RCC_PLLSAI1_IsReady>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f0      	bne.n	8007276 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007294:	7bfb      	ldrb	r3, [r7, #15]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d137      	bne.n	800730a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800729a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072ae:	4313      	orrs	r3, r2
 80072b0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80072b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072c4:	4313      	orrs	r3, r2
 80072c6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80072c8:	f7ff fe23 	bl	8006f12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072cc:	f7fc fea6 	bl	800401c <HAL_GetTick>
 80072d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072d2:	e009      	b.n	80072e8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072d4:	f7fc fea2 	bl	800401c <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d902      	bls.n	80072e8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	73fb      	strb	r3, [r7, #15]
        break;
 80072e6:	e004      	b.n	80072f2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072e8:	f7ff fe31 	bl	8006f4e <LL_RCC_PLLSAI1_IsReady>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d1f0      	bne.n	80072d4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d108      	bne.n	800730a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80072f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072fc:	691a      	ldr	r2, [r3, #16]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007306:	4313      	orrs	r3, r2
 8007308:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800730a:	7bfb      	ldrb	r3, [r7, #15]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007320:	f7ff fe06 	bl	8006f30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007324:	f7fc fe7a 	bl	800401c <HAL_GetTick>
 8007328:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800732a:	e009      	b.n	8007340 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800732c:	f7fc fe76 	bl	800401c <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d902      	bls.n	8007340 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	73fb      	strb	r3, [r7, #15]
      break;
 800733e:	e004      	b.n	800734a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007340:	f7ff fe05 	bl	8006f4e <LL_RCC_PLLSAI1_IsReady>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f0      	bne.n	800732c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d137      	bne.n	80073c0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007364:	4313      	orrs	r3, r2
 8007366:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800737a:	4313      	orrs	r3, r2
 800737c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800737e:	f7ff fdc8 	bl	8006f12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007382:	f7fc fe4b 	bl	800401c <HAL_GetTick>
 8007386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007388:	e009      	b.n	800739e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800738a:	f7fc fe47 	bl	800401c <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d902      	bls.n	800739e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	73fb      	strb	r3, [r7, #15]
        break;
 800739c:	e004      	b.n	80073a8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800739e:	f7ff fdd6 	bl	8006f4e <LL_RCC_PLLSAI1_IsReady>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d1f0      	bne.n	800738a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d108      	bne.n	80073c0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80073ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073bc:	4313      	orrs	r3, r2
 80073be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80073d6:	f7ff fdab 	bl	8006f30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80073da:	f7fc fe1f 	bl	800401c <HAL_GetTick>
 80073de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80073e0:	e009      	b.n	80073f6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073e2:	f7fc fe1b 	bl	800401c <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d902      	bls.n	80073f6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	73fb      	strb	r3, [r7, #15]
      break;
 80073f4:	e004      	b.n	8007400 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80073f6:	f7ff fdaa 	bl	8006f4e <LL_RCC_PLLSAI1_IsReady>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f0      	bne.n	80073e2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d137      	bne.n	8007476 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800741a:	4313      	orrs	r3, r2
 800741c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800741e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007430:	4313      	orrs	r3, r2
 8007432:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007434:	f7ff fd6d 	bl	8006f12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007438:	f7fc fdf0 	bl	800401c <HAL_GetTick>
 800743c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800743e:	e009      	b.n	8007454 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007440:	f7fc fdec 	bl	800401c <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d902      	bls.n	8007454 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	73fb      	strb	r3, [r7, #15]
        break;
 8007452:	e004      	b.n	800745e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007454:	f7ff fd7b 	bl	8006f4e <LL_RCC_PLLSAI1_IsReady>
 8007458:	4603      	mov	r3, r0
 800745a:	2b01      	cmp	r3, #1
 800745c:	d1f0      	bne.n	8007440 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d108      	bne.n	8007476 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007472:	4313      	orrs	r3, r2
 8007474:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e09f      	b.n	80075d2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fc fbf6 	bl	8003c98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80074b4:	4b49      	ldr	r3, [pc, #292]	; (80075dc <HAL_RTC_Init+0x15c>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d07e      	beq.n	80075be <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	22ca      	movs	r2, #202	; 0xca
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2253      	movs	r2, #83	; 0x53
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f8ab 	bl	800762c <RTC_EnterInitMode>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00a      	beq.n	80074f2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	22ff      	movs	r2, #255	; 0xff
 80074e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2204      	movs	r2, #4
 80074e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	73fb      	strb	r3, [r7, #15]
 80074f0:	e067      	b.n	80075c2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007504:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6899      	ldr	r1, [r3, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	68d2      	ldr	r2, [r2, #12]
 800752c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6919      	ldr	r1, [r3, #16]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	041a      	lsls	r2, r3, #16
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007550:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0203 	bic.w	r2, r2, #3
 8007560:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 0320 	and.w	r3, r3, #32
 8007584:	2b00      	cmp	r3, #0
 8007586:	d113      	bne.n	80075b0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f829 	bl	80075e0 <HAL_RTC_WaitForSynchro>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00d      	beq.n	80075b0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	22ff      	movs	r2, #255	; 0xff
 800759a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2204      	movs	r2, #4
 80075a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e010      	b.n	80075d2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	22ff      	movs	r2, #255	; 0xff
 80075b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	73fb      	strb	r3, [r7, #15]
 80075bc:	e001      	b.n	80075c2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d103      	bne.n	80075d0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	40002800 	.word	0x40002800

080075e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80075f8:	f7fc fd10 	bl	800401c <HAL_GetTick>
 80075fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075fe:	e009      	b.n	8007614 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007600:	f7fc fd0c 	bl	800401c <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800760e:	d901      	bls.n	8007614 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e007      	b.n	8007624 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0ee      	beq.n	8007600 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763e:	2b00      	cmp	r3, #0
 8007640:	d119      	bne.n	8007676 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f04f 32ff 	mov.w	r2, #4294967295
 800764a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800764c:	f7fc fce6 	bl	800401c <HAL_GetTick>
 8007650:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007652:	e009      	b.n	8007668 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007654:	f7fc fce2 	bl	800401c <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007662:	d901      	bls.n	8007668 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e007      	b.n	8007678 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0ee      	beq.n	8007654 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007696:	2302      	movs	r3, #2
 8007698:	e0a8      	b.n	80077ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2202      	movs	r2, #2
 80076a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	22ca      	movs	r2, #202	; 0xca
 80076b0:	625a      	str	r2, [r3, #36]	; 0x24
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2253      	movs	r2, #83	; 0x53
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d020      	beq.n	800770a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80076c8:	f7fc fca8 	bl	800401c <HAL_GetTick>
 80076cc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80076ce:	e015      	b.n	80076fc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80076d0:	f7fc fca4 	bl	800401c <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076de:	d90d      	bls.n	80076fc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	22ff      	movs	r2, #255	; 0xff
 80076e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2203      	movs	r2, #3
 80076ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e077      	b.n	80077ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e2      	bne.n	80076d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007718:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	b2da      	uxtb	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800772a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800772c:	f7fc fc76 	bl	800401c <HAL_GetTick>
 8007730:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007732:	e015      	b.n	8007760 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007734:	f7fc fc72 	bl	800401c <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007742:	d90d      	bls.n	8007760 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	22ff      	movs	r2, #255	; 0xff
 800774a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2203      	movs	r2, #3
 8007750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e045      	b.n	80077ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0e2      	beq.n	8007734 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0207 	bic.w	r2, r2, #7
 8007784:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6899      	ldr	r1, [r3, #8]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	430a      	orrs	r2, r1
 8007794:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007796:	4b17      	ldr	r3, [pc, #92]	; (80077f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800779c:	4a15      	ldr	r2, [pc, #84]	; (80077f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800779e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80077a6:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a12      	ldr	r2, [pc, #72]	; (80077f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80077ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077b0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077c0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077d0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	22ff      	movs	r2, #255	; 0xff
 80077d8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	58000800 	.word	0x58000800

080077f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b091      	sub	sp, #68	; 0x44
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780c:	2b20      	cmp	r3, #32
 800780e:	d178      	bne.n	8007902 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <HAL_UART_Transmit_IT+0x24>
 8007816:	88fb      	ldrh	r3, [r7, #6]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e071      	b.n	8007904 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	88fa      	ldrh	r2, [r7, #6]
 800782a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	88fa      	ldrh	r2, [r7, #6]
 8007832:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2221      	movs	r2, #33	; 0x21
 8007848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007854:	d12a      	bne.n	80078ac <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785e:	d107      	bne.n	8007870 <HAL_UART_Transmit_IT+0x78>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4a29      	ldr	r2, [pc, #164]	; (8007910 <HAL_UART_Transmit_IT+0x118>)
 800786c:	679a      	str	r2, [r3, #120]	; 0x78
 800786e:	e002      	b.n	8007876 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4a28      	ldr	r2, [pc, #160]	; (8007914 <HAL_UART_Transmit_IT+0x11c>)
 8007874:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800788c:	63bb      	str	r3, [r7, #56]	; 0x38
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3308      	adds	r3, #8
 8007894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007896:	637a      	str	r2, [r7, #52]	; 0x34
 8007898:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800789c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e5      	bne.n	8007876 <HAL_UART_Transmit_IT+0x7e>
 80078aa:	e028      	b.n	80078fe <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b4:	d107      	bne.n	80078c6 <HAL_UART_Transmit_IT+0xce>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d103      	bne.n	80078c6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4a15      	ldr	r2, [pc, #84]	; (8007918 <HAL_UART_Transmit_IT+0x120>)
 80078c2:	679a      	str	r2, [r3, #120]	; 0x78
 80078c4:	e002      	b.n	80078cc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4a14      	ldr	r2, [pc, #80]	; (800791c <HAL_UART_Transmit_IT+0x124>)
 80078ca:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	613b      	str	r3, [r7, #16]
   return(result);
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ea:	623b      	str	r3, [r7, #32]
 80078ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	69f9      	ldr	r1, [r7, #28]
 80078f0:	6a3a      	ldr	r2, [r7, #32]
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e6      	bne.n	80078cc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e000      	b.n	8007904 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007902:	2302      	movs	r3, #2
  }
}
 8007904:	4618      	mov	r0, r3
 8007906:	3744      	adds	r7, #68	; 0x44
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	080082e7 	.word	0x080082e7
 8007914:	08008207 	.word	0x08008207
 8007918:	08008145 	.word	0x08008145
 800791c:	0800808d 	.word	0x0800808d

08007920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b0ba      	sub	sp, #232	; 0xe8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800794a:	f640 030f 	movw	r3, #2063	; 0x80f
 800794e:	4013      	ands	r3, r2
 8007950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007958:	2b00      	cmp	r3, #0
 800795a:	d11b      	bne.n	8007994 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800795c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d015      	beq.n	8007994 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b00      	cmp	r3, #0
 8007972:	d105      	bne.n	8007980 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d009      	beq.n	8007994 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 82e3 	beq.w	8007f50 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
      }
      return;
 8007992:	e2dd      	b.n	8007f50 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 8123 	beq.w	8007be4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800799e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80079a2:	4b8d      	ldr	r3, [pc, #564]	; (8007bd8 <HAL_UART_IRQHandler+0x2b8>)
 80079a4:	4013      	ands	r3, r2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80079aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079ae:	4b8b      	ldr	r3, [pc, #556]	; (8007bdc <HAL_UART_IRQHandler+0x2bc>)
 80079b0:	4013      	ands	r3, r2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 8116 	beq.w	8007be4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d011      	beq.n	80079e8 <HAL_UART_IRQHandler+0xc8>
 80079c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2201      	movs	r2, #1
 80079d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079de:	f043 0201 	orr.w	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d011      	beq.n	8007a18 <HAL_UART_IRQHandler+0xf8>
 80079f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2202      	movs	r2, #2
 8007a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0e:	f043 0204 	orr.w	r2, r3, #4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d011      	beq.n	8007a48 <HAL_UART_IRQHandler+0x128>
 8007a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2204      	movs	r2, #4
 8007a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3e:	f043 0202 	orr.w	r2, r3, #2
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d017      	beq.n	8007a84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d105      	bne.n	8007a6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a64:	4b5c      	ldr	r3, [pc, #368]	; (8007bd8 <HAL_UART_IRQHandler+0x2b8>)
 8007a66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2208      	movs	r2, #8
 8007a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7a:	f043 0208 	orr.w	r2, r3, #8
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d012      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x196>
 8007a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00c      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aac:	f043 0220 	orr.w	r2, r3, #32
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 8249 	beq.w	8007f54 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d013      	beq.n	8007af6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d105      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d007      	beq.n	8007af6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d005      	beq.n	8007b1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d054      	beq.n	8007bc4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fa3a 	bl	8007f94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b40      	cmp	r3, #64	; 0x40
 8007b2c:	d146      	bne.n	8007bbc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3308      	adds	r3, #8
 8007b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1d9      	bne.n	8007b2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d017      	beq.n	8007bb4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b8a:	4a15      	ldr	r2, [pc, #84]	; (8007be0 <HAL_UART_IRQHandler+0x2c0>)
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fc fc97 	bl	80044c8 <HAL_DMA_Abort_IT>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d019      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007bae:	4610      	mov	r0, r2
 8007bb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb2:	e00f      	b.n	8007bd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f9d7 	bl	8007f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bba:	e00b      	b.n	8007bd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f9d3 	bl	8007f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc2:	e007      	b.n	8007bd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f9cf 	bl	8007f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007bd2:	e1bf      	b.n	8007f54 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd4:	bf00      	nop
    return;
 8007bd6:	e1bd      	b.n	8007f54 <HAL_UART_IRQHandler+0x634>
 8007bd8:	10000001 	.word	0x10000001
 8007bdc:	04000120 	.word	0x04000120
 8007be0:	08008061 	.word	0x08008061

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	f040 8153 	bne.w	8007e94 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 814c 	beq.w	8007e94 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c00:	f003 0310 	and.w	r3, r3, #16
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 8145 	beq.w	8007e94 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2210      	movs	r2, #16
 8007c10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1c:	2b40      	cmp	r3, #64	; 0x40
 8007c1e:	f040 80bb 	bne.w	8007d98 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 818f 	beq.w	8007f58 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c44:	429a      	cmp	r2, r3
 8007c46:	f080 8187 	bcs.w	8007f58 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f040 8087 	bne.w	8007d76 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1da      	bne.n	8007c68 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cc4:	f023 0301 	bic.w	r3, r3, #1
 8007cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e1      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3308      	adds	r3, #8
 8007d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e3      	bne.n	8007cee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d44:	f023 0310 	bic.w	r3, r3, #16
 8007d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d56:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e4      	bne.n	8007d34 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fc fb4a 	bl	800440a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f8f3 	bl	8007f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d96:	e0df      	b.n	8007f58 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80d1 	beq.w	8007f5c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 80cc 	beq.w	8007f5c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007de6:	647b      	str	r3, [r7, #68]	; 0x44
 8007de8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e4      	bne.n	8007dc4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	623b      	str	r3, [r7, #32]
   return(result);
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e22:	633a      	str	r2, [r7, #48]	; 0x30
 8007e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e1      	bne.n	8007dfa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0310 	bic.w	r3, r3, #16
 8007e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e6c:	61fb      	str	r3, [r7, #28]
 8007e6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	69b9      	ldr	r1, [r7, #24]
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	617b      	str	r3, [r7, #20]
   return(result);
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e4      	bne.n	8007e4a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f875 	bl	8007f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e92:	e063      	b.n	8007f5c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00e      	beq.n	8007ebe <HAL_UART_IRQHandler+0x59e>
 8007ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d008      	beq.n	8007ebe <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007eb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fab5 	bl	8008426 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ebc:	e051      	b.n	8007f62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d014      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d105      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d008      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d03a      	beq.n	8007f60 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
    }
    return;
 8007ef2:	e035      	b.n	8007f60 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d009      	beq.n	8007f14 <HAL_UART_IRQHandler+0x5f4>
 8007f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fa5f 	bl	80083d0 <UART_EndTransmit_IT>
    return;
 8007f12:	e026      	b.n	8007f62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d009      	beq.n	8007f34 <HAL_UART_IRQHandler+0x614>
 8007f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fa8e 	bl	800844e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f32:	e016      	b.n	8007f62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d010      	beq.n	8007f62 <HAL_UART_IRQHandler+0x642>
 8007f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	da0c      	bge.n	8007f62 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fa76 	bl	800843a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f4e:	e008      	b.n	8007f62 <HAL_UART_IRQHandler+0x642>
      return;
 8007f50:	bf00      	nop
 8007f52:	e006      	b.n	8007f62 <HAL_UART_IRQHandler+0x642>
    return;
 8007f54:	bf00      	nop
 8007f56:	e004      	b.n	8007f62 <HAL_UART_IRQHandler+0x642>
      return;
 8007f58:	bf00      	nop
 8007f5a:	e002      	b.n	8007f62 <HAL_UART_IRQHandler+0x642>
      return;
 8007f5c:	bf00      	nop
 8007f5e:	e000      	b.n	8007f62 <HAL_UART_IRQHandler+0x642>
    return;
 8007f60:	bf00      	nop
  }
}
 8007f62:	37e8      	adds	r7, #232	; 0xe8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b095      	sub	sp, #84	; 0x54
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fba:	643b      	str	r3, [r7, #64]	; 0x40
 8007fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e6      	bne.n	8007f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe4:	f023 0301 	bic.w	r3, r3, #1
 8007fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e3      	bne.n	8007fce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800800a:	2b01      	cmp	r3, #1
 800800c:	d118      	bne.n	8008040 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	60bb      	str	r3, [r7, #8]
   return(result);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f023 0310 	bic.w	r3, r3, #16
 8008022:	647b      	str	r3, [r7, #68]	; 0x44
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800802c:	61bb      	str	r3, [r7, #24]
 800802e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	6979      	ldr	r1, [r7, #20]
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	613b      	str	r3, [r7, #16]
   return(result);
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e6      	bne.n	800800e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008054:	bf00      	nop
 8008056:	3754      	adds	r7, #84	; 0x54
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f7ff ff72 	bl	8007f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008084:	bf00      	nop
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b08f      	sub	sp, #60	; 0x3c
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809a:	2b21      	cmp	r3, #33	; 0x21
 800809c:	d14c      	bne.n	8008138 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d132      	bne.n	8008110 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080be:	637b      	str	r3, [r7, #52]	; 0x34
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	461a      	mov	r2, r3
 80080c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080d0:	e841 2300 	strex	r3, r2, [r1]
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e6      	bne.n	80080aa <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f0:	633b      	str	r3, [r7, #48]	; 0x30
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	61bb      	str	r3, [r7, #24]
 80080fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	6979      	ldr	r1, [r7, #20]
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	613b      	str	r3, [r7, #16]
   return(result);
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e6      	bne.n	80080dc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800810e:	e013      	b.n	8008138 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008114:	781a      	ldrb	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008138:	bf00      	nop
 800813a:	373c      	adds	r7, #60	; 0x3c
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008144:	b480      	push	{r7}
 8008146:	b091      	sub	sp, #68	; 0x44
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008152:	2b21      	cmp	r3, #33	; 0x21
 8008154:	d151      	bne.n	80081fa <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d132      	bne.n	80081c8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	e853 3f00 	ldrex	r3, [r3]
 800816e:	623b      	str	r3, [r7, #32]
   return(result);
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008176:	63bb      	str	r3, [r7, #56]	; 0x38
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	461a      	mov	r2, r3
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	633b      	str	r3, [r7, #48]	; 0x30
 8008182:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008184:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008188:	e841 2300 	strex	r3, r2, [r1]
 800818c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1e6      	bne.n	8008162 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	e853 3f00 	ldrex	r3, [r3]
 80081a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b2:	61fb      	str	r3, [r7, #28]
 80081b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b6:	69b9      	ldr	r1, [r7, #24]
 80081b8:	69fa      	ldr	r2, [r7, #28]
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	617b      	str	r3, [r7, #20]
   return(result);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1e6      	bne.n	8008194 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80081c6:	e018      	b.n	80081fa <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80081ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081dc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e2:	1c9a      	adds	r2, r3, #2
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	3b01      	subs	r3, #1
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80081fa:	bf00      	nop
 80081fc:	3744      	adds	r7, #68	; 0x44
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008206:	b480      	push	{r7}
 8008208:	b091      	sub	sp, #68	; 0x44
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008214:	2b21      	cmp	r3, #33	; 0x21
 8008216:	d160      	bne.n	80082da <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800821e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008220:	e057      	b.n	80082d2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d133      	bne.n	8008296 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3308      	adds	r3, #8
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	623b      	str	r3, [r7, #32]
   return(result);
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008244:	63bb      	str	r3, [r7, #56]	; 0x38
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800824e:	633a      	str	r2, [r7, #48]	; 0x30
 8008250:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e5      	bne.n	800822e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	e853 3f00 	ldrex	r3, [r3]
 800826e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008276:	637b      	str	r3, [r7, #52]	; 0x34
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008280:	61fb      	str	r3, [r7, #28]
 8008282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008284:	69b9      	ldr	r1, [r7, #24]
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	e841 2300 	strex	r3, r2, [r1]
 800828c:	617b      	str	r3, [r7, #20]
   return(result);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e6      	bne.n	8008262 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008294:	e021      	b.n	80082da <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d013      	beq.n	80082cc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a8:	781a      	ldrb	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	3b01      	subs	r3, #1
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80082cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80082ce:	3b01      	subs	r3, #1
 80082d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80082d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1a4      	bne.n	8008222 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80082d8:	e7ff      	b.n	80082da <UART_TxISR_8BIT_FIFOEN+0xd4>
 80082da:	bf00      	nop
 80082dc:	3744      	adds	r7, #68	; 0x44
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b091      	sub	sp, #68	; 0x44
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f4:	2b21      	cmp	r3, #33	; 0x21
 80082f6:	d165      	bne.n	80083c4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008300:	e05c      	b.n	80083bc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d133      	bne.n	8008376 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3308      	adds	r3, #8
 8008314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	61fb      	str	r3, [r7, #28]
   return(result);
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008324:	637b      	str	r3, [r7, #52]	; 0x34
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3308      	adds	r3, #8
 800832c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800832e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008330:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e5      	bne.n	800830e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008356:	633b      	str	r3, [r7, #48]	; 0x30
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	61bb      	str	r3, [r7, #24]
 8008362:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	6979      	ldr	r1, [r7, #20]
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	e841 2300 	strex	r3, r2, [r1]
 800836c:	613b      	str	r3, [r7, #16]
   return(result);
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e6      	bne.n	8008342 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008374:	e026      	b.n	80083c4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008380:	2b00      	cmp	r3, #0
 8008382:	d018      	beq.n	80083b6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008388:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008398:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800839e:	1c9a      	adds	r2, r3, #2
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	3b01      	subs	r3, #1
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80083b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80083b8:	3b01      	subs	r3, #1
 80083ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80083bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d19f      	bne.n	8008302 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80083c2:	e7ff      	b.n	80083c4 <UART_TxISR_16BIT_FIFOEN+0xde>
 80083c4:	bf00      	nop
 80083c6:	3744      	adds	r7, #68	; 0x44
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b088      	sub	sp, #32
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ec:	61fb      	str	r3, [r7, #28]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	61bb      	str	r3, [r7, #24]
 80083f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6979      	ldr	r1, [r7, #20]
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	613b      	str	r3, [r7, #16]
   return(result);
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e6      	bne.n	80083d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7fa ff39 	bl	8003290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800841e:	bf00      	nop
 8008420:	3720      	adds	r7, #32
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800846c:	f7f9 f916 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008470:	f7f9 f89a 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008474:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f062 0208 	orn	r2, r2, #8
 800847e:	701a      	strb	r2, [r3, #0]
 8008480:	2200      	movs	r2, #0
 8008482:	705a      	strb	r2, [r3, #1]
 8008484:	2200      	movs	r2, #0
 8008486:	709a      	strb	r2, [r3, #2]
 8008488:	2200      	movs	r2, #0
 800848a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f042 0201 	orr.w	r2, r2, #1
 8008494:	711a      	strb	r2, [r3, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	715a      	strb	r2, [r3, #5]
 800849a:	2200      	movs	r2, #0
 800849c:	719a      	strb	r2, [r3, #6]
 800849e:	2200      	movs	r2, #0
 80084a0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80084a8:	f7f9 f8c6 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80084ac:	f7f9 f888 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80084b0:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	689b      	ldr	r3, [r3, #8]

}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <otCoapMessageInit>:

void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70fb      	strb	r3, [r7, #3]
 80084ca:	4613      	mov	r3, r2
 80084cc:	70bb      	strb	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80084ce:	f7f9 f8e5 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80084d2:	f7f9 f869 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 80084d6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f062 0228 	orn	r2, r2, #40	; 0x28
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	2200      	movs	r2, #0
 80084e4:	705a      	strb	r2, [r3, #1]
 80084e6:	2200      	movs	r2, #0
 80084e8:	709a      	strb	r2, [r3, #2]
 80084ea:	2200      	movs	r2, #0
 80084ec:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f042 0203 	orr.w	r2, r2, #3
 80084f6:	711a      	strb	r2, [r3, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	715a      	strb	r2, [r3, #5]
 80084fc:	2200      	movs	r2, #0
 80084fe:	719a      	strb	r2, [r3, #6]
 8008500:	2200      	movs	r2, #0
 8008502:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aType;
 800850a:	78fa      	ldrb	r2, [r7, #3]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aCode;
 8008510:	78ba      	ldrb	r2, [r7, #2]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8008516:	f7f9 f88f 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800851a:	f7f9 f851 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800851e:	60f8      	str	r0, [r7, #12]
}
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <otCoapMessageInitResponse>:

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	4611      	mov	r1, r2
 8008534:	461a      	mov	r2, r3
 8008536:	460b      	mov	r3, r1
 8008538:	71fb      	strb	r3, [r7, #7]
 800853a:	4613      	mov	r3, r2
 800853c:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800853e:	f7f9 f8ad 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008542:	f7f9 f831 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008546:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2200      	movs	r2, #0
 800854c:	f062 0227 	orn	r2, r2, #39	; 0x27
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	2200      	movs	r2, #0
 8008554:	705a      	strb	r2, [r3, #1]
 8008556:	2200      	movs	r2, #0
 8008558:	709a      	strb	r2, [r3, #2]
 800855a:	2200      	movs	r2, #0
 800855c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2200      	movs	r2, #0
 8008562:	f042 0204 	orr.w	r2, r2, #4
 8008566:	711a      	strb	r2, [r3, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	715a      	strb	r2, [r3, #5]
 800856c:	2200      	movs	r2, #0
 800856e:	719a      	strb	r2, [r3, #6]
 8008570:	2200      	movs	r2, #0
 8008572:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 8008580:	79fa      	ldrb	r2, [r7, #7]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 8008586:	79ba      	ldrb	r2, [r7, #6]
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800858c:	f7f9 f854 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008590:	f7f9 f816 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008594:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	b2db      	uxtb	r3, r3
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <otCoapMessageSetToken>:

otError otCoapMessageSetToken(otMessage *aMessage, const uint8_t *aToken, uint8_t aTokenLength)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	4613      	mov	r3, r2
 80085b0:	71fb      	strb	r3, [r7, #7]
  Pre_OtCmdProcessing();
 80085b2:	f7f9 f873 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80085b6:	f7f8 fff7 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 80085ba:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_TOKEN;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2200      	movs	r2, #0
 80085c0:	f062 0226 	orn	r2, r2, #38	; 0x26
 80085c4:	701a      	strb	r2, [r3, #0]
 80085c6:	2200      	movs	r2, #0
 80085c8:	705a      	strb	r2, [r3, #1]
 80085ca:	2200      	movs	r2, #0
 80085cc:	709a      	strb	r2, [r3, #2]
 80085ce:	2200      	movs	r2, #0
 80085d0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f042 0203 	orr.w	r2, r2, #3
 80085da:	711a      	strb	r2, [r3, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	715a      	strb	r2, [r3, #5]
 80085e0:	2200      	movs	r2, #0
 80085e2:	719a      	strb	r2, [r3, #6]
 80085e4:	2200      	movs	r2, #0
 80085e6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aToken;
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTokenLength;
 80085f4:	79fa      	ldrb	r2, [r7, #7]
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 80085fa:	f7f9 f81d 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80085fe:	f7f8 ffdf 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008602:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	b2db      	uxtb	r3, r3
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <otCoapMessageGenerateToken>:

void otCoapMessageGenerateToken(otMessage *aMessage, uint8_t aTokenLength)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	460b      	mov	r3, r1
 800861c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800861e:	f7f9 f83d 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008622:	f7f8 ffc1 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008626:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GENERATE_TOKEN;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f062 0225 	orn	r2, r2, #37	; 0x25
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	2200      	movs	r2, #0
 8008634:	705a      	strb	r2, [r3, #1]
 8008636:	2200      	movs	r2, #0
 8008638:	709a      	strb	r2, [r3, #2]
 800863a:	2200      	movs	r2, #0
 800863c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f042 0202 	orr.w	r2, r2, #2
 8008646:	711a      	strb	r2, [r3, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	715a      	strb	r2, [r3, #5]
 800864c:	2200      	movs	r2, #0
 800864e:	719a      	strb	r2, [r3, #6]
 8008650:	2200      	movs	r2, #0
 8008652:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8008660:	f7f8 ffea 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008664:	f7f8 ffac 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008668:	60f8      	str	r0, [r7, #12]
}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <otCoapMessageAppendUriPathOptions>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800867c:	f7f9 f80e 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008680:	f7f8 ff92 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008684:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_APPEND_URI_PATH_OPTIONS;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f062 0220 	orn	r2, r2, #32
 800868e:	701a      	strb	r2, [r3, #0]
 8008690:	2200      	movs	r2, #0
 8008692:	705a      	strb	r2, [r3, #1]
 8008694:	2200      	movs	r2, #0
 8008696:	709a      	strb	r2, [r3, #2]
 8008698:	2200      	movs	r2, #0
 800869a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f042 0202 	orr.w	r2, r2, #2
 80086a4:	711a      	strb	r2, [r3, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	715a      	strb	r2, [r3, #5]
 80086aa:	2200      	movs	r2, #0
 80086ac:	719a      	strb	r2, [r3, #6]
 80086ae:	2200      	movs	r2, #0
 80086b0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aUriPath;
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80086be:	f7f8 ffbb 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80086c2:	f7f8 ff7d 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80086c6:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	b2db      	uxtb	r3, r3
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80086de:	f7f8 ffdd 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80086e2:	f7f8 ff61 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 80086e6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f062 0219 	orn	r2, r2, #25
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	2200      	movs	r2, #0
 80086f4:	705a      	strb	r2, [r3, #1]
 80086f6:	2200      	movs	r2, #0
 80086f8:	709a      	strb	r2, [r3, #2]
 80086fa:	2200      	movs	r2, #0
 80086fc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	f042 0201 	orr.w	r2, r2, #1
 8008706:	711a      	strb	r2, [r3, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	715a      	strb	r2, [r3, #5]
 800870c:	2200      	movs	r2, #0
 800870e:	719a      	strb	r2, [r3, #6]
 8008710:	2200      	movs	r2, #0
 8008712:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800871a:	f7f8 ff8d 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800871e:	f7f8 ff4f 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008722:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	b2db      	uxtb	r3, r3
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <otCoapMessageGetCode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otCoapType)p_ot_req->Data[0];
}

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800873a:	f7f8 ffaf 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800873e:	f7f8 ff33 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008742:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f062 0217 	orn	r2, r2, #23
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	2200      	movs	r2, #0
 8008750:	705a      	strb	r2, [r3, #1]
 8008752:	2200      	movs	r2, #0
 8008754:	709a      	strb	r2, [r3, #2]
 8008756:	2200      	movs	r2, #0
 8008758:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f042 0201 	orr.w	r2, r2, #1
 8008762:	711a      	strb	r2, [r3, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	715a      	strb	r2, [r3, #5]
 8008768:	2200      	movs	r2, #0
 800876a:	719a      	strb	r2, [r3, #6]
 800876c:	2200      	movs	r2, #0
 800876e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008776:	f7f8 ff5f 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800877a:	f7f8 ff21 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800877e:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	b2db      	uxtb	r3, r3
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <otCoapMessageSetCode>:

void otCoapMessageSetCode(otMessage *aMessage, otCoapCode aCode)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800879a:	f7f8 ff7f 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800879e:	f7f8 ff03 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 80087a2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_CODE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f062 0216 	orn	r2, r2, #22
 80087ac:	701a      	strb	r2, [r3, #0]
 80087ae:	2200      	movs	r2, #0
 80087b0:	705a      	strb	r2, [r3, #1]
 80087b2:	2200      	movs	r2, #0
 80087b4:	709a      	strb	r2, [r3, #2]
 80087b6:	2200      	movs	r2, #0
 80087b8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f042 0202 	orr.w	r2, r2, #2
 80087c2:	711a      	strb	r2, [r3, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	715a      	strb	r2, [r3, #5]
 80087c8:	2200      	movs	r2, #0
 80087ca:	719a      	strb	r2, [r3, #6]
 80087cc:	2200      	movs	r2, #0
 80087ce:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aCode;
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80087dc:	f7f8 ff2c 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80087e0:	f7f8 feee 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80087e4:	60f8      	str	r0, [r7, #12]
}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <otCoapMessageGetTokenLength>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t)p_ot_req->Data[0];
}

uint8_t otCoapMessageGetTokenLength(const otMessage *aMessage)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80087f6:	f7f8 ff51 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80087fa:	f7f8 fed5 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 80087fe:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN_LENGTH;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f062 0213 	orn	r2, r2, #19
 8008808:	701a      	strb	r2, [r3, #0]
 800880a:	2200      	movs	r2, #0
 800880c:	705a      	strb	r2, [r3, #1]
 800880e:	2200      	movs	r2, #0
 8008810:	709a      	strb	r2, [r3, #2]
 8008812:	2200      	movs	r2, #0
 8008814:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f042 0201 	orr.w	r2, r2, #1
 800881e:	711a      	strb	r2, [r3, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	715a      	strb	r2, [r3, #5]
 8008824:	2200      	movs	r2, #0
 8008826:	719a      	strb	r2, [r3, #6]
 8008828:	2200      	movs	r2, #0
 800882a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008832:	f7f8 ff01 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008836:	f7f8 fec3 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800883a:	60f8      	str	r0, [r7, #12]
  return (uint8_t)p_ot_req->Data[0];
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	b2db      	uxtb	r3, r3
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <otCoapMessageGetToken>:

const uint8_t *otCoapMessageGetToken(const otMessage *aMessage)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008852:	f7f8 ff23 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008856:	f7f8 fea7 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 800885a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f062 0212 	orn	r2, r2, #18
 8008864:	701a      	strb	r2, [r3, #0]
 8008866:	2200      	movs	r2, #0
 8008868:	705a      	strb	r2, [r3, #1]
 800886a:	2200      	movs	r2, #0
 800886c:	709a      	strb	r2, [r3, #2]
 800886e:	2200      	movs	r2, #0
 8008870:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f042 0201 	orr.w	r2, r2, #1
 800887a:	711a      	strb	r2, [r3, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	715a      	strb	r2, [r3, #5]
 8008880:	2200      	movs	r2, #0
 8008882:	719a      	strb	r2, [r3, #6]
 8008884:	2200      	movs	r2, #0
 8008886:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800888e:	f7f8 fed3 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008892:	f7f8 fe95 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008896:	60f8      	str	r0, [r7, #12]
  return (uint8_t *)p_ot_req->Data[0];
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	689b      	ldr	r3, [r3, #8]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <otCoapSendRequestWithParameters>:
                                        otMessage *               aMessage,
                                        const otMessageInfo *     aMessageInfo,
                                        otCoapResponseHandler     aHandler,
                                        void *                    aContext,
                                        const otCoapTxParameters *aTxParameters)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 80088b2:	f7f8 fef3 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80088b6:	f7f8 fe77 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 80088ba:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST_WITH_PARAMETERS;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	2200      	movs	r2, #0
 80088c0:	f062 0209 	orn	r2, r2, #9
 80088c4:	701a      	strb	r2, [r3, #0]
 80088c6:	2200      	movs	r2, #0
 80088c8:	705a      	strb	r2, [r3, #1]
 80088ca:	2200      	movs	r2, #0
 80088cc:	709a      	strb	r2, [r3, #2]
 80088ce:	2200      	movs	r2, #0
 80088d0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=5;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f042 0205 	orr.w	r2, r2, #5
 80088da:	711a      	strb	r2, [r3, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	715a      	strb	r2, [r3, #5]
 80088e0:	2200      	movs	r2, #0
 80088e2:	719a      	strb	r2, [r3, #6]
 80088e4:	2200      	movs	r2, #0
 80088e6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aHandler;
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aContext;
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	615a      	str	r2, [r3, #20]
  p_ot_req->Data[4] = (uint32_t) aTxParameters;
 8008900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	619a      	str	r2, [r3, #24]

  Ot_Cmd_Transfer();
 8008906:	f7f8 fe97 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800890a:	f7f8 fe59 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800890e:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	b2db      	uxtb	r3, r3
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800892a:	f7f8 feb7 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800892e:	f7f8 fe3b 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008932:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f062 0207 	orn	r2, r2, #7
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	2200      	movs	r2, #0
 8008940:	705a      	strb	r2, [r3, #1]
 8008942:	2200      	movs	r2, #0
 8008944:	709a      	strb	r2, [r3, #2]
 8008946:	2200      	movs	r2, #0
 8008948:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f042 0201 	orr.w	r2, r2, #1
 8008952:	711a      	strb	r2, [r3, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	715a      	strb	r2, [r3, #5]
 8008958:	2200      	movs	r2, #0
 800895a:	719a      	strb	r2, [r3, #6]
 800895c:	2200      	movs	r2, #0
 800895e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 8008960:	887a      	ldrh	r2, [r7, #2]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008966:	f7f8 fe67 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800896a:	f7f8 fe29 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800896e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	b2db      	uxtb	r3, r3
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008988:	f7f8 fe88 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800898c:	f7f8 fe0c 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008990:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	f062 0203 	orn	r2, r2, #3
 800899a:	701a      	strb	r2, [r3, #0]
 800899c:	2200      	movs	r2, #0
 800899e:	705a      	strb	r2, [r3, #1]
 80089a0:	2200      	movs	r2, #0
 80089a2:	709a      	strb	r2, [r3, #2]
 80089a4:	2200      	movs	r2, #0
 80089a6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f042 0201 	orr.w	r2, r2, #1
 80089b0:	711a      	strb	r2, [r3, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	715a      	strb	r2, [r3, #5]
 80089b6:	2200      	movs	r2, #0
 80089b8:	719a      	strb	r2, [r3, #6]
 80089ba:	2200      	movs	r2, #0
 80089bc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80089c4:	f7f8 fe38 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80089c8:	f7f8 fdfa 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80089cc:	60f8      	str	r0, [r7, #12]
}
 80089ce:	bf00      	nop
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b086      	sub	sp, #24
 80089da:	af00      	add	r7, sp, #0
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	607a      	str	r2, [r7, #4]
 80089e2:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 80089e4:	f7f8 fe5a 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80089e8:	f7f8 fdde 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 80089ec:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f042 0201 	orr.w	r2, r2, #1
 80089fa:	705a      	strb	r2, [r3, #1]
 80089fc:	2200      	movs	r2, #0
 80089fe:	709a      	strb	r2, [r3, #2]
 8008a00:	2200      	movs	r2, #0
 8008a02:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f042 0203 	orr.w	r2, r2, #3
 8008a0c:	711a      	strb	r2, [r3, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	715a      	strb	r2, [r3, #5]
 8008a12:	2200      	movs	r2, #0
 8008a14:	719a      	strb	r2, [r3, #6]
 8008a16:	2200      	movs	r2, #0
 8008a18:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8008a2c:	f7f8 fe04 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008a30:	f7f8 fdc6 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008a34:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	b2db      	uxtb	r3, r3
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <otDatasetSetActive>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otDatasetSetActive(otInstance *aInstance, const otOperationalDataset *aDataset)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008a4e:	f7f8 fe25 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008a52:	f7f8 fda9 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008a56:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_DATASET_SET_ACTIVE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8008a60:	701a      	strb	r2, [r3, #0]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f042 0201 	orr.w	r2, r2, #1
 8008a68:	705a      	strb	r2, [r3, #1]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	709a      	strb	r2, [r3, #2]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f042 0201 	orr.w	r2, r2, #1
 8008a7a:	711a      	strb	r2, [r3, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	715a      	strb	r2, [r3, #5]
 8008a80:	2200      	movs	r2, #0
 8008a82:	719a      	strb	r2, [r3, #6]
 8008a84:	2200      	movs	r2, #0
 8008a86:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aDataset;
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008a8e:	f7f8 fdd3 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008a92:	f7f8 fd95 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008a96:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	b2db      	uxtb	r3, r3
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b082      	sub	sp, #8
 8008aaa:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 8008aac:	f7f8 fdf6 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008ab0:	f7f8 fd7a 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008ab4:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f062 0235 	orn	r2, r2, #53	; 0x35
 8008abe:	701a      	strb	r2, [r3, #0]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	705a      	strb	r2, [r3, #1]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	709a      	strb	r2, [r3, #2]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	711a      	strb	r2, [r3, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	715a      	strb	r2, [r3, #5]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	719a      	strb	r2, [r3, #6]
 8008ada:	2200      	movs	r2, #0
 8008adc:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8008ade:	f7f8 fdab 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008ae2:	f7f8 fd6d 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008ae6:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8008b00:	f7f8 fdcc 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008b04:	f7f8 fd50 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008b08:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	2200      	movs	r2, #0
 8008b16:	705a      	strb	r2, [r3, #1]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	709a      	strb	r2, [r3, #2]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f042 0201 	orr.w	r2, r2, #1
 8008b28:	711a      	strb	r2, [r3, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	715a      	strb	r2, [r3, #5]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	719a      	strb	r2, [r3, #6]
 8008b32:	2200      	movs	r2, #0
 8008b34:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8008b36:	78fa      	ldrb	r2, [r7, #3]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008b3c:	f7f8 fd7c 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008b40:	f7f8 fd3e 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008b44:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	b2db      	uxtb	r3, r3
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifAddress *otIp6GetUnicastAddresses(otInstance *aInstance)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008b5c:	f7f8 fd9e 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008b60:	f7f8 fd22 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008b64:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b6e:	701a      	strb	r2, [r3, #0]
 8008b70:	2200      	movs	r2, #0
 8008b72:	705a      	strb	r2, [r3, #1]
 8008b74:	2200      	movs	r2, #0
 8008b76:	709a      	strb	r2, [r3, #2]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	711a      	strb	r2, [r3, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	715a      	strb	r2, [r3, #5]
 8008b86:	2200      	movs	r2, #0
 8008b88:	719a      	strb	r2, [r3, #6]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8008b8e:	f7f8 fd53 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008b92:	f7f8 fd15 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008b96:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689b      	ldr	r3, [r3, #8]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <otLinkGetFactoryAssignedIeeeEui64>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

void otLinkGetFactoryAssignedIeeeEui64(otInstance *aInstance, otExtAddress *aEui64)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008bae:	f7f8 fd75 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008bb2:	f7f8 fcf9 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008bb6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_GET_FACTORY_ASSIGNED_EUI64;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f042 020c 	orr.w	r2, r2, #12
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	705a      	strb	r2, [r3, #1]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	709a      	strb	r2, [r3, #2]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	711a      	strb	r2, [r3, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	715a      	strb	r2, [r3, #5]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	719a      	strb	r2, [r3, #6]
 8008be0:	2200      	movs	r2, #0
 8008be2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEui64;
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008bea:	f7f8 fd25 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008bee:	f7f8 fce7 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008bf2:	60f8      	str	r0, [r7, #12]
}
 8008bf4:	bf00      	nop
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008c06:	f7f8 fd49 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008c0a:	f7f8 fccd 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008c0e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f042 0210 	orr.w	r2, r2, #16
 8008c18:	701a      	strb	r2, [r3, #0]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	705a      	strb	r2, [r3, #1]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	709a      	strb	r2, [r3, #2]
 8008c22:	2200      	movs	r2, #0
 8008c24:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f042 0201 	orr.w	r2, r2, #1
 8008c2e:	711a      	strb	r2, [r3, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	715a      	strb	r2, [r3, #5]
 8008c34:	2200      	movs	r2, #0
 8008c36:	719a      	strb	r2, [r3, #6]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008c42:	f7f8 fcf9 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008c46:	f7f8 fcbb 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008c4a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	b2db      	uxtb	r3, r3
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008c62:	f7f8 fd1b 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008c66:	f7f8 fc9f 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008c6a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f042 0216 	orr.w	r2, r2, #22
 8008c74:	701a      	strb	r2, [r3, #0]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f042 0201 	orr.w	r2, r2, #1
 8008c7c:	705a      	strb	r2, [r3, #1]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	709a      	strb	r2, [r3, #2]
 8008c82:	2200      	movs	r2, #0
 8008c84:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f042 0201 	orr.w	r2, r2, #1
 8008c8e:	711a      	strb	r2, [r3, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	715a      	strb	r2, [r3, #5]
 8008c94:	2200      	movs	r2, #0
 8008c96:	719a      	strb	r2, [r3, #6]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008ca2:	f7f8 fcc9 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008ca6:	f7f8 fc8b 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008caa:	60f8      	str	r0, [r7, #12]
}
 8008cac:	bf00      	nop
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008cbc:	f7f8 fcee 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008cc0:	f7f8 fc72 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008cc4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f042 0219 	orr.w	r2, r2, #25
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f042 0201 	orr.w	r2, r2, #1
 8008cd6:	705a      	strb	r2, [r3, #1]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	709a      	strb	r2, [r3, #2]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f042 0201 	orr.w	r2, r2, #1
 8008ce8:	711a      	strb	r2, [r3, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	715a      	strb	r2, [r3, #5]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	719a      	strb	r2, [r3, #6]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008cfc:	f7f8 fc9c 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008d00:	f7f8 fc5e 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008d04:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	b29b      	uxth	r3, r3
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <otMessageAppend>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	80fb      	strh	r3, [r7, #6]
  Pre_OtCmdProcessing();
 8008d22:	f7f8 fcbb 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008d26:	f7f8 fc3f 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008d2a:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f042 021e 	orr.w	r2, r2, #30
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f042 0201 	orr.w	r2, r2, #1
 8008d3c:	705a      	strb	r2, [r3, #1]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	709a      	strb	r2, [r3, #2]
 8008d42:	2200      	movs	r2, #0
 8008d44:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f042 0203 	orr.w	r2, r2, #3
 8008d4e:	711a      	strb	r2, [r3, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	715a      	strb	r2, [r3, #5]
 8008d54:	2200      	movs	r2, #0
 8008d56:	719a      	strb	r2, [r3, #6]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aBuf;
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aLength;
 8008d68:	88fa      	ldrh	r2, [r7, #6]
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8008d6e:	f7f8 fc63 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008d72:	f7f8 fc25 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008d76:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	b2db      	uxtb	r3, r3
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b086      	sub	sp, #24
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	461a      	mov	r2, r3
 8008d92:	460b      	mov	r3, r1
 8008d94:	817b      	strh	r3, [r7, #10]
 8008d96:	4613      	mov	r3, r2
 8008d98:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 8008d9a:	f7f8 fc7f 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008d9e:	f7f8 fc03 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8008da2:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f042 021f 	orr.w	r2, r2, #31
 8008dac:	701a      	strb	r2, [r3, #0]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f042 0201 	orr.w	r2, r2, #1
 8008db4:	705a      	strb	r2, [r3, #1]
 8008db6:	2200      	movs	r2, #0
 8008db8:	709a      	strb	r2, [r3, #2]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f042 0204 	orr.w	r2, r2, #4
 8008dc6:	711a      	strb	r2, [r3, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	715a      	strb	r2, [r3, #5]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	719a      	strb	r2, [r3, #6]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 8008dda:	897a      	ldrh	r2, [r7, #10]
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 8008de6:	893a      	ldrh	r2, [r7, #8]
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8008dec:	f7f8 fc24 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008df0:	f7f8 fbe6 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008df4:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	b29b      	uxth	r3, r3
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3718      	adds	r7, #24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8008e04:	b5b0      	push	{r4, r5, r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8008e0e:	f7f8 fbe3 	bl	80015d8 <THREAD_Get_NotificationPayloadBuffer>
 8008e12:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	2b40      	cmp	r3, #64	; 0x40
 8008e1c:	f200 8410 	bhi.w	8009640 <OpenThread_CallBack_Processing+0x83c>
 8008e20:	a201      	add	r2, pc, #4	; (adr r2, 8008e28 <OpenThread_CallBack_Processing+0x24>)
 8008e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e26:	bf00      	nop
 8008e28:	08009137 	.word	0x08009137
 8008e2c:	080091d1 	.word	0x080091d1
 8008e30:	08009229 	.word	0x08009229
 8008e34:	080092d5 	.word	0x080092d5
 8008e38:	080092e1 	.word	0x080092e1
 8008e3c:	080092ff 	.word	0x080092ff
 8008e40:	08009641 	.word	0x08009641
 8008e44:	08009329 	.word	0x08009329
 8008e48:	08009343 	.word	0x08009343
 8008e4c:	08009377 	.word	0x08009377
 8008e50:	08009395 	.word	0x08009395
 8008e54:	080093b3 	.word	0x080093b3
 8008e58:	08009641 	.word	0x08009641
 8008e5c:	08009641 	.word	0x08009641
 8008e60:	080093dd 	.word	0x080093dd
 8008e64:	08009403 	.word	0x08009403
 8008e68:	08009465 	.word	0x08009465
 8008e6c:	08009483 	.word	0x08009483
 8008e70:	08009641 	.word	0x08009641
 8008e74:	080094ab 	.word	0x080094ab
 8008e78:	080094d3 	.word	0x080094d3
 8008e7c:	08009171 	.word	0x08009171
 8008e80:	080094f1 	.word	0x080094f1
 8008e84:	08009515 	.word	0x08009515
 8008e88:	0800953f 	.word	0x0800953f
 8008e8c:	08008f93 	.word	0x08008f93
 8008e90:	08008fb5 	.word	0x08008fb5
 8008e94:	08008fd7 	.word	0x08008fd7
 8008e98:	08008fff 	.word	0x08008fff
 8008e9c:	08009641 	.word	0x08009641
 8008ea0:	0800955f 	.word	0x0800955f
 8008ea4:	08009641 	.word	0x08009641
 8008ea8:	08009641 	.word	0x08009641
 8008eac:	08009641 	.word	0x08009641
 8008eb0:	08009641 	.word	0x08009641
 8008eb4:	08009641 	.word	0x08009641
 8008eb8:	08009207 	.word	0x08009207
 8008ebc:	08009267 	.word	0x08009267
 8008ec0:	0800928d 	.word	0x0800928d
 8008ec4:	080092b3 	.word	0x080092b3
 8008ec8:	08009581 	.word	0x08009581
 8008ecc:	080095bf 	.word	0x080095bf
 8008ed0:	080095d7 	.word	0x080095d7
 8008ed4:	08009153 	.word	0x08009153
 8008ed8:	08009641 	.word	0x08009641
 8008edc:	08009027 	.word	0x08009027
 8008ee0:	08009045 	.word	0x08009045
 8008ee4:	08009063 	.word	0x08009063
 8008ee8:	08009081 	.word	0x08009081
 8008eec:	080090a3 	.word	0x080090a3
 8008ef0:	080090c5 	.word	0x080090c5
 8008ef4:	08009641 	.word	0x08009641
 8008ef8:	08009641 	.word	0x08009641
 8008efc:	08008f2d 	.word	0x08008f2d
 8008f00:	08008f4f 	.word	0x08008f4f
 8008f04:	08008f71 	.word	0x08008f71
 8008f08:	08009641 	.word	0x08009641
 8008f0c:	08009641 	.word	0x08009641
 8008f10:	080090e7 	.word	0x080090e7
 8008f14:	08009105 	.word	0x08009105
 8008f18:	08009641 	.word	0x08009641
 8008f1c:	08009641 	.word	0x08009641
 8008f20:	08009641 	.word	0x08009641
 8008f24:	08009605 	.word	0x08009605
 8008f28:	08009623 	.word	0x08009623
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 8008f2c:	4b96      	ldr	r3, [pc, #600]	; (8009188 <OpenThread_CallBack_Processing+0x384>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 8388 	beq.w	8009646 <OpenThread_CallBack_Processing+0x842>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008f36:	4b94      	ldr	r3, [pc, #592]	; (8009188 <OpenThread_CallBack_Processing+0x384>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	6892      	ldr	r2, [r2, #8]
 8008f3e:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008f44:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008f4a:	4798      	blx	r3
    }
    break;
 8008f4c:	e37b      	b.n	8009646 <OpenThread_CallBack_Processing+0x842>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 8008f4e:	4b8f      	ldr	r3, [pc, #572]	; (800918c <OpenThread_CallBack_Processing+0x388>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 8379 	beq.w	800964a <OpenThread_CallBack_Processing+0x846>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008f58:	4b8c      	ldr	r3, [pc, #560]	; (800918c <OpenThread_CallBack_Processing+0x388>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	6892      	ldr	r2, [r2, #8]
 8008f60:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008f66:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008f6c:	4798      	blx	r3
    }
    break;
 8008f6e:	e36c      	b.n	800964a <OpenThread_CallBack_Processing+0x846>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 8008f70:	4b87      	ldr	r3, [pc, #540]	; (8009190 <OpenThread_CallBack_Processing+0x38c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 836a 	beq.w	800964e <OpenThread_CallBack_Processing+0x84a>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008f7a:	4b85      	ldr	r3, [pc, #532]	; (8009190 <OpenThread_CallBack_Processing+0x38c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	6892      	ldr	r2, [r2, #8]
 8008f82:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008f88:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008f8e:	4798      	blx	r3
    }
    break;
 8008f90:	e35d      	b.n	800964e <OpenThread_CallBack_Processing+0x84a>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 8008f92:	4b80      	ldr	r3, [pc, #512]	; (8009194 <OpenThread_CallBack_Processing+0x390>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 835b 	beq.w	8009652 <OpenThread_CallBack_Processing+0x84e>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008f9c:	4b7d      	ldr	r3, [pc, #500]	; (8009194 <OpenThread_CallBack_Processing+0x390>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	6892      	ldr	r2, [r2, #8]
 8008fa4:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008faa:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008fb0:	4798      	blx	r3
    }
    break;
 8008fb2:	e34e      	b.n	8009652 <OpenThread_CallBack_Processing+0x84e>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 8008fb4:	4b78      	ldr	r3, [pc, #480]	; (8009198 <OpenThread_CallBack_Processing+0x394>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 834c 	beq.w	8009656 <OpenThread_CallBack_Processing+0x852>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008fbe:	4b76      	ldr	r3, [pc, #472]	; (8009198 <OpenThread_CallBack_Processing+0x394>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	6892      	ldr	r2, [r2, #8]
 8008fc6:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008fcc:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008fd2:	4798      	blx	r3
    }
    break;
 8008fd4:	e33f      	b.n	8009656 <OpenThread_CallBack_Processing+0x852>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 8008fd6:	4b71      	ldr	r3, [pc, #452]	; (800919c <OpenThread_CallBack_Processing+0x398>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 833d 	beq.w	800965a <OpenThread_CallBack_Processing+0x856>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008fe0:	4b6e      	ldr	r3, [pc, #440]	; (800919c <OpenThread_CallBack_Processing+0x398>)
 8008fe2:	681c      	ldr	r4, [r3, #0]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008fee:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008ff4:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008ffa:	47a0      	blx	r4
    }
    break;
 8008ffc:	e32d      	b.n	800965a <OpenThread_CallBack_Processing+0x856>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 8008ffe:	4b68      	ldr	r3, [pc, #416]	; (80091a0 <OpenThread_CallBack_Processing+0x39c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 832b 	beq.w	800965e <OpenThread_CallBack_Processing+0x85a>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8009008:	4b65      	ldr	r3, [pc, #404]	; (80091a0 <OpenThread_CallBack_Processing+0x39c>)
 800900a:	681c      	ldr	r4, [r3, #0]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8009016:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800901c:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8009022:	47a0      	blx	r4
    }
    break;
 8009024:	e31b      	b.n	800965e <OpenThread_CallBack_Processing+0x85a>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 8009026:	4b5f      	ldr	r3, [pc, #380]	; (80091a4 <OpenThread_CallBack_Processing+0x3a0>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 8319 	beq.w	8009662 <OpenThread_CallBack_Processing+0x85e>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8009030:	4b5c      	ldr	r3, [pc, #368]	; (80091a4 <OpenThread_CallBack_Processing+0x3a0>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	6892      	ldr	r2, [r2, #8]
 8009038:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800903e:	4611      	mov	r1, r2
 8009040:	4798      	blx	r3
    }
    break;
 8009042:	e30e      	b.n	8009662 <OpenThread_CallBack_Processing+0x85e>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 8009044:	4b58      	ldr	r3, [pc, #352]	; (80091a8 <OpenThread_CallBack_Processing+0x3a4>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 830c 	beq.w	8009666 <OpenThread_CallBack_Processing+0x862>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800904e:	4b56      	ldr	r3, [pc, #344]	; (80091a8 <OpenThread_CallBack_Processing+0x3a4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	6892      	ldr	r2, [r2, #8]
 8009056:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800905c:	4611      	mov	r1, r2
 800905e:	4798      	blx	r3
    }
    break;
 8009060:	e301      	b.n	8009666 <OpenThread_CallBack_Processing+0x862>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 8009062:	4b52      	ldr	r3, [pc, #328]	; (80091ac <OpenThread_CallBack_Processing+0x3a8>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 82ff 	beq.w	800966a <OpenThread_CallBack_Processing+0x866>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800906c:	4b4f      	ldr	r3, [pc, #316]	; (80091ac <OpenThread_CallBack_Processing+0x3a8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	6892      	ldr	r2, [r2, #8]
 8009074:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800907a:	4611      	mov	r1, r2
 800907c:	4798      	blx	r3
    }
    break;
 800907e:	e2f4      	b.n	800966a <OpenThread_CallBack_Processing+0x866>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 8009080:	4b4b      	ldr	r3, [pc, #300]	; (80091b0 <OpenThread_CallBack_Processing+0x3ac>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 82f2 	beq.w	800966e <OpenThread_CallBack_Processing+0x86a>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 800908a:	4b49      	ldr	r3, [pc, #292]	; (80091b0 <OpenThread_CallBack_Processing+0x3ac>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	6892      	ldr	r2, [r2, #8]
 8009092:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 8009098:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800909e:	4798      	blx	r3
    }
    break;
 80090a0:	e2e5      	b.n	800966e <OpenThread_CallBack_Processing+0x86a>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 80090a2:	4b44      	ldr	r3, [pc, #272]	; (80091b4 <OpenThread_CallBack_Processing+0x3b0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 82e3 	beq.w	8009672 <OpenThread_CallBack_Processing+0x86e>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 80090ac:	4b41      	ldr	r3, [pc, #260]	; (80091b4 <OpenThread_CallBack_Processing+0x3b0>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	6892      	ldr	r2, [r2, #8]
 80090b4:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 80090ba:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 80090c0:	4798      	blx	r3
    }
    break;
 80090c2:	e2d6      	b.n	8009672 <OpenThread_CallBack_Processing+0x86e>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 80090c4:	4b3b      	ldr	r3, [pc, #236]	; (80091b4 <OpenThread_CallBack_Processing+0x3b0>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 82d4 	beq.w	8009676 <OpenThread_CallBack_Processing+0x872>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 80090ce:	4b3a      	ldr	r3, [pc, #232]	; (80091b8 <OpenThread_CallBack_Processing+0x3b4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	6892      	ldr	r2, [r2, #8]
 80090d6:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 80090dc:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 80090e2:	4798      	blx	r3
    }
    break;
 80090e4:	e2c7      	b.n	8009676 <OpenThread_CallBack_Processing+0x872>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 80090e6:	4b35      	ldr	r3, [pc, #212]	; (80091bc <OpenThread_CallBack_Processing+0x3b8>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 82c5 	beq.w	800967a <OpenThread_CallBack_Processing+0x876>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 80090f0:	4b32      	ldr	r3, [pc, #200]	; (80091bc <OpenThread_CallBack_Processing+0x3b8>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	683a      	ldr	r2, [r7, #0]
 80090f6:	6892      	ldr	r2, [r2, #8]
 80090f8:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 80090fe:	4611      	mov	r1, r2
 8009100:	4798      	blx	r3
    }
    break;
 8009102:	e2ba      	b.n	800967a <OpenThread_CallBack_Processing+0x876>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 8009104:	4b2e      	ldr	r3, [pc, #184]	; (80091c0 <OpenThread_CallBack_Processing+0x3bc>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 82b8 	beq.w	800967e <OpenThread_CallBack_Processing+0x87a>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 800910e:	4b2c      	ldr	r3, [pc, #176]	; (80091c0 <OpenThread_CallBack_Processing+0x3bc>)
 8009110:	681c      	ldr	r4, [r3, #0]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 800911c:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 8009122:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 8009128:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	462b      	mov	r3, r5
 8009132:	47a0      	blx	r4
    }
    break;
 8009134:	e2a3      	b.n	800967e <OpenThread_CallBack_Processing+0x87a>
          (void *) p_notification->Data[3]);
    }
    break;
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 8009136:	4b23      	ldr	r3, [pc, #140]	; (80091c4 <OpenThread_CallBack_Processing+0x3c0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 82a1 	beq.w	8009682 <OpenThread_CallBack_Processing+0x87e>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8009140:	4b20      	ldr	r3, [pc, #128]	; (80091c4 <OpenThread_CallBack_Processing+0x3c0>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800914c:	4611      	mov	r1, r2
 800914e:	4798      	blx	r3
    }
    break;
 8009150:	e297      	b.n	8009682 <OpenThread_CallBack_Processing+0x87e>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 8009152:	4b1d      	ldr	r3, [pc, #116]	; (80091c8 <OpenThread_CallBack_Processing+0x3c4>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 8295 	beq.w	8009686 <OpenThread_CallBack_Processing+0x882>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800915c:	4b1a      	ldr	r3, [pc, #104]	; (80091c8 <OpenThread_CallBack_Processing+0x3c4>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	6892      	ldr	r2, [r2, #8]
 8009164:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800916a:	4611      	mov	r1, r2
 800916c:	4798      	blx	r3
    }
    break;
 800916e:	e28a      	b.n	8009686 <OpenThread_CallBack_Processing+0x882>
  case MSG_M0TOM4_DETACH_GRACEFULLY_CALLBACK:
    if (otDetachGracefullyCb != NULL)
 8009170:	4b16      	ldr	r3, [pc, #88]	; (80091cc <OpenThread_CallBack_Processing+0x3c8>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 8288 	beq.w	800968a <OpenThread_CallBack_Processing+0x886>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 800917a:	4b14      	ldr	r3, [pc, #80]	; (80091cc <OpenThread_CallBack_Processing+0x3c8>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	6892      	ldr	r2, [r2, #8]
 8009182:	4610      	mov	r0, r2
 8009184:	4798      	blx	r3
    }
    break;
 8009186:	e280      	b.n	800968a <OpenThread_CallBack_Processing+0x886>
 8009188:	20000654 	.word	0x20000654
 800918c:	2000065c 	.word	0x2000065c
 8009190:	20000658 	.word	0x20000658
 8009194:	200005f0 	.word	0x200005f0
 8009198:	200005ec 	.word	0x200005ec
 800919c:	200005f4 	.word	0x200005f4
 80091a0:	200005e8 	.word	0x200005e8
 80091a4:	20000660 	.word	0x20000660
 80091a8:	20000664 	.word	0x20000664
 80091ac:	20000668 	.word	0x20000668
 80091b0:	20000670 	.word	0x20000670
 80091b4:	2000066c 	.word	0x2000066c
 80091b8:	20000674 	.word	0x20000674
 80091bc:	2000067c 	.word	0x2000067c
 80091c0:	20000678 	.word	0x20000678
 80091c4:	200005c8 	.word	0x200005c8
 80091c8:	200005f8 	.word	0x200005f8
 80091cc:	200005fc 	.word	0x200005fc
          (void *) p_notification->Data[1]);
    }
    break;
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	461a      	mov	r2, r3
 80091d6:	4b93      	ldr	r3, [pc, #588]	; (8009424 <OpenThread_CallBack_Processing+0x620>)
 80091d8:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 80091da:	4b92      	ldr	r3, [pc, #584]	; (8009424 <OpenThread_CallBack_Processing+0x620>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	4a91      	ldr	r2, [pc, #580]	; (8009428 <OpenThread_CallBack_Processing+0x624>)
 80091e2:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 80091e4:	4b90      	ldr	r3, [pc, #576]	; (8009428 <OpenThread_CallBack_Processing+0x624>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8250 	beq.w	800968e <OpenThread_CallBack_Processing+0x88a>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 80091ee:	4b8e      	ldr	r3, [pc, #568]	; (8009428 <OpenThread_CallBack_Processing+0x624>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a8c      	ldr	r2, [pc, #560]	; (8009424 <OpenThread_CallBack_Processing+0x620>)
 80091f4:	6812      	ldr	r2, [r2, #0]
 80091f6:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 80091fc:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8009202:	4798      	blx	r3
    }
    break;
 8009204:	e243      	b.n	800968e <OpenThread_CallBack_Processing+0x88a>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 8009206:	4b89      	ldr	r3, [pc, #548]	; (800942c <OpenThread_CallBack_Processing+0x628>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 8241 	beq.w	8009692 <OpenThread_CallBack_Processing+0x88e>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009210:	4b86      	ldr	r3, [pc, #536]	; (800942c <OpenThread_CallBack_Processing+0x628>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	6892      	ldr	r2, [r2, #8]
 8009218:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800921e:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009224:	4798      	blx	r3
    }
    break;
 8009226:	e234      	b.n	8009692 <OpenThread_CallBack_Processing+0x88e>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	461a      	mov	r2, r3
 800922e:	4b80      	ldr	r3, [pc, #512]	; (8009430 <OpenThread_CallBack_Processing+0x62c>)
 8009230:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 8009232:	4b7f      	ldr	r3, [pc, #508]	; (8009430 <OpenThread_CallBack_Processing+0x62c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	4a7e      	ldr	r2, [pc, #504]	; (8009434 <OpenThread_CallBack_Processing+0x630>)
 800923a:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 800923c:	4b7d      	ldr	r3, [pc, #500]	; (8009434 <OpenThread_CallBack_Processing+0x630>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 8228 	beq.w	8009696 <OpenThread_CallBack_Processing+0x892>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009246:	4b7b      	ldr	r3, [pc, #492]	; (8009434 <OpenThread_CallBack_Processing+0x630>)
 8009248:	681c      	ldr	r4, [r3, #0]
 800924a:	4b79      	ldr	r3, [pc, #484]	; (8009430 <OpenThread_CallBack_Processing+0x62c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009254:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800925a:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009260:	b2db      	uxtb	r3, r3
 8009262:	47a0      	blx	r4
    }
    break;
 8009264:	e217      	b.n	8009696 <OpenThread_CallBack_Processing+0x892>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 8009266:	4b74      	ldr	r3, [pc, #464]	; (8009438 <OpenThread_CallBack_Processing+0x634>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 8215 	beq.w	800969a <OpenThread_CallBack_Processing+0x896>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8009270:	4b71      	ldr	r3, [pc, #452]	; (8009438 <OpenThread_CallBack_Processing+0x634>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	6892      	ldr	r2, [r2, #8]
 8009278:	2a00      	cmp	r2, #0
 800927a:	bf14      	ite	ne
 800927c:	2201      	movne	r2, #1
 800927e:	2200      	moveq	r2, #0
 8009280:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8009286:	4611      	mov	r1, r2
 8009288:	4798      	blx	r3
    }
    break;
 800928a:	e206      	b.n	800969a <OpenThread_CallBack_Processing+0x896>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800928c:	4b6a      	ldr	r3, [pc, #424]	; (8009438 <OpenThread_CallBack_Processing+0x634>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 8204 	beq.w	800969e <OpenThread_CallBack_Processing+0x89a>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8009296:	4b68      	ldr	r3, [pc, #416]	; (8009438 <OpenThread_CallBack_Processing+0x634>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	6892      	ldr	r2, [r2, #8]
 800929e:	2a00      	cmp	r2, #0
 80092a0:	bf14      	ite	ne
 80092a2:	2201      	movne	r2, #1
 80092a4:	2200      	moveq	r2, #0
 80092a6:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 80092ac:	4611      	mov	r1, r2
 80092ae:	4798      	blx	r3
    }
    break;
 80092b0:	e1f5      	b.n	800969e <OpenThread_CallBack_Processing+0x89a>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 80092b2:	4b62      	ldr	r3, [pc, #392]	; (800943c <OpenThread_CallBack_Processing+0x638>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 81f3 	beq.w	80096a2 <OpenThread_CallBack_Processing+0x89e>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 80092bc:	4b5f      	ldr	r3, [pc, #380]	; (800943c <OpenThread_CallBack_Processing+0x638>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	6892      	ldr	r2, [r2, #8]
 80092c4:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 80092ca:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 80092d0:	4798      	blx	r3
    }
    break;
 80092d2:	e1e6      	b.n	80096a2 <OpenThread_CallBack_Processing+0x89e>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 80092d4:	2001      	movs	r0, #1
 80092d6:	f000 fa7b 	bl	80097d0 <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 80092da:	f7fb f86a 	bl	80043b2 <HAL_NVIC_SystemReset>
    break;
 80092de:	e22a      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 80092e0:	4b57      	ldr	r3, [pc, #348]	; (8009440 <OpenThread_CallBack_Processing+0x63c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 81de 	beq.w	80096a6 <OpenThread_CallBack_Processing+0x8a2>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80092ea:	4b55      	ldr	r3, [pc, #340]	; (8009440 <OpenThread_CallBack_Processing+0x63c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	6892      	ldr	r2, [r2, #8]
 80092f2:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80092f8:	4611      	mov	r1, r2
 80092fa:	4798      	blx	r3
    }
    break;
 80092fc:	e1d3      	b.n	80096a6 <OpenThread_CallBack_Processing+0x8a2>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 80092fe:	4b51      	ldr	r3, [pc, #324]	; (8009444 <OpenThread_CallBack_Processing+0x640>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 81d1 	beq.w	80096aa <OpenThread_CallBack_Processing+0x8a6>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009308:	4b4e      	ldr	r3, [pc, #312]	; (8009444 <OpenThread_CallBack_Processing+0x640>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	6892      	ldr	r2, [r2, #8]
 8009310:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009316:	2a00      	cmp	r2, #0
 8009318:	bf14      	ite	ne
 800931a:	2201      	movne	r2, #1
 800931c:	2200      	moveq	r2, #0
 800931e:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009324:	4798      	blx	r3
    }
    break;
 8009326:	e1c0      	b.n	80096aa <OpenThread_CallBack_Processing+0x8a6>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 8009328:	4b47      	ldr	r3, [pc, #284]	; (8009448 <OpenThread_CallBack_Processing+0x644>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 81be 	beq.w	80096ae <OpenThread_CallBack_Processing+0x8aa>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 8009332:	4b45      	ldr	r3, [pc, #276]	; (8009448 <OpenThread_CallBack_Processing+0x644>)
 8009334:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 800933a:	4611      	mov	r1, r2
 800933c:	2000      	movs	r0, #0
 800933e:	4798      	blx	r3
    }
    break;
 8009340:	e1b5      	b.n	80096ae <OpenThread_CallBack_Processing+0x8aa>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 8009342:	4b42      	ldr	r3, [pc, #264]	; (800944c <OpenThread_CallBack_Processing+0x648>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	f000 81b3 	beq.w	80096b2 <OpenThread_CallBack_Processing+0x8ae>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800934c:	4b3f      	ldr	r3, [pc, #252]	; (800944c <OpenThread_CallBack_Processing+0x648>)
 800934e:	681c      	ldr	r4, [r3, #0]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800935a:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8009360:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8009366:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800936c:	b2db      	uxtb	r3, r3
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	462b      	mov	r3, r5
 8009372:	47a0      	blx	r4
    }
    break;
 8009374:	e19d      	b.n	80096b2 <OpenThread_CallBack_Processing+0x8ae>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 8009376:	4b36      	ldr	r3, [pc, #216]	; (8009450 <OpenThread_CallBack_Processing+0x64c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 819b 	beq.w	80096b6 <OpenThread_CallBack_Processing+0x8b2>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8009380:	4b33      	ldr	r3, [pc, #204]	; (8009450 <OpenThread_CallBack_Processing+0x64c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	6892      	ldr	r2, [r2, #8]
 8009388:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800938e:	4611      	mov	r1, r2
 8009390:	4798      	blx	r3
    }
    break;
 8009392:	e190      	b.n	80096b6 <OpenThread_CallBack_Processing+0x8b2>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 8009394:	4b2f      	ldr	r3, [pc, #188]	; (8009454 <OpenThread_CallBack_Processing+0x650>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 818e 	beq.w	80096ba <OpenThread_CallBack_Processing+0x8b6>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800939e:	4b2d      	ldr	r3, [pc, #180]	; (8009454 <OpenThread_CallBack_Processing+0x650>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	6892      	ldr	r2, [r2, #8]
 80093a6:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80093ac:	4611      	mov	r1, r2
 80093ae:	4798      	blx	r3
    }
    break;
 80093b0:	e183      	b.n	80096ba <OpenThread_CallBack_Processing+0x8b6>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 80093b2:	4b29      	ldr	r3, [pc, #164]	; (8009458 <OpenThread_CallBack_Processing+0x654>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 8181 	beq.w	80096be <OpenThread_CallBack_Processing+0x8ba>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80093bc:	4b26      	ldr	r3, [pc, #152]	; (8009458 <OpenThread_CallBack_Processing+0x654>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	6892      	ldr	r2, [r2, #8]
 80093c4:	4610      	mov	r0, r2
          p_notification->Data[1],
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80093ca:	2a00      	cmp	r2, #0
 80093cc:	bf14      	ite	ne
 80093ce:	2201      	movne	r2, #1
 80093d0:	2200      	moveq	r2, #0
 80093d2:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80093d8:	4798      	blx	r3
    }
    break;
 80093da:	e170      	b.n	80096be <OpenThread_CallBack_Processing+0x8ba>
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
    }
    break;
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 80093dc:	4b1f      	ldr	r3, [pc, #124]	; (800945c <OpenThread_CallBack_Processing+0x658>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 816e 	beq.w	80096c2 <OpenThread_CallBack_Processing+0x8be>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80093e6:	4b1d      	ldr	r3, [pc, #116]	; (800945c <OpenThread_CallBack_Processing+0x658>)
 80093e8:	681c      	ldr	r4, [r3, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80093f2:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80093f8:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80093fe:	47a0      	blx	r4
    }
    break;
 8009400:	e15f      	b.n	80096c2 <OpenThread_CallBack_Processing+0x8be>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 8009402:	4b17      	ldr	r3, [pc, #92]	; (8009460 <OpenThread_CallBack_Processing+0x65c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 815d 	beq.w	80096c6 <OpenThread_CallBack_Processing+0x8c2>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800940c:	4b14      	ldr	r3, [pc, #80]	; (8009460 <OpenThread_CallBack_Processing+0x65c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	6892      	ldr	r2, [r2, #8]
 8009414:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800941e:	4798      	blx	r3
    }
    break;
 8009420:	e151      	b.n	80096c6 <OpenThread_CallBack_Processing+0x8c2>
 8009422:	bf00      	nop
 8009424:	2000063c 	.word	0x2000063c
 8009428:	20000630 	.word	0x20000630
 800942c:	20000634 	.word	0x20000634
 8009430:	20000640 	.word	0x20000640
 8009434:	20000638 	.word	0x20000638
 8009438:	20000648 	.word	0x20000648
 800943c:	20000644 	.word	0x20000644
 8009440:	200005d0 	.word	0x200005d0
 8009444:	200005d4 	.word	0x200005d4
 8009448:	200005cc 	.word	0x200005cc
 800944c:	200005d8 	.word	0x200005d8
 8009450:	200005dc 	.word	0x200005dc
 8009454:	200005e0 	.word	0x200005e0
 8009458:	200005e4 	.word	0x200005e4
 800945c:	20000608 	.word	0x20000608
 8009460:	2000060c 	.word	0x2000060c
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 8009464:	4ba0      	ldr	r3, [pc, #640]	; (80096e8 <OpenThread_CallBack_Processing+0x8e4>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 812e 	beq.w	80096ca <OpenThread_CallBack_Processing+0x8c6>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800946e:	4b9e      	ldr	r3, [pc, #632]	; (80096e8 <OpenThread_CallBack_Processing+0x8e4>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	6892      	ldr	r2, [r2, #8]
 8009476:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800947c:	4611      	mov	r1, r2
 800947e:	4798      	blx	r3
    }
    break;
 8009480:	e123      	b.n	80096ca <OpenThread_CallBack_Processing+0x8c6>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 8009482:	4b9a      	ldr	r3, [pc, #616]	; (80096ec <OpenThread_CallBack_Processing+0x8e8>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 8121 	beq.w	80096ce <OpenThread_CallBack_Processing+0x8ca>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800948c:	4b97      	ldr	r3, [pc, #604]	; (80096ec <OpenThread_CallBack_Processing+0x8e8>)
 800948e:	681c      	ldr	r4, [r3, #0]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800949a:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 80094a0:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 80094a6:	47a0      	blx	r4
    }
    break;
 80094a8:	e111      	b.n	80096ce <OpenThread_CallBack_Processing+0x8ca>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 80094aa:	4b91      	ldr	r3, [pc, #580]	; (80096f0 <OpenThread_CallBack_Processing+0x8ec>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 810f 	beq.w	80096d2 <OpenThread_CallBack_Processing+0x8ce>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80094b4:	4b8e      	ldr	r3, [pc, #568]	; (80096f0 <OpenThread_CallBack_Processing+0x8ec>)
 80094b6:	681c      	ldr	r4, [r3, #0]
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80094c2:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80094c8:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80094ce:	47a0      	blx	r4
    }
    break;
 80094d0:	e0ff      	b.n	80096d2 <OpenThread_CallBack_Processing+0x8ce>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 80094d2:	4b88      	ldr	r3, [pc, #544]	; (80096f4 <OpenThread_CallBack_Processing+0x8f0>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 80fd 	beq.w	80096d6 <OpenThread_CallBack_Processing+0x8d2>
    {
      otJoinerCb((otError) p_notification->Data[0],
 80094dc:	4b85      	ldr	r3, [pc, #532]	; (80096f4 <OpenThread_CallBack_Processing+0x8f0>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	6892      	ldr	r2, [r2, #8]
 80094e4:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 80094ea:	4611      	mov	r1, r2
 80094ec:	4798      	blx	r3
    }
    break;
 80094ee:	e0f2      	b.n	80096d6 <OpenThread_CallBack_Processing+0x8d2>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 80094f0:	4b81      	ldr	r3, [pc, #516]	; (80096f8 <OpenThread_CallBack_Processing+0x8f4>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 80f0 	beq.w	80096da <OpenThread_CallBack_Processing+0x8d6>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80094fa:	4b7f      	ldr	r3, [pc, #508]	; (80096f8 <OpenThread_CallBack_Processing+0x8f4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	6892      	ldr	r2, [r2, #8]
 8009502:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8009508:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	4798      	blx	r3
    }
    break;
 8009512:	e0e2      	b.n	80096da <OpenThread_CallBack_Processing+0x8d6>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 8009514:	4b79      	ldr	r3, [pc, #484]	; (80096fc <OpenThread_CallBack_Processing+0x8f8>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 80e0 	beq.w	80096de <OpenThread_CallBack_Processing+0x8da>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800951e:	4b77      	ldr	r3, [pc, #476]	; (80096fc <OpenThread_CallBack_Processing+0x8f8>)
 8009520:	681c      	ldr	r4, [r3, #0]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800952c:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009532:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009538:	b2db      	uxtb	r3, r3
 800953a:	47a0      	blx	r4
    }
    break;
 800953c:	e0cf      	b.n	80096de <OpenThread_CallBack_Processing+0x8da>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 800953e:	4b70      	ldr	r3, [pc, #448]	; (8009700 <OpenThread_CallBack_Processing+0x8fc>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 80cd 	beq.w	80096e2 <OpenThread_CallBack_Processing+0x8de>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8009548:	4b6d      	ldr	r3, [pc, #436]	; (8009700 <OpenThread_CallBack_Processing+0x8fc>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	6892      	ldr	r2, [r2, #8]
 8009550:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8009556:	b252      	sxtb	r2, r2
 8009558:	4611      	mov	r1, r2
 800955a:	4798      	blx	r3
    }
    break;
 800955c:	e0c1      	b.n	80096e2 <OpenThread_CallBack_Processing+0x8de>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 800955e:	4b69      	ldr	r3, [pc, #420]	; (8009704 <OpenThread_CallBack_Processing+0x900>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 80dc 	beq.w	8009720 <OpenThread_CallBack_Processing+0x91c>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 8009568:	4b66      	ldr	r3, [pc, #408]	; (8009704 <OpenThread_CallBack_Processing+0x900>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	6892      	ldr	r2, [r2, #8]
 8009570:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 8009576:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800957c:	4798      	blx	r3
    }
    break;
 800957e:	e0cf      	b.n	8009720 <OpenThread_CallBack_Processing+0x91c>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	461a      	mov	r2, r3
 8009586:	4b60      	ldr	r3, [pc, #384]	; (8009708 <OpenThread_CallBack_Processing+0x904>)
 8009588:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 800958a:	4b5f      	ldr	r3, [pc, #380]	; (8009708 <OpenThread_CallBack_Processing+0x904>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4a5e      	ldr	r2, [pc, #376]	; (800970c <OpenThread_CallBack_Processing+0x908>)
 8009592:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 8009594:	4b5d      	ldr	r3, [pc, #372]	; (800970c <OpenThread_CallBack_Processing+0x908>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 80c3 	beq.w	8009724 <OpenThread_CallBack_Processing+0x920>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800959e:	4b5b      	ldr	r3, [pc, #364]	; (800970c <OpenThread_CallBack_Processing+0x908>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a59      	ldr	r2, [pc, #356]	; (8009708 <OpenThread_CallBack_Processing+0x904>)
 80095a4:	6812      	ldr	r2, [r2, #0]
 80095a6:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 80095ac:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 80095b2:	4798      	blx	r3
 80095b4:	4603      	mov	r3, r0
 80095b6:	461a      	mov	r2, r3
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	609a      	str	r2, [r3, #8]
      }
      break;
 80095bc:	e0b2      	b.n	8009724 <OpenThread_CallBack_Processing+0x920>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 80095be:	4b54      	ldr	r3, [pc, #336]	; (8009710 <OpenThread_CallBack_Processing+0x90c>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f000 80b0 	beq.w	8009728 <OpenThread_CallBack_Processing+0x924>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 80095c8:	4b51      	ldr	r3, [pc, #324]	; (8009710 <OpenThread_CallBack_Processing+0x90c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	6892      	ldr	r2, [r2, #8]
 80095d0:	4610      	mov	r0, r2
 80095d2:	4798      	blx	r3
    }
    break;
 80095d4:	e0a8      	b.n	8009728 <OpenThread_CallBack_Processing+0x924>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 80095d6:	4b4f      	ldr	r3, [pc, #316]	; (8009714 <OpenThread_CallBack_Processing+0x910>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 80a6 	beq.w	800972c <OpenThread_CallBack_Processing+0x928>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 80095e0:	4b4c      	ldr	r3, [pc, #304]	; (8009714 <OpenThread_CallBack_Processing+0x910>)
 80095e2:	6819      	ldr	r1, [r3, #0]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 80095ee:	2200      	movs	r2, #0
 80095f0:	461c      	mov	r4, r3
 80095f2:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	4622      	mov	r2, r4
 80095fe:	462b      	mov	r3, r5
 8009600:	4788      	blx	r1
    }
    break;
 8009602:	e093      	b.n	800972c <OpenThread_CallBack_Processing+0x928>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 8009604:	4b44      	ldr	r3, [pc, #272]	; (8009718 <OpenThread_CallBack_Processing+0x914>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 8091 	beq.w	8009730 <OpenThread_CallBack_Processing+0x92c>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800960e:	4b42      	ldr	r3, [pc, #264]	; (8009718 <OpenThread_CallBack_Processing+0x914>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	6892      	ldr	r2, [r2, #8]
 8009616:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800961c:	4611      	mov	r1, r2
 800961e:	4798      	blx	r3
    }
    break;
 8009620:	e086      	b.n	8009730 <OpenThread_CallBack_Processing+0x92c>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 8009622:	4b3e      	ldr	r3, [pc, #248]	; (800971c <OpenThread_CallBack_Processing+0x918>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	f000 8084 	beq.w	8009734 <OpenThread_CallBack_Processing+0x930>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800962c:	4b3b      	ldr	r3, [pc, #236]	; (800971c <OpenThread_CallBack_Processing+0x918>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	6892      	ldr	r2, [r2, #8]
 8009634:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800963a:	4611      	mov	r1, r2
 800963c:	4798      	blx	r3
    }
    break;
 800963e:	e079      	b.n	8009734 <OpenThread_CallBack_Processing+0x930>
          (const otSockAddr *) p_notification->Data[2]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	71fb      	strb	r3, [r7, #7]
    break;
 8009644:	e077      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009646:	bf00      	nop
 8009648:	e075      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800964a:	bf00      	nop
 800964c:	e073      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800964e:	bf00      	nop
 8009650:	e071      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009652:	bf00      	nop
 8009654:	e06f      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009656:	bf00      	nop
 8009658:	e06d      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800965a:	bf00      	nop
 800965c:	e06b      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800965e:	bf00      	nop
 8009660:	e069      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009662:	bf00      	nop
 8009664:	e067      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009666:	bf00      	nop
 8009668:	e065      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800966a:	bf00      	nop
 800966c:	e063      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800966e:	bf00      	nop
 8009670:	e061      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009672:	bf00      	nop
 8009674:	e05f      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009676:	bf00      	nop
 8009678:	e05d      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800967a:	bf00      	nop
 800967c:	e05b      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800967e:	bf00      	nop
 8009680:	e059      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009682:	bf00      	nop
 8009684:	e057      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009686:	bf00      	nop
 8009688:	e055      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800968a:	bf00      	nop
 800968c:	e053      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800968e:	bf00      	nop
 8009690:	e051      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009692:	bf00      	nop
 8009694:	e04f      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009696:	bf00      	nop
 8009698:	e04d      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800969a:	bf00      	nop
 800969c:	e04b      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800969e:	bf00      	nop
 80096a0:	e049      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096a2:	bf00      	nop
 80096a4:	e047      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096a6:	bf00      	nop
 80096a8:	e045      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096aa:	bf00      	nop
 80096ac:	e043      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096ae:	bf00      	nop
 80096b0:	e041      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096b2:	bf00      	nop
 80096b4:	e03f      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096b6:	bf00      	nop
 80096b8:	e03d      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096ba:	bf00      	nop
 80096bc:	e03b      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096be:	bf00      	nop
 80096c0:	e039      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096c2:	bf00      	nop
 80096c4:	e037      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096c6:	bf00      	nop
 80096c8:	e035      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096ca:	bf00      	nop
 80096cc:	e033      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096ce:	bf00      	nop
 80096d0:	e031      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096d2:	bf00      	nop
 80096d4:	e02f      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096d6:	bf00      	nop
 80096d8:	e02d      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096da:	bf00      	nop
 80096dc:	e02b      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096de:	bf00      	nop
 80096e0:	e029      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 80096e2:	bf00      	nop
 80096e4:	e027      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
 80096e6:	bf00      	nop
 80096e8:	20000600 	.word	0x20000600
 80096ec:	20000604 	.word	0x20000604
 80096f0:	20000610 	.word	0x20000610
 80096f4:	20000614 	.word	0x20000614
 80096f8:	20000618 	.word	0x20000618
 80096fc:	2000061c 	.word	0x2000061c
 8009700:	20000620 	.word	0x20000620
 8009704:	20000624 	.word	0x20000624
 8009708:	2000062c 	.word	0x2000062c
 800970c:	20000628 	.word	0x20000628
 8009710:	2000064c 	.word	0x2000064c
 8009714:	20000650 	.word	0x20000650
 8009718:	20000680 	.word	0x20000680
 800971c:	20000684 	.word	0x20000684
    break;
 8009720:	bf00      	nop
 8009722:	e008      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
      break;
 8009724:	bf00      	nop
 8009726:	e006      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009728:	bf00      	nop
 800972a:	e004      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 800972c:	bf00      	nop
 800972e:	e002      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009730:	bf00      	nop
 8009732:	e000      	b.n	8009736 <OpenThread_CallBack_Processing+0x932>
    break;
 8009734:	bf00      	nop
  }

  TL_THREAD_SendAck();
 8009736:	f000 fdd5 	bl	800a2e4 <TL_THREAD_SendAck>
  return status;
 800973a:	79fb      	ldrb	r3, [r7, #7]

}
 800973c:	4618      	mov	r0, r3
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bdb0      	pop	{r4, r5, r7, pc}

08009744 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8009750:	f7f7 ffa4 	bl	800169c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009754:	f7f7 ff28 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009758:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8009762:	701a      	strb	r2, [r3, #0]
 8009764:	2200      	movs	r2, #0
 8009766:	f042 0202 	orr.w	r2, r2, #2
 800976a:	705a      	strb	r2, [r3, #1]
 800976c:	2200      	movs	r2, #0
 800976e:	709a      	strb	r2, [r3, #2]
 8009770:	2200      	movs	r2, #0
 8009772:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f042 0201 	orr.w	r2, r2, #1
 800977c:	711a      	strb	r2, [r3, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	715a      	strb	r2, [r3, #5]
 8009782:	2200      	movs	r2, #0
 8009784:	719a      	strb	r2, [r3, #6]
 8009786:	2200      	movs	r2, #0
 8009788:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800978a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8009792:	f7f7 ff51 	bl	8001638 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009796:	f7f7 ff13 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800979a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	b2db      	uxtb	r3, r3
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b086      	sub	sp, #24
 80097ae:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80097b0:	1d3b      	adds	r3, r7, #4
 80097b2:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2200      	movs	r2, #0
 80097b8:	2100      	movs	r1, #0
 80097ba:	f64f 4067 	movw	r0, #64615	; 0xfc67
 80097be:	f000 f957 	bl	8009a70 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	330b      	adds	r3, #11
 80097c6:	78db      	ldrb	r3, [r3, #3]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80097da:	f107 030c 	add.w	r3, r7, #12
 80097de:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 80097e0:	79fb      	ldrb	r3, [r7, #7]
 80097e2:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 80097e4:	f107 020c 	add.w	r2, r7, #12
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	2101      	movs	r1, #1
 80097ec:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 80097f0:	f000 f93e 	bl	8009a70 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	330b      	adds	r3, #11
 80097f8:	78db      	ldrb	r3, [r3, #3]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3720      	adds	r7, #32
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b088      	sub	sp, #32
 8009806:	af00      	add	r7, sp, #0
 8009808:	4603      	mov	r3, r0
 800980a:	460a      	mov	r2, r1
 800980c:	71fb      	strb	r3, [r7, #7]
 800980e:	4613      	mov	r3, r2
 8009810:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8009818:	79fb      	ldrb	r3, [r7, #7]
 800981a:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 800981c:	79bb      	ldrb	r3, [r7, #6]
 800981e:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 8009820:	f107 020c 	add.w	r2, r7, #12
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	2102      	movs	r1, #2
 8009828:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 800982c:	f000 f920 	bl	8009a70 <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	330b      	adds	r3, #11
 8009834:	78db      	ldrb	r3, [r3, #3]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3720      	adds	r7, #32
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009840:	b480      	push	{r7}
 8009842:	b08b      	sub	sp, #44	; 0x2c
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009848:	2300      	movs	r3, #0
 800984a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800984c:	2300      	movs	r3, #0
 800984e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800985c:	2300      	movs	r3, #0
 800985e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009868:	4b4a      	ldr	r3, [pc, #296]	; (8009994 <SHCI_GetWirelessFwInfo+0x154>)
 800986a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009870:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800987a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a44      	ldr	r2, [pc, #272]	; (8009998 <SHCI_GetWirelessFwInfo+0x158>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d10f      	bne.n	80098ac <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	695b      	ldr	r3, [r3, #20]
 8009890:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	617b      	str	r3, [r7, #20]
 80098aa:	e01a      	b.n	80098e2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80098b4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80098b8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	0e1b      	lsrs	r3, r3, #24
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	0c1b      	lsrs	r3, r3, #16
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	0a1b      	lsrs	r3, r3, #8
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	091b      	lsrs	r3, r3, #4
 8009904:	b2db      	uxtb	r3, r3
 8009906:	f003 030f 	and.w	r3, r3, #15
 800990a:	b2da      	uxtb	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	b2db      	uxtb	r3, r3
 8009914:	f003 030f 	and.w	r3, r3, #15
 8009918:	b2da      	uxtb	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	0e1b      	lsrs	r3, r3, #24
 8009922:	b2da      	uxtb	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	0c1b      	lsrs	r3, r3, #16
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	0a1b      	lsrs	r3, r3, #8
 8009936:	b2da      	uxtb	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	b2da      	uxtb	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	b2da      	uxtb	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	0e1b      	lsrs	r3, r3, #24
 8009950:	b2da      	uxtb	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	0c1b      	lsrs	r3, r3, #16
 800995a:	b2da      	uxtb	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	0a1b      	lsrs	r3, r3, #8
 8009964:	b2da      	uxtb	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	0e1b      	lsrs	r3, r3, #24
 800996e:	b2da      	uxtb	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	0c1b      	lsrs	r3, r3, #16
 8009978:	b2da      	uxtb	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	b2da      	uxtb	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	372c      	adds	r7, #44	; 0x2c
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	58004000 	.word	0x58004000
 8009998:	a94656b9 	.word	0xa94656b9

0800999c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	4a08      	ldr	r2, [pc, #32]	; (80099cc <shci_init+0x30>)
 80099ac:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80099ae:	4a08      	ldr	r2, [pc, #32]	; (80099d0 <shci_init+0x34>)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80099b4:	4806      	ldr	r0, [pc, #24]	; (80099d0 <shci_init+0x34>)
 80099b6:	f000 f911 	bl	8009bdc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f894 	bl	8009aec <TlInit>

  return;
 80099c4:	bf00      	nop
}
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	200006a8 	.word	0x200006a8
 80099d0:	20000688 	.word	0x20000688

080099d4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80099da:	4822      	ldr	r0, [pc, #136]	; (8009a64 <shci_user_evt_proc+0x90>)
 80099dc:	f001 f896 	bl	800ab0c <LST_is_empty>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d12b      	bne.n	8009a3e <shci_user_evt_proc+0x6a>
 80099e6:	4b20      	ldr	r3, [pc, #128]	; (8009a68 <shci_user_evt_proc+0x94>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d027      	beq.n	8009a3e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80099ee:	f107 030c 	add.w	r3, r7, #12
 80099f2:	4619      	mov	r1, r3
 80099f4:	481b      	ldr	r0, [pc, #108]	; (8009a64 <shci_user_evt_proc+0x90>)
 80099f6:	f001 f918 	bl	800ac2a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80099fa:	4b1c      	ldr	r3, [pc, #112]	; (8009a6c <shci_user_evt_proc+0x98>)
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00c      	beq.n	8009a1c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009a06:	2301      	movs	r3, #1
 8009a08:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009a0a:	4b18      	ldr	r3, [pc, #96]	; (8009a6c <shci_user_evt_proc+0x98>)
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	1d3a      	adds	r2, r7, #4
 8009a10:	4610      	mov	r0, r2
 8009a12:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009a14:	793a      	ldrb	r2, [r7, #4]
 8009a16:	4b14      	ldr	r3, [pc, #80]	; (8009a68 <shci_user_evt_proc+0x94>)
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	e002      	b.n	8009a22 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009a1c:	4b12      	ldr	r3, [pc, #72]	; (8009a68 <shci_user_evt_proc+0x94>)
 8009a1e:	2201      	movs	r2, #1
 8009a20:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009a22:	4b11      	ldr	r3, [pc, #68]	; (8009a68 <shci_user_evt_proc+0x94>)
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d004      	beq.n	8009a34 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 fcd5 	bl	800a3dc <TL_MM_EvtDone>
 8009a32:	e004      	b.n	8009a3e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4619      	mov	r1, r3
 8009a38:	480a      	ldr	r0, [pc, #40]	; (8009a64 <shci_user_evt_proc+0x90>)
 8009a3a:	f001 f889 	bl	800ab50 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009a3e:	4809      	ldr	r0, [pc, #36]	; (8009a64 <shci_user_evt_proc+0x90>)
 8009a40:	f001 f864 	bl	800ab0c <LST_is_empty>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d107      	bne.n	8009a5a <shci_user_evt_proc+0x86>
 8009a4a:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <shci_user_evt_proc+0x94>)
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009a52:	4804      	ldr	r0, [pc, #16]	; (8009a64 <shci_user_evt_proc+0x90>)
 8009a54:	f7f8 fd14 	bl	8002480 <shci_notify_asynch_evt>
  }


  return;
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
}
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	200000a4 	.word	0x200000a4
 8009a68:	200000b4 	.word	0x200000b4
 8009a6c:	20000688 	.word	0x20000688

08009a70 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60ba      	str	r2, [r7, #8]
 8009a78:	607b      	str	r3, [r7, #4]
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	81fb      	strh	r3, [r7, #14]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009a82:	2000      	movs	r0, #0
 8009a84:	f000 f864 	bl	8009b50 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009a88:	4b16      	ldr	r3, [pc, #88]	; (8009ae4 <shci_send+0x74>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	89fa      	ldrh	r2, [r7, #14]
 8009a8e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009a92:	4b14      	ldr	r3, [pc, #80]	; (8009ae4 <shci_send+0x74>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	7b7a      	ldrb	r2, [r7, #13]
 8009a98:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009a9a:	4b12      	ldr	r3, [pc, #72]	; (8009ae4 <shci_send+0x74>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	330c      	adds	r3, #12
 8009aa0:	7b7a      	ldrb	r2, [r7, #13]
 8009aa2:	68b9      	ldr	r1, [r7, #8]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f001 f949 	bl	800ad3c <memcpy>

  shciContext.io.Send(0,0);
 8009aaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <shci_send+0x78>)
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	2100      	movs	r1, #0
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009ab4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009ab8:	f7f8 fcf9 	bl	80024ae <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f103 0008 	add.w	r0, r3, #8
 8009ac2:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <shci_send+0x74>)
 8009ac4:	6819      	ldr	r1, [r3, #0]
 8009ac6:	4b07      	ldr	r3, [pc, #28]	; (8009ae4 <shci_send+0x74>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	789b      	ldrb	r3, [r3, #2]
 8009acc:	3303      	adds	r3, #3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f001 f934 	bl	800ad3c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	f000 f83b 	bl	8009b50 <Cmd_SetStatus>

  return;
 8009ada:	bf00      	nop
}
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200000b0 	.word	0x200000b0
 8009ae8:	20000688 	.word	0x20000688

08009aec <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009af4:	4a10      	ldr	r2, [pc, #64]	; (8009b38 <TlInit+0x4c>)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009afa:	4810      	ldr	r0, [pc, #64]	; (8009b3c <TlInit+0x50>)
 8009afc:	f000 fff6 	bl	800aaec <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009b00:	2001      	movs	r0, #1
 8009b02:	f000 f825 	bl	8009b50 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009b06:	4b0e      	ldr	r3, [pc, #56]	; (8009b40 <TlInit+0x54>)
 8009b08:	2201      	movs	r2, #1
 8009b0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009b0c:	4b0d      	ldr	r3, [pc, #52]	; (8009b44 <TlInit+0x58>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00c      	beq.n	8009b2e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009b18:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <TlInit+0x5c>)
 8009b1a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009b1c:	4b0b      	ldr	r3, [pc, #44]	; (8009b4c <TlInit+0x60>)
 8009b1e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009b20:	4b08      	ldr	r3, [pc, #32]	; (8009b44 <TlInit+0x58>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f107 020c 	add.w	r2, r7, #12
 8009b28:	4610      	mov	r0, r2
 8009b2a:	4798      	blx	r3
  }

  return;
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
}
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	200000b0 	.word	0x200000b0
 8009b3c:	200000a4 	.word	0x200000a4
 8009b40:	200000b4 	.word	0x200000b4
 8009b44:	20000688 	.word	0x20000688
 8009b48:	08009ba1 	.word	0x08009ba1
 8009b4c:	08009bb9 	.word	0x08009bb9

08009b50 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10b      	bne.n	8009b78 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009b60:	4b0d      	ldr	r3, [pc, #52]	; (8009b98 <Cmd_SetStatus+0x48>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d003      	beq.n	8009b70 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009b68:	4b0b      	ldr	r3, [pc, #44]	; (8009b98 <Cmd_SetStatus+0x48>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009b70:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <Cmd_SetStatus+0x4c>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009b76:	e00b      	b.n	8009b90 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009b78:	4b08      	ldr	r3, [pc, #32]	; (8009b9c <Cmd_SetStatus+0x4c>)
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009b7e:	4b06      	ldr	r3, [pc, #24]	; (8009b98 <Cmd_SetStatus+0x48>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d004      	beq.n	8009b90 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009b86:	4b04      	ldr	r3, [pc, #16]	; (8009b98 <Cmd_SetStatus+0x48>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	4798      	blx	r3
  return;
 8009b8e:	bf00      	nop
 8009b90:	bf00      	nop
}
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	200006a8 	.word	0x200006a8
 8009b9c:	200000ac 	.word	0x200000ac

08009ba0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009ba8:	2000      	movs	r0, #0
 8009baa:	f7f8 fc75 	bl	8002498 <shci_cmd_resp_release>

  return;
 8009bae:	bf00      	nop
}
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	4805      	ldr	r0, [pc, #20]	; (8009bd8 <TlUserEvtReceived+0x20>)
 8009bc4:	f000 ffea 	bl	800ab9c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009bc8:	4803      	ldr	r0, [pc, #12]	; (8009bd8 <TlUserEvtReceived+0x20>)
 8009bca:	f7f8 fc59 	bl	8002480 <shci_notify_asynch_evt>

  return;
 8009bce:	bf00      	nop
}
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	200000a4 	.word	0x200000a4

08009bdc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a05      	ldr	r2, [pc, #20]	; (8009bfc <shci_register_io_bus+0x20>)
 8009be8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a04      	ldr	r2, [pc, #16]	; (8009c00 <shci_register_io_bus+0x24>)
 8009bee:	611a      	str	r2, [r3, #16]

  return;
 8009bf0:	bf00      	nop
}
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	0800a18d 	.word	0x0800a18d
 8009c00:	0800a1e1 	.word	0x0800a1e1

08009c04 <otSrpClientEnableAutoStartMode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
void otSrpClientEnableAutoStartMode(otInstance *aInstance, otSrpClientAutoStartCallback aCallback, void *aContext)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 8009c10:	f7f7 fd44 	bl	800169c <Pre_OtCmdProcessing>

  otSrpClientAutoStartCb = aCallback;
 8009c14:	4a14      	ldr	r2, [pc, #80]	; (8009c68 <otSrpClientEnableAutoStartMode+0x64>)
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	6013      	str	r3, [r2, #0]

  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009c1a:	f7f7 fcc5 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009c1e:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ENABLE_AUTO_START_MODE;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f062 0234 	orn	r2, r2, #52	; 0x34
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f042 0201 	orr.w	r2, r2, #1
 8009c30:	705a      	strb	r2, [r3, #1]
 8009c32:	2200      	movs	r2, #0
 8009c34:	709a      	strb	r2, [r3, #2]
 8009c36:	2200      	movs	r2, #0
 8009c38:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f042 0201 	orr.w	r2, r2, #1
 8009c42:	711a      	strb	r2, [r3, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	715a      	strb	r2, [r3, #5]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	719a      	strb	r2, [r3, #6]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aContext;
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	609a      	str	r2, [r3, #8]

  Ot_Cmd_TransferWithNotif();
 8009c56:	f7f7 fcf5 	bl	8001644 <Ot_Cmd_TransferWithNotif>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009c5a:	f7f7 fcb1 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009c5e:	6178      	str	r0, [r7, #20]
}
 8009c60:	bf00      	nop
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	2000067c 	.word	0x2000067c

08009c6c <otSrpClientSetHostName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otSrpClientHostInfo*)p_ot_req->Data[0];
}

otError otSrpClientSetHostName(otInstance *aInstance, const char *aName)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009c76:	f7f7 fd11 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009c7a:	f7f7 fc95 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009c7e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_SET_HOST_NAME;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f062 022a 	orn	r2, r2, #42	; 0x2a
 8009c88:	701a      	strb	r2, [r3, #0]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f042 0201 	orr.w	r2, r2, #1
 8009c90:	705a      	strb	r2, [r3, #1]
 8009c92:	2200      	movs	r2, #0
 8009c94:	709a      	strb	r2, [r3, #2]
 8009c96:	2200      	movs	r2, #0
 8009c98:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f042 0201 	orr.w	r2, r2, #1
 8009ca2:	711a      	strb	r2, [r3, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	715a      	strb	r2, [r3, #5]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	719a      	strb	r2, [r3, #6]
 8009cac:	2200      	movs	r2, #0
 8009cae:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aName;
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009cb6:	f7f7 fcbf 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009cba:	f7f7 fc81 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009cbe:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	b2db      	uxtb	r3, r3
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <otSrpClientEnableAutoHostAddress>:

otError otSrpClientEnableAutoHostAddress(otInstance *aInstance)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009cd6:	f7f7 fce1 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009cda:	f7f7 fc65 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009cde:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ENABLE_AUTO_HOST_ADDRESS;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f062 0229 	orn	r2, r2, #41	; 0x29
 8009ce8:	701a      	strb	r2, [r3, #0]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f042 0201 	orr.w	r2, r2, #1
 8009cf0:	705a      	strb	r2, [r3, #1]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	709a      	strb	r2, [r3, #2]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	711a      	strb	r2, [r3, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	715a      	strb	r2, [r3, #5]
 8009d04:	2200      	movs	r2, #0
 8009d06:	719a      	strb	r2, [r3, #6]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8009d0c:	f7f7 fc94 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009d10:	f7f7 fc56 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009d14:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	b2db      	uxtb	r3, r3
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <otSrpClientAddService>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otSrpClientAddService(otInstance *aInstance, otSrpClientService *aService)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009d2e:	f7f7 fcb5 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d32:	f7f7 fc39 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009d36:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ADD_SERVICE;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f062 0227 	orn	r2, r2, #39	; 0x27
 8009d40:	701a      	strb	r2, [r3, #0]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f042 0201 	orr.w	r2, r2, #1
 8009d48:	705a      	strb	r2, [r3, #1]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	709a      	strb	r2, [r3, #2]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f042 0201 	orr.w	r2, r2, #1
 8009d5a:	711a      	strb	r2, [r3, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	715a      	strb	r2, [r3, #5]
 8009d60:	2200      	movs	r2, #0
 8009d62:	719a      	strb	r2, [r3, #6]
 8009d64:	2200      	movs	r2, #0
 8009d66:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aService;
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009d6e:	f7f7 fc63 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009d72:	f7f7 fc25 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009d76:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	b2db      	uxtb	r3, r3
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <otSrpClientBuffersGetHostNameString>:
#if OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_ENABLE

#include "srp_client_buffers.h"

char *otSrpClientBuffersGetHostNameString(otInstance *aInstance, uint16_t *aSize)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009d90:	f7f7 fc84 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d94:	f7f7 fc08 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009d98:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_HOST_NAME_STRING;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f062 021c 	orn	r2, r2, #28
 8009da2:	701a      	strb	r2, [r3, #0]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f042 0201 	orr.w	r2, r2, #1
 8009daa:	705a      	strb	r2, [r3, #1]
 8009dac:	2200      	movs	r2, #0
 8009dae:	709a      	strb	r2, [r3, #2]
 8009db0:	2200      	movs	r2, #0
 8009db2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f042 0201 	orr.w	r2, r2, #1
 8009dbc:	711a      	strb	r2, [r3, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	715a      	strb	r2, [r3, #5]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	719a      	strb	r2, [r3, #6]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSize;
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009dd0:	f7f7 fc32 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009dd4:	f7f7 fbf4 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009dd8:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	689b      	ldr	r3, [r3, #8]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <otSrpClientBuffersAllocateService>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otIp6Address*)p_ot_req->Data[0];
}

otSrpClientBuffersServiceEntry *otSrpClientBuffersAllocateService(otInstance *aInstance)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009dee:	f7f7 fc55 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009df2:	f7f7 fbd9 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009df6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_ALLOCATE_SERVICE;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f062 021a 	orn	r2, r2, #26
 8009e00:	701a      	strb	r2, [r3, #0]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f042 0201 	orr.w	r2, r2, #1
 8009e08:	705a      	strb	r2, [r3, #1]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	709a      	strb	r2, [r3, #2]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	711a      	strb	r2, [r3, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	715a      	strb	r2, [r3, #5]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	719a      	strb	r2, [r3, #6]
 8009e20:	2200      	movs	r2, #0
 8009e22:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8009e24:	f7f7 fc08 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e28:	f7f7 fbca 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e2c:	60f8      	str	r0, [r7, #12]
  return (otSrpClientBuffersServiceEntry*)p_ot_req->Data[0];
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	689b      	ldr	r3, [r3, #8]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <otSrpClientBuffersGetServiceEntryServiceNameString>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

char *otSrpClientBuffersGetServiceEntryServiceNameString(otSrpClientBuffersServiceEntry *aEntry, uint16_t *aSize)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009e44:	f7f7 fc2a 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e48:	f7f7 fbae 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009e4c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_SERVICE_ENTRY_SERVICE_NAME_STRING;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f062 0217 	orn	r2, r2, #23
 8009e56:	701a      	strb	r2, [r3, #0]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f042 0201 	orr.w	r2, r2, #1
 8009e5e:	705a      	strb	r2, [r3, #1]
 8009e60:	2200      	movs	r2, #0
 8009e62:	709a      	strb	r2, [r3, #2]
 8009e64:	2200      	movs	r2, #0
 8009e66:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f042 0202 	orr.w	r2, r2, #2
 8009e70:	711a      	strb	r2, [r3, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	715a      	strb	r2, [r3, #5]
 8009e76:	2200      	movs	r2, #0
 8009e78:	719a      	strb	r2, [r3, #6]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aEntry;
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aSize;
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8009e8a:	f7f7 fbd5 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e8e:	f7f7 fb97 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e92:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	689b      	ldr	r3, [r3, #8]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <otSrpClientBuffersGetServiceEntryInstanceNameString>:

char *otSrpClientBuffersGetServiceEntryInstanceNameString(otSrpClientBuffersServiceEntry *aEntry, uint16_t *aSize)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009eaa:	f7f7 fbf7 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009eae:	f7f7 fb7b 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009eb2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_SERVICE_ENTRY_INSTANCE_NAME_STRING;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f062 0216 	orn	r2, r2, #22
 8009ebc:	701a      	strb	r2, [r3, #0]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f042 0201 	orr.w	r2, r2, #1
 8009ec4:	705a      	strb	r2, [r3, #1]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	709a      	strb	r2, [r3, #2]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f042 0202 	orr.w	r2, r2, #2
 8009ed6:	711a      	strb	r2, [r3, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	715a      	strb	r2, [r3, #5]
 8009edc:	2200      	movs	r2, #0
 8009ede:	719a      	strb	r2, [r3, #6]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aEntry;
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aSize;
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8009ef0:	f7f7 fba2 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ef4:	f7f7 fb64 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009ef8:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	689b      	ldr	r3, [r3, #8]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8009f12:	f7f7 fbc3 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f16:	f7f7 fb47 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009f1a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009f24:	701a      	strb	r2, [r3, #0]
 8009f26:	2200      	movs	r2, #0
 8009f28:	705a      	strb	r2, [r3, #1]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	709a      	strb	r2, [r3, #2]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f042 0201 	orr.w	r2, r2, #1
 8009f3a:	711a      	strb	r2, [r3, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	715a      	strb	r2, [r3, #5]
 8009f40:	2200      	movs	r2, #0
 8009f42:	719a      	strb	r2, [r3, #6]
 8009f44:	2200      	movs	r2, #0
 8009f46:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8009f48:	78fa      	ldrb	r2, [r7, #3]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009f4e:	f7f7 fb73 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f52:	f7f7 fb35 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f56:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	b2db      	uxtb	r3, r3
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009f70:	f7f7 fb94 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f74:	f7f7 fb18 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009f78:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 8009f82:	701a      	strb	r2, [r3, #0]
 8009f84:	2200      	movs	r2, #0
 8009f86:	705a      	strb	r2, [r3, #1]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	709a      	strb	r2, [r3, #2]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f042 0203 	orr.w	r2, r2, #3
 8009f98:	711a      	strb	r2, [r3, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	715a      	strb	r2, [r3, #5]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	719a      	strb	r2, [r3, #6]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 8009fa6:	783b      	ldrb	r3, [r7, #0]
 8009fa8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	461a      	mov	r2, r3
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 8009fb4:	783b      	ldrb	r3, [r7, #0]
 8009fb6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 8009fc2:	783b      	ldrb	r3, [r7, #0]
 8009fc4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8009fd0:	f7f7 fb32 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009fd4:	f7f7 faf4 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009fd8:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	b2db      	uxtb	r3, r3
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009ff0:	f7f7 fb54 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009ff4:	f7f7 fad8 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 8009ff8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f062 0279 	orn	r2, r2, #121	; 0x79
 800a002:	701a      	strb	r2, [r3, #0]
 800a004:	2200      	movs	r2, #0
 800a006:	705a      	strb	r2, [r3, #1]
 800a008:	2200      	movs	r2, #0
 800a00a:	709a      	strb	r2, [r3, #2]
 800a00c:	2200      	movs	r2, #0
 800a00e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	711a      	strb	r2, [r3, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	715a      	strb	r2, [r3, #5]
 800a01a:	2200      	movs	r2, #0
 800a01c:	719a      	strb	r2, [r3, #6]
 800a01e:	2200      	movs	r2, #0
 800a020:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a022:	f7f7 fb09 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a026:	f7f7 facb 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a02a:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	b2db      	uxtb	r3, r3
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <otThreadGetParentLastRssi>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otThreadGetParentLastRssi(otInstance *aInstance, int8_t *aLastRssi)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a044:	f7f7 fb2a 	bl	800169c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a048:	f7f7 faae 	bl	80015a8 <THREAD_Get_OTCmdPayloadBuffer>
 800a04c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_PARENT_LAST_RSSI;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	f062 0270 	orn	r2, r2, #112	; 0x70
 800a056:	701a      	strb	r2, [r3, #0]
 800a058:	2200      	movs	r2, #0
 800a05a:	705a      	strb	r2, [r3, #1]
 800a05c:	2200      	movs	r2, #0
 800a05e:	709a      	strb	r2, [r3, #2]
 800a060:	2200      	movs	r2, #0
 800a062:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f042 0201 	orr.w	r2, r2, #1
 800a06c:	711a      	strb	r2, [r3, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	715a      	strb	r2, [r3, #5]
 800a072:	2200      	movs	r2, #0
 800a074:	719a      	strb	r2, [r3, #6]
 800a076:	2200      	movs	r2, #0
 800a078:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aLastRssi;
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a080:	f7f7 fada 	bl	8001638 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a084:	f7f7 fa9c 	bl	80015c0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a088:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	b2db      	uxtb	r3, r3
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a09c:	f7f7 fd52 	bl	8001b44 <HW_IPCC_Enable>

  return;
 800a0a0:	bf00      	nop
}
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <TL_Init>:


void TL_Init( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a0a8:	4b10      	ldr	r3, [pc, #64]	; (800a0ec <TL_Init+0x48>)
 800a0aa:	4a11      	ldr	r2, [pc, #68]	; (800a0f0 <TL_Init+0x4c>)
 800a0ac:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a0ae:	4b0f      	ldr	r3, [pc, #60]	; (800a0ec <TL_Init+0x48>)
 800a0b0:	4a10      	ldr	r2, [pc, #64]	; (800a0f4 <TL_Init+0x50>)
 800a0b2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a0b4:	4b0d      	ldr	r3, [pc, #52]	; (800a0ec <TL_Init+0x48>)
 800a0b6:	4a10      	ldr	r2, [pc, #64]	; (800a0f8 <TL_Init+0x54>)
 800a0b8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a0ba:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <TL_Init+0x48>)
 800a0bc:	4a0f      	ldr	r2, [pc, #60]	; (800a0fc <TL_Init+0x58>)
 800a0be:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a0c0:	4b0a      	ldr	r3, [pc, #40]	; (800a0ec <TL_Init+0x48>)
 800a0c2:	4a0f      	ldr	r2, [pc, #60]	; (800a100 <TL_Init+0x5c>)
 800a0c4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a0c6:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <TL_Init+0x48>)
 800a0c8:	4a0e      	ldr	r2, [pc, #56]	; (800a104 <TL_Init+0x60>)
 800a0ca:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a0cc:	4b07      	ldr	r3, [pc, #28]	; (800a0ec <TL_Init+0x48>)
 800a0ce:	4a0e      	ldr	r2, [pc, #56]	; (800a108 <TL_Init+0x64>)
 800a0d0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a0d2:	4b06      	ldr	r3, [pc, #24]	; (800a0ec <TL_Init+0x48>)
 800a0d4:	4a0d      	ldr	r2, [pc, #52]	; (800a10c <TL_Init+0x68>)
 800a0d6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a0d8:	4b04      	ldr	r3, [pc, #16]	; (800a0ec <TL_Init+0x48>)
 800a0da:	4a0d      	ldr	r2, [pc, #52]	; (800a110 <TL_Init+0x6c>)
 800a0dc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a0de:	4b03      	ldr	r3, [pc, #12]	; (800a0ec <TL_Init+0x48>)
 800a0e0:	4a0c      	ldr	r2, [pc, #48]	; (800a114 <TL_Init+0x70>)
 800a0e2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a0e4:	f7f7 fd42 	bl	8001b6c <HW_IPCC_Init>

  return;
 800a0e8:	bf00      	nop
}
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	20030000 	.word	0x20030000
 800a0f0:	20030038 	.word	0x20030038
 800a0f4:	20030058 	.word	0x20030058
 800a0f8:	20030068 	.word	0x20030068
 800a0fc:	20030078 	.word	0x20030078
 800a100:	20030080 	.word	0x20030080
 800a104:	20030088 	.word	0x20030088
 800a108:	20030090 	.word	0x20030090
 800a10c:	200300ac 	.word	0x200300ac
 800a110:	200300b0 	.word	0x200300b0
 800a114:	200300bc 	.word	0x200300bc

0800a118 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a11e:	e01c      	b.n	800a15a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a120:	1d3b      	adds	r3, r7, #4
 800a122:	4619      	mov	r1, r3
 800a124:	4812      	ldr	r0, [pc, #72]	; (800a170 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a126:	f000 fd80 	bl	800ac2a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	7a5b      	ldrb	r3, [r3, #9]
 800a12e:	2b0f      	cmp	r3, #15
 800a130:	d003      	beq.n	800a13a <HW_IPCC_BLE_RxEvtNot+0x22>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	7a5b      	ldrb	r3, [r3, #9]
 800a136:	2b0e      	cmp	r3, #14
 800a138:	d105      	bne.n	800a146 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4619      	mov	r1, r3
 800a13e:	2002      	movs	r0, #2
 800a140:	f000 f9b0 	bl	800a4a4 <OutputDbgTrace>
 800a144:	e004      	b.n	800a150 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4619      	mov	r1, r3
 800a14a:	2003      	movs	r0, #3
 800a14c:	f000 f9aa 	bl	800a4a4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a150:	4b08      	ldr	r3, [pc, #32]	; (800a174 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	4610      	mov	r0, r2
 800a158:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a15a:	4805      	ldr	r0, [pc, #20]	; (800a170 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a15c:	f000 fcd6 	bl	800ab0c <LST_is_empty>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d0dc      	beq.n	800a120 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a166:	bf00      	nop
}
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	200300d8 	.word	0x200300d8
 800a174:	200006b4 	.word	0x200006b4

0800a178 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a17c:	4b02      	ldr	r3, [pc, #8]	; (800a188 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4798      	blx	r3

  return;
 800a182:	bf00      	nop
}
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	200006b8 	.word	0x200006b8

0800a18c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a198:	480d      	ldr	r0, [pc, #52]	; (800a1d0 <TL_SYS_Init+0x44>)
 800a19a:	f000 fca7 	bl	800aaec <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a19e:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <TL_SYS_Init+0x48>)
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	4a08      	ldr	r2, [pc, #32]	; (800a1d0 <TL_SYS_Init+0x44>)
 800a1b0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a1b2:	f7f7 fd09 	bl	8001bc8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a07      	ldr	r2, [pc, #28]	; (800a1d8 <TL_SYS_Init+0x4c>)
 800a1bc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	4a06      	ldr	r2, [pc, #24]	; (800a1dc <TL_SYS_Init+0x50>)
 800a1c4:	6013      	str	r3, [r2, #0]

  return 0;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	200300e0 	.word	0x200300e0
 800a1d4:	20030000 	.word	0x20030000
 800a1d8:	200006bc 	.word	0x200006bc
 800a1dc:	200006c0 	.word	0x200006c0

0800a1e0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a1ec:	4b09      	ldr	r3, [pc, #36]	; (800a214 <TL_SYS_SendCmd+0x34>)
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2210      	movs	r2, #16
 800a1f4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a1f6:	4b07      	ldr	r3, [pc, #28]	; (800a214 <TL_SYS_SendCmd+0x34>)
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	2004      	movs	r0, #4
 800a200:	f000 f950 	bl	800a4a4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a204:	f7f7 fcea 	bl	8001bdc <HW_IPCC_SYS_SendCmd>

  return 0;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20030000 	.word	0x20030000

0800a218 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a21c:	4b07      	ldr	r3, [pc, #28]	; (800a23c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4619      	mov	r1, r3
 800a224:	2005      	movs	r0, #5
 800a226:	f000 f93d 	bl	800a4a4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a22a:	4b05      	ldr	r3, [pc, #20]	; (800a240 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a03      	ldr	r2, [pc, #12]	; (800a23c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a230:	68d2      	ldr	r2, [r2, #12]
 800a232:	6812      	ldr	r2, [r2, #0]
 800a234:	4610      	mov	r0, r2
 800a236:	4798      	blx	r3

  return;
 800a238:	bf00      	nop
}
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20030000 	.word	0x20030000
 800a240:	200006bc 	.word	0x200006bc

0800a244 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a24a:	e00e      	b.n	800a26a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a24c:	1d3b      	adds	r3, r7, #4
 800a24e:	4619      	mov	r1, r3
 800a250:	480b      	ldr	r0, [pc, #44]	; (800a280 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a252:	f000 fcea 	bl	800ac2a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4619      	mov	r1, r3
 800a25a:	2006      	movs	r0, #6
 800a25c:	f000 f922 	bl	800a4a4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a260:	4b08      	ldr	r3, [pc, #32]	; (800a284 <HW_IPCC_SYS_EvtNot+0x40>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	4610      	mov	r0, r2
 800a268:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a26a:	4805      	ldr	r0, [pc, #20]	; (800a280 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a26c:	f000 fc4e 	bl	800ab0c <LST_is_empty>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0ea      	beq.n	800a24c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a276:	bf00      	nop
}
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	200300e0 	.word	0x200300e0
 800a284:	200006c0 	.word	0x200006c0

0800a288 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800a290:	4b0c      	ldr	r3, [pc, #48]	; (800a2c4 <TL_THREAD_Init+0x3c>)
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689a      	ldr	r2, [r3, #8]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68da      	ldr	r2, [r3, #12]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800a2b6:	f7f7 fcb7 	bl	8001c28 <HW_IPCC_THREAD_Init>

  return;
 800a2ba:	bf00      	nop
}
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20030000 	.word	0x20030000

0800a2c8 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800a2cc:	4b04      	ldr	r3, [pc, #16]	; (800a2e0 <TL_OT_SendCmd+0x18>)
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	2208      	movs	r2, #8
 800a2d4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800a2d6:	f7f7 fcb5 	bl	8001c44 <HW_IPCC_OT_SendCmd>

  return;
 800a2da:	bf00      	nop
}
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20030000 	.word	0x20030000

0800a2e4 <TL_THREAD_SendAck>:

  return;
}

void TL_THREAD_SendAck ( void )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a2e8:	4b04      	ldr	r3, [pc, #16]	; (800a2fc <TL_THREAD_SendAck+0x18>)
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	220d      	movs	r2, #13
 800a2f0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800a2f2:	f7f7 fcb5 	bl	8001c60 <HW_IPCC_THREAD_SendAck>

  return;
 800a2f6:	bf00      	nop
}
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20030000 	.word	0x20030000

0800a300 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a304:	4b04      	ldr	r3, [pc, #16]	; (800a318 <TL_THREAD_CliSendAck+0x18>)
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	220d      	movs	r2, #13
 800a30c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800a30e:	f7f7 fcb5 	bl	8001c7c <HW_IPCC_THREAD_CliSendAck>

  return;
 800a312:	bf00      	nop
}
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20030000 	.word	0x20030000

0800a31c <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800a320:	4b03      	ldr	r3, [pc, #12]	; (800a330 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	4618      	mov	r0, r3
 800a328:	f7f7 f998 	bl	800165c <TL_OT_CmdEvtReceived>

  return;
 800a32c:	bf00      	nop
}
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	20030000 	.word	0x20030000

0800a334 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800a338:	4b03      	ldr	r3, [pc, #12]	; (800a348 <HW_IPCC_THREAD_EvtNot+0x14>)
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7f7 f99c 	bl	800167c <TL_THREAD_NotReceived>

  return;
 800a344:	bf00      	nop
}
 800a346:	bd80      	pop	{r7, pc}
 800a348:	20030000 	.word	0x20030000

0800a34c <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800a350:	4b03      	ldr	r3, [pc, #12]	; (800a360 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	4618      	mov	r0, r3
 800a358:	f7f7 f9f2 	bl	8001740 <TL_THREAD_CliNotReceived>

  return;
 800a35c:	bf00      	nop
}
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	20030000 	.word	0x20030000

0800a364 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a36c:	4817      	ldr	r0, [pc, #92]	; (800a3cc <TL_MM_Init+0x68>)
 800a36e:	f000 fbbd 	bl	800aaec <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a372:	4817      	ldr	r0, [pc, #92]	; (800a3d0 <TL_MM_Init+0x6c>)
 800a374:	f000 fbba 	bl	800aaec <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a378:	4b16      	ldr	r3, [pc, #88]	; (800a3d4 <TL_MM_Init+0x70>)
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <TL_MM_Init+0x74>)
 800a37e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a380:	4b15      	ldr	r3, [pc, #84]	; (800a3d8 <TL_MM_Init+0x74>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	6892      	ldr	r2, [r2, #8]
 800a388:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a38a:	4b13      	ldr	r3, [pc, #76]	; (800a3d8 <TL_MM_Init+0x74>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	68d2      	ldr	r2, [r2, #12]
 800a392:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a394:	4b10      	ldr	r3, [pc, #64]	; (800a3d8 <TL_MM_Init+0x74>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a0c      	ldr	r2, [pc, #48]	; (800a3cc <TL_MM_Init+0x68>)
 800a39a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a39c:	4b0e      	ldr	r3, [pc, #56]	; (800a3d8 <TL_MM_Init+0x74>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	6812      	ldr	r2, [r2, #0]
 800a3a4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a3a6:	4b0c      	ldr	r3, [pc, #48]	; (800a3d8 <TL_MM_Init+0x74>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	6852      	ldr	r2, [r2, #4]
 800a3ae:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a3b0:	4b09      	ldr	r3, [pc, #36]	; (800a3d8 <TL_MM_Init+0x74>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	6912      	ldr	r2, [r2, #16]
 800a3b8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a3ba:	4b07      	ldr	r3, [pc, #28]	; (800a3d8 <TL_MM_Init+0x74>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6952      	ldr	r2, [r2, #20]
 800a3c2:	619a      	str	r2, [r3, #24]

  return;
 800a3c4:	bf00      	nop
}
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	200300c8 	.word	0x200300c8
 800a3d0:	200006ac 	.word	0x200006ac
 800a3d4:	20030000 	.word	0x20030000
 800a3d8:	200006c4 	.word	0x200006c4

0800a3dc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a3e4:	6879      	ldr	r1, [r7, #4]
 800a3e6:	4807      	ldr	r0, [pc, #28]	; (800a404 <TL_MM_EvtDone+0x28>)
 800a3e8:	f000 fbd8 	bl	800ab9c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a3ec:	6879      	ldr	r1, [r7, #4]
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	f000 f858 	bl	800a4a4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a3f4:	4804      	ldr	r0, [pc, #16]	; (800a408 <TL_MM_EvtDone+0x2c>)
 800a3f6:	f7f7 fc73 	bl	8001ce0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a3fa:	bf00      	nop
}
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	200006ac 	.word	0x200006ac
 800a408:	0800a40d 	.word	0x0800a40d

0800a40c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a412:	e00c      	b.n	800a42e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a414:	1d3b      	adds	r3, r7, #4
 800a416:	4619      	mov	r1, r3
 800a418:	480a      	ldr	r0, [pc, #40]	; (800a444 <SendFreeBuf+0x38>)
 800a41a:	f000 fc06 	bl	800ac2a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a41e:	4b0a      	ldr	r3, [pc, #40]	; (800a448 <SendFreeBuf+0x3c>)
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	4611      	mov	r1, r2
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 fbb7 	bl	800ab9c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a42e:	4805      	ldr	r0, [pc, #20]	; (800a444 <SendFreeBuf+0x38>)
 800a430:	f000 fb6c 	bl	800ab0c <LST_is_empty>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0ec      	beq.n	800a414 <SendFreeBuf+0x8>
  }

  return;
 800a43a:	bf00      	nop
}
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	200006ac 	.word	0x200006ac
 800a448:	20030000 	.word	0x20030000

0800a44c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a450:	4805      	ldr	r0, [pc, #20]	; (800a468 <TL_TRACES_Init+0x1c>)
 800a452:	f000 fb4b 	bl	800aaec <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a456:	4b05      	ldr	r3, [pc, #20]	; (800a46c <TL_TRACES_Init+0x20>)
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	4a03      	ldr	r2, [pc, #12]	; (800a468 <TL_TRACES_Init+0x1c>)
 800a45c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a45e:	f7f7 fc75 	bl	8001d4c <HW_IPCC_TRACES_Init>

  return;
 800a462:	bf00      	nop
}
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	200300d0 	.word	0x200300d0
 800a46c:	20030000 	.word	0x20030000

0800a470 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a476:	e008      	b.n	800a48a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a478:	1d3b      	adds	r3, r7, #4
 800a47a:	4619      	mov	r1, r3
 800a47c:	4808      	ldr	r0, [pc, #32]	; (800a4a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a47e:	f000 fbd4 	bl	800ac2a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4618      	mov	r0, r3
 800a486:	f7f8 f81d 	bl	80024c4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a48a:	4805      	ldr	r0, [pc, #20]	; (800a4a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a48c:	f000 fb3e 	bl	800ab0c <LST_is_empty>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0f0      	beq.n	800a478 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a496:	bf00      	nop
}
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	200300d0 	.word	0x200300d0

0800a4a4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	6039      	str	r1, [r7, #0]
 800a4ae:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	2b06      	cmp	r3, #6
 800a4b4:	d845      	bhi.n	800a542 <OutputDbgTrace+0x9e>
 800a4b6:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <OutputDbgTrace+0x18>)
 800a4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4bc:	0800a4d9 	.word	0x0800a4d9
 800a4c0:	0800a4fd 	.word	0x0800a4fd
 800a4c4:	0800a503 	.word	0x0800a503
 800a4c8:	0800a517 	.word	0x0800a517
 800a4cc:	0800a523 	.word	0x0800a523
 800a4d0:	0800a529 	.word	0x0800a529
 800a4d4:	0800a537 	.word	0x0800a537
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	7a5b      	ldrb	r3, [r3, #9]
 800a4e0:	2bff      	cmp	r3, #255	; 0xff
 800a4e2:	d005      	beq.n	800a4f0 <OutputDbgTrace+0x4c>
 800a4e4:	2bff      	cmp	r3, #255	; 0xff
 800a4e6:	dc05      	bgt.n	800a4f4 <OutputDbgTrace+0x50>
 800a4e8:	2b0e      	cmp	r3, #14
 800a4ea:	d005      	beq.n	800a4f8 <OutputDbgTrace+0x54>
 800a4ec:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a4ee:	e001      	b.n	800a4f4 <OutputDbgTrace+0x50>
          break;
 800a4f0:	bf00      	nop
 800a4f2:	e027      	b.n	800a544 <OutputDbgTrace+0xa0>
          break;
 800a4f4:	bf00      	nop
 800a4f6:	e025      	b.n	800a544 <OutputDbgTrace+0xa0>
          break;
 800a4f8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a4fa:	e023      	b.n	800a544 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a500:	e020      	b.n	800a544 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	7a5b      	ldrb	r3, [r3, #9]
 800a50a:	2b0e      	cmp	r3, #14
 800a50c:	d001      	beq.n	800a512 <OutputDbgTrace+0x6e>
 800a50e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a510:	e000      	b.n	800a514 <OutputDbgTrace+0x70>
          break;
 800a512:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a514:	e016      	b.n	800a544 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	7a5b      	ldrb	r3, [r3, #9]
 800a51e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a520:	e010      	b.n	800a544 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a526:	e00d      	b.n	800a544 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	7a5b      	ldrb	r3, [r3, #9]
 800a530:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a532:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a534:	e006      	b.n	800a544 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	7a5b      	ldrb	r3, [r3, #9]
 800a53e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a540:	e000      	b.n	800a544 <OutputDbgTrace+0xa0>

    default:
      break;
 800a542:	bf00      	nop
  }

  return;
 800a544:	bf00      	nop
}
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a55a:	4b0f      	ldr	r3, [pc, #60]	; (800a598 <OTP_Read+0x48>)
 800a55c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a55e:	e002      	b.n	800a566 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	3b08      	subs	r3, #8
 800a564:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3307      	adds	r3, #7
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	79fa      	ldrb	r2, [r7, #7]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d003      	beq.n	800a57a <OTP_Read+0x2a>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	4a09      	ldr	r2, [pc, #36]	; (800a59c <OTP_Read+0x4c>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d1f2      	bne.n	800a560 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3307      	adds	r3, #7
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	79fa      	ldrb	r2, [r7, #7]
 800a582:	429a      	cmp	r2, r3
 800a584:	d001      	beq.n	800a58a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a586:	2300      	movs	r3, #0
 800a588:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a58a:	68fb      	ldr	r3, [r7, #12]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	1fff73f8 	.word	0x1fff73f8
 800a59c:	1fff7000 	.word	0x1fff7000

0800a5a0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5a4:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <UTIL_LPM_Init+0x1c>)
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5aa:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <UTIL_LPM_Init+0x20>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a5b0:	bf00      	nop
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	200006c8 	.word	0x200006c8
 800a5c0:	200006cc 	.word	0x200006cc

0800a5c4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a5d4:	613b      	str	r3, [r7, #16]
  return(result);
 800a5d6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a5d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5da:	b672      	cpsid	i
}
 800a5dc:	bf00      	nop

  switch( state )
 800a5de:	78fb      	ldrb	r3, [r7, #3]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d008      	beq.n	800a5f6 <UTIL_LPM_SetStopMode+0x32>
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d10e      	bne.n	800a606 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a5e8:	4b0d      	ldr	r3, [pc, #52]	; (800a620 <UTIL_LPM_SetStopMode+0x5c>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	4a0b      	ldr	r2, [pc, #44]	; (800a620 <UTIL_LPM_SetStopMode+0x5c>)
 800a5f2:	6013      	str	r3, [r2, #0]
      break;
 800a5f4:	e008      	b.n	800a608 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	43da      	mvns	r2, r3
 800a5fa:	4b09      	ldr	r3, [pc, #36]	; (800a620 <UTIL_LPM_SetStopMode+0x5c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4013      	ands	r3, r2
 800a600:	4a07      	ldr	r2, [pc, #28]	; (800a620 <UTIL_LPM_SetStopMode+0x5c>)
 800a602:	6013      	str	r3, [r2, #0]
      break;
 800a604:	e000      	b.n	800a608 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a606:	bf00      	nop
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f383 8810 	msr	PRIMASK, r3
}
 800a612:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a614:	bf00      	nop
 800a616:	371c      	adds	r7, #28
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	200006c8 	.word	0x200006c8

0800a624 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a630:	f3ef 8310 	mrs	r3, PRIMASK
 800a634:	613b      	str	r3, [r7, #16]
  return(result);
 800a636:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a638:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a63a:	b672      	cpsid	i
}
 800a63c:	bf00      	nop
  
  switch(state)
 800a63e:	78fb      	ldrb	r3, [r7, #3]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d008      	beq.n	800a656 <UTIL_LPM_SetOffMode+0x32>
 800a644:	2b01      	cmp	r3, #1
 800a646:	d10e      	bne.n	800a666 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a648:	4b0d      	ldr	r3, [pc, #52]	; (800a680 <UTIL_LPM_SetOffMode+0x5c>)
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4313      	orrs	r3, r2
 800a650:	4a0b      	ldr	r2, [pc, #44]	; (800a680 <UTIL_LPM_SetOffMode+0x5c>)
 800a652:	6013      	str	r3, [r2, #0]
      break;
 800a654:	e008      	b.n	800a668 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	43da      	mvns	r2, r3
 800a65a:	4b09      	ldr	r3, [pc, #36]	; (800a680 <UTIL_LPM_SetOffMode+0x5c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4013      	ands	r3, r2
 800a660:	4a07      	ldr	r2, [pc, #28]	; (800a680 <UTIL_LPM_SetOffMode+0x5c>)
 800a662:	6013      	str	r3, [r2, #0]
      break;
 800a664:	e000      	b.n	800a668 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a666:	bf00      	nop
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f383 8810 	msr	PRIMASK, r3
}
 800a672:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a674:	bf00      	nop
 800a676:	371c      	adds	r7, #28
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	200006cc 	.word	0x200006cc

0800a684 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a68a:	f3ef 8310 	mrs	r3, PRIMASK
 800a68e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a690:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800a692:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a694:	b672      	cpsid	i
}
 800a696:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a698:	4b12      	ldr	r3, [pc, #72]	; (800a6e4 <UTIL_LPM_EnterLowPower+0x60>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d006      	beq.n	800a6ae <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a6a0:	4b11      	ldr	r3, [pc, #68]	; (800a6e8 <UTIL_LPM_EnterLowPower+0x64>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a6a6:	4b10      	ldr	r3, [pc, #64]	; (800a6e8 <UTIL_LPM_EnterLowPower+0x64>)
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	4798      	blx	r3
 800a6ac:	e010      	b.n	800a6d0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a6ae:	4b0f      	ldr	r3, [pc, #60]	; (800a6ec <UTIL_LPM_EnterLowPower+0x68>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d006      	beq.n	800a6c4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800a6b6:	4b0c      	ldr	r3, [pc, #48]	; (800a6e8 <UTIL_LPM_EnterLowPower+0x64>)
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a6bc:	4b0a      	ldr	r3, [pc, #40]	; (800a6e8 <UTIL_LPM_EnterLowPower+0x64>)
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	4798      	blx	r3
 800a6c2:	e005      	b.n	800a6d0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800a6c4:	4b08      	ldr	r3, [pc, #32]	; (800a6e8 <UTIL_LPM_EnterLowPower+0x64>)
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a6ca:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <UTIL_LPM_EnterLowPower+0x64>)
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	4798      	blx	r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f383 8810 	msr	PRIMASK, r3
}
 800a6da:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a6dc:	bf00      	nop
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	200006c8 	.word	0x200006c8
 800a6e8:	0800c640 	.word	0x0800c640
 800a6ec:	200006cc 	.word	0x200006cc

0800a6f0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b090      	sub	sp, #64	; 0x40
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a6f8:	4b73      	ldr	r3, [pc, #460]	; (800a8c8 <UTIL_SEQ_Run+0x1d8>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a6fe:	4b72      	ldr	r3, [pc, #456]	; (800a8c8 <UTIL_SEQ_Run+0x1d8>)
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4013      	ands	r3, r2
 800a706:	4a70      	ldr	r2, [pc, #448]	; (800a8c8 <UTIL_SEQ_Run+0x1d8>)
 800a708:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a70a:	4b70      	ldr	r3, [pc, #448]	; (800a8cc <UTIL_SEQ_Run+0x1dc>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a710:	4b6f      	ldr	r3, [pc, #444]	; (800a8d0 <UTIL_SEQ_Run+0x1e0>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a716:	4b6f      	ldr	r3, [pc, #444]	; (800a8d4 <UTIL_SEQ_Run+0x1e4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800a71c:	4b6e      	ldr	r3, [pc, #440]	; (800a8d8 <UTIL_SEQ_Run+0x1e8>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a722:	e08d      	b.n	800a840 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a724:	2300      	movs	r3, #0
 800a726:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a728:	e002      	b.n	800a730 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a72c:	3301      	adds	r3, #1
 800a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a730:	4a6a      	ldr	r2, [pc, #424]	; (800a8dc <UTIL_SEQ_Run+0x1ec>)
 800a732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a734:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73a:	401a      	ands	r2, r3
 800a73c:	4b62      	ldr	r3, [pc, #392]	; (800a8c8 <UTIL_SEQ_Run+0x1d8>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4013      	ands	r3, r2
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0f1      	beq.n	800a72a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a746:	4a65      	ldr	r2, [pc, #404]	; (800a8dc <UTIL_SEQ_Run+0x1ec>)
 800a748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a750:	401a      	ands	r2, r3
 800a752:	4b5d      	ldr	r3, [pc, #372]	; (800a8c8 <UTIL_SEQ_Run+0x1d8>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4013      	ands	r3, r2
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a75a:	4a60      	ldr	r2, [pc, #384]	; (800a8dc <UTIL_SEQ_Run+0x1ec>)
 800a75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a75e:	00db      	lsls	r3, r3, #3
 800a760:	4413      	add	r3, r2
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	4013      	ands	r3, r2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d106      	bne.n	800a77a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a76c:	4a5b      	ldr	r2, [pc, #364]	; (800a8dc <UTIL_SEQ_Run+0x1ec>)
 800a76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a770:	00db      	lsls	r3, r3, #3
 800a772:	4413      	add	r3, r2
 800a774:	f04f 32ff 	mov.w	r2, #4294967295
 800a778:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a77a:	4a58      	ldr	r2, [pc, #352]	; (800a8dc <UTIL_SEQ_Run+0x1ec>)
 800a77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a77e:	00db      	lsls	r3, r3, #3
 800a780:	4413      	add	r3, r2
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	4013      	ands	r3, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 f973 	bl	800aa74 <SEQ_BitPosition>
 800a78e:	4603      	mov	r3, r0
 800a790:	461a      	mov	r2, r3
 800a792:	4b53      	ldr	r3, [pc, #332]	; (800a8e0 <UTIL_SEQ_Run+0x1f0>)
 800a794:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a796:	4a51      	ldr	r2, [pc, #324]	; (800a8dc <UTIL_SEQ_Run+0x1ec>)
 800a798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	4413      	add	r3, r2
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	4b4f      	ldr	r3, [pc, #316]	; (800a8e0 <UTIL_SEQ_Run+0x1f0>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2101      	movs	r1, #1
 800a7a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7aa:	43db      	mvns	r3, r3
 800a7ac:	401a      	ands	r2, r3
 800a7ae:	494b      	ldr	r1, [pc, #300]	; (800a8dc <UTIL_SEQ_Run+0x1ec>)
 800a7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b2:	00db      	lsls	r3, r3, #3
 800a7b4:	440b      	add	r3, r1
 800a7b6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a7bc:	61bb      	str	r3, [r7, #24]
  return(result);
 800a7be:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a7c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7c2:	b672      	cpsid	i
}
 800a7c4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a7c6:	4b46      	ldr	r3, [pc, #280]	; (800a8e0 <UTIL_SEQ_Run+0x1f0>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d0:	43da      	mvns	r2, r3
 800a7d2:	4b3e      	ldr	r3, [pc, #248]	; (800a8cc <UTIL_SEQ_Run+0x1dc>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	4a3c      	ldr	r2, [pc, #240]	; (800a8cc <UTIL_SEQ_Run+0x1dc>)
 800a7da:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a7dc:	2302      	movs	r3, #2
 800a7de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7e0:	e013      	b.n	800a80a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	4a3d      	ldr	r2, [pc, #244]	; (800a8dc <UTIL_SEQ_Run+0x1ec>)
 800a7e8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a7ec:	4b3c      	ldr	r3, [pc, #240]	; (800a8e0 <UTIL_SEQ_Run+0x1f0>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f6:	43da      	mvns	r2, r3
 800a7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	400a      	ands	r2, r1
 800a7fe:	4937      	ldr	r1, [pc, #220]	; (800a8dc <UTIL_SEQ_Run+0x1ec>)
 800a800:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a806:	3b01      	subs	r3, #1
 800a808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1e8      	bne.n	800a7e2 <UTIL_SEQ_Run+0xf2>
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f383 8810 	msr	PRIMASK, r3
}
 800a81a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a81c:	4b30      	ldr	r3, [pc, #192]	; (800a8e0 <UTIL_SEQ_Run+0x1f0>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a30      	ldr	r2, [pc, #192]	; (800a8e4 <UTIL_SEQ_Run+0x1f4>)
 800a822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a826:	4798      	blx	r3

    local_taskset = TaskSet;
 800a828:	4b28      	ldr	r3, [pc, #160]	; (800a8cc <UTIL_SEQ_Run+0x1dc>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a82e:	4b28      	ldr	r3, [pc, #160]	; (800a8d0 <UTIL_SEQ_Run+0x1e0>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a834:	4b27      	ldr	r3, [pc, #156]	; (800a8d4 <UTIL_SEQ_Run+0x1e4>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a83a:	4b27      	ldr	r3, [pc, #156]	; (800a8d8 <UTIL_SEQ_Run+0x1e8>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	401a      	ands	r2, r3
 800a846:	4b20      	ldr	r3, [pc, #128]	; (800a8c8 <UTIL_SEQ_Run+0x1d8>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4013      	ands	r3, r2
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d005      	beq.n	800a85c <UTIL_SEQ_Run+0x16c>
 800a850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a854:	4013      	ands	r3, r2
 800a856:	2b00      	cmp	r3, #0
 800a858:	f43f af64 	beq.w	800a724 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a85c:	4b20      	ldr	r3, [pc, #128]	; (800a8e0 <UTIL_SEQ_Run+0x1f0>)
 800a85e:	f04f 32ff 	mov.w	r2, #4294967295
 800a862:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a864:	f000 f8f8 	bl	800aa58 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a868:	f3ef 8310 	mrs	r3, PRIMASK
 800a86c:	613b      	str	r3, [r7, #16]
  return(result);
 800a86e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a872:	b672      	cpsid	i
}
 800a874:	bf00      	nop
  local_taskset = TaskSet;
 800a876:	4b15      	ldr	r3, [pc, #84]	; (800a8cc <UTIL_SEQ_Run+0x1dc>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a87c:	4b14      	ldr	r3, [pc, #80]	; (800a8d0 <UTIL_SEQ_Run+0x1e0>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a882:	4b14      	ldr	r3, [pc, #80]	; (800a8d4 <UTIL_SEQ_Run+0x1e4>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	401a      	ands	r2, r3
 800a88e:	4b0e      	ldr	r3, [pc, #56]	; (800a8c8 <UTIL_SEQ_Run+0x1d8>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4013      	ands	r3, r2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d107      	bne.n	800a8a8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a898:	4b0f      	ldr	r3, [pc, #60]	; (800a8d8 <UTIL_SEQ_Run+0x1e8>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89e:	4013      	ands	r3, r2
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a8a4:	f7f7 fdbb 	bl	800241e <UTIL_SEQ_Idle>
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f383 8810 	msr	PRIMASK, r3
}
 800a8b2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a8b4:	f000 f8d7 	bl	800aa66 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a8b8:	4a03      	ldr	r2, [pc, #12]	; (800a8c8 <UTIL_SEQ_Run+0x1d8>)
 800a8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8bc:	6013      	str	r3, [r2, #0]

  return;
 800a8be:	bf00      	nop
}
 800a8c0:	3740      	adds	r7, #64	; 0x40
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	2000003c 	.word	0x2000003c
 800a8cc:	200006d0 	.word	0x200006d0
 800a8d0:	200006d4 	.word	0x200006d4
 800a8d4:	20000038 	.word	0x20000038
 800a8d8:	200006d8 	.word	0x200006d8
 800a8dc:	20000760 	.word	0x20000760
 800a8e0:	200006dc 	.word	0x200006dc
 800a8e4:	200006e0 	.word	0x200006e0

0800a8e8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a8f8:	617b      	str	r3, [r7, #20]
  return(result);
 800a8fa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a8fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8fe:	b672      	cpsid	i
}
 800a900:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 f8b6 	bl	800aa74 <SEQ_BitPosition>
 800a908:	4603      	mov	r3, r0
 800a90a:	4619      	mov	r1, r3
 800a90c:	4a06      	ldr	r2, [pc, #24]	; (800a928 <UTIL_SEQ_RegTask+0x40>)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	f383 8810 	msr	PRIMASK, r3
}
 800a91e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a920:	bf00      	nop
}
 800a922:	3720      	adds	r7, #32
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	200006e0 	.word	0x200006e0

0800a92c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a92c:	b480      	push	{r7}
 800a92e:	b087      	sub	sp, #28
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a936:	f3ef 8310 	mrs	r3, PRIMASK
 800a93a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a93c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a93e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a940:	b672      	cpsid	i
}
 800a942:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a944:	4b0d      	ldr	r3, [pc, #52]	; (800a97c <UTIL_SEQ_SetTask+0x50>)
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	4a0b      	ldr	r2, [pc, #44]	; (800a97c <UTIL_SEQ_SetTask+0x50>)
 800a94e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a950:	4a0b      	ldr	r2, [pc, #44]	; (800a980 <UTIL_SEQ_SetTask+0x54>)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	431a      	orrs	r2, r3
 800a95c:	4908      	ldr	r1, [pc, #32]	; (800a980 <UTIL_SEQ_SetTask+0x54>)
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	f383 8810 	msr	PRIMASK, r3
}
 800a96e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a970:	bf00      	nop
}
 800a972:	371c      	adds	r7, #28
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	200006d0 	.word	0x200006d0
 800a980:	20000760 	.word	0x20000760

0800a984 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a984:	b480      	push	{r7}
 800a986:	b087      	sub	sp, #28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a98c:	f3ef 8310 	mrs	r3, PRIMASK
 800a990:	60fb      	str	r3, [r7, #12]
  return(result);
 800a992:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a994:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a996:	b672      	cpsid	i
}
 800a998:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a99a:	4b09      	ldr	r3, [pc, #36]	; (800a9c0 <UTIL_SEQ_SetEvt+0x3c>)
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	4a07      	ldr	r2, [pc, #28]	; (800a9c0 <UTIL_SEQ_SetEvt+0x3c>)
 800a9a4:	6013      	str	r3, [r2, #0]
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	f383 8810 	msr	PRIMASK, r3
}
 800a9b0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a9b2:	bf00      	nop
}
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	200006d4 	.word	0x200006d4

0800a9c4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a9cc:	4b1f      	ldr	r3, [pc, #124]	; (800aa4c <UTIL_SEQ_WaitEvt+0x88>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a9d2:	4b1e      	ldr	r3, [pc, #120]	; (800aa4c <UTIL_SEQ_WaitEvt+0x88>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9da:	d102      	bne.n	800a9e2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	61fb      	str	r3, [r7, #28]
 800a9e0:	e005      	b.n	800a9ee <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a9e2:	4b1a      	ldr	r3, [pc, #104]	; (800aa4c <UTIL_SEQ_WaitEvt+0x88>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ec:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a9ee:	4b18      	ldr	r3, [pc, #96]	; (800aa50 <UTIL_SEQ_WaitEvt+0x8c>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a9f4:	4a16      	ldr	r2, [pc, #88]	; (800aa50 <UTIL_SEQ_WaitEvt+0x8c>)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a9fa:	e003      	b.n	800aa04 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a9fc:	6879      	ldr	r1, [r7, #4]
 800a9fe:	69f8      	ldr	r0, [r7, #28]
 800aa00:	f7f7 fd14 	bl	800242c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800aa04:	4b13      	ldr	r3, [pc, #76]	; (800aa54 <UTIL_SEQ_WaitEvt+0x90>)
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4013      	ands	r3, r2
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0f5      	beq.n	800a9fc <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800aa10:	4a0e      	ldr	r2, [pc, #56]	; (800aa4c <UTIL_SEQ_WaitEvt+0x88>)
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa16:	f3ef 8310 	mrs	r3, PRIMASK
 800aa1a:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa1c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aa1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa20:	b672      	cpsid	i
}
 800aa22:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	43da      	mvns	r2, r3
 800aa28:	4b0a      	ldr	r3, [pc, #40]	; (800aa54 <UTIL_SEQ_WaitEvt+0x90>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	4a09      	ldr	r2, [pc, #36]	; (800aa54 <UTIL_SEQ_WaitEvt+0x90>)
 800aa30:	6013      	str	r3, [r2, #0]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f383 8810 	msr	PRIMASK, r3
}
 800aa3c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800aa3e:	4a04      	ldr	r2, [pc, #16]	; (800aa50 <UTIL_SEQ_WaitEvt+0x8c>)
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	6013      	str	r3, [r2, #0]
  return;
 800aa44:	bf00      	nop
}
 800aa46:	3720      	adds	r7, #32
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	200006dc 	.word	0x200006dc
 800aa50:	200006d8 	.word	0x200006d8
 800aa54:	200006d4 	.word	0x200006d4

0800aa58 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800aa5c:	bf00      	nop
}
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800aa66:	b480      	push	{r7}
 800aa68:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800aa6a:	bf00      	nop
}
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	0c1b      	lsrs	r3, r3, #16
 800aa88:	041b      	lsls	r3, r3, #16
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d104      	bne.n	800aa98 <SEQ_BitPosition+0x24>
 800aa8e:	2310      	movs	r3, #16
 800aa90:	73fb      	strb	r3, [r7, #15]
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	041b      	lsls	r3, r3, #16
 800aa96:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d105      	bne.n	800aaae <SEQ_BitPosition+0x3a>
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	3308      	adds	r3, #8
 800aaa6:	73fb      	strb	r3, [r7, #15]
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	021b      	lsls	r3, r3, #8
 800aaac:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d105      	bne.n	800aac4 <SEQ_BitPosition+0x50>
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	3304      	adds	r3, #4
 800aabc:	73fb      	strb	r3, [r7, #15]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	011b      	lsls	r3, r3, #4
 800aac2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	0f1b      	lsrs	r3, r3, #28
 800aac8:	4a07      	ldr	r2, [pc, #28]	; (800aae8 <SEQ_BitPosition+0x74>)
 800aaca:	5cd2      	ldrb	r2, [r2, r3]
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	4413      	add	r3, r2
 800aad0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
 800aad4:	f1c3 031f 	rsb	r3, r3, #31
 800aad8:	b2db      	uxtb	r3, r3
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	0800c6d8 	.word	0x0800c6d8

0800aaec <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	605a      	str	r2, [r3, #4]
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab14:	f3ef 8310 	mrs	r3, PRIMASK
 800ab18:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab1e:	b672      	cpsid	i
}
 800ab20:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d102      	bne.n	800ab32 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	75fb      	strb	r3, [r7, #23]
 800ab30:	e001      	b.n	800ab36 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ab32:	2300      	movs	r3, #0
 800ab34:	75fb      	strb	r3, [r7, #23]
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f383 8810 	msr	PRIMASK, r3
}
 800ab40:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	371c      	adds	r7, #28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b087      	sub	sp, #28
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ab5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab60:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab64:	b672      	cpsid	i
}
 800ab66:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	683a      	ldr	r2, [r7, #0]
 800ab7a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	605a      	str	r2, [r3, #4]
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f383 8810 	msr	PRIMASK, r3
}
 800ab8e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ab90:	bf00      	nop
 800ab92:	371c      	adds	r7, #28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b087      	sub	sp, #28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aba6:	f3ef 8310 	mrs	r3, PRIMASK
 800abaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800abac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800abae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abb0:	b672      	cpsid	i
}
 800abb2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	f383 8810 	msr	PRIMASK, r3
}
 800abda:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800abdc:	bf00      	nop
 800abde:	371c      	adds	r7, #28
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abf0:	f3ef 8310 	mrs	r3, PRIMASK
 800abf4:	60fb      	str	r3, [r7, #12]
  return(result);
 800abf6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800abf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abfa:	b672      	cpsid	i
}
 800abfc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	6812      	ldr	r2, [r2, #0]
 800ac06:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	6852      	ldr	r2, [r2, #4]
 800ac10:	605a      	str	r2, [r3, #4]
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f383 8810 	msr	PRIMASK, r3
}
 800ac1c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac1e:	bf00      	nop
 800ac20:	371c      	adds	r7, #28
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b086      	sub	sp, #24
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac34:	f3ef 8310 	mrs	r3, PRIMASK
 800ac38:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac3e:	b672      	cpsid	i
}
 800ac40:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7ff ffca 	bl	800abe8 <LST_remove_node>
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f383 8810 	msr	PRIMASK, r3
}
 800ac5e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac60:	bf00      	nop
 800ac62:	3718      	adds	r7, #24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <__assert_func>:
 800ac68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac6a:	4614      	mov	r4, r2
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	4b09      	ldr	r3, [pc, #36]	; (800ac94 <__assert_func+0x2c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4605      	mov	r5, r0
 800ac74:	68d8      	ldr	r0, [r3, #12]
 800ac76:	b14c      	cbz	r4, 800ac8c <__assert_func+0x24>
 800ac78:	4b07      	ldr	r3, [pc, #28]	; (800ac98 <__assert_func+0x30>)
 800ac7a:	9100      	str	r1, [sp, #0]
 800ac7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac80:	4906      	ldr	r1, [pc, #24]	; (800ac9c <__assert_func+0x34>)
 800ac82:	462b      	mov	r3, r5
 800ac84:	f000 f814 	bl	800acb0 <fiprintf>
 800ac88:	f000 fd40 	bl	800b70c <abort>
 800ac8c:	4b04      	ldr	r3, [pc, #16]	; (800aca0 <__assert_func+0x38>)
 800ac8e:	461c      	mov	r4, r3
 800ac90:	e7f3      	b.n	800ac7a <__assert_func+0x12>
 800ac92:	bf00      	nop
 800ac94:	20000040 	.word	0x20000040
 800ac98:	0800c6e8 	.word	0x0800c6e8
 800ac9c:	0800c6f5 	.word	0x0800c6f5
 800aca0:	0800c723 	.word	0x0800c723

0800aca4 <__errno>:
 800aca4:	4b01      	ldr	r3, [pc, #4]	; (800acac <__errno+0x8>)
 800aca6:	6818      	ldr	r0, [r3, #0]
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20000040 	.word	0x20000040

0800acb0 <fiprintf>:
 800acb0:	b40e      	push	{r1, r2, r3}
 800acb2:	b503      	push	{r0, r1, lr}
 800acb4:	4601      	mov	r1, r0
 800acb6:	ab03      	add	r3, sp, #12
 800acb8:	4805      	ldr	r0, [pc, #20]	; (800acd0 <fiprintf+0x20>)
 800acba:	f853 2b04 	ldr.w	r2, [r3], #4
 800acbe:	6800      	ldr	r0, [r0, #0]
 800acc0:	9301      	str	r3, [sp, #4]
 800acc2:	f000 f95b 	bl	800af7c <_vfiprintf_r>
 800acc6:	b002      	add	sp, #8
 800acc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800accc:	b003      	add	sp, #12
 800acce:	4770      	bx	lr
 800acd0:	20000040 	.word	0x20000040

0800acd4 <__libc_init_array>:
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	4d0d      	ldr	r5, [pc, #52]	; (800ad0c <__libc_init_array+0x38>)
 800acd8:	4c0d      	ldr	r4, [pc, #52]	; (800ad10 <__libc_init_array+0x3c>)
 800acda:	1b64      	subs	r4, r4, r5
 800acdc:	10a4      	asrs	r4, r4, #2
 800acde:	2600      	movs	r6, #0
 800ace0:	42a6      	cmp	r6, r4
 800ace2:	d109      	bne.n	800acf8 <__libc_init_array+0x24>
 800ace4:	4d0b      	ldr	r5, [pc, #44]	; (800ad14 <__libc_init_array+0x40>)
 800ace6:	4c0c      	ldr	r4, [pc, #48]	; (800ad18 <__libc_init_array+0x44>)
 800ace8:	f001 f9e0 	bl	800c0ac <_init>
 800acec:	1b64      	subs	r4, r4, r5
 800acee:	10a4      	asrs	r4, r4, #2
 800acf0:	2600      	movs	r6, #0
 800acf2:	42a6      	cmp	r6, r4
 800acf4:	d105      	bne.n	800ad02 <__libc_init_array+0x2e>
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800acfc:	4798      	blx	r3
 800acfe:	3601      	adds	r6, #1
 800ad00:	e7ee      	b.n	800ace0 <__libc_init_array+0xc>
 800ad02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad06:	4798      	blx	r3
 800ad08:	3601      	adds	r6, #1
 800ad0a:	e7f2      	b.n	800acf2 <__libc_init_array+0x1e>
 800ad0c:	0800c7bc 	.word	0x0800c7bc
 800ad10:	0800c7bc 	.word	0x0800c7bc
 800ad14:	0800c7bc 	.word	0x0800c7bc
 800ad18:	0800c7c0 	.word	0x0800c7c0

0800ad1c <malloc>:
 800ad1c:	4b02      	ldr	r3, [pc, #8]	; (800ad28 <malloc+0xc>)
 800ad1e:	4601      	mov	r1, r0
 800ad20:	6818      	ldr	r0, [r3, #0]
 800ad22:	f000 b88d 	b.w	800ae40 <_malloc_r>
 800ad26:	bf00      	nop
 800ad28:	20000040 	.word	0x20000040

0800ad2c <free>:
 800ad2c:	4b02      	ldr	r3, [pc, #8]	; (800ad38 <free+0xc>)
 800ad2e:	4601      	mov	r1, r0
 800ad30:	6818      	ldr	r0, [r3, #0]
 800ad32:	f000 b819 	b.w	800ad68 <_free_r>
 800ad36:	bf00      	nop
 800ad38:	20000040 	.word	0x20000040

0800ad3c <memcpy>:
 800ad3c:	440a      	add	r2, r1
 800ad3e:	4291      	cmp	r1, r2
 800ad40:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad44:	d100      	bne.n	800ad48 <memcpy+0xc>
 800ad46:	4770      	bx	lr
 800ad48:	b510      	push	{r4, lr}
 800ad4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad52:	4291      	cmp	r1, r2
 800ad54:	d1f9      	bne.n	800ad4a <memcpy+0xe>
 800ad56:	bd10      	pop	{r4, pc}

0800ad58 <memset>:
 800ad58:	4402      	add	r2, r0
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d100      	bne.n	800ad62 <memset+0xa>
 800ad60:	4770      	bx	lr
 800ad62:	f803 1b01 	strb.w	r1, [r3], #1
 800ad66:	e7f9      	b.n	800ad5c <memset+0x4>

0800ad68 <_free_r>:
 800ad68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad6a:	2900      	cmp	r1, #0
 800ad6c:	d044      	beq.n	800adf8 <_free_r+0x90>
 800ad6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad72:	9001      	str	r0, [sp, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f1a1 0404 	sub.w	r4, r1, #4
 800ad7a:	bfb8      	it	lt
 800ad7c:	18e4      	addlt	r4, r4, r3
 800ad7e:	f000 ff07 	bl	800bb90 <__malloc_lock>
 800ad82:	4a1e      	ldr	r2, [pc, #120]	; (800adfc <_free_r+0x94>)
 800ad84:	9801      	ldr	r0, [sp, #4]
 800ad86:	6813      	ldr	r3, [r2, #0]
 800ad88:	b933      	cbnz	r3, 800ad98 <_free_r+0x30>
 800ad8a:	6063      	str	r3, [r4, #4]
 800ad8c:	6014      	str	r4, [r2, #0]
 800ad8e:	b003      	add	sp, #12
 800ad90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad94:	f000 bf02 	b.w	800bb9c <__malloc_unlock>
 800ad98:	42a3      	cmp	r3, r4
 800ad9a:	d908      	bls.n	800adae <_free_r+0x46>
 800ad9c:	6825      	ldr	r5, [r4, #0]
 800ad9e:	1961      	adds	r1, r4, r5
 800ada0:	428b      	cmp	r3, r1
 800ada2:	bf01      	itttt	eq
 800ada4:	6819      	ldreq	r1, [r3, #0]
 800ada6:	685b      	ldreq	r3, [r3, #4]
 800ada8:	1949      	addeq	r1, r1, r5
 800adaa:	6021      	streq	r1, [r4, #0]
 800adac:	e7ed      	b.n	800ad8a <_free_r+0x22>
 800adae:	461a      	mov	r2, r3
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	b10b      	cbz	r3, 800adb8 <_free_r+0x50>
 800adb4:	42a3      	cmp	r3, r4
 800adb6:	d9fa      	bls.n	800adae <_free_r+0x46>
 800adb8:	6811      	ldr	r1, [r2, #0]
 800adba:	1855      	adds	r5, r2, r1
 800adbc:	42a5      	cmp	r5, r4
 800adbe:	d10b      	bne.n	800add8 <_free_r+0x70>
 800adc0:	6824      	ldr	r4, [r4, #0]
 800adc2:	4421      	add	r1, r4
 800adc4:	1854      	adds	r4, r2, r1
 800adc6:	42a3      	cmp	r3, r4
 800adc8:	6011      	str	r1, [r2, #0]
 800adca:	d1e0      	bne.n	800ad8e <_free_r+0x26>
 800adcc:	681c      	ldr	r4, [r3, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	6053      	str	r3, [r2, #4]
 800add2:	4421      	add	r1, r4
 800add4:	6011      	str	r1, [r2, #0]
 800add6:	e7da      	b.n	800ad8e <_free_r+0x26>
 800add8:	d902      	bls.n	800ade0 <_free_r+0x78>
 800adda:	230c      	movs	r3, #12
 800addc:	6003      	str	r3, [r0, #0]
 800adde:	e7d6      	b.n	800ad8e <_free_r+0x26>
 800ade0:	6825      	ldr	r5, [r4, #0]
 800ade2:	1961      	adds	r1, r4, r5
 800ade4:	428b      	cmp	r3, r1
 800ade6:	bf04      	itt	eq
 800ade8:	6819      	ldreq	r1, [r3, #0]
 800adea:	685b      	ldreq	r3, [r3, #4]
 800adec:	6063      	str	r3, [r4, #4]
 800adee:	bf04      	itt	eq
 800adf0:	1949      	addeq	r1, r1, r5
 800adf2:	6021      	streq	r1, [r4, #0]
 800adf4:	6054      	str	r4, [r2, #4]
 800adf6:	e7ca      	b.n	800ad8e <_free_r+0x26>
 800adf8:	b003      	add	sp, #12
 800adfa:	bd30      	pop	{r4, r5, pc}
 800adfc:	20000770 	.word	0x20000770

0800ae00 <sbrk_aligned>:
 800ae00:	b570      	push	{r4, r5, r6, lr}
 800ae02:	4e0e      	ldr	r6, [pc, #56]	; (800ae3c <sbrk_aligned+0x3c>)
 800ae04:	460c      	mov	r4, r1
 800ae06:	6831      	ldr	r1, [r6, #0]
 800ae08:	4605      	mov	r5, r0
 800ae0a:	b911      	cbnz	r1, 800ae12 <sbrk_aligned+0x12>
 800ae0c:	f000 fb7a 	bl	800b504 <_sbrk_r>
 800ae10:	6030      	str	r0, [r6, #0]
 800ae12:	4621      	mov	r1, r4
 800ae14:	4628      	mov	r0, r5
 800ae16:	f000 fb75 	bl	800b504 <_sbrk_r>
 800ae1a:	1c43      	adds	r3, r0, #1
 800ae1c:	d00a      	beq.n	800ae34 <sbrk_aligned+0x34>
 800ae1e:	1cc4      	adds	r4, r0, #3
 800ae20:	f024 0403 	bic.w	r4, r4, #3
 800ae24:	42a0      	cmp	r0, r4
 800ae26:	d007      	beq.n	800ae38 <sbrk_aligned+0x38>
 800ae28:	1a21      	subs	r1, r4, r0
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f000 fb6a 	bl	800b504 <_sbrk_r>
 800ae30:	3001      	adds	r0, #1
 800ae32:	d101      	bne.n	800ae38 <sbrk_aligned+0x38>
 800ae34:	f04f 34ff 	mov.w	r4, #4294967295
 800ae38:	4620      	mov	r0, r4
 800ae3a:	bd70      	pop	{r4, r5, r6, pc}
 800ae3c:	20000774 	.word	0x20000774

0800ae40 <_malloc_r>:
 800ae40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae44:	1ccd      	adds	r5, r1, #3
 800ae46:	f025 0503 	bic.w	r5, r5, #3
 800ae4a:	3508      	adds	r5, #8
 800ae4c:	2d0c      	cmp	r5, #12
 800ae4e:	bf38      	it	cc
 800ae50:	250c      	movcc	r5, #12
 800ae52:	2d00      	cmp	r5, #0
 800ae54:	4607      	mov	r7, r0
 800ae56:	db01      	blt.n	800ae5c <_malloc_r+0x1c>
 800ae58:	42a9      	cmp	r1, r5
 800ae5a:	d905      	bls.n	800ae68 <_malloc_r+0x28>
 800ae5c:	230c      	movs	r3, #12
 800ae5e:	603b      	str	r3, [r7, #0]
 800ae60:	2600      	movs	r6, #0
 800ae62:	4630      	mov	r0, r6
 800ae64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae68:	4e2e      	ldr	r6, [pc, #184]	; (800af24 <_malloc_r+0xe4>)
 800ae6a:	f000 fe91 	bl	800bb90 <__malloc_lock>
 800ae6e:	6833      	ldr	r3, [r6, #0]
 800ae70:	461c      	mov	r4, r3
 800ae72:	bb34      	cbnz	r4, 800aec2 <_malloc_r+0x82>
 800ae74:	4629      	mov	r1, r5
 800ae76:	4638      	mov	r0, r7
 800ae78:	f7ff ffc2 	bl	800ae00 <sbrk_aligned>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	4604      	mov	r4, r0
 800ae80:	d14d      	bne.n	800af1e <_malloc_r+0xde>
 800ae82:	6834      	ldr	r4, [r6, #0]
 800ae84:	4626      	mov	r6, r4
 800ae86:	2e00      	cmp	r6, #0
 800ae88:	d140      	bne.n	800af0c <_malloc_r+0xcc>
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	4631      	mov	r1, r6
 800ae8e:	4638      	mov	r0, r7
 800ae90:	eb04 0803 	add.w	r8, r4, r3
 800ae94:	f000 fb36 	bl	800b504 <_sbrk_r>
 800ae98:	4580      	cmp	r8, r0
 800ae9a:	d13a      	bne.n	800af12 <_malloc_r+0xd2>
 800ae9c:	6821      	ldr	r1, [r4, #0]
 800ae9e:	3503      	adds	r5, #3
 800aea0:	1a6d      	subs	r5, r5, r1
 800aea2:	f025 0503 	bic.w	r5, r5, #3
 800aea6:	3508      	adds	r5, #8
 800aea8:	2d0c      	cmp	r5, #12
 800aeaa:	bf38      	it	cc
 800aeac:	250c      	movcc	r5, #12
 800aeae:	4629      	mov	r1, r5
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	f7ff ffa5 	bl	800ae00 <sbrk_aligned>
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	d02b      	beq.n	800af12 <_malloc_r+0xd2>
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	442b      	add	r3, r5
 800aebe:	6023      	str	r3, [r4, #0]
 800aec0:	e00e      	b.n	800aee0 <_malloc_r+0xa0>
 800aec2:	6822      	ldr	r2, [r4, #0]
 800aec4:	1b52      	subs	r2, r2, r5
 800aec6:	d41e      	bmi.n	800af06 <_malloc_r+0xc6>
 800aec8:	2a0b      	cmp	r2, #11
 800aeca:	d916      	bls.n	800aefa <_malloc_r+0xba>
 800aecc:	1961      	adds	r1, r4, r5
 800aece:	42a3      	cmp	r3, r4
 800aed0:	6025      	str	r5, [r4, #0]
 800aed2:	bf18      	it	ne
 800aed4:	6059      	strne	r1, [r3, #4]
 800aed6:	6863      	ldr	r3, [r4, #4]
 800aed8:	bf08      	it	eq
 800aeda:	6031      	streq	r1, [r6, #0]
 800aedc:	5162      	str	r2, [r4, r5]
 800aede:	604b      	str	r3, [r1, #4]
 800aee0:	4638      	mov	r0, r7
 800aee2:	f104 060b 	add.w	r6, r4, #11
 800aee6:	f000 fe59 	bl	800bb9c <__malloc_unlock>
 800aeea:	f026 0607 	bic.w	r6, r6, #7
 800aeee:	1d23      	adds	r3, r4, #4
 800aef0:	1af2      	subs	r2, r6, r3
 800aef2:	d0b6      	beq.n	800ae62 <_malloc_r+0x22>
 800aef4:	1b9b      	subs	r3, r3, r6
 800aef6:	50a3      	str	r3, [r4, r2]
 800aef8:	e7b3      	b.n	800ae62 <_malloc_r+0x22>
 800aefa:	6862      	ldr	r2, [r4, #4]
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	bf0c      	ite	eq
 800af00:	6032      	streq	r2, [r6, #0]
 800af02:	605a      	strne	r2, [r3, #4]
 800af04:	e7ec      	b.n	800aee0 <_malloc_r+0xa0>
 800af06:	4623      	mov	r3, r4
 800af08:	6864      	ldr	r4, [r4, #4]
 800af0a:	e7b2      	b.n	800ae72 <_malloc_r+0x32>
 800af0c:	4634      	mov	r4, r6
 800af0e:	6876      	ldr	r6, [r6, #4]
 800af10:	e7b9      	b.n	800ae86 <_malloc_r+0x46>
 800af12:	230c      	movs	r3, #12
 800af14:	603b      	str	r3, [r7, #0]
 800af16:	4638      	mov	r0, r7
 800af18:	f000 fe40 	bl	800bb9c <__malloc_unlock>
 800af1c:	e7a1      	b.n	800ae62 <_malloc_r+0x22>
 800af1e:	6025      	str	r5, [r4, #0]
 800af20:	e7de      	b.n	800aee0 <_malloc_r+0xa0>
 800af22:	bf00      	nop
 800af24:	20000770 	.word	0x20000770

0800af28 <__sfputc_r>:
 800af28:	6893      	ldr	r3, [r2, #8]
 800af2a:	3b01      	subs	r3, #1
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	b410      	push	{r4}
 800af30:	6093      	str	r3, [r2, #8]
 800af32:	da08      	bge.n	800af46 <__sfputc_r+0x1e>
 800af34:	6994      	ldr	r4, [r2, #24]
 800af36:	42a3      	cmp	r3, r4
 800af38:	db01      	blt.n	800af3e <__sfputc_r+0x16>
 800af3a:	290a      	cmp	r1, #10
 800af3c:	d103      	bne.n	800af46 <__sfputc_r+0x1e>
 800af3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af42:	f000 bb23 	b.w	800b58c <__swbuf_r>
 800af46:	6813      	ldr	r3, [r2, #0]
 800af48:	1c58      	adds	r0, r3, #1
 800af4a:	6010      	str	r0, [r2, #0]
 800af4c:	7019      	strb	r1, [r3, #0]
 800af4e:	4608      	mov	r0, r1
 800af50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af54:	4770      	bx	lr

0800af56 <__sfputs_r>:
 800af56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af58:	4606      	mov	r6, r0
 800af5a:	460f      	mov	r7, r1
 800af5c:	4614      	mov	r4, r2
 800af5e:	18d5      	adds	r5, r2, r3
 800af60:	42ac      	cmp	r4, r5
 800af62:	d101      	bne.n	800af68 <__sfputs_r+0x12>
 800af64:	2000      	movs	r0, #0
 800af66:	e007      	b.n	800af78 <__sfputs_r+0x22>
 800af68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af6c:	463a      	mov	r2, r7
 800af6e:	4630      	mov	r0, r6
 800af70:	f7ff ffda 	bl	800af28 <__sfputc_r>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d1f3      	bne.n	800af60 <__sfputs_r+0xa>
 800af78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af7c <_vfiprintf_r>:
 800af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	460d      	mov	r5, r1
 800af82:	b09d      	sub	sp, #116	; 0x74
 800af84:	4614      	mov	r4, r2
 800af86:	4698      	mov	r8, r3
 800af88:	4606      	mov	r6, r0
 800af8a:	b118      	cbz	r0, 800af94 <_vfiprintf_r+0x18>
 800af8c:	6983      	ldr	r3, [r0, #24]
 800af8e:	b90b      	cbnz	r3, 800af94 <_vfiprintf_r+0x18>
 800af90:	f000 fcde 	bl	800b950 <__sinit>
 800af94:	4b89      	ldr	r3, [pc, #548]	; (800b1bc <_vfiprintf_r+0x240>)
 800af96:	429d      	cmp	r5, r3
 800af98:	d11b      	bne.n	800afd2 <_vfiprintf_r+0x56>
 800af9a:	6875      	ldr	r5, [r6, #4]
 800af9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af9e:	07d9      	lsls	r1, r3, #31
 800afa0:	d405      	bmi.n	800afae <_vfiprintf_r+0x32>
 800afa2:	89ab      	ldrh	r3, [r5, #12]
 800afa4:	059a      	lsls	r2, r3, #22
 800afa6:	d402      	bmi.n	800afae <_vfiprintf_r+0x32>
 800afa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afaa:	f000 fd6f 	bl	800ba8c <__retarget_lock_acquire_recursive>
 800afae:	89ab      	ldrh	r3, [r5, #12]
 800afb0:	071b      	lsls	r3, r3, #28
 800afb2:	d501      	bpl.n	800afb8 <_vfiprintf_r+0x3c>
 800afb4:	692b      	ldr	r3, [r5, #16]
 800afb6:	b9eb      	cbnz	r3, 800aff4 <_vfiprintf_r+0x78>
 800afb8:	4629      	mov	r1, r5
 800afba:	4630      	mov	r0, r6
 800afbc:	f000 fb38 	bl	800b630 <__swsetup_r>
 800afc0:	b1c0      	cbz	r0, 800aff4 <_vfiprintf_r+0x78>
 800afc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afc4:	07dc      	lsls	r4, r3, #31
 800afc6:	d50e      	bpl.n	800afe6 <_vfiprintf_r+0x6a>
 800afc8:	f04f 30ff 	mov.w	r0, #4294967295
 800afcc:	b01d      	add	sp, #116	; 0x74
 800afce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd2:	4b7b      	ldr	r3, [pc, #492]	; (800b1c0 <_vfiprintf_r+0x244>)
 800afd4:	429d      	cmp	r5, r3
 800afd6:	d101      	bne.n	800afdc <_vfiprintf_r+0x60>
 800afd8:	68b5      	ldr	r5, [r6, #8]
 800afda:	e7df      	b.n	800af9c <_vfiprintf_r+0x20>
 800afdc:	4b79      	ldr	r3, [pc, #484]	; (800b1c4 <_vfiprintf_r+0x248>)
 800afde:	429d      	cmp	r5, r3
 800afe0:	bf08      	it	eq
 800afe2:	68f5      	ldreq	r5, [r6, #12]
 800afe4:	e7da      	b.n	800af9c <_vfiprintf_r+0x20>
 800afe6:	89ab      	ldrh	r3, [r5, #12]
 800afe8:	0598      	lsls	r0, r3, #22
 800afea:	d4ed      	bmi.n	800afc8 <_vfiprintf_r+0x4c>
 800afec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afee:	f000 fd4e 	bl	800ba8e <__retarget_lock_release_recursive>
 800aff2:	e7e9      	b.n	800afc8 <_vfiprintf_r+0x4c>
 800aff4:	2300      	movs	r3, #0
 800aff6:	9309      	str	r3, [sp, #36]	; 0x24
 800aff8:	2320      	movs	r3, #32
 800affa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800affe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b002:	2330      	movs	r3, #48	; 0x30
 800b004:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1c8 <_vfiprintf_r+0x24c>
 800b008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b00c:	f04f 0901 	mov.w	r9, #1
 800b010:	4623      	mov	r3, r4
 800b012:	469a      	mov	sl, r3
 800b014:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b018:	b10a      	cbz	r2, 800b01e <_vfiprintf_r+0xa2>
 800b01a:	2a25      	cmp	r2, #37	; 0x25
 800b01c:	d1f9      	bne.n	800b012 <_vfiprintf_r+0x96>
 800b01e:	ebba 0b04 	subs.w	fp, sl, r4
 800b022:	d00b      	beq.n	800b03c <_vfiprintf_r+0xc0>
 800b024:	465b      	mov	r3, fp
 800b026:	4622      	mov	r2, r4
 800b028:	4629      	mov	r1, r5
 800b02a:	4630      	mov	r0, r6
 800b02c:	f7ff ff93 	bl	800af56 <__sfputs_r>
 800b030:	3001      	adds	r0, #1
 800b032:	f000 80aa 	beq.w	800b18a <_vfiprintf_r+0x20e>
 800b036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b038:	445a      	add	r2, fp
 800b03a:	9209      	str	r2, [sp, #36]	; 0x24
 800b03c:	f89a 3000 	ldrb.w	r3, [sl]
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 80a2 	beq.w	800b18a <_vfiprintf_r+0x20e>
 800b046:	2300      	movs	r3, #0
 800b048:	f04f 32ff 	mov.w	r2, #4294967295
 800b04c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b050:	f10a 0a01 	add.w	sl, sl, #1
 800b054:	9304      	str	r3, [sp, #16]
 800b056:	9307      	str	r3, [sp, #28]
 800b058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b05c:	931a      	str	r3, [sp, #104]	; 0x68
 800b05e:	4654      	mov	r4, sl
 800b060:	2205      	movs	r2, #5
 800b062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b066:	4858      	ldr	r0, [pc, #352]	; (800b1c8 <_vfiprintf_r+0x24c>)
 800b068:	f7f5 f8a2 	bl	80001b0 <memchr>
 800b06c:	9a04      	ldr	r2, [sp, #16]
 800b06e:	b9d8      	cbnz	r0, 800b0a8 <_vfiprintf_r+0x12c>
 800b070:	06d1      	lsls	r1, r2, #27
 800b072:	bf44      	itt	mi
 800b074:	2320      	movmi	r3, #32
 800b076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b07a:	0713      	lsls	r3, r2, #28
 800b07c:	bf44      	itt	mi
 800b07e:	232b      	movmi	r3, #43	; 0x2b
 800b080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b084:	f89a 3000 	ldrb.w	r3, [sl]
 800b088:	2b2a      	cmp	r3, #42	; 0x2a
 800b08a:	d015      	beq.n	800b0b8 <_vfiprintf_r+0x13c>
 800b08c:	9a07      	ldr	r2, [sp, #28]
 800b08e:	4654      	mov	r4, sl
 800b090:	2000      	movs	r0, #0
 800b092:	f04f 0c0a 	mov.w	ip, #10
 800b096:	4621      	mov	r1, r4
 800b098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b09c:	3b30      	subs	r3, #48	; 0x30
 800b09e:	2b09      	cmp	r3, #9
 800b0a0:	d94e      	bls.n	800b140 <_vfiprintf_r+0x1c4>
 800b0a2:	b1b0      	cbz	r0, 800b0d2 <_vfiprintf_r+0x156>
 800b0a4:	9207      	str	r2, [sp, #28]
 800b0a6:	e014      	b.n	800b0d2 <_vfiprintf_r+0x156>
 800b0a8:	eba0 0308 	sub.w	r3, r0, r8
 800b0ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	9304      	str	r3, [sp, #16]
 800b0b4:	46a2      	mov	sl, r4
 800b0b6:	e7d2      	b.n	800b05e <_vfiprintf_r+0xe2>
 800b0b8:	9b03      	ldr	r3, [sp, #12]
 800b0ba:	1d19      	adds	r1, r3, #4
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	9103      	str	r1, [sp, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	bfbb      	ittet	lt
 800b0c4:	425b      	neglt	r3, r3
 800b0c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ca:	9307      	strge	r3, [sp, #28]
 800b0cc:	9307      	strlt	r3, [sp, #28]
 800b0ce:	bfb8      	it	lt
 800b0d0:	9204      	strlt	r2, [sp, #16]
 800b0d2:	7823      	ldrb	r3, [r4, #0]
 800b0d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b0d6:	d10c      	bne.n	800b0f2 <_vfiprintf_r+0x176>
 800b0d8:	7863      	ldrb	r3, [r4, #1]
 800b0da:	2b2a      	cmp	r3, #42	; 0x2a
 800b0dc:	d135      	bne.n	800b14a <_vfiprintf_r+0x1ce>
 800b0de:	9b03      	ldr	r3, [sp, #12]
 800b0e0:	1d1a      	adds	r2, r3, #4
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	9203      	str	r2, [sp, #12]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	bfb8      	it	lt
 800b0ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0ee:	3402      	adds	r4, #2
 800b0f0:	9305      	str	r3, [sp, #20]
 800b0f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1d8 <_vfiprintf_r+0x25c>
 800b0f6:	7821      	ldrb	r1, [r4, #0]
 800b0f8:	2203      	movs	r2, #3
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	f7f5 f858 	bl	80001b0 <memchr>
 800b100:	b140      	cbz	r0, 800b114 <_vfiprintf_r+0x198>
 800b102:	2340      	movs	r3, #64	; 0x40
 800b104:	eba0 000a 	sub.w	r0, r0, sl
 800b108:	fa03 f000 	lsl.w	r0, r3, r0
 800b10c:	9b04      	ldr	r3, [sp, #16]
 800b10e:	4303      	orrs	r3, r0
 800b110:	3401      	adds	r4, #1
 800b112:	9304      	str	r3, [sp, #16]
 800b114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b118:	482c      	ldr	r0, [pc, #176]	; (800b1cc <_vfiprintf_r+0x250>)
 800b11a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b11e:	2206      	movs	r2, #6
 800b120:	f7f5 f846 	bl	80001b0 <memchr>
 800b124:	2800      	cmp	r0, #0
 800b126:	d03f      	beq.n	800b1a8 <_vfiprintf_r+0x22c>
 800b128:	4b29      	ldr	r3, [pc, #164]	; (800b1d0 <_vfiprintf_r+0x254>)
 800b12a:	bb1b      	cbnz	r3, 800b174 <_vfiprintf_r+0x1f8>
 800b12c:	9b03      	ldr	r3, [sp, #12]
 800b12e:	3307      	adds	r3, #7
 800b130:	f023 0307 	bic.w	r3, r3, #7
 800b134:	3308      	adds	r3, #8
 800b136:	9303      	str	r3, [sp, #12]
 800b138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13a:	443b      	add	r3, r7
 800b13c:	9309      	str	r3, [sp, #36]	; 0x24
 800b13e:	e767      	b.n	800b010 <_vfiprintf_r+0x94>
 800b140:	fb0c 3202 	mla	r2, ip, r2, r3
 800b144:	460c      	mov	r4, r1
 800b146:	2001      	movs	r0, #1
 800b148:	e7a5      	b.n	800b096 <_vfiprintf_r+0x11a>
 800b14a:	2300      	movs	r3, #0
 800b14c:	3401      	adds	r4, #1
 800b14e:	9305      	str	r3, [sp, #20]
 800b150:	4619      	mov	r1, r3
 800b152:	f04f 0c0a 	mov.w	ip, #10
 800b156:	4620      	mov	r0, r4
 800b158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b15c:	3a30      	subs	r2, #48	; 0x30
 800b15e:	2a09      	cmp	r2, #9
 800b160:	d903      	bls.n	800b16a <_vfiprintf_r+0x1ee>
 800b162:	2b00      	cmp	r3, #0
 800b164:	d0c5      	beq.n	800b0f2 <_vfiprintf_r+0x176>
 800b166:	9105      	str	r1, [sp, #20]
 800b168:	e7c3      	b.n	800b0f2 <_vfiprintf_r+0x176>
 800b16a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b16e:	4604      	mov	r4, r0
 800b170:	2301      	movs	r3, #1
 800b172:	e7f0      	b.n	800b156 <_vfiprintf_r+0x1da>
 800b174:	ab03      	add	r3, sp, #12
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	462a      	mov	r2, r5
 800b17a:	4b16      	ldr	r3, [pc, #88]	; (800b1d4 <_vfiprintf_r+0x258>)
 800b17c:	a904      	add	r1, sp, #16
 800b17e:	4630      	mov	r0, r6
 800b180:	f3af 8000 	nop.w
 800b184:	4607      	mov	r7, r0
 800b186:	1c78      	adds	r0, r7, #1
 800b188:	d1d6      	bne.n	800b138 <_vfiprintf_r+0x1bc>
 800b18a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b18c:	07d9      	lsls	r1, r3, #31
 800b18e:	d405      	bmi.n	800b19c <_vfiprintf_r+0x220>
 800b190:	89ab      	ldrh	r3, [r5, #12]
 800b192:	059a      	lsls	r2, r3, #22
 800b194:	d402      	bmi.n	800b19c <_vfiprintf_r+0x220>
 800b196:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b198:	f000 fc79 	bl	800ba8e <__retarget_lock_release_recursive>
 800b19c:	89ab      	ldrh	r3, [r5, #12]
 800b19e:	065b      	lsls	r3, r3, #25
 800b1a0:	f53f af12 	bmi.w	800afc8 <_vfiprintf_r+0x4c>
 800b1a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1a6:	e711      	b.n	800afcc <_vfiprintf_r+0x50>
 800b1a8:	ab03      	add	r3, sp, #12
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	462a      	mov	r2, r5
 800b1ae:	4b09      	ldr	r3, [pc, #36]	; (800b1d4 <_vfiprintf_r+0x258>)
 800b1b0:	a904      	add	r1, sp, #16
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f000 f880 	bl	800b2b8 <_printf_i>
 800b1b8:	e7e4      	b.n	800b184 <_vfiprintf_r+0x208>
 800b1ba:	bf00      	nop
 800b1bc:	0800c77c 	.word	0x0800c77c
 800b1c0:	0800c79c 	.word	0x0800c79c
 800b1c4:	0800c75c 	.word	0x0800c75c
 800b1c8:	0800c728 	.word	0x0800c728
 800b1cc:	0800c732 	.word	0x0800c732
 800b1d0:	00000000 	.word	0x00000000
 800b1d4:	0800af57 	.word	0x0800af57
 800b1d8:	0800c72e 	.word	0x0800c72e

0800b1dc <_printf_common>:
 800b1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e0:	4616      	mov	r6, r2
 800b1e2:	4699      	mov	r9, r3
 800b1e4:	688a      	ldr	r2, [r1, #8]
 800b1e6:	690b      	ldr	r3, [r1, #16]
 800b1e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	bfb8      	it	lt
 800b1f0:	4613      	movlt	r3, r2
 800b1f2:	6033      	str	r3, [r6, #0]
 800b1f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1f8:	4607      	mov	r7, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	b10a      	cbz	r2, 800b202 <_printf_common+0x26>
 800b1fe:	3301      	adds	r3, #1
 800b200:	6033      	str	r3, [r6, #0]
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	0699      	lsls	r1, r3, #26
 800b206:	bf42      	ittt	mi
 800b208:	6833      	ldrmi	r3, [r6, #0]
 800b20a:	3302      	addmi	r3, #2
 800b20c:	6033      	strmi	r3, [r6, #0]
 800b20e:	6825      	ldr	r5, [r4, #0]
 800b210:	f015 0506 	ands.w	r5, r5, #6
 800b214:	d106      	bne.n	800b224 <_printf_common+0x48>
 800b216:	f104 0a19 	add.w	sl, r4, #25
 800b21a:	68e3      	ldr	r3, [r4, #12]
 800b21c:	6832      	ldr	r2, [r6, #0]
 800b21e:	1a9b      	subs	r3, r3, r2
 800b220:	42ab      	cmp	r3, r5
 800b222:	dc26      	bgt.n	800b272 <_printf_common+0x96>
 800b224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b228:	1e13      	subs	r3, r2, #0
 800b22a:	6822      	ldr	r2, [r4, #0]
 800b22c:	bf18      	it	ne
 800b22e:	2301      	movne	r3, #1
 800b230:	0692      	lsls	r2, r2, #26
 800b232:	d42b      	bmi.n	800b28c <_printf_common+0xb0>
 800b234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b238:	4649      	mov	r1, r9
 800b23a:	4638      	mov	r0, r7
 800b23c:	47c0      	blx	r8
 800b23e:	3001      	adds	r0, #1
 800b240:	d01e      	beq.n	800b280 <_printf_common+0xa4>
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	68e5      	ldr	r5, [r4, #12]
 800b246:	6832      	ldr	r2, [r6, #0]
 800b248:	f003 0306 	and.w	r3, r3, #6
 800b24c:	2b04      	cmp	r3, #4
 800b24e:	bf08      	it	eq
 800b250:	1aad      	subeq	r5, r5, r2
 800b252:	68a3      	ldr	r3, [r4, #8]
 800b254:	6922      	ldr	r2, [r4, #16]
 800b256:	bf0c      	ite	eq
 800b258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b25c:	2500      	movne	r5, #0
 800b25e:	4293      	cmp	r3, r2
 800b260:	bfc4      	itt	gt
 800b262:	1a9b      	subgt	r3, r3, r2
 800b264:	18ed      	addgt	r5, r5, r3
 800b266:	2600      	movs	r6, #0
 800b268:	341a      	adds	r4, #26
 800b26a:	42b5      	cmp	r5, r6
 800b26c:	d11a      	bne.n	800b2a4 <_printf_common+0xc8>
 800b26e:	2000      	movs	r0, #0
 800b270:	e008      	b.n	800b284 <_printf_common+0xa8>
 800b272:	2301      	movs	r3, #1
 800b274:	4652      	mov	r2, sl
 800b276:	4649      	mov	r1, r9
 800b278:	4638      	mov	r0, r7
 800b27a:	47c0      	blx	r8
 800b27c:	3001      	adds	r0, #1
 800b27e:	d103      	bne.n	800b288 <_printf_common+0xac>
 800b280:	f04f 30ff 	mov.w	r0, #4294967295
 800b284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b288:	3501      	adds	r5, #1
 800b28a:	e7c6      	b.n	800b21a <_printf_common+0x3e>
 800b28c:	18e1      	adds	r1, r4, r3
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	2030      	movs	r0, #48	; 0x30
 800b292:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b296:	4422      	add	r2, r4
 800b298:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b29c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2a0:	3302      	adds	r3, #2
 800b2a2:	e7c7      	b.n	800b234 <_printf_common+0x58>
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	4649      	mov	r1, r9
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	47c0      	blx	r8
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	d0e6      	beq.n	800b280 <_printf_common+0xa4>
 800b2b2:	3601      	adds	r6, #1
 800b2b4:	e7d9      	b.n	800b26a <_printf_common+0x8e>
	...

0800b2b8 <_printf_i>:
 800b2b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2bc:	7e0f      	ldrb	r7, [r1, #24]
 800b2be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2c0:	2f78      	cmp	r7, #120	; 0x78
 800b2c2:	4691      	mov	r9, r2
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	460c      	mov	r4, r1
 800b2c8:	469a      	mov	sl, r3
 800b2ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2ce:	d807      	bhi.n	800b2e0 <_printf_i+0x28>
 800b2d0:	2f62      	cmp	r7, #98	; 0x62
 800b2d2:	d80a      	bhi.n	800b2ea <_printf_i+0x32>
 800b2d4:	2f00      	cmp	r7, #0
 800b2d6:	f000 80d8 	beq.w	800b48a <_printf_i+0x1d2>
 800b2da:	2f58      	cmp	r7, #88	; 0x58
 800b2dc:	f000 80a3 	beq.w	800b426 <_printf_i+0x16e>
 800b2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2e8:	e03a      	b.n	800b360 <_printf_i+0xa8>
 800b2ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2ee:	2b15      	cmp	r3, #21
 800b2f0:	d8f6      	bhi.n	800b2e0 <_printf_i+0x28>
 800b2f2:	a101      	add	r1, pc, #4	; (adr r1, 800b2f8 <_printf_i+0x40>)
 800b2f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2f8:	0800b351 	.word	0x0800b351
 800b2fc:	0800b365 	.word	0x0800b365
 800b300:	0800b2e1 	.word	0x0800b2e1
 800b304:	0800b2e1 	.word	0x0800b2e1
 800b308:	0800b2e1 	.word	0x0800b2e1
 800b30c:	0800b2e1 	.word	0x0800b2e1
 800b310:	0800b365 	.word	0x0800b365
 800b314:	0800b2e1 	.word	0x0800b2e1
 800b318:	0800b2e1 	.word	0x0800b2e1
 800b31c:	0800b2e1 	.word	0x0800b2e1
 800b320:	0800b2e1 	.word	0x0800b2e1
 800b324:	0800b471 	.word	0x0800b471
 800b328:	0800b395 	.word	0x0800b395
 800b32c:	0800b453 	.word	0x0800b453
 800b330:	0800b2e1 	.word	0x0800b2e1
 800b334:	0800b2e1 	.word	0x0800b2e1
 800b338:	0800b493 	.word	0x0800b493
 800b33c:	0800b2e1 	.word	0x0800b2e1
 800b340:	0800b395 	.word	0x0800b395
 800b344:	0800b2e1 	.word	0x0800b2e1
 800b348:	0800b2e1 	.word	0x0800b2e1
 800b34c:	0800b45b 	.word	0x0800b45b
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	1d1a      	adds	r2, r3, #4
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	602a      	str	r2, [r5, #0]
 800b358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b35c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b360:	2301      	movs	r3, #1
 800b362:	e0a3      	b.n	800b4ac <_printf_i+0x1f4>
 800b364:	6820      	ldr	r0, [r4, #0]
 800b366:	6829      	ldr	r1, [r5, #0]
 800b368:	0606      	lsls	r6, r0, #24
 800b36a:	f101 0304 	add.w	r3, r1, #4
 800b36e:	d50a      	bpl.n	800b386 <_printf_i+0xce>
 800b370:	680e      	ldr	r6, [r1, #0]
 800b372:	602b      	str	r3, [r5, #0]
 800b374:	2e00      	cmp	r6, #0
 800b376:	da03      	bge.n	800b380 <_printf_i+0xc8>
 800b378:	232d      	movs	r3, #45	; 0x2d
 800b37a:	4276      	negs	r6, r6
 800b37c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b380:	485e      	ldr	r0, [pc, #376]	; (800b4fc <_printf_i+0x244>)
 800b382:	230a      	movs	r3, #10
 800b384:	e019      	b.n	800b3ba <_printf_i+0x102>
 800b386:	680e      	ldr	r6, [r1, #0]
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b38e:	bf18      	it	ne
 800b390:	b236      	sxthne	r6, r6
 800b392:	e7ef      	b.n	800b374 <_printf_i+0xbc>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	6820      	ldr	r0, [r4, #0]
 800b398:	1d19      	adds	r1, r3, #4
 800b39a:	6029      	str	r1, [r5, #0]
 800b39c:	0601      	lsls	r1, r0, #24
 800b39e:	d501      	bpl.n	800b3a4 <_printf_i+0xec>
 800b3a0:	681e      	ldr	r6, [r3, #0]
 800b3a2:	e002      	b.n	800b3aa <_printf_i+0xf2>
 800b3a4:	0646      	lsls	r6, r0, #25
 800b3a6:	d5fb      	bpl.n	800b3a0 <_printf_i+0xe8>
 800b3a8:	881e      	ldrh	r6, [r3, #0]
 800b3aa:	4854      	ldr	r0, [pc, #336]	; (800b4fc <_printf_i+0x244>)
 800b3ac:	2f6f      	cmp	r7, #111	; 0x6f
 800b3ae:	bf0c      	ite	eq
 800b3b0:	2308      	moveq	r3, #8
 800b3b2:	230a      	movne	r3, #10
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3ba:	6865      	ldr	r5, [r4, #4]
 800b3bc:	60a5      	str	r5, [r4, #8]
 800b3be:	2d00      	cmp	r5, #0
 800b3c0:	bfa2      	ittt	ge
 800b3c2:	6821      	ldrge	r1, [r4, #0]
 800b3c4:	f021 0104 	bicge.w	r1, r1, #4
 800b3c8:	6021      	strge	r1, [r4, #0]
 800b3ca:	b90e      	cbnz	r6, 800b3d0 <_printf_i+0x118>
 800b3cc:	2d00      	cmp	r5, #0
 800b3ce:	d04d      	beq.n	800b46c <_printf_i+0x1b4>
 800b3d0:	4615      	mov	r5, r2
 800b3d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3d6:	fb03 6711 	mls	r7, r3, r1, r6
 800b3da:	5dc7      	ldrb	r7, [r0, r7]
 800b3dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3e0:	4637      	mov	r7, r6
 800b3e2:	42bb      	cmp	r3, r7
 800b3e4:	460e      	mov	r6, r1
 800b3e6:	d9f4      	bls.n	800b3d2 <_printf_i+0x11a>
 800b3e8:	2b08      	cmp	r3, #8
 800b3ea:	d10b      	bne.n	800b404 <_printf_i+0x14c>
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	07de      	lsls	r6, r3, #31
 800b3f0:	d508      	bpl.n	800b404 <_printf_i+0x14c>
 800b3f2:	6923      	ldr	r3, [r4, #16]
 800b3f4:	6861      	ldr	r1, [r4, #4]
 800b3f6:	4299      	cmp	r1, r3
 800b3f8:	bfde      	ittt	le
 800b3fa:	2330      	movle	r3, #48	; 0x30
 800b3fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b400:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b404:	1b52      	subs	r2, r2, r5
 800b406:	6122      	str	r2, [r4, #16]
 800b408:	f8cd a000 	str.w	sl, [sp]
 800b40c:	464b      	mov	r3, r9
 800b40e:	aa03      	add	r2, sp, #12
 800b410:	4621      	mov	r1, r4
 800b412:	4640      	mov	r0, r8
 800b414:	f7ff fee2 	bl	800b1dc <_printf_common>
 800b418:	3001      	adds	r0, #1
 800b41a:	d14c      	bne.n	800b4b6 <_printf_i+0x1fe>
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	b004      	add	sp, #16
 800b422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b426:	4835      	ldr	r0, [pc, #212]	; (800b4fc <_printf_i+0x244>)
 800b428:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b42c:	6829      	ldr	r1, [r5, #0]
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	f851 6b04 	ldr.w	r6, [r1], #4
 800b434:	6029      	str	r1, [r5, #0]
 800b436:	061d      	lsls	r5, r3, #24
 800b438:	d514      	bpl.n	800b464 <_printf_i+0x1ac>
 800b43a:	07df      	lsls	r7, r3, #31
 800b43c:	bf44      	itt	mi
 800b43e:	f043 0320 	orrmi.w	r3, r3, #32
 800b442:	6023      	strmi	r3, [r4, #0]
 800b444:	b91e      	cbnz	r6, 800b44e <_printf_i+0x196>
 800b446:	6823      	ldr	r3, [r4, #0]
 800b448:	f023 0320 	bic.w	r3, r3, #32
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	2310      	movs	r3, #16
 800b450:	e7b0      	b.n	800b3b4 <_printf_i+0xfc>
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	f043 0320 	orr.w	r3, r3, #32
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	2378      	movs	r3, #120	; 0x78
 800b45c:	4828      	ldr	r0, [pc, #160]	; (800b500 <_printf_i+0x248>)
 800b45e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b462:	e7e3      	b.n	800b42c <_printf_i+0x174>
 800b464:	0659      	lsls	r1, r3, #25
 800b466:	bf48      	it	mi
 800b468:	b2b6      	uxthmi	r6, r6
 800b46a:	e7e6      	b.n	800b43a <_printf_i+0x182>
 800b46c:	4615      	mov	r5, r2
 800b46e:	e7bb      	b.n	800b3e8 <_printf_i+0x130>
 800b470:	682b      	ldr	r3, [r5, #0]
 800b472:	6826      	ldr	r6, [r4, #0]
 800b474:	6961      	ldr	r1, [r4, #20]
 800b476:	1d18      	adds	r0, r3, #4
 800b478:	6028      	str	r0, [r5, #0]
 800b47a:	0635      	lsls	r5, r6, #24
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	d501      	bpl.n	800b484 <_printf_i+0x1cc>
 800b480:	6019      	str	r1, [r3, #0]
 800b482:	e002      	b.n	800b48a <_printf_i+0x1d2>
 800b484:	0670      	lsls	r0, r6, #25
 800b486:	d5fb      	bpl.n	800b480 <_printf_i+0x1c8>
 800b488:	8019      	strh	r1, [r3, #0]
 800b48a:	2300      	movs	r3, #0
 800b48c:	6123      	str	r3, [r4, #16]
 800b48e:	4615      	mov	r5, r2
 800b490:	e7ba      	b.n	800b408 <_printf_i+0x150>
 800b492:	682b      	ldr	r3, [r5, #0]
 800b494:	1d1a      	adds	r2, r3, #4
 800b496:	602a      	str	r2, [r5, #0]
 800b498:	681d      	ldr	r5, [r3, #0]
 800b49a:	6862      	ldr	r2, [r4, #4]
 800b49c:	2100      	movs	r1, #0
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f7f4 fe86 	bl	80001b0 <memchr>
 800b4a4:	b108      	cbz	r0, 800b4aa <_printf_i+0x1f2>
 800b4a6:	1b40      	subs	r0, r0, r5
 800b4a8:	6060      	str	r0, [r4, #4]
 800b4aa:	6863      	ldr	r3, [r4, #4]
 800b4ac:	6123      	str	r3, [r4, #16]
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4b4:	e7a8      	b.n	800b408 <_printf_i+0x150>
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	462a      	mov	r2, r5
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	4640      	mov	r0, r8
 800b4be:	47d0      	blx	sl
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	d0ab      	beq.n	800b41c <_printf_i+0x164>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	079b      	lsls	r3, r3, #30
 800b4c8:	d413      	bmi.n	800b4f2 <_printf_i+0x23a>
 800b4ca:	68e0      	ldr	r0, [r4, #12]
 800b4cc:	9b03      	ldr	r3, [sp, #12]
 800b4ce:	4298      	cmp	r0, r3
 800b4d0:	bfb8      	it	lt
 800b4d2:	4618      	movlt	r0, r3
 800b4d4:	e7a4      	b.n	800b420 <_printf_i+0x168>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	4632      	mov	r2, r6
 800b4da:	4649      	mov	r1, r9
 800b4dc:	4640      	mov	r0, r8
 800b4de:	47d0      	blx	sl
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	d09b      	beq.n	800b41c <_printf_i+0x164>
 800b4e4:	3501      	adds	r5, #1
 800b4e6:	68e3      	ldr	r3, [r4, #12]
 800b4e8:	9903      	ldr	r1, [sp, #12]
 800b4ea:	1a5b      	subs	r3, r3, r1
 800b4ec:	42ab      	cmp	r3, r5
 800b4ee:	dcf2      	bgt.n	800b4d6 <_printf_i+0x21e>
 800b4f0:	e7eb      	b.n	800b4ca <_printf_i+0x212>
 800b4f2:	2500      	movs	r5, #0
 800b4f4:	f104 0619 	add.w	r6, r4, #25
 800b4f8:	e7f5      	b.n	800b4e6 <_printf_i+0x22e>
 800b4fa:	bf00      	nop
 800b4fc:	0800c739 	.word	0x0800c739
 800b500:	0800c74a 	.word	0x0800c74a

0800b504 <_sbrk_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d06      	ldr	r5, [pc, #24]	; (800b520 <_sbrk_r+0x1c>)
 800b508:	2300      	movs	r3, #0
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	602b      	str	r3, [r5, #0]
 800b510:	f7f5 faf0 	bl	8000af4 <_sbrk>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_sbrk_r+0x1a>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_sbrk_r+0x1a>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	2000077c 	.word	0x2000077c

0800b524 <sniprintf>:
 800b524:	b40c      	push	{r2, r3}
 800b526:	b530      	push	{r4, r5, lr}
 800b528:	4b17      	ldr	r3, [pc, #92]	; (800b588 <sniprintf+0x64>)
 800b52a:	1e0c      	subs	r4, r1, #0
 800b52c:	681d      	ldr	r5, [r3, #0]
 800b52e:	b09d      	sub	sp, #116	; 0x74
 800b530:	da08      	bge.n	800b544 <sniprintf+0x20>
 800b532:	238b      	movs	r3, #139	; 0x8b
 800b534:	602b      	str	r3, [r5, #0]
 800b536:	f04f 30ff 	mov.w	r0, #4294967295
 800b53a:	b01d      	add	sp, #116	; 0x74
 800b53c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b540:	b002      	add	sp, #8
 800b542:	4770      	bx	lr
 800b544:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b548:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b54c:	bf14      	ite	ne
 800b54e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b552:	4623      	moveq	r3, r4
 800b554:	9304      	str	r3, [sp, #16]
 800b556:	9307      	str	r3, [sp, #28]
 800b558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b55c:	9002      	str	r0, [sp, #8]
 800b55e:	9006      	str	r0, [sp, #24]
 800b560:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b564:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b566:	ab21      	add	r3, sp, #132	; 0x84
 800b568:	a902      	add	r1, sp, #8
 800b56a:	4628      	mov	r0, r5
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	f000 fba5 	bl	800bcbc <_svfiprintf_r>
 800b572:	1c43      	adds	r3, r0, #1
 800b574:	bfbc      	itt	lt
 800b576:	238b      	movlt	r3, #139	; 0x8b
 800b578:	602b      	strlt	r3, [r5, #0]
 800b57a:	2c00      	cmp	r4, #0
 800b57c:	d0dd      	beq.n	800b53a <sniprintf+0x16>
 800b57e:	9b02      	ldr	r3, [sp, #8]
 800b580:	2200      	movs	r2, #0
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	e7d9      	b.n	800b53a <sniprintf+0x16>
 800b586:	bf00      	nop
 800b588:	20000040 	.word	0x20000040

0800b58c <__swbuf_r>:
 800b58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58e:	460e      	mov	r6, r1
 800b590:	4614      	mov	r4, r2
 800b592:	4605      	mov	r5, r0
 800b594:	b118      	cbz	r0, 800b59e <__swbuf_r+0x12>
 800b596:	6983      	ldr	r3, [r0, #24]
 800b598:	b90b      	cbnz	r3, 800b59e <__swbuf_r+0x12>
 800b59a:	f000 f9d9 	bl	800b950 <__sinit>
 800b59e:	4b21      	ldr	r3, [pc, #132]	; (800b624 <__swbuf_r+0x98>)
 800b5a0:	429c      	cmp	r4, r3
 800b5a2:	d12b      	bne.n	800b5fc <__swbuf_r+0x70>
 800b5a4:	686c      	ldr	r4, [r5, #4]
 800b5a6:	69a3      	ldr	r3, [r4, #24]
 800b5a8:	60a3      	str	r3, [r4, #8]
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	071a      	lsls	r2, r3, #28
 800b5ae:	d52f      	bpl.n	800b610 <__swbuf_r+0x84>
 800b5b0:	6923      	ldr	r3, [r4, #16]
 800b5b2:	b36b      	cbz	r3, 800b610 <__swbuf_r+0x84>
 800b5b4:	6923      	ldr	r3, [r4, #16]
 800b5b6:	6820      	ldr	r0, [r4, #0]
 800b5b8:	1ac0      	subs	r0, r0, r3
 800b5ba:	6963      	ldr	r3, [r4, #20]
 800b5bc:	b2f6      	uxtb	r6, r6
 800b5be:	4283      	cmp	r3, r0
 800b5c0:	4637      	mov	r7, r6
 800b5c2:	dc04      	bgt.n	800b5ce <__swbuf_r+0x42>
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f000 f92e 	bl	800b828 <_fflush_r>
 800b5cc:	bb30      	cbnz	r0, 800b61c <__swbuf_r+0x90>
 800b5ce:	68a3      	ldr	r3, [r4, #8]
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	60a3      	str	r3, [r4, #8]
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	6022      	str	r2, [r4, #0]
 800b5da:	701e      	strb	r6, [r3, #0]
 800b5dc:	6963      	ldr	r3, [r4, #20]
 800b5de:	3001      	adds	r0, #1
 800b5e0:	4283      	cmp	r3, r0
 800b5e2:	d004      	beq.n	800b5ee <__swbuf_r+0x62>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	07db      	lsls	r3, r3, #31
 800b5e8:	d506      	bpl.n	800b5f8 <__swbuf_r+0x6c>
 800b5ea:	2e0a      	cmp	r6, #10
 800b5ec:	d104      	bne.n	800b5f8 <__swbuf_r+0x6c>
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	f000 f919 	bl	800b828 <_fflush_r>
 800b5f6:	b988      	cbnz	r0, 800b61c <__swbuf_r+0x90>
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <__swbuf_r+0x9c>)
 800b5fe:	429c      	cmp	r4, r3
 800b600:	d101      	bne.n	800b606 <__swbuf_r+0x7a>
 800b602:	68ac      	ldr	r4, [r5, #8]
 800b604:	e7cf      	b.n	800b5a6 <__swbuf_r+0x1a>
 800b606:	4b09      	ldr	r3, [pc, #36]	; (800b62c <__swbuf_r+0xa0>)
 800b608:	429c      	cmp	r4, r3
 800b60a:	bf08      	it	eq
 800b60c:	68ec      	ldreq	r4, [r5, #12]
 800b60e:	e7ca      	b.n	800b5a6 <__swbuf_r+0x1a>
 800b610:	4621      	mov	r1, r4
 800b612:	4628      	mov	r0, r5
 800b614:	f000 f80c 	bl	800b630 <__swsetup_r>
 800b618:	2800      	cmp	r0, #0
 800b61a:	d0cb      	beq.n	800b5b4 <__swbuf_r+0x28>
 800b61c:	f04f 37ff 	mov.w	r7, #4294967295
 800b620:	e7ea      	b.n	800b5f8 <__swbuf_r+0x6c>
 800b622:	bf00      	nop
 800b624:	0800c77c 	.word	0x0800c77c
 800b628:	0800c79c 	.word	0x0800c79c
 800b62c:	0800c75c 	.word	0x0800c75c

0800b630 <__swsetup_r>:
 800b630:	4b32      	ldr	r3, [pc, #200]	; (800b6fc <__swsetup_r+0xcc>)
 800b632:	b570      	push	{r4, r5, r6, lr}
 800b634:	681d      	ldr	r5, [r3, #0]
 800b636:	4606      	mov	r6, r0
 800b638:	460c      	mov	r4, r1
 800b63a:	b125      	cbz	r5, 800b646 <__swsetup_r+0x16>
 800b63c:	69ab      	ldr	r3, [r5, #24]
 800b63e:	b913      	cbnz	r3, 800b646 <__swsetup_r+0x16>
 800b640:	4628      	mov	r0, r5
 800b642:	f000 f985 	bl	800b950 <__sinit>
 800b646:	4b2e      	ldr	r3, [pc, #184]	; (800b700 <__swsetup_r+0xd0>)
 800b648:	429c      	cmp	r4, r3
 800b64a:	d10f      	bne.n	800b66c <__swsetup_r+0x3c>
 800b64c:	686c      	ldr	r4, [r5, #4]
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b654:	0719      	lsls	r1, r3, #28
 800b656:	d42c      	bmi.n	800b6b2 <__swsetup_r+0x82>
 800b658:	06dd      	lsls	r5, r3, #27
 800b65a:	d411      	bmi.n	800b680 <__swsetup_r+0x50>
 800b65c:	2309      	movs	r3, #9
 800b65e:	6033      	str	r3, [r6, #0]
 800b660:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b664:	81a3      	strh	r3, [r4, #12]
 800b666:	f04f 30ff 	mov.w	r0, #4294967295
 800b66a:	e03e      	b.n	800b6ea <__swsetup_r+0xba>
 800b66c:	4b25      	ldr	r3, [pc, #148]	; (800b704 <__swsetup_r+0xd4>)
 800b66e:	429c      	cmp	r4, r3
 800b670:	d101      	bne.n	800b676 <__swsetup_r+0x46>
 800b672:	68ac      	ldr	r4, [r5, #8]
 800b674:	e7eb      	b.n	800b64e <__swsetup_r+0x1e>
 800b676:	4b24      	ldr	r3, [pc, #144]	; (800b708 <__swsetup_r+0xd8>)
 800b678:	429c      	cmp	r4, r3
 800b67a:	bf08      	it	eq
 800b67c:	68ec      	ldreq	r4, [r5, #12]
 800b67e:	e7e6      	b.n	800b64e <__swsetup_r+0x1e>
 800b680:	0758      	lsls	r0, r3, #29
 800b682:	d512      	bpl.n	800b6aa <__swsetup_r+0x7a>
 800b684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b686:	b141      	cbz	r1, 800b69a <__swsetup_r+0x6a>
 800b688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b68c:	4299      	cmp	r1, r3
 800b68e:	d002      	beq.n	800b696 <__swsetup_r+0x66>
 800b690:	4630      	mov	r0, r6
 800b692:	f7ff fb69 	bl	800ad68 <_free_r>
 800b696:	2300      	movs	r3, #0
 800b698:	6363      	str	r3, [r4, #52]	; 0x34
 800b69a:	89a3      	ldrh	r3, [r4, #12]
 800b69c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6a0:	81a3      	strh	r3, [r4, #12]
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	6063      	str	r3, [r4, #4]
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	f043 0308 	orr.w	r3, r3, #8
 800b6b0:	81a3      	strh	r3, [r4, #12]
 800b6b2:	6923      	ldr	r3, [r4, #16]
 800b6b4:	b94b      	cbnz	r3, 800b6ca <__swsetup_r+0x9a>
 800b6b6:	89a3      	ldrh	r3, [r4, #12]
 800b6b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6c0:	d003      	beq.n	800b6ca <__swsetup_r+0x9a>
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f000 fa09 	bl	800badc <__smakebuf_r>
 800b6ca:	89a0      	ldrh	r0, [r4, #12]
 800b6cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6d0:	f010 0301 	ands.w	r3, r0, #1
 800b6d4:	d00a      	beq.n	800b6ec <__swsetup_r+0xbc>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60a3      	str	r3, [r4, #8]
 800b6da:	6963      	ldr	r3, [r4, #20]
 800b6dc:	425b      	negs	r3, r3
 800b6de:	61a3      	str	r3, [r4, #24]
 800b6e0:	6923      	ldr	r3, [r4, #16]
 800b6e2:	b943      	cbnz	r3, 800b6f6 <__swsetup_r+0xc6>
 800b6e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6e8:	d1ba      	bne.n	800b660 <__swsetup_r+0x30>
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}
 800b6ec:	0781      	lsls	r1, r0, #30
 800b6ee:	bf58      	it	pl
 800b6f0:	6963      	ldrpl	r3, [r4, #20]
 800b6f2:	60a3      	str	r3, [r4, #8]
 800b6f4:	e7f4      	b.n	800b6e0 <__swsetup_r+0xb0>
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	e7f7      	b.n	800b6ea <__swsetup_r+0xba>
 800b6fa:	bf00      	nop
 800b6fc:	20000040 	.word	0x20000040
 800b700:	0800c77c 	.word	0x0800c77c
 800b704:	0800c79c 	.word	0x0800c79c
 800b708:	0800c75c 	.word	0x0800c75c

0800b70c <abort>:
 800b70c:	b508      	push	{r3, lr}
 800b70e:	2006      	movs	r0, #6
 800b710:	f000 fbfc 	bl	800bf0c <raise>
 800b714:	2001      	movs	r0, #1
 800b716:	f7f5 f976 	bl	8000a06 <_exit>
	...

0800b71c <__sflush_r>:
 800b71c:	898a      	ldrh	r2, [r1, #12]
 800b71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b722:	4605      	mov	r5, r0
 800b724:	0710      	lsls	r0, r2, #28
 800b726:	460c      	mov	r4, r1
 800b728:	d458      	bmi.n	800b7dc <__sflush_r+0xc0>
 800b72a:	684b      	ldr	r3, [r1, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	dc05      	bgt.n	800b73c <__sflush_r+0x20>
 800b730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b732:	2b00      	cmp	r3, #0
 800b734:	dc02      	bgt.n	800b73c <__sflush_r+0x20>
 800b736:	2000      	movs	r0, #0
 800b738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b73e:	2e00      	cmp	r6, #0
 800b740:	d0f9      	beq.n	800b736 <__sflush_r+0x1a>
 800b742:	2300      	movs	r3, #0
 800b744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b748:	682f      	ldr	r7, [r5, #0]
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	d032      	beq.n	800b7b4 <__sflush_r+0x98>
 800b74e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	075a      	lsls	r2, r3, #29
 800b754:	d505      	bpl.n	800b762 <__sflush_r+0x46>
 800b756:	6863      	ldr	r3, [r4, #4]
 800b758:	1ac0      	subs	r0, r0, r3
 800b75a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b75c:	b10b      	cbz	r3, 800b762 <__sflush_r+0x46>
 800b75e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b760:	1ac0      	subs	r0, r0, r3
 800b762:	2300      	movs	r3, #0
 800b764:	4602      	mov	r2, r0
 800b766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b768:	6a21      	ldr	r1, [r4, #32]
 800b76a:	4628      	mov	r0, r5
 800b76c:	47b0      	blx	r6
 800b76e:	1c43      	adds	r3, r0, #1
 800b770:	89a3      	ldrh	r3, [r4, #12]
 800b772:	d106      	bne.n	800b782 <__sflush_r+0x66>
 800b774:	6829      	ldr	r1, [r5, #0]
 800b776:	291d      	cmp	r1, #29
 800b778:	d82c      	bhi.n	800b7d4 <__sflush_r+0xb8>
 800b77a:	4a2a      	ldr	r2, [pc, #168]	; (800b824 <__sflush_r+0x108>)
 800b77c:	40ca      	lsrs	r2, r1
 800b77e:	07d6      	lsls	r6, r2, #31
 800b780:	d528      	bpl.n	800b7d4 <__sflush_r+0xb8>
 800b782:	2200      	movs	r2, #0
 800b784:	6062      	str	r2, [r4, #4]
 800b786:	04d9      	lsls	r1, r3, #19
 800b788:	6922      	ldr	r2, [r4, #16]
 800b78a:	6022      	str	r2, [r4, #0]
 800b78c:	d504      	bpl.n	800b798 <__sflush_r+0x7c>
 800b78e:	1c42      	adds	r2, r0, #1
 800b790:	d101      	bne.n	800b796 <__sflush_r+0x7a>
 800b792:	682b      	ldr	r3, [r5, #0]
 800b794:	b903      	cbnz	r3, 800b798 <__sflush_r+0x7c>
 800b796:	6560      	str	r0, [r4, #84]	; 0x54
 800b798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b79a:	602f      	str	r7, [r5, #0]
 800b79c:	2900      	cmp	r1, #0
 800b79e:	d0ca      	beq.n	800b736 <__sflush_r+0x1a>
 800b7a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a4:	4299      	cmp	r1, r3
 800b7a6:	d002      	beq.n	800b7ae <__sflush_r+0x92>
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f7ff fadd 	bl	800ad68 <_free_r>
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	6360      	str	r0, [r4, #52]	; 0x34
 800b7b2:	e7c1      	b.n	800b738 <__sflush_r+0x1c>
 800b7b4:	6a21      	ldr	r1, [r4, #32]
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	47b0      	blx	r6
 800b7bc:	1c41      	adds	r1, r0, #1
 800b7be:	d1c7      	bne.n	800b750 <__sflush_r+0x34>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0c4      	beq.n	800b750 <__sflush_r+0x34>
 800b7c6:	2b1d      	cmp	r3, #29
 800b7c8:	d001      	beq.n	800b7ce <__sflush_r+0xb2>
 800b7ca:	2b16      	cmp	r3, #22
 800b7cc:	d101      	bne.n	800b7d2 <__sflush_r+0xb6>
 800b7ce:	602f      	str	r7, [r5, #0]
 800b7d0:	e7b1      	b.n	800b736 <__sflush_r+0x1a>
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	e7ad      	b.n	800b738 <__sflush_r+0x1c>
 800b7dc:	690f      	ldr	r7, [r1, #16]
 800b7de:	2f00      	cmp	r7, #0
 800b7e0:	d0a9      	beq.n	800b736 <__sflush_r+0x1a>
 800b7e2:	0793      	lsls	r3, r2, #30
 800b7e4:	680e      	ldr	r6, [r1, #0]
 800b7e6:	bf08      	it	eq
 800b7e8:	694b      	ldreq	r3, [r1, #20]
 800b7ea:	600f      	str	r7, [r1, #0]
 800b7ec:	bf18      	it	ne
 800b7ee:	2300      	movne	r3, #0
 800b7f0:	eba6 0807 	sub.w	r8, r6, r7
 800b7f4:	608b      	str	r3, [r1, #8]
 800b7f6:	f1b8 0f00 	cmp.w	r8, #0
 800b7fa:	dd9c      	ble.n	800b736 <__sflush_r+0x1a>
 800b7fc:	6a21      	ldr	r1, [r4, #32]
 800b7fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b800:	4643      	mov	r3, r8
 800b802:	463a      	mov	r2, r7
 800b804:	4628      	mov	r0, r5
 800b806:	47b0      	blx	r6
 800b808:	2800      	cmp	r0, #0
 800b80a:	dc06      	bgt.n	800b81a <__sflush_r+0xfe>
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b812:	81a3      	strh	r3, [r4, #12]
 800b814:	f04f 30ff 	mov.w	r0, #4294967295
 800b818:	e78e      	b.n	800b738 <__sflush_r+0x1c>
 800b81a:	4407      	add	r7, r0
 800b81c:	eba8 0800 	sub.w	r8, r8, r0
 800b820:	e7e9      	b.n	800b7f6 <__sflush_r+0xda>
 800b822:	bf00      	nop
 800b824:	20400001 	.word	0x20400001

0800b828 <_fflush_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	690b      	ldr	r3, [r1, #16]
 800b82c:	4605      	mov	r5, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	b913      	cbnz	r3, 800b838 <_fflush_r+0x10>
 800b832:	2500      	movs	r5, #0
 800b834:	4628      	mov	r0, r5
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	b118      	cbz	r0, 800b842 <_fflush_r+0x1a>
 800b83a:	6983      	ldr	r3, [r0, #24]
 800b83c:	b90b      	cbnz	r3, 800b842 <_fflush_r+0x1a>
 800b83e:	f000 f887 	bl	800b950 <__sinit>
 800b842:	4b14      	ldr	r3, [pc, #80]	; (800b894 <_fflush_r+0x6c>)
 800b844:	429c      	cmp	r4, r3
 800b846:	d11b      	bne.n	800b880 <_fflush_r+0x58>
 800b848:	686c      	ldr	r4, [r5, #4]
 800b84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d0ef      	beq.n	800b832 <_fflush_r+0xa>
 800b852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b854:	07d0      	lsls	r0, r2, #31
 800b856:	d404      	bmi.n	800b862 <_fflush_r+0x3a>
 800b858:	0599      	lsls	r1, r3, #22
 800b85a:	d402      	bmi.n	800b862 <_fflush_r+0x3a>
 800b85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b85e:	f000 f915 	bl	800ba8c <__retarget_lock_acquire_recursive>
 800b862:	4628      	mov	r0, r5
 800b864:	4621      	mov	r1, r4
 800b866:	f7ff ff59 	bl	800b71c <__sflush_r>
 800b86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b86c:	07da      	lsls	r2, r3, #31
 800b86e:	4605      	mov	r5, r0
 800b870:	d4e0      	bmi.n	800b834 <_fflush_r+0xc>
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	059b      	lsls	r3, r3, #22
 800b876:	d4dd      	bmi.n	800b834 <_fflush_r+0xc>
 800b878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b87a:	f000 f908 	bl	800ba8e <__retarget_lock_release_recursive>
 800b87e:	e7d9      	b.n	800b834 <_fflush_r+0xc>
 800b880:	4b05      	ldr	r3, [pc, #20]	; (800b898 <_fflush_r+0x70>)
 800b882:	429c      	cmp	r4, r3
 800b884:	d101      	bne.n	800b88a <_fflush_r+0x62>
 800b886:	68ac      	ldr	r4, [r5, #8]
 800b888:	e7df      	b.n	800b84a <_fflush_r+0x22>
 800b88a:	4b04      	ldr	r3, [pc, #16]	; (800b89c <_fflush_r+0x74>)
 800b88c:	429c      	cmp	r4, r3
 800b88e:	bf08      	it	eq
 800b890:	68ec      	ldreq	r4, [r5, #12]
 800b892:	e7da      	b.n	800b84a <_fflush_r+0x22>
 800b894:	0800c77c 	.word	0x0800c77c
 800b898:	0800c79c 	.word	0x0800c79c
 800b89c:	0800c75c 	.word	0x0800c75c

0800b8a0 <std>:
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	b510      	push	{r4, lr}
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b8aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8ae:	6083      	str	r3, [r0, #8]
 800b8b0:	8181      	strh	r1, [r0, #12]
 800b8b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b8b4:	81c2      	strh	r2, [r0, #14]
 800b8b6:	6183      	str	r3, [r0, #24]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	2208      	movs	r2, #8
 800b8bc:	305c      	adds	r0, #92	; 0x5c
 800b8be:	f7ff fa4b 	bl	800ad58 <memset>
 800b8c2:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <std+0x38>)
 800b8c4:	6263      	str	r3, [r4, #36]	; 0x24
 800b8c6:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <std+0x3c>)
 800b8c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8ca:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <std+0x40>)
 800b8cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8ce:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <std+0x44>)
 800b8d0:	6224      	str	r4, [r4, #32]
 800b8d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b8d4:	bd10      	pop	{r4, pc}
 800b8d6:	bf00      	nop
 800b8d8:	0800bf45 	.word	0x0800bf45
 800b8dc:	0800bf67 	.word	0x0800bf67
 800b8e0:	0800bf9f 	.word	0x0800bf9f
 800b8e4:	0800bfc3 	.word	0x0800bfc3

0800b8e8 <_cleanup_r>:
 800b8e8:	4901      	ldr	r1, [pc, #4]	; (800b8f0 <_cleanup_r+0x8>)
 800b8ea:	f000 b8af 	b.w	800ba4c <_fwalk_reent>
 800b8ee:	bf00      	nop
 800b8f0:	0800b829 	.word	0x0800b829

0800b8f4 <__sfmoreglue>:
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	2268      	movs	r2, #104	; 0x68
 800b8f8:	1e4d      	subs	r5, r1, #1
 800b8fa:	4355      	muls	r5, r2
 800b8fc:	460e      	mov	r6, r1
 800b8fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b902:	f7ff fa9d 	bl	800ae40 <_malloc_r>
 800b906:	4604      	mov	r4, r0
 800b908:	b140      	cbz	r0, 800b91c <__sfmoreglue+0x28>
 800b90a:	2100      	movs	r1, #0
 800b90c:	e9c0 1600 	strd	r1, r6, [r0]
 800b910:	300c      	adds	r0, #12
 800b912:	60a0      	str	r0, [r4, #8]
 800b914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b918:	f7ff fa1e 	bl	800ad58 <memset>
 800b91c:	4620      	mov	r0, r4
 800b91e:	bd70      	pop	{r4, r5, r6, pc}

0800b920 <__sfp_lock_acquire>:
 800b920:	4801      	ldr	r0, [pc, #4]	; (800b928 <__sfp_lock_acquire+0x8>)
 800b922:	f000 b8b3 	b.w	800ba8c <__retarget_lock_acquire_recursive>
 800b926:	bf00      	nop
 800b928:	20000779 	.word	0x20000779

0800b92c <__sfp_lock_release>:
 800b92c:	4801      	ldr	r0, [pc, #4]	; (800b934 <__sfp_lock_release+0x8>)
 800b92e:	f000 b8ae 	b.w	800ba8e <__retarget_lock_release_recursive>
 800b932:	bf00      	nop
 800b934:	20000779 	.word	0x20000779

0800b938 <__sinit_lock_acquire>:
 800b938:	4801      	ldr	r0, [pc, #4]	; (800b940 <__sinit_lock_acquire+0x8>)
 800b93a:	f000 b8a7 	b.w	800ba8c <__retarget_lock_acquire_recursive>
 800b93e:	bf00      	nop
 800b940:	2000077a 	.word	0x2000077a

0800b944 <__sinit_lock_release>:
 800b944:	4801      	ldr	r0, [pc, #4]	; (800b94c <__sinit_lock_release+0x8>)
 800b946:	f000 b8a2 	b.w	800ba8e <__retarget_lock_release_recursive>
 800b94a:	bf00      	nop
 800b94c:	2000077a 	.word	0x2000077a

0800b950 <__sinit>:
 800b950:	b510      	push	{r4, lr}
 800b952:	4604      	mov	r4, r0
 800b954:	f7ff fff0 	bl	800b938 <__sinit_lock_acquire>
 800b958:	69a3      	ldr	r3, [r4, #24]
 800b95a:	b11b      	cbz	r3, 800b964 <__sinit+0x14>
 800b95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b960:	f7ff bff0 	b.w	800b944 <__sinit_lock_release>
 800b964:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b968:	6523      	str	r3, [r4, #80]	; 0x50
 800b96a:	4b13      	ldr	r3, [pc, #76]	; (800b9b8 <__sinit+0x68>)
 800b96c:	4a13      	ldr	r2, [pc, #76]	; (800b9bc <__sinit+0x6c>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	62a2      	str	r2, [r4, #40]	; 0x28
 800b972:	42a3      	cmp	r3, r4
 800b974:	bf04      	itt	eq
 800b976:	2301      	moveq	r3, #1
 800b978:	61a3      	streq	r3, [r4, #24]
 800b97a:	4620      	mov	r0, r4
 800b97c:	f000 f820 	bl	800b9c0 <__sfp>
 800b980:	6060      	str	r0, [r4, #4]
 800b982:	4620      	mov	r0, r4
 800b984:	f000 f81c 	bl	800b9c0 <__sfp>
 800b988:	60a0      	str	r0, [r4, #8]
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 f818 	bl	800b9c0 <__sfp>
 800b990:	2200      	movs	r2, #0
 800b992:	60e0      	str	r0, [r4, #12]
 800b994:	2104      	movs	r1, #4
 800b996:	6860      	ldr	r0, [r4, #4]
 800b998:	f7ff ff82 	bl	800b8a0 <std>
 800b99c:	68a0      	ldr	r0, [r4, #8]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	2109      	movs	r1, #9
 800b9a2:	f7ff ff7d 	bl	800b8a0 <std>
 800b9a6:	68e0      	ldr	r0, [r4, #12]
 800b9a8:	2202      	movs	r2, #2
 800b9aa:	2112      	movs	r1, #18
 800b9ac:	f7ff ff78 	bl	800b8a0 <std>
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	61a3      	str	r3, [r4, #24]
 800b9b4:	e7d2      	b.n	800b95c <__sinit+0xc>
 800b9b6:	bf00      	nop
 800b9b8:	0800c724 	.word	0x0800c724
 800b9bc:	0800b8e9 	.word	0x0800b8e9

0800b9c0 <__sfp>:
 800b9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c2:	4607      	mov	r7, r0
 800b9c4:	f7ff ffac 	bl	800b920 <__sfp_lock_acquire>
 800b9c8:	4b1e      	ldr	r3, [pc, #120]	; (800ba44 <__sfp+0x84>)
 800b9ca:	681e      	ldr	r6, [r3, #0]
 800b9cc:	69b3      	ldr	r3, [r6, #24]
 800b9ce:	b913      	cbnz	r3, 800b9d6 <__sfp+0x16>
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f7ff ffbd 	bl	800b950 <__sinit>
 800b9d6:	3648      	adds	r6, #72	; 0x48
 800b9d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	d503      	bpl.n	800b9e8 <__sfp+0x28>
 800b9e0:	6833      	ldr	r3, [r6, #0]
 800b9e2:	b30b      	cbz	r3, 800ba28 <__sfp+0x68>
 800b9e4:	6836      	ldr	r6, [r6, #0]
 800b9e6:	e7f7      	b.n	800b9d8 <__sfp+0x18>
 800b9e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9ec:	b9d5      	cbnz	r5, 800ba24 <__sfp+0x64>
 800b9ee:	4b16      	ldr	r3, [pc, #88]	; (800ba48 <__sfp+0x88>)
 800b9f0:	60e3      	str	r3, [r4, #12]
 800b9f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9f6:	6665      	str	r5, [r4, #100]	; 0x64
 800b9f8:	f000 f847 	bl	800ba8a <__retarget_lock_init_recursive>
 800b9fc:	f7ff ff96 	bl	800b92c <__sfp_lock_release>
 800ba00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba08:	6025      	str	r5, [r4, #0]
 800ba0a:	61a5      	str	r5, [r4, #24]
 800ba0c:	2208      	movs	r2, #8
 800ba0e:	4629      	mov	r1, r5
 800ba10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba14:	f7ff f9a0 	bl	800ad58 <memset>
 800ba18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba20:	4620      	mov	r0, r4
 800ba22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba24:	3468      	adds	r4, #104	; 0x68
 800ba26:	e7d9      	b.n	800b9dc <__sfp+0x1c>
 800ba28:	2104      	movs	r1, #4
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	f7ff ff62 	bl	800b8f4 <__sfmoreglue>
 800ba30:	4604      	mov	r4, r0
 800ba32:	6030      	str	r0, [r6, #0]
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d1d5      	bne.n	800b9e4 <__sfp+0x24>
 800ba38:	f7ff ff78 	bl	800b92c <__sfp_lock_release>
 800ba3c:	230c      	movs	r3, #12
 800ba3e:	603b      	str	r3, [r7, #0]
 800ba40:	e7ee      	b.n	800ba20 <__sfp+0x60>
 800ba42:	bf00      	nop
 800ba44:	0800c724 	.word	0x0800c724
 800ba48:	ffff0001 	.word	0xffff0001

0800ba4c <_fwalk_reent>:
 800ba4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba50:	4606      	mov	r6, r0
 800ba52:	4688      	mov	r8, r1
 800ba54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba58:	2700      	movs	r7, #0
 800ba5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba5e:	f1b9 0901 	subs.w	r9, r9, #1
 800ba62:	d505      	bpl.n	800ba70 <_fwalk_reent+0x24>
 800ba64:	6824      	ldr	r4, [r4, #0]
 800ba66:	2c00      	cmp	r4, #0
 800ba68:	d1f7      	bne.n	800ba5a <_fwalk_reent+0xe>
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba70:	89ab      	ldrh	r3, [r5, #12]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d907      	bls.n	800ba86 <_fwalk_reent+0x3a>
 800ba76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	d003      	beq.n	800ba86 <_fwalk_reent+0x3a>
 800ba7e:	4629      	mov	r1, r5
 800ba80:	4630      	mov	r0, r6
 800ba82:	47c0      	blx	r8
 800ba84:	4307      	orrs	r7, r0
 800ba86:	3568      	adds	r5, #104	; 0x68
 800ba88:	e7e9      	b.n	800ba5e <_fwalk_reent+0x12>

0800ba8a <__retarget_lock_init_recursive>:
 800ba8a:	4770      	bx	lr

0800ba8c <__retarget_lock_acquire_recursive>:
 800ba8c:	4770      	bx	lr

0800ba8e <__retarget_lock_release_recursive>:
 800ba8e:	4770      	bx	lr

0800ba90 <__swhatbuf_r>:
 800ba90:	b570      	push	{r4, r5, r6, lr}
 800ba92:	460e      	mov	r6, r1
 800ba94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba98:	2900      	cmp	r1, #0
 800ba9a:	b096      	sub	sp, #88	; 0x58
 800ba9c:	4614      	mov	r4, r2
 800ba9e:	461d      	mov	r5, r3
 800baa0:	da08      	bge.n	800bab4 <__swhatbuf_r+0x24>
 800baa2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	061a      	lsls	r2, r3, #24
 800baac:	d410      	bmi.n	800bad0 <__swhatbuf_r+0x40>
 800baae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bab2:	e00e      	b.n	800bad2 <__swhatbuf_r+0x42>
 800bab4:	466a      	mov	r2, sp
 800bab6:	f000 faab 	bl	800c010 <_fstat_r>
 800baba:	2800      	cmp	r0, #0
 800babc:	dbf1      	blt.n	800baa2 <__swhatbuf_r+0x12>
 800babe:	9a01      	ldr	r2, [sp, #4]
 800bac0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bac4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bac8:	425a      	negs	r2, r3
 800baca:	415a      	adcs	r2, r3
 800bacc:	602a      	str	r2, [r5, #0]
 800bace:	e7ee      	b.n	800baae <__swhatbuf_r+0x1e>
 800bad0:	2340      	movs	r3, #64	; 0x40
 800bad2:	2000      	movs	r0, #0
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	b016      	add	sp, #88	; 0x58
 800bad8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800badc <__smakebuf_r>:
 800badc:	898b      	ldrh	r3, [r1, #12]
 800bade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bae0:	079d      	lsls	r5, r3, #30
 800bae2:	4606      	mov	r6, r0
 800bae4:	460c      	mov	r4, r1
 800bae6:	d507      	bpl.n	800baf8 <__smakebuf_r+0x1c>
 800bae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	6123      	str	r3, [r4, #16]
 800baf0:	2301      	movs	r3, #1
 800baf2:	6163      	str	r3, [r4, #20]
 800baf4:	b002      	add	sp, #8
 800baf6:	bd70      	pop	{r4, r5, r6, pc}
 800baf8:	ab01      	add	r3, sp, #4
 800bafa:	466a      	mov	r2, sp
 800bafc:	f7ff ffc8 	bl	800ba90 <__swhatbuf_r>
 800bb00:	9900      	ldr	r1, [sp, #0]
 800bb02:	4605      	mov	r5, r0
 800bb04:	4630      	mov	r0, r6
 800bb06:	f7ff f99b 	bl	800ae40 <_malloc_r>
 800bb0a:	b948      	cbnz	r0, 800bb20 <__smakebuf_r+0x44>
 800bb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb10:	059a      	lsls	r2, r3, #22
 800bb12:	d4ef      	bmi.n	800baf4 <__smakebuf_r+0x18>
 800bb14:	f023 0303 	bic.w	r3, r3, #3
 800bb18:	f043 0302 	orr.w	r3, r3, #2
 800bb1c:	81a3      	strh	r3, [r4, #12]
 800bb1e:	e7e3      	b.n	800bae8 <__smakebuf_r+0xc>
 800bb20:	4b0d      	ldr	r3, [pc, #52]	; (800bb58 <__smakebuf_r+0x7c>)
 800bb22:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	6020      	str	r0, [r4, #0]
 800bb28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb2c:	81a3      	strh	r3, [r4, #12]
 800bb2e:	9b00      	ldr	r3, [sp, #0]
 800bb30:	6163      	str	r3, [r4, #20]
 800bb32:	9b01      	ldr	r3, [sp, #4]
 800bb34:	6120      	str	r0, [r4, #16]
 800bb36:	b15b      	cbz	r3, 800bb50 <__smakebuf_r+0x74>
 800bb38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	f000 fa79 	bl	800c034 <_isatty_r>
 800bb42:	b128      	cbz	r0, 800bb50 <__smakebuf_r+0x74>
 800bb44:	89a3      	ldrh	r3, [r4, #12]
 800bb46:	f023 0303 	bic.w	r3, r3, #3
 800bb4a:	f043 0301 	orr.w	r3, r3, #1
 800bb4e:	81a3      	strh	r3, [r4, #12]
 800bb50:	89a0      	ldrh	r0, [r4, #12]
 800bb52:	4305      	orrs	r5, r0
 800bb54:	81a5      	strh	r5, [r4, #12]
 800bb56:	e7cd      	b.n	800baf4 <__smakebuf_r+0x18>
 800bb58:	0800b8e9 	.word	0x0800b8e9

0800bb5c <memmove>:
 800bb5c:	4288      	cmp	r0, r1
 800bb5e:	b510      	push	{r4, lr}
 800bb60:	eb01 0402 	add.w	r4, r1, r2
 800bb64:	d902      	bls.n	800bb6c <memmove+0x10>
 800bb66:	4284      	cmp	r4, r0
 800bb68:	4623      	mov	r3, r4
 800bb6a:	d807      	bhi.n	800bb7c <memmove+0x20>
 800bb6c:	1e43      	subs	r3, r0, #1
 800bb6e:	42a1      	cmp	r1, r4
 800bb70:	d008      	beq.n	800bb84 <memmove+0x28>
 800bb72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb7a:	e7f8      	b.n	800bb6e <memmove+0x12>
 800bb7c:	4402      	add	r2, r0
 800bb7e:	4601      	mov	r1, r0
 800bb80:	428a      	cmp	r2, r1
 800bb82:	d100      	bne.n	800bb86 <memmove+0x2a>
 800bb84:	bd10      	pop	{r4, pc}
 800bb86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb8e:	e7f7      	b.n	800bb80 <memmove+0x24>

0800bb90 <__malloc_lock>:
 800bb90:	4801      	ldr	r0, [pc, #4]	; (800bb98 <__malloc_lock+0x8>)
 800bb92:	f7ff bf7b 	b.w	800ba8c <__retarget_lock_acquire_recursive>
 800bb96:	bf00      	nop
 800bb98:	20000778 	.word	0x20000778

0800bb9c <__malloc_unlock>:
 800bb9c:	4801      	ldr	r0, [pc, #4]	; (800bba4 <__malloc_unlock+0x8>)
 800bb9e:	f7ff bf76 	b.w	800ba8e <__retarget_lock_release_recursive>
 800bba2:	bf00      	nop
 800bba4:	20000778 	.word	0x20000778

0800bba8 <_realloc_r>:
 800bba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbac:	4680      	mov	r8, r0
 800bbae:	4614      	mov	r4, r2
 800bbb0:	460e      	mov	r6, r1
 800bbb2:	b921      	cbnz	r1, 800bbbe <_realloc_r+0x16>
 800bbb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb8:	4611      	mov	r1, r2
 800bbba:	f7ff b941 	b.w	800ae40 <_malloc_r>
 800bbbe:	b92a      	cbnz	r2, 800bbcc <_realloc_r+0x24>
 800bbc0:	f7ff f8d2 	bl	800ad68 <_free_r>
 800bbc4:	4625      	mov	r5, r4
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbcc:	f000 fa54 	bl	800c078 <_malloc_usable_size_r>
 800bbd0:	4284      	cmp	r4, r0
 800bbd2:	4607      	mov	r7, r0
 800bbd4:	d802      	bhi.n	800bbdc <_realloc_r+0x34>
 800bbd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbda:	d812      	bhi.n	800bc02 <_realloc_r+0x5a>
 800bbdc:	4621      	mov	r1, r4
 800bbde:	4640      	mov	r0, r8
 800bbe0:	f7ff f92e 	bl	800ae40 <_malloc_r>
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d0ed      	beq.n	800bbc6 <_realloc_r+0x1e>
 800bbea:	42bc      	cmp	r4, r7
 800bbec:	4622      	mov	r2, r4
 800bbee:	4631      	mov	r1, r6
 800bbf0:	bf28      	it	cs
 800bbf2:	463a      	movcs	r2, r7
 800bbf4:	f7ff f8a2 	bl	800ad3c <memcpy>
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	f7ff f8b4 	bl	800ad68 <_free_r>
 800bc00:	e7e1      	b.n	800bbc6 <_realloc_r+0x1e>
 800bc02:	4635      	mov	r5, r6
 800bc04:	e7df      	b.n	800bbc6 <_realloc_r+0x1e>

0800bc06 <__ssputs_r>:
 800bc06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc0a:	688e      	ldr	r6, [r1, #8]
 800bc0c:	429e      	cmp	r6, r3
 800bc0e:	4682      	mov	sl, r0
 800bc10:	460c      	mov	r4, r1
 800bc12:	4690      	mov	r8, r2
 800bc14:	461f      	mov	r7, r3
 800bc16:	d838      	bhi.n	800bc8a <__ssputs_r+0x84>
 800bc18:	898a      	ldrh	r2, [r1, #12]
 800bc1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc1e:	d032      	beq.n	800bc86 <__ssputs_r+0x80>
 800bc20:	6825      	ldr	r5, [r4, #0]
 800bc22:	6909      	ldr	r1, [r1, #16]
 800bc24:	eba5 0901 	sub.w	r9, r5, r1
 800bc28:	6965      	ldr	r5, [r4, #20]
 800bc2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc32:	3301      	adds	r3, #1
 800bc34:	444b      	add	r3, r9
 800bc36:	106d      	asrs	r5, r5, #1
 800bc38:	429d      	cmp	r5, r3
 800bc3a:	bf38      	it	cc
 800bc3c:	461d      	movcc	r5, r3
 800bc3e:	0553      	lsls	r3, r2, #21
 800bc40:	d531      	bpl.n	800bca6 <__ssputs_r+0xa0>
 800bc42:	4629      	mov	r1, r5
 800bc44:	f7ff f8fc 	bl	800ae40 <_malloc_r>
 800bc48:	4606      	mov	r6, r0
 800bc4a:	b950      	cbnz	r0, 800bc62 <__ssputs_r+0x5c>
 800bc4c:	230c      	movs	r3, #12
 800bc4e:	f8ca 3000 	str.w	r3, [sl]
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc58:	81a3      	strh	r3, [r4, #12]
 800bc5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc62:	6921      	ldr	r1, [r4, #16]
 800bc64:	464a      	mov	r2, r9
 800bc66:	f7ff f869 	bl	800ad3c <memcpy>
 800bc6a:	89a3      	ldrh	r3, [r4, #12]
 800bc6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc74:	81a3      	strh	r3, [r4, #12]
 800bc76:	6126      	str	r6, [r4, #16]
 800bc78:	6165      	str	r5, [r4, #20]
 800bc7a:	444e      	add	r6, r9
 800bc7c:	eba5 0509 	sub.w	r5, r5, r9
 800bc80:	6026      	str	r6, [r4, #0]
 800bc82:	60a5      	str	r5, [r4, #8]
 800bc84:	463e      	mov	r6, r7
 800bc86:	42be      	cmp	r6, r7
 800bc88:	d900      	bls.n	800bc8c <__ssputs_r+0x86>
 800bc8a:	463e      	mov	r6, r7
 800bc8c:	6820      	ldr	r0, [r4, #0]
 800bc8e:	4632      	mov	r2, r6
 800bc90:	4641      	mov	r1, r8
 800bc92:	f7ff ff63 	bl	800bb5c <memmove>
 800bc96:	68a3      	ldr	r3, [r4, #8]
 800bc98:	1b9b      	subs	r3, r3, r6
 800bc9a:	60a3      	str	r3, [r4, #8]
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	4433      	add	r3, r6
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	2000      	movs	r0, #0
 800bca4:	e7db      	b.n	800bc5e <__ssputs_r+0x58>
 800bca6:	462a      	mov	r2, r5
 800bca8:	f7ff ff7e 	bl	800bba8 <_realloc_r>
 800bcac:	4606      	mov	r6, r0
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d1e1      	bne.n	800bc76 <__ssputs_r+0x70>
 800bcb2:	6921      	ldr	r1, [r4, #16]
 800bcb4:	4650      	mov	r0, sl
 800bcb6:	f7ff f857 	bl	800ad68 <_free_r>
 800bcba:	e7c7      	b.n	800bc4c <__ssputs_r+0x46>

0800bcbc <_svfiprintf_r>:
 800bcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	4698      	mov	r8, r3
 800bcc2:	898b      	ldrh	r3, [r1, #12]
 800bcc4:	061b      	lsls	r3, r3, #24
 800bcc6:	b09d      	sub	sp, #116	; 0x74
 800bcc8:	4607      	mov	r7, r0
 800bcca:	460d      	mov	r5, r1
 800bccc:	4614      	mov	r4, r2
 800bcce:	d50e      	bpl.n	800bcee <_svfiprintf_r+0x32>
 800bcd0:	690b      	ldr	r3, [r1, #16]
 800bcd2:	b963      	cbnz	r3, 800bcee <_svfiprintf_r+0x32>
 800bcd4:	2140      	movs	r1, #64	; 0x40
 800bcd6:	f7ff f8b3 	bl	800ae40 <_malloc_r>
 800bcda:	6028      	str	r0, [r5, #0]
 800bcdc:	6128      	str	r0, [r5, #16]
 800bcde:	b920      	cbnz	r0, 800bcea <_svfiprintf_r+0x2e>
 800bce0:	230c      	movs	r3, #12
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	f04f 30ff 	mov.w	r0, #4294967295
 800bce8:	e0d1      	b.n	800be8e <_svfiprintf_r+0x1d2>
 800bcea:	2340      	movs	r3, #64	; 0x40
 800bcec:	616b      	str	r3, [r5, #20]
 800bcee:	2300      	movs	r3, #0
 800bcf0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf2:	2320      	movs	r3, #32
 800bcf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcfc:	2330      	movs	r3, #48	; 0x30
 800bcfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bea8 <_svfiprintf_r+0x1ec>
 800bd02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd06:	f04f 0901 	mov.w	r9, #1
 800bd0a:	4623      	mov	r3, r4
 800bd0c:	469a      	mov	sl, r3
 800bd0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd12:	b10a      	cbz	r2, 800bd18 <_svfiprintf_r+0x5c>
 800bd14:	2a25      	cmp	r2, #37	; 0x25
 800bd16:	d1f9      	bne.n	800bd0c <_svfiprintf_r+0x50>
 800bd18:	ebba 0b04 	subs.w	fp, sl, r4
 800bd1c:	d00b      	beq.n	800bd36 <_svfiprintf_r+0x7a>
 800bd1e:	465b      	mov	r3, fp
 800bd20:	4622      	mov	r2, r4
 800bd22:	4629      	mov	r1, r5
 800bd24:	4638      	mov	r0, r7
 800bd26:	f7ff ff6e 	bl	800bc06 <__ssputs_r>
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	f000 80aa 	beq.w	800be84 <_svfiprintf_r+0x1c8>
 800bd30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd32:	445a      	add	r2, fp
 800bd34:	9209      	str	r2, [sp, #36]	; 0x24
 800bd36:	f89a 3000 	ldrb.w	r3, [sl]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 80a2 	beq.w	800be84 <_svfiprintf_r+0x1c8>
 800bd40:	2300      	movs	r3, #0
 800bd42:	f04f 32ff 	mov.w	r2, #4294967295
 800bd46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd4a:	f10a 0a01 	add.w	sl, sl, #1
 800bd4e:	9304      	str	r3, [sp, #16]
 800bd50:	9307      	str	r3, [sp, #28]
 800bd52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd56:	931a      	str	r3, [sp, #104]	; 0x68
 800bd58:	4654      	mov	r4, sl
 800bd5a:	2205      	movs	r2, #5
 800bd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd60:	4851      	ldr	r0, [pc, #324]	; (800bea8 <_svfiprintf_r+0x1ec>)
 800bd62:	f7f4 fa25 	bl	80001b0 <memchr>
 800bd66:	9a04      	ldr	r2, [sp, #16]
 800bd68:	b9d8      	cbnz	r0, 800bda2 <_svfiprintf_r+0xe6>
 800bd6a:	06d0      	lsls	r0, r2, #27
 800bd6c:	bf44      	itt	mi
 800bd6e:	2320      	movmi	r3, #32
 800bd70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd74:	0711      	lsls	r1, r2, #28
 800bd76:	bf44      	itt	mi
 800bd78:	232b      	movmi	r3, #43	; 0x2b
 800bd7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd7e:	f89a 3000 	ldrb.w	r3, [sl]
 800bd82:	2b2a      	cmp	r3, #42	; 0x2a
 800bd84:	d015      	beq.n	800bdb2 <_svfiprintf_r+0xf6>
 800bd86:	9a07      	ldr	r2, [sp, #28]
 800bd88:	4654      	mov	r4, sl
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	f04f 0c0a 	mov.w	ip, #10
 800bd90:	4621      	mov	r1, r4
 800bd92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd96:	3b30      	subs	r3, #48	; 0x30
 800bd98:	2b09      	cmp	r3, #9
 800bd9a:	d94e      	bls.n	800be3a <_svfiprintf_r+0x17e>
 800bd9c:	b1b0      	cbz	r0, 800bdcc <_svfiprintf_r+0x110>
 800bd9e:	9207      	str	r2, [sp, #28]
 800bda0:	e014      	b.n	800bdcc <_svfiprintf_r+0x110>
 800bda2:	eba0 0308 	sub.w	r3, r0, r8
 800bda6:	fa09 f303 	lsl.w	r3, r9, r3
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	9304      	str	r3, [sp, #16]
 800bdae:	46a2      	mov	sl, r4
 800bdb0:	e7d2      	b.n	800bd58 <_svfiprintf_r+0x9c>
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	1d19      	adds	r1, r3, #4
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	9103      	str	r1, [sp, #12]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	bfbb      	ittet	lt
 800bdbe:	425b      	neglt	r3, r3
 800bdc0:	f042 0202 	orrlt.w	r2, r2, #2
 800bdc4:	9307      	strge	r3, [sp, #28]
 800bdc6:	9307      	strlt	r3, [sp, #28]
 800bdc8:	bfb8      	it	lt
 800bdca:	9204      	strlt	r2, [sp, #16]
 800bdcc:	7823      	ldrb	r3, [r4, #0]
 800bdce:	2b2e      	cmp	r3, #46	; 0x2e
 800bdd0:	d10c      	bne.n	800bdec <_svfiprintf_r+0x130>
 800bdd2:	7863      	ldrb	r3, [r4, #1]
 800bdd4:	2b2a      	cmp	r3, #42	; 0x2a
 800bdd6:	d135      	bne.n	800be44 <_svfiprintf_r+0x188>
 800bdd8:	9b03      	ldr	r3, [sp, #12]
 800bdda:	1d1a      	adds	r2, r3, #4
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	9203      	str	r2, [sp, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	bfb8      	it	lt
 800bde4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bde8:	3402      	adds	r4, #2
 800bdea:	9305      	str	r3, [sp, #20]
 800bdec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800beb8 <_svfiprintf_r+0x1fc>
 800bdf0:	7821      	ldrb	r1, [r4, #0]
 800bdf2:	2203      	movs	r2, #3
 800bdf4:	4650      	mov	r0, sl
 800bdf6:	f7f4 f9db 	bl	80001b0 <memchr>
 800bdfa:	b140      	cbz	r0, 800be0e <_svfiprintf_r+0x152>
 800bdfc:	2340      	movs	r3, #64	; 0x40
 800bdfe:	eba0 000a 	sub.w	r0, r0, sl
 800be02:	fa03 f000 	lsl.w	r0, r3, r0
 800be06:	9b04      	ldr	r3, [sp, #16]
 800be08:	4303      	orrs	r3, r0
 800be0a:	3401      	adds	r4, #1
 800be0c:	9304      	str	r3, [sp, #16]
 800be0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be12:	4826      	ldr	r0, [pc, #152]	; (800beac <_svfiprintf_r+0x1f0>)
 800be14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be18:	2206      	movs	r2, #6
 800be1a:	f7f4 f9c9 	bl	80001b0 <memchr>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d038      	beq.n	800be94 <_svfiprintf_r+0x1d8>
 800be22:	4b23      	ldr	r3, [pc, #140]	; (800beb0 <_svfiprintf_r+0x1f4>)
 800be24:	bb1b      	cbnz	r3, 800be6e <_svfiprintf_r+0x1b2>
 800be26:	9b03      	ldr	r3, [sp, #12]
 800be28:	3307      	adds	r3, #7
 800be2a:	f023 0307 	bic.w	r3, r3, #7
 800be2e:	3308      	adds	r3, #8
 800be30:	9303      	str	r3, [sp, #12]
 800be32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be34:	4433      	add	r3, r6
 800be36:	9309      	str	r3, [sp, #36]	; 0x24
 800be38:	e767      	b.n	800bd0a <_svfiprintf_r+0x4e>
 800be3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800be3e:	460c      	mov	r4, r1
 800be40:	2001      	movs	r0, #1
 800be42:	e7a5      	b.n	800bd90 <_svfiprintf_r+0xd4>
 800be44:	2300      	movs	r3, #0
 800be46:	3401      	adds	r4, #1
 800be48:	9305      	str	r3, [sp, #20]
 800be4a:	4619      	mov	r1, r3
 800be4c:	f04f 0c0a 	mov.w	ip, #10
 800be50:	4620      	mov	r0, r4
 800be52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be56:	3a30      	subs	r2, #48	; 0x30
 800be58:	2a09      	cmp	r2, #9
 800be5a:	d903      	bls.n	800be64 <_svfiprintf_r+0x1a8>
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d0c5      	beq.n	800bdec <_svfiprintf_r+0x130>
 800be60:	9105      	str	r1, [sp, #20]
 800be62:	e7c3      	b.n	800bdec <_svfiprintf_r+0x130>
 800be64:	fb0c 2101 	mla	r1, ip, r1, r2
 800be68:	4604      	mov	r4, r0
 800be6a:	2301      	movs	r3, #1
 800be6c:	e7f0      	b.n	800be50 <_svfiprintf_r+0x194>
 800be6e:	ab03      	add	r3, sp, #12
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	462a      	mov	r2, r5
 800be74:	4b0f      	ldr	r3, [pc, #60]	; (800beb4 <_svfiprintf_r+0x1f8>)
 800be76:	a904      	add	r1, sp, #16
 800be78:	4638      	mov	r0, r7
 800be7a:	f3af 8000 	nop.w
 800be7e:	1c42      	adds	r2, r0, #1
 800be80:	4606      	mov	r6, r0
 800be82:	d1d6      	bne.n	800be32 <_svfiprintf_r+0x176>
 800be84:	89ab      	ldrh	r3, [r5, #12]
 800be86:	065b      	lsls	r3, r3, #25
 800be88:	f53f af2c 	bmi.w	800bce4 <_svfiprintf_r+0x28>
 800be8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be8e:	b01d      	add	sp, #116	; 0x74
 800be90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be94:	ab03      	add	r3, sp, #12
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	462a      	mov	r2, r5
 800be9a:	4b06      	ldr	r3, [pc, #24]	; (800beb4 <_svfiprintf_r+0x1f8>)
 800be9c:	a904      	add	r1, sp, #16
 800be9e:	4638      	mov	r0, r7
 800bea0:	f7ff fa0a 	bl	800b2b8 <_printf_i>
 800bea4:	e7eb      	b.n	800be7e <_svfiprintf_r+0x1c2>
 800bea6:	bf00      	nop
 800bea8:	0800c728 	.word	0x0800c728
 800beac:	0800c732 	.word	0x0800c732
 800beb0:	00000000 	.word	0x00000000
 800beb4:	0800bc07 	.word	0x0800bc07
 800beb8:	0800c72e 	.word	0x0800c72e

0800bebc <_raise_r>:
 800bebc:	291f      	cmp	r1, #31
 800bebe:	b538      	push	{r3, r4, r5, lr}
 800bec0:	4604      	mov	r4, r0
 800bec2:	460d      	mov	r5, r1
 800bec4:	d904      	bls.n	800bed0 <_raise_r+0x14>
 800bec6:	2316      	movs	r3, #22
 800bec8:	6003      	str	r3, [r0, #0]
 800beca:	f04f 30ff 	mov.w	r0, #4294967295
 800bece:	bd38      	pop	{r3, r4, r5, pc}
 800bed0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bed2:	b112      	cbz	r2, 800beda <_raise_r+0x1e>
 800bed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bed8:	b94b      	cbnz	r3, 800beee <_raise_r+0x32>
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 f830 	bl	800bf40 <_getpid_r>
 800bee0:	462a      	mov	r2, r5
 800bee2:	4601      	mov	r1, r0
 800bee4:	4620      	mov	r0, r4
 800bee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beea:	f000 b817 	b.w	800bf1c <_kill_r>
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d00a      	beq.n	800bf08 <_raise_r+0x4c>
 800bef2:	1c59      	adds	r1, r3, #1
 800bef4:	d103      	bne.n	800befe <_raise_r+0x42>
 800bef6:	2316      	movs	r3, #22
 800bef8:	6003      	str	r3, [r0, #0]
 800befa:	2001      	movs	r0, #1
 800befc:	e7e7      	b.n	800bece <_raise_r+0x12>
 800befe:	2400      	movs	r4, #0
 800bf00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf04:	4628      	mov	r0, r5
 800bf06:	4798      	blx	r3
 800bf08:	2000      	movs	r0, #0
 800bf0a:	e7e0      	b.n	800bece <_raise_r+0x12>

0800bf0c <raise>:
 800bf0c:	4b02      	ldr	r3, [pc, #8]	; (800bf18 <raise+0xc>)
 800bf0e:	4601      	mov	r1, r0
 800bf10:	6818      	ldr	r0, [r3, #0]
 800bf12:	f7ff bfd3 	b.w	800bebc <_raise_r>
 800bf16:	bf00      	nop
 800bf18:	20000040 	.word	0x20000040

0800bf1c <_kill_r>:
 800bf1c:	b538      	push	{r3, r4, r5, lr}
 800bf1e:	4d07      	ldr	r5, [pc, #28]	; (800bf3c <_kill_r+0x20>)
 800bf20:	2300      	movs	r3, #0
 800bf22:	4604      	mov	r4, r0
 800bf24:	4608      	mov	r0, r1
 800bf26:	4611      	mov	r1, r2
 800bf28:	602b      	str	r3, [r5, #0]
 800bf2a:	f7f4 fd5c 	bl	80009e6 <_kill>
 800bf2e:	1c43      	adds	r3, r0, #1
 800bf30:	d102      	bne.n	800bf38 <_kill_r+0x1c>
 800bf32:	682b      	ldr	r3, [r5, #0]
 800bf34:	b103      	cbz	r3, 800bf38 <_kill_r+0x1c>
 800bf36:	6023      	str	r3, [r4, #0]
 800bf38:	bd38      	pop	{r3, r4, r5, pc}
 800bf3a:	bf00      	nop
 800bf3c:	2000077c 	.word	0x2000077c

0800bf40 <_getpid_r>:
 800bf40:	f7f4 bd49 	b.w	80009d6 <_getpid>

0800bf44 <__sread>:
 800bf44:	b510      	push	{r4, lr}
 800bf46:	460c      	mov	r4, r1
 800bf48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf4c:	f000 f89c 	bl	800c088 <_read_r>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	bfab      	itete	ge
 800bf54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf56:	89a3      	ldrhlt	r3, [r4, #12]
 800bf58:	181b      	addge	r3, r3, r0
 800bf5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf5e:	bfac      	ite	ge
 800bf60:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf62:	81a3      	strhlt	r3, [r4, #12]
 800bf64:	bd10      	pop	{r4, pc}

0800bf66 <__swrite>:
 800bf66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6a:	461f      	mov	r7, r3
 800bf6c:	898b      	ldrh	r3, [r1, #12]
 800bf6e:	05db      	lsls	r3, r3, #23
 800bf70:	4605      	mov	r5, r0
 800bf72:	460c      	mov	r4, r1
 800bf74:	4616      	mov	r6, r2
 800bf76:	d505      	bpl.n	800bf84 <__swrite+0x1e>
 800bf78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f000 f868 	bl	800c054 <_lseek_r>
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf8e:	81a3      	strh	r3, [r4, #12]
 800bf90:	4632      	mov	r2, r6
 800bf92:	463b      	mov	r3, r7
 800bf94:	4628      	mov	r0, r5
 800bf96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9a:	f000 b817 	b.w	800bfcc <_write_r>

0800bf9e <__sseek>:
 800bf9e:	b510      	push	{r4, lr}
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa6:	f000 f855 	bl	800c054 <_lseek_r>
 800bfaa:	1c43      	adds	r3, r0, #1
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	bf15      	itete	ne
 800bfb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfba:	81a3      	strheq	r3, [r4, #12]
 800bfbc:	bf18      	it	ne
 800bfbe:	81a3      	strhne	r3, [r4, #12]
 800bfc0:	bd10      	pop	{r4, pc}

0800bfc2 <__sclose>:
 800bfc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc6:	f000 b813 	b.w	800bff0 <_close_r>
	...

0800bfcc <_write_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4d07      	ldr	r5, [pc, #28]	; (800bfec <_write_r+0x20>)
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	4608      	mov	r0, r1
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	602a      	str	r2, [r5, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	f7f4 fd3a 	bl	8000a54 <_write>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d102      	bne.n	800bfea <_write_r+0x1e>
 800bfe4:	682b      	ldr	r3, [r5, #0]
 800bfe6:	b103      	cbz	r3, 800bfea <_write_r+0x1e>
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	2000077c 	.word	0x2000077c

0800bff0 <_close_r>:
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4d06      	ldr	r5, [pc, #24]	; (800c00c <_close_r+0x1c>)
 800bff4:	2300      	movs	r3, #0
 800bff6:	4604      	mov	r4, r0
 800bff8:	4608      	mov	r0, r1
 800bffa:	602b      	str	r3, [r5, #0]
 800bffc:	f7f4 fd46 	bl	8000a8c <_close>
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	d102      	bne.n	800c00a <_close_r+0x1a>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	b103      	cbz	r3, 800c00a <_close_r+0x1a>
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	bd38      	pop	{r3, r4, r5, pc}
 800c00c:	2000077c 	.word	0x2000077c

0800c010 <_fstat_r>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4d07      	ldr	r5, [pc, #28]	; (800c030 <_fstat_r+0x20>)
 800c014:	2300      	movs	r3, #0
 800c016:	4604      	mov	r4, r0
 800c018:	4608      	mov	r0, r1
 800c01a:	4611      	mov	r1, r2
 800c01c:	602b      	str	r3, [r5, #0]
 800c01e:	f7f4 fd41 	bl	8000aa4 <_fstat>
 800c022:	1c43      	adds	r3, r0, #1
 800c024:	d102      	bne.n	800c02c <_fstat_r+0x1c>
 800c026:	682b      	ldr	r3, [r5, #0]
 800c028:	b103      	cbz	r3, 800c02c <_fstat_r+0x1c>
 800c02a:	6023      	str	r3, [r4, #0]
 800c02c:	bd38      	pop	{r3, r4, r5, pc}
 800c02e:	bf00      	nop
 800c030:	2000077c 	.word	0x2000077c

0800c034 <_isatty_r>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	4d06      	ldr	r5, [pc, #24]	; (800c050 <_isatty_r+0x1c>)
 800c038:	2300      	movs	r3, #0
 800c03a:	4604      	mov	r4, r0
 800c03c:	4608      	mov	r0, r1
 800c03e:	602b      	str	r3, [r5, #0]
 800c040:	f7f4 fd40 	bl	8000ac4 <_isatty>
 800c044:	1c43      	adds	r3, r0, #1
 800c046:	d102      	bne.n	800c04e <_isatty_r+0x1a>
 800c048:	682b      	ldr	r3, [r5, #0]
 800c04a:	b103      	cbz	r3, 800c04e <_isatty_r+0x1a>
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	bd38      	pop	{r3, r4, r5, pc}
 800c050:	2000077c 	.word	0x2000077c

0800c054 <_lseek_r>:
 800c054:	b538      	push	{r3, r4, r5, lr}
 800c056:	4d07      	ldr	r5, [pc, #28]	; (800c074 <_lseek_r+0x20>)
 800c058:	4604      	mov	r4, r0
 800c05a:	4608      	mov	r0, r1
 800c05c:	4611      	mov	r1, r2
 800c05e:	2200      	movs	r2, #0
 800c060:	602a      	str	r2, [r5, #0]
 800c062:	461a      	mov	r2, r3
 800c064:	f7f4 fd39 	bl	8000ada <_lseek>
 800c068:	1c43      	adds	r3, r0, #1
 800c06a:	d102      	bne.n	800c072 <_lseek_r+0x1e>
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	b103      	cbz	r3, 800c072 <_lseek_r+0x1e>
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	bd38      	pop	{r3, r4, r5, pc}
 800c074:	2000077c 	.word	0x2000077c

0800c078 <_malloc_usable_size_r>:
 800c078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c07c:	1f18      	subs	r0, r3, #4
 800c07e:	2b00      	cmp	r3, #0
 800c080:	bfbc      	itt	lt
 800c082:	580b      	ldrlt	r3, [r1, r0]
 800c084:	18c0      	addlt	r0, r0, r3
 800c086:	4770      	bx	lr

0800c088 <_read_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4d07      	ldr	r5, [pc, #28]	; (800c0a8 <_read_r+0x20>)
 800c08c:	4604      	mov	r4, r0
 800c08e:	4608      	mov	r0, r1
 800c090:	4611      	mov	r1, r2
 800c092:	2200      	movs	r2, #0
 800c094:	602a      	str	r2, [r5, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	f7f4 fcbf 	bl	8000a1a <_read>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_read_r+0x1e>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_read_r+0x1e>
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	2000077c 	.word	0x2000077c

0800c0ac <_init>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	bf00      	nop
 800c0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b2:	bc08      	pop	{r3}
 800c0b4:	469e      	mov	lr, r3
 800c0b6:	4770      	bx	lr

0800c0b8 <_fini>:
 800c0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ba:	bf00      	nop
 800c0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0be:	bc08      	pop	{r3}
 800c0c0:	469e      	mov	lr, r3
 800c0c2:	4770      	bx	lr
