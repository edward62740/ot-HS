
HS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf78  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800c0b8  0800c0b8  0001c0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c7d4  0800c7d4  0001c7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c7d8  0800c7d8  0001c7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000008  0800c7dc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 SYSTEM_DRIVER_CONTEXT 00000011  200000a4  0800c878  000200a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006d4  200000b8  0800c889  000200b8  2**2
                  ALLOC
  8 ._user_heap_stack 00002804  2000078c  0800c889  0002078c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 11 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 12 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 13 .debug_info   0003df40  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000078b3  00000000  00000000  0005e025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000030a0  00000000  00000000  000658d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002d58  00000000  00000000  00068978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033729  00000000  00000000  0006b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ca68  00000000  00000000  0009edf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114381  00000000  00000000  000db861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001efbe2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d124  00000000  00000000  001efc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000b8 	.word	0x200000b8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c0a0 	.word	0x0800c0a0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000bc 	.word	0x200000bc
 800017c:	0800c0a0 	.word	0x0800c0a0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	460b      	mov	r3, r1
 800025a:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800025c:	23ff      	movs	r3, #255	; 0xff
 800025e:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000260:	2300      	movs	r3, #0
 8000262:	81fb      	strh	r3, [r7, #14]
 8000264:	e021      	b.n	80002aa <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8000266:	89fb      	ldrh	r3, [r7, #14]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	781a      	ldrb	r2, [r3, #0]
 800026e:	7b7b      	ldrb	r3, [r7, #13]
 8000270:	4053      	eors	r3, r2
 8000272:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000274:	2308      	movs	r3, #8
 8000276:	733b      	strb	r3, [r7, #12]
 8000278:	e011      	b.n	800029e <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800027a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800027e:	2b00      	cmp	r3, #0
 8000280:	da07      	bge.n	8000292 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000282:	7b7b      	ldrb	r3, [r7, #13]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	b25b      	sxtb	r3, r3
 8000288:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800028c:	b25b      	sxtb	r3, r3
 800028e:	737b      	strb	r3, [r7, #13]
 8000290:	e002      	b.n	8000298 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000292:	7b7b      	ldrb	r3, [r7, #13]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000298:	7b3b      	ldrb	r3, [r7, #12]
 800029a:	3b01      	subs	r3, #1
 800029c:	733b      	strb	r3, [r7, #12]
 800029e:	7b3b      	ldrb	r3, [r7, #12]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1ea      	bne.n	800027a <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80002a4:	89fb      	ldrh	r3, [r7, #14]
 80002a6:	3301      	adds	r3, #1
 80002a8:	81fb      	strh	r3, [r7, #14]
 80002aa:	89fa      	ldrh	r2, [r7, #14]
 80002ac:	887b      	ldrh	r3, [r7, #2]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d3d9      	bcc.n	8000266 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80002b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	807b      	strh	r3, [r7, #2]
 80002cc:	4613      	mov	r3, r2
 80002ce:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	4619      	mov	r1, r3
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f7ff ffbb 	bl	8000250 <sensirion_common_generate_crc>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	787b      	ldrb	r3, [r7, #1]
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d002      	beq.n	80002ea <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 80002e4:	f04f 33ff 	mov.w	r3, #4294967295
 80002e8:	e000      	b.n	80002ec <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 80002ea:	2300      	movs	r3, #0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <sensirion_i2c_read_words_as_bytes>:
    }
    return idx;
}

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b096      	sub	sp, #88	; 0x58
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	4613      	mov	r3, r2
 8000302:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000304:	88bb      	ldrh	r3, [r7, #4]
 8000306:	461a      	mov	r2, r3
 8000308:	0052      	lsls	r2, r2, #1
 800030a:	4413      	add	r3, r2
 800030c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000310:	f107 0308 	add.w	r3, r7, #8
 8000314:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8000316:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f8a2 	bl	8000468 <sensirion_i2c_read>
 8000324:	4603      	mov	r3, r0
 8000326:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 800032a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800032e:	2b00      	cmp	r3, #0
 8000330:	d002      	beq.n	8000338 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000332:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000336:	e047      	b.n	80003c8 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000338:	2300      	movs	r3, #0
 800033a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800033e:	2300      	movs	r3, #0
 8000340:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000344:	e039      	b.n	80003ba <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000346:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800034a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800034c:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 800034e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000352:	3302      	adds	r3, #2
 8000354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000356:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	2102      	movs	r1, #2
 800035e:	f7ff ffaf 	bl	80002c0 <sensirion_common_check_crc>
 8000362:	4603      	mov	r3, r0
 8000364:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 8000368:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000370:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000374:	e028      	b.n	80003c8 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 8000376:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800037a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800037c:	441a      	add	r2, r3
 800037e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000382:	1c59      	adds	r1, r3, #1
 8000384:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 8000388:	4619      	mov	r1, r3
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	440b      	add	r3, r1
 800038e:	7812      	ldrb	r2, [r2, #0]
 8000390:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000392:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000396:	3301      	adds	r3, #1
 8000398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800039a:	441a      	add	r2, r3
 800039c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80003a0:	1c59      	adds	r1, r3, #1
 80003a2:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80003a6:	4619      	mov	r1, r3
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	440b      	add	r3, r1
 80003ac:	7812      	ldrb	r2, [r2, #0]
 80003ae:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80003b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80003b4:	3303      	adds	r3, #3
 80003b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80003ba:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80003be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3bf      	bcc.n	8000346 <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80003c6:	2300      	movs	r3, #0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3758      	adds	r7, #88	; 0x58
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	6039      	str	r1, [r7, #0]
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	4613      	mov	r3, r2
 80003de:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80003e0:	88ba      	ldrh	r2, [r7, #4]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	6839      	ldr	r1, [r7, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff84 	bl	80002f4 <sensirion_i2c_read_words_as_bytes>
 80003ec:	4603      	mov	r3, r0
 80003ee:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 80003f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <sensirion_i2c_read_words+0x2e>
        return ret;
 80003f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003fc:	e020      	b.n	8000440 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e017      	b.n	8000434 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	683a      	ldr	r2, [r7, #0]
 800040a:	4413      	add	r3, r2
 800040c:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	021b      	lsls	r3, r3, #8
 8000414:	b21a      	sxth	r2, r3
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	3301      	adds	r3, #1
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b21b      	sxth	r3, r3
 800041e:	4313      	orrs	r3, r2
 8000420:	b219      	sxth	r1, r3
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	4413      	add	r3, r2
 800042a:	b28a      	uxth	r2, r1
 800042c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	3301      	adds	r3, #1
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	b29b      	uxth	r3, r3
 8000438:	88ba      	ldrh	r2, [r7, #4]
 800043a:	429a      	cmp	r2, r3
 800043c:	d8e2      	bhi.n	8000404 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(I2C_HandleTypeDef* i2c_handle) {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	i2c = i2c_handle;
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <sensirion_i2c_init+0x1c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6013      	str	r3, [r2, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	200000d4 	.word	0x200000d4

08000468 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af02      	add	r7, sp, #8
 800046e:	4603      	mov	r3, r0
 8000470:	6039      	str	r1, [r7, #0]
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Receive(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <sensirion_i2c_read+0x34>)
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	b29b      	uxth	r3, r3
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	b299      	uxth	r1, r3
 8000484:	88bb      	ldrh	r3, [r7, #4]
 8000486:	2205      	movs	r2, #5
 8000488:	9200      	str	r2, [sp, #0]
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	f004 fd3a 	bl	8004f04 <HAL_I2C_Master_Receive>
 8000490:	4603      	mov	r3, r0
 8000492:	b25b      	sxtb	r3, r3
}
 8000494:	4618      	mov	r0, r3
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200000d4 	.word	0x200000d4

080004a0 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	4603      	mov	r3, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	4613      	mov	r3, r2
 80004ae:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Transmit(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <sensirion_i2c_write+0x34>)
 80004b2:	6818      	ldr	r0, [r3, #0]
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	b299      	uxth	r1, r3
 80004bc:	88bb      	ldrh	r3, [r7, #4]
 80004be:	2205      	movs	r2, #5
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	f004 fc2a 	bl	8004d1c <HAL_I2C_Master_Transmit>
 80004c8:	4603      	mov	r3, r0
 80004ca:	b25b      	sxtb	r3, r3
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000d4 	.word	0x200000d4

080004d8 <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <sensirion_sleep_usec+0x40>)
 80004e4:	fba2 2303 	umull	r2, r3, r2, r3
 80004e8:	099b      	lsrs	r3, r3, #6
 80004ea:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <sensirion_sleep_usec+0x40>)
 80004f0:	fba3 1302 	umull	r1, r3, r3, r2
 80004f4:	099b      	lsrs	r3, r3, #6
 80004f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004fa:	fb01 f303 	mul.w	r3, r1, r3
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <sensirion_sleep_usec+0x32>
        msec++;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	3301      	adds	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f001 ff54 	bl	80023b8 <HAL_Delay>
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	10624dd3 	.word	0x10624dd3

0800051c <sht4x_activate_medium_heater>:
#define SHT_DRV_VERSION_STR "5.3.0"
static uint8_t sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
static uint16_t sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;


int16_t sht4x_activate_medium_heater(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	81fb      	strh	r3, [r7, #14]
    buffer[offset++] = (uint8_t)0x24;
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	81fa      	strh	r2, [r7, #14]
 800052c:	3310      	adds	r3, #16
 800052e:	443b      	add	r3, r7
 8000530:	2224      	movs	r2, #36	; 0x24
 8000532:	f803 2c0c 	strb.w	r2, [r3, #-12]

    error = sensirion_i2c_write(SHT4X_ADDRESS, &buffer[0], offset);
 8000536:	89fa      	ldrh	r2, [r7, #14]
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4619      	mov	r1, r3
 800053c:	2044      	movs	r0, #68	; 0x44
 800053e:	f7ff ffaf 	bl	80004a0 <sensirion_i2c_write>
 8000542:	4603      	mov	r3, r0
 8000544:	81bb      	strh	r3, [r7, #12]
    if (error) {
 8000546:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <sht4x_activate_medium_heater+0x38>
        return error;
 800054e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000552:	e000      	b.n	8000556 <sht4x_activate_medium_heater+0x3a>
    }


    return NO_ERROR;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <sht4x_measure_blocking_read>:

int16_t sht4x_measure_blocking_read(int32_t* temperature, int32_t* humidity) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sht4x_measure();
 800056a:	f000 f819 	bl	80005a0 <sht4x_measure>
 800056e:	4603      	mov	r3, r0
 8000570:	81fb      	strh	r3, [r7, #14]
    if (ret)
 8000572:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <sht4x_measure_blocking_read+0x20>
        return ret;
 800057a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800057e:	e009      	b.n	8000594 <sht4x_measure_blocking_read+0x34>
    sensirion_sleep_usec(sht4x_cmd_measure_delay_us);
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <sht4x_measure_blocking_read+0x3c>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ffa7 	bl	80004d8 <sensirion_sleep_usec>
    return sht4x_read(temperature, humidity);
 800058a:	6839      	ldr	r1, [r7, #0]
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f815 	bl	80005bc <sht4x_read>
 8000592:	4603      	mov	r3, r0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000000a 	.word	0x2000000a

080005a0 <sht4x_measure>:

int16_t sht4x_measure(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    return sensirion_i2c_write(SHT4X_ADDRESS, &sht4x_cmd_measure, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	4904      	ldr	r1, [pc, #16]	; (80005b8 <sht4x_measure+0x18>)
 80005a8:	2044      	movs	r0, #68	; 0x44
 80005aa:	f7ff ff79 	bl	80004a0 <sensirion_i2c_write>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b21b      	sxth	r3, r3
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000008 	.word	0x20000008

080005bc <sht4x_read>:

int16_t sht4x_read(int32_t* temperature, int32_t* humidity) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHT4X_ADDRESS, words,
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2202      	movs	r2, #2
 80005cc:	4619      	mov	r1, r3
 80005ce:	2044      	movs	r0, #68	; 0x44
 80005d0:	f7ff fefe 	bl	80003d0 <sensirion_i2c_read_words>
 80005d4:	4603      	mov	r3, r0
 80005d6:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 65535 - 45
     * Relative Humidity = 125 * (S_RH / 65535) - 6
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 80005d8:	893b      	ldrh	r3, [r7, #8]
 80005da:	461a      	mov	r2, r3
 80005dc:	f245 5373 	movw	r3, #21875	; 0x5573
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	135b      	asrs	r3, r3, #13
 80005e6:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 80005ea:	3bc8      	subs	r3, #200	; 0xc8
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	6013      	str	r3, [r2, #0]
    *humidity = ((15625 * (int32_t)words[1]) >> 13) - 6000;
 80005f0:	897b      	ldrh	r3, [r7, #10]
 80005f2:	461a      	mov	r2, r3
 80005f4:	f643 5309 	movw	r3, #15625	; 0x3d09
 80005f8:	fb02 f303 	mul.w	r3, r2, r3
 80005fc:	135b      	asrs	r3, r3, #13
 80005fe:	f5a3 53bb 	sub.w	r3, r3, #5984	; 0x1760
 8000602:	3b10      	subs	r3, #16
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	6013      	str	r3, [r2, #0]

    return ret;
 8000608:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <sht4x_enable_low_power_mode>:
    uint32_t serial;

    return sht4x_read_serial(&serial);
}

void sht4x_enable_low_power_mode(uint8_t enable_low_power_mode) {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
    if (enable_low_power_mode) {
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d007      	beq.n	8000634 <sht4x_enable_low_power_mode+0x20>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_LPM;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <sht4x_enable_low_power_mode+0x3c>)
 8000626:	22e0      	movs	r2, #224	; 0xe0
 8000628:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_LPM_USEC;
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <sht4x_enable_low_power_mode+0x40>)
 800062c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000630:	801a      	strh	r2, [r3, #0]
    } else {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
    }
}
 8000632:	e006      	b.n	8000642 <sht4x_enable_low_power_mode+0x2e>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <sht4x_enable_low_power_mode+0x3c>)
 8000636:	22fd      	movs	r2, #253	; 0xfd
 8000638:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <sht4x_enable_low_power_mode+0x40>)
 800063c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000640:	801a      	strh	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000008 	.word	0x20000008
 8000654:	2000000a 	.word	0x2000000a

08000658 <platform_stts22h_init>:
#include <stm32wbxx_hal.h>
stmdev_ctx_t dev_ctx;
stmdev_ctx_t *ctx;

bool platform_stts22h_init(I2C_HandleTypeDef* i2c_handle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	  static uint8_t whoamI;
	  /* Initialize mems driver interface */

	  dev_ctx.write_reg = platform_write;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <platform_stts22h_init+0x3c>)
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <platform_stts22h_init+0x40>)
 8000664:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <platform_stts22h_init+0x3c>)
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <platform_stts22h_init+0x44>)
 800066a:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &i2c_handle;
 800066c:	4a09      	ldr	r2, [pc, #36]	; (8000694 <platform_stts22h_init+0x3c>)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	60d3      	str	r3, [r2, #12]
	  ctx = &dev_ctx;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <platform_stts22h_init+0x48>)
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <platform_stts22h_init+0x3c>)
 8000676:	601a      	str	r2, [r3, #0]
	  /* Check device ID */
	  stts22h_dev_id_get(&whoamI);
 8000678:	480a      	ldr	r0, [pc, #40]	; (80006a4 <platform_stts22h_init+0x4c>)
 800067a:	f000 f966 	bl	800094a <stts22h_dev_id_get>

	  return (whoamI == STTS22H_ID ? true : false);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <platform_stts22h_init+0x4c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2ba0      	cmp	r3, #160	; 0xa0
 8000684:	bf0c      	ite	eq
 8000686:	2301      	moveq	r3, #1
 8000688:	2300      	movne	r3, #0
 800068a:	b2db      	uxtb	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000d8 	.word	0x200000d8
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080006df 	.word	0x080006df
 80006a0:	200000e8 	.word	0x200000e8
 80006a4:	200000ec 	.word	0x200000ec

080006a8 <platform_write>:

int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	461a      	mov	r2, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	72fb      	strb	r3, [r7, #11]
 80006b8:	4613      	mov	r3, r2
 80006ba:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Receive(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	b299      	uxth	r1, r3
 80006c4:	893b      	ldrh	r3, [r7, #8]
 80006c6:	2205      	movs	r2, #5
 80006c8:	9200      	str	r2, [sp, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f004 fc19 	bl	8004f04 <HAL_I2C_Master_Receive>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b25b      	sxtb	r3, r3
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <platform_read>:


int32_t platform_read(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af02      	add	r7, sp, #8
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	461a      	mov	r2, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	72fb      	strb	r3, [r7, #11]
 80006ee:	4613      	mov	r3, r2
 80006f0:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Transmit(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	b299      	uxth	r1, r3
 80006fa:	893b      	ldrh	r3, [r7, #8]
 80006fc:	2205      	movs	r2, #5
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f004 fb0a 	bl	8004d1c <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	b25b      	sxtb	r3, r3
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg( uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <stts22h_read_reg+0x30>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	685c      	ldr	r4, [r3, #4]
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <stts22h_read_reg+0x30>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68d8      	ldr	r0, [r3, #12]
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	79f9      	ldrb	r1, [r7, #7]
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	47a0      	blx	r4
 8000738:	60f8      	str	r0, [r7, #12]

  return ret;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	200000e8 	.word	0x200000e8

08000748 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg( uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <stts22h_write_reg+0x30>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681c      	ldr	r4, [r3, #0]
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <stts22h_write_reg+0x30>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	79f9      	ldrb	r1, [r7, #7]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	47a0      	blx	r4
 800076c:	60f8      	str	r0, [r7, #12]

  return ret;
 800076e:	68fb      	ldr	r3, [r7, #12]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	200000e8 	.word	0x200000e8

0800077c <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(
                                   stts22h_odr_temp_t val)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	2004      	movs	r0, #4
 8000790:	f7ff ffc0 	bl	8000714 <stts22h_read_reg>
 8000794:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d107      	bne.n	80007ac <stts22h_temp_data_rate_set+0x30>
  {
    ret = stts22h_read_reg(STTS22H_SOFTWARE_RESET,
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	200c      	movs	r0, #12
 80007a6:	f7ff ffb5 	bl	8000714 <stts22h_read_reg>
 80007aa:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d11d      	bne.n	80007ee <stts22h_temp_data_rate_set+0x72>
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d11a      	bne.n	80007ee <stts22h_temp_data_rate_set+0x72>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 80007b8:	7c3b      	ldrb	r3, [r7, #16]
 80007ba:	f043 0302 	orr.w	r3, r3, #2
 80007be:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	200c      	movs	r0, #12
 80007ca:	f7ff ffbd 	bl	8000748 <stts22h_write_reg>
 80007ce:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10b      	bne.n	80007ee <stts22h_temp_data_rate_set+0x72>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 80007d6:	7c3b      	ldrb	r3, [r7, #16]
 80007d8:	f36f 0341 	bfc	r3, #1, #1
 80007dc:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	200c      	movs	r0, #12
 80007e8:	f7ff ffae 	bl	8000748 <stts22h_write_reg>
 80007ec:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d008      	beq.n	8000806 <stts22h_temp_data_rate_set+0x8a>
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b12      	cmp	r3, #18
 80007f8:	d005      	beq.n	8000806 <stts22h_temp_data_rate_set+0x8a>
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b22      	cmp	r3, #34	; 0x22
 80007fe:	d002      	beq.n	8000806 <stts22h_temp_data_rate_set+0x8a>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b32      	cmp	r3, #50	; 0x32
 8000804:	d123      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000806:	7b3b      	ldrb	r3, [r7, #12]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 800080e:	2b00      	cmp	r3, #0
 8000810:	d11d      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d11a      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000818:	7c3b      	ldrb	r3, [r7, #16]
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	200c      	movs	r0, #12
 800082a:	f7ff ff8d 	bl	8000748 <stts22h_write_reg>
 800082e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10b      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000836:	7c3b      	ldrb	r3, [r7, #16]
 8000838:	f36f 0341 	bfc	r3, #1, #1
 800083c:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	2201      	movs	r2, #1
 8000844:	4619      	mov	r1, r3
 8000846:	200c      	movs	r0, #12
 8000848:	f7ff ff7e 	bl	8000748 <stts22h_write_reg>
 800084c:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b04      	cmp	r3, #4
 8000852:	d125      	bne.n	80008a0 <stts22h_temp_data_rate_set+0x124>
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d122      	bne.n	80008a0 <stts22h_temp_data_rate_set+0x124>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800085a:	7c3b      	ldrb	r3, [r7, #16]
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000862:	7c3b      	ldrb	r3, [r7, #16]
 8000864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000868:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	2201      	movs	r2, #1
 8000870:	4619      	mov	r1, r3
 8000872:	200c      	movs	r0, #12
 8000874:	f7ff ff68 	bl	8000748 <stts22h_write_reg>
 8000878:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d10f      	bne.n	80008a0 <stts22h_temp_data_rate_set+0x124>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000880:	7c3b      	ldrb	r3, [r7, #16]
 8000882:	f36f 0341 	bfc	r3, #1, #1
 8000886:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000888:	7c3b      	ldrb	r3, [r7, #16]
 800088a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088e:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	200c      	movs	r0, #12
 800089a:	f7ff ff55 	bl	8000748 <stts22h_write_reg>
 800089e:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d12a      	bne.n	80008fc <stts22h_temp_data_rate_set+0x180>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	f362 0300 	bfi	r3, r2, #0, #1
 80008b4:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	7b3b      	ldrb	r3, [r7, #12]
 80008c2:	f362 0382 	bfi	r3, r2, #2, #1
 80008c6:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	f362 13c7 	bfi	r3, r2, #7, #1
 80008d8:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	091b      	lsrs	r3, r3, #4
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	7b3b      	ldrb	r3, [r7, #12]
 80008e6:	f362 1305 	bfi	r3, r2, #4, #2
 80008ea:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2201      	movs	r2, #1
 80008f2:	4619      	mov	r1, r3
 80008f4:	2004      	movs	r0, #4
 80008f6:	f7ff ff27 	bl	8000748 <stts22h_write_reg>
 80008fa:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80008fc:	697b      	ldr	r3, [r7, #20]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get( int16_t *val)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_TEMP_L_OUT, buff, 2);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2202      	movs	r2, #2
 8000914:	4619      	mov	r1, r3
 8000916:	2006      	movs	r0, #6
 8000918:	f7ff fefc 	bl	8000714 <stts22h_read_reg>
 800091c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800091e:	7a7b      	ldrb	r3, [r7, #9]
 8000920:	b21a      	sxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092c:	b29b      	uxth	r3, r3
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b29a      	uxth	r2, r3
 8000932:	7a3b      	ldrb	r3, [r7, #8]
 8000934:	b29b      	uxth	r3, r3
 8000936:	4413      	add	r3, r2
 8000938:	b29b      	uxth	r3, r3
 800093a:	b21a      	sxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	801a      	strh	r2, [r3, #0]

  return ret;
 8000940:	68fb      	ldr	r3, [r7, #12]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get( uint8_t *buff)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_WHOAMI, buff, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fedc 	bl	8000714 <stts22h_read_reg>
 800095c:	60f8      	str	r0, [r7, #12]

  return ret;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000968:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096c:	3304      	adds	r3, #4

0800096e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000970:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000972:	d3f9      	bcc.n	8000968 <CopyDataInit>
  bx lr
 8000974:	4770      	bx	lr

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000976:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000978:	3004      	adds	r0, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800097a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>
  bx lr
 800097e:	4770      	bx	lr

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000984:	f003 fa6c 	bl	8003e60 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <LoopForever+0x8>)
 800098a:	490c      	ldr	r1, [pc, #48]	; (80009bc <LoopForever+0xc>)
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <LoopForever+0x10>)
 800098e:	2300      	movs	r3, #0
 8000990:	f7ff ffed 	bl	800096e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <LoopForever+0x14>)
 8000996:	490c      	ldr	r1, [pc, #48]	; (80009c8 <LoopForever+0x18>)
 8000998:	2300      	movs	r3, #0
 800099a:	f7ff ffee 	bl	800097a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <LoopForever+0x1c>)
 80009a0:	490b      	ldr	r1, [pc, #44]	; (80009d0 <LoopForever+0x20>)
 80009a2:	2300      	movs	r3, #0
 80009a4:	f7ff ffe9 	bl	800097a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a8:	f00a f98e 	bl	800acc8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80009ac:	f002 fcfa 	bl	80033a4 <main>

080009b0 <LoopForever>:

LoopForever:
  b LoopForever
 80009b0:	e7fe      	b.n	80009b0 <LoopForever>
 80009b2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80009b4:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 80009b8:	20000008 	.word	0x20000008
 80009bc:	200000a4 	.word	0x200000a4
 80009c0:	0800c7dc 	.word	0x0800c7dc
  INIT_BSS _sbss, _ebss
 80009c4:	200000b8 	.word	0x200000b8
 80009c8:	2000078c 	.word	0x2000078c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80009cc:	200300e8 	.word	0x200300e8
 80009d0:	20030c6a 	.word	0x20030c6a

080009d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_IRQHandler>

080009d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  return 1;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <_kill>:

int _kill(int pid, int sig)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009f0:	f00a f952 	bl	800ac98 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2216      	movs	r2, #22
 80009f8:	601a      	str	r2, [r3, #0]
  return -1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_exit>:

void _exit (int status)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffe7 	bl	80009e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a18:	e7fe      	b.n	8000a18 <_exit+0x12>

08000a1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	60f8      	str	r0, [r7, #12]
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	e00a      	b.n	8000a42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a2c:	f3af 8000 	nop.w
 8000a30:	4601      	mov	r1, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	60ba      	str	r2, [r7, #8]
 8000a38:	b2ca      	uxtb	r2, r1
 8000a3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	dbf0      	blt.n	8000a2c <_read+0x12>
  }

  return len;
 8000a4a:	687b      	ldr	r3, [r7, #4]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e009      	b.n	8000a7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	60ba      	str	r2, [r7, #8]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	3301      	adds	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	dbf1      	blt.n	8000a66 <_write+0x12>
  }
  return len;
 8000a82:	687b      	ldr	r3, [r7, #4]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_close>:

int _close(int file)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_isatty>:

int _isatty(int file)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b085      	sub	sp, #20
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f00a f8b8 	bl	800ac98 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20024000 	.word	0x20024000
 8000b54:	00002000 	.word	0x00002000
 8000b58:	200000f0 	.word	0x200000f0
 8000b5c:	20000790 	.word	0x20000790

08000b60 <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f007 ff15 	bl	80089a2 <otCoapSendResponseWithParameters>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <APP_THREAD_Init>:
static otInstance *sInstance = NULL;

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

	  /* USER CODE END APP_THREAD_INIT_1 */
	  SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f008 fe5a 	bl	8009846 <SHCI_C2_RADIO_AllowLowPower>
	  SHCI_CmdStatus_t ThreadInitStatus;

	  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
	  APP_THREAD_CheckWirelessFirmwareInfo();
 8000b92:	f000 faff 	bl	8001194 <APP_THREAD_CheckWirelessFirmwareInfo>
	#if (CFG_USB_INTERFACE_ENABLE != 0)
	  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
	#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

	  /* Register cmdbuffer */
	  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000b96:	4835      	ldr	r0, [pc, #212]	; (8000c6c <APP_THREAD_Init+0xe8>)
 8000b98:	f000 fcf0 	bl	800157c <APP_THREAD_RegisterCmdBuffer>

	  /**
	   * Do not allow standby in the application
	   */
	  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	2002      	movs	r0, #2
 8000ba0:	f009 fd3a 	bl	800a618 <UTIL_LPM_SetOffMode>
	  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f009 fd06 	bl	800a5b8 <UTIL_LPM_SetStopMode>
	/* Init config buffer and call TL_THREAD_Init */
	APP_THREAD_TL_THREAD_INIT();
 8000bac:	f000 fda4 	bl	80016f8 <APP_THREAD_TL_THREAD_INIT>

	/* Configure UART for sending CLI command from M4 */
	APP_THREAD_Init_UART_CLI();
 8000bb0:	f000 fd9a 	bl	80016e8 <APP_THREAD_Init_UART_CLI>

	/* Send Thread start system cmd to M0 */
	ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000bb4:	f008 fe1b 	bl	80097ee <SHCI_C2_THREAD_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]

	//otPlatRadioGetIeeeEui64(sInstance, &eui64);

	/* Prevent unused argument(s) compilation warning */
	UNUSED(ThreadInitStatus);
	sInstance = otInstanceInitSingle();
 8000bbc:	f007 ff59 	bl	8008a72 <otInstanceInitSingle>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <APP_THREAD_Init+0xec>)
 8000bc4:	6013      	str	r3, [r2, #0]
	assert(sInstance);
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <APP_THREAD_Init+0xec>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <APP_THREAD_Init+0x56>
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <APP_THREAD_Init+0xf0>)
 8000bd0:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <APP_THREAD_Init+0xf4>)
 8000bd2:	21ad      	movs	r1, #173	; 0xad
 8000bd4:	4829      	ldr	r0, [pc, #164]	; (8000c7c <APP_THREAD_Init+0xf8>)
 8000bd6:	f00a f841 	bl	800ac5c <__assert_func>
	APP_THREAD_SetSleepyEndDeviceMode();
 8000bda:	f000 f9cb 	bl	8000f74 <APP_THREAD_SetSleepyEndDeviceMode>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000bde:	2102      	movs	r1, #2
 8000be0:	4827      	ldr	r0, [pc, #156]	; (8000c80 <APP_THREAD_Init+0xfc>)
 8000be2:	f003 ffab 	bl	8004b3c <HAL_GPIO_TogglePin>
	/* Initialize and configure the Thread device*/
	otPlatRadioSetTransmitPower(sInstance, 6);
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <APP_THREAD_Init+0xec>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2106      	movs	r1, #6
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 fdcb 	bl	8009788 <otPlatRadioSetTransmitPower>
	otLinkGetFactoryAssignedIeeeEui64(sInstance, &eui64);
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <APP_THREAD_Init+0xec>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4923      	ldr	r1, [pc, #140]	; (8000c84 <APP_THREAD_Init+0x100>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f007 ffb9 	bl	8008b70 <otLinkGetFactoryAssignedIeeeEui64>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000bfe:	2102      	movs	r1, #2
 8000c00:	481f      	ldr	r0, [pc, #124]	; (8000c80 <APP_THREAD_Init+0xfc>)
 8000c02:	f003 ff9b 	bl	8004b3c <HAL_GPIO_TogglePin>
	APP_THREAD_DeviceConfig();
 8000c06:	f000 f9eb 	bl	8000fe0 <APP_THREAD_DeviceConfig>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	481c      	ldr	r0, [pc, #112]	; (8000c80 <APP_THREAD_Init+0xfc>)
 8000c0e:	f003 ff95 	bl	8004b3c <HAL_GPIO_TogglePin>
	appSrpInit();
 8000c12:	f000 f855 	bl	8000cc0 <appSrpInit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4819      	ldr	r0, [pc, #100]	; (8000c80 <APP_THREAD_Init+0xfc>)
 8000c1c:	f003 ff76 	bl	8004b0c <HAL_GPIO_WritePin>

	/* Register task */
	/* Create the different tasks */
	UTIL_SEQ_RegTask(1 << (uint32_t) CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU,
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <APP_THREAD_Init+0x104>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	2001      	movs	r0, #1
 8000c26:	f009 fe59 	bl	800a8dc <UTIL_SEQ_RegTask>
			APP_THREAD_ProcessMsgM0ToM4);

	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &coapMessageTimerId, hw_ts_Repeated,
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <APP_THREAD_Init+0x108>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4918      	ldr	r1, [pc, #96]	; (8000c90 <APP_THREAD_Init+0x10c>)
 8000c30:	2000      	movs	r0, #0
 8000c32:	f002 f95b 	bl	8002eec <HW_TS_Create>
			(HW_TS_pTimerCb_t) APP_THREAD_SendCoapMsg);
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &setThreadLpTimerId, hw_ts_SingleShot,
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <APP_THREAD_Init+0x110>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4917      	ldr	r1, [pc, #92]	; (8000c98 <APP_THREAD_Init+0x114>)
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f002 f955 	bl	8002eec <HW_TS_Create>
			APP_THREAD_SetSleepyEndDeviceMode);
	//HW_TS_Create(CFG_TIM_PROC_ID_ISR, &srpRegisterTimerId, hw_ts_SingleShot,appSrpInit);
	HW_TS_Start(coapMessageTimerId, coapMessageIntervalMs);
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <APP_THREAD_Init+0x10c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 fa4b 	bl	80030e8 <HW_TS_Start>


	/* USER CODE BEGIN INIT TASKS */


	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000c52:	2100      	movs	r1, #0
 8000c54:	2002      	movs	r0, #2
 8000c56:	f009 fcaf 	bl	800a5b8 <UTIL_LPM_SetStopMode>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f008 fdf2 	bl	8009846 <SHCI_C2_RADIO_AllowLowPower>

}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200300e8 	.word	0x200300e8
 8000c70:	20000244 	.word	0x20000244
 8000c74:	0800c0c4 	.word	0x0800c0c4
 8000c78:	0800c630 	.word	0x0800c630
 8000c7c:	0800c0d0 	.word	0x0800c0d0
 8000c80:	48000800 	.word	0x48000800
 8000c84:	20000238 	.word	0x20000238
 8000c88:	0800178d 	.word	0x0800178d
 8000c8c:	08001331 	.word	0x08001331
 8000c90:	20000104 	.word	0x20000104
 8000c94:	08000f75 	.word	0x08000f75
 8000c98:	20000105 	.word	0x20000105

08000c9c <appSrpCb>:

void appSrpCb(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	if(coapConnectionEstablished) return;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <appSrpCb+0x1c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d104      	bne.n	8000cb2 <appSrpCb+0x16>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4804      	ldr	r0, [pc, #16]	; (8000cbc <appSrpCb+0x20>)
 8000cac:	f003 ff46 	bl	8004b3c <HAL_GPIO_TogglePin>
 8000cb0:	e000      	b.n	8000cb4 <appSrpCb+0x18>
	if(coapConnectionEstablished) return;
 8000cb2:	bf00      	nop
}
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000240 	.word	0x20000240
 8000cbc:	48000800 	.word	0x48000800

08000cc0 <appSrpInit>:

void appSrpInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b092      	sub	sp, #72	; 0x48
 8000cc4:	af00      	add	r7, sp, #0
    otError error = OT_ERROR_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    srpRunning = true;
 8000ccc:	4b47      	ldr	r3, [pc, #284]	; (8000dec <appSrpInit+0x12c>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
    char *hostName;
    otNetifAddress *self = otIp6GetUnicastAddresses(sInstance);
 8000cd2:	4b47      	ldr	r3, [pc, #284]	; (8000df0 <appSrpInit+0x130>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f007 ff22 	bl	8008b20 <otIp6GetUnicastAddresses>
 8000cdc:	6438      	str	r0, [r7, #64]	; 0x40
    uint8_t addr_prf = self->mAddress.mFields.m8[15];
 8000cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ce0:	7bdb      	ldrb	r3, [r3, #15]
 8000ce2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t size;
    hostName = otSrpClientBuffersGetHostNameString(sInstance, &size);
 8000ce6:	4b42      	ldr	r3, [pc, #264]	; (8000df0 <appSrpInit+0x130>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f009 f86a 	bl	8009dca <otSrpClientBuffersGetHostNameString>
 8000cf6:	63b8      	str	r0, [r7, #56]	; 0x38
    char *HOST_NAME = malloc(sizeof(char) * size);
 8000cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00a f808 	bl	800ad10 <malloc>
 8000d00:	4603      	mov	r3, r0
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
    snprintf(HOST_NAME, size, "OT-HS-%d", addr_prf);
 8000d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d06:	4619      	mov	r1, r3
 8000d08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d0c:	4a39      	ldr	r2, [pc, #228]	; (8000df4 <appSrpInit+0x134>)
 8000d0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d10:	f00a fc02 	bl	800b518 <sniprintf>
    error |= otSrpClientSetHostName(sInstance, HOST_NAME);
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <appSrpInit+0x130>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f008 ffc8 	bl	8009cb0 <otSrpClientSetHostName>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    memcpy(hostName, HOST_NAME, sizeof(HOST_NAME) + 1);
 8000d2e:	2205      	movs	r2, #5
 8000d30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d34:	f009 fffc 	bl	800ad30 <memcpy>

    otSrpClientEnableAutoHostAddress(sInstance);
 8000d38:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <appSrpInit+0x130>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f008 ffe8 	bl	8009d12 <otSrpClientEnableAutoHostAddress>

    otSrpClientBuffersServiceEntry *entry = NULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
    char *string;

    entry = otSrpClientBuffersAllocateService(sInstance);
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <appSrpInit+0x130>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f009 f86d 	bl	8009e2a <otSrpClientBuffersAllocateService>
 8000d50:	6338      	str	r0, [r7, #48]	; 0x30

    entry->mService.mPort = 33434;
 8000d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d54:	f248 229a 	movw	r2, #33434	; 0x829a
 8000d58:	821a      	strh	r2, [r3, #16]
    char INST_NAME[32];
    snprintf(INST_NAME, 32, "ipv6bc%d", addr_prf);
 8000d5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d5e:	1d38      	adds	r0, r7, #4
 8000d60:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <appSrpInit+0x138>)
 8000d62:	2120      	movs	r1, #32
 8000d64:	f00a fbd8 	bl	800b518 <sniprintf>
    char *SERV_NAME = "_ot._udp";
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <appSrpInit+0x13c>)
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    string = otSrpClientBuffersGetServiceEntryInstanceNameString(entry, &size);
 8000d6c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000d70:	4619      	mov	r1, r3
 8000d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d74:	f009 f8b6 	bl	8009ee4 <otSrpClientBuffersGetServiceEntryInstanceNameString>
 8000d78:	62b8      	str	r0, [r7, #40]	; 0x28
    memcpy(string, INST_NAME, size);
 8000d7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d84:	f009 ffd4 	bl	800ad30 <memcpy>


    string = otSrpClientBuffersGetServiceEntryServiceNameString(entry, &size);
 8000d88:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d90:	f009 f875 	bl	8009e7e <otSrpClientBuffersGetServiceEntryServiceNameString>
 8000d94:	62b8      	str	r0, [r7, #40]	; 0x28
    memcpy(string, SERV_NAME, size);
 8000d96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d98:	461a      	mov	r2, r3
 8000d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d9e:	f009 ffc7 	bl	800ad30 <memcpy>

    error |= otSrpClientAddService(sInstance, &entry->mService);
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <appSrpInit+0x130>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f008 ffdc 	bl	8009d68 <otSrpClientAddService>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000db8:	4313      	orrs	r3, r2
 8000dba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    entry = NULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
    otSrpClientEnableAutoStartMode(sInstance, /* aCallback */ appSrpCb, /* aContext */ NULL);
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <appSrpInit+0x130>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	490d      	ldr	r1, [pc, #52]	; (8000e00 <appSrpInit+0x140>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f008 ff3c 	bl	8009c48 <otSrpClientEnableAutoStartMode>
    if(error != OT_ERROR_NONE) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000dd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <appSrpInit+0x122>
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2102      	movs	r1, #2
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <appSrpInit+0x144>)
 8000dde:	f003 fe95 	bl	8004b0c <HAL_GPIO_WritePin>
}
 8000de2:	bf00      	nop
 8000de4:	3748      	adds	r7, #72	; 0x48
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000106 	.word	0x20000106
 8000df0:	20000244 	.word	0x20000244
 8000df4:	0800c120 	.word	0x0800c120
 8000df8:	0800c12c 	.word	0x0800c12c
 8000dfc:	0800c138 	.word	0x0800c138
 8000e00:	08000c9d 	.word	0x08000c9d
 8000e04:	48000800 	.word	0x48000800

08000e08 <APP_THREAD_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN APP_THREAD_Error_1 */

	/* USER CODE END APP_THREAD_Error_1 */
	switch (ErrId)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b16      	cmp	r3, #22
 8000e16:	f200 8081 	bhi.w	8000f1c <APP_THREAD_Error+0x114>
 8000e1a:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <APP_THREAD_Error+0x18>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e7d 	.word	0x08000e7d
 8000e24:	08000e87 	.word	0x08000e87
 8000e28:	08000e91 	.word	0x08000e91
 8000e2c:	08000e9b 	.word	0x08000e9b
 8000e30:	08000ea5 	.word	0x08000ea5
 8000e34:	08000eaf 	.word	0x08000eaf
 8000e38:	08000eb9 	.word	0x08000eb9
 8000e3c:	08000ec3 	.word	0x08000ec3
 8000e40:	08000ed7 	.word	0x08000ed7
 8000e44:	08000ee1 	.word	0x08000ee1
 8000e48:	08000eeb 	.word	0x08000eeb
 8000e4c:	08000ef5 	.word	0x08000ef5
 8000e50:	08000f1d 	.word	0x08000f1d
 8000e54:	08000eff 	.word	0x08000eff
 8000e58:	08000f09 	.word	0x08000f09
 8000e5c:	08000f1d 	.word	0x08000f1d
 8000e60:	08000f1d 	.word	0x08000f1d
 8000e64:	08000f1d 	.word	0x08000f1d
 8000e68:	08000f1d 	.word	0x08000f1d
 8000e6c:	08000f1d 	.word	0x08000f1d
 8000e70:	08000f13 	.word	0x08000f13
 8000e74:	08000f1d 	.word	0x08000f1d
 8000e78:	08000ecd 	.word	0x08000ecd
	{
	case ERR_REC_MULTI_MSG_FROM_M0:
		APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8000e7c:	6839      	ldr	r1, [r7, #0]
 8000e7e:	482c      	ldr	r0, [pc, #176]	; (8000f30 <APP_THREAD_Error+0x128>)
 8000e80:	f000 f974 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000e84:	e04f      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_STATE_CB:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ", ErrCode);
 8000e86:	6839      	ldr	r1, [r7, #0]
 8000e88:	482a      	ldr	r0, [pc, #168]	; (8000f34 <APP_THREAD_Error+0x12c>)
 8000e8a:	f000 f96f 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000e8e:	e04a      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_CHANNEL:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ", ErrCode);
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	4829      	ldr	r0, [pc, #164]	; (8000f38 <APP_THREAD_Error+0x130>)
 8000e94:	f000 f96a 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000e98:	e045      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_PANID:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ", ErrCode);
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	4827      	ldr	r0, [pc, #156]	; (8000f3c <APP_THREAD_Error+0x134>)
 8000e9e:	f000 f965 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000ea2:	e040      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_IPV6_ENABLE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ", ErrCode);
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	4826      	ldr	r0, [pc, #152]	; (8000f40 <APP_THREAD_Error+0x138>)
 8000ea8:	f000 f960 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000eac:	e03b      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_START:
		APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	4824      	ldr	r0, [pc, #144]	; (8000f44 <APP_THREAD_Error+0x13c>)
 8000eb2:	f000 f95b 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000eb6:	e036      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_ERASE_PERSISTENT_INFO:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",
 8000eb8:	6839      	ldr	r1, [r7, #0]
 8000eba:	4823      	ldr	r0, [pc, #140]	; (8000f48 <APP_THREAD_Error+0x140>)
 8000ebc:	f000 f956 	bl	800116c <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000ec0:	e031      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_NETWORK_KEY:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ", ErrCode);
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	4821      	ldr	r0, [pc, #132]	; (8000f4c <APP_THREAD_Error+0x144>)
 8000ec6:	f000 f951 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000eca:	e02c      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_CHECK_WIRELESS:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ", ErrCode);
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	4820      	ldr	r0, [pc, #128]	; (8000f50 <APP_THREAD_Error+0x148>)
 8000ed0:	f000 f94c 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000ed4:	e027      	b.n	8000f26 <APP_THREAD_Error+0x11e>
		/* USER CODE BEGIN APP_THREAD_Error_2 */
	case ERR_THREAD_COAP_START:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ", ErrCode);
 8000ed6:	6839      	ldr	r1, [r7, #0]
 8000ed8:	481e      	ldr	r0, [pc, #120]	; (8000f54 <APP_THREAD_Error+0x14c>)
 8000eda:	f000 f947 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000ede:	e022      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_ADD_RESSOURCE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",
 8000ee0:	6839      	ldr	r1, [r7, #0]
 8000ee2:	481d      	ldr	r0, [pc, #116]	; (8000f58 <APP_THREAD_Error+0x150>)
 8000ee4:	f000 f942 	bl	800116c <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000ee8:	e01d      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_MESSAGE_READ:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ", ErrCode);
 8000eea:	6839      	ldr	r1, [r7, #0]
 8000eec:	481b      	ldr	r0, [pc, #108]	; (8000f5c <APP_THREAD_Error+0x154>)
 8000eee:	f000 f93d 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000ef2:	e018      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_SEND_RESPONSE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",
 8000ef4:	6839      	ldr	r1, [r7, #0]
 8000ef6:	481a      	ldr	r0, [pc, #104]	; (8000f60 <APP_THREAD_Error+0x158>)
 8000ef8:	f000 f938 	bl	800116c <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000efc:	e013      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_APPEND:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ", ErrCode);
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	4818      	ldr	r0, [pc, #96]	; (8000f64 <APP_THREAD_Error+0x15c>)
 8000f02:	f000 f933 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000f06:	e00e      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_SEND_REQUEST:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ", ErrCode);
 8000f08:	6839      	ldr	r1, [r7, #0]
 8000f0a:	4817      	ldr	r0, [pc, #92]	; (8000f68 <APP_THREAD_Error+0x160>)
 8000f0c:	f000 f92e 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000f10:	e009      	b.n	8000f26 <APP_THREAD_Error+0x11e>
	case ERR_THREAD_MSG_COMPARE_FAILED:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	4815      	ldr	r0, [pc, #84]	; (8000f6c <APP_THREAD_Error+0x164>)
 8000f16:	f000 f929 	bl	800116c <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000f1a:	e004      	b.n	8000f26 <APP_THREAD_Error+0x11e>
		/* USER CODE END APP_THREAD_Error_2 */
	default:
		APP_THREAD_TraceError("ERROR Unknown ", 0);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4814      	ldr	r0, [pc, #80]	; (8000f70 <APP_THREAD_Error+0x168>)
 8000f20:	f000 f924 	bl	800116c <APP_THREAD_TraceError>
		break;
 8000f24:	bf00      	nop
	}
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800c144 	.word	0x0800c144
 8000f34:	0800c168 	.word	0x0800c168
 8000f38:	0800c18c 	.word	0x0800c18c
 8000f3c:	0800c1ac 	.word	0x0800c1ac
 8000f40:	0800c1cc 	.word	0x0800c1cc
 8000f44:	0800c1ec 	.word	0x0800c1ec
 8000f48:	0800c208 	.word	0x0800c208
 8000f4c:	0800c234 	.word	0x0800c234
 8000f50:	0800c258 	.word	0x0800c258
 8000f54:	0800c27c 	.word	0x0800c27c
 8000f58:	0800c29c 	.word	0x0800c29c
 8000f5c:	0800c2c4 	.word	0x0800c2c4
 8000f60:	0800c2e8 	.word	0x0800c2e8
 8000f64:	0800c310 	.word	0x0800c310
 8000f68:	0800c330 	.word	0x0800c330
 8000f6c:	0800c358 	.word	0x0800c358
 8000f70:	0800c380 	.word	0x0800c380

08000f74 <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
	otError error = OT_ERROR_NONE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]

	/* Set the pool period to 5 sec. It means that when the device will enter
	 * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
	 * This message will act as keep alive message.
	 */
	otLinkSetPollPeriod(sInstance, pollIntervalMs);
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f007 fe1d 	bl	8008bc8 <otLinkSetPollPeriod>

	/* Set the sleepy end device mode */
	OT_LinkMode.mRxOnWhenIdle = 0;
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <APP_THREAD_SetSleepyEndDeviceMode+0x68>)
 8000f90:	7813      	ldrb	r3, [r2, #0]
 8000f92:	f36f 0300 	bfc	r3, #0, #1
 8000f96:	7013      	strb	r3, [r2, #0]
	OT_LinkMode.mDeviceType = 0;
 8000f98:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <APP_THREAD_SetSleepyEndDeviceMode+0x68>)
 8000f9a:	7813      	ldrb	r3, [r2, #0]
 8000f9c:	f36f 0341 	bfc	r3, #1, #1
 8000fa0:	7013      	strb	r3, [r2, #0]
	OT_LinkMode.mNetworkData = 0;
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <APP_THREAD_SetSleepyEndDeviceMode+0x68>)
 8000fa4:	7813      	ldrb	r3, [r2, #0]
 8000fa6:	f36f 0382 	bfc	r3, #2, #1
 8000faa:	7013      	strb	r3, [r2, #0]

	error = otThreadSetLinkMode(sInstance, OT_LinkMode);
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <APP_THREAD_SetSleepyEndDeviceMode+0x68>)
 8000fb2:	7811      	ldrb	r1, [r2, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f008 fff8 	bl	8009faa <otThreadSetLinkMode>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <APP_THREAD_SetSleepyEndDeviceMode+0x5a>
		APP_THREAD_Error(ERR_THREAD_LINK_MODE, error);
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2011      	movs	r0, #17
 8000fca:	f7ff ff1d 	bl	8000e08 <APP_THREAD_Error>

}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000244 	.word	0x20000244
 8000fdc:	200000f4 	.word	0x200000f4

08000fe0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b0a7      	sub	sp, #156	; 0x9c
 8000fe4:	af00      	add	r7, sp, #0

    static char          aNetworkName[] = "OpenThread X-1";

    otOperationalDataset aDataset;

    memset(&aDataset, 0, sizeof(otOperationalDataset));
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	2278      	movs	r2, #120	; 0x78
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f009 feac 	bl	800ad4c <memset>
     * Fields that can be configured in otOperationDataset to override defaults:
     *     Network Name, Mesh Local Prefix, Extended PAN ID, PAN ID, Delay Timer,
     *     Channel, Channel Mask Page 0, Network Key, PSKc, Security Policy
     */
    //aDataset.mActiveTimestamp.mSeconds             = 1;
    aDataset.mComponents.mIsActiveTimestampPresent = true;
 8000ff4:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

    /* Set Channel to 15 */
    aDataset.mChannel                      = 15;
 8001000:	230f      	movs	r3, #15
 8001002:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    aDataset.mComponents.mIsChannelPresent = true;
 8001006:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

    /* Set Pan ID to 2222 */
    aDataset.mPanId                      = (otPanId)0xDEAD;
 8001012:	f64d 63ad 	movw	r3, #57005	; 0xdead
 8001016:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    aDataset.mComponents.mIsPanIdPresent = true;
 800101a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800101e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001022:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

    /* Set Extended Pan ID to  */
    uint8_t extPanId[OT_EXT_PAN_ID_SIZE] = {0x72, 0x53, 0xc0, 0xf9, 0x58, 0xe3, 0x3f, 0x94};
 8001026:	4a49      	ldr	r2, [pc, #292]	; (800114c <APP_THREAD_DeviceConfig+0x16c>)
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001030:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(aDataset.mExtendedPanId.m8, extPanId, sizeof(aDataset.mExtendedPanId));
 8001034:	f107 0259 	add.w	r2, r7, #89	; 0x59
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	cb03      	ldmia	r3!, {r0, r1}
 800103e:	6010      	str	r0, [r2, #0]
 8001040:	6051      	str	r1, [r2, #4]
    aDataset.mComponents.mIsExtendedPanIdPresent = true;
 8001042:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

    /* Set network key to  */
    uint8_t key[OT_NETWORK_KEY_SIZE] = {0xb3, 0x08, 0x8e, 0x0c, 0x4c, 0x97, 0x70, 0xa9,
 800104e:	4b40      	ldr	r3, [pc, #256]	; (8001150 <APP_THREAD_DeviceConfig+0x170>)
 8001050:	463c      	mov	r4, r7
 8001052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                        0xca, 0x86, 0x85, 0xab, 0x99, 0xda, 0xc9, 0x51};
	memcpy(aDataset.mNetworkKey.m8, key, sizeof(aDataset.mNetworkKey));
 8001058:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800105c:	463b      	mov	r3, r7
 800105e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	aDataset.mComponents.mIsNetworkKeyPresent = true;
 8001064:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Network Name */
	size_t length = strlen(aNetworkName);
 8001070:	4838      	ldr	r0, [pc, #224]	; (8001154 <APP_THREAD_DeviceConfig+0x174>)
 8001072:	f7ff f88f 	bl	8000194 <strlen>
 8001076:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	assert(length <= OT_NETWORK_NAME_MAX_SIZE);
 800107a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800107e:	2b10      	cmp	r3, #16
 8001080:	d906      	bls.n	8001090 <APP_THREAD_DeviceConfig+0xb0>
 8001082:	4b35      	ldr	r3, [pc, #212]	; (8001158 <APP_THREAD_DeviceConfig+0x178>)
 8001084:	4a35      	ldr	r2, [pc, #212]	; (800115c <APP_THREAD_DeviceConfig+0x17c>)
 8001086:	f44f 71c9 	mov.w	r1, #402	; 0x192
 800108a:	4835      	ldr	r0, [pc, #212]	; (8001160 <APP_THREAD_DeviceConfig+0x180>)
 800108c:	f009 fde6 	bl	800ac5c <__assert_func>
	memcpy(aDataset.mNetworkName.m8, aNetworkName, length);
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	3330      	adds	r3, #48	; 0x30
 8001096:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800109a:	492e      	ldr	r1, [pc, #184]	; (8001154 <APP_THREAD_DeviceConfig+0x174>)
 800109c:	4618      	mov	r0, r3
 800109e:	f009 fe47 	bl	800ad30 <memcpy>
	aDataset.mComponents.mIsNetworkNamePresent = true;
 80010a2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	/* Set the Active Operational Dataset to this dataset */
	error = otDatasetSetActive(sInstance, &aDataset);
 80010ae:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <APP_THREAD_DeviceConfig+0x184>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f107 0218 	add.w	r2, r7, #24
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f007 fca9 	bl	8008a10 <otDatasetSetActive>
 80010be:	4603      	mov	r3, r0
 80010c0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	error = otIp6SetEnabled(sInstance, true);
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <APP_THREAD_DeviceConfig+0x184>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	4618      	mov	r0, r3
 80010cc:	f007 fcf8 	bl	8008ac0 <otIp6SetEnabled>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 80010d6:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <APP_THREAD_DeviceConfig+0x10a>
	{
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 80010de:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80010e2:	4619      	mov	r1, r3
 80010e4:	2004      	movs	r0, #4
 80010e6:	f7ff fe8f 	bl	8000e08 <APP_THREAD_Error>
	}
	error = otThreadSetEnabled(sInstance, true);
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <APP_THREAD_DeviceConfig+0x184>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2101      	movs	r1, #1
 80010f0:	4618      	mov	r0, r3
 80010f2:	f008 ff2a 	bl	8009f4a <otThreadSetEnabled>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 80010fc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <APP_THREAD_DeviceConfig+0x130>
	{
		APP_THREAD_Error(ERR_THREAD_START, error);
 8001104:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001108:	4619      	mov	r1, r3
 800110a:	2005      	movs	r0, #5
 800110c:	f7ff fe7c 	bl	8000e08 <APP_THREAD_Error>
	}
	/* USER CODE BEGIN DEVICECONFIG */
	/* Start the COAP server */
	error = otCoapStart(sInstance, OT_DEFAULT_COAP_PORT);
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <APP_THREAD_DeviceConfig+0x184>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f241 6133 	movw	r1, #5683	; 0x1633
 8001118:	4618      	mov	r0, r3
 800111a:	f007 fbe6 	bl	80088ea <otCoapStart>
 800111e:	4603      	mov	r3, r0
 8001120:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	if (error != OT_ERROR_NONE)
 8001124:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <APP_THREAD_DeviceConfig+0x158>
	{
		APP_THREAD_Error(ERR_THREAD_COAP_START, error);
 800112c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001130:	4619      	mov	r1, r3
 8001132:	2008      	movs	r0, #8
 8001134:	f7ff fe68 	bl	8000e08 <APP_THREAD_Error>
	}
	/* Add COAP resources */
	otCoapAddResource(sInstance, &OT_Ressource);
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <APP_THREAD_DeviceConfig+0x184>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	490a      	ldr	r1, [pc, #40]	; (8001168 <APP_THREAD_DeviceConfig+0x188>)
 800113e:	4618      	mov	r0, r3
 8001140:	f007 fc03 	bl	800894a <otCoapAddResource>

	/* USER CODE END DEVICECONFIG */
}
 8001144:	bf00      	nop
 8001146:	379c      	adds	r7, #156	; 0x9c
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}
 800114c:	0800c3b4 	.word	0x0800c3b4
 8001150:	0800c3bc 	.word	0x0800c3bc
 8001154:	2000001c 	.word	0x2000001c
 8001158:	0800c390 	.word	0x0800c390
 800115c:	0800c640 	.word	0x0800c640
 8001160:	0800c0d0 	.word	0x0800c0d0
 8001164:	20000244 	.word	0x20000244
 8001168:	2000000c 	.word	0x2000000c

0800116c <APP_THREAD_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
 * @retval None
 */
static void APP_THREAD_TraceError(const char *pMess, uint32_t ErrCode)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af02      	add	r7, sp, #8
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN TRACE_ERROR */
	APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <APP_THREAD_TraceError+0x24>)
 800117e:	2101      	movs	r1, #1
 8001180:	2000      	movs	r0, #0
 8001182:	f002 fe5d 	bl	8003e40 <logApplication>

	/* USER CODE END TRACE_ERROR */
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	0800c3cc 	.word	0x0800c3cc

08001194 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
	WirelessFwInfo_t wireless_info_instance;
	WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	617b      	str	r3, [r7, #20]

	if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f008 fb70 	bl	8009884 <SHCI_GetWirelessFwInfo>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
	{
		APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS,
 80011aa:	2101      	movs	r1, #1
 80011ac:	2016      	movs	r0, #22
 80011ae:	f7ff fe2b 	bl	8000e08 <APP_THREAD_Error>
					(uint32_t) ERR_INTERFACE_FATAL);
			break;
		}
		APP_DBG("**********************************************************");
	}
}
 80011b2:	e026      	b.n	8001202 <APP_THREAD_CheckWirelessFirmwareInfo+0x6e>
		switch (p_wireless_info->StackType)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	7a5b      	ldrb	r3, [r3, #9]
 80011b8:	2b50      	cmp	r3, #80	; 0x50
 80011ba:	d012      	beq.n	80011e2 <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
 80011bc:	2b50      	cmp	r3, #80	; 0x50
 80011be:	dc16      	bgt.n	80011ee <APP_THREAD_CheckWirelessFirmwareInfo+0x5a>
 80011c0:	2b10      	cmp	r3, #16
 80011c2:	d002      	beq.n	80011ca <APP_THREAD_CheckWirelessFirmwareInfo+0x36>
 80011c4:	2b11      	cmp	r3, #17
 80011c6:	d006      	beq.n	80011d6 <APP_THREAD_CheckWirelessFirmwareInfo+0x42>
 80011c8:	e011      	b.n	80011ee <APP_THREAD_CheckWirelessFirmwareInfo+0x5a>
			APP_DBG("FW Type : Thread FTD")
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <APP_THREAD_CheckWirelessFirmwareInfo+0x78>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	2000      	movs	r0, #0
 80011d0:	f002 fe36 	bl	8003e40 <logApplication>
			break;
 80011d4:	e010      	b.n	80011f8 <APP_THREAD_CheckWirelessFirmwareInfo+0x64>
			APP_DBG("FW Type : Thread MTD")
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>)
 80011d8:	2101      	movs	r1, #1
 80011da:	2000      	movs	r0, #0
 80011dc:	f002 fe30 	bl	8003e40 <logApplication>
			break;
 80011e0:	e00a      	b.n	80011f8 <APP_THREAD_CheckWirelessFirmwareInfo+0x64>
			APP_DBG("FW Type : Static Concurrent Mode BLE/Thread")
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <APP_THREAD_CheckWirelessFirmwareInfo+0x80>)
 80011e4:	2101      	movs	r1, #1
 80011e6:	2000      	movs	r0, #0
 80011e8:	f002 fe2a 	bl	8003e40 <logApplication>
			break;
 80011ec:	e004      	b.n	80011f8 <APP_THREAD_CheckWirelessFirmwareInfo+0x64>
			APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS,
 80011ee:	2101      	movs	r1, #1
 80011f0:	2016      	movs	r0, #22
 80011f2:	f7ff fe09 	bl	8000e08 <APP_THREAD_Error>
			break;
 80011f6:	bf00      	nop
		APP_DBG("**********************************************************");
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <APP_THREAD_CheckWirelessFirmwareInfo+0x84>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	2000      	movs	r0, #0
 80011fe:	f002 fe1f 	bl	8003e40 <logApplication>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	0800c3f0 	.word	0x0800c3f0
 8001210:	0800c408 	.word	0x0800c408
 8001214:	0800c420 	.word	0x0800c420
 8001218:	0800c44c 	.word	0x0800c44c

0800121c <APP_THREAD_CoapPermissionsRequestHandler>:
 */

static void APP_THREAD_CoapPermissionsRequestHandler(void *pContext,
		otMessage *pMessage, const otMessageInfo *pMessageInfo)

{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 8001228:	2100      	movs	r1, #0
 800122a:	2001      	movs	r0, #1
 800122c:	f008 fb0b 	bl	8009846 <SHCI_C2_RADIO_AllowLowPower>
	coapConnectionEstablished = true;
 8001230:	4b39      	ldr	r3, [pc, #228]	; (8001318 <APP_THREAD_CoapPermissionsRequestHandler+0xfc>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2102      	movs	r1, #2
 800123a:	4838      	ldr	r0, [pc, #224]	; (800131c <APP_THREAD_CoapPermissionsRequestHandler+0x100>)
 800123c:	f003 fc66 	bl	8004b0c <HAL_GPIO_WritePin>
	/* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
	//printIPv6Addr(&aMessageInfo->mPeerAddr);
	brAddr = pMessageInfo->mPeerAddr;
 8001240:	4a37      	ldr	r2, [pc, #220]	; (8001320 <APP_THREAD_CoapPermissionsRequestHandler+0x104>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4614      	mov	r4, r2
 8001246:	3310      	adds	r3, #16
 8001248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800124a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	otError error = OT_ERROR_NONE;
 800124e:	2300      	movs	r3, #0
 8001250:	77fb      	strb	r3, [r7, #31]
	otMessage *responseMessage;
	otCoapCode responseCode = OT_COAP_CODE_CHANGED;
 8001252:	2344      	movs	r3, #68	; 0x44
 8001254:	77bb      	strb	r3, [r7, #30]
	otCoapCode messageCode = otCoapMessageGetCode(pMessage);
 8001256:	68b8      	ldr	r0, [r7, #8]
 8001258:	f007 fa51 	bl	80086fe <otCoapMessageGetCode>
 800125c:	4603      	mov	r3, r0
 800125e:	777b      	strb	r3, [r7, #29]

	responseMessage = otCoapNewMessage((otInstance*) pContext, NULL);
 8001260:	2100      	movs	r1, #0
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f007 f8e3 	bl	800842e <otCoapNewMessage>
 8001268:	61b8      	str	r0, [r7, #24]

	otCoapMessageInitResponse(responseMessage, pMessage,
 800126a:	7fbb      	ldrb	r3, [r7, #30]
 800126c:	2202      	movs	r2, #2
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	69b8      	ldr	r0, [r7, #24]
 8001272:	f007 f93f 	bl	80084f4 <otCoapMessageInitResponse>
			OT_COAP_TYPE_ACKNOWLEDGMENT, responseCode);
	otCoapMessageSetToken(responseMessage, otCoapMessageGetToken(pMessage),
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f007 facd 	bl	8008816 <otCoapMessageGetToken>
 800127c:	4604      	mov	r4, r0
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f007 fa9b 	bl	80087ba <otCoapMessageGetTokenLength>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4621      	mov	r1, r4
 800128a:	69b8      	ldr	r0, [r7, #24]
 800128c:	f007 f970 	bl	8008570 <otCoapMessageSetToken>
			otCoapMessageGetTokenLength(pMessage));
	otCoapMessageSetPayloadMarker(responseMessage);
 8001290:	69b8      	ldr	r0, [r7, #24]
 8001292:	f007 fa06 	bl	80086a2 <otCoapMessageSetPayloadMarker>

	uint16_t offset = otMessageGetOffset(pMessage);
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f007 fcf2 	bl	8008c80 <otMessageGetOffset>
 800129c:	4603      	mov	r3, r0
 800129e:	82fb      	strh	r3, [r7, #22]
	otMessageRead(pMessage, offset, resource_name, sizeof(resource_name) - 1);
 80012a0:	8af9      	ldrh	r1, [r7, #22]
 80012a2:	231f      	movs	r3, #31
 80012a4:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <APP_THREAD_CoapPermissionsRequestHandler+0x108>)
 80012a6:	68b8      	ldr	r0, [r7, #8]
 80012a8:	f007 fd53 	bl	8008d52 <otMessageRead>

	if (OT_COAP_CODE_GET == messageCode)
 80012ac:	7f7b      	ldrb	r3, [r7, #29]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d10e      	bne.n	80012d0 <APP_THREAD_CoapPermissionsRequestHandler+0xb4>
	{

		error = otMessageAppend(responseMessage, "ack", 3);
 80012b2:	2203      	movs	r2, #3
 80012b4:	491c      	ldr	r1, [pc, #112]	; (8001328 <APP_THREAD_CoapPermissionsRequestHandler+0x10c>)
 80012b6:	69b8      	ldr	r0, [r7, #24]
 80012b8:	f007 fd12 	bl	8008ce0 <otMessageAppend>
 80012bc:	4603      	mov	r3, r0
 80012be:	77fb      	strb	r3, [r7, #31]
		error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f7ff fc4b 	bl	8000b60 <otCoapSendResponse>
 80012ca:	4603      	mov	r3, r0
 80012cc:	77fb      	strb	r3, [r7, #31]
 80012ce:	e011      	b.n	80012f4 <APP_THREAD_CoapPermissionsRequestHandler+0xd8>
				pMessageInfo);
	}
	else
	{
		error = otMessageAppend(responseMessage, "nack", 4);
 80012d0:	2204      	movs	r2, #4
 80012d2:	4916      	ldr	r1, [pc, #88]	; (800132c <APP_THREAD_CoapPermissionsRequestHandler+0x110>)
 80012d4:	69b8      	ldr	r0, [r7, #24]
 80012d6:	f007 fd03 	bl	8008ce0 <otMessageAppend>
 80012da:	4603      	mov	r3, r0
 80012dc:	77fb      	strb	r3, [r7, #31]
		otCoapMessageSetCode(responseMessage, OT_COAP_CODE_METHOD_NOT_ALLOWED);
 80012de:	2185      	movs	r1, #133	; 0x85
 80012e0:	69b8      	ldr	r0, [r7, #24]
 80012e2:	f007 fa3a 	bl	800875a <otCoapMessageSetCode>
		error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	69b9      	ldr	r1, [r7, #24]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff fc38 	bl	8000b60 <otCoapSendResponse>
 80012f0:	4603      	mov	r3, r0
 80012f2:	77fb      	strb	r3, [r7, #31]
				pMessageInfo);
	}

	if (error != OT_ERROR_NONE && responseMessage != NULL)
 80012f4:	7ffb      	ldrb	r3, [r7, #31]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <APP_THREAD_CoapPermissionsRequestHandler+0xea>
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <APP_THREAD_CoapPermissionsRequestHandler+0xea>
	{
		otMessageFree(responseMessage);
 8001300:	69b8      	ldr	r0, [r7, #24]
 8001302:	f007 fc90 	bl	8008c26 <otMessageFree>
	}

	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8001306:	2101      	movs	r1, #1
 8001308:	2001      	movs	r0, #1
 800130a:	f008 fa9c 	bl	8009846 <SHCI_C2_RADIO_AllowLowPower>
}
 800130e:	bf00      	nop
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	bf00      	nop
 8001318:	20000240 	.word	0x20000240
 800131c:	48000800 	.word	0x48000800
 8001320:	20000228 	.word	0x20000228
 8001324:	20000208 	.word	0x20000208
 8001328:	0800c488 	.word	0x0800c488
 800132c:	0800c48c 	.word	0x0800c48c

08001330 <APP_THREAD_SendCoapMsg>:
 * @brief Task associated to the push button.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(char *buf)
{
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	b0ab      	sub	sp, #172	; 0xac
 8001334:	af0e      	add	r7, sp, #56	; 0x38
 8001336:	61f8      	str	r0, [r7, #28]
	if (!coapConnectionEstablished)
 8001338:	4b84      	ldr	r3, [pc, #528]	; (800154c <APP_THREAD_SendCoapMsg+0x21c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	f083 0301 	eor.w	r3, r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	f040 80fe 	bne.w	8001544 <APP_THREAD_SendCoapMsg+0x214>
		return;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2102      	movs	r1, #2
 800134c:	4880      	ldr	r0, [pc, #512]	; (8001550 <APP_THREAD_SendCoapMsg+0x220>)
 800134e:	f003 fbdd 	bl	8004b0c <HAL_GPIO_WritePin>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 8001352:	2100      	movs	r1, #0
 8001354:	2001      	movs	r0, #1
 8001356:	f008 fa76 	bl	8009846 <SHCI_C2_RADIO_AllowLowPower>

	sht4x_read(&sensor_data.temp_main, &sensor_data.humidity);
 800135a:	497e      	ldr	r1, [pc, #504]	; (8001554 <APP_THREAD_SendCoapMsg+0x224>)
 800135c:	487e      	ldr	r0, [pc, #504]	; (8001558 <APP_THREAD_SendCoapMsg+0x228>)
 800135e:	f7ff f92d 	bl	80005bc <sht4x_read>
	stts22h_temperature_raw_get(&sensor_data.temp_aux);
 8001362:	487e      	ldr	r0, [pc, #504]	; (800155c <APP_THREAD_SendCoapMsg+0x22c>)
 8001364:	f7ff facf 	bl	8000906 <stts22h_temperature_raw_get>

	int8_t state;
	int8_t ret = app_algo_proc(sensor_data, false, &state);
 8001368:	4a7a      	ldr	r2, [pc, #488]	; (8001554 <APP_THREAD_SendCoapMsg+0x224>)
 800136a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	ca07      	ldmia	r2, {r0, r1, r2}
 8001374:	f000 fdc0 	bl	8001ef8 <app_algo_proc>
 8001378:	4603      	mov	r3, r0
 800137a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (ret == RES_HEAT)
 800137e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <APP_THREAD_SendCoapMsg+0x5a>
		sht4x_activate_medium_heater();
 8001386:	f7ff f8c9 	bl	800051c <sht4x_activate_medium_heater>
	int8_t rssi;
	otThreadGetParentLastRssi(sInstance, &rssi);
 800138a:	4b75      	ldr	r3, [pc, #468]	; (8001560 <APP_THREAD_SendCoapMsg+0x230>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f008 fe49 	bl	800a02c <otThreadGetParentLastRssi>
	 * humidity (int32_t): radar presence score
	 * temp_aux (int16_t): radar presence distance
	 * rssi (int8_t): last rssi from parent
	 * appCoapSendTxCtr (uint32_t): total CoAP transmissions
	 */
	snprintf(tmp_tx_buf, 254, "%d,%02x%02x%02x%02x%02x%02x%02x%02x,%ld,%ld,%ld,%d,%ld,%d",
 800139a:	2301      	movs	r3, #1
 800139c:	469c      	mov	ip, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[2], eui64.m8[3],
 800139e:	4b71      	ldr	r3, [pc, #452]	; (8001564 <APP_THREAD_SendCoapMsg+0x234>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
	snprintf(tmp_tx_buf, 254, "%d,%02x%02x%02x%02x%02x%02x%02x%02x,%ld,%ld,%ld,%d,%ld,%d",
 80013a2:	461c      	mov	r4, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[2], eui64.m8[3],
 80013a4:	4b6f      	ldr	r3, [pc, #444]	; (8001564 <APP_THREAD_SendCoapMsg+0x234>)
 80013a6:	785b      	ldrb	r3, [r3, #1]
	snprintf(tmp_tx_buf, 254, "%d,%02x%02x%02x%02x%02x%02x%02x%02x,%ld,%ld,%ld,%d,%ld,%d",
 80013a8:	461d      	mov	r5, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[2], eui64.m8[3],
 80013aa:	4b6e      	ldr	r3, [pc, #440]	; (8001564 <APP_THREAD_SendCoapMsg+0x234>)
 80013ac:	789b      	ldrb	r3, [r3, #2]
	snprintf(tmp_tx_buf, 254, "%d,%02x%02x%02x%02x%02x%02x%02x%02x,%ld,%ld,%ld,%d,%ld,%d",
 80013ae:	461e      	mov	r6, r3
			device_type, eui64.m8[0], eui64.m8[1], eui64.m8[2], eui64.m8[3],
 80013b0:	4b6c      	ldr	r3, [pc, #432]	; (8001564 <APP_THREAD_SendCoapMsg+0x234>)
 80013b2:	78db      	ldrb	r3, [r3, #3]
	snprintf(tmp_tx_buf, 254, "%d,%02x%02x%02x%02x%02x%02x%02x%02x,%ld,%ld,%ld,%d,%ld,%d",
 80013b4:	61bb      	str	r3, [r7, #24]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80013b6:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <APP_THREAD_SendCoapMsg+0x234>)
 80013b8:	791b      	ldrb	r3, [r3, #4]
	snprintf(tmp_tx_buf, 254, "%d,%02x%02x%02x%02x%02x%02x%02x%02x,%ld,%ld,%ld,%d,%ld,%d",
 80013ba:	617b      	str	r3, [r7, #20]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80013bc:	4b69      	ldr	r3, [pc, #420]	; (8001564 <APP_THREAD_SendCoapMsg+0x234>)
 80013be:	795b      	ldrb	r3, [r3, #5]
	snprintf(tmp_tx_buf, 254, "%d,%02x%02x%02x%02x%02x%02x%02x%02x,%ld,%ld,%ld,%d,%ld,%d",
 80013c0:	613b      	str	r3, [r7, #16]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80013c2:	4b68      	ldr	r3, [pc, #416]	; (8001564 <APP_THREAD_SendCoapMsg+0x234>)
 80013c4:	799b      	ldrb	r3, [r3, #6]
	snprintf(tmp_tx_buf, 254, "%d,%02x%02x%02x%02x%02x%02x%02x%02x,%ld,%ld,%ld,%d,%ld,%d",
 80013c6:	60fb      	str	r3, [r7, #12]
			eui64.m8[4], eui64.m8[5], eui64.m8[6], eui64.m8[7],
 80013c8:	4b66      	ldr	r3, [pc, #408]	; (8001564 <APP_THREAD_SendCoapMsg+0x234>)
 80013ca:	79db      	ldrb	r3, [r3, #7]
	snprintf(tmp_tx_buf, 254, "%d,%02x%02x%02x%02x%02x%02x%02x%02x,%ld,%ld,%ld,%d,%ld,%d",
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b61      	ldr	r3, [pc, #388]	; (8001554 <APP_THREAD_SendCoapMsg+0x224>)
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4b60      	ldr	r3, [pc, #384]	; (8001554 <APP_THREAD_SendCoapMsg+0x224>)
 80013d4:	6819      	ldr	r1, [r3, #0]
			sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux,
 80013d6:	4b5f      	ldr	r3, [pc, #380]	; (8001554 <APP_THREAD_SendCoapMsg+0x224>)
 80013d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	snprintf(tmp_tx_buf, 254, "%d,%02x%02x%02x%02x%02x%02x%02x%02x,%ld,%ld,%ld,%d,%ld,%d",
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	f997 3064 	ldrsb.w	r3, [r7, #100]	; 0x64
 80013e8:	4618      	mov	r0, r3
 80013ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013ee:	930d      	str	r3, [sp, #52]	; 0x34
 80013f0:	900c      	str	r0, [sp, #48]	; 0x30
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	900a      	str	r0, [sp, #40]	; 0x28
 80013fa:	9109      	str	r1, [sp, #36]	; 0x24
 80013fc:	9208      	str	r2, [sp, #32]
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	9207      	str	r2, [sp, #28]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	9206      	str	r2, [sp, #24]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	9205      	str	r2, [sp, #20]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	9204      	str	r2, [sp, #16]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	9303      	str	r3, [sp, #12]
 8001412:	9602      	str	r6, [sp, #8]
 8001414:	9501      	str	r5, [sp, #4]
 8001416:	9400      	str	r4, [sp, #0]
 8001418:	4663      	mov	r3, ip
 800141a:	4a53      	ldr	r2, [pc, #332]	; (8001568 <APP_THREAD_SendCoapMsg+0x238>)
 800141c:	21fe      	movs	r1, #254	; 0xfe
 800141e:	4853      	ldr	r0, [pc, #332]	; (800156c <APP_THREAD_SendCoapMsg+0x23c>)
 8001420:	f00a f87a 	bl	800b518 <sniprintf>
			rssi, state,ret);
	buf = tmp_tx_buf;
 8001424:	4b51      	ldr	r3, [pc, #324]	; (800156c <APP_THREAD_SendCoapMsg+0x23c>)
 8001426:	61fb      	str	r3, [r7, #28]
	APP_DBG("In appthread handler temp:%d hum:%d temp_aux:%d",
 8001428:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <APP_THREAD_SendCoapMsg+0x224>)
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4b49      	ldr	r3, [pc, #292]	; (8001554 <APP_THREAD_SendCoapMsg+0x224>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4948      	ldr	r1, [pc, #288]	; (8001554 <APP_THREAD_SendCoapMsg+0x224>)
 8001432:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8001436:	9101      	str	r1, [sp, #4]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	4613      	mov	r3, r2
 800143c:	4a4c      	ldr	r2, [pc, #304]	; (8001570 <APP_THREAD_SendCoapMsg+0x240>)
 800143e:	2101      	movs	r1, #1
 8001440:	2000      	movs	r0, #0
 8001442:	f002 fcfd 	bl	8003e40 <logApplication>
			sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux);
	otError error = OT_ERROR_NONE;
 8001446:	2300      	movs	r3, #0
 8001448:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	otMessage *message = NULL;
 800144c:	2300      	movs	r3, #0
 800144e:	66bb      	str	r3, [r7, #104]	; 0x68
	otMessageInfo messageInfo;
	uint16_t payloadLength = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	// Default parameters
	otCoapType coapType = OT_COAP_TYPE_NON_CONFIRMABLE;
 8001456:	2301      	movs	r3, #1
 8001458:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	otIp6Address coapDestinationIp = brAddr;
 800145c:	4b45      	ldr	r3, [pc, #276]	; (8001574 <APP_THREAD_SendCoapMsg+0x244>)
 800145e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	message = otCoapNewMessage(sInstance, NULL);
 8001468:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <APP_THREAD_SendCoapMsg+0x230>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f006 ffdd 	bl	800842e <otCoapNewMessage>
 8001474:	66b8      	str	r0, [r7, #104]	; 0x68

	otCoapMessageInit(message, coapType, OT_COAP_CODE_PUT);
 8001476:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800147a:	2203      	movs	r2, #3
 800147c:	4619      	mov	r1, r3
 800147e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001480:	f007 f803 	bl	800848a <otCoapMessageInit>
	otCoapMessageGenerateToken(message, OT_COAP_DEFAULT_TOKEN_LENGTH);
 8001484:	2102      	movs	r1, #2
 8001486:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001488:	f007 f8a9 	bl	80085de <otCoapMessageGenerateToken>
	error = otCoapMessageAppendUriPathOptions(message, resource_name);
 800148c:	493a      	ldr	r1, [pc, #232]	; (8001578 <APP_THREAD_SendCoapMsg+0x248>)
 800148e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001490:	f007 f8d5 	bl	800863e <otCoapMessageAppendUriPathOptions>
 8001494:	4603      	mov	r3, r0
 8001496:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	payloadLength = strlen(buf);
 800149a:	69f8      	ldr	r0, [r7, #28]
 800149c:	f7fe fe7a 	bl	8000194 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	if (payloadLength > 0)
 80014a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <APP_THREAD_SendCoapMsg+0x18a>
	{
		error = otCoapMessageSetPayloadMarker(message);
 80014ae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80014b0:	f007 f8f7 	bl	80086a2 <otCoapMessageSetPayloadMarker>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	}

	// Embed content into message if given
	if (payloadLength > 0)
 80014ba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d009      	beq.n	80014d6 <APP_THREAD_SendCoapMsg+0x1a6>
	{
		error = otMessageAppend(message, buf, payloadLength);
 80014c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80014c6:	461a      	mov	r2, r3
 80014c8:	69f9      	ldr	r1, [r7, #28]
 80014ca:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80014cc:	f007 fc08 	bl	8008ce0 <otMessageAppend>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	}

	memset(&messageInfo, 0, sizeof(messageInfo));
 80014d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014da:	222c      	movs	r2, #44	; 0x2c
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f009 fc34 	bl	800ad4c <memset>
	messageInfo.mPeerAddr = coapDestinationIp;
 80014e4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	messageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 80014f2:	f241 6333 	movw	r3, #5683	; 0x1633
 80014f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	error = otCoapSendRequestWithParameters(sInstance, message, &messageInfo,
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <APP_THREAD_SendCoapMsg+0x230>)
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001502:	2300      	movs	r3, #0
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	2300      	movs	r3, #0
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2300      	movs	r3, #0
 800150c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800150e:	f007 f9af 	bl	8008870 <otCoapSendRequestWithParameters>
 8001512:	4603      	mov	r3, r0
 8001514:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	NULL,
	NULL,
	NULL);


	if ((error != OT_ERROR_NONE) && (message != NULL))
 8001518:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <APP_THREAD_SendCoapMsg+0x1fc>
 8001520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <APP_THREAD_SendCoapMsg+0x1fc>
	{
		otMessageFree(message);
 8001526:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001528:	f007 fb7d 	bl	8008c26 <otMessageFree>
	}
	sht4x_measure();
 800152c:	f7ff f838 	bl	80005a0 <sht4x_measure>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8001530:	2101      	movs	r1, #1
 8001532:	2001      	movs	r0, #1
 8001534:	f008 f987 	bl	8009846 <SHCI_C2_RADIO_AllowLowPower>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2102      	movs	r1, #2
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <APP_THREAD_SendCoapMsg+0x220>)
 800153e:	f003 fae5 	bl	8004b0c <HAL_GPIO_WritePin>
 8001542:	e000      	b.n	8001546 <APP_THREAD_SendCoapMsg+0x216>
		return;
 8001544:	bf00      	nop
}
 8001546:	3774      	adds	r7, #116	; 0x74
 8001548:	46bd      	mov	sp, r7
 800154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154c:	20000240 	.word	0x20000240
 8001550:	48000800 	.word	0x48000800
 8001554:	200005a0 	.word	0x200005a0
 8001558:	200005a4 	.word	0x200005a4
 800155c:	200005a8 	.word	0x200005a8
 8001560:	20000244 	.word	0x20000244
 8001564:	20000238 	.word	0x20000238
 8001568:	0800c494 	.word	0x0800c494
 800156c:	20000108 	.word	0x20000108
 8001570:	0800c4d0 	.word	0x0800c4d0
 8001574:	20000228 	.word	0x20000228
 8001578:	20000208 	.word	0x20000208

0800157c <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	p_thread_otcmdbuffer = p_buffer;
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200000f8 	.word	0x200000f8

0800159c <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	330c      	adds	r3, #12
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	200000f8 	.word	0x200000f8

080015b4 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) ((TL_EvtPacket_t*) p_thread_otcmdbuffer)->evtserial.evt.payload;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	330b      	adds	r3, #11
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	200000f8 	.word	0x200000f8

080015cc <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) (p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	330b      	adds	r3, #11
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	200000fc 	.word	0x200000fc

080015e4 <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

	/* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
	p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <Ot_Cmd_Transfer_Common+0x44>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015f4:	725a      	strb	r2, [r3, #9]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f042 0202 	orr.w	r2, r2, #2
 80015fc:	729a      	strb	r2, [r3, #10]
	/* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
	 * + ID (4 bytes) + Size (4 bytes) */
	uint32_t l_size =
			((Thread_OT_Cmd_Request_t*) (p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <Ot_Cmd_Transfer_Common+0x44>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	330c      	adds	r3, #12
 8001604:	685b      	ldr	r3, [r3, #4]
					* 4U + 8U;
 8001606:	3302      	adds	r3, #2
	uint32_t l_size =
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	607b      	str	r3, [r7, #4]
	p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <Ot_Cmd_Transfer_Common+0x44>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	72da      	strb	r2, [r3, #11]

	TL_OT_SendCmd();
 8001616:	f008 fe51 	bl	800a2bc <TL_OT_SendCmd>

	/* Wait completion of cmd */
	Wait_Getting_Ack_From_M0();
 800161a:	f000 f840 	bl	800169e <Wait_Getting_Ack_From_M0>

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200000f8 	.word	0x200000f8

0800162c <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	Ot_Cmd_Transfer_Common();
 8001630:	f7ff ffd8 	bl	80015e4 <Ot_Cmd_Transfer_Common>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <Ot_Cmd_TransferWithNotif>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_TransferWithNotif(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	/* Flag to specify to UTIL_SEQ_EvtIdle that M0 to M4 notifications are allowed */
	g_ot_notification_allowed = 1U;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <Ot_Cmd_TransferWithNotif+0x14>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]

	Ot_Cmd_Transfer_Common();
 8001642:	f7ff ffcf 	bl	80015e4 <Ot_Cmd_Transfer_Common>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000258 	.word	0x20000258

08001650 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(Otbuffer);

	Receive_Ack_From_M0();
 8001658:	f000 f828 	bl	80016ac <Receive_Ack_From_M0>

	/* Does not allow OpenThread M0 to M4 notification */
	g_ot_notification_allowed = 0U;
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <TL_OT_CmdEvtReceived+0x1c>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000258 	.word	0x20000258

08001670 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	p_thread_notif_M0_to_M4 = Notbuffer;
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <TL_THREAD_NotReceived+0x1c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]

	Receive_Notification_From_M0();
 800167e:	f000 f81d 	bl	80016bc <Receive_Notification_From_M0>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000fc 	.word	0x200000fc

08001690 <Pre_OtCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_OtCmdProcessing(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

	UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8001694:	2004      	movs	r0, #4
 8001696:	f009 f98f 	bl	800a9b8 <UTIL_SEQ_WaitEvt>

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}

0800169e <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
	UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 80016a2:	2002      	movs	r0, #2
 80016a4:	f009 f988 	bl	800a9b8 <UTIL_SEQ_WaitEvt>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 80016b0:	2002      	movs	r0, #2
 80016b2:	f009 f961 	bl	800a978 <UTIL_SEQ_SetEvt>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	CptReceiveMsgFromM0++;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <Receive_Notification_From_M0+0x1c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <Receive_Notification_From_M0+0x1c>)
 80016c8:	6013      	str	r3, [r2, #0]
	UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2001      	movs	r0, #1
 80016ce:	f009 f927 	bl	800a920 <UTIL_SEQ_SetTask>
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000100 	.word	0x20000100

080016dc <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static inline void Send_CLI_Ack_For_OT(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0

	/* Notify M0 that characters have been sent to UART */
	TL_THREAD_CliSendAck();
 80016e0:	f008 fe08 	bl	800a2f4 <TL_THREAD_CliSendAck>

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
	MX_LPUART1_UART_Init();
	HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*) &ThreadOtCmdBuffer;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8001700:	601a      	str	r2, [r3, #0]
	ThreadConfigBuffer.p_ThreadNotAckBuffer =
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001704:	4a08      	ldr	r2, [pc, #32]	; (8001728 <APP_THREAD_TL_THREAD_INIT+0x30>)
 8001706:	609a      	str	r2, [r3, #8]
			(uint8_t*) ThreadNotifRspEvtBuffer;
	ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*) &ThreadCliCmdBuffer;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <APP_THREAD_TL_THREAD_INIT+0x34>)
 800170c:	605a      	str	r2, [r3, #4]
	ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*) &ThreadCliNotBuffer;
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <APP_THREAD_TL_THREAD_INIT+0x38>)
 8001712:	60da      	str	r2, [r3, #12]

	TL_THREAD_Init(&ThreadConfigBuffer);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001716:	f008 fdb1 	bl	800a27c <TL_THREAD_Init>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20030028 	.word	0x20030028
 8001724:	200300e8 	.word	0x200300e8
 8001728:	200301f4 	.word	0x200301f4
 800172c:	20030300 	.word	0x20030300
 8001730:	2003040c 	.word	0x2003040c

08001734 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived(TL_EvtPacket_t *Notbuffer)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	TL_CmdPacket_t *l_CliBuffer = (TL_CmdPacket_t*) Notbuffer;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60fb      	str	r3, [r7, #12]
	uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	7adb      	ldrb	r3, [r3, #11]
 8001744:	72fb      	strb	r3, [r7, #11]

	/* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
	if (strcmp((const char*) l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	330c      	adds	r3, #12
 800174a:	490b      	ldr	r1, [pc, #44]	; (8001778 <TL_THREAD_CliNotReceived+0x44>)
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fd17 	bl	8000180 <strcmp>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d009      	beq.n	800176c <TL_THREAD_CliNotReceived+0x38>
	{
		/* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
		HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload,
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f103 010c 	add.w	r1, r3, #12
 800175e:	7afb      	ldrb	r3, [r7, #11]
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <TL_THREAD_CliNotReceived+0x48>)
 8001764:	2002      	movs	r0, #2
 8001766:	f001 fd53 	bl	8003210 <HW_UART_Transmit_IT>
	}
	else
	{
		Send_CLI_Ack_For_OT();
	}
}
 800176a:	e001      	b.n	8001770 <TL_THREAD_CliNotReceived+0x3c>
		Send_CLI_Ack_For_OT();
 800176c:	f7ff ffb6 	bl	80016dc <Send_CLI_Ack_For_OT>
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	0800c500 	.word	0x0800c500
 800177c:	08001781 	.word	0x08001781

08001780 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	Send_CLI_Ack_For_OT();
 8001784:	f7ff ffaa 	bl	80016dc <Send_CLI_Ack_For_OT>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	if (CptReceiveMsgFromM0 != 0)
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00d      	beq.n	80017b4 <APP_THREAD_ProcessMsgM0ToM4+0x28>
	{
		/* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
		if (CptReceiveMsgFromM0 > 1U)
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d904      	bls.n	80017aa <APP_THREAD_ProcessMsgM0ToM4+0x1e>
		{
			APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80017a0:	2100      	movs	r1, #0
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fb30 	bl	8000e08 <APP_THREAD_Error>
 80017a8:	e001      	b.n	80017ae <APP_THREAD_ProcessMsgM0ToM4+0x22>
		}
		else
		{
			OpenThread_CallBack_Processing();
 80017aa:	f007 fb11 	bl	8008dd0 <OpenThread_CallBack_Processing>
		}
		/* Reset counter */
		CptReceiveMsgFromM0 = 0;
 80017ae:	4b02      	ldr	r3, [pc, #8]	; (80017b8 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
	}
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000100 	.word	0x20000100

080017bc <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <LL_PWR_EnableBootC2+0x1c>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <LL_PWR_EnableBootC2+0x1c>)
 80017c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	58000400 	.word	0x58000400

080017dc <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80017e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80017ea:	4905      	ldr	r1, [pc, #20]	; (8001800 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	58000800 	.word	0x58000800

08001804 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800180e:	6a1a      	ldr	r2, [r3, #32]
 8001810:	4904      	ldr	r1, [pc, #16]	; (8001824 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4313      	orrs	r3, r2
 8001816:	620b      	str	r3, [r1, #32]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	58000800 	.word	0x58000800

08001828 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4313      	orrs	r3, r2
 800183e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800184c:	68fb      	ldr	r3, [r7, #12]
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800186a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f043 0201 	orr.w	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	601a      	str	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	605a      	str	r2, [r3, #4]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	041b      	lsls	r3, r3, #16
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	605a      	str	r2, [r3, #4]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	43db      	mvns	r3, r3
 800192e:	401a      	ands	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	605a      	str	r2, [r3, #4]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	605a      	str	r2, [r3, #4]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	609a      	str	r2, [r3, #8]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	041a      	lsls	r2, r3, #16
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	4013      	ands	r3, r2
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d101      	bne.n	80019b8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4013      	ands	r3, r2
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d101      	bne.n	80019e2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80019f4:	2102      	movs	r1, #2
 80019f6:	482a      	ldr	r0, [pc, #168]	; (8001aa0 <HW_IPCC_Rx_Handler+0xb0>)
 80019f8:	f7ff ffe5 	bl	80019c6 <LL_C2_IPCC_IsActiveFlag_CHx>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <HW_IPCC_Rx_Handler+0x26>
 8001a02:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HW_IPCC_Rx_Handler+0xb0>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001a10:	f000 f8f8 	bl	8001c04 <HW_IPCC_SYS_EvtHandler>
 8001a14:	e041      	b.n	8001a9a <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8001a16:	2104      	movs	r1, #4
 8001a18:	4821      	ldr	r0, [pc, #132]	; (8001aa0 <HW_IPCC_Rx_Handler+0xb0>)
 8001a1a:	f7ff ffd4 	bl	80019c6 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d009      	beq.n	8001a38 <HW_IPCC_Rx_Handler+0x48>
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HW_IPCC_Rx_Handler+0xb0>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8001a32:	f000 f937 	bl	8001ca4 <HW_IPCC_THREAD_NotEvtHandler>
 8001a36:	e030      	b.n	8001a9a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <HW_IPCC_Rx_Handler+0xb0>)
 8001a3c:	f7ff ffc3 	bl	80019c6 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HW_IPCC_Rx_Handler+0x6a>
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HW_IPCC_Rx_Handler+0xb0>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8001a54:	f000 f932 	bl	8001cbc <HW_IPCC_THREAD_CliNotEvtHandler>
 8001a58:	e01f      	b.n	8001a9a <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <HW_IPCC_Rx_Handler+0xb0>)
 8001a5e:	f7ff ffb2 	bl	80019c6 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HW_IPCC_Rx_Handler+0x8a>
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HW_IPCC_Rx_Handler+0xb0>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8001a74:	f000 f88a 	bl	8001b8c <HW_IPCC_BLE_EvtHandler>
 8001a78:	e00f      	b.n	8001a9a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001a7a:	2108      	movs	r1, #8
 8001a7c:	4808      	ldr	r0, [pc, #32]	; (8001aa0 <HW_IPCC_Rx_Handler+0xb0>)
 8001a7e:	f7ff ffa2 	bl	80019c6 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <HW_IPCC_Rx_Handler+0xac>
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HW_IPCC_Rx_Handler+0xb0>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001a96:	f000 f95d 	bl	8001d54 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
}
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	58000c00 	.word	0x58000c00

08001aa4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	4822      	ldr	r0, [pc, #136]	; (8001b34 <HW_IPCC_Tx_Handler+0x90>)
 8001aac:	f7ff ff76 	bl	800199c <LL_C1_IPCC_IsActiveFlag_CHx>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HW_IPCC_Tx_Handler+0x26>
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HW_IPCC_Tx_Handler+0x90>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001ac4:	f000 f892 	bl	8001bec <HW_IPCC_SYS_CmdEvtHandler>
 8001ac8:	e031      	b.n	8001b2e <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8001aca:	2104      	movs	r1, #4
 8001acc:	4819      	ldr	r0, [pc, #100]	; (8001b34 <HW_IPCC_Tx_Handler+0x90>)
 8001ace:	f7ff ff65 	bl	800199c <LL_C1_IPCC_IsActiveFlag_CHx>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HW_IPCC_Tx_Handler+0x48>
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HW_IPCC_Tx_Handler+0x90>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8001ae6:	f000 f8d1 	bl	8001c8c <HW_IPCC_OT_CmdEvtHandler>
 8001aea:	e020      	b.n	8001b2e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001aec:	2108      	movs	r1, #8
 8001aee:	4811      	ldr	r0, [pc, #68]	; (8001b34 <HW_IPCC_Tx_Handler+0x90>)
 8001af0:	f7ff ff54 	bl	800199c <LL_C1_IPCC_IsActiveFlag_CHx>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HW_IPCC_Tx_Handler+0x6a>
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HW_IPCC_Tx_Handler+0x90>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001b08:	f000 f906 	bl	8001d18 <HW_IPCC_MM_FreeBufHandler>
 8001b0c:	e00f      	b.n	8001b2e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001b0e:	2120      	movs	r1, #32
 8001b10:	4808      	ldr	r0, [pc, #32]	; (8001b34 <HW_IPCC_Tx_Handler+0x90>)
 8001b12:	f7ff ff43 	bl	800199c <LL_C1_IPCC_IsActiveFlag_CHx>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HW_IPCC_Tx_Handler+0x8c>
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HW_IPCC_Tx_Handler+0x90>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001b2a:	f000 f83b 	bl	8001ba4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
}
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	58000c00 	.word	0x58000c00

08001b38 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001b3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b40:	f7ff fe8b 	bl	800185a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001b44:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b48:	f7ff fe5c 	bl	8001804 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001b4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b50:	f7ff fe44 	bl	80017dc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001b54:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001b56:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001b58:	f7ff fe30 	bl	80017bc <LL_PWR_EnableBootC2>

  return;
 8001b5c:	bf00      	nop
}
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001b64:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b68:	f7ff fe5e 	bl	8001828 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001b6c:	4806      	ldr	r0, [pc, #24]	; (8001b88 <HW_IPCC_Init+0x28>)
 8001b6e:	f7ff fea0 	bl	80018b2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <HW_IPCC_Init+0x28>)
 8001b74:	f7ff fe8d 	bl	8001892 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001b78:	202c      	movs	r0, #44	; 0x2c
 8001b7a:	f002 fbe4 	bl	8004346 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001b7e:	202d      	movs	r0, #45	; 0x2d
 8001b80:	f002 fbe1 	bl	8004346 <HAL_NVIC_EnableIRQ>

  return;
 8001b84:	bf00      	nop
}
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	58000c00 	.word	0x58000c00

08001b8c <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001b90:	f008 fabc 	bl	800a10c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001b94:	2101      	movs	r1, #1
 8001b96:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001b98:	f7ff fee3 	bl	8001962 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001b9c:	bf00      	nop
}
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	58000c00 	.word	0x58000c00

08001ba4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001ba8:	2120      	movs	r1, #32
 8001baa:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001bac:	f7ff fea4 	bl	80018f8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001bb0:	f008 fadc 	bl	800a16c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001bb4:	bf00      	nop
}
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	58000c00 	.word	0x58000c00

08001bbc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	4802      	ldr	r0, [pc, #8]	; (8001bcc <HW_IPCC_SYS_Init+0x10>)
 8001bc4:	f7ff feaa 	bl	800191c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001bc8:	bf00      	nop
}
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	58000c00 	.word	0x58000c00

08001bd0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4804      	ldr	r0, [pc, #16]	; (8001be8 <HW_IPCC_SYS_SendCmd+0x18>)
 8001bd8:	f7ff fed1 	bl	800197e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001bdc:	2102      	movs	r1, #2
 8001bde:	4802      	ldr	r0, [pc, #8]	; (8001be8 <HW_IPCC_SYS_SendCmd+0x18>)
 8001be0:	f7ff fe77 	bl	80018d2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001be4:	bf00      	nop
}
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	58000c00 	.word	0x58000c00

08001bec <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4803      	ldr	r0, [pc, #12]	; (8001c00 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001bf4:	f7ff fe80 	bl	80018f8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001bf8:	f008 fb08 	bl	800a20c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001bfc:	bf00      	nop
}
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	58000c00 	.word	0x58000c00

08001c04 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001c08:	f008 fb16 	bl	800a238 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	4802      	ldr	r0, [pc, #8]	; (8001c18 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001c10:	f7ff fea7 	bl	8001962 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001c14:	bf00      	nop
}
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	58000c00 	.word	0x58000c00

08001c1c <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001c20:	2104      	movs	r1, #4
 8001c22:	4804      	ldr	r0, [pc, #16]	; (8001c34 <HW_IPCC_THREAD_Init+0x18>)
 8001c24:	f7ff fe7a 	bl	800191c <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001c28:	2110      	movs	r1, #16
 8001c2a:	4802      	ldr	r0, [pc, #8]	; (8001c34 <HW_IPCC_THREAD_Init+0x18>)
 8001c2c:	f7ff fe76 	bl	800191c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001c30:	bf00      	nop
}
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	58000c00 	.word	0x58000c00

08001c38 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	4804      	ldr	r0, [pc, #16]	; (8001c50 <HW_IPCC_OT_SendCmd+0x18>)
 8001c40:	f7ff fe9d 	bl	800197e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001c44:	2104      	movs	r1, #4
 8001c46:	4802      	ldr	r0, [pc, #8]	; (8001c50 <HW_IPCC_OT_SendCmd+0x18>)
 8001c48:	f7ff fe43 	bl	80018d2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001c4c:	bf00      	nop
}
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	58000c00 	.word	0x58000c00

08001c54 <HW_IPCC_THREAD_SendAck>:

  return;
}

void HW_IPCC_THREAD_SendAck( void )
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4804      	ldr	r0, [pc, #16]	; (8001c6c <HW_IPCC_THREAD_SendAck+0x18>)
 8001c5c:	f7ff fe81 	bl	8001962 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001c60:	2104      	movs	r1, #4
 8001c62:	4802      	ldr	r0, [pc, #8]	; (8001c6c <HW_IPCC_THREAD_SendAck+0x18>)
 8001c64:	f7ff fe5a 	bl	800191c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001c68:	bf00      	nop
}
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	58000c00 	.word	0x58000c00

08001c70 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001c74:	2110      	movs	r1, #16
 8001c76:	4804      	ldr	r0, [pc, #16]	; (8001c88 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001c78:	f7ff fe73 	bl	8001962 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	4802      	ldr	r0, [pc, #8]	; (8001c88 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001c80:	f7ff fe4c 	bl	800191c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001c84:	bf00      	nop
}
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	58000c00 	.word	0x58000c00

08001c8c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001c90:	2104      	movs	r1, #4
 8001c92:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8001c94:	f7ff fe30 	bl	80018f8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8001c98:	f008 fb3a 	bl	800a310 <HW_IPCC_OT_CmdEvtNot>

  return;
 8001c9c:	bf00      	nop
}
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	58000c00 	.word	0x58000c00

08001ca4 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001ca8:	2104      	movs	r1, #4
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8001cac:	f7ff fe48 	bl	8001940 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8001cb0:	f008 fb3a 	bl	800a328 <HW_IPCC_THREAD_EvtNot>

  return;
 8001cb4:	bf00      	nop
}
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	58000c00 	.word	0x58000c00

08001cbc <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001cc0:	2110      	movs	r1, #16
 8001cc2:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8001cc4:	f7ff fe3c 	bl	8001940 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8001cc8:	f008 fb3a 	bl	800a340 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8001ccc:	bf00      	nop
}
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	58000c00 	.word	0x58000c00

08001cd4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001cdc:	2108      	movs	r1, #8
 8001cde:	480c      	ldr	r0, [pc, #48]	; (8001d10 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001ce0:	f7ff fe5c 	bl	800199c <LL_C1_IPCC_IsActiveFlag_CHx>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001cf0:	2108      	movs	r1, #8
 8001cf2:	4807      	ldr	r0, [pc, #28]	; (8001d10 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001cf4:	f7ff fded 	bl	80018d2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001cf8:	e006      	b.n	8001d08 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001cfe:	2108      	movs	r1, #8
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001d02:	f7ff fe3c 	bl	800197e <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001d06:	bf00      	nop
}
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	58000c00 	.word	0x58000c00
 8001d14:	20000248 	.word	0x20000248

08001d18 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001d1c:	2108      	movs	r1, #8
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001d20:	f7ff fdea 	bl	80018f8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001d2a:	2108      	movs	r1, #8
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001d2e:	f7ff fe26 	bl	800197e <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001d32:	bf00      	nop
}
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	58000c00 	.word	0x58000c00
 8001d3c:	20000248 	.word	0x20000248

08001d40 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001d44:	2108      	movs	r1, #8
 8001d46:	4802      	ldr	r0, [pc, #8]	; (8001d50 <HW_IPCC_TRACES_Init+0x10>)
 8001d48:	f7ff fde8 	bl	800191c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001d4c:	bf00      	nop
}
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	58000c00 	.word	0x58000c00

08001d54 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001d58:	f008 fb84 	bl	800a464 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001d5c:	2108      	movs	r1, #8
 8001d5e:	4802      	ldr	r0, [pc, #8]	; (8001d68 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001d60:	f7ff fdff 	bl	8001962 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001d64:	bf00      	nop
}
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	58000c00 	.word	0x58000c00

08001d6c <create_sensor_LL>:
	eStateFsm cur_state;
	int32_t baseline_temp_delta;
} fsm;

SensorQueueLL* create_sensor_LL(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
	SensorQueueLL *ret = malloc(sizeof(SensorQueueLL));
 8001d72:	200c      	movs	r0, #12
 8001d74:	f008 ffcc 	bl	800ad10 <malloc>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	607b      	str	r3, [r7, #4]
	ret->front = NULL;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
	ret->rear = NULL;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	605a      	str	r2, [r3, #4]
	ret->size = 0;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	721a      	strb	r2, [r3, #8]
	return ret;
 8001d8e:	687b      	ldr	r3, [r7, #4]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <update_sensor_LL>:

void update_sensor_LL(SensorQueueLL *ll, SensorData_t dat)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	4638      	mov	r0, r7
 8001da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	SensorDataNode *new = malloc(sizeof(SensorDataNode));
 8001da6:	2010      	movs	r0, #16
 8001da8:	f008 ffb2 	bl	800ad10 <malloc>
 8001dac:	4603      	mov	r3, r0
 8001dae:	617b      	str	r3, [r7, #20]
	if(new == NULL) return;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d039      	beq.n	8001e2a <update_sensor_LL+0x92>
	new->data = dat;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3304      	adds	r3, #4
 8001dba:	463a      	mov	r2, r7
 8001dbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	new->next = NULL;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
	if (ll->size == 0)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	7a1b      	ldrb	r3, [r3, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <update_sensor_LL+0x4c>
	{
		ll->front = new;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	601a      	str	r2, [r3, #0]
		ll->rear = new;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	605a      	str	r2, [r3, #4]
		ll->size = 1;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	721a      	strb	r2, [r3, #8]
 8001de2:	e023      	b.n	8001e2c <update_sensor_LL+0x94>
	}
	else
	{
		if (ll->size >= 10)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	7a1b      	ldrb	r3, [r3, #8]
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	d910      	bls.n	8001e0e <update_sensor_LL+0x76>
		{
			SensorDataNode *del = ll->front;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	613b      	str	r3, [r7, #16]
			ll->front = ll->front->next;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	601a      	str	r2, [r3, #0]
			free(del);
 8001dfc:	6938      	ldr	r0, [r7, #16]
 8001dfe:	f008 ff8f 	bl	800ad20 <free>
			ll->size--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	7a1b      	ldrb	r3, [r3, #8]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	721a      	strb	r2, [r3, #8]
		}
		ll->rear->next = new;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	601a      	str	r2, [r3, #0]
		ll->rear = new;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	605a      	str	r2, [r3, #4]
		ll->size++;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	7a1b      	ldrb	r3, [r3, #8]
 8001e20:	3301      	adds	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	721a      	strb	r2, [r3, #8]
 8001e28:	e000      	b.n	8001e2c <update_sensor_LL+0x94>
	if(new == NULL) return;
 8001e2a:	bf00      	nop
	}
}
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <traverse_sensor_LL>:

uint8_t traverse_sensor_LL(SensorQueueLL *ll, bool isHum, int32_t l_th, int32_t u_th, int32_t *avg_temp, int32_t *avg_hum)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b087      	sub	sp, #28
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	72fb      	strb	r3, [r7, #11]
	SensorDataNode *cur = ll->front;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	617b      	str	r3, [r7, #20]
	uint8_t ret = 0, ctr = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	74fb      	strb	r3, [r7, #19]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	74bb      	strb	r3, [r7, #18]
	while (cur != NULL)
 8001e50:	e029      	b.n	8001ea6 <traverse_sensor_LL+0x74>
	{
		if (isHum && (cur->data.humidity < l_th || cur->data.humidity > u_th))
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00d      	beq.n	8001e74 <traverse_sensor_LL+0x42>
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dc04      	bgt.n	8001e6c <traverse_sensor_LL+0x3a>
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	da03      	bge.n	8001e74 <traverse_sensor_LL+0x42>
			ret++;
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	74fb      	strb	r3, [r7, #19]
 8001e72:	e012      	b.n	8001e9a <traverse_sensor_LL+0x68>
		else if (!isHum && (cur->data.temp_main < l_th || cur->data.temp_main > u_th))
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00c      	beq.n	8001e9a <traverse_sensor_LL+0x68>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dc04      	bgt.n	8001e94 <traverse_sensor_LL+0x62>
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	da02      	bge.n	8001e9a <traverse_sensor_LL+0x68>
			ret++;
 8001e94:	7cfb      	ldrb	r3, [r7, #19]
 8001e96:	3301      	adds	r3, #1
 8001e98:	74fb      	strb	r3, [r7, #19]


		cur = cur->next;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	617b      	str	r3, [r7, #20]
		ctr++;
 8001ea0:	7cbb      	ldrb	r3, [r7, #18]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	74bb      	strb	r3, [r7, #18]
	while (cur != NULL)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1d2      	bne.n	8001e52 <traverse_sensor_LL+0x20>
	}

	return ret;
 8001eac:	7cfb      	ldrb	r3, [r7, #19]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	371c      	adds	r7, #28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <app_algo_init>:

void app_algo_init(SensorData_t data)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fsm.data_hist = create_sensor_LL();
 8001ec8:	f7ff ff50 	bl	8001d6c <create_sensor_LL>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <app_algo_init+0x38>)
 8001ed0:	6013      	str	r3, [r2, #0]
	fsm.data_hist->size = 0;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <app_algo_init+0x38>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	721a      	strb	r2, [r3, #8]
	fsm.cur_state = STATE_INIT;
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <app_algo_init+0x38>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	711a      	strb	r2, [r3, #4]
	fsm.baseline_temp_delta = data.temp_main - (int32_t)data.temp_aux;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	4a02      	ldr	r2, [pc, #8]	; (8001ef4 <app_algo_init+0x38>)
 8001eea:	6093      	str	r3, [r2, #8]
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000024c 	.word	0x2000024c

08001ef8 <app_algo_proc>:

eResFsm app_algo_proc(SensorData_t data, bool ext_sig_reset, int8_t *state)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b08b      	sub	sp, #44	; 0x2c
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	1d3c      	adds	r4, r7, #4
 8001f00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f04:	70fb      	strb	r3, [r7, #3]
	update_sensor_LL(fsm.data_hist, data);
 8001f06:	4b4d      	ldr	r3, [pc, #308]	; (800203c <app_algo_proc+0x144>)
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0e:	f7ff ff43 	bl	8001d98 <update_sensor_LL>
	*state = fsm.cur_state;
 8001f12:	4b4a      	ldr	r3, [pc, #296]	; (800203c <app_algo_proc+0x144>)
 8001f14:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1a:	701a      	strb	r2, [r3, #0]
	if (ext_sig_reset)
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d004      	beq.n	8001f2c <app_algo_proc+0x34>
	{
		fsm.cur_state = STATE_INIT;
 8001f22:	4b46      	ldr	r3, [pc, #280]	; (800203c <app_algo_proc+0x144>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e082      	b.n	8002032 <app_algo_proc+0x13a>
	}

	switch (fsm.cur_state)
 8001f2c:	4b43      	ldr	r3, [pc, #268]	; (800203c <app_algo_proc+0x144>)
 8001f2e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001f32:	3301      	adds	r3, #1
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d87a      	bhi.n	800202e <app_algo_proc+0x136>
 8001f38:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <app_algo_proc+0x48>)
 8001f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3e:	bf00      	nop
 8001f40:	08002029 	.word	0x08002029
 8001f44:	08001f59 	.word	0x08001f59
 8001f48:	08001f6d 	.word	0x08001f6d
 8001f4c:	08001f89 	.word	0x08001f89
 8001f50:	08001fe7 	.word	0x08001fe7
 8001f54:	08001ffb 	.word	0x08001ffb
	{
	case STATE_INIT:
	{
		fsm.cur_state = STATE_MEAS;
 8001f58:	4b38      	ldr	r3, [pc, #224]	; (800203c <app_algo_proc+0x144>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	711a      	strb	r2, [r3, #4]
		APP_DBG("FSM STATE INIT");
 8001f5e:	4a38      	ldr	r2, [pc, #224]	; (8002040 <app_algo_proc+0x148>)
 8001f60:	2101      	movs	r1, #1
 8001f62:	2000      	movs	r0, #0
 8001f64:	f001 ff6c 	bl	8003e40 <logApplication>
		return RES_NONE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e062      	b.n	8002032 <app_algo_proc+0x13a>
	}
	case STATE_MEAS:
	{
		APP_DBG("FSM STATE MEAS");
 8001f6c:	4a35      	ldr	r2, [pc, #212]	; (8002044 <app_algo_proc+0x14c>)
 8001f6e:	2101      	movs	r1, #1
 8001f70:	2000      	movs	r0, #0
 8001f72:	f001 ff65 	bl	8003e40 <logApplication>
		if (data.humidity > HUMIDITY_TRIG_TH_POS)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a33      	ldr	r2, [pc, #204]	; (8002048 <app_algo_proc+0x150>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	dd02      	ble.n	8001f84 <app_algo_proc+0x8c>
			fsm.cur_state = STATE_PRETRIG;
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <app_algo_proc+0x144>)
 8001f80:	2202      	movs	r2, #2
 8001f82:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e054      	b.n	8002032 <app_algo_proc+0x13a>
	}
	case STATE_PRETRIG:
	{
		APP_DBG("FSM STATE PRETRIG\n");
 8001f88:	4a30      	ldr	r2, [pc, #192]	; (800204c <app_algo_proc+0x154>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f001 ff57 	bl	8003e40 <logApplication>
		if (data.humidity < HUMIDITY_TRIG_TH_NEG)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <app_algo_proc+0x158>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	da04      	bge.n	8001fa4 <app_algo_proc+0xac>
		{
			fsm.cur_state = STATE_MEAS;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <app_algo_proc+0x144>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	711a      	strb	r2, [r3, #4]
			return RES_NONE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e046      	b.n	8002032 <app_algo_proc+0x13a>
		}
		int32_t t, h;
		uint8_t ct = traverse_sensor_LL(fsm.data_hist, true, 0, HUMIDITY_TRIG_TH_POS, &t, &h);
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <app_algo_proc+0x144>)
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	4a27      	ldr	r2, [pc, #156]	; (8002048 <app_algo_proc+0x150>)
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	f107 0318 	add.w	r3, r7, #24
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2101      	movs	r1, #1
 8001fbc:	f7ff ff39 	bl	8001e32 <traverse_sensor_LL>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	77fb      	strb	r3, [r7, #31]
		APP_DBG("Pretrig ctr:%d", ct);
 8001fc4:	7ffb      	ldrb	r3, [r7, #31]
 8001fc6:	4a23      	ldr	r2, [pc, #140]	; (8002054 <app_algo_proc+0x15c>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f001 ff38 	bl	8003e40 <logApplication>
		if (ct >= HUMIDITY_SAMPLES_TRIG_TH)
 8001fd0:	2205      	movs	r2, #5
 8001fd2:	7ffb      	ldrb	r3, [r7, #31]
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d304      	bcc.n	8001fe2 <app_algo_proc+0xea>
		{
			fsm.cur_state = STATE_HEATING;
 8001fd8:	4b18      	ldr	r3, [pc, #96]	; (800203c <app_algo_proc+0x144>)
 8001fda:	2203      	movs	r2, #3
 8001fdc:	711a      	strb	r2, [r3, #4]
			return RES_HEAT;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e027      	b.n	8002032 <app_algo_proc+0x13a>
		}
		return RES_NONE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e025      	b.n	8002032 <app_algo_proc+0x13a>
	}
	case STATE_HEATING:
	{
		APP_DBG("FSM STATE HEATING");
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <app_algo_proc+0x160>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	2000      	movs	r0, #0
 8001fec:	f001 ff28 	bl	8003e40 <logApplication>
		fsm.cur_state = STATE_COOLDOWN;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <app_algo_proc+0x144>)
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e01b      	b.n	8002032 <app_algo_proc+0x13a>
	}
	case STATE_COOLDOWN:
	{
		APP_DBG("FSM STATE COOLDOWN");
 8001ffa:	4a18      	ldr	r2, [pc, #96]	; (800205c <app_algo_proc+0x164>)
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	2000      	movs	r0, #0
 8002000:	f001 ff1e 	bl	8003e40 <logApplication>
		if(data.temp_main - data.temp_aux < fsm.baseline_temp_delta + TEMPERATURE_COOLDOWN_MAX_ALLOWED_DELTA)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800200a:	1a9a      	subs	r2, r3, r2
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <app_algo_proc+0x144>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002014:	440b      	add	r3, r1
 8002016:	429a      	cmp	r2, r3
 8002018:	da04      	bge.n	8002024 <app_algo_proc+0x12c>
		{
			fsm.cur_state = STATE_MEAS;
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <app_algo_proc+0x144>)
 800201c:	2201      	movs	r2, #1
 800201e:	711a      	strb	r2, [r3, #4]
			return RES_NONE;
 8002020:	2300      	movs	r3, #0
 8002022:	e006      	b.n	8002032 <app_algo_proc+0x13a>
		}
		else
		{
			return RES_INVL;
 8002024:	2302      	movs	r3, #2
 8002026:	e004      	b.n	8002032 <app_algo_proc+0x13a>
		}
	}
	case STATE_UNDEF:
		return RES_FAULT;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
 800202c:	e001      	b.n	8002032 <app_algo_proc+0x13a>
	}
	return RES_FAULT;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd90      	pop	{r4, r7, pc}
 800203a:	bf00      	nop
 800203c:	2000024c 	.word	0x2000024c
 8002040:	0800c504 	.word	0x0800c504
 8002044:	0800c514 	.word	0x0800c514
 8002048:	00017318 	.word	0x00017318
 800204c:	0800c524 	.word	0x0800c524
 8002050:	00016760 	.word	0x00016760
 8002054:	0800c538 	.word	0x0800c538
 8002058:	0800c548 	.word	0x0800c548
 800205c:	0800c55c 	.word	0x0800c55c

08002060 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <LL_C2_PWR_SetPowerMode+0x28>)
 800206a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4905      	ldr	r1, [pc, #20]	; (8002088 <LL_C2_PWR_SetPowerMode+0x28>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	58000400 	.word	0x58000400

0800208c <LL_EXTI_EnableIT_32_63>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8002096:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800209a:	4905      	ldr	r1, [pc, #20]	; (80020b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	58000800 	.word	0x58000800

080020b4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80020c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80020c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020ce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	cafecafe 	.word	0xcafecafe

080020f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <LL_LPM_EnableSleep+0x1c>)
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <LL_LPM_EnableSleep+0x1c>)
 8002122:	f023 0304 	bic.w	r3, r3, #4
 8002126:	6113      	str	r3, [r2, #16]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	22ff      	movs	r2, #255	; 0xff
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	22ca      	movs	r2, #202	; 0xca
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2253      	movs	r2, #83	; 0x53
 8002164:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 0207 	bic.w	r2, r3, #7
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <MX_APPE_Config+0x18>)
 800219e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021a2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80021a4:	f000 f82c 	bl	8002200 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80021a8:	f000 f831 	bl	800220e <Config_HSE>

  return;
 80021ac:	bf00      	nop
}
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	58004000 	.word	0x58004000

080021b4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80021b8:	f000 f83d 	bl	8002236 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80021bc:	f000 f856 	bl	800226c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <MX_APPE_Init+0x2c>)
 80021c2:	2000      	movs	r0, #0
 80021c4:	f000 fdb8 	bl	8002d38 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //Init_Debug();
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80021c8:	2101      	movs	r1, #1
 80021ca:	2001      	movs	r0, #1
 80021cc:	f008 f9f4 	bl	800a5b8 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80021d0:	2101      	movs	r1, #1
 80021d2:	2001      	movs	r0, #1
 80021d4:	f008 fa20 	bl	800a618 <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80021d8:	f000 f856 	bl	8002288 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80021dc:	bf00      	nop
}
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000057c 	.word	0x2000057c

080021e4 <Init_Smps>:

void Init_Smps(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80021e8:	bf00      	nop
}
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <Init_Exti>:

void Init_Exti(void)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80021f6:	2050      	movs	r0, #80	; 0x50
 80021f8:	f7ff ff48 	bl	800208c <LL_EXTI_EnableIT_32_63>

  return;
 80021fc:	bf00      	nop
}
 80021fe:	bd80      	pop	{r7, pc}

08002200 <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8002204:	bf00      	nop
}
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002214:	2000      	movs	r0, #0
 8002216:	f008 f995 	bl	800a544 <OTP_Read>
 800221a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	799b      	ldrb	r3, [r3, #6]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff ff44 	bl	80020b4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800222c:	bf00      	nop
 800222e:	bf00      	nop
}
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <System_Init>:

static void System_Init(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
  Init_Smps();
 800223a:	f7ff ffd3 	bl	80021e4 <Init_Smps>

  Init_Exti();
 800223e:	f7ff ffd8 	bl	80021f2 <Init_Exti>

  Init_Rtc();
 8002242:	f000 f803 	bl	800224c <Init_Rtc>

  return;
 8002246:	bf00      	nop
}
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <Init_Rtc>:

static void Init_Rtc(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002250:	4805      	ldr	r0, [pc, #20]	; (8002268 <Init_Rtc+0x1c>)
 8002252:	f7ff ff7e 	bl	8002152 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002256:	2100      	movs	r1, #0
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <Init_Rtc+0x1c>)
 800225a:	f7ff ff8a 	bl	8002172 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800225e:	4802      	ldr	r0, [pc, #8]	; (8002268 <Init_Rtc+0x1c>)
 8002260:	f7ff ff6a 	bl	8002138 <LL_RTC_EnableWriteProtection>

  return;
 8002264:	bf00      	nop
}
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40002800 	.word	0x40002800

0800226c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002270:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002274:	f7ff ff3c 	bl	80020f0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002278:	f008 f98c 	bl	800a594 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800227c:	2004      	movs	r0, #4
 800227e:	f7ff feef 	bl	8002060 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8002282:	bf00      	nop
}
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800228e:	f007 ff03 	bl	800a098 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8002292:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <appe_Tl_Init+0x50>)
 8002294:	2100      	movs	r1, #0
 8002296:	2004      	movs	r0, #4
 8002298:	f008 fb20 	bl	800a8dc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <appe_Tl_Init+0x54>)
 800229e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <appe_Tl_Init+0x58>)
 80022a2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80022a4:	463b      	mov	r3, r7
 80022a6:	4619      	mov	r1, r3
 80022a8:	480e      	ldr	r0, [pc, #56]	; (80022e4 <appe_Tl_Init+0x5c>)
 80022aa:	f007 fb99 	bl	80099e0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <appe_Tl_Init+0x60>)
 80022b4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <appe_Tl_Init+0x64>)
 80022b8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80022ba:	f240 533c 	movw	r3, #1340	; 0x53c
 80022be:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80022c0:	f107 0308 	add.w	r3, r7, #8
 80022c4:	4618      	mov	r0, r3
 80022c6:	f008 f847 	bl	800a358 <TL_MM_Init>

  TL_Enable();
 80022ca:	f007 fede 	bl	800a08a <TL_Enable>

  return;
 80022ce:	bf00      	nop
}
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	08009a19 	.word	0x08009a19
 80022dc:	20030a54 	.word	0x20030a54
 80022e0:	080022f1 	.word	0x080022f1
 80022e4:	08002307 	.word	0x08002307
 80022e8:	20030b60 	.word	0x20030b60
 80022ec:	20030518 	.word	0x20030518

080022f0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80022fa:	bf00      	nop
}
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	330b      	adds	r3, #11
 8002314:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8002320:	d004      	beq.n	800232c <APPE_SysUserEvtRx+0x26>
 8002322:	f249 2201 	movw	r2, #37377	; 0x9201
 8002326:	4293      	cmp	r3, r2
 8002328:	d003      	beq.n	8002332 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 800232a:	e008      	b.n	800233e <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 800232c:	f000 f834 	bl	8002398 <APPE_SysEvtReadyProcessing>
         break;
 8002330:	e005      	b.n	800233e <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	789b      	ldrb	r3, [r3, #2]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f806 	bl	8002348 <APPE_SysEvtError>
         break;
 800233c:	bf00      	nop
  }
  return;
 800233e:	bf00      	nop
}
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	2b7d      	cmp	r3, #125	; 0x7d
 8002356:	d002      	beq.n	800235e <APPE_SysEvtError+0x16>
 8002358:	2b7e      	cmp	r3, #126	; 0x7e
 800235a:	d006      	beq.n	800236a <APPE_SysEvtError+0x22>
 800235c:	e00b      	b.n	8002376 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 800235e:	4a0b      	ldr	r2, [pc, #44]	; (800238c <APPE_SysEvtError+0x44>)
 8002360:	2101      	movs	r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	f001 fd6c 	bl	8003e40 <logApplication>
       break;
 8002368:	e00c      	b.n	8002384 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <APPE_SysEvtError+0x48>)
 800236c:	2101      	movs	r1, #1
 800236e:	2000      	movs	r0, #0
 8002370:	f001 fd66 	bl	8003e40 <logApplication>
       break;
 8002374:	e006      	b.n	8002384 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	4a06      	ldr	r2, [pc, #24]	; (8002394 <APPE_SysEvtError+0x4c>)
 800237a:	2101      	movs	r1, #1
 800237c:	2000      	movs	r0, #0
 800237e:	f001 fd5f 	bl	8003e40 <logApplication>
       break;
 8002382:	bf00      	nop
  }
  return;
 8002384:	bf00      	nop
}
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	0800c570 	.word	0x0800c570
 8002390:	0800c594 	.word	0x0800c594
 8002394:	0800c5b4 	.word	0x0800c5b4

08002398 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 800239c:	f008 f850 	bl	800a440 <TL_TRACES_Init>

  APP_THREAD_Init();
 80023a0:	f7fe fbf0 	bl	8000b84 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80023a4:	2100      	movs	r1, #0
 80023a6:	2001      	movs	r0, #1
 80023a8:	f008 f906 	bl	800a5b8 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80023ac:	2100      	movs	r1, #0
 80023ae:	2001      	movs	r0, #1
 80023b0:	f008 f932 	bl	800a618 <UTIL_LPM_SetOffMode>
  return;
 80023b4:	bf00      	nop
}
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c0:	f001 fe12 	bl	8003fe8 <HAL_GetTick>
 80023c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d00a      	beq.n	80023e8 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80023d2:	f001 fe21 	bl	8004018 <HAL_GetTickFreq>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4413      	add	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e0:	e002      	b.n	80023e8 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80023e2:	f7ff fe99 	bl	8002118 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80023e6:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80023e8:	f001 fdfe 	bl	8003fe8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d8f4      	bhi.n	80023e2 <HAL_Delay+0x2a>
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002406:	f04f 30ff 	mov.w	r0, #4294967295
 800240a:	f008 f96b 	bl	800a6e4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}

08002412 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8002416:	f008 f92f 	bl	800a678 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800241a:	bf00      	nop
}
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d003      	beq.n	8002438 <UTIL_SEQ_EvtIdle+0x18>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b04      	cmp	r3, #4
 8002434:	d00c      	beq.n	8002450 <UTIL_SEQ_EvtIdle+0x30>
 8002436:	e012      	b.n	800245e <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <UTIL_SEQ_EvtIdle+0x50>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d103      	bne.n	8002448 <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8002440:	2001      	movs	r0, #1
 8002442:	f008 f94f 	bl	800a6e4 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 8002446:	e00f      	b.n	8002468 <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 8002448:	2000      	movs	r0, #0
 800244a:	f008 f94b 	bl	800a6e4 <UTIL_SEQ_Run>
    break;
 800244e:	e00b      	b.n	8002468 <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8002450:	2004      	movs	r0, #4
 8002452:	f008 fa91 	bl	800a978 <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8002456:	2001      	movs	r0, #1
 8002458:	f008 f944 	bl	800a6e4 <UTIL_SEQ_Run>
    break;
 800245c:	e004      	b.n	8002468 <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800245e:	f04f 30ff 	mov.w	r0, #4294967295
 8002462:	f008 f93f 	bl	800a6e4 <UTIL_SEQ_Run>
    break;
 8002466:	bf00      	nop
  }
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000258 	.word	0x20000258

08002474 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 800247c:	2100      	movs	r1, #0
 800247e:	2004      	movs	r0, #4
 8002480:	f008 fa4e 	bl	800a920 <UTIL_SEQ_SetTask>
  return;
 8002484:	bf00      	nop
}
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8002494:	2001      	movs	r0, #1
 8002496:	f008 fa6f 	bl	800a978 <UTIL_SEQ_SetEvt>
  return;
 800249a:	bf00      	nop
}
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80024aa:	2001      	movs	r0, #1
 80024ac:	f008 fa84 	bl	800a9b8 <UTIL_SEQ_WaitEvt>
  return;
 80024b0:	bf00      	nop
}
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f007 ff85 	bl	800a3d0 <TL_MM_EvtDone>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	4a0b      	ldr	r2, [pc, #44]	; (800250c <HAL_GPIO_EXTI_Callback+0x3c>)
 80024de:	2101      	movs	r1, #1
 80024e0:	2000      	movs	r0, #0
 80024e2:	f001 fcad 	bl	8003e40 <logApplication>
  switch(GPIO_Pin)
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_EXTI_Callback+0x26>
 80024ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f2:	d005      	beq.n	8002500 <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 80024f4:	e005      	b.n	8002502 <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 80024f6:	2101      	movs	r1, #1
 80024f8:	2008      	movs	r0, #8
 80024fa:	f008 fa11 	bl	800a920 <UTIL_SEQ_SetTask>
        break;
 80024fe:	e000      	b.n	8002502 <HAL_GPIO_EXTI_Callback+0x32>
        break;
 8002500:	bf00      	nop
  }
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	0800c5d4 	.word	0x0800c5d4

08002510 <LL_EXTI_EnableIT_0_31>:
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <LL_EXTI_EnableIT_0_31+0x24>)
 800251a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800251e:	4905      	ldr	r1, [pc, #20]	; (8002534 <LL_EXTI_EnableIT_0_31+0x24>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	58000800 	.word	0x58000800

08002538 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4904      	ldr	r1, [pc, #16]	; (8002558 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	58000800 	.word	0x58000800

0800255c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <ReadRtcSsrValue+0x3c>)
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	b29b      	uxth	r3, r3
 8002568:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <ReadRtcSsrValue+0x3c>)
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	b29b      	uxth	r3, r3
 8002570:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002572:	e005      	b.n	8002580 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <ReadRtcSsrValue+0x3c>)
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	b29b      	uxth	r3, r3
 800257e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d1f5      	bne.n	8002574 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002588:	683b      	ldr	r3, [r7, #0]
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40002800 	.word	0x40002800

0800259c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	460a      	mov	r2, r1
 80025a6:	71fb      	strb	r3, [r7, #7]
 80025a8:	4613      	mov	r3, r2
 80025aa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80025ac:	79ba      	ldrb	r2, [r7, #6]
 80025ae:	491d      	ldr	r1, [pc, #116]	; (8002624 <LinkTimerAfter+0x88>)
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	3315      	adds	r3, #21
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d009      	beq.n	80025da <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	4916      	ldr	r1, [pc, #88]	; (8002624 <LinkTimerAfter+0x88>)
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	3314      	adds	r3, #20
 80025d6:	79fa      	ldrb	r2, [r7, #7]
 80025d8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80025da:	79fa      	ldrb	r2, [r7, #7]
 80025dc:	4911      	ldr	r1, [pc, #68]	; (8002624 <LinkTimerAfter+0x88>)
 80025de:	4613      	mov	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	3315      	adds	r3, #21
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80025ee:	79fa      	ldrb	r2, [r7, #7]
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <LinkTimerAfter+0x88>)
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	3314      	adds	r3, #20
 80025fe:	79ba      	ldrb	r2, [r7, #6]
 8002600:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002602:	79ba      	ldrb	r2, [r7, #6]
 8002604:	4907      	ldr	r1, [pc, #28]	; (8002624 <LinkTimerAfter+0x88>)
 8002606:	4613      	mov	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	440b      	add	r3, r1
 8002610:	3315      	adds	r3, #21
 8002612:	79fa      	ldrb	r2, [r7, #7]
 8002614:	701a      	strb	r2, [r3, #0]

  return;
 8002616:	bf00      	nop
}
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	2000025c 	.word	0x2000025c

08002628 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	460a      	mov	r2, r1
 8002632:	71fb      	strb	r3, [r7, #7]
 8002634:	4613      	mov	r3, r2
 8002636:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002638:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <LinkTimerBefore+0xb8>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	79ba      	ldrb	r2, [r7, #6]
 8002640:	429a      	cmp	r2, r3
 8002642:	d032      	beq.n	80026aa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002644:	79ba      	ldrb	r2, [r7, #6]
 8002646:	4927      	ldr	r1, [pc, #156]	; (80026e4 <LinkTimerBefore+0xbc>)
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	3314      	adds	r3, #20
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	4922      	ldr	r1, [pc, #136]	; (80026e4 <LinkTimerBefore+0xbc>)
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	3315      	adds	r3, #21
 8002668:	79fa      	ldrb	r2, [r7, #7]
 800266a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800266c:	79fa      	ldrb	r2, [r7, #7]
 800266e:	491d      	ldr	r1, [pc, #116]	; (80026e4 <LinkTimerBefore+0xbc>)
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	440b      	add	r3, r1
 800267a:	3315      	adds	r3, #21
 800267c:	79ba      	ldrb	r2, [r7, #6]
 800267e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002680:	79fa      	ldrb	r2, [r7, #7]
 8002682:	4918      	ldr	r1, [pc, #96]	; (80026e4 <LinkTimerBefore+0xbc>)
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	3314      	adds	r3, #20
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002694:	79ba      	ldrb	r2, [r7, #6]
 8002696:	4913      	ldr	r1, [pc, #76]	; (80026e4 <LinkTimerBefore+0xbc>)
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	3314      	adds	r3, #20
 80026a4:	79fa      	ldrb	r2, [r7, #7]
 80026a6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80026a8:	e014      	b.n	80026d4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80026aa:	79fa      	ldrb	r2, [r7, #7]
 80026ac:	490d      	ldr	r1, [pc, #52]	; (80026e4 <LinkTimerBefore+0xbc>)
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	440b      	add	r3, r1
 80026b8:	3315      	adds	r3, #21
 80026ba:	79ba      	ldrb	r2, [r7, #6]
 80026bc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80026be:	79ba      	ldrb	r2, [r7, #6]
 80026c0:	4908      	ldr	r1, [pc, #32]	; (80026e4 <LinkTimerBefore+0xbc>)
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	440b      	add	r3, r1
 80026cc:	3314      	adds	r3, #20
 80026ce:	79fa      	ldrb	r2, [r7, #7]
 80026d0:	701a      	strb	r2, [r3, #0]
  return;
 80026d2:	bf00      	nop
}
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	200002ec 	.word	0x200002ec
 80026e4:	2000025c 	.word	0x2000025c

080026e8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026f2:	4b4e      	ldr	r3, [pc, #312]	; (800282c <linkTimer+0x144>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b06      	cmp	r3, #6
 80026fa:	d118      	bne.n	800272e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80026fc:	4b4b      	ldr	r3, [pc, #300]	; (800282c <linkTimer+0x144>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4b4b      	ldr	r3, [pc, #300]	; (8002830 <linkTimer+0x148>)
 8002704:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002706:	4a49      	ldr	r2, [pc, #292]	; (800282c <linkTimer+0x144>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	4949      	ldr	r1, [pc, #292]	; (8002834 <linkTimer+0x14c>)
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	3315      	adds	r3, #21
 800271c:	2206      	movs	r2, #6
 800271e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002720:	4b45      	ldr	r3, [pc, #276]	; (8002838 <linkTimer+0x150>)
 8002722:	f04f 32ff 	mov.w	r2, #4294967295
 8002726:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	81fb      	strh	r3, [r7, #14]
 800272c:	e078      	b.n	8002820 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800272e:	f000 f909 	bl	8002944 <ReturnTimeElapsed>
 8002732:	4603      	mov	r3, r0
 8002734:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002736:	79fa      	ldrb	r2, [r7, #7]
 8002738:	493e      	ldr	r1, [pc, #248]	; (8002834 <linkTimer+0x14c>)
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	440b      	add	r3, r1
 8002744:	3308      	adds	r3, #8
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	89fb      	ldrh	r3, [r7, #14]
 800274a:	79fa      	ldrb	r2, [r7, #7]
 800274c:	4419      	add	r1, r3
 800274e:	4839      	ldr	r0, [pc, #228]	; (8002834 <linkTimer+0x14c>)
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4403      	add	r3, r0
 800275a:	3308      	adds	r3, #8
 800275c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800275e:	79fa      	ldrb	r2, [r7, #7]
 8002760:	4934      	ldr	r1, [pc, #208]	; (8002834 <linkTimer+0x14c>)
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	440b      	add	r3, r1
 800276c:	3308      	adds	r3, #8
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002772:	4b2e      	ldr	r3, [pc, #184]	; (800282c <linkTimer+0x144>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4619      	mov	r1, r3
 800277a:	4a2e      	ldr	r2, [pc, #184]	; (8002834 <linkTimer+0x14c>)
 800277c:	460b      	mov	r3, r1
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	440b      	add	r3, r1
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	3308      	adds	r3, #8
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d337      	bcc.n	8002800 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002790:	4b26      	ldr	r3, [pc, #152]	; (800282c <linkTimer+0x144>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002796:	7b7a      	ldrb	r2, [r7, #13]
 8002798:	4926      	ldr	r1, [pc, #152]	; (8002834 <linkTimer+0x14c>)
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	3315      	adds	r3, #21
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80027aa:	e013      	b.n	80027d4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80027ac:	7b7a      	ldrb	r2, [r7, #13]
 80027ae:	4921      	ldr	r1, [pc, #132]	; (8002834 <linkTimer+0x14c>)
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	3315      	adds	r3, #21
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80027c0:	7b7a      	ldrb	r2, [r7, #13]
 80027c2:	491c      	ldr	r1, [pc, #112]	; (8002834 <linkTimer+0x14c>)
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	3315      	adds	r3, #21
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80027d4:	7b3b      	ldrb	r3, [r7, #12]
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d00b      	beq.n	80027f2 <linkTimer+0x10a>
 80027da:	7b3a      	ldrb	r2, [r7, #12]
 80027dc:	4915      	ldr	r1, [pc, #84]	; (8002834 <linkTimer+0x14c>)
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	440b      	add	r3, r1
 80027e8:	3308      	adds	r3, #8
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d2dc      	bcs.n	80027ac <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80027f2:	7b7a      	ldrb	r2, [r7, #13]
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fecf 	bl	800259c <LinkTimerAfter>
 80027fe:	e00f      	b.n	8002820 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <linkTimer+0x144>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ff0c 	bl	8002628 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <linkTimer+0x144>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <linkTimer+0x148>)
 8002818:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800281a:	4a04      	ldr	r2, [pc, #16]	; (800282c <linkTimer+0x144>)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002820:	89fb      	ldrh	r3, [r7, #14]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200002ec 	.word	0x200002ec
 8002830:	200002ed 	.word	0x200002ed
 8002834:	2000025c 	.word	0x2000025c
 8002838:	200002f0 	.word	0x200002f0

0800283c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	460a      	mov	r2, r1
 8002846:	71fb      	strb	r3, [r7, #7]
 8002848:	4613      	mov	r3, r2
 800284a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800284c:	4b39      	ldr	r3, [pc, #228]	; (8002934 <UnlinkTimer+0xf8>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	429a      	cmp	r2, r3
 8002856:	d111      	bne.n	800287c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002858:	4b36      	ldr	r3, [pc, #216]	; (8002934 <UnlinkTimer+0xf8>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4b36      	ldr	r3, [pc, #216]	; (8002938 <UnlinkTimer+0xfc>)
 8002860:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002862:	79fa      	ldrb	r2, [r7, #7]
 8002864:	4935      	ldr	r1, [pc, #212]	; (800293c <UnlinkTimer+0x100>)
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	3315      	adds	r3, #21
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <UnlinkTimer+0xf8>)
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e03e      	b.n	80028fa <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800287c:	79fa      	ldrb	r2, [r7, #7]
 800287e:	492f      	ldr	r1, [pc, #188]	; (800293c <UnlinkTimer+0x100>)
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	3314      	adds	r3, #20
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002890:	79fa      	ldrb	r2, [r7, #7]
 8002892:	492a      	ldr	r1, [pc, #168]	; (800293c <UnlinkTimer+0x100>)
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	3315      	adds	r3, #21
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80028a4:	79f9      	ldrb	r1, [r7, #7]
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	4824      	ldr	r0, [pc, #144]	; (800293c <UnlinkTimer+0x100>)
 80028aa:	460b      	mov	r3, r1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	440b      	add	r3, r1
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4403      	add	r3, r0
 80028b4:	3315      	adds	r3, #21
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b2d8      	uxtb	r0, r3
 80028ba:	4920      	ldr	r1, [pc, #128]	; (800293c <UnlinkTimer+0x100>)
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	3315      	adds	r3, #21
 80028c8:	4602      	mov	r2, r0
 80028ca:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80028cc:	7bbb      	ldrb	r3, [r7, #14]
 80028ce:	2b06      	cmp	r3, #6
 80028d0:	d013      	beq.n	80028fa <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80028d2:	79f9      	ldrb	r1, [r7, #7]
 80028d4:	7bba      	ldrb	r2, [r7, #14]
 80028d6:	4819      	ldr	r0, [pc, #100]	; (800293c <UnlinkTimer+0x100>)
 80028d8:	460b      	mov	r3, r1
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	440b      	add	r3, r1
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4403      	add	r3, r0
 80028e2:	3314      	adds	r3, #20
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	b2d8      	uxtb	r0, r3
 80028e8:	4914      	ldr	r1, [pc, #80]	; (800293c <UnlinkTimer+0x100>)
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	3314      	adds	r3, #20
 80028f6:	4602      	mov	r2, r0
 80028f8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80028fa:	79fa      	ldrb	r2, [r7, #7]
 80028fc:	490f      	ldr	r1, [pc, #60]	; (800293c <UnlinkTimer+0x100>)
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	330c      	adds	r3, #12
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <UnlinkTimer+0xf8>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b06      	cmp	r3, #6
 8002916:	d107      	bne.n	8002928 <UnlinkTimer+0xec>
 8002918:	79bb      	ldrb	r3, [r7, #6]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d104      	bne.n	8002928 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <UnlinkTimer+0x104>)
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	601a      	str	r2, [r3, #0]
  }

  return;
 8002926:	bf00      	nop
 8002928:	bf00      	nop
}
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	200002ec 	.word	0x200002ec
 8002938:	200002ed 	.word	0x200002ed
 800293c:	2000025c 	.word	0x2000025c
 8002940:	200002f0 	.word	0x200002f0

08002944 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <ReturnTimeElapsed+0x70>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002952:	d026      	beq.n	80029a2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002954:	f7ff fe02 	bl	800255c <ReadRtcSsrValue>
 8002958:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <ReturnTimeElapsed+0x70>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	d805      	bhi.n	8002970 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002964:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <ReturnTimeElapsed+0x70>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	e00a      	b.n	8002986 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <ReturnTimeElapsed+0x74>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <ReturnTimeElapsed+0x70>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <ReturnTimeElapsed+0x78>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <ReturnTimeElapsed+0x7c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	40d3      	lsrs	r3, r2
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	e001      	b.n	80029a6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	b29b      	uxth	r3, r3
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200002f0 	.word	0x200002f0
 80029b8:	200002f8 	.word	0x200002f8
 80029bc:	200002f6 	.word	0x200002f6
 80029c0:	200002f5 	.word	0x200002f5

080029c4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d108      	bne.n	80029e6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80029d4:	f7ff fdc2 	bl	800255c <ReadRtcSsrValue>
 80029d8:	4603      	mov	r3, r0
 80029da:	4a21      	ldr	r2, [pc, #132]	; (8002a60 <RestartWakeupCounter+0x9c>)
 80029dc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80029de:	2003      	movs	r0, #3
 80029e0:	f001 fcdd 	bl	800439e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80029e4:	e039      	b.n	8002a5a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d803      	bhi.n	80029f4 <RestartWakeupCounter+0x30>
 80029ec:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <RestartWakeupCounter+0xa0>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d002      	beq.n	80029fa <RestartWakeupCounter+0x36>
      Value -= 1;
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80029fa:	bf00      	nop
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <RestartWakeupCounter+0xa4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f8      	beq.n	80029fc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <RestartWakeupCounter+0xa4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <RestartWakeupCounter+0xa4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002a1a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <RestartWakeupCounter+0xa8>)
 8002a1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a22:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002a24:	2003      	movs	r0, #3
 8002a26:	f001 fcc8 	bl	80043ba <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <RestartWakeupCounter+0xac>)
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	0c1b      	lsrs	r3, r3, #16
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	490e      	ldr	r1, [pc, #56]	; (8002a70 <RestartWakeupCounter+0xac>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002a3a:	f7ff fd8f 	bl	800255c <ReadRtcSsrValue>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <RestartWakeupCounter+0x9c>)
 8002a42:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <RestartWakeupCounter+0xa4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <RestartWakeupCounter+0xa4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a52:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002a54:	f3af 8000 	nop.w
  return ;
 8002a58:	bf00      	nop
}
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200002f0 	.word	0x200002f0
 8002a64:	200002f5 	.word	0x200002f5
 8002a68:	2000057c 	.word	0x2000057c
 8002a6c:	58000800 	.word	0x58000800
 8002a70:	40002800 	.word	0x40002800

08002a74 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002a7a:	4b45      	ldr	r3, [pc, #276]	; (8002b90 <RescheduleTimerList+0x11c>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a86:	d107      	bne.n	8002a98 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002a88:	bf00      	nop
 8002a8a:	4b42      	ldr	r3, [pc, #264]	; (8002b94 <RescheduleTimerList+0x120>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f8      	bne.n	8002a8a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002a98:	4b3e      	ldr	r3, [pc, #248]	; (8002b94 <RescheduleTimerList+0x120>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <RescheduleTimerList+0x120>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <RescheduleTimerList+0x124>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	493a      	ldr	r1, [pc, #232]	; (8002b9c <RescheduleTimerList+0x128>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	3308      	adds	r3, #8
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002ac2:	f7ff ff3f 	bl	8002944 <ReturnTimeElapsed>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d205      	bcs.n	8002ade <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002ad6:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <RescheduleTimerList+0x12c>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e04d      	b.n	8002b7a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	4a30      	ldr	r2, [pc, #192]	; (8002ba4 <RescheduleTimerList+0x130>)
 8002ae2:	8812      	ldrh	r2, [r2, #0]
 8002ae4:	b292      	uxth	r2, r2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d906      	bls.n	8002afe <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002af0:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <RescheduleTimerList+0x130>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002af6:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <RescheduleTimerList+0x12c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e03d      	b.n	8002b7a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <RescheduleTimerList+0x12c>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b0e:	e034      	b.n	8002b7a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	4922      	ldr	r1, [pc, #136]	; (8002b9c <RescheduleTimerList+0x128>)
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3308      	adds	r3, #8
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d20a      	bcs.n	8002b3e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	491c      	ldr	r1, [pc, #112]	; (8002b9c <RescheduleTimerList+0x128>)
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3308      	adds	r3, #8
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e013      	b.n	8002b66 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	4916      	ldr	r1, [pc, #88]	; (8002b9c <RescheduleTimerList+0x128>)
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3308      	adds	r3, #8
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	1ac9      	subs	r1, r1, r3
 8002b56:	4811      	ldr	r0, [pc, #68]	; (8002b9c <RescheduleTimerList+0x128>)
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4403      	add	r3, r0
 8002b62:	3308      	adds	r3, #8
 8002b64:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	490c      	ldr	r1, [pc, #48]	; (8002b9c <RescheduleTimerList+0x128>)
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	440b      	add	r3, r1
 8002b74:	3315      	adds	r3, #21
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b06      	cmp	r3, #6
 8002b7e:	d1c7      	bne.n	8002b10 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002b80:	89bb      	ldrh	r3, [r7, #12]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff1e 	bl	80029c4 <RestartWakeupCounter>

  return ;
 8002b88:	bf00      	nop
}
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40002800 	.word	0x40002800
 8002b94:	2000057c 	.word	0x2000057c
 8002b98:	200002ec 	.word	0x200002ec
 8002b9c:	2000025c 	.word	0x2000025c
 8002ba0:	200002f4 	.word	0x200002f4
 8002ba4:	200002fa 	.word	0x200002fa

08002ba8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bae:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb2:	617b      	str	r3, [r7, #20]
  return(result);
 8002bb4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb8:	b672      	cpsid	i
}
 8002bba:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002bbc:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	22ca      	movs	r2, #202	; 0xca
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8002bc4:	4b57      	ldr	r3, [pc, #348]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2253      	movs	r2, #83	; 0x53
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002bcc:	4b55      	ldr	r3, [pc, #340]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bda:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002bdc:	4b52      	ldr	r3, [pc, #328]	; (8002d28 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002be4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002be8:	4950      	ldr	r1, [pc, #320]	; (8002d2c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	330c      	adds	r3, #12
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d16e      	bne.n	8002cdc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002bfe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c02:	494a      	ldr	r1, [pc, #296]	; (8002d2c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002c12:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c16:	4945      	ldr	r1, [pc, #276]	; (8002d2c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	3310      	adds	r3, #16
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002c28:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04c      	beq.n	8002ccc <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002c32:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c36:	493d      	ldr	r1, [pc, #244]	; (8002d2c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	440b      	add	r3, r1
 8002c42:	330d      	adds	r3, #13
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d124      	bne.n	8002c96 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fdf2 	bl	800283c <UnlinkTimer>
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f383 8810 	msr	PRIMASK, r3
}
 8002c62:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002c64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c68:	4930      	ldr	r1, [pc, #192]	; (8002d2c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	3304      	adds	r3, #4
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fa32 	bl	80030e8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	22ca      	movs	r2, #202	; 0xca
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c8c:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2253      	movs	r2, #83	; 0x53
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
 8002c94:	e012      	b.n	8002cbc <HW_TS_RTC_Wakeup_Handler+0x114>
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ca0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f99a 	bl	8002fe0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002cac:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	22ca      	movs	r2, #202	; 0xca
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2253      	movs	r2, #83	; 0x53
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	69b8      	ldr	r0, [r7, #24]
 8002cc6:	f000 fa95 	bl	80031f4 <HW_TS_RTC_Int_AppNot>
 8002cca:	e022      	b.n	8002d12 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002ccc:	f7ff fed2 	bl	8002a74 <RescheduleTimerList>
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f383 8810 	msr	PRIMASK, r3
}
 8002cda:	e01a      	b.n	8002d12 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002cdc:	bf00      	nop
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f8      	beq.n	8002cde <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002cfc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002d00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f383 8810 	msr	PRIMASK, r3
}
 8002d10:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	22ff      	movs	r2, #255	; 0xff
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002d1a:	bf00      	nop
}
 8002d1c:	3728      	adds	r7, #40	; 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2000057c 	.word	0x2000057c
 8002d28:	200002ec 	.word	0x200002ec
 8002d2c:	2000025c 	.word	0x2000025c
 8002d30:	200002f4 	.word	0x200002f4
 8002d34:	58000800 	.word	0x58000800

08002d38 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d44:	4b5e      	ldr	r3, [pc, #376]	; (8002ec0 <HW_TS_Init+0x188>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	22ca      	movs	r2, #202	; 0xca
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d4c:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <HW_TS_Init+0x188>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2253      	movs	r2, #83	; 0x53
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d54:	4b5b      	ldr	r3, [pc, #364]	; (8002ec4 <HW_TS_Init+0x18c>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a5a      	ldr	r2, [pc, #360]	; (8002ec4 <HW_TS_Init+0x18c>)
 8002d5a:	f043 0320 	orr.w	r3, r3, #32
 8002d5e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002d60:	4b58      	ldr	r3, [pc, #352]	; (8002ec4 <HW_TS_Init+0x18c>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f1c3 0304 	rsb	r3, r3, #4
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <HW_TS_Init+0x190>)
 8002d74:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002d76:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HW_TS_Init+0x18c>)
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d7e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002d82:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	fa92 f2a2 	rbit	r2, r2
 8002d8a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	2a00      	cmp	r2, #0
 8002d94:	d101      	bne.n	8002d9a <HW_TS_Init+0x62>
  {
    return 32U;
 8002d96:	2220      	movs	r2, #32
 8002d98:	e003      	b.n	8002da2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	fab2 f282 	clz	r2, r2
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	40d3      	lsrs	r3, r2
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <HW_TS_Init+0x194>)
 8002dac:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002dae:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <HW_TS_Init+0x18c>)
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	4b44      	ldr	r3, [pc, #272]	; (8002ed0 <HW_TS_Init+0x198>)
 8002dc0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002dc2:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HW_TS_Init+0x198>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	4a40      	ldr	r2, [pc, #256]	; (8002ecc <HW_TS_Init+0x194>)
 8002dca:	7812      	ldrb	r2, [r2, #0]
 8002dcc:	fb02 f303 	mul.w	r3, r2, r3
 8002dd0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002dd4:	4a3c      	ldr	r2, [pc, #240]	; (8002ec8 <HW_TS_Init+0x190>)
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	40d3      	lsrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d904      	bls.n	8002df0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002de6:	4b3b      	ldr	r3, [pc, #236]	; (8002ed4 <HW_TS_Init+0x19c>)
 8002de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dec:	801a      	strh	r2, [r3, #0]
 8002dee:	e003      	b.n	8002df8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <HW_TS_Init+0x19c>)
 8002df6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002df8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002dfc:	f7ff fb9c 	bl	8002538 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002e00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e04:	f7ff fb84 	bl	8002510 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d13d      	bne.n	8002e8a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002e0e:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <HW_TS_Init+0x1a0>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002e14:	4b31      	ldr	r3, [pc, #196]	; (8002edc <HW_TS_Init+0x1a4>)
 8002e16:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	e00c      	b.n	8002e3c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002e22:	7ffa      	ldrb	r2, [r7, #31]
 8002e24:	492e      	ldr	r1, [pc, #184]	; (8002ee0 <HW_TS_Init+0x1a8>)
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	440b      	add	r3, r1
 8002e30:	330c      	adds	r3, #12
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002e36:	7ffb      	ldrb	r3, [r7, #31]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	7ffb      	ldrb	r3, [r7, #31]
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d9ef      	bls.n	8002e22 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <HW_TS_Init+0x1ac>)
 8002e44:	2206      	movs	r2, #6
 8002e46:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HW_TS_Init+0x188>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <HW_TS_Init+0x188>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e56:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HW_TS_Init+0x188>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HW_TS_Init+0x188>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e68:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002e6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <HW_TS_Init+0x1b0>)
 8002e6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e70:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002e72:	2003      	movs	r0, #3
 8002e74:	f001 faa1 	bl	80043ba <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HW_TS_Init+0x188>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HW_TS_Init+0x188>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	e009      	b.n	8002e9e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HW_TS_Init+0x188>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002e98:	2003      	movs	r0, #3
 8002e9a:	f001 fa80 	bl	800439e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HW_TS_Init+0x188>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	2003      	movs	r0, #3
 8002eac:	f001 fa31 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002eb0:	2003      	movs	r0, #3
 8002eb2:	f001 fa48 	bl	8004346 <HAL_NVIC_EnableIRQ>

  return;
 8002eb6:	bf00      	nop
}
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000057c 	.word	0x2000057c
 8002ec4:	40002800 	.word	0x40002800
 8002ec8:	200002f5 	.word	0x200002f5
 8002ecc:	200002f6 	.word	0x200002f6
 8002ed0:	200002f8 	.word	0x200002f8
 8002ed4:	200002fa 	.word	0x200002fa
 8002ed8:	200002f4 	.word	0x200002f4
 8002edc:	200002f0 	.word	0x200002f0
 8002ee0:	2000025c 	.word	0x2000025c
 8002ee4:	200002ec 	.word	0x200002ec
 8002ee8:	58000800 	.word	0x58000800

08002eec <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b08b      	sub	sp, #44	; 0x2c
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f02:	f3ef 8310 	mrs	r3, PRIMASK
 8002f06:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f08:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002f0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f0c:	b672      	cpsid	i
}
 8002f0e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002f10:	e004      	b.n	8002f1c <HW_TS_Create+0x30>
  {
    loop++;
 8002f12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f16:	3301      	adds	r3, #1
 8002f18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002f1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d80c      	bhi.n	8002f3e <HW_TS_Create+0x52>
 8002f24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f28:	492c      	ldr	r1, [pc, #176]	; (8002fdc <HW_TS_Create+0xf0>)
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	440b      	add	r3, r1
 8002f34:	330c      	adds	r3, #12
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e9      	bne.n	8002f12 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d038      	beq.n	8002fb8 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002f46:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f4a:	4924      	ldr	r1, [pc, #144]	; (8002fdc <HW_TS_Create+0xf0>)
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	440b      	add	r3, r1
 8002f56:	330c      	adds	r3, #12
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f383 8810 	msr	PRIMASK, r3
}
 8002f66:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002f68:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f6c:	491b      	ldr	r1, [pc, #108]	; (8002fdc <HW_TS_Create+0xf0>)
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	3310      	adds	r3, #16
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002f7e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f82:	4916      	ldr	r1, [pc, #88]	; (8002fdc <HW_TS_Create+0xf0>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	330d      	adds	r3, #13
 8002f90:	79fa      	ldrb	r2, [r7, #7]
 8002f92:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002f94:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f98:	4910      	ldr	r1, [pc, #64]	; (8002fdc <HW_TS_Create+0xf0>)
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002fae:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002fb6:	e008      	b.n	8002fca <HW_TS_Create+0xde>
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f383 8810 	msr	PRIMASK, r3
}
 8002fc2:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	372c      	adds	r7, #44	; 0x2c
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	2000025c 	.word	0x2000025c

08002fe0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fea:	f3ef 8310 	mrs	r3, PRIMASK
 8002fee:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002ff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff4:	b672      	cpsid	i
}
 8002ff6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002ff8:	2003      	movs	r0, #3
 8002ffa:	f001 f9b2 	bl	8004362 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002ffe:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HW_TS_Stop+0xf0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	22ca      	movs	r2, #202	; 0xca
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
 8003006:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <HW_TS_Stop+0xf0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2253      	movs	r2, #83	; 0x53
 800300c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800300e:	79fa      	ldrb	r2, [r7, #7]
 8003010:	4930      	ldr	r1, [pc, #192]	; (80030d4 <HW_TS_Stop+0xf4>)
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	330c      	adds	r3, #12
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d142      	bne.n	80030ac <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fc06 	bl	800283c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003030:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <HW_TS_Stop+0xf8>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003036:	7cfb      	ldrb	r3, [r7, #19]
 8003038:	2b06      	cmp	r3, #6
 800303a:	d12f      	bne.n	800309c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HW_TS_Stop+0xfc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003048:	d107      	bne.n	800305a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800304a:	bf00      	nop
 800304c:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HW_TS_Stop+0xf0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f8      	bne.n	800304c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HW_TS_Stop+0xf0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <HW_TS_Stop+0xf0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003068:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800306a:	bf00      	nop
 800306c:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <HW_TS_Stop+0xf0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f8      	beq.n	800306c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <HW_TS_Stop+0xf0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HW_TS_Stop+0xf0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800308a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HW_TS_Stop+0x100>)
 800308e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003092:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003094:	2003      	movs	r0, #3
 8003096:	f001 f990 	bl	80043ba <HAL_NVIC_ClearPendingIRQ>
 800309a:	e007      	b.n	80030ac <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HW_TS_Stop+0x104>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	7cfa      	ldrb	r2, [r7, #19]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80030a8:	f7ff fce4 	bl	8002a74 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <HW_TS_Stop+0xf0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	22ff      	movs	r2, #255	; 0xff
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80030b4:	2003      	movs	r0, #3
 80030b6:	f001 f946 	bl	8004346 <HAL_NVIC_EnableIRQ>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f383 8810 	msr	PRIMASK, r3
}
 80030c4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80030c6:	bf00      	nop
}
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2000057c 	.word	0x2000057c
 80030d4:	2000025c 	.word	0x2000025c
 80030d8:	200002ec 	.word	0x200002ec
 80030dc:	40002800 	.word	0x40002800
 80030e0:	58000800 	.word	0x58000800
 80030e4:	200002ed 	.word	0x200002ed

080030e8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80030f4:	79fa      	ldrb	r2, [r7, #7]
 80030f6:	493b      	ldr	r1, [pc, #236]	; (80031e4 <HW_TS_Start+0xfc>)
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	440b      	add	r3, r1
 8003102:	330c      	adds	r3, #12
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d103      	bne.n	8003114 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff66 	bl	8002fe0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003114:	f3ef 8310 	mrs	r3, PRIMASK
 8003118:	60fb      	str	r3, [r7, #12]
  return(result);
 800311a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800311c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800311e:	b672      	cpsid	i
}
 8003120:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003122:	2003      	movs	r0, #3
 8003124:	f001 f91d 	bl	8004362 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003128:	4b2f      	ldr	r3, [pc, #188]	; (80031e8 <HW_TS_Start+0x100>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	22ca      	movs	r2, #202	; 0xca
 800312e:	625a      	str	r2, [r3, #36]	; 0x24
 8003130:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <HW_TS_Start+0x100>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2253      	movs	r2, #83	; 0x53
 8003136:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003138:	79fa      	ldrb	r2, [r7, #7]
 800313a:	492a      	ldr	r1, [pc, #168]	; (80031e4 <HW_TS_Start+0xfc>)
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	330c      	adds	r3, #12
 8003148:	2202      	movs	r2, #2
 800314a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800314c:	79fa      	ldrb	r2, [r7, #7]
 800314e:	4925      	ldr	r1, [pc, #148]	; (80031e4 <HW_TS_Start+0xfc>)
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3308      	adds	r3, #8
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003160:	79fa      	ldrb	r2, [r7, #7]
 8003162:	4920      	ldr	r1, [pc, #128]	; (80031e4 <HW_TS_Start+0xfc>)
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	3304      	adds	r3, #4
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fab6 	bl	80026e8 <linkTimer>
 800317c:	4603      	mov	r3, r0
 800317e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003180:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <HW_TS_Start+0x104>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <HW_TS_Start+0x108>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	7c7a      	ldrb	r2, [r7, #17]
 800318e:	429a      	cmp	r2, r3
 8003190:	d002      	beq.n	8003198 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8003192:	f7ff fc6f 	bl	8002a74 <RescheduleTimerList>
 8003196:	e013      	b.n	80031c0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003198:	79fa      	ldrb	r2, [r7, #7]
 800319a:	4912      	ldr	r1, [pc, #72]	; (80031e4 <HW_TS_Start+0xfc>)
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	3308      	adds	r3, #8
 80031a8:	6819      	ldr	r1, [r3, #0]
 80031aa:	8a7b      	ldrh	r3, [r7, #18]
 80031ac:	79fa      	ldrb	r2, [r7, #7]
 80031ae:	1ac9      	subs	r1, r1, r3
 80031b0:	480c      	ldr	r0, [pc, #48]	; (80031e4 <HW_TS_Start+0xfc>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4403      	add	r3, r0
 80031bc:	3308      	adds	r3, #8
 80031be:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HW_TS_Start+0x100>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	22ff      	movs	r2, #255	; 0xff
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80031c8:	2003      	movs	r0, #3
 80031ca:	f001 f8bc 	bl	8004346 <HAL_NVIC_EnableIRQ>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f383 8810 	msr	PRIMASK, r3
}
 80031d8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80031da:	bf00      	nop
}
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2000025c 	.word	0x2000025c
 80031e8:	2000057c 	.word	0x2000057c
 80031ec:	200002ec 	.word	0x200002ec
 80031f0:	200002ed 	.word	0x200002ed

080031f4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	460b      	mov	r3, r1
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4798      	blx	r3

  return;
 8003206:	bf00      	nop
}
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HW_UART_Transmit_IT>:

    return;
}

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	4603      	mov	r3, r0
 800321c:	73fb      	strb	r3, [r7, #15]
 800321e:	4613      	mov	r3, r2
 8003220:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HW_UART_Transmit_IT+0x1e>
 8003228:	2b02      	cmp	r3, #2
 800322a:	d00d      	beq.n	8003248 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800322c:	e019      	b.n	8003262 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 800322e:	4a0f      	ldr	r2, [pc, #60]	; (800326c <HW_UART_Transmit_IT+0x5c>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HW_UART_Transmit_IT+0x60>)
 8003236:	4a0f      	ldr	r2, [pc, #60]	; (8003274 <HW_UART_Transmit_IT+0x64>)
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	89bb      	ldrh	r3, [r7, #12]
 800323c:	461a      	mov	r2, r3
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	480b      	ldr	r0, [pc, #44]	; (8003270 <HW_UART_Transmit_IT+0x60>)
 8003242:	f004 fabf 	bl	80077c4 <HAL_UART_Transmit_IT>
            break;
 8003246:	e00c      	b.n	8003262 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8003248:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <HW_UART_Transmit_IT+0x68>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HW_UART_Transmit_IT+0x6c>)
 8003250:	4a0b      	ldr	r2, [pc, #44]	; (8003280 <HW_UART_Transmit_IT+0x70>)
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	89bb      	ldrh	r3, [r7, #12]
 8003256:	461a      	mov	r2, r3
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	4808      	ldr	r0, [pc, #32]	; (800327c <HW_UART_Transmit_IT+0x6c>)
 800325c:	f004 fab2 	bl	80077c4 <HAL_UART_Transmit_IT>
            break;
 8003260:	bf00      	nop
    }

    return;
 8003262:	bf00      	nop
}
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200002fc 	.word	0x200002fc
 8003270:	200003d4 	.word	0x200003d4
 8003274:	40013800 	.word	0x40013800
 8003278:	20000300 	.word	0x20000300
 800327c:	20000340 	.word	0x20000340
 8003280:	40008000 	.word	0x40008000

08003284 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <HAL_UART_TxCpltCallback+0x4c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00a      	beq.n	80032ac <HAL_UART_TxCpltCallback+0x28>
 8003296:	4a0f      	ldr	r2, [pc, #60]	; (80032d4 <HAL_UART_TxCpltCallback+0x50>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10f      	bne.n	80032bc <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <HAL_UART_TxCpltCallback+0x54>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <HAL_UART_TxCpltCallback+0x54>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4798      	blx	r3
            }
            break;
 80032aa:	e009      	b.n	80032c0 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_UART_TxCpltCallback+0x58>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_UART_TxCpltCallback+0x58>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4798      	blx	r3
            }
            break;
 80032ba:	e003      	b.n	80032c4 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 80032bc:	bf00      	nop
 80032be:	e002      	b.n	80032c6 <HAL_UART_TxCpltCallback+0x42>
            break;
 80032c0:	bf00      	nop
 80032c2:	e000      	b.n	80032c6 <HAL_UART_TxCpltCallback+0x42>
            break;
 80032c4:	bf00      	nop
    }

    return;
 80032c6:	bf00      	nop
}
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40008000 	.word	0x40008000
 80032d4:	40013800 	.word	0x40013800
 80032d8:	200002fc 	.word	0x200002fc
 80032dc:	20000300 	.word	0x20000300

080032e0 <LL_RCC_LSE_SetDriveCapability>:
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80032e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f0:	f023 0218 	bic.w	r2, r3, #24
 80032f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_AHB1_GRP1_EnableClock>:
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800331a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4313      	orrs	r3, r2
 8003322:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4013      	ands	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003330:	68fb      	ldr	r3, [r7, #12]
}
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <LL_AHB2_GRP1_EnableClock>:
{
 800333e:	b480      	push	{r7}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800334c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4313      	orrs	r3, r2
 8003354:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4013      	ands	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_APB1_GRP1_EnableClock>:
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800337e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4313      	orrs	r3, r2
 8003386:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003394:	68fb      	ldr	r3, [r7, #12]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <main>:
SensorData_t sensor_data;
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80033aa:	f000 fdaf 	bl	8003f0c <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 80033ae:	f7fe fef3 	bl	8002198 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80033b2:	f000 f845 	bl	8003440 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80033b6:	f000 f89f 	bl	80034f8 <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 80033ba:	f000 f8bd 	bl	8003538 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80033be:	f000 f983 	bl	80036c8 <MX_GPIO_Init>
	MX_DMA_Init();
 80033c2:	f000 f967 	bl	8003694 <MX_DMA_Init>
	MX_RF_Init();
 80033c6:	f000 f929 	bl	800361c <MX_RF_Init>
	MX_RTC_Init();
 80033ca:	f000 f92f 	bl	800362c <MX_RTC_Init>
	MX_I2C1_Init();
 80033ce:	f000 f8c7 	bl	8003560 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	sensirion_i2c_init(&hi2c1);
 80033d2:	4816      	ldr	r0, [pc, #88]	; (800342c <main+0x88>)
 80033d4:	f7fd f838 	bl	8000448 <sensirion_i2c_init>
	sht4x_enable_low_power_mode(1);
 80033d8:	2001      	movs	r0, #1
 80033da:	f7fd f91b 	bl	8000614 <sht4x_enable_low_power_mode>
	platform_stts22h_init(&hi2c1);
 80033de:	4813      	ldr	r0, [pc, #76]	; (800342c <main+0x88>)
 80033e0:	f7fd f93a 	bl	8000658 <platform_stts22h_init>
	stts22h_temp_data_rate_set(0x01);
 80033e4:	2001      	movs	r0, #1
 80033e6:	f7fd f9c9 	bl	800077c <stts22h_temp_data_rate_set>
	for(uint8_t i=0; i<10; i++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	71fb      	strb	r3, [r7, #7]
 80033ee:	e010      	b.n	8003412 <main+0x6e>
	{
		sht4x_measure_blocking_read(&sensor_data.temp_main, &sensor_data.humidity);
 80033f0:	490f      	ldr	r1, [pc, #60]	; (8003430 <main+0x8c>)
 80033f2:	4810      	ldr	r0, [pc, #64]	; (8003434 <main+0x90>)
 80033f4:	f7fd f8b4 	bl	8000560 <sht4x_measure_blocking_read>
		stts22h_temperature_raw_get(&sensor_data.temp_aux);
 80033f8:	480f      	ldr	r0, [pc, #60]	; (8003438 <main+0x94>)
 80033fa:	f7fd fa84 	bl	8000906 <stts22h_temperature_raw_get>
		HAL_Delay(100);
 80033fe:	2064      	movs	r0, #100	; 0x64
 8003400:	f7fe ffda 	bl	80023b8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003404:	2102      	movs	r1, #2
 8003406:	480d      	ldr	r0, [pc, #52]	; (800343c <main+0x98>)
 8003408:	f001 fb98 	bl	8004b3c <HAL_GPIO_TogglePin>
	for(uint8_t i=0; i<10; i++)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	3301      	adds	r3, #1
 8003410:	71fb      	strb	r3, [r7, #7]
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	2b09      	cmp	r3, #9
 8003416:	d9eb      	bls.n	80033f0 <main+0x4c>
	}
	app_algo_init(sensor_data);
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <main+0x8c>)
 800341a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800341e:	f7fe fd4d 	bl	8001ebc <app_algo_init>
	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 8003422:	f7fe fec7 	bl	80021b4 <MX_APPE_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		MX_APPE_Process();
 8003426:	f7fe ffec 	bl	8002402 <MX_APPE_Process>
 800342a:	e7fc      	b.n	8003426 <main+0x82>
 800342c:	20000528 	.word	0x20000528
 8003430:	200005a0 	.word	0x200005a0
 8003434:	200005a4 	.word	0x200005a4
 8003438:	200005a8 	.word	0x200005a8
 800343c:	48000800 	.word	0x48000800

08003440 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b09a      	sub	sp, #104	; 0x68
 8003444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003446:	f107 0320 	add.w	r3, r7, #32
 800344a:	2248      	movs	r2, #72	; 0x48
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f007 fc7c 	bl	800ad4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003454:	1d3b      	adds	r3, r7, #4
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	60da      	str	r2, [r3, #12]
 8003460:	611a      	str	r2, [r3, #16]
 8003462:	615a      	str	r2, [r3, #20]
 8003464:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003466:	f002 f9eb 	bl	8005840 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800346a:	2000      	movs	r0, #0
 800346c:	f7ff ff38 	bl	80032e0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003470:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <SystemClock_Config+0xb4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003478:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <SystemClock_Config+0xb4>)
 800347a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <SystemClock_Config+0xb4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800348c:	2307      	movs	r3, #7
 800348e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003496:	2301      	movs	r3, #1
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800349a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034a0:	2340      	movs	r3, #64	; 0x40
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a8:	f107 0320 	add.w	r3, r7, #32
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 fdc1 	bl	8006034 <HAL_RCC_OscConfig>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80034b8:	f000 f930 	bl	800371c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80034bc:	236f      	movs	r3, #111	; 0x6f
 80034be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80034c0:	2302      	movs	r3, #2
 80034c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	2101      	movs	r1, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f003 f91d 	bl	800671c <HAL_RCC_ClockConfig>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80034e8:	f000 f918 	bl	800371c <Error_Handler>
  }
}
 80034ec:	bf00      	nop
 80034ee:	3768      	adds	r7, #104	; 0x68
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	58000400 	.word	0x58000400

080034f8 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b094      	sub	sp, #80	; 0x50
 80034fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034fe:	463b      	mov	r3, r7
 8003500:	2250      	movs	r2, #80	; 0x50
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f007 fc21 	bl	800ad4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800350a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800350e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003510:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003514:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003516:	2302      	movs	r3, #2
 8003518:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800351a:	2300      	movs	r3, #0
 800351c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800351e:	463b      	mov	r3, r7
 8003520:	4618      	mov	r0, r3
 8003522:	f003 fd0c 	bl	8006f3e <HAL_RCCEx_PeriphCLKConfig>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800352c:	f000 f8f6 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003530:	bf00      	nop
 8003532:	3750      	adds	r7, #80	; 0x50
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <MX_IPCC_Init+0x20>)
 800353e:	4a07      	ldr	r2, [pc, #28]	; (800355c <MX_IPCC_Init+0x24>)
 8003540:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <MX_IPCC_Init+0x20>)
 8003544:	f002 f8f6 	bl	8005734 <HAL_IPCC_Init>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_IPCC_Init+0x1a>
		Error_Handler();
 800354e:	f000 f8e5 	bl	800371c <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000304 	.word	0x20000304
 800355c:	58000c00 	.word	0x58000c00

08003560 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	// Configure PB8 and PB9 as alternate function pins
	__HAL_RCC_I2C1_CLK_ENABLE();
 8003566:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800356a:	f7ff ff01 	bl	8003370 <LL_APB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800356e:	2002      	movs	r0, #2
 8003570:	f7ff fee5 	bl	800333e <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef gpio_init;
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003574:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003578:	607b      	str	r3, [r7, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 800357a:	2312      	movs	r3, #18
 800357c:	60bb      	str	r3, [r7, #8]
	gpio_init.Pull = GPIO_PULLUP;
 800357e:	2301      	movs	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003582:	2303      	movs	r3, #3
 8003584:	613b      	str	r3, [r7, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 8003586:	2304      	movs	r3, #4
 8003588:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &gpio_init);
 800358a:	1d3b      	adds	r3, r7, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4820      	ldr	r0, [pc, #128]	; (8003610 <MX_I2C1_Init+0xb0>)
 8003590:	f001 f94c 	bl	800482c <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 8003594:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <MX_I2C1_Init+0xb4>)
 8003596:	4a20      	ldr	r2, [pc, #128]	; (8003618 <MX_I2C1_Init+0xb8>)
 8003598:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <MX_I2C1_Init+0xb4>)
 800359c:	f640 6214 	movw	r2, #3604	; 0xe14
 80035a0:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0x00;
 80035a2:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <MX_I2C1_Init+0xb4>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <MX_I2C1_Init+0xb4>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <MX_I2C1_Init+0xb4>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80035b4:	4b17      	ldr	r3, [pc, #92]	; (8003614 <MX_I2C1_Init+0xb4>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035ba:	4b16      	ldr	r3, [pc, #88]	; (8003614 <MX_I2C1_Init+0xb4>)
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <MX_I2C1_Init+0xb4>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035c6:	4b13      	ldr	r3, [pc, #76]	; (8003614 <MX_I2C1_Init+0xb4>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80035cc:	4811      	ldr	r0, [pc, #68]	; (8003614 <MX_I2C1_Init+0xb4>)
 80035ce:	f001 fb0b 	bl	8004be8 <HAL_I2C_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_I2C1_Init+0x7c>
		Error_Handler();
 80035d8:	f000 f8a0 	bl	800371c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80035dc:	2100      	movs	r1, #0
 80035de:	480d      	ldr	r0, [pc, #52]	; (8003614 <MX_I2C1_Init+0xb4>)
 80035e0:	f001 fffe 	bl	80055e0 <HAL_I2CEx_ConfigAnalogFilter>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_I2C1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80035ea:	f000 f897 	bl	800371c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80035ee:	2100      	movs	r1, #0
 80035f0:	4808      	ldr	r0, [pc, #32]	; (8003614 <MX_I2C1_Init+0xb4>)
 80035f2:	f002 f840 	bl	8005676 <HAL_I2CEx_ConfigDigitalFilter>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_I2C1_Init+0xa0>
		Error_Handler();
 80035fc:	f000 f88e 	bl	800371c <Error_Handler>
	}
	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003600:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003604:	f002 f884 	bl	8005710 <HAL_I2CEx_EnableFastModePlus>
}
 8003608:	bf00      	nop
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	48000400 	.word	0x48000400
 8003614:	20000528 	.word	0x20000528
 8003618:	40005400 	.word	0x40005400

0800361c <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8003630:	4b16      	ldr	r3, [pc, #88]	; (800368c <MX_RTC_Init+0x60>)
 8003632:	4a17      	ldr	r2, [pc, #92]	; (8003690 <MX_RTC_Init+0x64>)
 8003634:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <MX_RTC_Init+0x60>)
 8003638:	2200      	movs	r2, #0
 800363a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800363c:	4b13      	ldr	r3, [pc, #76]	; (800368c <MX_RTC_Init+0x60>)
 800363e:	220f      	movs	r2, #15
 8003640:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <MX_RTC_Init+0x60>)
 8003644:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003648:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <MX_RTC_Init+0x60>)
 800364c:	2200      	movs	r2, #0
 800364e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003650:	4b0e      	ldr	r3, [pc, #56]	; (800368c <MX_RTC_Init+0x60>)
 8003652:	2200      	movs	r2, #0
 8003654:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <MX_RTC_Init+0x60>)
 8003658:	2200      	movs	r2, #0
 800365a:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <MX_RTC_Init+0x60>)
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8003662:	480a      	ldr	r0, [pc, #40]	; (800368c <MX_RTC_Init+0x60>)
 8003664:	f003 fef2 	bl	800744c <HAL_RTC_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_RTC_Init+0x46>
		Error_Handler();
 800366e:	f000 f855 	bl	800371c <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 8003672:	2200      	movs	r2, #0
 8003674:	2100      	movs	r1, #0
 8003676:	4805      	ldr	r0, [pc, #20]	; (800368c <MX_RTC_Init+0x60>)
 8003678:	f003 ffe8 	bl	800764c <HAL_RTCEx_SetWakeUpTimer_IT>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8003682:	f000 f84b 	bl	800371c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	2000057c 	.word	0x2000057c
 8003690:	40002800 	.word	0x40002800

08003694 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003698:	2004      	movs	r0, #4
 800369a:	f7ff fe37 	bl	800330c <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 800369e:	2001      	movs	r0, #1
 80036a0:	f7ff fe34 	bl	800330c <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036a4:	2200      	movs	r2, #0
 80036a6:	2100      	movs	r1, #0
 80036a8:	200b      	movs	r0, #11
 80036aa:	f000 fe32 	bl	8004312 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80036ae:	200b      	movs	r0, #11
 80036b0:	f000 fe49 	bl	8004346 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80036b4:	2200      	movs	r2, #0
 80036b6:	2100      	movs	r1, #0
 80036b8:	200c      	movs	r0, #12
 80036ba:	f000 fe2a 	bl	8004312 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80036be:	200c      	movs	r0, #12
 80036c0:	f000 fe41 	bl	8004346 <HAL_NVIC_EnableIRQ>

}
 80036c4:	bf00      	nop
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80036ce:	2004      	movs	r0, #4
 80036d0:	f7ff fe35 	bl	800333e <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80036d4:	2001      	movs	r0, #1
 80036d6:	f7ff fe32 	bl	800333e <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80036da:	2002      	movs	r0, #2
 80036dc:	f7ff fe2f 	bl	800333e <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80036e0:	1d3b      	adds	r3, r7, #4
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	609a      	str	r2, [r3, #8]
 80036ea:	60da      	str	r2, [r3, #12]
 80036ec:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80036ee:	2303      	movs	r3, #3
 80036f0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f2:	2301      	movs	r3, #1
 80036f4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	4619      	mov	r1, r3
 8003702:	4805      	ldr	r0, [pc, #20]	; (8003718 <MX_GPIO_Init+0x50>)
 8003704:	f001 f892 	bl	800482c <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003708:	2102      	movs	r1, #2
 800370a:	4803      	ldr	r0, [pc, #12]	; (8003718 <MX_GPIO_Init+0x50>)
 800370c:	f001 fa16 	bl	8004b3c <HAL_GPIO_TogglePin>

}
 8003710:	bf00      	nop
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	48000800 	.word	0x48000800

0800371c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003720:	bf00      	nop
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <LL_PWR_SetPowerMode>:
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <LL_PWR_SetPowerMode+0x24>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 0207 	bic.w	r2, r3, #7
 800373c:	4904      	ldr	r1, [pc, #16]	; (8003750 <LL_PWR_SetPowerMode+0x24>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	58000400 	.word	0x58000400

08003754 <LL_C2_PWR_SetPowerMode>:
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <LL_C2_PWR_SetPowerMode+0x28>)
 800375e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003762:	f023 0207 	bic.w	r2, r3, #7
 8003766:	4905      	ldr	r1, [pc, #20]	; (800377c <LL_C2_PWR_SetPowerMode+0x28>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	58000400 	.word	0x58000400

08003780 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <LL_PWR_ClearFlag_WU+0x14>)
 8003786:	221f      	movs	r2, #31
 8003788:	619a      	str	r2, [r3, #24]
}
 800378a:	bf00      	nop
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	58000400 	.word	0x58000400

08003798 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <LL_PWR_IsActiveFlag_C2SB+0x24>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037aa:	d101      	bne.n	80037b0 <LL_PWR_IsActiveFlag_C2SB+0x18>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	58000400 	.word	0x58000400

080037c0 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d2:	d101      	bne.n	80037d8 <LL_PWR_IsActiveFlag_C2DS+0x18>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <LL_PWR_IsActiveFlag_C2DS+0x1a>
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	58000400 	.word	0x58000400

080037e8 <LL_RCC_HSE_Enable>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80037ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_RCC_HSE_IsReady>:
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003818:	d101      	bne.n	800381e <LL_RCC_HSE_IsReady+0x18>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <LL_RCC_HSE_IsReady+0x1a>
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <LL_RCC_HSI_Enable>:
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800382e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800383c:	6013      	str	r3, [r2, #0]
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_RCC_HSI_IsReady>:
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800384c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385a:	d101      	bne.n	8003860 <LL_RCC_HSI_IsReady+0x18>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <LL_RCC_HSI_IsReady+0x1a>
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <LL_RCC_SetSysClkSource>:
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 0203 	bic.w	r2, r3, #3
 800387e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_RCC_GetSysClkSource>:
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_LPM_EnableSleep>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <LL_LPM_EnableSleep+0x1c>)
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <LL_LPM_EnableSleep+0x1c>)
 80038de:	f023 0304 	bic.w	r3, r3, #4
 80038e2:	6113      	str	r3, [r2, #16]
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <LL_LPM_EnableDeepSleep+0x1c>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <LL_LPM_EnableDeepSleep+0x1c>)
 80038fe:	f043 0304 	orr.w	r3, r3, #4
 8003902:	6113      	str	r3, [r2, #16]
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	3220      	adds	r2, #32
 8003924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003928:	4a05      	ldr	r2, [pc, #20]	; (8003940 <LL_HSEM_1StepLock+0x2c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d001      	beq.n	8003932 <LL_HSEM_1StepLock+0x1e>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <LL_HSEM_1StepLock+0x20>
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	80000400 	.word	0x80000400

08003944 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800395e:	bf00      	nop
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 800396e:	f000 fb5f 	bl	8004030 <HAL_SuspendTick>

  EnterLowPower();
 8003972:	f000 f839 	bl	80039e8 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8003976:	f7ff ff03 	bl	8003780 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 800397a:	2003      	movs	r0, #3
 800397c:	f7ff fed6 	bl	800372c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8003980:	f7ff ffb8 	bl	80038f4 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8003984:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8003986:	bf00      	nop
}
 8003988:	bd80      	pop	{r7, pc}

0800398a <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 800398e:	f000 fb5f 	bl	8004050 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8003992:	bf00      	nop
}
 8003994:	bd80      	pop	{r7, pc}

08003996 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 800399a:	f000 fb49 	bl	8004030 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 800399e:	f000 f823 	bl	80039e8 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/

  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 80039a2:	2002      	movs	r0, #2
 80039a4:	f7ff fec2 	bl	800372c <LL_PWR_SetPowerMode>

  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80039a8:	2004      	movs	r0, #4
 80039aa:	f7ff fed3 	bl	8003754 <LL_C2_PWR_SetPowerMode>
  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80039ae:	f7ff ffa1 	bl	80038f4 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 80039b2:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 80039b4:	bf00      	nop
}
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 80039bc:	f000 f850 	bl	8003a60 <ExitLowPower>

  HAL_ResumeTick();
 80039c0:	f000 fb46 	bl	8004050 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 80039c4:	bf00      	nop
}
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 80039cc:	f000 fb30 	bl	8004030 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80039d0:	f7ff ff80 	bl	80038d4 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 80039d4:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 80039d6:	bf00      	nop
}
 80039d8:	bd80      	pop	{r7, pc}

080039da <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 80039de:	f000 fb37 	bl	8004050 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 80039e2:	bf00      	nop
}
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80039ec:	bf00      	nop
 80039ee:	2103      	movs	r1, #3
 80039f0:	4819      	ldr	r0, [pc, #100]	; (8003a58 <EnterLowPower+0x70>)
 80039f2:	f7ff ff8f 	bl	8003914 <LL_HSEM_1StepLock>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f8      	bne.n	80039ee <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 80039fc:	2104      	movs	r1, #4
 80039fe:	4816      	ldr	r0, [pc, #88]	; (8003a58 <EnterLowPower+0x70>)
 8003a00:	f7ff ff88 	bl	8003914 <LL_HSEM_1StepLock>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d117      	bne.n	8003a3a <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8003a0a:	f7ff fed9 	bl	80037c0 <LL_PWR_IsActiveFlag_C2DS>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d104      	bne.n	8003a1e <EnterLowPower+0x36>
 8003a14:	f7ff fec0 	bl	8003798 <LL_PWR_IsActiveFlag_C2SB>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d015      	beq.n	8003a4a <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2104      	movs	r1, #4
 8003a22:	480d      	ldr	r0, [pc, #52]	; (8003a58 <EnterLowPower+0x70>)
 8003a24:	f7ff ff8e 	bl	8003944 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8003a28:	f000 f852 	bl	8003ad0 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <EnterLowPower+0x74>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <EnterLowPower+0x74>)
 8003a32:	f023 0307 	bic.w	r3, r3, #7
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	e007      	b.n	8003a4a <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8003a3a:	f000 f849 	bl	8003ad0 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <EnterLowPower+0x74>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a06      	ldr	r2, [pc, #24]	; (8003a5c <EnterLowPower+0x74>)
 8003a44:	f023 0307 	bic.w	r3, r3, #7
 8003a48:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2103      	movs	r1, #3
 8003a4e:	4802      	ldr	r0, [pc, #8]	; (8003a58 <EnterLowPower+0x70>)
 8003a50:	f7ff ff78 	bl	8003944 <LL_HSEM_ReleaseLock>

  return;
 8003a54:	bf00      	nop
}
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	58001400 	.word	0x58001400
 8003a5c:	58004000 	.word	0x58004000

08003a60 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8003a64:	2200      	movs	r2, #0
 8003a66:	2104      	movs	r1, #4
 8003a68:	4817      	ldr	r0, [pc, #92]	; (8003ac8 <ExitLowPower+0x68>)
 8003a6a:	f7ff ff6b 	bl	8003944 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8003a6e:	bf00      	nop
 8003a70:	2103      	movs	r1, #3
 8003a72:	4815      	ldr	r0, [pc, #84]	; (8003ac8 <ExitLowPower+0x68>)
 8003a74:	f7ff ff4e 	bl	8003914 <LL_HSEM_1StepLock>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f8      	bne.n	8003a70 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003a7e:	f7ff ff09 	bl	8003894 <LL_RCC_GetSysClkSource>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d118      	bne.n	8003aba <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 8003a88:	f7ff feae 	bl	80037e8 <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <ExitLowPower+0x6c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 0307 	bic.w	r3, r3, #7
 8003a94:	4a0d      	ldr	r2, [pc, #52]	; (8003acc <ExitLowPower+0x6c>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 8003a9c:	bf00      	nop
 8003a9e:	f7ff feb2 	bl	8003806 <LL_RCC_HSE_IsReady>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0fa      	beq.n	8003a9e <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f7ff fedf 	bl	800386c <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8003aae:	bf00      	nop
 8003ab0:	f7ff fef0 	bl	8003894 <LL_RCC_GetSysClkSource>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d1fa      	bne.n	8003ab0 <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8003aba:	2200      	movs	r2, #0
 8003abc:	2103      	movs	r1, #3
 8003abe:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <ExitLowPower+0x68>)
 8003ac0:	f7ff ff40 	bl	8003944 <LL_HSEM_ReleaseLock>

  return;
 8003ac4:	bf00      	nop
}
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	58001400 	.word	0x58001400
 8003acc:	58004000 	.word	0x58004000

08003ad0 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8003ad4:	f7ff fea9 	bl	800382a <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8003ad8:	bf00      	nop
 8003ada:	f7ff feb5 	bl	8003848 <LL_RCC_HSI_IsReady>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0fa      	beq.n	8003ada <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7ff fec1 	bl	800386c <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8003aea:	2000      	movs	r0, #0
 8003aec:	f7ff fede 	bl	80038ac <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8003af0:	bf00      	nop
 8003af2:	f7ff fecf 	bl	8003894 <LL_RCC_GetSysClkSource>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d1fa      	bne.n	8003af2 <Switch_On_HSI+0x22>
  return;
 8003afc:	bf00      	nop
}
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_AHB3_GRP1_EnableClock>:
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b72:	68fb      	ldr	r3, [r7, #12]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_APB1_GRP1_EnableClock>:
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003bb6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bba:	f7ff ffc8 	bl	8003b4e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	f000 fba5 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f000 fbbc 	bl	8004346 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2004      	movs	r0, #4
 8003bd4:	f000 fb9d 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003bd8:	2004      	movs	r0, #4
 8003bda:	f000 fbb4 	bl	8004346 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	2005      	movs	r0, #5
 8003be4:	f000 fb95 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003be8:	2005      	movs	r0, #5
 8003bea:	f000 fbac 	bl	8004346 <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	2015      	movs	r0, #21
 8003bf4:	f000 fb8d 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8003bf8:	2015      	movs	r0, #21
 8003bfa:	f000 fba4 	bl	8004346 <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	202b      	movs	r0, #43	; 0x2b
 8003c04:	f000 fb85 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8003c08:	202b      	movs	r0, #43	; 0x2b
 8003c0a:	f000 fb9c 	bl	8004346 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	202e      	movs	r0, #46	; 0x2e
 8003c14:	f000 fb7d 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003c18:	202e      	movs	r0, #46	; 0x2e
 8003c1a:	f000 fb94 	bl	8004346 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2100      	movs	r1, #0
 8003c22:	2036      	movs	r0, #54	; 0x36
 8003c24:	f000 fb75 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003c28:	2036      	movs	r0, #54	; 0x36
 8003c2a:	f000 fb8c 	bl	8004346 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <HAL_IPCC_MspInit+0x44>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d113      	bne.n	8003c6e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003c46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003c4a:	f7ff ff80 	bl	8003b4e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2100      	movs	r1, #0
 8003c52:	202c      	movs	r0, #44	; 0x2c
 8003c54:	f000 fb5d 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003c58:	202c      	movs	r0, #44	; 0x2c
 8003c5a:	f000 fb74 	bl	8004346 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2100      	movs	r1, #0
 8003c62:	202d      	movs	r0, #45	; 0x2d
 8003c64:	f000 fb55 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003c68:	202d      	movs	r0, #45	; 0x2d
 8003c6a:	f000 fb6c 	bl	8004346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	58000c00 	.word	0x58000c00

08003c7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b096      	sub	sp, #88	; 0x58
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c84:	f107 0308 	add.w	r3, r7, #8
 8003c88:	2250      	movs	r2, #80	; 0x50
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f007 f85d 	bl	800ad4c <memset>
  if(hrtc->Instance==RTC)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_RTC_MspInit+0x80>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d12b      	bne.n	8003cf4 <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003c9c:	f001 fdd0 	bl	8005840 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8003ca0:	f001 fdce 	bl	8005840 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 8003ca4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003ca8:	f7ff ff2a 	bl	8003b00 <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003cac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cb0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cb8:	f107 0308 	add.w	r3, r7, #8
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f003 f93e 	bl	8006f3e <HAL_RCCEx_PeriphCLKConfig>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8003cc8:	f7ff fd28 	bl	800371c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ccc:	f7ff ff2e 	bl	8003b2c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003cd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003cd4:	f7ff ff54 	bl	8003b80 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2100      	movs	r1, #0
 8003cdc:	2003      	movs	r0, #3
 8003cde:	f000 fb18 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003ce2:	2003      	movs	r0, #3
 8003ce4:	f000 fb2f 	bl	8004346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8003ce8:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <HAL_RTC_MspInit+0x80>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a03      	ldr	r2, [pc, #12]	; (8003cfc <HAL_RTC_MspInit+0x80>)
 8003cee:	f023 0307 	bic.w	r3, r3, #7
 8003cf2:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003cf4:	bf00      	nop
 8003cf6:	3758      	adds	r7, #88	; 0x58
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40002800 	.word	0x40002800

08003d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d12:	e7fe      	b.n	8003d12 <HardFault_Handler+0x4>

08003d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d18:	e7fe      	b.n	8003d18 <MemManage_Handler+0x4>

08003d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d1e:	e7fe      	b.n	8003d1e <BusFault_Handler+0x4>

08003d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <UsageFault_Handler+0x4>

08003d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d54:	f000 f934 	bl	8003fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003d60:	f001 fdd4 	bl	800590c <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003d6c:	f7fe ff1c 	bl	8002ba8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003d78:	f000 fc9a 	bl	80046b0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003d84:	bf00      	nop
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003d94:	4802      	ldr	r0, [pc, #8]	; (8003da0 <DMA1_Channel1_IRQHandler+0x10>)
 8003d96:	f000 fbdc 	bl	8004552 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000468 	.word	0x20000468

08003da4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003da8:	4802      	ldr	r0, [pc, #8]	; (8003db4 <DMA1_Channel2_IRQHandler+0x10>)
 8003daa:	f000 fbd2 	bl	8004552 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200004c8 	.word	0x200004c8

08003db8 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <USART1_IRQHandler+0x10>)
 8003dce:	f003 fd8d 	bl	80078ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200003d4 	.word	0x200003d4

08003ddc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <LPUART1_IRQHandler+0x10>)
 8003de2:	f003 fd83 	bl	80078ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000340 	.word	0x20000340

08003df0 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003e02:	f7fd fdf5 	bl	80019f0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003e0e:	f7fd fe49 	bl	8001aa4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003e1a:	f000 fec1 	bl	8004ba0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003e22:	b480      	push	{r7}
 8003e24:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 8003e34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e38:	f000 fe9a 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8003e40:	b40c      	push	{r2, r3}
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	71fb      	strb	r3, [r7, #7]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	b002      	add	sp, #8
 8003e5e:	4770      	bx	lr

08003e60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003e64:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <SystemInit+0xa0>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003e6a:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <SystemInit+0xa0>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	4a23      	ldr	r2, [pc, #140]	; (8003f00 <SystemInit+0xa0>)
 8003e72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003e92:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e9e:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <SystemInit+0xa4>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb0:	f023 0305 	bic.w	r3, r3, #5
 8003eb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed0:	4a0d      	ldr	r2, [pc, #52]	; (8003f08 <SystemInit+0xa8>)
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed8:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <SystemInit+0xa8>)
 8003eda:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	619a      	str	r2, [r3, #24]
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	e000ed00 	.word	0xe000ed00
 8003f04:	faf6fefb 	.word	0xfaf6fefb
 8003f08:	22041000 	.word	0x22041000

08003f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f16:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <HAL_Init+0x3c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <HAL_Init+0x3c>)
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f22:	2003      	movs	r0, #3
 8003f24:	f000 f9ea 	bl	80042fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f000 f80f 	bl	8003f4c <HAL_InitTick>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	71fb      	strb	r3, [r7, #7]
 8003f38:	e001      	b.n	8003f3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f3a:	f7ff fe3a 	bl	8003bb2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	58004000 	.word	0x58004000

08003f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003f58:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <HAL_InitTick+0x6c>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d024      	beq.n	8003faa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003f60:	f002 fd88 	bl	8006a74 <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <HAL_InitTick+0x6c>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f70:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fa04 	bl	8004386 <HAL_SYSTICK_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10f      	bne.n	8003fa4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b0f      	cmp	r3, #15
 8003f88:	d809      	bhi.n	8003f9e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f92:	f000 f9be 	bl	8004312 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <HAL_InitTick+0x70>)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	e007      	b.n	8003fae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	e004      	b.n	8003fae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
 8003fa8:	e001      	b.n	8003fae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000034 	.word	0x20000034
 8003fbc:	20000030 	.word	0x20000030

08003fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_IncTick+0x20>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_IncTick+0x24>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4413      	add	r3, r2
 8003fd0:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <HAL_IncTick+0x24>)
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000034 	.word	0x20000034
 8003fe4:	200005ac 	.word	0x200005ac

08003fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return uwTick;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_GetTick+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	200005ac 	.word	0x200005ac

08004000 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <HAL_GetTickPrio+0x14>)
 8004006:	681b      	ldr	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000030 	.word	0x20000030

08004018 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <HAL_GetTickFreq+0x14>)
 800401e:	781b      	ldrb	r3, [r3, #0]
}
 8004020:	4618      	mov	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000034 	.word	0x20000034

08004030 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_SuspendTick+0x1c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a04      	ldr	r2, [pc, #16]	; (800404c <HAL_SuspendTick+0x1c>)
 800403a:	f023 0302 	bic.w	r3, r3, #2
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000e010 	.word	0xe000e010

08004050 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_ResumeTick+0x1c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a04      	ldr	r2, [pc, #16]	; (800406c <HAL_ResumeTick+0x1c>)
 800405a:	f043 0302 	orr.w	r3, r3, #2
 800405e:	6013      	str	r3, [r2, #0]
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	e000e010 	.word	0xe000e010

08004070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800408c:	4013      	ands	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800409c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040a2:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <__NVIC_SetPriorityGrouping+0x44>)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	60d3      	str	r3, [r2, #12]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000ed00 	.word	0xe000ed00

080040b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <__NVIC_GetPriorityGrouping+0x18>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	f003 0307 	and.w	r3, r3, #7
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	db0b      	blt.n	80040fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	f003 021f 	and.w	r2, r3, #31
 80040ec:	4907      	ldr	r1, [pc, #28]	; (800410c <__NVIC_EnableIRQ+0x38>)
 80040ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	2001      	movs	r0, #1
 80040f6:	fa00 f202 	lsl.w	r2, r0, r2
 80040fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	e000e100 	.word	0xe000e100

08004110 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411e:	2b00      	cmp	r3, #0
 8004120:	db12      	blt.n	8004148 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	f003 021f 	and.w	r2, r3, #31
 8004128:	490a      	ldr	r1, [pc, #40]	; (8004154 <__NVIC_DisableIRQ+0x44>)
 800412a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	2001      	movs	r0, #1
 8004132:	fa00 f202 	lsl.w	r2, r0, r2
 8004136:	3320      	adds	r3, #32
 8004138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800413c:	f3bf 8f4f 	dsb	sy
}
 8004140:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004142:	f3bf 8f6f 	isb	sy
}
 8004146:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	e000e100 	.word	0xe000e100

08004158 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	2b00      	cmp	r3, #0
 8004168:	db0c      	blt.n	8004184 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	f003 021f 	and.w	r2, r3, #31
 8004170:	4907      	ldr	r1, [pc, #28]	; (8004190 <__NVIC_SetPendingIRQ+0x38>)
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	2001      	movs	r0, #1
 800417a:	fa00 f202 	lsl.w	r2, r0, r2
 800417e:	3340      	adds	r3, #64	; 0x40
 8004180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000e100 	.word	0xe000e100

08004194 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db0c      	blt.n	80041c0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	f003 021f 	and.w	r2, r3, #31
 80041ac:	4907      	ldr	r1, [pc, #28]	; (80041cc <__NVIC_ClearPendingIRQ+0x38>)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2001      	movs	r0, #1
 80041b6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ba:	3360      	adds	r3, #96	; 0x60
 80041bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	e000e100 	.word	0xe000e100

080041d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	6039      	str	r1, [r7, #0]
 80041da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	db0a      	blt.n	80041fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	490c      	ldr	r1, [pc, #48]	; (800421c <__NVIC_SetPriority+0x4c>)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	0112      	lsls	r2, r2, #4
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	440b      	add	r3, r1
 80041f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f8:	e00a      	b.n	8004210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4908      	ldr	r1, [pc, #32]	; (8004220 <__NVIC_SetPriority+0x50>)
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	3b04      	subs	r3, #4
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	440b      	add	r3, r1
 800420e:	761a      	strb	r2, [r3, #24]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000e100 	.word	0xe000e100
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f1c3 0307 	rsb	r3, r3, #7
 800423e:	2b04      	cmp	r3, #4
 8004240:	bf28      	it	cs
 8004242:	2304      	movcs	r3, #4
 8004244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3304      	adds	r3, #4
 800424a:	2b06      	cmp	r3, #6
 800424c:	d902      	bls.n	8004254 <NVIC_EncodePriority+0x30>
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3b03      	subs	r3, #3
 8004252:	e000      	b.n	8004256 <NVIC_EncodePriority+0x32>
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004258:	f04f 32ff 	mov.w	r2, #4294967295
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	401a      	ands	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800426c:	f04f 31ff 	mov.w	r1, #4294967295
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	43d9      	mvns	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	4313      	orrs	r3, r2
         );
}
 800427e:	4618      	mov	r0, r3
 8004280:	3724      	adds	r7, #36	; 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004290:	f3bf 8f4f 	dsb	sy
}
 8004294:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004296:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <__NVIC_SystemReset+0x24>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800429e:	4904      	ldr	r1, [pc, #16]	; (80042b0 <__NVIC_SystemReset+0x24>)
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <__NVIC_SystemReset+0x28>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80042a6:	f3bf 8f4f 	dsb	sy
}
 80042aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80042ac:	bf00      	nop
 80042ae:	e7fd      	b.n	80042ac <__NVIC_SystemReset+0x20>
 80042b0:	e000ed00 	.word	0xe000ed00
 80042b4:	05fa0004 	.word	0x05fa0004

080042b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c8:	d301      	bcc.n	80042ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ca:	2301      	movs	r3, #1
 80042cc:	e00f      	b.n	80042ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ce:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <SysTick_Config+0x40>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042d6:	210f      	movs	r1, #15
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295
 80042dc:	f7ff ff78 	bl	80041d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <SysTick_Config+0x40>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042e6:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <SysTick_Config+0x40>)
 80042e8:	2207      	movs	r2, #7
 80042ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	e000e010 	.word	0xe000e010

080042fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff feb3 	bl	8004070 <__NVIC_SetPriorityGrouping>
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b086      	sub	sp, #24
 8004316:	af00      	add	r7, sp, #0
 8004318:	4603      	mov	r3, r0
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004320:	f7ff feca 	bl	80040b8 <__NVIC_GetPriorityGrouping>
 8004324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	6978      	ldr	r0, [r7, #20]
 800432c:	f7ff ff7a 	bl	8004224 <NVIC_EncodePriority>
 8004330:	4602      	mov	r2, r0
 8004332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff49 	bl	80041d0 <__NVIC_SetPriority>
}
 800433e:	bf00      	nop
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	4603      	mov	r3, r0
 800434e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff febd 	bl	80040d4 <__NVIC_EnableIRQ>
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	4603      	mov	r3, r0
 800436a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800436c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fecd 	bl	8004110 <__NVIC_DisableIRQ>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004382:	f7ff ff83 	bl	800428c <__NVIC_SystemReset>

08004386 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ff92 	bl	80042b8 <SysTick_Config>
 8004394:	4603      	mov	r3, r0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	4603      	mov	r3, r0
 80043a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80043a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fed3 	bl	8004158 <__NVIC_SetPendingIRQ>
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	4603      	mov	r3, r0
 80043c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80043c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fee3 	bl	8004194 <__NVIC_ClearPendingIRQ>
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e04f      	b.n	8004488 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d008      	beq.n	8004406 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2204      	movs	r2, #4
 80043f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e040      	b.n	8004488 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 020e 	bic.w	r2, r2, #14
 8004414:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004424:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443a:	f003 021c 	and.w	r2, r3, #28
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2101      	movs	r1, #1
 8004444:	fa01 f202 	lsl.w	r2, r1, r2
 8004448:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004452:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00c      	beq.n	8004476 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800446a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004474:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d005      	beq.n	80044b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2204      	movs	r2, #4
 80044b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
 80044b6:	e047      	b.n	8004548 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 020e 	bic.w	r2, r2, #14
 80044c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ec:	f003 021c 	and.w	r2, r3, #28
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f202 	lsl.w	r2, r1, r2
 80044fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004504:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00c      	beq.n	8004528 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004526:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3
    }
  }
  return status;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	f003 031c 	and.w	r3, r3, #28
 8004572:	2204      	movs	r2, #4
 8004574:	409a      	lsls	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d026      	beq.n	80045cc <HAL_DMA_IRQHandler+0x7a>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d021      	beq.n	80045cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d107      	bne.n	80045a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0204 	bic.w	r2, r2, #4
 80045a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	f003 021c 	and.w	r2, r3, #28
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2104      	movs	r1, #4
 80045b4:	fa01 f202 	lsl.w	r2, r1, r2
 80045b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d071      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045ca:	e06c      	b.n	80046a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	f003 031c 	and.w	r3, r3, #28
 80045d4:	2202      	movs	r2, #2
 80045d6:	409a      	lsls	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02e      	beq.n	800463e <HAL_DMA_IRQHandler+0xec>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d029      	beq.n	800463e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10b      	bne.n	8004610 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 020a 	bic.w	r2, r2, #10
 8004606:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004614:	f003 021c 	and.w	r2, r3, #28
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	2102      	movs	r1, #2
 800461e:	fa01 f202 	lsl.w	r2, r1, r2
 8004622:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d038      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800463c:	e033      	b.n	80046a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	f003 031c 	and.w	r3, r3, #28
 8004646:	2208      	movs	r2, #8
 8004648:	409a      	lsls	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d02a      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x156>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d025      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 020e 	bic.w	r2, r2, #14
 800466a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004670:	f003 021c 	and.w	r2, r3, #28
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	2101      	movs	r1, #1
 800467a:	fa01 f202 	lsl.w	r2, r1, r2
 800467e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046a6:	bf00      	nop
 80046a8:	bf00      	nop
}
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ba:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80046bc:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <HAL_FLASH_IRQHandler+0x114>)
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80046c4:	4013      	ands	r3, r2
 80046c6:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 80046c8:	4b3e      	ldr	r3, [pc, #248]	; (80047c4 <HAL_FLASH_IRQHandler+0x114>)
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	493c      	ldr	r1, [pc, #240]	; (80047c4 <HAL_FLASH_IRQHandler+0x114>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 80046d8:	4b3b      	ldr	r3, [pc, #236]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <HAL_FLASH_IRQHandler+0x11c>)
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 80046e4:	4b38      	ldr	r3, [pc, #224]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	e008      	b.n	80046fe <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 80046ec:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 80046f8:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d022      	beq.n	800474a <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004704:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	4313      	orrs	r3, r2
 800470c:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 800470e:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <HAL_FLASH_IRQHandler+0x7a>
 800471a:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <HAL_FLASH_IRQHandler+0x114>)
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004724:	4927      	ldr	r1, [pc, #156]	; (80047c4 <HAL_FLASH_IRQHandler+0x114>)
 8004726:	4313      	orrs	r3, r2
 8004728:	618b      	str	r3, [r1, #24]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <HAL_FLASH_IRQHandler+0x8e>
 8004734:	4a23      	ldr	r2, [pc, #140]	; (80047c4 <HAL_FLASH_IRQHandler+0x114>)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800473c:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 8004740:	2200      	movs	r2, #0
 8004742:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f84d 	bl	80047e4 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800474a:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <HAL_FLASH_IRQHandler+0x114>)
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d124      	bne.n	80047a0 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004756:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <HAL_FLASH_IRQHandler+0x114>)
 8004758:	2201      	movs	r2, #1
 800475a:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800475c:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d117      	bne.n	8004794 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004764:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	3b01      	subs	r3, #1
 800476a:	4a17      	ldr	r2, [pc, #92]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 800476c:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 800476e:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 8004776:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	3301      	adds	r3, #1
 800477c:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 800477e:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f837 	bl	80047f8 <FLASH_PageErase>
 800478a:	e006      	b.n	800479a <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800478c:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
 8004792:	e002      	b.n	800479a <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 8004796:	2200      	movs	r2, #0
 8004798:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f818 	bl	80047d0 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d108      	bne.n	80047ba <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_FLASH_IRQHandler+0x114>)
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	4a05      	ldr	r2, [pc, #20]	; (80047c4 <HAL_FLASH_IRQHandler+0x114>)
 80047ae:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80047b2:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80047b4:	4b04      	ldr	r3, [pc, #16]	; (80047c8 <HAL_FLASH_IRQHandler+0x118>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
  }
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	58004000 	.word	0x58004000
 80047c8:	200005b0 	.word	0x200005b0
 80047cc:	00040001 	.word	0x00040001

080047d0 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004800:	4b09      	ldr	r3, [pc, #36]	; (8004828 <FLASH_PageErase+0x30>)
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4313      	orrs	r3, r2
 800480e:	4a06      	ldr	r2, [pc, #24]	; (8004828 <FLASH_PageErase+0x30>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004814:	f043 0302 	orr.w	r3, r3, #2
 8004818:	6153      	str	r3, [r2, #20]
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	58004000 	.word	0x58004000

0800482c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800483a:	e14c      	b.n	8004ad6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	2101      	movs	r1, #1
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	4013      	ands	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 813e 	beq.w	8004ad0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d005      	beq.n	800486c <HAL_GPIO_Init+0x40>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d130      	bne.n	80048ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	2203      	movs	r2, #3
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4013      	ands	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048a2:	2201      	movs	r2, #1
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4013      	ands	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	091b      	lsrs	r3, r3, #4
 80048b8:	f003 0201 	and.w	r2, r3, #1
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d017      	beq.n	800490a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	2203      	movs	r2, #3
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4013      	ands	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d123      	bne.n	800495e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	08da      	lsrs	r2, r3, #3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3208      	adds	r2, #8
 800491e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	220f      	movs	r2, #15
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4013      	ands	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	08da      	lsrs	r2, r3, #3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3208      	adds	r2, #8
 8004958:	6939      	ldr	r1, [r7, #16]
 800495a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	2203      	movs	r2, #3
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0203 	and.w	r2, r3, #3
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8098 	beq.w	8004ad0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80049a0:	4a54      	ldr	r2, [pc, #336]	; (8004af4 <HAL_GPIO_Init+0x2c8>)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	089b      	lsrs	r3, r3, #2
 80049a6:	3302      	adds	r3, #2
 80049a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	220f      	movs	r2, #15
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4013      	ands	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049ca:	d019      	beq.n	8004a00 <HAL_GPIO_Init+0x1d4>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a4a      	ldr	r2, [pc, #296]	; (8004af8 <HAL_GPIO_Init+0x2cc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <HAL_GPIO_Init+0x1d0>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a49      	ldr	r2, [pc, #292]	; (8004afc <HAL_GPIO_Init+0x2d0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00d      	beq.n	80049f8 <HAL_GPIO_Init+0x1cc>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a48      	ldr	r2, [pc, #288]	; (8004b00 <HAL_GPIO_Init+0x2d4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d007      	beq.n	80049f4 <HAL_GPIO_Init+0x1c8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a47      	ldr	r2, [pc, #284]	; (8004b04 <HAL_GPIO_Init+0x2d8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d101      	bne.n	80049f0 <HAL_GPIO_Init+0x1c4>
 80049ec:	2304      	movs	r3, #4
 80049ee:	e008      	b.n	8004a02 <HAL_GPIO_Init+0x1d6>
 80049f0:	2307      	movs	r3, #7
 80049f2:	e006      	b.n	8004a02 <HAL_GPIO_Init+0x1d6>
 80049f4:	2303      	movs	r3, #3
 80049f6:	e004      	b.n	8004a02 <HAL_GPIO_Init+0x1d6>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e002      	b.n	8004a02 <HAL_GPIO_Init+0x1d6>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <HAL_GPIO_Init+0x1d6>
 8004a00:	2300      	movs	r3, #0
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	f002 0203 	and.w	r2, r2, #3
 8004a08:	0092      	lsls	r2, r2, #2
 8004a0a:	4093      	lsls	r3, r2
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a12:	4938      	ldr	r1, [pc, #224]	; (8004af4 <HAL_GPIO_Init+0x2c8>)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	089b      	lsrs	r3, r3, #2
 8004a18:	3302      	adds	r3, #2
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a20:	4b39      	ldr	r3, [pc, #228]	; (8004b08 <HAL_GPIO_Init+0x2dc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a44:	4a30      	ldr	r2, [pc, #192]	; (8004b08 <HAL_GPIO_Init+0x2dc>)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a4a:	4b2f      	ldr	r3, [pc, #188]	; (8004b08 <HAL_GPIO_Init+0x2dc>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a6e:	4a26      	ldr	r2, [pc, #152]	; (8004b08 <HAL_GPIO_Init+0x2dc>)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a74:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <HAL_GPIO_Init+0x2dc>)
 8004a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4013      	ands	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a9a:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <HAL_GPIO_Init+0x2dc>)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004aa2:	4b19      	ldr	r3, [pc, #100]	; (8004b08 <HAL_GPIO_Init+0x2dc>)
 8004aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ac8:	4a0f      	ldr	r2, [pc, #60]	; (8004b08 <HAL_GPIO_Init+0x2dc>)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f47f aeab 	bne.w	800483c <HAL_GPIO_Init+0x10>
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40010000 	.word	0x40010000
 8004af8:	48000400 	.word	0x48000400
 8004afc:	48000800 	.word	0x48000800
 8004b00:	48000c00 	.word	0x48000c00
 8004b04:	48001000 	.word	0x48001000
 8004b08:	58000800 	.word	0x58000800

08004b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	807b      	strh	r3, [r7, #2]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b1c:	787b      	ldrb	r3, [r7, #1]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b22:	887a      	ldrh	r2, [r7, #2]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b28:	e002      	b.n	8004b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b2a:	887a      	ldrh	r2, [r7, #2]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b4e:	887a      	ldrh	r2, [r7, #2]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4013      	ands	r3, r2
 8004b54:	041a      	lsls	r2, r3, #16
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	43d9      	mvns	r1, r3
 8004b5a:	887b      	ldrh	r3, [r7, #2]
 8004b5c:	400b      	ands	r3, r1
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	619a      	str	r2, [r3, #24]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d006      	beq.n	8004b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b86:	4a05      	ldr	r2, [pc, #20]	; (8004b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd fc9e 	bl	80024d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	58000800 	.word	0x58000800

08004ba0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <HAL_HSEM_IRQHandler+0x30>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_HSEM_IRQHandler+0x30>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	4906      	ldr	r1, [pc, #24]	; (8004bd0 <HAL_HSEM_IRQHandler+0x30>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004bba:	4a05      	ldr	r2, [pc, #20]	; (8004bd0 <HAL_HSEM_IRQHandler+0x30>)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f807 	bl	8004bd4 <HAL_HSEM_FreeCallback>
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	58001500 	.word	0x58001500

08004bd4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e081      	b.n	8004cfe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f879 	bl	8004d06 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2224      	movs	r2, #36	; 0x24
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d107      	bne.n	8004c62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	e006      	b.n	8004c70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d104      	bne.n	8004c82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69d9      	ldr	r1, [r3, #28]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1a      	ldr	r2, [r3, #32]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	461a      	mov	r2, r3
 8004d28:	460b      	mov	r3, r1
 8004d2a:	817b      	strh	r3, [r7, #10]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	f040 80da 	bne.w	8004ef2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_I2C_Master_Transmit+0x30>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e0d3      	b.n	8004ef4 <HAL_I2C_Master_Transmit+0x1d8>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d54:	f7ff f948 	bl	8003fe8 <HAL_GetTick>
 8004d58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2319      	movs	r3, #25
 8004d60:	2201      	movs	r2, #1
 8004d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f9e6 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0be      	b.n	8004ef4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2221      	movs	r2, #33	; 0x21
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2210      	movs	r2, #16
 8004d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	893a      	ldrh	r2, [r7, #8]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2bff      	cmp	r3, #255	; 0xff
 8004da6:	d90e      	bls.n	8004dc6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	22ff      	movs	r2, #255	; 0xff
 8004dac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	8979      	ldrh	r1, [r7, #10]
 8004db6:	4b51      	ldr	r3, [pc, #324]	; (8004efc <HAL_I2C_Master_Transmit+0x1e0>)
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fbdc 	bl	800557c <I2C_TransferConfig>
 8004dc4:	e06c      	b.n	8004ea0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	8979      	ldrh	r1, [r7, #10]
 8004dd8:	4b48      	ldr	r3, [pc, #288]	; (8004efc <HAL_I2C_Master_Transmit+0x1e0>)
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 fbcb 	bl	800557c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004de6:	e05b      	b.n	8004ea0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	6a39      	ldr	r1, [r7, #32]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f9e3 	bl	80051b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e07b      	b.n	8004ef4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d034      	beq.n	8004ea0 <HAL_I2C_Master_Transmit+0x184>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d130      	bne.n	8004ea0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f975 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e04d      	b.n	8004ef4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2bff      	cmp	r3, #255	; 0xff
 8004e60:	d90e      	bls.n	8004e80 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	22ff      	movs	r2, #255	; 0xff
 8004e66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	8979      	ldrh	r1, [r7, #10]
 8004e70:	2300      	movs	r3, #0
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fb7f 	bl	800557c <I2C_TransferConfig>
 8004e7e:	e00f      	b.n	8004ea0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	8979      	ldrh	r1, [r7, #10]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fb6e 	bl	800557c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d19e      	bne.n	8004de8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	6a39      	ldr	r1, [r7, #32]
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f9c2 	bl	8005238 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e01a      	b.n	8004ef4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_I2C_Master_Transmit+0x1e4>)
 8004ed2:	400b      	ands	r3, r1
 8004ed4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	80002000 	.word	0x80002000
 8004f00:	fe00e800 	.word	0xfe00e800

08004f04 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	607a      	str	r2, [r7, #4]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	460b      	mov	r3, r1
 8004f12:	817b      	strh	r3, [r7, #10]
 8004f14:	4613      	mov	r3, r2
 8004f16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	f040 80db 	bne.w	80050dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_I2C_Master_Receive+0x30>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e0d4      	b.n	80050de <HAL_I2C_Master_Receive+0x1da>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f3c:	f7ff f854 	bl	8003fe8 <HAL_GetTick>
 8004f40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2319      	movs	r3, #25
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f8f2 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e0bf      	b.n	80050de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2222      	movs	r2, #34	; 0x22
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2210      	movs	r2, #16
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	893a      	ldrh	r2, [r7, #8]
 8004f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2bff      	cmp	r3, #255	; 0xff
 8004f8e:	d90e      	bls.n	8004fae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	22ff      	movs	r2, #255	; 0xff
 8004f94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	8979      	ldrh	r1, [r7, #10]
 8004f9e:	4b52      	ldr	r3, [pc, #328]	; (80050e8 <HAL_I2C_Master_Receive+0x1e4>)
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fae8 	bl	800557c <I2C_TransferConfig>
 8004fac:	e06d      	b.n	800508a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	8979      	ldrh	r1, [r7, #10]
 8004fc0:	4b49      	ldr	r3, [pc, #292]	; (80050e8 <HAL_I2C_Master_Receive+0x1e4>)
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fad7 	bl	800557c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004fce:	e05c      	b.n	800508a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	6a39      	ldr	r1, [r7, #32]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f96b 	bl	80052b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e07c      	b.n	80050de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d034      	beq.n	800508a <HAL_I2C_Master_Receive+0x186>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005024:	2b00      	cmp	r3, #0
 8005026:	d130      	bne.n	800508a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	2200      	movs	r2, #0
 8005030:	2180      	movs	r1, #128	; 0x80
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f880 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e04d      	b.n	80050de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	2bff      	cmp	r3, #255	; 0xff
 800504a:	d90e      	bls.n	800506a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	22ff      	movs	r2, #255	; 0xff
 8005050:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005056:	b2da      	uxtb	r2, r3
 8005058:	8979      	ldrh	r1, [r7, #10]
 800505a:	2300      	movs	r3, #0
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fa8a 	bl	800557c <I2C_TransferConfig>
 8005068:	e00f      	b.n	800508a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	b2da      	uxtb	r2, r3
 800507a:	8979      	ldrh	r1, [r7, #10]
 800507c:	2300      	movs	r3, #0
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fa79 	bl	800557c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d19d      	bne.n	8004fd0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	6a39      	ldr	r1, [r7, #32]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f8cd 	bl	8005238 <I2C_WaitOnSTOPFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e01a      	b.n	80050de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2220      	movs	r2, #32
 80050ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <HAL_I2C_Master_Receive+0x1e8>)
 80050bc:	400b      	ands	r3, r1
 80050be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e000      	b.n	80050de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	80002400 	.word	0x80002400
 80050ec:	fe00e800 	.word	0xfe00e800

080050f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b02      	cmp	r3, #2
 8005104:	d103      	bne.n	800510e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	d007      	beq.n	800512c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	619a      	str	r2, [r3, #24]
  }
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005148:	e022      	b.n	8005190 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d01e      	beq.n	8005190 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005152:	f7fe ff49 	bl	8003fe8 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d113      	bne.n	8005190 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e00f      	b.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4013      	ands	r3, r2
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	bf0c      	ite	eq
 80051a0:	2301      	moveq	r3, #1
 80051a2:	2300      	movne	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d0cd      	beq.n	800514a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051c4:	e02c      	b.n	8005220 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	68b9      	ldr	r1, [r7, #8]
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 f8ea 	bl	80053a4 <I2C_IsErrorOccurred>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e02a      	b.n	8005230 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d01e      	beq.n	8005220 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fe ff01 	bl	8003fe8 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d113      	bne.n	8005220 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fc:	f043 0220 	orr.w	r2, r3, #32
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e007      	b.n	8005230 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d1cb      	bne.n	80051c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005244:	e028      	b.n	8005298 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f8aa 	bl	80053a4 <I2C_IsErrorOccurred>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e026      	b.n	80052a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525a:	f7fe fec5 	bl	8003fe8 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	429a      	cmp	r2, r3
 8005268:	d302      	bcc.n	8005270 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d113      	bne.n	8005298 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e007      	b.n	80052a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d1cf      	bne.n	8005246 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052bc:	e064      	b.n	8005388 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f86e 	bl	80053a4 <I2C_IsErrorOccurred>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e062      	b.n	8005398 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d138      	bne.n	8005352 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d105      	bne.n	80052fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e04e      	b.n	8005398 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b10      	cmp	r3, #16
 8005306:	d107      	bne.n	8005318 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2210      	movs	r2, #16
 800530e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2204      	movs	r2, #4
 8005314:	645a      	str	r2, [r3, #68]	; 0x44
 8005316:	e002      	b.n	800531e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2220      	movs	r2, #32
 8005324:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6859      	ldr	r1, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005332:	400b      	ands	r3, r1
 8005334:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e022      	b.n	8005398 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005352:	f7fe fe49 	bl	8003fe8 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	d302      	bcc.n	8005368 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10f      	bne.n	8005388 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536c:	f043 0220 	orr.w	r2, r3, #32
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e007      	b.n	8005398 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b04      	cmp	r3, #4
 8005394:	d193      	bne.n	80052be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	fe00e800 	.word	0xfe00e800

080053a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d075      	beq.n	80054bc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2210      	movs	r2, #16
 80053d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053d8:	e056      	b.n	8005488 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d052      	beq.n	8005488 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053e2:	f7fe fe01 	bl	8003fe8 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d302      	bcc.n	80053f8 <I2C_IsErrorOccurred+0x54>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d147      	bne.n	8005488 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005402:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800540a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541a:	d12e      	bne.n	800547a <I2C_IsErrorOccurred+0xd6>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005422:	d02a      	beq.n	800547a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005424:	7cfb      	ldrb	r3, [r7, #19]
 8005426:	2b20      	cmp	r3, #32
 8005428:	d027      	beq.n	800547a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005438:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800543a:	f7fe fdd5 	bl	8003fe8 <HAL_GetTick>
 800543e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005440:	e01b      	b.n	800547a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005442:	f7fe fdd1 	bl	8003fe8 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b19      	cmp	r3, #25
 800544e:	d914      	bls.n	800547a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005454:	f043 0220 	orr.w	r2, r3, #32
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b20      	cmp	r3, #32
 8005486:	d1dc      	bne.n	8005442 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b20      	cmp	r3, #32
 8005494:	d003      	beq.n	800549e <I2C_IsErrorOccurred+0xfa>
 8005496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800549a:	2b00      	cmp	r3, #0
 800549c:	d09d      	beq.n	80053da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800549e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d103      	bne.n	80054ae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2220      	movs	r2, #32
 80054ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	f043 0304 	orr.w	r3, r3, #4
 80054b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	f043 0308 	orr.w	r3, r3, #8
 80054f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005500:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	f043 0302 	orr.w	r3, r3, #2
 8005518:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005522:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800552a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01c      	beq.n	800556c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7ff fddc 	bl	80050f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6859      	ldr	r1, [r3, #4]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <I2C_IsErrorOccurred+0x1d4>)
 8005544:	400b      	ands	r3, r1
 8005546:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	431a      	orrs	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800556c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005570:	4618      	mov	r0, r3
 8005572:	3728      	adds	r7, #40	; 0x28
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	fe00e800 	.word	0xfe00e800

0800557c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	607b      	str	r3, [r7, #4]
 8005586:	460b      	mov	r3, r1
 8005588:	817b      	strh	r3, [r7, #10]
 800558a:	4613      	mov	r3, r2
 800558c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800558e:	897b      	ldrh	r3, [r7, #10]
 8005590:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005594:	7a7b      	ldrb	r3, [r7, #9]
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800559c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	0d5b      	lsrs	r3, r3, #21
 80055b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055ba:	4b08      	ldr	r3, [pc, #32]	; (80055dc <I2C_TransferConfig+0x60>)
 80055bc:	430b      	orrs	r3, r1
 80055be:	43db      	mvns	r3, r3
 80055c0:	ea02 0103 	and.w	r1, r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	03ff63ff 	.word	0x03ff63ff

080055e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d138      	bne.n	8005668 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005600:	2302      	movs	r3, #2
 8005602:	e032      	b.n	800566a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2224      	movs	r2, #36	; 0x24
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0201 	bic.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005632:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6819      	ldr	r1, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b20      	cmp	r3, #32
 800568a:	d139      	bne.n	8005700 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005696:	2302      	movs	r3, #2
 8005698:	e033      	b.n	8005702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2224      	movs	r2, #36	; 0x24
 80056a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e000      	b.n	8005702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005700:	2302      	movs	r3, #2
  }
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
	...

08005710 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4904      	ldr	r1, [pc, #16]	; (8005730 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4313      	orrs	r3, r2
 8005722:	604b      	str	r3, [r1, #4]
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40010000 	.word	0x40010000

08005734 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01e      	beq.n	8005784 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005746:	4b13      	ldr	r3, [pc, #76]	; (8005794 <HAL_IPCC_Init+0x60>)
 8005748:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fe fa6c 	bl	8003c34 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800575c:	68b8      	ldr	r0, [r7, #8]
 800575e:	f000 f85b 	bl	8005818 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f82c 	bl	80057cc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005782:	e001      	b.n	8005788 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	58000c00 	.word	0x58000c00

08005798 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	4613      	mov	r3, r2
 80057be:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e00f      	b.n	80057fa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	4a0b      	ldr	r2, [pc, #44]	; (8005810 <IPCC_SetDefaultCallbacks+0x44>)
 80057e4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3306      	adds	r3, #6
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	4a08      	ldr	r2, [pc, #32]	; (8005814 <IPCC_SetDefaultCallbacks+0x48>)
 80057f2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b05      	cmp	r3, #5
 80057fe:	d9ec      	bls.n	80057da <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	08005799 	.word	0x08005799
 8005814:	080057b3 	.word	0x080057b3

08005818 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800582c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	223f      	movs	r2, #63	; 0x3f
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a04      	ldr	r2, [pc, #16]	; (800585c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800584a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584e:	6013      	str	r3, [r2, #0]
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	58000400 	.word	0x58000400

08005860 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8005878:	4b04      	ldr	r3, [pc, #16]	; (800588c <LL_EXTI_ReadFlag_0_31+0x1c>)
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4013      	ands	r3, r2
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	58000800 	.word	0x58000800

08005890 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <LL_EXTI_ReadFlag_32_63+0x1c>)
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4013      	ands	r3, r2
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	58000800 	.word	0x58000800

080058b0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80058b8:	4a04      	ldr	r2, [pc, #16]	; (80058cc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60d3      	str	r3, [r2, #12]
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	58000800 	.word	0x58000800

080058d0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80058d8:	4a04      	ldr	r2, [pc, #16]	; (80058ec <LL_EXTI_ClearFlag_32_63+0x1c>)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	58000800 	.word	0x58000800

080058f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80058f4:	4b04      	ldr	r3, [pc, #16]	; (8005908 <HAL_PWREx_GetVoltageRange+0x18>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	58000400 	.word	0x58000400

0800590c <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8005910:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005914:	f7ff ffac 	bl	8005870 <LL_EXTI_ReadFlag_0_31>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800591e:	f7ff ff9f 	bl	8005860 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005922:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005926:	f7ff ffc3 	bl	80058b0 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if (__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 800592a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800592e:	f7ff ff9f 	bl	8005870 <LL_EXTI_ReadFlag_0_31>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8005938:	f000 f811 	bl	800595e <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800593c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005940:	f7ff ffb6 	bl	80058b0 <LL_EXTI_ClearFlag_0_31>
  }
#endif /* PWR_CR2_PVME1 */

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 8005944:	2002      	movs	r0, #2
 8005946:	f7ff ffa3 	bl	8005890 <LL_EXTI_ReadFlag_32_63>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d004      	beq.n	800595a <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8005950:	f000 f80c 	bl	800596c <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8005954:	2002      	movs	r0, #2
 8005956:	f7ff ffbb 	bl	80058d0 <LL_EXTI_ClearFlag_32_63>
  }
}
 800595a:	bf00      	nop
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800595e:	b480      	push	{r7}
 8005960:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8005962:	bf00      	nop
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <LL_RCC_HSE_IsEnabledDiv2>:
{
 800597a:	b480      	push	{r7}
 800597c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800597e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598c:	d101      	bne.n	8005992 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <LL_RCC_HSE_Enable>:
{
 800599e:	b480      	push	{r7}
 80059a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80059a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b0:	6013      	str	r3, [r2, #0]
}
 80059b2:	bf00      	nop
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <LL_RCC_HSE_Disable>:
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80059c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ce:	6013      	str	r3, [r2, #0]
}
 80059d0:	bf00      	nop
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <LL_RCC_HSE_IsReady>:
{
 80059da:	b480      	push	{r7}
 80059dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80059de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ec:	d101      	bne.n	80059f2 <LL_RCC_HSE_IsReady+0x18>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <LL_RCC_HSE_IsReady+0x1a>
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <LL_RCC_HSI_Enable>:
{
 80059fe:	b480      	push	{r7}
 8005a00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a10:	6013      	str	r3, [r2, #0]
}
 8005a12:	bf00      	nop
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <LL_RCC_HSI_Disable>:
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a2e:	6013      	str	r3, [r2, #0]
}
 8005a30:	bf00      	nop
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <LL_RCC_HSI_IsReady>:
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4c:	d101      	bne.n	8005a52 <LL_RCC_HSI_IsReady+0x18>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <LL_RCC_HSI_IsReady+0x1a>
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <LL_RCC_HSI_SetCalibTrimming>:
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	061b      	lsls	r3, r3, #24
 8005a74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	604b      	str	r3, [r1, #4]
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <LL_RCC_HSI48_Enable>:
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005aa0:	bf00      	nop
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <LL_RCC_HSI48_Disable>:
{
 8005aaa:	b480      	push	{r7}
 8005aac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005ac2:	bf00      	nop
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <LL_RCC_HSI48_IsReady>:
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d101      	bne.n	8005ae4 <LL_RCC_HSI48_IsReady+0x18>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <LL_RCC_HSI48_IsReady+0x1a>
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <LL_RCC_LSE_Enable>:
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b08:	bf00      	nop
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <LL_RCC_LSE_Disable>:
{
 8005b12:	b480      	push	{r7}
 8005b14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b22:	f023 0301 	bic.w	r3, r3, #1
 8005b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b2a:	bf00      	nop
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <LL_RCC_LSE_EnableBypass>:
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b44:	f043 0304 	orr.w	r3, r3, #4
 8005b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b4c:	bf00      	nop
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <LL_RCC_LSE_DisableBypass>:
{
 8005b56:	b480      	push	{r7}
 8005b58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b66:	f023 0304 	bic.w	r3, r3, #4
 8005b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b6e:	bf00      	nop
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <LL_RCC_LSE_IsReady>:
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d101      	bne.n	8005b90 <LL_RCC_LSE_IsReady+0x18>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <LL_RCC_LSE_IsReady+0x1a>
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <LL_RCC_LSI1_Enable>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bac:	f043 0301 	orr.w	r3, r3, #1
 8005bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <LL_RCC_LSI1_Disable>:
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bce:	f023 0301 	bic.w	r3, r3, #1
 8005bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005bd6:	bf00      	nop
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <LL_RCC_LSI1_IsReady>:
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d101      	bne.n	8005bf8 <LL_RCC_LSI1_IsReady+0x18>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <LL_RCC_LSI1_IsReady+0x1a>
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <LL_RCC_LSI2_Enable>:
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c14:	f043 0304 	orr.w	r3, r3, #4
 8005c18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c1c:	bf00      	nop
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <LL_RCC_LSI2_Disable>:
{
 8005c26:	b480      	push	{r7}
 8005c28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c36:	f023 0304 	bic.w	r3, r3, #4
 8005c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c3e:	bf00      	nop
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <LL_RCC_LSI2_IsReady>:
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d101      	bne.n	8005c60 <LL_RCC_LSI2_IsReady+0x18>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <LL_RCC_LSI2_IsReady+0x1a>
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <LL_RCC_LSI2_SetTrimming>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c7c:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <LL_RCC_MSI_Enable>:
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	6013      	str	r3, [r2, #0]
}
 8005cae:	bf00      	nop
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <LL_RCC_MSI_Disable>:
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	6013      	str	r3, [r2, #0]
}
 8005ccc:	bf00      	nop
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <LL_RCC_MSI_IsReady>:
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d101      	bne.n	8005cec <LL_RCC_MSI_IsReady+0x16>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <LL_RCC_MSI_IsReady+0x18>
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <LL_RCC_MSI_SetRange>:
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	600b      	str	r3, [r1, #0]
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <LL_RCC_MSI_GetRange>:
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d30:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2bb0      	cmp	r3, #176	; 0xb0
 8005d36:	d901      	bls.n	8005d3c <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005d38:	23b0      	movs	r3, #176	; 0xb0
 8005d3a:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005d3c:	687b      	ldr	r3, [r7, #4]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <LL_RCC_MSI_SetCalibTrimming>:
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d64:	4313      	orrs	r3, r2
 8005d66:	604b      	str	r3, [r1, #4]
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <LL_RCC_SetSysClkSource>:
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f023 0203 	bic.w	r2, r3, #3
 8005d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	608b      	str	r3, [r1, #8]
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <LL_RCC_GetSysClkSource>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 030c 	and.w	r3, r3, #12
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <LL_RCC_SetAHBPrescaler>:
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	608b      	str	r3, [r1, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <LL_C2_RCC_SetAHBPrescaler>:
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <LL_RCC_SetAHB4Prescaler>:
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e18:	f023 020f 	bic.w	r2, r3, #15
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	091b      	lsrs	r3, r3, #4
 8005e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <LL_RCC_SetAPB1Prescaler>:
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	608b      	str	r3, [r1, #8]
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <LL_RCC_SetAPB2Prescaler>:
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	608b      	str	r3, [r1, #8]
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <LL_RCC_GetAHBPrescaler>:
{
 8005e86:	b480      	push	{r7}
 8005e88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <LL_RCC_GetAHB4Prescaler>:
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ecc:	6013      	str	r3, [r2, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eea:	6013      	str	r3, [r2, #0]
}
 8005eec:	bf00      	nop
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f08:	d101      	bne.n	8005f0e <LL_RCC_PLL_IsReady+0x18>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <LL_RCC_PLL_IsReady+0x1a>
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	0a1b      	lsrs	r3, r3, #8
 8005f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8e:	d101      	bne.n	8005f94 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb4:	d101      	bne.n	8005fba <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fda:	d101      	bne.n	8005fe0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ffe:	d101      	bne.n	8006004 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800601e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006022:	d101      	bne.n	8006028 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006024:	2301      	movs	r3, #1
 8006026:	e000      	b.n	800602a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006034:	b590      	push	{r4, r7, lr}
 8006036:	b08d      	sub	sp, #52	; 0x34
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e363      	b.n	800670e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 808d 	beq.w	800616e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006054:	f7ff fea2 	bl	8005d9c <LL_RCC_GetSysClkSource>
 8006058:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800605a:	f7ff ff83 	bl	8005f64 <LL_RCC_PLL_GetMainSource>
 800605e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <HAL_RCC_OscConfig+0x3e>
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	2b0c      	cmp	r3, #12
 800606a:	d147      	bne.n	80060fc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	2b01      	cmp	r3, #1
 8006070:	d144      	bne.n	80060fc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e347      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006082:	f7ff fe4d 	bl	8005d20 <LL_RCC_MSI_GetRange>
 8006086:	4603      	mov	r3, r0
 8006088:	429c      	cmp	r4, r3
 800608a:	d914      	bls.n	80060b6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fd03 	bl	8006a9c <RCC_SetFlashLatencyFromMSIRange>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e336      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fe27 	bl	8005cf8 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff fe4b 	bl	8005d4a <LL_RCC_MSI_SetCalibTrimming>
 80060b4:	e013      	b.n	80060de <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fe1c 	bl	8005cf8 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fe40 	bl	8005d4a <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fce4 	bl	8006a9c <RCC_SetFlashLatencyFromMSIRange>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e317      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80060de:	f000 fcc9 	bl	8006a74 <HAL_RCC_GetHCLKFreq>
 80060e2:	4603      	mov	r3, r0
 80060e4:	4aa4      	ldr	r2, [pc, #656]	; (8006378 <HAL_RCC_OscConfig+0x344>)
 80060e6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80060e8:	4ba4      	ldr	r3, [pc, #656]	; (800637c <HAL_RCC_OscConfig+0x348>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fd ff2d 	bl	8003f4c <HAL_InitTick>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d039      	beq.n	800616c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e308      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01e      	beq.n	8006142 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006104:	f7ff fdc9 	bl	8005c9a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006108:	f7fd ff6e 	bl	8003fe8 <HAL_GetTick>
 800610c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006110:	f7fd ff6a 	bl	8003fe8 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e2f5      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006122:	f7ff fdd8 	bl	8005cd6 <LL_RCC_MSI_IsReady>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0f1      	beq.n	8006110 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff fde1 	bl	8005cf8 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fe05 	bl	8005d4a <LL_RCC_MSI_SetCalibTrimming>
 8006140:	e015      	b.n	800616e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006142:	f7ff fdb9 	bl	8005cb8 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006146:	f7fd ff4f 	bl	8003fe8 <HAL_GetTick>
 800614a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800614e:	f7fd ff4b 	bl	8003fe8 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e2d6      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006160:	f7ff fdb9 	bl	8005cd6 <LL_RCC_MSI_IsReady>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f1      	bne.n	800614e <HAL_RCC_OscConfig+0x11a>
 800616a:	e000      	b.n	800616e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800616c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d047      	beq.n	800620a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800617a:	f7ff fe0f 	bl	8005d9c <LL_RCC_GetSysClkSource>
 800617e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006180:	f7ff fef0 	bl	8005f64 <LL_RCC_PLL_GetMainSource>
 8006184:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d005      	beq.n	8006198 <HAL_RCC_OscConfig+0x164>
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	2b0c      	cmp	r3, #12
 8006190:	d108      	bne.n	80061a4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2b03      	cmp	r3, #3
 8006196:	d105      	bne.n	80061a4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d134      	bne.n	800620a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e2b4      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ac:	d102      	bne.n	80061b4 <HAL_RCC_OscConfig+0x180>
 80061ae:	f7ff fbf6 	bl	800599e <LL_RCC_HSE_Enable>
 80061b2:	e001      	b.n	80061b8 <HAL_RCC_OscConfig+0x184>
 80061b4:	f7ff fc02 	bl	80059bc <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d012      	beq.n	80061e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c0:	f7fd ff12 	bl	8003fe8 <HAL_GetTick>
 80061c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80061c6:	e008      	b.n	80061da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061c8:	f7fd ff0e 	bl	8003fe8 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b64      	cmp	r3, #100	; 0x64
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e299      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80061da:	f7ff fbfe 	bl	80059da <LL_RCC_HSE_IsReady>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0f1      	beq.n	80061c8 <HAL_RCC_OscConfig+0x194>
 80061e4:	e011      	b.n	800620a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e6:	f7fd feff 	bl	8003fe8 <HAL_GetTick>
 80061ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061ee:	f7fd fefb 	bl	8003fe8 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b64      	cmp	r3, #100	; 0x64
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e286      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006200:	f7ff fbeb 	bl	80059da <LL_RCC_HSE_IsReady>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f1      	bne.n	80061ee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d04c      	beq.n	80062b0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006216:	f7ff fdc1 	bl	8005d9c <LL_RCC_GetSysClkSource>
 800621a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800621c:	f7ff fea2 	bl	8005f64 <LL_RCC_PLL_GetMainSource>
 8006220:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b04      	cmp	r3, #4
 8006226:	d005      	beq.n	8006234 <HAL_RCC_OscConfig+0x200>
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b0c      	cmp	r3, #12
 800622c:	d10e      	bne.n	800624c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d10b      	bne.n	800624c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e266      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff fc0a 	bl	8005a5e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800624a:	e031      	b.n	80062b0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d019      	beq.n	8006288 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006254:	f7ff fbd3 	bl	80059fe <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006258:	f7fd fec6 	bl	8003fe8 <HAL_GetTick>
 800625c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006260:	f7fd fec2 	bl	8003fe8 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e24d      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006272:	f7ff fbe2 	bl	8005a3a <LL_RCC_HSI_IsReady>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0f1      	beq.n	8006260 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff fbec 	bl	8005a5e <LL_RCC_HSI_SetCalibTrimming>
 8006286:	e013      	b.n	80062b0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006288:	f7ff fbc8 	bl	8005a1c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628c:	f7fd feac 	bl	8003fe8 <HAL_GetTick>
 8006290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006294:	f7fd fea8 	bl	8003fe8 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e233      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80062a6:	f7ff fbc8 	bl	8005a3a <LL_RCC_HSI_IsReady>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1f1      	bne.n	8006294 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80a3 	beq.w	8006410 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d076      	beq.n	80063c0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d046      	beq.n	800636c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80062de:	f7ff fc7f 	bl	8005be0 <LL_RCC_LSI1_IsReady>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d113      	bne.n	8006310 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80062e8:	f7ff fc58 	bl	8005b9c <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062ec:	f7fd fe7c 	bl	8003fe8 <HAL_GetTick>
 80062f0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80062f4:	f7fd fe78 	bl	8003fe8 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e203      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006306:	f7ff fc6b 	bl	8005be0 <LL_RCC_LSI1_IsReady>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f1      	beq.n	80062f4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006310:	f7ff fc78 	bl	8005c04 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006314:	f7fd fe68 	bl	8003fe8 <HAL_GetTick>
 8006318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800631c:	f7fd fe64 	bl	8003fe8 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b03      	cmp	r3, #3
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e1ef      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800632e:	f7ff fc8b 	bl	8005c48 <LL_RCC_LSI2_IsReady>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f1      	beq.n	800631c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fc95 	bl	8005c6c <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006342:	f7ff fc3c 	bl	8005bbe <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006346:	f7fd fe4f 	bl	8003fe8 <HAL_GetTick>
 800634a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800634e:	f7fd fe4b 	bl	8003fe8 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e1d6      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006360:	f7ff fc3e 	bl	8005be0 <LL_RCC_LSI1_IsReady>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1f1      	bne.n	800634e <HAL_RCC_OscConfig+0x31a>
 800636a:	e051      	b.n	8006410 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800636c:	f7ff fc16 	bl	8005b9c <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006370:	f7fd fe3a 	bl	8003fe8 <HAL_GetTick>
 8006374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006376:	e00c      	b.n	8006392 <HAL_RCC_OscConfig+0x35e>
 8006378:	2000002c 	.word	0x2000002c
 800637c:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006380:	f7fd fe32 	bl	8003fe8 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e1bd      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006392:	f7ff fc25 	bl	8005be0 <LL_RCC_LSI1_IsReady>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f1      	beq.n	8006380 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800639c:	f7ff fc43 	bl	8005c26 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80063a2:	f7fd fe21 	bl	8003fe8 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e1ac      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80063b4:	f7ff fc48 	bl	8005c48 <LL_RCC_LSI2_IsReady>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f1      	bne.n	80063a2 <HAL_RCC_OscConfig+0x36e>
 80063be:	e027      	b.n	8006410 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80063c0:	f7ff fc31 	bl	8005c26 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c4:	f7fd fe10 	bl	8003fe8 <HAL_GetTick>
 80063c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80063cc:	f7fd fe0c 	bl	8003fe8 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e197      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80063de:	f7ff fc33 	bl	8005c48 <LL_RCC_LSI2_IsReady>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1f1      	bne.n	80063cc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80063e8:	f7ff fbe9 	bl	8005bbe <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ec:	f7fd fdfc 	bl	8003fe8 <HAL_GetTick>
 80063f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80063f4:	f7fd fdf8 	bl	8003fe8 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e183      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006406:	f7ff fbeb 	bl	8005be0 <LL_RCC_LSI1_IsReady>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1f1      	bne.n	80063f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d05b      	beq.n	80064d4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800641c:	4ba7      	ldr	r3, [pc, #668]	; (80066bc <HAL_RCC_OscConfig+0x688>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006424:	2b00      	cmp	r3, #0
 8006426:	d114      	bne.n	8006452 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006428:	f7ff fa0a 	bl	8005840 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800642c:	f7fd fddc 	bl	8003fe8 <HAL_GetTick>
 8006430:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006434:	f7fd fdd8 	bl	8003fe8 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e163      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006446:	4b9d      	ldr	r3, [pc, #628]	; (80066bc <HAL_RCC_OscConfig+0x688>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0f0      	beq.n	8006434 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d102      	bne.n	8006460 <HAL_RCC_OscConfig+0x42c>
 800645a:	f7ff fb49 	bl	8005af0 <LL_RCC_LSE_Enable>
 800645e:	e00c      	b.n	800647a <HAL_RCC_OscConfig+0x446>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	2b05      	cmp	r3, #5
 8006466:	d104      	bne.n	8006472 <HAL_RCC_OscConfig+0x43e>
 8006468:	f7ff fb64 	bl	8005b34 <LL_RCC_LSE_EnableBypass>
 800646c:	f7ff fb40 	bl	8005af0 <LL_RCC_LSE_Enable>
 8006470:	e003      	b.n	800647a <HAL_RCC_OscConfig+0x446>
 8006472:	f7ff fb4e 	bl	8005b12 <LL_RCC_LSE_Disable>
 8006476:	f7ff fb6e 	bl	8005b56 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d014      	beq.n	80064ac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006482:	f7fd fdb1 	bl	8003fe8 <HAL_GetTick>
 8006486:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006488:	e00a      	b.n	80064a0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800648a:	f7fd fdad 	bl	8003fe8 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	f241 3288 	movw	r2, #5000	; 0x1388
 8006498:	4293      	cmp	r3, r2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e136      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80064a0:	f7ff fb6a 	bl	8005b78 <LL_RCC_LSE_IsReady>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0ef      	beq.n	800648a <HAL_RCC_OscConfig+0x456>
 80064aa:	e013      	b.n	80064d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ac:	f7fd fd9c 	bl	8003fe8 <HAL_GetTick>
 80064b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80064b2:	e00a      	b.n	80064ca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b4:	f7fd fd98 	bl	8003fe8 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e121      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80064ca:	f7ff fb55 	bl	8005b78 <LL_RCC_LSE_IsReady>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1ef      	bne.n	80064b4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d02c      	beq.n	800653a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d014      	beq.n	8006512 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064e8:	f7ff face 	bl	8005a88 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ec:	f7fd fd7c 	bl	8003fe8 <HAL_GetTick>
 80064f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064f4:	f7fd fd78 	bl	8003fe8 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e103      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006506:	f7ff fae1 	bl	8005acc <LL_RCC_HSI48_IsReady>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0f1      	beq.n	80064f4 <HAL_RCC_OscConfig+0x4c0>
 8006510:	e013      	b.n	800653a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006512:	f7ff faca 	bl	8005aaa <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006516:	f7fd fd67 	bl	8003fe8 <HAL_GetTick>
 800651a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800651e:	f7fd fd63 	bl	8003fe8 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e0ee      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006530:	f7ff facc 	bl	8005acc <LL_RCC_HSI48_IsReady>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f1      	bne.n	800651e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 80e4 	beq.w	800670c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006544:	f7ff fc2a 	bl	8005d9c <LL_RCC_GetSysClkSource>
 8006548:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800654a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	2b02      	cmp	r3, #2
 8006558:	f040 80b4 	bne.w	80066c4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f003 0203 	and.w	r2, r3, #3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	429a      	cmp	r2, r3
 8006568:	d123      	bne.n	80065b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006574:	429a      	cmp	r2, r3
 8006576:	d11c      	bne.n	80065b2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	0a1b      	lsrs	r3, r3, #8
 800657c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006584:	429a      	cmp	r2, r3
 8006586:	d114      	bne.n	80065b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006592:	429a      	cmp	r2, r3
 8006594:	d10d      	bne.n	80065b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d106      	bne.n	80065b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d05d      	beq.n	800666e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b0c      	cmp	r3, #12
 80065b6:	d058      	beq.n	800666a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80065b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e0a1      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80065ca:	f7ff fc85 	bl	8005ed8 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065ce:	f7fd fd0b 	bl	8003fe8 <HAL_GetTick>
 80065d2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d6:	f7fd fd07 	bl	8003fe8 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e092      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1ef      	bne.n	80065d6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	4b30      	ldr	r3, [pc, #192]	; (80066c0 <HAL_RCC_OscConfig+0x68c>)
 80065fe:	4013      	ands	r3, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006608:	4311      	orrs	r1, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800660e:	0212      	lsls	r2, r2, #8
 8006610:	4311      	orrs	r1, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006616:	4311      	orrs	r1, r2
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800661c:	4311      	orrs	r1, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006622:	430a      	orrs	r2, r1
 8006624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006628:	4313      	orrs	r3, r2
 800662a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800662c:	f7ff fc45 	bl	8005eba <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800663a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006640:	f7fd fcd2 	bl	8003fe8 <HAL_GetTick>
 8006644:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006648:	f7fd fcce 	bl	8003fe8 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e059      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800665a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0ef      	beq.n	8006648 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006668:	e050      	b.n	800670c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e04f      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800666e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d147      	bne.n	800670c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800667c:	f7ff fc1d 	bl	8005eba <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800668a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800668e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006690:	f7fd fcaa 	bl	8003fe8 <HAL_GetTick>
 8006694:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006698:	f7fd fca6 	bl	8003fe8 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e031      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0ef      	beq.n	8006698 <HAL_RCC_OscConfig+0x664>
 80066b8:	e028      	b.n	800670c <HAL_RCC_OscConfig+0x6d8>
 80066ba:	bf00      	nop
 80066bc:	58000400 	.word	0x58000400
 80066c0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b0c      	cmp	r3, #12
 80066c8:	d01e      	beq.n	8006708 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ca:	f7ff fc05 	bl	8005ed8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ce:	f7fd fc8b 	bl	8003fe8 <HAL_GetTick>
 80066d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d6:	f7fd fc87 	bl	8003fe8 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e012      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1ef      	bne.n	80066d6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80066f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006700:	4b05      	ldr	r3, [pc, #20]	; (8006718 <HAL_RCC_OscConfig+0x6e4>)
 8006702:	4013      	ands	r3, r2
 8006704:	60cb      	str	r3, [r1, #12]
 8006706:	e001      	b.n	800670c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3734      	adds	r7, #52	; 0x34
 8006712:	46bd      	mov	sp, r7
 8006714:	bd90      	pop	{r4, r7, pc}
 8006716:	bf00      	nop
 8006718:	eefefffc 	.word	0xeefefffc

0800671c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e12d      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006730:	4b98      	ldr	r3, [pc, #608]	; (8006994 <HAL_RCC_ClockConfig+0x278>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d91b      	bls.n	8006776 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800673e:	4b95      	ldr	r3, [pc, #596]	; (8006994 <HAL_RCC_ClockConfig+0x278>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f023 0207 	bic.w	r2, r3, #7
 8006746:	4993      	ldr	r1, [pc, #588]	; (8006994 <HAL_RCC_ClockConfig+0x278>)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	4313      	orrs	r3, r2
 800674c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674e:	f7fd fc4b 	bl	8003fe8 <HAL_GetTick>
 8006752:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006754:	e008      	b.n	8006768 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006756:	f7fd fc47 	bl	8003fe8 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e111      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006768:	4b8a      	ldr	r3, [pc, #552]	; (8006994 <HAL_RCC_ClockConfig+0x278>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d1ef      	bne.n	8006756 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d016      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fb14 	bl	8005db4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800678c:	f7fd fc2c 	bl	8003fe8 <HAL_GetTick>
 8006790:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006794:	f7fd fc28 	bl	8003fe8 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e0f2      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80067a6:	f7ff fbe9 	bl	8005f7c <LL_RCC_IsActiveFlag_HPRE>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0f1      	beq.n	8006794 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d016      	beq.n	80067ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fb0b 	bl	8005ddc <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067c6:	f7fd fc0f 	bl	8003fe8 <HAL_GetTick>
 80067ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067ce:	f7fd fc0b 	bl	8003fe8 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e0d5      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80067e0:	f7ff fbde 	bl	8005fa0 <LL_RCC_IsActiveFlag_C2HPRE>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f1      	beq.n	80067ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d016      	beq.n	8006824 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff fb04 	bl	8005e08 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006800:	f7fd fbf2 	bl	8003fe8 <HAL_GetTick>
 8006804:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006806:	e008      	b.n	800681a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006808:	f7fd fbee 	bl	8003fe8 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d901      	bls.n	800681a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e0b8      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800681a:	f7ff fbd4 	bl	8005fc6 <LL_RCC_IsActiveFlag_SHDHPRE>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0f1      	beq.n	8006808 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff fafe 	bl	8005e36 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800683a:	f7fd fbd5 	bl	8003fe8 <HAL_GetTick>
 800683e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006840:	e008      	b.n	8006854 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006842:	f7fd fbd1 	bl	8003fe8 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e09b      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006854:	f7ff fbca 	bl	8005fec <LL_RCC_IsActiveFlag_PPRE1>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0f1      	beq.n	8006842 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d017      	beq.n	800689a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff faf4 	bl	8005e5e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006876:	f7fd fbb7 	bl	8003fe8 <HAL_GetTick>
 800687a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800687c:	e008      	b.n	8006890 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800687e:	f7fd fbb3 	bl	8003fe8 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d901      	bls.n	8006890 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e07d      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006890:	f7ff fbbe 	bl	8006010 <LL_RCC_IsActiveFlag_PPRE2>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0f1      	beq.n	800687e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d043      	beq.n	800692e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d106      	bne.n	80068bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80068ae:	f7ff f894 	bl	80059da <LL_RCC_HSE_IsReady>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11e      	bne.n	80068f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e067      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d106      	bne.n	80068d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80068c4:	f7ff fb17 	bl	8005ef6 <LL_RCC_PLL_IsReady>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d113      	bne.n	80068f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e05c      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80068da:	f7ff f9fc 	bl	8005cd6 <LL_RCC_MSI_IsReady>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d108      	bne.n	80068f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e051      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80068e8:	f7ff f8a7 	bl	8005a3a <LL_RCC_HSI_IsReady>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e04a      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff fa3a 	bl	8005d74 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006900:	f7fd fb72 	bl	8003fe8 <HAL_GetTick>
 8006904:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006906:	e00a      	b.n	800691e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006908:	f7fd fb6e 	bl	8003fe8 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	f241 3288 	movw	r2, #5000	; 0x1388
 8006916:	4293      	cmp	r3, r2
 8006918:	d901      	bls.n	800691e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e036      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800691e:	f7ff fa3d 	bl	8005d9c <LL_RCC_GetSysClkSource>
 8006922:	4602      	mov	r2, r0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	429a      	cmp	r2, r3
 800692c:	d1ec      	bne.n	8006908 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800692e:	4b19      	ldr	r3, [pc, #100]	; (8006994 <HAL_RCC_ClockConfig+0x278>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d21b      	bcs.n	8006974 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800693c:	4b15      	ldr	r3, [pc, #84]	; (8006994 <HAL_RCC_ClockConfig+0x278>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f023 0207 	bic.w	r2, r3, #7
 8006944:	4913      	ldr	r1, [pc, #76]	; (8006994 <HAL_RCC_ClockConfig+0x278>)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	4313      	orrs	r3, r2
 800694a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800694c:	f7fd fb4c 	bl	8003fe8 <HAL_GetTick>
 8006950:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006952:	e008      	b.n	8006966 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006954:	f7fd fb48 	bl	8003fe8 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e012      	b.n	800698c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_RCC_ClockConfig+0x278>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d1ef      	bne.n	8006954 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006974:	f000 f87e 	bl	8006a74 <HAL_RCC_GetHCLKFreq>
 8006978:	4603      	mov	r3, r0
 800697a:	4a07      	ldr	r2, [pc, #28]	; (8006998 <HAL_RCC_ClockConfig+0x27c>)
 800697c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800697e:	f7fd fb3f 	bl	8004000 <HAL_GetTickPrio>
 8006982:	4603      	mov	r3, r0
 8006984:	4618      	mov	r0, r3
 8006986:	f7fd fae1 	bl	8003f4c <HAL_InitTick>
 800698a:	4603      	mov	r3, r0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	58004000 	.word	0x58004000
 8006998:	2000002c 	.word	0x2000002c

0800699c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800699c:	b590      	push	{r4, r7, lr}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069a2:	f7ff f9fb 	bl	8005d9c <LL_RCC_GetSysClkSource>
 80069a6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80069ae:	f7ff f9b7 	bl	8005d20 <LL_RCC_MSI_GetRange>
 80069b2:	4603      	mov	r3, r0
 80069b4:	091b      	lsrs	r3, r3, #4
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	4a2b      	ldr	r2, [pc, #172]	; (8006a68 <HAL_RCC_GetSysClockFreq+0xcc>)
 80069bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	e04b      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d102      	bne.n	80069d0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069ca:	4b28      	ldr	r3, [pc, #160]	; (8006a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	e045      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d10a      	bne.n	80069ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80069d6:	f7fe ffd0 	bl	800597a <LL_RCC_HSE_IsEnabledDiv2>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d102      	bne.n	80069e6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80069e0:	4b22      	ldr	r3, [pc, #136]	; (8006a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	e03a      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80069e6:	4b22      	ldr	r3, [pc, #136]	; (8006a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	e037      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80069ec:	f7ff faba 	bl	8005f64 <LL_RCC_PLL_GetMainSource>
 80069f0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d003      	beq.n	8006a00 <HAL_RCC_GetSysClockFreq+0x64>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d003      	beq.n	8006a06 <HAL_RCC_GetSysClockFreq+0x6a>
 80069fe:	e00d      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006a00:	4b1a      	ldr	r3, [pc, #104]	; (8006a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a02:	60bb      	str	r3, [r7, #8]
        break;
 8006a04:	e015      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a06:	f7fe ffb8 	bl	800597a <LL_RCC_HSE_IsEnabledDiv2>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d102      	bne.n	8006a16 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006a10:	4b16      	ldr	r3, [pc, #88]	; (8006a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a12:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006a14:	e00d      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006a16:	4b16      	ldr	r3, [pc, #88]	; (8006a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006a18:	60bb      	str	r3, [r7, #8]
        break;
 8006a1a:	e00a      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006a1c:	f7ff f980 	bl	8005d20 <LL_RCC_MSI_GetRange>
 8006a20:	4603      	mov	r3, r0
 8006a22:	091b      	lsrs	r3, r3, #4
 8006a24:	f003 030f 	and.w	r3, r3, #15
 8006a28:	4a0f      	ldr	r2, [pc, #60]	; (8006a68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a2e:	60bb      	str	r3, [r7, #8]
        break;
 8006a30:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006a32:	f7ff fa72 	bl	8005f1a <LL_RCC_PLL_GetN>
 8006a36:	4602      	mov	r2, r0
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	fb03 f402 	mul.w	r4, r3, r2
 8006a3e:	f7ff fa85 	bl	8005f4c <LL_RCC_PLL_GetDivider>
 8006a42:	4603      	mov	r3, r0
 8006a44:	091b      	lsrs	r3, r3, #4
 8006a46:	3301      	adds	r3, #1
 8006a48:	fbb4 f4f3 	udiv	r4, r4, r3
 8006a4c:	f7ff fa72 	bl	8005f34 <LL_RCC_PLL_GetR>
 8006a50:	4603      	mov	r3, r0
 8006a52:	0f5b      	lsrs	r3, r3, #29
 8006a54:	3301      	adds	r3, #1
 8006a56:	fbb4 f3f3 	udiv	r3, r4, r3
 8006a5a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd90      	pop	{r4, r7, pc}
 8006a66:	bf00      	nop
 8006a68:	0800c6b0 	.word	0x0800c6b0
 8006a6c:	00f42400 	.word	0x00f42400
 8006a70:	01e84800 	.word	0x01e84800

08006a74 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a74:	b598      	push	{r3, r4, r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006a78:	f7ff ff90 	bl	800699c <HAL_RCC_GetSysClockFreq>
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	f7ff fa02 	bl	8005e86 <LL_RCC_GetAHBPrescaler>
 8006a82:	4603      	mov	r3, r0
 8006a84:	091b      	lsrs	r3, r3, #4
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	4a03      	ldr	r2, [pc, #12]	; (8006a98 <HAL_RCC_GetHCLKFreq+0x24>)
 8006a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a90:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	bd98      	pop	{r3, r4, r7, pc}
 8006a98:	0800c670 	.word	0x0800c670

08006a9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006a9c:	b590      	push	{r4, r7, lr}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2bb0      	cmp	r3, #176	; 0xb0
 8006aa8:	d903      	bls.n	8006ab2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	e007      	b.n	8006ac2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	091b      	lsrs	r3, r3, #4
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	4a11      	ldr	r2, [pc, #68]	; (8006b00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006ac2:	f7ff f9ec 	bl	8005e9e <LL_RCC_GetAHB4Prescaler>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	091b      	lsrs	r3, r3, #4
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	4a0d      	ldr	r2, [pc, #52]	; (8006b04 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ada:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae4:	0c9c      	lsrs	r4, r3, #18
 8006ae6:	f7fe ff03 	bl	80058f0 <HAL_PWREx_GetVoltageRange>
 8006aea:	4603      	mov	r3, r0
 8006aec:	4619      	mov	r1, r3
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 f80c 	bl	8006b0c <RCC_SetFlashLatency>
 8006af4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd90      	pop	{r4, r7, pc}
 8006afe:	bf00      	nop
 8006b00:	0800c6b0 	.word	0x0800c6b0
 8006b04:	0800c670 	.word	0x0800c670
 8006b08:	431bde83 	.word	0x431bde83

08006b0c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006b0c:	b590      	push	{r4, r7, lr}
 8006b0e:	b093      	sub	sp, #76	; 0x4c
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006b16:	4b37      	ldr	r3, [pc, #220]	; (8006bf4 <RCC_SetFlashLatency+0xe8>)
 8006b18:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006b22:	4a35      	ldr	r2, [pc, #212]	; (8006bf8 <RCC_SetFlashLatency+0xec>)
 8006b24:	f107 031c 	add.w	r3, r7, #28
 8006b28:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006b2e:	4b33      	ldr	r3, [pc, #204]	; (8006bfc <RCC_SetFlashLatency+0xf0>)
 8006b30:	f107 040c 	add.w	r4, r7, #12
 8006b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b44:	d11a      	bne.n	8006b7c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	643b      	str	r3, [r7, #64]	; 0x40
 8006b4a:	e013      	b.n	8006b74 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	3348      	adds	r3, #72	; 0x48
 8006b52:	443b      	add	r3, r7
 8006b54:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d807      	bhi.n	8006b6e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	3348      	adds	r3, #72	; 0x48
 8006b64:	443b      	add	r3, r7
 8006b66:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006b6a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006b6c:	e020      	b.n	8006bb0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b70:	3301      	adds	r3, #1
 8006b72:	643b      	str	r3, [r7, #64]	; 0x40
 8006b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d9e8      	bls.n	8006b4c <RCC_SetFlashLatency+0x40>
 8006b7a:	e019      	b.n	8006bb0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b80:	e013      	b.n	8006baa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	3348      	adds	r3, #72	; 0x48
 8006b88:	443b      	add	r3, r7
 8006b8a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d807      	bhi.n	8006ba4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	3348      	adds	r3, #72	; 0x48
 8006b9a:	443b      	add	r3, r7
 8006b9c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006ba0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006ba2:	e005      	b.n	8006bb0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d9e8      	bls.n	8006b82 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006bb0:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <RCC_SetFlashLatency+0xf4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f023 0207 	bic.w	r2, r3, #7
 8006bb8:	4911      	ldr	r1, [pc, #68]	; (8006c00 <RCC_SetFlashLatency+0xf4>)
 8006bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006bc0:	f7fd fa12 	bl	8003fe8 <HAL_GetTick>
 8006bc4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006bc6:	e008      	b.n	8006bda <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006bc8:	f7fd fa0e 	bl	8003fe8 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e007      	b.n	8006bea <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <RCC_SetFlashLatency+0xf4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d1ef      	bne.n	8006bc8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	374c      	adds	r7, #76	; 0x4c
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd90      	pop	{r4, r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	0800c604 	.word	0x0800c604
 8006bf8:	0800c614 	.word	0x0800c614
 8006bfc:	0800c620 	.word	0x0800c620
 8006c00:	58004000 	.word	0x58004000

08006c04 <LL_RCC_LSE_IsEnabled>:
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <LL_RCC_LSE_IsEnabled+0x18>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e000      	b.n	8006c1e <LL_RCC_LSE_IsEnabled+0x1a>
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <LL_RCC_LSE_IsReady>:
{
 8006c28:	b480      	push	{r7}
 8006c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d101      	bne.n	8006c40 <LL_RCC_LSE_IsReady+0x18>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <LL_RCC_LSE_IsReady+0x1a>
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <LL_RCC_SetRFWKPClockSource>:
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <LL_RCC_SetSMPSClockSource>:
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	f023 0203 	bic.w	r2, r3, #3
 8006c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <LL_RCC_SetSMPSPrescaler>:
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <LL_RCC_SetUSARTClockSource>:
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd8:	f023 0203 	bic.w	r2, r3, #3
 8006cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <LL_RCC_SetLPUARTClockSource>:
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <LL_RCC_SetI2CClockSource>:
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	091b      	lsrs	r3, r3, #4
 8006d34:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	401a      	ands	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <LL_RCC_SetLPTIMClockSource>:
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	0c1b      	lsrs	r3, r3, #16
 8006d6e:	041b      	lsls	r3, r3, #16
 8006d70:	43db      	mvns	r3, r3
 8006d72:	401a      	ands	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <LL_RCC_SetSAIClockSource>:
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <LL_RCC_SetRNGClockSource>:
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <LL_RCC_SetCLK48ClockSource>:
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <LL_RCC_SetUSBClockSource>:
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff ffe3 	bl	8006de6 <LL_RCC_SetCLK48ClockSource>
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <LL_RCC_SetADCClockSource>:
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <LL_RCC_SetRTCClockSource>:
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <LL_RCC_GetRTCClockSource>:
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <LL_RCC_ForceBackupDomainReset>:
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006eb2:	bf00      	nop
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <LL_RCC_ReleaseBackupDomainReset>:
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ed4:	bf00      	nop
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <LL_RCC_PLLSAI1_Enable>:
{
 8006ede:	b480      	push	{r7}
 8006ee0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ef0:	6013      	str	r3, [r2, #0]
}
 8006ef2:	bf00      	nop
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <LL_RCC_PLLSAI1_Disable>:
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f0e:	6013      	str	r3, [r2, #0]
}
 8006f10:	bf00      	nop
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <LL_RCC_PLLSAI1_IsReady>:
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f2c:	d101      	bne.n	8006f32 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b088      	sub	sp, #32
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006f46:	2300      	movs	r3, #0
 8006f48:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d034      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f62:	d021      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006f64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f68:	d81b      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f6e:	d01d      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006f70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f74:	d815      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00b      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f7e:	d110      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f8e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006f90:	e00d      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f947 	bl	800722a <RCCEx_PLLSAI1_ConfigNP>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006fa0:	e005      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	77fb      	strb	r3, [r7, #31]
        break;
 8006fa6:	e002      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006fa8:	bf00      	nop
 8006faa:	e000      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fae:	7ffb      	ldrb	r3, [r7, #31]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff fee8 	bl	8006d8e <LL_RCC_SetSAIClockSource>
 8006fbe:	e001      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	7ffb      	ldrb	r3, [r7, #31]
 8006fc2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d046      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006fd0:	f7ff ff56 	bl	8006e80 <LL_RCC_GetRTCClockSource>
 8006fd4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d03c      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006fe0:	f7fe fc2e 	bl	8005840 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff ff30 	bl	8006e54 <LL_RCC_SetRTCClockSource>
 8006ff4:	e02e      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007000:	f7ff ff4b 	bl	8006e9a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007004:	f7ff ff5a 	bl	8006ebc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007020:	f7ff fdf0 	bl	8006c04 <LL_RCC_LSE_IsEnabled>
 8007024:	4603      	mov	r3, r0
 8007026:	2b01      	cmp	r3, #1
 8007028:	d114      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800702a:	f7fc ffdd 	bl	8003fe8 <HAL_GetTick>
 800702e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007030:	e00b      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007032:	f7fc ffd9 	bl	8003fe8 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007040:	4293      	cmp	r3, r2
 8007042:	d902      	bls.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	77fb      	strb	r3, [r7, #31]
              break;
 8007048:	e004      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800704a:	f7ff fded 	bl	8006c28 <LL_RCC_LSE_IsReady>
 800704e:	4603      	mov	r3, r0
 8007050:	2b01      	cmp	r3, #1
 8007052:	d1ee      	bne.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007054:	7ffb      	ldrb	r3, [r7, #31]
 8007056:	77bb      	strb	r3, [r7, #30]
 8007058:	e001      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705a:	7ffb      	ldrb	r3, [r7, #31]
 800705c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d004      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff fe2a 	bl	8006cc8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d004      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff fe35 	bl	8006cf4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0310 	and.w	r3, r3, #16
 8007092:	2b00      	cmp	r3, #0
 8007094:	d004      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fe5d 	bl	8006d5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff fe52 	bl	8006d5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d004      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff fe2a 	bl	8006d20 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d004      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff fe1f 	bl	8006d20 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d022      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff fe8d 	bl	8006e12 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007100:	d107      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800710c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007110:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007116:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800711a:	d10b      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3304      	adds	r3, #4
 8007120:	4618      	mov	r0, r3
 8007122:	f000 f8dd 	bl	80072e0 <RCCEx_PLLSAI1_ConfigNQ>
 8007126:	4603      	mov	r3, r0
 8007128:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800712a:	7ffb      	ldrb	r3, [r7, #31]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007130:	7ffb      	ldrb	r3, [r7, #31]
 8007132:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800713c:	2b00      	cmp	r3, #0
 800713e:	d02b      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007148:	d008      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007152:	d003      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	2b00      	cmp	r3, #0
 800715a:	d105      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	4618      	mov	r0, r3
 8007162:	f7ff fe2a 	bl	8006dba <LL_RCC_SetRNGClockSource>
 8007166:	e00a      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	2000      	movs	r0, #0
 8007174:	f7ff fe21 	bl	8006dba <LL_RCC_SetRNGClockSource>
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f7ff fe34 	bl	8006de6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007186:	d107      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007196:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d022      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff fe3d 	bl	8006e28 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b6:	d107      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80071b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071c6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071d0:	d10b      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f8dd 	bl	8007396 <RCCEx_PLLSAI1_ConfigNR>
 80071dc:	4603      	mov	r3, r0
 80071de:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80071e0:	7ffb      	ldrb	r3, [r7, #31]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80071e6:	7ffb      	ldrb	r3, [r7, #31]
 80071e8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d004      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff fd26 	bl	8006c4c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d009      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff fd45 	bl	8006ca0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fd2c 	bl	8006c78 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007220:	7fbb      	ldrb	r3, [r7, #30]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3720      	adds	r7, #32
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007236:	f7ff fe61 	bl	8006efc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800723a:	f7fc fed5 	bl	8003fe8 <HAL_GetTick>
 800723e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007240:	e009      	b.n	8007256 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007242:	f7fc fed1 	bl	8003fe8 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d902      	bls.n	8007256 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	73fb      	strb	r3, [r7, #15]
      break;
 8007254:	e004      	b.n	8007260 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007256:	f7ff fe60 	bl	8006f1a <LL_RCC_PLLSAI1_IsReady>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1f0      	bne.n	8007242 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d137      	bne.n	80072d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800727a:	4313      	orrs	r3, r2
 800727c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800727e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007290:	4313      	orrs	r3, r2
 8007292:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007294:	f7ff fe23 	bl	8006ede <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007298:	f7fc fea6 	bl	8003fe8 <HAL_GetTick>
 800729c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800729e:	e009      	b.n	80072b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072a0:	f7fc fea2 	bl	8003fe8 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d902      	bls.n	80072b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	73fb      	strb	r3, [r7, #15]
        break;
 80072b2:	e004      	b.n	80072be <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072b4:	f7ff fe31 	bl	8006f1a <LL_RCC_PLLSAI1_IsReady>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d1f0      	bne.n	80072a0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d108      	bne.n	80072d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80072c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072d2:	4313      	orrs	r3, r2
 80072d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80072ec:	f7ff fe06 	bl	8006efc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072f0:	f7fc fe7a 	bl	8003fe8 <HAL_GetTick>
 80072f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80072f6:	e009      	b.n	800730c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072f8:	f7fc fe76 	bl	8003fe8 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b02      	cmp	r3, #2
 8007304:	d902      	bls.n	800730c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	73fb      	strb	r3, [r7, #15]
      break;
 800730a:	e004      	b.n	8007316 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800730c:	f7ff fe05 	bl	8006f1a <LL_RCC_PLLSAI1_IsReady>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f0      	bne.n	80072f8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d137      	bne.n	800738c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800731c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007330:	4313      	orrs	r3, r2
 8007332:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007346:	4313      	orrs	r3, r2
 8007348:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800734a:	f7ff fdc8 	bl	8006ede <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800734e:	f7fc fe4b 	bl	8003fe8 <HAL_GetTick>
 8007352:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007354:	e009      	b.n	800736a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007356:	f7fc fe47 	bl	8003fe8 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d902      	bls.n	800736a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	73fb      	strb	r3, [r7, #15]
        break;
 8007368:	e004      	b.n	8007374 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800736a:	f7ff fdd6 	bl	8006f1a <LL_RCC_PLLSAI1_IsReady>
 800736e:	4603      	mov	r3, r0
 8007370:	2b01      	cmp	r3, #1
 8007372:	d1f0      	bne.n	8007356 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d108      	bne.n	800738c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800737a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007388:	4313      	orrs	r3, r2
 800738a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80073a2:	f7ff fdab 	bl	8006efc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80073a6:	f7fc fe1f 	bl	8003fe8 <HAL_GetTick>
 80073aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80073ac:	e009      	b.n	80073c2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073ae:	f7fc fe1b 	bl	8003fe8 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d902      	bls.n	80073c2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	73fb      	strb	r3, [r7, #15]
      break;
 80073c0:	e004      	b.n	80073cc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80073c2:	f7ff fdaa 	bl	8006f1a <LL_RCC_PLLSAI1_IsReady>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1f0      	bne.n	80073ae <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d137      	bne.n	8007442 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80073d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073e6:	4313      	orrs	r3, r2
 80073e8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80073ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073fc:	4313      	orrs	r3, r2
 80073fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007400:	f7ff fd6d 	bl	8006ede <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007404:	f7fc fdf0 	bl	8003fe8 <HAL_GetTick>
 8007408:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800740a:	e009      	b.n	8007420 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800740c:	f7fc fdec 	bl	8003fe8 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b02      	cmp	r3, #2
 8007418:	d902      	bls.n	8007420 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	73fb      	strb	r3, [r7, #15]
        break;
 800741e:	e004      	b.n	800742a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007420:	f7ff fd7b 	bl	8006f1a <LL_RCC_PLLSAI1_IsReady>
 8007424:	4603      	mov	r3, r0
 8007426:	2b01      	cmp	r3, #1
 8007428:	d1f0      	bne.n	800740c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d108      	bne.n	8007442 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007434:	691a      	ldr	r2, [r3, #16]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800743e:	4313      	orrs	r3, r2
 8007440:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e09f      	b.n	800759e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fc fc02 	bl	8003c7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007480:	4b49      	ldr	r3, [pc, #292]	; (80075a8 <HAL_RTC_Init+0x15c>)
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b10      	cmp	r3, #16
 800748a:	d07e      	beq.n	800758a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	22ca      	movs	r2, #202	; 0xca
 8007492:	625a      	str	r2, [r3, #36]	; 0x24
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2253      	movs	r2, #83	; 0x53
 800749a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f8ab 	bl	80075f8 <RTC_EnterInitMode>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	22ff      	movs	r2, #255	; 0xff
 80074ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2204      	movs	r2, #4
 80074b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	73fb      	strb	r3, [r7, #15]
 80074bc:	e067      	b.n	800758e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6899      	ldr	r1, [r3, #8]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	68d2      	ldr	r2, [r2, #12]
 80074f8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6919      	ldr	r1, [r3, #16]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	041a      	lsls	r2, r3, #16
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68da      	ldr	r2, [r3, #12]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800751c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0203 	bic.w	r2, r2, #3
 800752c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	69da      	ldr	r2, [r3, #28]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d113      	bne.n	800757c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f829 	bl	80075ac <HAL_RTC_WaitForSynchro>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00d      	beq.n	800757c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	22ff      	movs	r2, #255	; 0xff
 8007566:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2204      	movs	r2, #4
 800756c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e010      	b.n	800759e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	22ff      	movs	r2, #255	; 0xff
 8007582:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	73fb      	strb	r3, [r7, #15]
 8007588:	e001      	b.n	800758e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800759c:	7bfb      	ldrb	r3, [r7, #15]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	40002800 	.word	0x40002800

080075ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80075c4:	f7fc fd10 	bl	8003fe8 <HAL_GetTick>
 80075c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075ca:	e009      	b.n	80075e0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80075cc:	f7fc fd0c 	bl	8003fe8 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075da:	d901      	bls.n	80075e0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e007      	b.n	80075f0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f003 0320 	and.w	r3, r3, #32
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0ee      	beq.n	80075cc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d119      	bne.n	8007642 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f04f 32ff 	mov.w	r2, #4294967295
 8007616:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007618:	f7fc fce6 	bl	8003fe8 <HAL_GetTick>
 800761c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800761e:	e009      	b.n	8007634 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007620:	f7fc fce2 	bl	8003fe8 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800762e:	d901      	bls.n	8007634 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e007      	b.n	8007644 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0ee      	beq.n	8007620 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007662:	2302      	movs	r3, #2
 8007664:	e0a8      	b.n	80077b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2202      	movs	r2, #2
 8007672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	22ca      	movs	r2, #202	; 0xca
 800767c:	625a      	str	r2, [r3, #36]	; 0x24
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2253      	movs	r2, #83	; 0x53
 8007684:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007690:	2b00      	cmp	r3, #0
 8007692:	d020      	beq.n	80076d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007694:	f7fc fca8 	bl	8003fe8 <HAL_GetTick>
 8007698:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800769a:	e015      	b.n	80076c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800769c:	f7fc fca4 	bl	8003fe8 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076aa:	d90d      	bls.n	80076c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	22ff      	movs	r2, #255	; 0xff
 80076b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2203      	movs	r2, #3
 80076b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e077      	b.n	80077b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e2      	bne.n	800769c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076e4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80076f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80076f8:	f7fc fc76 	bl	8003fe8 <HAL_GetTick>
 80076fc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80076fe:	e015      	b.n	800772c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007700:	f7fc fc72 	bl	8003fe8 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800770e:	d90d      	bls.n	800772c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	22ff      	movs	r2, #255	; 0xff
 8007716:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2203      	movs	r2, #3
 800771c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e045      	b.n	80077b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0e2      	beq.n	8007700 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0207 	bic.w	r2, r2, #7
 8007750:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6899      	ldr	r1, [r3, #8]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	430a      	orrs	r2, r1
 8007760:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007762:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007768:	4a15      	ldr	r2, [pc, #84]	; (80077c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800776a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800776e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007772:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a12      	ldr	r2, [pc, #72]	; (80077c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800777c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800778c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800779c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	22ff      	movs	r2, #255	; 0xff
 80077a4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3718      	adds	r7, #24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	58000800 	.word	0x58000800

080077c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b091      	sub	sp, #68	; 0x44
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	4613      	mov	r3, r2
 80077d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d178      	bne.n	80078ce <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <HAL_UART_Transmit_IT+0x24>
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e071      	b.n	80078d0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	88fa      	ldrh	r2, [r7, #6]
 80077f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	88fa      	ldrh	r2, [r7, #6]
 80077fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2221      	movs	r2, #33	; 0x21
 8007814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800781c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007820:	d12a      	bne.n	8007878 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782a:	d107      	bne.n	800783c <HAL_UART_Transmit_IT+0x78>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d103      	bne.n	800783c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4a29      	ldr	r2, [pc, #164]	; (80078dc <HAL_UART_Transmit_IT+0x118>)
 8007838:	679a      	str	r2, [r3, #120]	; 0x78
 800783a:	e002      	b.n	8007842 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4a28      	ldr	r2, [pc, #160]	; (80078e0 <HAL_UART_Transmit_IT+0x11c>)
 8007840:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3308      	adds	r3, #8
 8007848:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007858:	63bb      	str	r3, [r7, #56]	; 0x38
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007862:	637a      	str	r2, [r7, #52]	; 0x34
 8007864:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e5      	bne.n	8007842 <HAL_UART_Transmit_IT+0x7e>
 8007876:	e028      	b.n	80078ca <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007880:	d107      	bne.n	8007892 <HAL_UART_Transmit_IT+0xce>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d103      	bne.n	8007892 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4a15      	ldr	r2, [pc, #84]	; (80078e4 <HAL_UART_Transmit_IT+0x120>)
 800788e:	679a      	str	r2, [r3, #120]	; 0x78
 8007890:	e002      	b.n	8007898 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4a14      	ldr	r2, [pc, #80]	; (80078e8 <HAL_UART_Transmit_IT+0x124>)
 8007896:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	613b      	str	r3, [r7, #16]
   return(result);
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b6:	623b      	str	r3, [r7, #32]
 80078b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	69f9      	ldr	r1, [r7, #28]
 80078bc:	6a3a      	ldr	r2, [r7, #32]
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e6      	bne.n	8007898 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e000      	b.n	80078d0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80078ce:	2302      	movs	r3, #2
  }
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3744      	adds	r7, #68	; 0x44
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	080082b3 	.word	0x080082b3
 80078e0:	080081d3 	.word	0x080081d3
 80078e4:	08008111 	.word	0x08008111
 80078e8:	08008059 	.word	0x08008059

080078ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b0ba      	sub	sp, #232	; 0xe8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007912:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007916:	f640 030f 	movw	r3, #2063	; 0x80f
 800791a:	4013      	ands	r3, r2
 800791c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007924:	2b00      	cmp	r3, #0
 8007926:	d11b      	bne.n	8007960 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792c:	f003 0320 	and.w	r3, r3, #32
 8007930:	2b00      	cmp	r3, #0
 8007932:	d015      	beq.n	8007960 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007938:	f003 0320 	and.w	r3, r3, #32
 800793c:	2b00      	cmp	r3, #0
 800793e:	d105      	bne.n	800794c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d009      	beq.n	8007960 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 82e3 	beq.w	8007f1c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
      }
      return;
 800795e:	e2dd      	b.n	8007f1c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 8123 	beq.w	8007bb0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800796a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800796e:	4b8d      	ldr	r3, [pc, #564]	; (8007ba4 <HAL_UART_IRQHandler+0x2b8>)
 8007970:	4013      	ands	r3, r2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800797a:	4b8b      	ldr	r3, [pc, #556]	; (8007ba8 <HAL_UART_IRQHandler+0x2bc>)
 800797c:	4013      	ands	r3, r2
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 8116 	beq.w	8007bb0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d011      	beq.n	80079b4 <HAL_UART_IRQHandler+0xc8>
 8007990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00b      	beq.n	80079b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2201      	movs	r2, #1
 80079a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079aa:	f043 0201 	orr.w	r2, r3, #1
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d011      	beq.n	80079e4 <HAL_UART_IRQHandler+0xf8>
 80079c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00b      	beq.n	80079e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2202      	movs	r2, #2
 80079d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079da:	f043 0204 	orr.w	r2, r3, #4
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d011      	beq.n	8007a14 <HAL_UART_IRQHandler+0x128>
 80079f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2204      	movs	r2, #4
 8007a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0a:	f043 0202 	orr.w	r2, r3, #2
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a18:	f003 0308 	and.w	r3, r3, #8
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d017      	beq.n	8007a50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a24:	f003 0320 	and.w	r3, r3, #32
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d105      	bne.n	8007a38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a30:	4b5c      	ldr	r3, [pc, #368]	; (8007ba4 <HAL_UART_IRQHandler+0x2b8>)
 8007a32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2208      	movs	r2, #8
 8007a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a46:	f043 0208 	orr.w	r2, r3, #8
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d012      	beq.n	8007a82 <HAL_UART_IRQHandler+0x196>
 8007a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00c      	beq.n	8007a82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a78:	f043 0220 	orr.w	r2, r3, #32
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 8249 	beq.w	8007f20 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d013      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9e:	f003 0320 	and.w	r3, r3, #32
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d105      	bne.n	8007ab2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d007      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b40      	cmp	r3, #64	; 0x40
 8007ad8:	d005      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ade:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d054      	beq.n	8007b90 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa3a 	bl	8007f60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af6:	2b40      	cmp	r3, #64	; 0x40
 8007af8:	d146      	bne.n	8007b88 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3308      	adds	r3, #8
 8007b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1d9      	bne.n	8007afa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d017      	beq.n	8007b80 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b56:	4a15      	ldr	r2, [pc, #84]	; (8007bac <HAL_UART_IRQHandler+0x2c0>)
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fc fc97 	bl	8004494 <HAL_DMA_Abort_IT>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d019      	beq.n	8007ba0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7e:	e00f      	b.n	8007ba0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f9d7 	bl	8007f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b86:	e00b      	b.n	8007ba0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9d3 	bl	8007f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8e:	e007      	b.n	8007ba0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f9cf 	bl	8007f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007b9e:	e1bf      	b.n	8007f20 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba0:	bf00      	nop
    return;
 8007ba2:	e1bd      	b.n	8007f20 <HAL_UART_IRQHandler+0x634>
 8007ba4:	10000001 	.word	0x10000001
 8007ba8:	04000120 	.word	0x04000120
 8007bac:	0800802d 	.word	0x0800802d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	f040 8153 	bne.w	8007e60 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bbe:	f003 0310 	and.w	r3, r3, #16
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 814c 	beq.w	8007e60 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bcc:	f003 0310 	and.w	r3, r3, #16
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8145 	beq.w	8007e60 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2210      	movs	r2, #16
 8007bdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be8:	2b40      	cmp	r3, #64	; 0x40
 8007bea:	f040 80bb 	bne.w	8007d64 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 818f 	beq.w	8007f24 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c10:	429a      	cmp	r2, r3
 8007c12:	f080 8187 	bcs.w	8007f24 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f040 8087 	bne.w	8007d42 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1da      	bne.n	8007c34 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3308      	adds	r3, #8
 8007c84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c90:	f023 0301 	bic.w	r3, r3, #1
 8007c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ca2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007caa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e1      	bne.n	8007c7e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ce0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ce4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e3      	bne.n	8007cba <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d10:	f023 0310 	bic.w	r3, r3, #16
 8007d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d22:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e4      	bne.n	8007d00 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fc fb4a 	bl	80043d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f8f3 	bl	8007f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d62:	e0df      	b.n	8007f24 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80d1 	beq.w	8007f28 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 80cc 	beq.w	8007f28 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007db2:	647b      	str	r3, [r7, #68]	; 0x44
 8007db4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e4      	bne.n	8007d90 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dee:	633a      	str	r2, [r7, #48]	; 0x30
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e1      	bne.n	8007dc6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	69b9      	ldr	r1, [r7, #24]
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	617b      	str	r3, [r7, #20]
   return(result);
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e4      	bne.n	8007e16 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f875 	bl	8007f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e5e:	e063      	b.n	8007f28 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00e      	beq.n	8007e8a <HAL_UART_IRQHandler+0x59e>
 8007e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d008      	beq.n	8007e8a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fab5 	bl	80083f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e88:	e051      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d014      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d105      	bne.n	8007eae <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d008      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d03a      	beq.n	8007f2c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	4798      	blx	r3
    }
    return;
 8007ebe:	e035      	b.n	8007f2c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d009      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x5f4>
 8007ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fa5f 	bl	800839c <UART_EndTransmit_IT>
    return;
 8007ede:	e026      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d009      	beq.n	8007f00 <HAL_UART_IRQHandler+0x614>
 8007eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fa8e 	bl	800841a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007efe:	e016      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d010      	beq.n	8007f2e <HAL_UART_IRQHandler+0x642>
 8007f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	da0c      	bge.n	8007f2e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fa76 	bl	8008406 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f1a:	e008      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
      return;
 8007f1c:	bf00      	nop
 8007f1e:	e006      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
    return;
 8007f20:	bf00      	nop
 8007f22:	e004      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
      return;
 8007f24:	bf00      	nop
 8007f26:	e002      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
      return;
 8007f28:	bf00      	nop
 8007f2a:	e000      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
    return;
 8007f2c:	bf00      	nop
  }
}
 8007f2e:	37e8      	adds	r7, #232	; 0xe8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b095      	sub	sp, #84	; 0x54
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f86:	643b      	str	r3, [r7, #64]	; 0x40
 8007f88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e6      	bne.n	8007f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fb0:	f023 0301 	bic.w	r3, r3, #1
 8007fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3308      	adds	r3, #8
 8007fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e3      	bne.n	8007f9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d118      	bne.n	800800c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f023 0310 	bic.w	r3, r3, #16
 8007fee:	647b      	str	r3, [r7, #68]	; 0x44
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ff8:	61bb      	str	r3, [r7, #24]
 8007ffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6979      	ldr	r1, [r7, #20]
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	613b      	str	r3, [r7, #16]
   return(result);
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e6      	bne.n	8007fda <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2220      	movs	r2, #32
 8008010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008020:	bf00      	nop
 8008022:	3754      	adds	r7, #84	; 0x54
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7ff ff72 	bl	8007f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b08f      	sub	sp, #60	; 0x3c
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008066:	2b21      	cmp	r3, #33	; 0x21
 8008068:	d14c      	bne.n	8008104 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d132      	bne.n	80080dc <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	61fb      	str	r3, [r7, #28]
   return(result);
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800808a:	637b      	str	r3, [r7, #52]	; 0x34
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
 8008092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008096:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800809a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e6      	bne.n	8008076 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	e853 3f00 	ldrex	r3, [r3]
 80080b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080bc:	633b      	str	r3, [r7, #48]	; 0x30
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	61bb      	str	r3, [r7, #24]
 80080c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	6979      	ldr	r1, [r7, #20]
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	613b      	str	r3, [r7, #16]
   return(result);
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e6      	bne.n	80080a8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80080da:	e013      	b.n	8008104 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e0:	781a      	ldrb	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	3b01      	subs	r3, #1
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008104:	bf00      	nop
 8008106:	373c      	adds	r7, #60	; 0x3c
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b091      	sub	sp, #68	; 0x44
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811e:	2b21      	cmp	r3, #33	; 0x21
 8008120:	d151      	bne.n	80081c6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d132      	bne.n	8008194 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	623b      	str	r3, [r7, #32]
   return(result);
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008142:	63bb      	str	r3, [r7, #56]	; 0x38
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	461a      	mov	r2, r3
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	633b      	str	r3, [r7, #48]	; 0x30
 800814e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008154:	e841 2300 	strex	r3, r2, [r1]
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1e6      	bne.n	800812e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	60fb      	str	r3, [r7, #12]
   return(result);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817e:	61fb      	str	r3, [r7, #28]
 8008180:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	69b9      	ldr	r1, [r7, #24]
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	e841 2300 	strex	r3, r2, [r1]
 800818a:	617b      	str	r3, [r7, #20]
   return(result);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e6      	bne.n	8008160 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008192:	e018      	b.n	80081c6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800819a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081a8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ae:	1c9a      	adds	r2, r3, #2
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	3b01      	subs	r3, #1
 80081be:	b29a      	uxth	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80081c6:	bf00      	nop
 80081c8:	3744      	adds	r7, #68	; 0x44
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b091      	sub	sp, #68	; 0x44
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e0:	2b21      	cmp	r3, #33	; 0x21
 80081e2:	d160      	bne.n	80082a6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081ec:	e057      	b.n	800829e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d133      	bne.n	8008262 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3308      	adds	r3, #8
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	623b      	str	r3, [r7, #32]
   return(result);
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008210:	63bb      	str	r3, [r7, #56]	; 0x38
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800821a:	633a      	str	r2, [r7, #48]	; 0x30
 800821c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e5      	bne.n	80081fa <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	60fb      	str	r3, [r7, #12]
   return(result);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008242:	637b      	str	r3, [r7, #52]	; 0x34
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	69b9      	ldr	r1, [r7, #24]
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	617b      	str	r3, [r7, #20]
   return(result);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e6      	bne.n	800822e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008260:	e021      	b.n	80082a6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826c:	2b00      	cmp	r3, #0
 800826e:	d013      	beq.n	8008298 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008274:	781a      	ldrb	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800828c:	b29b      	uxth	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008298:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800829a:	3b01      	subs	r3, #1
 800829c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800829e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1a4      	bne.n	80081ee <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80082a4:	e7ff      	b.n	80082a6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80082a6:	bf00      	nop
 80082a8:	3744      	adds	r7, #68	; 0x44
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b091      	sub	sp, #68	; 0x44
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c0:	2b21      	cmp	r3, #33	; 0x21
 80082c2:	d165      	bne.n	8008390 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80082cc:	e05c      	b.n	8008388 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d133      	bne.n	8008342 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3308      	adds	r3, #8
 80082e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80082f0:	637b      	str	r3, [r7, #52]	; 0x34
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3308      	adds	r3, #8
 80082f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e5      	bne.n	80082da <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	e853 3f00 	ldrex	r3, [r3]
 800831a:	60bb      	str	r3, [r7, #8]
   return(result);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008322:	633b      	str	r3, [r7, #48]	; 0x30
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	61bb      	str	r3, [r7, #24]
 800832e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	6979      	ldr	r1, [r7, #20]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	613b      	str	r3, [r7, #16]
   return(result);
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e6      	bne.n	800830e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008340:	e026      	b.n	8008390 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834c:	2b00      	cmp	r3, #0
 800834e:	d018      	beq.n	8008382 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008354:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008364:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836a:	1c9a      	adds	r2, r3, #2
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008376:	b29b      	uxth	r3, r3
 8008378:	3b01      	subs	r3, #1
 800837a:	b29a      	uxth	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008382:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008384:	3b01      	subs	r3, #1
 8008386:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008388:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800838a:	2b00      	cmp	r3, #0
 800838c:	d19f      	bne.n	80082ce <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800838e:	e7ff      	b.n	8008390 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008390:	bf00      	nop
 8008392:	3744      	adds	r7, #68	; 0x44
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b8:	61fb      	str	r3, [r7, #28]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	61bb      	str	r3, [r7, #24]
 80083c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	6979      	ldr	r1, [r7, #20]
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	e841 2300 	strex	r3, r2, [r1]
 80083ce:	613b      	str	r3, [r7, #16]
   return(result);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e6      	bne.n	80083a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7fa ff4d 	bl	8003284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ea:	bf00      	nop
 80083ec:	3720      	adds	r7, #32
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008438:	f7f9 f92a 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800843c:	f7f9 f8ae 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008440:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f062 0208 	orn	r2, r2, #8
 800844a:	701a      	strb	r2, [r3, #0]
 800844c:	2200      	movs	r2, #0
 800844e:	705a      	strb	r2, [r3, #1]
 8008450:	2200      	movs	r2, #0
 8008452:	709a      	strb	r2, [r3, #2]
 8008454:	2200      	movs	r2, #0
 8008456:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f042 0201 	orr.w	r2, r2, #1
 8008460:	711a      	strb	r2, [r3, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	715a      	strb	r2, [r3, #5]
 8008466:	2200      	movs	r2, #0
 8008468:	719a      	strb	r2, [r3, #6]
 800846a:	2200      	movs	r2, #0
 800846c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008474:	f7f9 f8da 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008478:	f7f9 f89c 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800847c:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	689b      	ldr	r3, [r3, #8]

}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <otCoapMessageInit>:

void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
 8008496:	4613      	mov	r3, r2
 8008498:	70bb      	strb	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800849a:	f7f9 f8f9 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800849e:	f7f9 f87d 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 80084a2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f062 0228 	orn	r2, r2, #40	; 0x28
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	2200      	movs	r2, #0
 80084b0:	705a      	strb	r2, [r3, #1]
 80084b2:	2200      	movs	r2, #0
 80084b4:	709a      	strb	r2, [r3, #2]
 80084b6:	2200      	movs	r2, #0
 80084b8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f042 0203 	orr.w	r2, r2, #3
 80084c2:	711a      	strb	r2, [r3, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	715a      	strb	r2, [r3, #5]
 80084c8:	2200      	movs	r2, #0
 80084ca:	719a      	strb	r2, [r3, #6]
 80084cc:	2200      	movs	r2, #0
 80084ce:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aType;
 80084d6:	78fa      	ldrb	r2, [r7, #3]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aCode;
 80084dc:	78ba      	ldrb	r2, [r7, #2]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 80084e2:	f7f9 f8a3 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80084e6:	f7f9 f865 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80084ea:	60f8      	str	r0, [r7, #12]
}
 80084ec:	bf00      	nop
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <otCoapMessageInitResponse>:

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	4611      	mov	r1, r2
 8008500:	461a      	mov	r2, r3
 8008502:	460b      	mov	r3, r1
 8008504:	71fb      	strb	r3, [r7, #7]
 8008506:	4613      	mov	r3, r2
 8008508:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800850a:	f7f9 f8c1 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800850e:	f7f9 f845 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008512:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2200      	movs	r2, #0
 8008518:	f062 0227 	orn	r2, r2, #39	; 0x27
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	2200      	movs	r2, #0
 8008520:	705a      	strb	r2, [r3, #1]
 8008522:	2200      	movs	r2, #0
 8008524:	709a      	strb	r2, [r3, #2]
 8008526:	2200      	movs	r2, #0
 8008528:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2200      	movs	r2, #0
 800852e:	f042 0204 	orr.w	r2, r2, #4
 8008532:	711a      	strb	r2, [r3, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	715a      	strb	r2, [r3, #5]
 8008538:	2200      	movs	r2, #0
 800853a:	719a      	strb	r2, [r3, #6]
 800853c:	2200      	movs	r2, #0
 800853e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 800854c:	79fa      	ldrb	r2, [r7, #7]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 8008552:	79ba      	ldrb	r2, [r7, #6]
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8008558:	f7f9 f868 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800855c:	f7f9 f82a 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008560:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	b2db      	uxtb	r3, r3
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <otCoapMessageSetToken>:

otError otCoapMessageSetToken(otMessage *aMessage, const uint8_t *aToken, uint8_t aTokenLength)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	4613      	mov	r3, r2
 800857c:	71fb      	strb	r3, [r7, #7]
  Pre_OtCmdProcessing();
 800857e:	f7f9 f887 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008582:	f7f9 f80b 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008586:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_TOKEN;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2200      	movs	r2, #0
 800858c:	f062 0226 	orn	r2, r2, #38	; 0x26
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	2200      	movs	r2, #0
 8008594:	705a      	strb	r2, [r3, #1]
 8008596:	2200      	movs	r2, #0
 8008598:	709a      	strb	r2, [r3, #2]
 800859a:	2200      	movs	r2, #0
 800859c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f042 0203 	orr.w	r2, r2, #3
 80085a6:	711a      	strb	r2, [r3, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	715a      	strb	r2, [r3, #5]
 80085ac:	2200      	movs	r2, #0
 80085ae:	719a      	strb	r2, [r3, #6]
 80085b0:	2200      	movs	r2, #0
 80085b2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aToken;
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTokenLength;
 80085c0:	79fa      	ldrb	r2, [r7, #7]
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 80085c6:	f7f9 f831 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80085ca:	f7f8 fff3 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80085ce:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	b2db      	uxtb	r3, r3
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <otCoapMessageGenerateToken>:

void otCoapMessageGenerateToken(otMessage *aMessage, uint8_t aTokenLength)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80085ea:	f7f9 f851 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80085ee:	f7f8 ffd5 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 80085f2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GENERATE_TOKEN;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f062 0225 	orn	r2, r2, #37	; 0x25
 80085fc:	701a      	strb	r2, [r3, #0]
 80085fe:	2200      	movs	r2, #0
 8008600:	705a      	strb	r2, [r3, #1]
 8008602:	2200      	movs	r2, #0
 8008604:	709a      	strb	r2, [r3, #2]
 8008606:	2200      	movs	r2, #0
 8008608:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f042 0202 	orr.w	r2, r2, #2
 8008612:	711a      	strb	r2, [r3, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	715a      	strb	r2, [r3, #5]
 8008618:	2200      	movs	r2, #0
 800861a:	719a      	strb	r2, [r3, #6]
 800861c:	2200      	movs	r2, #0
 800861e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8008626:	78fa      	ldrb	r2, [r7, #3]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800862c:	f7f8 fffe 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008630:	f7f8 ffc0 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008634:	60f8      	str	r0, [r7, #12]
}
 8008636:	bf00      	nop
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <otCoapMessageAppendUriPathOptions>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008648:	f7f9 f822 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800864c:	f7f8 ffa6 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008650:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_APPEND_URI_PATH_OPTIONS;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f062 0220 	orn	r2, r2, #32
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	2200      	movs	r2, #0
 800865e:	705a      	strb	r2, [r3, #1]
 8008660:	2200      	movs	r2, #0
 8008662:	709a      	strb	r2, [r3, #2]
 8008664:	2200      	movs	r2, #0
 8008666:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f042 0202 	orr.w	r2, r2, #2
 8008670:	711a      	strb	r2, [r3, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	715a      	strb	r2, [r3, #5]
 8008676:	2200      	movs	r2, #0
 8008678:	719a      	strb	r2, [r3, #6]
 800867a:	2200      	movs	r2, #0
 800867c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aUriPath;
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800868a:	f7f8 ffcf 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800868e:	f7f8 ff91 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008692:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	b2db      	uxtb	r3, r3
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80086aa:	f7f8 fff1 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80086ae:	f7f8 ff75 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 80086b2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f062 0219 	orn	r2, r2, #25
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	2200      	movs	r2, #0
 80086c0:	705a      	strb	r2, [r3, #1]
 80086c2:	2200      	movs	r2, #0
 80086c4:	709a      	strb	r2, [r3, #2]
 80086c6:	2200      	movs	r2, #0
 80086c8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f042 0201 	orr.w	r2, r2, #1
 80086d2:	711a      	strb	r2, [r3, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	715a      	strb	r2, [r3, #5]
 80086d8:	2200      	movs	r2, #0
 80086da:	719a      	strb	r2, [r3, #6]
 80086dc:	2200      	movs	r2, #0
 80086de:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80086e6:	f7f8 ffa1 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80086ea:	f7f8 ff63 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80086ee:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	b2db      	uxtb	r3, r3
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <otCoapMessageGetCode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otCoapType)p_ot_req->Data[0];
}

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008706:	f7f8 ffc3 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800870a:	f7f8 ff47 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 800870e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f062 0217 	orn	r2, r2, #23
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	2200      	movs	r2, #0
 800871c:	705a      	strb	r2, [r3, #1]
 800871e:	2200      	movs	r2, #0
 8008720:	709a      	strb	r2, [r3, #2]
 8008722:	2200      	movs	r2, #0
 8008724:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f042 0201 	orr.w	r2, r2, #1
 800872e:	711a      	strb	r2, [r3, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	715a      	strb	r2, [r3, #5]
 8008734:	2200      	movs	r2, #0
 8008736:	719a      	strb	r2, [r3, #6]
 8008738:	2200      	movs	r2, #0
 800873a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008742:	f7f8 ff73 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008746:	f7f8 ff35 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800874a:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	b2db      	uxtb	r3, r3
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <otCoapMessageSetCode>:

void otCoapMessageSetCode(otMessage *aMessage, otCoapCode aCode)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	460b      	mov	r3, r1
 8008764:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8008766:	f7f8 ff93 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800876a:	f7f8 ff17 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 800876e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_CODE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f062 0216 	orn	r2, r2, #22
 8008778:	701a      	strb	r2, [r3, #0]
 800877a:	2200      	movs	r2, #0
 800877c:	705a      	strb	r2, [r3, #1]
 800877e:	2200      	movs	r2, #0
 8008780:	709a      	strb	r2, [r3, #2]
 8008782:	2200      	movs	r2, #0
 8008784:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f042 0202 	orr.w	r2, r2, #2
 800878e:	711a      	strb	r2, [r3, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	715a      	strb	r2, [r3, #5]
 8008794:	2200      	movs	r2, #0
 8008796:	719a      	strb	r2, [r3, #6]
 8008798:	2200      	movs	r2, #0
 800879a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aCode;
 80087a2:	78fa      	ldrb	r2, [r7, #3]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80087a8:	f7f8 ff40 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80087ac:	f7f8 ff02 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80087b0:	60f8      	str	r0, [r7, #12]
}
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <otCoapMessageGetTokenLength>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t)p_ot_req->Data[0];
}

uint8_t otCoapMessageGetTokenLength(const otMessage *aMessage)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80087c2:	f7f8 ff65 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80087c6:	f7f8 fee9 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 80087ca:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN_LENGTH;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f062 0213 	orn	r2, r2, #19
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	2200      	movs	r2, #0
 80087d8:	705a      	strb	r2, [r3, #1]
 80087da:	2200      	movs	r2, #0
 80087dc:	709a      	strb	r2, [r3, #2]
 80087de:	2200      	movs	r2, #0
 80087e0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f042 0201 	orr.w	r2, r2, #1
 80087ea:	711a      	strb	r2, [r3, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	715a      	strb	r2, [r3, #5]
 80087f0:	2200      	movs	r2, #0
 80087f2:	719a      	strb	r2, [r3, #6]
 80087f4:	2200      	movs	r2, #0
 80087f6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80087fe:	f7f8 ff15 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008802:	f7f8 fed7 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008806:	60f8      	str	r0, [r7, #12]
  return (uint8_t)p_ot_req->Data[0];
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	b2db      	uxtb	r3, r3
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <otCoapMessageGetToken>:

const uint8_t *otCoapMessageGetToken(const otMessage *aMessage)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800881e:	f7f8 ff37 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008822:	f7f8 febb 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008826:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f062 0212 	orn	r2, r2, #18
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	705a      	strb	r2, [r3, #1]
 8008836:	2200      	movs	r2, #0
 8008838:	709a      	strb	r2, [r3, #2]
 800883a:	2200      	movs	r2, #0
 800883c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f042 0201 	orr.w	r2, r2, #1
 8008846:	711a      	strb	r2, [r3, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	715a      	strb	r2, [r3, #5]
 800884c:	2200      	movs	r2, #0
 800884e:	719a      	strb	r2, [r3, #6]
 8008850:	2200      	movs	r2, #0
 8008852:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800885a:	f7f8 fee7 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800885e:	f7f8 fea9 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008862:	60f8      	str	r0, [r7, #12]
  return (uint8_t *)p_ot_req->Data[0];
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	689b      	ldr	r3, [r3, #8]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <otCoapSendRequestWithParameters>:
                                        otMessage *               aMessage,
                                        const otMessageInfo *     aMessageInfo,
                                        otCoapResponseHandler     aHandler,
                                        void *                    aContext,
                                        const otCoapTxParameters *aTxParameters)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 800887e:	f7f8 ff07 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008882:	f7f8 fe8b 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008886:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST_WITH_PARAMETERS;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2200      	movs	r2, #0
 800888c:	f062 0209 	orn	r2, r2, #9
 8008890:	701a      	strb	r2, [r3, #0]
 8008892:	2200      	movs	r2, #0
 8008894:	705a      	strb	r2, [r3, #1]
 8008896:	2200      	movs	r2, #0
 8008898:	709a      	strb	r2, [r3, #2]
 800889a:	2200      	movs	r2, #0
 800889c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=5;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f042 0205 	orr.w	r2, r2, #5
 80088a6:	711a      	strb	r2, [r3, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	715a      	strb	r2, [r3, #5]
 80088ac:	2200      	movs	r2, #0
 80088ae:	719a      	strb	r2, [r3, #6]
 80088b0:	2200      	movs	r2, #0
 80088b2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aHandler;
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aContext;
 80088c6:	6a3a      	ldr	r2, [r7, #32]
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	615a      	str	r2, [r3, #20]
  p_ot_req->Data[4] = (uint32_t) aTxParameters;
 80088cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	619a      	str	r2, [r3, #24]

  Ot_Cmd_Transfer();
 80088d2:	f7f8 feab 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80088d6:	f7f8 fe6d 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80088da:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	b2db      	uxtb	r3, r3
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3718      	adds	r7, #24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	460b      	mov	r3, r1
 80088f4:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80088f6:	f7f8 fecb 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80088fa:	f7f8 fe4f 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 80088fe:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f062 0207 	orn	r2, r2, #7
 8008908:	701a      	strb	r2, [r3, #0]
 800890a:	2200      	movs	r2, #0
 800890c:	705a      	strb	r2, [r3, #1]
 800890e:	2200      	movs	r2, #0
 8008910:	709a      	strb	r2, [r3, #2]
 8008912:	2200      	movs	r2, #0
 8008914:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f042 0201 	orr.w	r2, r2, #1
 800891e:	711a      	strb	r2, [r3, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	715a      	strb	r2, [r3, #5]
 8008924:	2200      	movs	r2, #0
 8008926:	719a      	strb	r2, [r3, #6]
 8008928:	2200      	movs	r2, #0
 800892a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 800892c:	887a      	ldrh	r2, [r7, #2]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008932:	f7f8 fe7b 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008936:	f7f8 fe3d 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800893a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	b2db      	uxtb	r3, r3
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008954:	f7f8 fe9c 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008958:	f7f8 fe20 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 800895c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f062 0203 	orn	r2, r2, #3
 8008966:	701a      	strb	r2, [r3, #0]
 8008968:	2200      	movs	r2, #0
 800896a:	705a      	strb	r2, [r3, #1]
 800896c:	2200      	movs	r2, #0
 800896e:	709a      	strb	r2, [r3, #2]
 8008970:	2200      	movs	r2, #0
 8008972:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f042 0201 	orr.w	r2, r2, #1
 800897c:	711a      	strb	r2, [r3, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	715a      	strb	r2, [r3, #5]
 8008982:	2200      	movs	r2, #0
 8008984:	719a      	strb	r2, [r3, #6]
 8008986:	2200      	movs	r2, #0
 8008988:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008990:	f7f8 fe4c 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008994:	f7f8 fe0e 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008998:	60f8      	str	r0, [r7, #12]
}
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b086      	sub	sp, #24
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	607a      	str	r2, [r7, #4]
 80089ae:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 80089b0:	f7f8 fe6e 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80089b4:	f7f8 fdf2 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 80089b8:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2200      	movs	r2, #0
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f042 0201 	orr.w	r2, r2, #1
 80089c6:	705a      	strb	r2, [r3, #1]
 80089c8:	2200      	movs	r2, #0
 80089ca:	709a      	strb	r2, [r3, #2]
 80089cc:	2200      	movs	r2, #0
 80089ce:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f042 0203 	orr.w	r2, r2, #3
 80089d8:	711a      	strb	r2, [r3, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	715a      	strb	r2, [r3, #5]
 80089de:	2200      	movs	r2, #0
 80089e0:	719a      	strb	r2, [r3, #6]
 80089e2:	2200      	movs	r2, #0
 80089e4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 80089f8:	f7f8 fe18 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80089fc:	f7f8 fdda 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008a00:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	b2db      	uxtb	r3, r3
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <otDatasetSetActive>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otDatasetSetActive(otInstance *aInstance, const otOperationalDataset *aDataset)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008a1a:	f7f8 fe39 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008a1e:	f7f8 fdbd 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008a22:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_DATASET_SET_ACTIVE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f042 0201 	orr.w	r2, r2, #1
 8008a34:	705a      	strb	r2, [r3, #1]
 8008a36:	2200      	movs	r2, #0
 8008a38:	709a      	strb	r2, [r3, #2]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f042 0201 	orr.w	r2, r2, #1
 8008a46:	711a      	strb	r2, [r3, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	715a      	strb	r2, [r3, #5]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	719a      	strb	r2, [r3, #6]
 8008a50:	2200      	movs	r2, #0
 8008a52:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aDataset;
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008a5a:	f7f8 fde7 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008a5e:	f7f8 fda9 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008a62:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	b2db      	uxtb	r3, r3
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 8008a78:	f7f8 fe0a 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008a7c:	f7f8 fd8e 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008a80:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f062 0235 	orn	r2, r2, #53	; 0x35
 8008a8a:	701a      	strb	r2, [r3, #0]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	705a      	strb	r2, [r3, #1]
 8008a90:	2200      	movs	r2, #0
 8008a92:	709a      	strb	r2, [r3, #2]
 8008a94:	2200      	movs	r2, #0
 8008a96:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	711a      	strb	r2, [r3, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	715a      	strb	r2, [r3, #5]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	719a      	strb	r2, [r3, #6]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8008aaa:	f7f8 fdbf 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008aae:	f7f8 fd81 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008ab2:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689b      	ldr	r3, [r3, #8]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8008acc:	f7f8 fde0 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008ad0:	f7f8 fd64 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008ad4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 8008ade:	701a      	strb	r2, [r3, #0]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	705a      	strb	r2, [r3, #1]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	709a      	strb	r2, [r3, #2]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f042 0201 	orr.w	r2, r2, #1
 8008af4:	711a      	strb	r2, [r3, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	715a      	strb	r2, [r3, #5]
 8008afa:	2200      	movs	r2, #0
 8008afc:	719a      	strb	r2, [r3, #6]
 8008afe:	2200      	movs	r2, #0
 8008b00:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8008b02:	78fa      	ldrb	r2, [r7, #3]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008b08:	f7f8 fd90 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008b0c:	f7f8 fd52 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008b10:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	b2db      	uxtb	r3, r3
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifAddress *otIp6GetUnicastAddresses(otInstance *aInstance)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008b28:	f7f8 fdb2 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008b2c:	f7f8 fd36 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008b30:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b3a:	701a      	strb	r2, [r3, #0]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	705a      	strb	r2, [r3, #1]
 8008b40:	2200      	movs	r2, #0
 8008b42:	709a      	strb	r2, [r3, #2]
 8008b44:	2200      	movs	r2, #0
 8008b46:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	711a      	strb	r2, [r3, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	715a      	strb	r2, [r3, #5]
 8008b52:	2200      	movs	r2, #0
 8008b54:	719a      	strb	r2, [r3, #6]
 8008b56:	2200      	movs	r2, #0
 8008b58:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8008b5a:	f7f8 fd67 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008b5e:	f7f8 fd29 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008b62:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	689b      	ldr	r3, [r3, #8]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <otLinkGetFactoryAssignedIeeeEui64>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

void otLinkGetFactoryAssignedIeeeEui64(otInstance *aInstance, otExtAddress *aEui64)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008b7a:	f7f8 fd89 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008b7e:	f7f8 fd0d 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008b82:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_GET_FACTORY_ASSIGNED_EUI64;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f042 020c 	orr.w	r2, r2, #12
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	705a      	strb	r2, [r3, #1]
 8008b92:	2200      	movs	r2, #0
 8008b94:	709a      	strb	r2, [r3, #2]
 8008b96:	2200      	movs	r2, #0
 8008b98:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f042 0201 	orr.w	r2, r2, #1
 8008ba2:	711a      	strb	r2, [r3, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	715a      	strb	r2, [r3, #5]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	719a      	strb	r2, [r3, #6]
 8008bac:	2200      	movs	r2, #0
 8008bae:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEui64;
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008bb6:	f7f8 fd39 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008bba:	f7f8 fcfb 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008bbe:	60f8      	str	r0, [r7, #12]
}
 8008bc0:	bf00      	nop
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008bd2:	f7f8 fd5d 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008bd6:	f7f8 fce1 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008bda:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f042 0210 	orr.w	r2, r2, #16
 8008be4:	701a      	strb	r2, [r3, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	705a      	strb	r2, [r3, #1]
 8008bea:	2200      	movs	r2, #0
 8008bec:	709a      	strb	r2, [r3, #2]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f042 0201 	orr.w	r2, r2, #1
 8008bfa:	711a      	strb	r2, [r3, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	715a      	strb	r2, [r3, #5]
 8008c00:	2200      	movs	r2, #0
 8008c02:	719a      	strb	r2, [r3, #6]
 8008c04:	2200      	movs	r2, #0
 8008c06:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008c0e:	f7f8 fd0d 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008c12:	f7f8 fccf 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008c16:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	b2db      	uxtb	r3, r3
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008c2e:	f7f8 fd2f 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008c32:	f7f8 fcb3 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008c36:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f042 0216 	orr.w	r2, r2, #22
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f042 0201 	orr.w	r2, r2, #1
 8008c48:	705a      	strb	r2, [r3, #1]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	709a      	strb	r2, [r3, #2]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f042 0201 	orr.w	r2, r2, #1
 8008c5a:	711a      	strb	r2, [r3, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	715a      	strb	r2, [r3, #5]
 8008c60:	2200      	movs	r2, #0
 8008c62:	719a      	strb	r2, [r3, #6]
 8008c64:	2200      	movs	r2, #0
 8008c66:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008c6e:	f7f8 fcdd 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008c72:	f7f8 fc9f 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008c76:	60f8      	str	r0, [r7, #12]
}
 8008c78:	bf00      	nop
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008c88:	f7f8 fd02 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008c8c:	f7f8 fc86 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008c90:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f042 0219 	orr.w	r2, r2, #25
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f042 0201 	orr.w	r2, r2, #1
 8008ca2:	705a      	strb	r2, [r3, #1]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	709a      	strb	r2, [r3, #2]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f042 0201 	orr.w	r2, r2, #1
 8008cb4:	711a      	strb	r2, [r3, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	715a      	strb	r2, [r3, #5]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	719a      	strb	r2, [r3, #6]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008cc8:	f7f8 fcb0 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008ccc:	f7f8 fc72 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008cd0:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	b29b      	uxth	r3, r3
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <otMessageAppend>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	80fb      	strh	r3, [r7, #6]
  Pre_OtCmdProcessing();
 8008cee:	f7f8 fccf 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008cf2:	f7f8 fc53 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008cf6:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f042 021e 	orr.w	r2, r2, #30
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f042 0201 	orr.w	r2, r2, #1
 8008d08:	705a      	strb	r2, [r3, #1]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	709a      	strb	r2, [r3, #2]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f042 0203 	orr.w	r2, r2, #3
 8008d1a:	711a      	strb	r2, [r3, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	715a      	strb	r2, [r3, #5]
 8008d20:	2200      	movs	r2, #0
 8008d22:	719a      	strb	r2, [r3, #6]
 8008d24:	2200      	movs	r2, #0
 8008d26:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aBuf;
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aLength;
 8008d34:	88fa      	ldrh	r2, [r7, #6]
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8008d3a:	f7f8 fc77 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008d3e:	f7f8 fc39 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008d42:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	b2db      	uxtb	r3, r3
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b086      	sub	sp, #24
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	460b      	mov	r3, r1
 8008d60:	817b      	strh	r3, [r7, #10]
 8008d62:	4613      	mov	r3, r2
 8008d64:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 8008d66:	f7f8 fc93 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008d6a:	f7f8 fc17 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8008d6e:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f042 021f 	orr.w	r2, r2, #31
 8008d78:	701a      	strb	r2, [r3, #0]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f042 0201 	orr.w	r2, r2, #1
 8008d80:	705a      	strb	r2, [r3, #1]
 8008d82:	2200      	movs	r2, #0
 8008d84:	709a      	strb	r2, [r3, #2]
 8008d86:	2200      	movs	r2, #0
 8008d88:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f042 0204 	orr.w	r2, r2, #4
 8008d92:	711a      	strb	r2, [r3, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	715a      	strb	r2, [r3, #5]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	719a      	strb	r2, [r3, #6]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 8008da6:	897a      	ldrh	r2, [r7, #10]
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 8008db2:	893a      	ldrh	r2, [r7, #8]
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8008db8:	f7f8 fc38 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008dbc:	f7f8 fbfa 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008dc0:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	b29b      	uxth	r3, r3
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8008dd0:	b5b0      	push	{r4, r5, r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8008dda:	f7f8 fbf7 	bl	80015cc <THREAD_Get_NotificationPayloadBuffer>
 8008dde:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	2b40      	cmp	r3, #64	; 0x40
 8008de8:	f200 8443 	bhi.w	8009672 <OpenThread_CallBack_Processing+0x8a2>
 8008dec:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <OpenThread_CallBack_Processing+0x24>)
 8008dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df2:	bf00      	nop
 8008df4:	0800912b 	.word	0x0800912b
 8008df8:	080091e3 	.word	0x080091e3
 8008dfc:	0800923b 	.word	0x0800923b
 8008e00:	080092e7 	.word	0x080092e7
 8008e04:	080092f3 	.word	0x080092f3
 8008e08:	08009311 	.word	0x08009311
 8008e0c:	08009673 	.word	0x08009673
 8008e10:	0800933b 	.word	0x0800933b
 8008e14:	08009355 	.word	0x08009355
 8008e18:	08009389 	.word	0x08009389
 8008e1c:	080093a7 	.word	0x080093a7
 8008e20:	080093c5 	.word	0x080093c5
 8008e24:	08009673 	.word	0x08009673
 8008e28:	080093ef 	.word	0x080093ef
 8008e2c:	08009451 	.word	0x08009451
 8008e30:	08009477 	.word	0x08009477
 8008e34:	08009497 	.word	0x08009497
 8008e38:	080094b5 	.word	0x080094b5
 8008e3c:	08009673 	.word	0x08009673
 8008e40:	080094dd 	.word	0x080094dd
 8008e44:	08009505 	.word	0x08009505
 8008e48:	080091ad 	.word	0x080091ad
 8008e4c:	08009523 	.word	0x08009523
 8008e50:	08009547 	.word	0x08009547
 8008e54:	08009571 	.word	0x08009571
 8008e58:	08008f5f 	.word	0x08008f5f
 8008e5c:	08008f81 	.word	0x08008f81
 8008e60:	08008fa3 	.word	0x08008fa3
 8008e64:	08008fcb 	.word	0x08008fcb
 8008e68:	08009673 	.word	0x08009673
 8008e6c:	08009591 	.word	0x08009591
 8008e70:	08009673 	.word	0x08009673
 8008e74:	08009673 	.word	0x08009673
 8008e78:	08009673 	.word	0x08009673
 8008e7c:	08009673 	.word	0x08009673
 8008e80:	08009673 	.word	0x08009673
 8008e84:	08009219 	.word	0x08009219
 8008e88:	08009279 	.word	0x08009279
 8008e8c:	0800929f 	.word	0x0800929f
 8008e90:	080092c5 	.word	0x080092c5
 8008e94:	080095b3 	.word	0x080095b3
 8008e98:	080095f1 	.word	0x080095f1
 8008e9c:	08009609 	.word	0x08009609
 8008ea0:	08009147 	.word	0x08009147
 8008ea4:	08009673 	.word	0x08009673
 8008ea8:	08008ff3 	.word	0x08008ff3
 8008eac:	08009011 	.word	0x08009011
 8008eb0:	0800902f 	.word	0x0800902f
 8008eb4:	0800904d 	.word	0x0800904d
 8008eb8:	0800906f 	.word	0x0800906f
 8008ebc:	08009091 	.word	0x08009091
 8008ec0:	08009673 	.word	0x08009673
 8008ec4:	08009673 	.word	0x08009673
 8008ec8:	08008ef9 	.word	0x08008ef9
 8008ecc:	08008f1b 	.word	0x08008f1b
 8008ed0:	08008f3d 	.word	0x08008f3d
 8008ed4:	08009673 	.word	0x08009673
 8008ed8:	08009673 	.word	0x08009673
 8008edc:	080090b3 	.word	0x080090b3
 8008ee0:	080090d1 	.word	0x080090d1
 8008ee4:	08009673 	.word	0x08009673
 8008ee8:	08009103 	.word	0x08009103
 8008eec:	080091c5 	.word	0x080091c5
 8008ef0:	08009637 	.word	0x08009637
 8008ef4:	08009655 	.word	0x08009655
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 8008ef8:	4b9a      	ldr	r3, [pc, #616]	; (8009164 <OpenThread_CallBack_Processing+0x394>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 83bb 	beq.w	8009678 <OpenThread_CallBack_Processing+0x8a8>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008f02:	4b98      	ldr	r3, [pc, #608]	; (8009164 <OpenThread_CallBack_Processing+0x394>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	6892      	ldr	r2, [r2, #8]
 8008f0a:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008f10:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008f16:	4798      	blx	r3
    }
    break;
 8008f18:	e3ae      	b.n	8009678 <OpenThread_CallBack_Processing+0x8a8>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 8008f1a:	4b93      	ldr	r3, [pc, #588]	; (8009168 <OpenThread_CallBack_Processing+0x398>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 83ac 	beq.w	800967c <OpenThread_CallBack_Processing+0x8ac>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008f24:	4b90      	ldr	r3, [pc, #576]	; (8009168 <OpenThread_CallBack_Processing+0x398>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	6892      	ldr	r2, [r2, #8]
 8008f2c:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008f32:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008f38:	4798      	blx	r3
    }
    break;
 8008f3a:	e39f      	b.n	800967c <OpenThread_CallBack_Processing+0x8ac>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 8008f3c:	4b8b      	ldr	r3, [pc, #556]	; (800916c <OpenThread_CallBack_Processing+0x39c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 839d 	beq.w	8009680 <OpenThread_CallBack_Processing+0x8b0>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008f46:	4b89      	ldr	r3, [pc, #548]	; (800916c <OpenThread_CallBack_Processing+0x39c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	6892      	ldr	r2, [r2, #8]
 8008f4e:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008f54:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008f5a:	4798      	blx	r3
    }
    break;
 8008f5c:	e390      	b.n	8009680 <OpenThread_CallBack_Processing+0x8b0>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 8008f5e:	4b84      	ldr	r3, [pc, #528]	; (8009170 <OpenThread_CallBack_Processing+0x3a0>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 838e 	beq.w	8009684 <OpenThread_CallBack_Processing+0x8b4>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008f68:	4b81      	ldr	r3, [pc, #516]	; (8009170 <OpenThread_CallBack_Processing+0x3a0>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	6892      	ldr	r2, [r2, #8]
 8008f70:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008f76:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008f7c:	4798      	blx	r3
    }
    break;
 8008f7e:	e381      	b.n	8009684 <OpenThread_CallBack_Processing+0x8b4>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 8008f80:	4b7c      	ldr	r3, [pc, #496]	; (8009174 <OpenThread_CallBack_Processing+0x3a4>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 837f 	beq.w	8009688 <OpenThread_CallBack_Processing+0x8b8>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008f8a:	4b7a      	ldr	r3, [pc, #488]	; (8009174 <OpenThread_CallBack_Processing+0x3a4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	6892      	ldr	r2, [r2, #8]
 8008f92:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008f98:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008f9e:	4798      	blx	r3
    }
    break;
 8008fa0:	e372      	b.n	8009688 <OpenThread_CallBack_Processing+0x8b8>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 8008fa2:	4b75      	ldr	r3, [pc, #468]	; (8009178 <OpenThread_CallBack_Processing+0x3a8>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 8370 	beq.w	800968c <OpenThread_CallBack_Processing+0x8bc>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008fac:	4b72      	ldr	r3, [pc, #456]	; (8009178 <OpenThread_CallBack_Processing+0x3a8>)
 8008fae:	681c      	ldr	r4, [r3, #0]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008fba:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008fc0:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8008fc6:	47a0      	blx	r4
    }
    break;
 8008fc8:	e360      	b.n	800968c <OpenThread_CallBack_Processing+0x8bc>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 8008fca:	4b6c      	ldr	r3, [pc, #432]	; (800917c <OpenThread_CallBack_Processing+0x3ac>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 835e 	beq.w	8009690 <OpenThread_CallBack_Processing+0x8c0>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008fd4:	4b69      	ldr	r3, [pc, #420]	; (800917c <OpenThread_CallBack_Processing+0x3ac>)
 8008fd6:	681c      	ldr	r4, [r3, #0]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008fe2:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008fe8:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8008fee:	47a0      	blx	r4
    }
    break;
 8008ff0:	e34e      	b.n	8009690 <OpenThread_CallBack_Processing+0x8c0>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 8008ff2:	4b63      	ldr	r3, [pc, #396]	; (8009180 <OpenThread_CallBack_Processing+0x3b0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 834c 	beq.w	8009694 <OpenThread_CallBack_Processing+0x8c4>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8008ffc:	4b60      	ldr	r3, [pc, #384]	; (8009180 <OpenThread_CallBack_Processing+0x3b0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	6892      	ldr	r2, [r2, #8]
 8009004:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800900a:	4611      	mov	r1, r2
 800900c:	4798      	blx	r3
    }
    break;
 800900e:	e341      	b.n	8009694 <OpenThread_CallBack_Processing+0x8c4>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 8009010:	4b5c      	ldr	r3, [pc, #368]	; (8009184 <OpenThread_CallBack_Processing+0x3b4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 833f 	beq.w	8009698 <OpenThread_CallBack_Processing+0x8c8>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800901a:	4b5a      	ldr	r3, [pc, #360]	; (8009184 <OpenThread_CallBack_Processing+0x3b4>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	6892      	ldr	r2, [r2, #8]
 8009022:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 8009028:	4611      	mov	r1, r2
 800902a:	4798      	blx	r3
    }
    break;
 800902c:	e334      	b.n	8009698 <OpenThread_CallBack_Processing+0x8c8>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 800902e:	4b56      	ldr	r3, [pc, #344]	; (8009188 <OpenThread_CallBack_Processing+0x3b8>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 8332 	beq.w	800969c <OpenThread_CallBack_Processing+0x8cc>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 8009038:	4b53      	ldr	r3, [pc, #332]	; (8009188 <OpenThread_CallBack_Processing+0x3b8>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	6892      	ldr	r2, [r2, #8]
 8009040:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 8009046:	4611      	mov	r1, r2
 8009048:	4798      	blx	r3
    }
    break;
 800904a:	e327      	b.n	800969c <OpenThread_CallBack_Processing+0x8cc>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 800904c:	4b4f      	ldr	r3, [pc, #316]	; (800918c <OpenThread_CallBack_Processing+0x3bc>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 8325 	beq.w	80096a0 <OpenThread_CallBack_Processing+0x8d0>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 8009056:	4b4d      	ldr	r3, [pc, #308]	; (800918c <OpenThread_CallBack_Processing+0x3bc>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	6892      	ldr	r2, [r2, #8]
 800905e:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 8009064:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800906a:	4798      	blx	r3
    }
    break;
 800906c:	e318      	b.n	80096a0 <OpenThread_CallBack_Processing+0x8d0>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 800906e:	4b48      	ldr	r3, [pc, #288]	; (8009190 <OpenThread_CallBack_Processing+0x3c0>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 8316 	beq.w	80096a4 <OpenThread_CallBack_Processing+0x8d4>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 8009078:	4b45      	ldr	r3, [pc, #276]	; (8009190 <OpenThread_CallBack_Processing+0x3c0>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	6892      	ldr	r2, [r2, #8]
 8009080:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 8009086:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 800908c:	4798      	blx	r3
    }
    break;
 800908e:	e309      	b.n	80096a4 <OpenThread_CallBack_Processing+0x8d4>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 8009090:	4b3f      	ldr	r3, [pc, #252]	; (8009190 <OpenThread_CallBack_Processing+0x3c0>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 8307 	beq.w	80096a8 <OpenThread_CallBack_Processing+0x8d8>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 800909a:	4b3e      	ldr	r3, [pc, #248]	; (8009194 <OpenThread_CallBack_Processing+0x3c4>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	6892      	ldr	r2, [r2, #8]
 80090a2:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 80090a8:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 80090ae:	4798      	blx	r3
    }
    break;
 80090b0:	e2fa      	b.n	80096a8 <OpenThread_CallBack_Processing+0x8d8>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 80090b2:	4b39      	ldr	r3, [pc, #228]	; (8009198 <OpenThread_CallBack_Processing+0x3c8>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 82f8 	beq.w	80096ac <OpenThread_CallBack_Processing+0x8dc>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 80090bc:	4b36      	ldr	r3, [pc, #216]	; (8009198 <OpenThread_CallBack_Processing+0x3c8>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	6892      	ldr	r2, [r2, #8]
 80090c4:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 80090ca:	4611      	mov	r1, r2
 80090cc:	4798      	blx	r3
    }
    break;
 80090ce:	e2ed      	b.n	80096ac <OpenThread_CallBack_Processing+0x8dc>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 80090d0:	4b32      	ldr	r3, [pc, #200]	; (800919c <OpenThread_CallBack_Processing+0x3cc>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 82eb 	beq.w	80096b0 <OpenThread_CallBack_Processing+0x8e0>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 80090da:	4b30      	ldr	r3, [pc, #192]	; (800919c <OpenThread_CallBack_Processing+0x3cc>)
 80090dc:	681c      	ldr	r4, [r3, #0]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 80090e8:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 80090ee:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 80090f4:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	462b      	mov	r3, r5
 80090fe:	47a0      	blx	r4
    }
    break;
 8009100:	e2d6      	b.n	80096b0 <OpenThread_CallBack_Processing+0x8e0>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 8009102:	4b27      	ldr	r3, [pc, #156]	; (80091a0 <OpenThread_CallBack_Processing+0x3d0>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	f000 82d4 	beq.w	80096b4 <OpenThread_CallBack_Processing+0x8e4>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800910c:	4b24      	ldr	r3, [pc, #144]	; (80091a0 <OpenThread_CallBack_Processing+0x3d0>)
 800910e:	681c      	ldr	r4, [r3, #0]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800911a:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009120:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009126:	47a0      	blx	r4
    }
    break;
 8009128:	e2c4      	b.n	80096b4 <OpenThread_CallBack_Processing+0x8e4>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 800912a:	4b1e      	ldr	r3, [pc, #120]	; (80091a4 <OpenThread_CallBack_Processing+0x3d4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 82c2 	beq.w	80096b8 <OpenThread_CallBack_Processing+0x8e8>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8009134:	4b1b      	ldr	r3, [pc, #108]	; (80091a4 <OpenThread_CallBack_Processing+0x3d4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8009140:	4611      	mov	r1, r2
 8009142:	4798      	blx	r3
    }
    break;
 8009144:	e2b8      	b.n	80096b8 <OpenThread_CallBack_Processing+0x8e8>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 8009146:	4b18      	ldr	r3, [pc, #96]	; (80091a8 <OpenThread_CallBack_Processing+0x3d8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 82b6 	beq.w	80096bc <OpenThread_CallBack_Processing+0x8ec>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 8009150:	4b15      	ldr	r3, [pc, #84]	; (80091a8 <OpenThread_CallBack_Processing+0x3d8>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	6892      	ldr	r2, [r2, #8]
 8009158:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800915e:	4611      	mov	r1, r2
 8009160:	4798      	blx	r3
    }
    break;
 8009162:	e2ab      	b.n	80096bc <OpenThread_CallBack_Processing+0x8ec>
 8009164:	2000065c 	.word	0x2000065c
 8009168:	20000664 	.word	0x20000664
 800916c:	20000660 	.word	0x20000660
 8009170:	200005f0 	.word	0x200005f0
 8009174:	200005ec 	.word	0x200005ec
 8009178:	200005f4 	.word	0x200005f4
 800917c:	200005e8 	.word	0x200005e8
 8009180:	20000668 	.word	0x20000668
 8009184:	2000066c 	.word	0x2000066c
 8009188:	20000670 	.word	0x20000670
 800918c:	20000678 	.word	0x20000678
 8009190:	20000674 	.word	0x20000674
 8009194:	2000067c 	.word	0x2000067c
 8009198:	20000688 	.word	0x20000688
 800919c:	20000684 	.word	0x20000684
 80091a0:	20000680 	.word	0x20000680
 80091a4:	200005c8 	.word	0x200005c8
 80091a8:	200005f8 	.word	0x200005f8
  case MSG_M0TOM4_DETACH_GRACEFULLY_CALLBACK:
    if (otDetachGracefullyCb != NULL)
 80091ac:	4b97      	ldr	r3, [pc, #604]	; (800940c <OpenThread_CallBack_Processing+0x63c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 8285 	beq.w	80096c0 <OpenThread_CallBack_Processing+0x8f0>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 80091b6:	4b95      	ldr	r3, [pc, #596]	; (800940c <OpenThread_CallBack_Processing+0x63c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	6892      	ldr	r2, [r2, #8]
 80091be:	4610      	mov	r0, r2
 80091c0:	4798      	blx	r3
    }
    break;
 80091c2:	e27d      	b.n	80096c0 <OpenThread_CallBack_Processing+0x8f0>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 80091c4:	4b92      	ldr	r3, [pc, #584]	; (8009410 <OpenThread_CallBack_Processing+0x640>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 827b 	beq.w	80096c4 <OpenThread_CallBack_Processing+0x8f4>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 80091ce:	4b90      	ldr	r3, [pc, #576]	; (8009410 <OpenThread_CallBack_Processing+0x640>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	6892      	ldr	r2, [r2, #8]
 80091d6:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 80091dc:	4611      	mov	r1, r2
 80091de:	4798      	blx	r3
    }
    break;
 80091e0:	e270      	b.n	80096c4 <OpenThread_CallBack_Processing+0x8f4>
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	461a      	mov	r2, r3
 80091e8:	4b8a      	ldr	r3, [pc, #552]	; (8009414 <OpenThread_CallBack_Processing+0x644>)
 80091ea:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 80091ec:	4b89      	ldr	r3, [pc, #548]	; (8009414 <OpenThread_CallBack_Processing+0x644>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	4a89      	ldr	r2, [pc, #548]	; (8009418 <OpenThread_CallBack_Processing+0x648>)
 80091f4:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 80091f6:	4b88      	ldr	r3, [pc, #544]	; (8009418 <OpenThread_CallBack_Processing+0x648>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 8264 	beq.w	80096c8 <OpenThread_CallBack_Processing+0x8f8>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8009200:	4b85      	ldr	r3, [pc, #532]	; (8009418 <OpenThread_CallBack_Processing+0x648>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a83      	ldr	r2, [pc, #524]	; (8009414 <OpenThread_CallBack_Processing+0x644>)
 8009206:	6812      	ldr	r2, [r2, #0]
 8009208:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800920e:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8009214:	4798      	blx	r3
    }
    break;
 8009216:	e257      	b.n	80096c8 <OpenThread_CallBack_Processing+0x8f8>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 8009218:	4b80      	ldr	r3, [pc, #512]	; (800941c <OpenThread_CallBack_Processing+0x64c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 8275 	beq.w	800970c <OpenThread_CallBack_Processing+0x93c>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009222:	4b7e      	ldr	r3, [pc, #504]	; (800941c <OpenThread_CallBack_Processing+0x64c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	6892      	ldr	r2, [r2, #8]
 800922a:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009230:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009236:	4798      	blx	r3
    }
    break;
 8009238:	e268      	b.n	800970c <OpenThread_CallBack_Processing+0x93c>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	461a      	mov	r2, r3
 8009240:	4b77      	ldr	r3, [pc, #476]	; (8009420 <OpenThread_CallBack_Processing+0x650>)
 8009242:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 8009244:	4b76      	ldr	r3, [pc, #472]	; (8009420 <OpenThread_CallBack_Processing+0x650>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	4a76      	ldr	r2, [pc, #472]	; (8009424 <OpenThread_CallBack_Processing+0x654>)
 800924c:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 800924e:	4b75      	ldr	r3, [pc, #468]	; (8009424 <OpenThread_CallBack_Processing+0x654>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 825c 	beq.w	8009710 <OpenThread_CallBack_Processing+0x940>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009258:	4b72      	ldr	r3, [pc, #456]	; (8009424 <OpenThread_CallBack_Processing+0x654>)
 800925a:	681c      	ldr	r4, [r3, #0]
 800925c:	4b70      	ldr	r3, [pc, #448]	; (8009420 <OpenThread_CallBack_Processing+0x650>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009266:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800926c:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009272:	b2db      	uxtb	r3, r3
 8009274:	47a0      	blx	r4
    }
    break;
 8009276:	e24b      	b.n	8009710 <OpenThread_CallBack_Processing+0x940>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 8009278:	4b6b      	ldr	r3, [pc, #428]	; (8009428 <OpenThread_CallBack_Processing+0x658>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 8249 	beq.w	8009714 <OpenThread_CallBack_Processing+0x944>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8009282:	4b69      	ldr	r3, [pc, #420]	; (8009428 <OpenThread_CallBack_Processing+0x658>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	6892      	ldr	r2, [r2, #8]
 800928a:	2a00      	cmp	r2, #0
 800928c:	bf14      	ite	ne
 800928e:	2201      	movne	r2, #1
 8009290:	2200      	moveq	r2, #0
 8009292:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8009298:	4611      	mov	r1, r2
 800929a:	4798      	blx	r3
    }
    break;
 800929c:	e23a      	b.n	8009714 <OpenThread_CallBack_Processing+0x944>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800929e:	4b62      	ldr	r3, [pc, #392]	; (8009428 <OpenThread_CallBack_Processing+0x658>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 8238 	beq.w	8009718 <OpenThread_CallBack_Processing+0x948>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 80092a8:	4b5f      	ldr	r3, [pc, #380]	; (8009428 <OpenThread_CallBack_Processing+0x658>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	6892      	ldr	r2, [r2, #8]
 80092b0:	2a00      	cmp	r2, #0
 80092b2:	bf14      	ite	ne
 80092b4:	2201      	movne	r2, #1
 80092b6:	2200      	moveq	r2, #0
 80092b8:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 80092be:	4611      	mov	r1, r2
 80092c0:	4798      	blx	r3
    }
    break;
 80092c2:	e229      	b.n	8009718 <OpenThread_CallBack_Processing+0x948>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 80092c4:	4b59      	ldr	r3, [pc, #356]	; (800942c <OpenThread_CallBack_Processing+0x65c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 8227 	beq.w	800971c <OpenThread_CallBack_Processing+0x94c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 80092ce:	4b57      	ldr	r3, [pc, #348]	; (800942c <OpenThread_CallBack_Processing+0x65c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	6892      	ldr	r2, [r2, #8]
 80092d6:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 80092dc:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 80092e2:	4798      	blx	r3
    }
    break;
 80092e4:	e21a      	b.n	800971c <OpenThread_CallBack_Processing+0x94c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 80092e6:	2001      	movs	r0, #1
 80092e8:	f000 fa94 	bl	8009814 <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 80092ec:	f7fb f847 	bl	800437e <HAL_NVIC_SystemReset>
    break;
 80092f0:	e243      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 80092f2:	4b4f      	ldr	r3, [pc, #316]	; (8009430 <OpenThread_CallBack_Processing+0x660>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 8212 	beq.w	8009720 <OpenThread_CallBack_Processing+0x950>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80092fc:	4b4c      	ldr	r3, [pc, #304]	; (8009430 <OpenThread_CallBack_Processing+0x660>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	6892      	ldr	r2, [r2, #8]
 8009304:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800930a:	4611      	mov	r1, r2
 800930c:	4798      	blx	r3
    }
    break;
 800930e:	e207      	b.n	8009720 <OpenThread_CallBack_Processing+0x950>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 8009310:	4b48      	ldr	r3, [pc, #288]	; (8009434 <OpenThread_CallBack_Processing+0x664>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 8205 	beq.w	8009724 <OpenThread_CallBack_Processing+0x954>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800931a:	4b46      	ldr	r3, [pc, #280]	; (8009434 <OpenThread_CallBack_Processing+0x664>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	6892      	ldr	r2, [r2, #8]
 8009322:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009328:	2a00      	cmp	r2, #0
 800932a:	bf14      	ite	ne
 800932c:	2201      	movne	r2, #1
 800932e:	2200      	moveq	r2, #0
 8009330:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009336:	4798      	blx	r3
    }
    break;
 8009338:	e1f4      	b.n	8009724 <OpenThread_CallBack_Processing+0x954>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 800933a:	4b3f      	ldr	r3, [pc, #252]	; (8009438 <OpenThread_CallBack_Processing+0x668>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 81f2 	beq.w	8009728 <OpenThread_CallBack_Processing+0x958>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 8009344:	4b3c      	ldr	r3, [pc, #240]	; (8009438 <OpenThread_CallBack_Processing+0x668>)
 8009346:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 800934c:	4611      	mov	r1, r2
 800934e:	2000      	movs	r0, #0
 8009350:	4798      	blx	r3
    }
    break;
 8009352:	e1e9      	b.n	8009728 <OpenThread_CallBack_Processing+0x958>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 8009354:	4b39      	ldr	r3, [pc, #228]	; (800943c <OpenThread_CallBack_Processing+0x66c>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 81e7 	beq.w	800972c <OpenThread_CallBack_Processing+0x95c>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800935e:	4b37      	ldr	r3, [pc, #220]	; (800943c <OpenThread_CallBack_Processing+0x66c>)
 8009360:	681c      	ldr	r4, [r3, #0]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800936c:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8009372:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8009378:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800937e:	b2db      	uxtb	r3, r3
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	462b      	mov	r3, r5
 8009384:	47a0      	blx	r4
    }
    break;
 8009386:	e1d1      	b.n	800972c <OpenThread_CallBack_Processing+0x95c>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 8009388:	4b2d      	ldr	r3, [pc, #180]	; (8009440 <OpenThread_CallBack_Processing+0x670>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 81cf 	beq.w	8009730 <OpenThread_CallBack_Processing+0x960>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8009392:	4b2b      	ldr	r3, [pc, #172]	; (8009440 <OpenThread_CallBack_Processing+0x670>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	6892      	ldr	r2, [r2, #8]
 800939a:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80093a0:	4611      	mov	r1, r2
 80093a2:	4798      	blx	r3
    }
    break;
 80093a4:	e1c4      	b.n	8009730 <OpenThread_CallBack_Processing+0x960>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 80093a6:	4b27      	ldr	r3, [pc, #156]	; (8009444 <OpenThread_CallBack_Processing+0x674>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 81c2 	beq.w	8009734 <OpenThread_CallBack_Processing+0x964>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80093b0:	4b24      	ldr	r3, [pc, #144]	; (8009444 <OpenThread_CallBack_Processing+0x674>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	6892      	ldr	r2, [r2, #8]
 80093b8:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80093be:	4611      	mov	r1, r2
 80093c0:	4798      	blx	r3
    }
    break;
 80093c2:	e1b7      	b.n	8009734 <OpenThread_CallBack_Processing+0x964>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 80093c4:	4b20      	ldr	r3, [pc, #128]	; (8009448 <OpenThread_CallBack_Processing+0x678>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 81b5 	beq.w	8009738 <OpenThread_CallBack_Processing+0x968>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80093ce:	4b1e      	ldr	r3, [pc, #120]	; (8009448 <OpenThread_CallBack_Processing+0x678>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	6892      	ldr	r2, [r2, #8]
 80093d6:	4610      	mov	r0, r2
          p_notification->Data[1],
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80093dc:	2a00      	cmp	r2, #0
 80093de:	bf14      	ite	ne
 80093e0:	2201      	movne	r2, #1
 80093e2:	2200      	moveq	r2, #0
 80093e4:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80093ea:	4798      	blx	r3
    }
    break;
 80093ec:	e1a4      	b.n	8009738 <OpenThread_CallBack_Processing+0x968>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 80093ee:	4b17      	ldr	r3, [pc, #92]	; (800944c <OpenThread_CallBack_Processing+0x67c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 81a2 	beq.w	800973c <OpenThread_CallBack_Processing+0x96c>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 80093f8:	4b14      	ldr	r3, [pc, #80]	; (800944c <OpenThread_CallBack_Processing+0x67c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	6892      	ldr	r2, [r2, #8]
 8009400:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 8009406:	4611      	mov	r1, r2
 8009408:	4798      	blx	r3
    }
    break;
 800940a:	e197      	b.n	800973c <OpenThread_CallBack_Processing+0x96c>
 800940c:	200005fc 	.word	0x200005fc
 8009410:	20000600 	.word	0x20000600
 8009414:	20000644 	.word	0x20000644
 8009418:	20000638 	.word	0x20000638
 800941c:	2000063c 	.word	0x2000063c
 8009420:	20000648 	.word	0x20000648
 8009424:	20000640 	.word	0x20000640
 8009428:	20000650 	.word	0x20000650
 800942c:	2000064c 	.word	0x2000064c
 8009430:	200005d0 	.word	0x200005d0
 8009434:	200005d4 	.word	0x200005d4
 8009438:	200005cc 	.word	0x200005cc
 800943c:	200005d8 	.word	0x200005d8
 8009440:	200005dc 	.word	0x200005dc
 8009444:	200005e0 	.word	0x200005e0
 8009448:	200005e4 	.word	0x200005e4
 800944c:	20000604 	.word	0x20000604
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 8009450:	4b9e      	ldr	r3, [pc, #632]	; (80096cc <OpenThread_CallBack_Processing+0x8fc>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 8173 	beq.w	8009740 <OpenThread_CallBack_Processing+0x970>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800945a:	4b9c      	ldr	r3, [pc, #624]	; (80096cc <OpenThread_CallBack_Processing+0x8fc>)
 800945c:	681c      	ldr	r4, [r3, #0]
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8009466:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800946c:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8009472:	47a0      	blx	r4
    }
    break;
 8009474:	e164      	b.n	8009740 <OpenThread_CallBack_Processing+0x970>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 8009476:	4b96      	ldr	r3, [pc, #600]	; (80096d0 <OpenThread_CallBack_Processing+0x900>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 8162 	beq.w	8009744 <OpenThread_CallBack_Processing+0x974>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 8009480:	4b93      	ldr	r3, [pc, #588]	; (80096d0 <OpenThread_CallBack_Processing+0x900>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	6892      	ldr	r2, [r2, #8]
 8009488:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 8009492:	4798      	blx	r3
    }
    break;
 8009494:	e156      	b.n	8009744 <OpenThread_CallBack_Processing+0x974>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 8009496:	4b8f      	ldr	r3, [pc, #572]	; (80096d4 <OpenThread_CallBack_Processing+0x904>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 8154 	beq.w	8009748 <OpenThread_CallBack_Processing+0x978>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 80094a0:	4b8c      	ldr	r3, [pc, #560]	; (80096d4 <OpenThread_CallBack_Processing+0x904>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	6892      	ldr	r2, [r2, #8]
 80094a8:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 80094ae:	4611      	mov	r1, r2
 80094b0:	4798      	blx	r3
    }
    break;
 80094b2:	e149      	b.n	8009748 <OpenThread_CallBack_Processing+0x978>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 80094b4:	4b88      	ldr	r3, [pc, #544]	; (80096d8 <OpenThread_CallBack_Processing+0x908>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 8147 	beq.w	800974c <OpenThread_CallBack_Processing+0x97c>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 80094be:	4b86      	ldr	r3, [pc, #536]	; (80096d8 <OpenThread_CallBack_Processing+0x908>)
 80094c0:	681c      	ldr	r4, [r3, #0]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 80094cc:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 80094d2:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 80094d8:	47a0      	blx	r4
    }
    break;
 80094da:	e137      	b.n	800974c <OpenThread_CallBack_Processing+0x97c>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 80094dc:	4b7f      	ldr	r3, [pc, #508]	; (80096dc <OpenThread_CallBack_Processing+0x90c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 8135 	beq.w	8009750 <OpenThread_CallBack_Processing+0x980>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80094e6:	4b7d      	ldr	r3, [pc, #500]	; (80096dc <OpenThread_CallBack_Processing+0x90c>)
 80094e8:	681c      	ldr	r4, [r3, #0]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80094f4:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80094fa:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8009500:	47a0      	blx	r4
    }
    break;
 8009502:	e125      	b.n	8009750 <OpenThread_CallBack_Processing+0x980>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 8009504:	4b76      	ldr	r3, [pc, #472]	; (80096e0 <OpenThread_CallBack_Processing+0x910>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 8123 	beq.w	8009754 <OpenThread_CallBack_Processing+0x984>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800950e:	4b74      	ldr	r3, [pc, #464]	; (80096e0 <OpenThread_CallBack_Processing+0x910>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	6892      	ldr	r2, [r2, #8]
 8009516:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 800951c:	4611      	mov	r1, r2
 800951e:	4798      	blx	r3
    }
    break;
 8009520:	e118      	b.n	8009754 <OpenThread_CallBack_Processing+0x984>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 8009522:	4b70      	ldr	r3, [pc, #448]	; (80096e4 <OpenThread_CallBack_Processing+0x914>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 8116 	beq.w	8009758 <OpenThread_CallBack_Processing+0x988>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800952c:	4b6d      	ldr	r3, [pc, #436]	; (80096e4 <OpenThread_CallBack_Processing+0x914>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	6892      	ldr	r2, [r2, #8]
 8009534:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800953a:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8009540:	b2d2      	uxtb	r2, r2
 8009542:	4798      	blx	r3
    }
    break;
 8009544:	e108      	b.n	8009758 <OpenThread_CallBack_Processing+0x988>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 8009546:	4b68      	ldr	r3, [pc, #416]	; (80096e8 <OpenThread_CallBack_Processing+0x918>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 8106 	beq.w	800975c <OpenThread_CallBack_Processing+0x98c>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009550:	4b65      	ldr	r3, [pc, #404]	; (80096e8 <OpenThread_CallBack_Processing+0x918>)
 8009552:	681c      	ldr	r4, [r3, #0]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800955e:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009564:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800956a:	b2db      	uxtb	r3, r3
 800956c:	47a0      	blx	r4
    }
    break;
 800956e:	e0f5      	b.n	800975c <OpenThread_CallBack_Processing+0x98c>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 8009570:	4b5e      	ldr	r3, [pc, #376]	; (80096ec <OpenThread_CallBack_Processing+0x91c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 80f3 	beq.w	8009760 <OpenThread_CallBack_Processing+0x990>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800957a:	4b5c      	ldr	r3, [pc, #368]	; (80096ec <OpenThread_CallBack_Processing+0x91c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	6892      	ldr	r2, [r2, #8]
 8009582:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8009588:	b252      	sxtb	r2, r2
 800958a:	4611      	mov	r1, r2
 800958c:	4798      	blx	r3
    }
    break;
 800958e:	e0e7      	b.n	8009760 <OpenThread_CallBack_Processing+0x990>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 8009590:	4b57      	ldr	r3, [pc, #348]	; (80096f0 <OpenThread_CallBack_Processing+0x920>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 80e5 	beq.w	8009764 <OpenThread_CallBack_Processing+0x994>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 800959a:	4b55      	ldr	r3, [pc, #340]	; (80096f0 <OpenThread_CallBack_Processing+0x920>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	6892      	ldr	r2, [r2, #8]
 80095a2:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 80095a8:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 80095ae:	4798      	blx	r3
    }
    break;
 80095b0:	e0d8      	b.n	8009764 <OpenThread_CallBack_Processing+0x994>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	461a      	mov	r2, r3
 80095b8:	4b4e      	ldr	r3, [pc, #312]	; (80096f4 <OpenThread_CallBack_Processing+0x924>)
 80095ba:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 80095bc:	4b4d      	ldr	r3, [pc, #308]	; (80096f4 <OpenThread_CallBack_Processing+0x924>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	4a4d      	ldr	r2, [pc, #308]	; (80096f8 <OpenThread_CallBack_Processing+0x928>)
 80095c4:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 80095c6:	4b4c      	ldr	r3, [pc, #304]	; (80096f8 <OpenThread_CallBack_Processing+0x928>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 80cc 	beq.w	8009768 <OpenThread_CallBack_Processing+0x998>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 80095d0:	4b49      	ldr	r3, [pc, #292]	; (80096f8 <OpenThread_CallBack_Processing+0x928>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a47      	ldr	r2, [pc, #284]	; (80096f4 <OpenThread_CallBack_Processing+0x924>)
 80095d6:	6812      	ldr	r2, [r2, #0]
 80095d8:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 80095de:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 80095e4:	4798      	blx	r3
 80095e6:	4603      	mov	r3, r0
 80095e8:	461a      	mov	r2, r3
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	609a      	str	r2, [r3, #8]
      }
      break;
 80095ee:	e0bb      	b.n	8009768 <OpenThread_CallBack_Processing+0x998>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 80095f0:	4b42      	ldr	r3, [pc, #264]	; (80096fc <OpenThread_CallBack_Processing+0x92c>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 80b9 	beq.w	800976c <OpenThread_CallBack_Processing+0x99c>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 80095fa:	4b40      	ldr	r3, [pc, #256]	; (80096fc <OpenThread_CallBack_Processing+0x92c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	6892      	ldr	r2, [r2, #8]
 8009602:	4610      	mov	r0, r2
 8009604:	4798      	blx	r3
    }
    break;
 8009606:	e0b1      	b.n	800976c <OpenThread_CallBack_Processing+0x99c>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 8009608:	4b3d      	ldr	r3, [pc, #244]	; (8009700 <OpenThread_CallBack_Processing+0x930>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 80af 	beq.w	8009770 <OpenThread_CallBack_Processing+0x9a0>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 8009612:	4b3b      	ldr	r3, [pc, #236]	; (8009700 <OpenThread_CallBack_Processing+0x930>)
 8009614:	6819      	ldr	r1, [r3, #0]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 8009620:	2200      	movs	r2, #0
 8009622:	461c      	mov	r4, r3
 8009624:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800962a:	b2db      	uxtb	r3, r3
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	4622      	mov	r2, r4
 8009630:	462b      	mov	r3, r5
 8009632:	4788      	blx	r1
    }
    break;
 8009634:	e09c      	b.n	8009770 <OpenThread_CallBack_Processing+0x9a0>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 8009636:	4b33      	ldr	r3, [pc, #204]	; (8009704 <OpenThread_CallBack_Processing+0x934>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 809a 	beq.w	8009774 <OpenThread_CallBack_Processing+0x9a4>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 8009640:	4b30      	ldr	r3, [pc, #192]	; (8009704 <OpenThread_CallBack_Processing+0x934>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	6892      	ldr	r2, [r2, #8]
 8009648:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800964e:	4611      	mov	r1, r2
 8009650:	4798      	blx	r3
    }
    break;
 8009652:	e08f      	b.n	8009774 <OpenThread_CallBack_Processing+0x9a4>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 8009654:	4b2c      	ldr	r3, [pc, #176]	; (8009708 <OpenThread_CallBack_Processing+0x938>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 808d 	beq.w	8009778 <OpenThread_CallBack_Processing+0x9a8>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800965e:	4b2a      	ldr	r3, [pc, #168]	; (8009708 <OpenThread_CallBack_Processing+0x938>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	6892      	ldr	r2, [r2, #8]
 8009666:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800966c:	4611      	mov	r1, r2
 800966e:	4798      	blx	r3
    }
    break;
 8009670:	e082      	b.n	8009778 <OpenThread_CallBack_Processing+0x9a8>
          (const otSockAddr *) p_notification->Data[2]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	71fb      	strb	r3, [r7, #7]
    break;
 8009676:	e080      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009678:	bf00      	nop
 800967a:	e07e      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 800967c:	bf00      	nop
 800967e:	e07c      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009680:	bf00      	nop
 8009682:	e07a      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009684:	bf00      	nop
 8009686:	e078      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009688:	bf00      	nop
 800968a:	e076      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 800968c:	bf00      	nop
 800968e:	e074      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009690:	bf00      	nop
 8009692:	e072      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009694:	bf00      	nop
 8009696:	e070      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009698:	bf00      	nop
 800969a:	e06e      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 800969c:	bf00      	nop
 800969e:	e06c      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 80096a0:	bf00      	nop
 80096a2:	e06a      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 80096a4:	bf00      	nop
 80096a6:	e068      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 80096a8:	bf00      	nop
 80096aa:	e066      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 80096ac:	bf00      	nop
 80096ae:	e064      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 80096b0:	bf00      	nop
 80096b2:	e062      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 80096b4:	bf00      	nop
 80096b6:	e060      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 80096b8:	bf00      	nop
 80096ba:	e05e      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 80096bc:	bf00      	nop
 80096be:	e05c      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 80096c0:	bf00      	nop
 80096c2:	e05a      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 80096c4:	bf00      	nop
 80096c6:	e058      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 80096c8:	bf00      	nop
 80096ca:	e056      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
 80096cc:	20000610 	.word	0x20000610
 80096d0:	20000614 	.word	0x20000614
 80096d4:	20000608 	.word	0x20000608
 80096d8:	2000060c 	.word	0x2000060c
 80096dc:	20000618 	.word	0x20000618
 80096e0:	2000061c 	.word	0x2000061c
 80096e4:	20000620 	.word	0x20000620
 80096e8:	20000624 	.word	0x20000624
 80096ec:	20000628 	.word	0x20000628
 80096f0:	2000062c 	.word	0x2000062c
 80096f4:	20000634 	.word	0x20000634
 80096f8:	20000630 	.word	0x20000630
 80096fc:	20000654 	.word	0x20000654
 8009700:	20000658 	.word	0x20000658
 8009704:	2000068c 	.word	0x2000068c
 8009708:	20000690 	.word	0x20000690
    break;
 800970c:	bf00      	nop
 800970e:	e034      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009710:	bf00      	nop
 8009712:	e032      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009714:	bf00      	nop
 8009716:	e030      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009718:	bf00      	nop
 800971a:	e02e      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 800971c:	bf00      	nop
 800971e:	e02c      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009720:	bf00      	nop
 8009722:	e02a      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009724:	bf00      	nop
 8009726:	e028      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009728:	bf00      	nop
 800972a:	e026      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 800972c:	bf00      	nop
 800972e:	e024      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009730:	bf00      	nop
 8009732:	e022      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009734:	bf00      	nop
 8009736:	e020      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009738:	bf00      	nop
 800973a:	e01e      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 800973c:	bf00      	nop
 800973e:	e01c      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009740:	bf00      	nop
 8009742:	e01a      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009744:	bf00      	nop
 8009746:	e018      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009748:	bf00      	nop
 800974a:	e016      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 800974c:	bf00      	nop
 800974e:	e014      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009750:	bf00      	nop
 8009752:	e012      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009754:	bf00      	nop
 8009756:	e010      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009758:	bf00      	nop
 800975a:	e00e      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 800975c:	bf00      	nop
 800975e:	e00c      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009760:	bf00      	nop
 8009762:	e00a      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009764:	bf00      	nop
 8009766:	e008      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
      break;
 8009768:	bf00      	nop
 800976a:	e006      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 800976c:	bf00      	nop
 800976e:	e004      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009770:	bf00      	nop
 8009772:	e002      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009774:	bf00      	nop
 8009776:	e000      	b.n	800977a <OpenThread_CallBack_Processing+0x9aa>
    break;
 8009778:	bf00      	nop
  }

  TL_THREAD_SendAck();
 800977a:	f000 fdad 	bl	800a2d8 <TL_THREAD_SendAck>
  return status;
 800977e:	79fb      	ldrb	r3, [r7, #7]

}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bdb0      	pop	{r4, r5, r7, pc}

08009788 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8009794:	f7f7 ff7c 	bl	8001690 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009798:	f7f7 ff00 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 800979c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80097a6:	701a      	strb	r2, [r3, #0]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f042 0202 	orr.w	r2, r2, #2
 80097ae:	705a      	strb	r2, [r3, #1]
 80097b0:	2200      	movs	r2, #0
 80097b2:	709a      	strb	r2, [r3, #2]
 80097b4:	2200      	movs	r2, #0
 80097b6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f042 0201 	orr.w	r2, r2, #1
 80097c0:	711a      	strb	r2, [r3, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	715a      	strb	r2, [r3, #5]
 80097c6:	2200      	movs	r2, #0
 80097c8:	719a      	strb	r2, [r3, #6]
 80097ca:	2200      	movs	r2, #0
 80097cc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 80097ce:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80097d6:	f7f7 ff29 	bl	800162c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80097da:	f7f7 feeb 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80097de:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	b2db      	uxtb	r3, r3
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b086      	sub	sp, #24
 80097f2:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80097f4:	1d3b      	adds	r3, r7, #4
 80097f6:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	2200      	movs	r2, #0
 80097fc:	2100      	movs	r1, #0
 80097fe:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8009802:	f000 f957 	bl	8009ab4 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	330b      	adds	r3, #11
 800980a:	78db      	ldrb	r3, [r3, #3]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800981e:	f107 030c 	add.w	r3, r7, #12
 8009822:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8009828:	f107 020c 	add.w	r2, r7, #12
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	2101      	movs	r1, #1
 8009830:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8009834:	f000 f93e 	bl	8009ab4 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	330b      	adds	r3, #11
 800983c:	78db      	ldrb	r3, [r3, #3]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b088      	sub	sp, #32
 800984a:	af00      	add	r7, sp, #0
 800984c:	4603      	mov	r3, r0
 800984e:	460a      	mov	r2, r1
 8009850:	71fb      	strb	r3, [r7, #7]
 8009852:	4613      	mov	r3, r2
 8009854:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009856:	f107 030c 	add.w	r3, r7, #12
 800985a:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800985c:	79fb      	ldrb	r3, [r7, #7]
 800985e:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 8009860:	79bb      	ldrb	r3, [r7, #6]
 8009862:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 8009864:	f107 020c 	add.w	r2, r7, #12
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	2102      	movs	r1, #2
 800986c:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 8009870:	f000 f920 	bl	8009ab4 <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	330b      	adds	r3, #11
 8009878:	78db      	ldrb	r3, [r3, #3]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3720      	adds	r7, #32
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009884:	b480      	push	{r7}
 8009886:	b08b      	sub	sp, #44	; 0x2c
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009890:	2300      	movs	r3, #0
 8009892:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009898:	2300      	movs	r3, #0
 800989a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80098a4:	2300      	movs	r3, #0
 80098a6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80098ac:	4b4a      	ldr	r3, [pc, #296]	; (80099d8 <SHCI_GetWirelessFwInfo+0x154>)
 80098ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80098b4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80098be:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a44      	ldr	r2, [pc, #272]	; (80099dc <SHCI_GetWirelessFwInfo+0x158>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d10f      	bne.n	80098f0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	69db      	ldr	r3, [r3, #28]
 80098e0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	617b      	str	r3, [r7, #20]
 80098ee:	e01a      	b.n	8009926 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80098f8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80098fc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	0e1b      	lsrs	r3, r3, #24
 800992a:	b2da      	uxtb	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	0c1b      	lsrs	r3, r3, #16
 8009934:	b2da      	uxtb	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	0a1b      	lsrs	r3, r3, #8
 800993e:	b2da      	uxtb	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	091b      	lsrs	r3, r3, #4
 8009948:	b2db      	uxtb	r3, r3
 800994a:	f003 030f 	and.w	r3, r3, #15
 800994e:	b2da      	uxtb	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	b2db      	uxtb	r3, r3
 8009958:	f003 030f 	and.w	r3, r3, #15
 800995c:	b2da      	uxtb	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	0e1b      	lsrs	r3, r3, #24
 8009966:	b2da      	uxtb	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	0c1b      	lsrs	r3, r3, #16
 8009970:	b2da      	uxtb	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	0a1b      	lsrs	r3, r3, #8
 800997a:	b2da      	uxtb	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	b2da      	uxtb	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	b2da      	uxtb	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	0e1b      	lsrs	r3, r3, #24
 8009994:	b2da      	uxtb	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	0c1b      	lsrs	r3, r3, #16
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	0a1b      	lsrs	r3, r3, #8
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	0e1b      	lsrs	r3, r3, #24
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	0c1b      	lsrs	r3, r3, #16
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	372c      	adds	r7, #44	; 0x2c
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	58004000 	.word	0x58004000
 80099dc:	a94656b9 	.word	0xa94656b9

080099e0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	4a08      	ldr	r2, [pc, #32]	; (8009a10 <shci_init+0x30>)
 80099f0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80099f2:	4a08      	ldr	r2, [pc, #32]	; (8009a14 <shci_init+0x34>)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80099f8:	4806      	ldr	r0, [pc, #24]	; (8009a14 <shci_init+0x34>)
 80099fa:	f000 f911 	bl	8009c20 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 f894 	bl	8009b30 <TlInit>

  return;
 8009a08:	bf00      	nop
}
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	200006b4 	.word	0x200006b4
 8009a14:	20000694 	.word	0x20000694

08009a18 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009a1e:	4822      	ldr	r0, [pc, #136]	; (8009aa8 <shci_user_evt_proc+0x90>)
 8009a20:	f001 f86e 	bl	800ab00 <LST_is_empty>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d12b      	bne.n	8009a82 <shci_user_evt_proc+0x6a>
 8009a2a:	4b20      	ldr	r3, [pc, #128]	; (8009aac <shci_user_evt_proc+0x94>)
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d027      	beq.n	8009a82 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009a32:	f107 030c 	add.w	r3, r7, #12
 8009a36:	4619      	mov	r1, r3
 8009a38:	481b      	ldr	r0, [pc, #108]	; (8009aa8 <shci_user_evt_proc+0x90>)
 8009a3a:	f001 f8f0 	bl	800ac1e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009a3e:	4b1c      	ldr	r3, [pc, #112]	; (8009ab0 <shci_user_evt_proc+0x98>)
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00c      	beq.n	8009a60 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009a4e:	4b18      	ldr	r3, [pc, #96]	; (8009ab0 <shci_user_evt_proc+0x98>)
 8009a50:	69db      	ldr	r3, [r3, #28]
 8009a52:	1d3a      	adds	r2, r7, #4
 8009a54:	4610      	mov	r0, r2
 8009a56:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009a58:	793a      	ldrb	r2, [r7, #4]
 8009a5a:	4b14      	ldr	r3, [pc, #80]	; (8009aac <shci_user_evt_proc+0x94>)
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	e002      	b.n	8009a66 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009a60:	4b12      	ldr	r3, [pc, #72]	; (8009aac <shci_user_evt_proc+0x94>)
 8009a62:	2201      	movs	r2, #1
 8009a64:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009a66:	4b11      	ldr	r3, [pc, #68]	; (8009aac <shci_user_evt_proc+0x94>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d004      	beq.n	8009a78 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fcad 	bl	800a3d0 <TL_MM_EvtDone>
 8009a76:	e004      	b.n	8009a82 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	480a      	ldr	r0, [pc, #40]	; (8009aa8 <shci_user_evt_proc+0x90>)
 8009a7e:	f001 f861 	bl	800ab44 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009a82:	4809      	ldr	r0, [pc, #36]	; (8009aa8 <shci_user_evt_proc+0x90>)
 8009a84:	f001 f83c 	bl	800ab00 <LST_is_empty>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d107      	bne.n	8009a9e <shci_user_evt_proc+0x86>
 8009a8e:	4b07      	ldr	r3, [pc, #28]	; (8009aac <shci_user_evt_proc+0x94>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009a96:	4804      	ldr	r0, [pc, #16]	; (8009aa8 <shci_user_evt_proc+0x90>)
 8009a98:	f7f8 fcec 	bl	8002474 <shci_notify_asynch_evt>
  }


  return;
 8009a9c:	bf00      	nop
 8009a9e:	bf00      	nop
}
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	200000a4 	.word	0x200000a4
 8009aac:	200000b4 	.word	0x200000b4
 8009ab0:	20000694 	.word	0x20000694

08009ab4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60ba      	str	r2, [r7, #8]
 8009abc:	607b      	str	r3, [r7, #4]
 8009abe:	4603      	mov	r3, r0
 8009ac0:	81fb      	strh	r3, [r7, #14]
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	f000 f864 	bl	8009b94 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009acc:	4b16      	ldr	r3, [pc, #88]	; (8009b28 <shci_send+0x74>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	89fa      	ldrh	r2, [r7, #14]
 8009ad2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009ad6:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <shci_send+0x74>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	7b7a      	ldrb	r2, [r7, #13]
 8009adc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009ade:	4b12      	ldr	r3, [pc, #72]	; (8009b28 <shci_send+0x74>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	330c      	adds	r3, #12
 8009ae4:	7b7a      	ldrb	r2, [r7, #13]
 8009ae6:	68b9      	ldr	r1, [r7, #8]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f001 f921 	bl	800ad30 <memcpy>

  shciContext.io.Send(0,0);
 8009aee:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <shci_send+0x78>)
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	2100      	movs	r1, #0
 8009af4:	2000      	movs	r0, #0
 8009af6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009af8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009afc:	f7f8 fcd1 	bl	80024a2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f103 0008 	add.w	r0, r3, #8
 8009b06:	4b08      	ldr	r3, [pc, #32]	; (8009b28 <shci_send+0x74>)
 8009b08:	6819      	ldr	r1, [r3, #0]
 8009b0a:	4b07      	ldr	r3, [pc, #28]	; (8009b28 <shci_send+0x74>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	789b      	ldrb	r3, [r3, #2]
 8009b10:	3303      	adds	r3, #3
 8009b12:	461a      	mov	r2, r3
 8009b14:	f001 f90c 	bl	800ad30 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009b18:	2001      	movs	r0, #1
 8009b1a:	f000 f83b 	bl	8009b94 <Cmd_SetStatus>

  return;
 8009b1e:	bf00      	nop
}
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	200000b0 	.word	0x200000b0
 8009b2c:	20000694 	.word	0x20000694

08009b30 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009b38:	4a10      	ldr	r2, [pc, #64]	; (8009b7c <TlInit+0x4c>)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009b3e:	4810      	ldr	r0, [pc, #64]	; (8009b80 <TlInit+0x50>)
 8009b40:	f000 ffce 	bl	800aae0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009b44:	2001      	movs	r0, #1
 8009b46:	f000 f825 	bl	8009b94 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009b4a:	4b0e      	ldr	r3, [pc, #56]	; (8009b84 <TlInit+0x54>)
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009b50:	4b0d      	ldr	r3, [pc, #52]	; (8009b88 <TlInit+0x58>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00c      	beq.n	8009b72 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009b5c:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <TlInit+0x5c>)
 8009b5e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009b60:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <TlInit+0x60>)
 8009b62:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009b64:	4b08      	ldr	r3, [pc, #32]	; (8009b88 <TlInit+0x58>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f107 020c 	add.w	r2, r7, #12
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	4798      	blx	r3
  }

  return;
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
}
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	200000b0 	.word	0x200000b0
 8009b80:	200000a4 	.word	0x200000a4
 8009b84:	200000b4 	.word	0x200000b4
 8009b88:	20000694 	.word	0x20000694
 8009b8c:	08009be5 	.word	0x08009be5
 8009b90:	08009bfd 	.word	0x08009bfd

08009b94 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009b9e:	79fb      	ldrb	r3, [r7, #7]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10b      	bne.n	8009bbc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009ba4:	4b0d      	ldr	r3, [pc, #52]	; (8009bdc <Cmd_SetStatus+0x48>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <Cmd_SetStatus+0x48>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <Cmd_SetStatus+0x4c>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009bba:	e00b      	b.n	8009bd4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009bbc:	4b08      	ldr	r3, [pc, #32]	; (8009be0 <Cmd_SetStatus+0x4c>)
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009bc2:	4b06      	ldr	r3, [pc, #24]	; (8009bdc <Cmd_SetStatus+0x48>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d004      	beq.n	8009bd4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009bca:	4b04      	ldr	r3, [pc, #16]	; (8009bdc <Cmd_SetStatus+0x48>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2001      	movs	r0, #1
 8009bd0:	4798      	blx	r3
  return;
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
}
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	200006b4 	.word	0x200006b4
 8009be0:	200000ac 	.word	0x200000ac

08009be4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009bec:	2000      	movs	r0, #0
 8009bee:	f7f8 fc4d 	bl	800248c <shci_cmd_resp_release>

  return;
 8009bf2:	bf00      	nop
}
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
	...

08009bfc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	4805      	ldr	r0, [pc, #20]	; (8009c1c <TlUserEvtReceived+0x20>)
 8009c08:	f000 ffc2 	bl	800ab90 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009c0c:	4803      	ldr	r0, [pc, #12]	; (8009c1c <TlUserEvtReceived+0x20>)
 8009c0e:	f7f8 fc31 	bl	8002474 <shci_notify_asynch_evt>

  return;
 8009c12:	bf00      	nop
}
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	200000a4 	.word	0x200000a4

08009c20 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a05      	ldr	r2, [pc, #20]	; (8009c40 <shci_register_io_bus+0x20>)
 8009c2c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a04      	ldr	r2, [pc, #16]	; (8009c44 <shci_register_io_bus+0x24>)
 8009c32:	611a      	str	r2, [r3, #16]

  return;
 8009c34:	bf00      	nop
}
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	0800a181 	.word	0x0800a181
 8009c44:	0800a1d5 	.word	0x0800a1d5

08009c48 <otSrpClientEnableAutoStartMode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
void otSrpClientEnableAutoStartMode(otInstance *aInstance, otSrpClientAutoStartCallback aCallback, void *aContext)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 8009c54:	f7f7 fd1c 	bl	8001690 <Pre_OtCmdProcessing>

  otSrpClientAutoStartCb = aCallback;
 8009c58:	4a14      	ldr	r2, [pc, #80]	; (8009cac <otSrpClientEnableAutoStartMode+0x64>)
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	6013      	str	r3, [r2, #0]

  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009c5e:	f7f7 fc9d 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8009c62:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ENABLE_AUTO_START_MODE;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f062 0234 	orn	r2, r2, #52	; 0x34
 8009c6c:	701a      	strb	r2, [r3, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f042 0201 	orr.w	r2, r2, #1
 8009c74:	705a      	strb	r2, [r3, #1]
 8009c76:	2200      	movs	r2, #0
 8009c78:	709a      	strb	r2, [r3, #2]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f042 0201 	orr.w	r2, r2, #1
 8009c86:	711a      	strb	r2, [r3, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	715a      	strb	r2, [r3, #5]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	719a      	strb	r2, [r3, #6]
 8009c90:	2200      	movs	r2, #0
 8009c92:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aContext;
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	609a      	str	r2, [r3, #8]

  Ot_Cmd_TransferWithNotif();
 8009c9a:	f7f7 fccd 	bl	8001638 <Ot_Cmd_TransferWithNotif>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009c9e:	f7f7 fc89 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009ca2:	6178      	str	r0, [r7, #20]
}
 8009ca4:	bf00      	nop
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20000688 	.word	0x20000688

08009cb0 <otSrpClientSetHostName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otSrpClientHostInfo*)p_ot_req->Data[0];
}

otError otSrpClientSetHostName(otInstance *aInstance, const char *aName)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009cba:	f7f7 fce9 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009cbe:	f7f7 fc6d 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8009cc2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_SET_HOST_NAME;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f062 022a 	orn	r2, r2, #42	; 0x2a
 8009ccc:	701a      	strb	r2, [r3, #0]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f042 0201 	orr.w	r2, r2, #1
 8009cd4:	705a      	strb	r2, [r3, #1]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	709a      	strb	r2, [r3, #2]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f042 0201 	orr.w	r2, r2, #1
 8009ce6:	711a      	strb	r2, [r3, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	715a      	strb	r2, [r3, #5]
 8009cec:	2200      	movs	r2, #0
 8009cee:	719a      	strb	r2, [r3, #6]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aName;
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009cfa:	f7f7 fc97 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009cfe:	f7f7 fc59 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009d02:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	b2db      	uxtb	r3, r3
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <otSrpClientEnableAutoHostAddress>:

otError otSrpClientEnableAutoHostAddress(otInstance *aInstance)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009d1a:	f7f7 fcb9 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d1e:	f7f7 fc3d 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8009d22:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ENABLE_AUTO_HOST_ADDRESS;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f062 0229 	orn	r2, r2, #41	; 0x29
 8009d2c:	701a      	strb	r2, [r3, #0]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f042 0201 	orr.w	r2, r2, #1
 8009d34:	705a      	strb	r2, [r3, #1]
 8009d36:	2200      	movs	r2, #0
 8009d38:	709a      	strb	r2, [r3, #2]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	711a      	strb	r2, [r3, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	715a      	strb	r2, [r3, #5]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	719a      	strb	r2, [r3, #6]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8009d50:	f7f7 fc6c 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009d54:	f7f7 fc2e 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009d58:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	b2db      	uxtb	r3, r3
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <otSrpClientAddService>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otSrpClientAddService(otInstance *aInstance, otSrpClientService *aService)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009d72:	f7f7 fc8d 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d76:	f7f7 fc11 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8009d7a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ADD_SERVICE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f062 0227 	orn	r2, r2, #39	; 0x27
 8009d84:	701a      	strb	r2, [r3, #0]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f042 0201 	orr.w	r2, r2, #1
 8009d8c:	705a      	strb	r2, [r3, #1]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	709a      	strb	r2, [r3, #2]
 8009d92:	2200      	movs	r2, #0
 8009d94:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f042 0201 	orr.w	r2, r2, #1
 8009d9e:	711a      	strb	r2, [r3, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	715a      	strb	r2, [r3, #5]
 8009da4:	2200      	movs	r2, #0
 8009da6:	719a      	strb	r2, [r3, #6]
 8009da8:	2200      	movs	r2, #0
 8009daa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aService;
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009db2:	f7f7 fc3b 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009db6:	f7f7 fbfd 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009dba:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	b2db      	uxtb	r3, r3
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <otSrpClientBuffersGetHostNameString>:
#if OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_ENABLE

#include "srp_client_buffers.h"

char *otSrpClientBuffersGetHostNameString(otInstance *aInstance, uint16_t *aSize)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009dd4:	f7f7 fc5c 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009dd8:	f7f7 fbe0 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8009ddc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_HOST_NAME_STRING;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f062 021c 	orn	r2, r2, #28
 8009de6:	701a      	strb	r2, [r3, #0]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f042 0201 	orr.w	r2, r2, #1
 8009dee:	705a      	strb	r2, [r3, #1]
 8009df0:	2200      	movs	r2, #0
 8009df2:	709a      	strb	r2, [r3, #2]
 8009df4:	2200      	movs	r2, #0
 8009df6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f042 0201 	orr.w	r2, r2, #1
 8009e00:	711a      	strb	r2, [r3, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	715a      	strb	r2, [r3, #5]
 8009e06:	2200      	movs	r2, #0
 8009e08:	719a      	strb	r2, [r3, #6]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSize;
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009e14:	f7f7 fc0a 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e18:	f7f7 fbcc 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e1c:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	689b      	ldr	r3, [r3, #8]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <otSrpClientBuffersAllocateService>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otIp6Address*)p_ot_req->Data[0];
}

otSrpClientBuffersServiceEntry *otSrpClientBuffersAllocateService(otInstance *aInstance)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009e32:	f7f7 fc2d 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e36:	f7f7 fbb1 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8009e3a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_ALLOCATE_SERVICE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f062 021a 	orn	r2, r2, #26
 8009e44:	701a      	strb	r2, [r3, #0]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f042 0201 	orr.w	r2, r2, #1
 8009e4c:	705a      	strb	r2, [r3, #1]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	709a      	strb	r2, [r3, #2]
 8009e52:	2200      	movs	r2, #0
 8009e54:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	711a      	strb	r2, [r3, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	715a      	strb	r2, [r3, #5]
 8009e60:	2200      	movs	r2, #0
 8009e62:	719a      	strb	r2, [r3, #6]
 8009e64:	2200      	movs	r2, #0
 8009e66:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8009e68:	f7f7 fbe0 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e6c:	f7f7 fba2 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e70:	60f8      	str	r0, [r7, #12]
  return (otSrpClientBuffersServiceEntry*)p_ot_req->Data[0];
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	689b      	ldr	r3, [r3, #8]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <otSrpClientBuffersGetServiceEntryServiceNameString>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

char *otSrpClientBuffersGetServiceEntryServiceNameString(otSrpClientBuffersServiceEntry *aEntry, uint16_t *aSize)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009e88:	f7f7 fc02 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e8c:	f7f7 fb86 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8009e90:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_SERVICE_ENTRY_SERVICE_NAME_STRING;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f062 0217 	orn	r2, r2, #23
 8009e9a:	701a      	strb	r2, [r3, #0]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f042 0201 	orr.w	r2, r2, #1
 8009ea2:	705a      	strb	r2, [r3, #1]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	709a      	strb	r2, [r3, #2]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f042 0202 	orr.w	r2, r2, #2
 8009eb4:	711a      	strb	r2, [r3, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	715a      	strb	r2, [r3, #5]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	719a      	strb	r2, [r3, #6]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aEntry;
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aSize;
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8009ece:	f7f7 fbad 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ed2:	f7f7 fb6f 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009ed6:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	689b      	ldr	r3, [r3, #8]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <otSrpClientBuffersGetServiceEntryInstanceNameString>:

char *otSrpClientBuffersGetServiceEntryInstanceNameString(otSrpClientBuffersServiceEntry *aEntry, uint16_t *aSize)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009eee:	f7f7 fbcf 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009ef2:	f7f7 fb53 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8009ef6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_SERVICE_ENTRY_INSTANCE_NAME_STRING;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f062 0216 	orn	r2, r2, #22
 8009f00:	701a      	strb	r2, [r3, #0]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f042 0201 	orr.w	r2, r2, #1
 8009f08:	705a      	strb	r2, [r3, #1]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	709a      	strb	r2, [r3, #2]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f042 0202 	orr.w	r2, r2, #2
 8009f1a:	711a      	strb	r2, [r3, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	715a      	strb	r2, [r3, #5]
 8009f20:	2200      	movs	r2, #0
 8009f22:	719a      	strb	r2, [r3, #6]
 8009f24:	2200      	movs	r2, #0
 8009f26:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aEntry;
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aSize;
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8009f34:	f7f7 fb7a 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f38:	f7f7 fb3c 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f3c:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	689b      	ldr	r3, [r3, #8]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	460b      	mov	r3, r1
 8009f54:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8009f56:	f7f7 fb9b 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f5a:	f7f7 fb1f 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8009f5e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009f68:	701a      	strb	r2, [r3, #0]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	705a      	strb	r2, [r3, #1]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	709a      	strb	r2, [r3, #2]
 8009f72:	2200      	movs	r2, #0
 8009f74:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f042 0201 	orr.w	r2, r2, #1
 8009f7e:	711a      	strb	r2, [r3, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	715a      	strb	r2, [r3, #5]
 8009f84:	2200      	movs	r2, #0
 8009f86:	719a      	strb	r2, [r3, #6]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009f92:	f7f7 fb4b 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f96:	f7f7 fb0d 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f9a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	b2db      	uxtb	r3, r3
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009fb4:	f7f7 fb6c 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009fb8:	f7f7 faf0 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 8009fbc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 8009fc6:	701a      	strb	r2, [r3, #0]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	705a      	strb	r2, [r3, #1]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	709a      	strb	r2, [r3, #2]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f042 0203 	orr.w	r2, r2, #3
 8009fdc:	711a      	strb	r2, [r3, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	715a      	strb	r2, [r3, #5]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	719a      	strb	r2, [r3, #6]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 8009fea:	783b      	ldrb	r3, [r7, #0]
 8009fec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 8009ff8:	783b      	ldrb	r3, [r7, #0]
 8009ffa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	461a      	mov	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 800a006:	783b      	ldrb	r3, [r7, #0]
 800a008:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	461a      	mov	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800a014:	f7f7 fb0a 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a018:	f7f7 facc 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a01c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	b2db      	uxtb	r3, r3
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <otThreadGetParentLastRssi>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otThreadGetParentLastRssi(otInstance *aInstance, int8_t *aLastRssi)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a036:	f7f7 fb2b 	bl	8001690 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a03a:	f7f7 faaf 	bl	800159c <THREAD_Get_OTCmdPayloadBuffer>
 800a03e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_PARENT_LAST_RSSI;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f062 0270 	orn	r2, r2, #112	; 0x70
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	2200      	movs	r2, #0
 800a04c:	705a      	strb	r2, [r3, #1]
 800a04e:	2200      	movs	r2, #0
 800a050:	709a      	strb	r2, [r3, #2]
 800a052:	2200      	movs	r2, #0
 800a054:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	f042 0201 	orr.w	r2, r2, #1
 800a05e:	711a      	strb	r2, [r3, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	715a      	strb	r2, [r3, #5]
 800a064:	2200      	movs	r2, #0
 800a066:	719a      	strb	r2, [r3, #6]
 800a068:	2200      	movs	r2, #0
 800a06a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aLastRssi;
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a072:	f7f7 fadb 	bl	800162c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a076:	f7f7 fa9d 	bl	80015b4 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a07a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	b2db      	uxtb	r3, r3
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a08e:	f7f7 fd53 	bl	8001b38 <HW_IPCC_Enable>

  return;
 800a092:	bf00      	nop
}
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <TL_Init>:


void TL_Init( void )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a09c:	4b10      	ldr	r3, [pc, #64]	; (800a0e0 <TL_Init+0x48>)
 800a09e:	4a11      	ldr	r2, [pc, #68]	; (800a0e4 <TL_Init+0x4c>)
 800a0a0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a0a2:	4b0f      	ldr	r3, [pc, #60]	; (800a0e0 <TL_Init+0x48>)
 800a0a4:	4a10      	ldr	r2, [pc, #64]	; (800a0e8 <TL_Init+0x50>)
 800a0a6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a0a8:	4b0d      	ldr	r3, [pc, #52]	; (800a0e0 <TL_Init+0x48>)
 800a0aa:	4a10      	ldr	r2, [pc, #64]	; (800a0ec <TL_Init+0x54>)
 800a0ac:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a0ae:	4b0c      	ldr	r3, [pc, #48]	; (800a0e0 <TL_Init+0x48>)
 800a0b0:	4a0f      	ldr	r2, [pc, #60]	; (800a0f0 <TL_Init+0x58>)
 800a0b2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a0b4:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <TL_Init+0x48>)
 800a0b6:	4a0f      	ldr	r2, [pc, #60]	; (800a0f4 <TL_Init+0x5c>)
 800a0b8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a0ba:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <TL_Init+0x48>)
 800a0bc:	4a0e      	ldr	r2, [pc, #56]	; (800a0f8 <TL_Init+0x60>)
 800a0be:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a0c0:	4b07      	ldr	r3, [pc, #28]	; (800a0e0 <TL_Init+0x48>)
 800a0c2:	4a0e      	ldr	r2, [pc, #56]	; (800a0fc <TL_Init+0x64>)
 800a0c4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a0c6:	4b06      	ldr	r3, [pc, #24]	; (800a0e0 <TL_Init+0x48>)
 800a0c8:	4a0d      	ldr	r2, [pc, #52]	; (800a100 <TL_Init+0x68>)
 800a0ca:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a0cc:	4b04      	ldr	r3, [pc, #16]	; (800a0e0 <TL_Init+0x48>)
 800a0ce:	4a0d      	ldr	r2, [pc, #52]	; (800a104 <TL_Init+0x6c>)
 800a0d0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a0d2:	4b03      	ldr	r3, [pc, #12]	; (800a0e0 <TL_Init+0x48>)
 800a0d4:	4a0c      	ldr	r2, [pc, #48]	; (800a108 <TL_Init+0x70>)
 800a0d6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a0d8:	f7f7 fd42 	bl	8001b60 <HW_IPCC_Init>

  return;
 800a0dc:	bf00      	nop
}
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	20030000 	.word	0x20030000
 800a0e4:	20030038 	.word	0x20030038
 800a0e8:	20030058 	.word	0x20030058
 800a0ec:	20030068 	.word	0x20030068
 800a0f0:	20030078 	.word	0x20030078
 800a0f4:	20030080 	.word	0x20030080
 800a0f8:	20030088 	.word	0x20030088
 800a0fc:	20030090 	.word	0x20030090
 800a100:	200300ac 	.word	0x200300ac
 800a104:	200300b0 	.word	0x200300b0
 800a108:	200300bc 	.word	0x200300bc

0800a10c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a112:	e01c      	b.n	800a14e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a114:	1d3b      	adds	r3, r7, #4
 800a116:	4619      	mov	r1, r3
 800a118:	4812      	ldr	r0, [pc, #72]	; (800a164 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a11a:	f000 fd80 	bl	800ac1e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	7a5b      	ldrb	r3, [r3, #9]
 800a122:	2b0f      	cmp	r3, #15
 800a124:	d003      	beq.n	800a12e <HW_IPCC_BLE_RxEvtNot+0x22>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	7a5b      	ldrb	r3, [r3, #9]
 800a12a:	2b0e      	cmp	r3, #14
 800a12c:	d105      	bne.n	800a13a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4619      	mov	r1, r3
 800a132:	2002      	movs	r0, #2
 800a134:	f000 f9b0 	bl	800a498 <OutputDbgTrace>
 800a138:	e004      	b.n	800a144 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4619      	mov	r1, r3
 800a13e:	2003      	movs	r0, #3
 800a140:	f000 f9aa 	bl	800a498 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a144:	4b08      	ldr	r3, [pc, #32]	; (800a168 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	4610      	mov	r0, r2
 800a14c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a14e:	4805      	ldr	r0, [pc, #20]	; (800a164 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a150:	f000 fcd6 	bl	800ab00 <LST_is_empty>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0dc      	beq.n	800a114 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a15a:	bf00      	nop
}
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	200300d8 	.word	0x200300d8
 800a168:	200006c0 	.word	0x200006c0

0800a16c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a170:	4b02      	ldr	r3, [pc, #8]	; (800a17c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4798      	blx	r3

  return;
 800a176:	bf00      	nop
}
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	200006c4 	.word	0x200006c4

0800a180 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a18c:	480d      	ldr	r0, [pc, #52]	; (800a1c4 <TL_SYS_Init+0x44>)
 800a18e:	f000 fca7 	bl	800aae0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a192:	4b0d      	ldr	r3, [pc, #52]	; (800a1c8 <TL_SYS_Init+0x48>)
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	4a08      	ldr	r2, [pc, #32]	; (800a1c4 <TL_SYS_Init+0x44>)
 800a1a4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a1a6:	f7f7 fd09 	bl	8001bbc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a07      	ldr	r2, [pc, #28]	; (800a1cc <TL_SYS_Init+0x4c>)
 800a1b0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	4a06      	ldr	r2, [pc, #24]	; (800a1d0 <TL_SYS_Init+0x50>)
 800a1b8:	6013      	str	r3, [r2, #0]

  return 0;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	200300e0 	.word	0x200300e0
 800a1c8:	20030000 	.word	0x20030000
 800a1cc:	200006c8 	.word	0x200006c8
 800a1d0:	200006cc 	.word	0x200006cc

0800a1d4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a1e0:	4b09      	ldr	r3, [pc, #36]	; (800a208 <TL_SYS_SendCmd+0x34>)
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2210      	movs	r2, #16
 800a1e8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a1ea:	4b07      	ldr	r3, [pc, #28]	; (800a208 <TL_SYS_SendCmd+0x34>)
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	2004      	movs	r0, #4
 800a1f4:	f000 f950 	bl	800a498 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a1f8:	f7f7 fcea 	bl	8001bd0 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20030000 	.word	0x20030000

0800a20c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a210:	4b07      	ldr	r3, [pc, #28]	; (800a230 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4619      	mov	r1, r3
 800a218:	2005      	movs	r0, #5
 800a21a:	f000 f93d 	bl	800a498 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a21e:	4b05      	ldr	r3, [pc, #20]	; (800a234 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a03      	ldr	r2, [pc, #12]	; (800a230 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a224:	68d2      	ldr	r2, [r2, #12]
 800a226:	6812      	ldr	r2, [r2, #0]
 800a228:	4610      	mov	r0, r2
 800a22a:	4798      	blx	r3

  return;
 800a22c:	bf00      	nop
}
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20030000 	.word	0x20030000
 800a234:	200006c8 	.word	0x200006c8

0800a238 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a23e:	e00e      	b.n	800a25e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a240:	1d3b      	adds	r3, r7, #4
 800a242:	4619      	mov	r1, r3
 800a244:	480b      	ldr	r0, [pc, #44]	; (800a274 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a246:	f000 fcea 	bl	800ac1e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4619      	mov	r1, r3
 800a24e:	2006      	movs	r0, #6
 800a250:	f000 f922 	bl	800a498 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a254:	4b08      	ldr	r3, [pc, #32]	; (800a278 <HW_IPCC_SYS_EvtNot+0x40>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	4610      	mov	r0, r2
 800a25c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a25e:	4805      	ldr	r0, [pc, #20]	; (800a274 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a260:	f000 fc4e 	bl	800ab00 <LST_is_empty>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0ea      	beq.n	800a240 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a26a:	bf00      	nop
}
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	200300e0 	.word	0x200300e0
 800a278:	200006cc 	.word	0x200006cc

0800a27c <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800a284:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <TL_THREAD_Init+0x3c>)
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	689a      	ldr	r2, [r3, #8]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800a2aa:	f7f7 fcb7 	bl	8001c1c <HW_IPCC_THREAD_Init>

  return;
 800a2ae:	bf00      	nop
}
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20030000 	.word	0x20030000

0800a2bc <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800a2c0:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <TL_OT_SendCmd+0x18>)
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	2208      	movs	r2, #8
 800a2c8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800a2ca:	f7f7 fcb5 	bl	8001c38 <HW_IPCC_OT_SendCmd>

  return;
 800a2ce:	bf00      	nop
}
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20030000 	.word	0x20030000

0800a2d8 <TL_THREAD_SendAck>:

  return;
}

void TL_THREAD_SendAck ( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a2dc:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <TL_THREAD_SendAck+0x18>)
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	220d      	movs	r2, #13
 800a2e4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800a2e6:	f7f7 fcb5 	bl	8001c54 <HW_IPCC_THREAD_SendAck>

  return;
 800a2ea:	bf00      	nop
}
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20030000 	.word	0x20030000

0800a2f4 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a2f8:	4b04      	ldr	r3, [pc, #16]	; (800a30c <TL_THREAD_CliSendAck+0x18>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	220d      	movs	r2, #13
 800a300:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800a302:	f7f7 fcb5 	bl	8001c70 <HW_IPCC_THREAD_CliSendAck>

  return;
 800a306:	bf00      	nop
}
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	20030000 	.word	0x20030000

0800a310 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800a314:	4b03      	ldr	r3, [pc, #12]	; (800a324 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7f7 f998 	bl	8001650 <TL_OT_CmdEvtReceived>

  return;
 800a320:	bf00      	nop
}
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20030000 	.word	0x20030000

0800a328 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800a32c:	4b03      	ldr	r3, [pc, #12]	; (800a33c <HW_IPCC_THREAD_EvtNot+0x14>)
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4618      	mov	r0, r3
 800a334:	f7f7 f99c 	bl	8001670 <TL_THREAD_NotReceived>

  return;
 800a338:	bf00      	nop
}
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20030000 	.word	0x20030000

0800a340 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800a344:	4b03      	ldr	r3, [pc, #12]	; (800a354 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7f7 f9f2 	bl	8001734 <TL_THREAD_CliNotReceived>

  return;
 800a350:	bf00      	nop
}
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20030000 	.word	0x20030000

0800a358 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a360:	4817      	ldr	r0, [pc, #92]	; (800a3c0 <TL_MM_Init+0x68>)
 800a362:	f000 fbbd 	bl	800aae0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a366:	4817      	ldr	r0, [pc, #92]	; (800a3c4 <TL_MM_Init+0x6c>)
 800a368:	f000 fbba 	bl	800aae0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a36c:	4b16      	ldr	r3, [pc, #88]	; (800a3c8 <TL_MM_Init+0x70>)
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	4a16      	ldr	r2, [pc, #88]	; (800a3cc <TL_MM_Init+0x74>)
 800a372:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a374:	4b15      	ldr	r3, [pc, #84]	; (800a3cc <TL_MM_Init+0x74>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	6892      	ldr	r2, [r2, #8]
 800a37c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a37e:	4b13      	ldr	r3, [pc, #76]	; (800a3cc <TL_MM_Init+0x74>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	68d2      	ldr	r2, [r2, #12]
 800a386:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a388:	4b10      	ldr	r3, [pc, #64]	; (800a3cc <TL_MM_Init+0x74>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a0c      	ldr	r2, [pc, #48]	; (800a3c0 <TL_MM_Init+0x68>)
 800a38e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a390:	4b0e      	ldr	r3, [pc, #56]	; (800a3cc <TL_MM_Init+0x74>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	6812      	ldr	r2, [r2, #0]
 800a398:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a39a:	4b0c      	ldr	r3, [pc, #48]	; (800a3cc <TL_MM_Init+0x74>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	6852      	ldr	r2, [r2, #4]
 800a3a2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a3a4:	4b09      	ldr	r3, [pc, #36]	; (800a3cc <TL_MM_Init+0x74>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6912      	ldr	r2, [r2, #16]
 800a3ac:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a3ae:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <TL_MM_Init+0x74>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	6952      	ldr	r2, [r2, #20]
 800a3b6:	619a      	str	r2, [r3, #24]

  return;
 800a3b8:	bf00      	nop
}
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	200300c8 	.word	0x200300c8
 800a3c4:	200006b8 	.word	0x200006b8
 800a3c8:	20030000 	.word	0x20030000
 800a3cc:	200006d0 	.word	0x200006d0

0800a3d0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a3d8:	6879      	ldr	r1, [r7, #4]
 800a3da:	4807      	ldr	r0, [pc, #28]	; (800a3f8 <TL_MM_EvtDone+0x28>)
 800a3dc:	f000 fbd8 	bl	800ab90 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a3e0:	6879      	ldr	r1, [r7, #4]
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	f000 f858 	bl	800a498 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a3e8:	4804      	ldr	r0, [pc, #16]	; (800a3fc <TL_MM_EvtDone+0x2c>)
 800a3ea:	f7f7 fc73 	bl	8001cd4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a3ee:	bf00      	nop
}
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	200006b8 	.word	0x200006b8
 800a3fc:	0800a401 	.word	0x0800a401

0800a400 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a406:	e00c      	b.n	800a422 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a408:	1d3b      	adds	r3, r7, #4
 800a40a:	4619      	mov	r1, r3
 800a40c:	480a      	ldr	r0, [pc, #40]	; (800a438 <SendFreeBuf+0x38>)
 800a40e:	f000 fc06 	bl	800ac1e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a412:	4b0a      	ldr	r3, [pc, #40]	; (800a43c <SendFreeBuf+0x3c>)
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	4611      	mov	r1, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 fbb7 	bl	800ab90 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a422:	4805      	ldr	r0, [pc, #20]	; (800a438 <SendFreeBuf+0x38>)
 800a424:	f000 fb6c 	bl	800ab00 <LST_is_empty>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0ec      	beq.n	800a408 <SendFreeBuf+0x8>
  }

  return;
 800a42e:	bf00      	nop
}
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	200006b8 	.word	0x200006b8
 800a43c:	20030000 	.word	0x20030000

0800a440 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a444:	4805      	ldr	r0, [pc, #20]	; (800a45c <TL_TRACES_Init+0x1c>)
 800a446:	f000 fb4b 	bl	800aae0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a44a:	4b05      	ldr	r3, [pc, #20]	; (800a460 <TL_TRACES_Init+0x20>)
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	4a03      	ldr	r2, [pc, #12]	; (800a45c <TL_TRACES_Init+0x1c>)
 800a450:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a452:	f7f7 fc75 	bl	8001d40 <HW_IPCC_TRACES_Init>

  return;
 800a456:	bf00      	nop
}
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	200300d0 	.word	0x200300d0
 800a460:	20030000 	.word	0x20030000

0800a464 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a46a:	e008      	b.n	800a47e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a46c:	1d3b      	adds	r3, r7, #4
 800a46e:	4619      	mov	r1, r3
 800a470:	4808      	ldr	r0, [pc, #32]	; (800a494 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a472:	f000 fbd4 	bl	800ac1e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4618      	mov	r0, r3
 800a47a:	f7f8 f81d 	bl	80024b8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a47e:	4805      	ldr	r0, [pc, #20]	; (800a494 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a480:	f000 fb3e 	bl	800ab00 <LST_is_empty>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0f0      	beq.n	800a46c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a48a:	bf00      	nop
}
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200300d0 	.word	0x200300d0

0800a498 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	4603      	mov	r3, r0
 800a4a0:	6039      	str	r1, [r7, #0]
 800a4a2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a4a4:	79fb      	ldrb	r3, [r7, #7]
 800a4a6:	2b06      	cmp	r3, #6
 800a4a8:	d845      	bhi.n	800a536 <OutputDbgTrace+0x9e>
 800a4aa:	a201      	add	r2, pc, #4	; (adr r2, 800a4b0 <OutputDbgTrace+0x18>)
 800a4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b0:	0800a4cd 	.word	0x0800a4cd
 800a4b4:	0800a4f1 	.word	0x0800a4f1
 800a4b8:	0800a4f7 	.word	0x0800a4f7
 800a4bc:	0800a50b 	.word	0x0800a50b
 800a4c0:	0800a517 	.word	0x0800a517
 800a4c4:	0800a51d 	.word	0x0800a51d
 800a4c8:	0800a52b 	.word	0x0800a52b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	7a5b      	ldrb	r3, [r3, #9]
 800a4d4:	2bff      	cmp	r3, #255	; 0xff
 800a4d6:	d005      	beq.n	800a4e4 <OutputDbgTrace+0x4c>
 800a4d8:	2bff      	cmp	r3, #255	; 0xff
 800a4da:	dc05      	bgt.n	800a4e8 <OutputDbgTrace+0x50>
 800a4dc:	2b0e      	cmp	r3, #14
 800a4de:	d005      	beq.n	800a4ec <OutputDbgTrace+0x54>
 800a4e0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a4e2:	e001      	b.n	800a4e8 <OutputDbgTrace+0x50>
          break;
 800a4e4:	bf00      	nop
 800a4e6:	e027      	b.n	800a538 <OutputDbgTrace+0xa0>
          break;
 800a4e8:	bf00      	nop
 800a4ea:	e025      	b.n	800a538 <OutputDbgTrace+0xa0>
          break;
 800a4ec:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a4ee:	e023      	b.n	800a538 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a4f4:	e020      	b.n	800a538 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	7a5b      	ldrb	r3, [r3, #9]
 800a4fe:	2b0e      	cmp	r3, #14
 800a500:	d001      	beq.n	800a506 <OutputDbgTrace+0x6e>
 800a502:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a504:	e000      	b.n	800a508 <OutputDbgTrace+0x70>
          break;
 800a506:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a508:	e016      	b.n	800a538 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	7a5b      	ldrb	r3, [r3, #9]
 800a512:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a514:	e010      	b.n	800a538 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a51a:	e00d      	b.n	800a538 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	7a5b      	ldrb	r3, [r3, #9]
 800a524:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a526:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a528:	e006      	b.n	800a538 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	7a5b      	ldrb	r3, [r3, #9]
 800a532:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a534:	e000      	b.n	800a538 <OutputDbgTrace+0xa0>

    default:
      break;
 800a536:	bf00      	nop
  }

  return;
 800a538:	bf00      	nop
}
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a54e:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <OTP_Read+0x48>)
 800a550:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a552:	e002      	b.n	800a55a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	3b08      	subs	r3, #8
 800a558:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3307      	adds	r3, #7
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	79fa      	ldrb	r2, [r7, #7]
 800a562:	429a      	cmp	r2, r3
 800a564:	d003      	beq.n	800a56e <OTP_Read+0x2a>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	4a09      	ldr	r2, [pc, #36]	; (800a590 <OTP_Read+0x4c>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d1f2      	bne.n	800a554 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3307      	adds	r3, #7
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	79fa      	ldrb	r2, [r7, #7]
 800a576:	429a      	cmp	r2, r3
 800a578:	d001      	beq.n	800a57e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a57e:	68fb      	ldr	r3, [r7, #12]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	1fff73f8 	.word	0x1fff73f8
 800a590:	1fff7000 	.word	0x1fff7000

0800a594 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a594:	b480      	push	{r7}
 800a596:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a598:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <UTIL_LPM_Init+0x1c>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a59e:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <UTIL_LPM_Init+0x20>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a5a4:	bf00      	nop
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	200006d4 	.word	0x200006d4
 800a5b4:	200006d8 	.word	0x200006d8

0800a5b8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a5c8:	613b      	str	r3, [r7, #16]
  return(result);
 800a5ca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a5cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5ce:	b672      	cpsid	i
}
 800a5d0:	bf00      	nop

  switch( state )
 800a5d2:	78fb      	ldrb	r3, [r7, #3]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d008      	beq.n	800a5ea <UTIL_LPM_SetStopMode+0x32>
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d10e      	bne.n	800a5fa <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a5dc:	4b0d      	ldr	r3, [pc, #52]	; (800a614 <UTIL_LPM_SetStopMode+0x5c>)
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	4a0b      	ldr	r2, [pc, #44]	; (800a614 <UTIL_LPM_SetStopMode+0x5c>)
 800a5e6:	6013      	str	r3, [r2, #0]
      break;
 800a5e8:	e008      	b.n	800a5fc <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	43da      	mvns	r2, r3
 800a5ee:	4b09      	ldr	r3, [pc, #36]	; (800a614 <UTIL_LPM_SetStopMode+0x5c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	4a07      	ldr	r2, [pc, #28]	; (800a614 <UTIL_LPM_SetStopMode+0x5c>)
 800a5f6:	6013      	str	r3, [r2, #0]
      break;
 800a5f8:	e000      	b.n	800a5fc <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a5fa:	bf00      	nop
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f383 8810 	msr	PRIMASK, r3
}
 800a606:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a608:	bf00      	nop
 800a60a:	371c      	adds	r7, #28
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	200006d4 	.word	0x200006d4

0800a618 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a618:	b480      	push	{r7}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	460b      	mov	r3, r1
 800a622:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a624:	f3ef 8310 	mrs	r3, PRIMASK
 800a628:	613b      	str	r3, [r7, #16]
  return(result);
 800a62a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a62c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a62e:	b672      	cpsid	i
}
 800a630:	bf00      	nop
  
  switch(state)
 800a632:	78fb      	ldrb	r3, [r7, #3]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d008      	beq.n	800a64a <UTIL_LPM_SetOffMode+0x32>
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d10e      	bne.n	800a65a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <UTIL_LPM_SetOffMode+0x5c>)
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4313      	orrs	r3, r2
 800a644:	4a0b      	ldr	r2, [pc, #44]	; (800a674 <UTIL_LPM_SetOffMode+0x5c>)
 800a646:	6013      	str	r3, [r2, #0]
      break;
 800a648:	e008      	b.n	800a65c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	43da      	mvns	r2, r3
 800a64e:	4b09      	ldr	r3, [pc, #36]	; (800a674 <UTIL_LPM_SetOffMode+0x5c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4013      	ands	r3, r2
 800a654:	4a07      	ldr	r2, [pc, #28]	; (800a674 <UTIL_LPM_SetOffMode+0x5c>)
 800a656:	6013      	str	r3, [r2, #0]
      break;
 800a658:	e000      	b.n	800a65c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a65a:	bf00      	nop
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f383 8810 	msr	PRIMASK, r3
}
 800a666:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a668:	bf00      	nop
 800a66a:	371c      	adds	r7, #28
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	200006d8 	.word	0x200006d8

0800a678 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a67e:	f3ef 8310 	mrs	r3, PRIMASK
 800a682:	60bb      	str	r3, [r7, #8]
  return(result);
 800a684:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800a686:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a688:	b672      	cpsid	i
}
 800a68a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a68c:	4b12      	ldr	r3, [pc, #72]	; (800a6d8 <UTIL_LPM_EnterLowPower+0x60>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d006      	beq.n	800a6a2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a694:	4b11      	ldr	r3, [pc, #68]	; (800a6dc <UTIL_LPM_EnterLowPower+0x64>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a69a:	4b10      	ldr	r3, [pc, #64]	; (800a6dc <UTIL_LPM_EnterLowPower+0x64>)
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	4798      	blx	r3
 800a6a0:	e010      	b.n	800a6c4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a6a2:	4b0f      	ldr	r3, [pc, #60]	; (800a6e0 <UTIL_LPM_EnterLowPower+0x68>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d006      	beq.n	800a6b8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800a6aa:	4b0c      	ldr	r3, [pc, #48]	; (800a6dc <UTIL_LPM_EnterLowPower+0x64>)
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <UTIL_LPM_EnterLowPower+0x64>)
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	4798      	blx	r3
 800a6b6:	e005      	b.n	800a6c4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800a6b8:	4b08      	ldr	r3, [pc, #32]	; (800a6dc <UTIL_LPM_EnterLowPower+0x64>)
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a6be:	4b07      	ldr	r3, [pc, #28]	; (800a6dc <UTIL_LPM_EnterLowPower+0x64>)
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	4798      	blx	r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f383 8810 	msr	PRIMASK, r3
}
 800a6ce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a6d0:	bf00      	nop
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	200006d4 	.word	0x200006d4
 800a6dc:	0800c658 	.word	0x0800c658
 800a6e0:	200006d8 	.word	0x200006d8

0800a6e4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b090      	sub	sp, #64	; 0x40
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a6ec:	4b73      	ldr	r3, [pc, #460]	; (800a8bc <UTIL_SEQ_Run+0x1d8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a6f2:	4b72      	ldr	r3, [pc, #456]	; (800a8bc <UTIL_SEQ_Run+0x1d8>)
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	4a70      	ldr	r2, [pc, #448]	; (800a8bc <UTIL_SEQ_Run+0x1d8>)
 800a6fc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a6fe:	4b70      	ldr	r3, [pc, #448]	; (800a8c0 <UTIL_SEQ_Run+0x1dc>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a704:	4b6f      	ldr	r3, [pc, #444]	; (800a8c4 <UTIL_SEQ_Run+0x1e0>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a70a:	4b6f      	ldr	r3, [pc, #444]	; (800a8c8 <UTIL_SEQ_Run+0x1e4>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800a710:	4b6e      	ldr	r3, [pc, #440]	; (800a8cc <UTIL_SEQ_Run+0x1e8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a716:	e08d      	b.n	800a834 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a718:	2300      	movs	r3, #0
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a71c:	e002      	b.n	800a724 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a720:	3301      	adds	r3, #1
 800a722:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a724:	4a6a      	ldr	r2, [pc, #424]	; (800a8d0 <UTIL_SEQ_Run+0x1ec>)
 800a726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a728:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72e:	401a      	ands	r2, r3
 800a730:	4b62      	ldr	r3, [pc, #392]	; (800a8bc <UTIL_SEQ_Run+0x1d8>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4013      	ands	r3, r2
 800a736:	2b00      	cmp	r3, #0
 800a738:	d0f1      	beq.n	800a71e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a73a:	4a65      	ldr	r2, [pc, #404]	; (800a8d0 <UTIL_SEQ_Run+0x1ec>)
 800a73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a73e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	401a      	ands	r2, r3
 800a746:	4b5d      	ldr	r3, [pc, #372]	; (800a8bc <UTIL_SEQ_Run+0x1d8>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4013      	ands	r3, r2
 800a74c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a74e:	4a60      	ldr	r2, [pc, #384]	; (800a8d0 <UTIL_SEQ_Run+0x1ec>)
 800a750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	4413      	add	r3, r2
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	4013      	ands	r3, r2
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d106      	bne.n	800a76e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a760:	4a5b      	ldr	r2, [pc, #364]	; (800a8d0 <UTIL_SEQ_Run+0x1ec>)
 800a762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	4413      	add	r3, r2
 800a768:	f04f 32ff 	mov.w	r2, #4294967295
 800a76c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a76e:	4a58      	ldr	r2, [pc, #352]	; (800a8d0 <UTIL_SEQ_Run+0x1ec>)
 800a770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a772:	00db      	lsls	r3, r3, #3
 800a774:	4413      	add	r3, r2
 800a776:	685a      	ldr	r2, [r3, #4]
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	4013      	ands	r3, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 f973 	bl	800aa68 <SEQ_BitPosition>
 800a782:	4603      	mov	r3, r0
 800a784:	461a      	mov	r2, r3
 800a786:	4b53      	ldr	r3, [pc, #332]	; (800a8d4 <UTIL_SEQ_Run+0x1f0>)
 800a788:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a78a:	4a51      	ldr	r2, [pc, #324]	; (800a8d0 <UTIL_SEQ_Run+0x1ec>)
 800a78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	4413      	add	r3, r2
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	4b4f      	ldr	r3, [pc, #316]	; (800a8d4 <UTIL_SEQ_Run+0x1f0>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2101      	movs	r1, #1
 800a79a:	fa01 f303 	lsl.w	r3, r1, r3
 800a79e:	43db      	mvns	r3, r3
 800a7a0:	401a      	ands	r2, r3
 800a7a2:	494b      	ldr	r1, [pc, #300]	; (800a8d0 <UTIL_SEQ_Run+0x1ec>)
 800a7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	440b      	add	r3, r1
 800a7aa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a7b0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a7b2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a7b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7b6:	b672      	cpsid	i
}
 800a7b8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a7ba:	4b46      	ldr	r3, [pc, #280]	; (800a8d4 <UTIL_SEQ_Run+0x1f0>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c4:	43da      	mvns	r2, r3
 800a7c6:	4b3e      	ldr	r3, [pc, #248]	; (800a8c0 <UTIL_SEQ_Run+0x1dc>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	4a3c      	ldr	r2, [pc, #240]	; (800a8c0 <UTIL_SEQ_Run+0x1dc>)
 800a7ce:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7d4:	e013      	b.n	800a7fe <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	4a3d      	ldr	r2, [pc, #244]	; (800a8d0 <UTIL_SEQ_Run+0x1ec>)
 800a7dc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a7e0:	4b3c      	ldr	r3, [pc, #240]	; (800a8d4 <UTIL_SEQ_Run+0x1f0>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ea:	43da      	mvns	r2, r3
 800a7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	400a      	ands	r2, r1
 800a7f2:	4937      	ldr	r1, [pc, #220]	; (800a8d0 <UTIL_SEQ_Run+0x1ec>)
 800a7f4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1e8      	bne.n	800a7d6 <UTIL_SEQ_Run+0xf2>
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f383 8810 	msr	PRIMASK, r3
}
 800a80e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a810:	4b30      	ldr	r3, [pc, #192]	; (800a8d4 <UTIL_SEQ_Run+0x1f0>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a30      	ldr	r2, [pc, #192]	; (800a8d8 <UTIL_SEQ_Run+0x1f4>)
 800a816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a81a:	4798      	blx	r3

    local_taskset = TaskSet;
 800a81c:	4b28      	ldr	r3, [pc, #160]	; (800a8c0 <UTIL_SEQ_Run+0x1dc>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a822:	4b28      	ldr	r3, [pc, #160]	; (800a8c4 <UTIL_SEQ_Run+0x1e0>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a828:	4b27      	ldr	r3, [pc, #156]	; (800a8c8 <UTIL_SEQ_Run+0x1e4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a82e:	4b27      	ldr	r3, [pc, #156]	; (800a8cc <UTIL_SEQ_Run+0x1e8>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	401a      	ands	r2, r3
 800a83a:	4b20      	ldr	r3, [pc, #128]	; (800a8bc <UTIL_SEQ_Run+0x1d8>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4013      	ands	r3, r2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d005      	beq.n	800a850 <UTIL_SEQ_Run+0x16c>
 800a844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	4013      	ands	r3, r2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f43f af64 	beq.w	800a718 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a850:	4b20      	ldr	r3, [pc, #128]	; (800a8d4 <UTIL_SEQ_Run+0x1f0>)
 800a852:	f04f 32ff 	mov.w	r2, #4294967295
 800a856:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a858:	f000 f8f8 	bl	800aa4c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a85c:	f3ef 8310 	mrs	r3, PRIMASK
 800a860:	613b      	str	r3, [r7, #16]
  return(result);
 800a862:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a866:	b672      	cpsid	i
}
 800a868:	bf00      	nop
  local_taskset = TaskSet;
 800a86a:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <UTIL_SEQ_Run+0x1dc>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a870:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <UTIL_SEQ_Run+0x1e0>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a876:	4b14      	ldr	r3, [pc, #80]	; (800a8c8 <UTIL_SEQ_Run+0x1e4>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a87c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	401a      	ands	r2, r3
 800a882:	4b0e      	ldr	r3, [pc, #56]	; (800a8bc <UTIL_SEQ_Run+0x1d8>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4013      	ands	r3, r2
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d107      	bne.n	800a89c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a88c:	4b0f      	ldr	r3, [pc, #60]	; (800a8cc <UTIL_SEQ_Run+0x1e8>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a892:	4013      	ands	r3, r2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a898:	f7f7 fdbb 	bl	8002412 <UTIL_SEQ_Idle>
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f383 8810 	msr	PRIMASK, r3
}
 800a8a6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a8a8:	f000 f8d7 	bl	800aa5a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a8ac:	4a03      	ldr	r2, [pc, #12]	; (800a8bc <UTIL_SEQ_Run+0x1d8>)
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	6013      	str	r3, [r2, #0]

  return;
 800a8b2:	bf00      	nop
}
 800a8b4:	3740      	adds	r7, #64	; 0x40
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	2000003c 	.word	0x2000003c
 800a8c0:	200006dc 	.word	0x200006dc
 800a8c4:	200006e0 	.word	0x200006e0
 800a8c8:	20000038 	.word	0x20000038
 800a8cc:	200006e4 	.word	0x200006e4
 800a8d0:	2000076c 	.word	0x2000076c
 800a8d4:	200006e8 	.word	0x200006e8
 800a8d8:	200006ec 	.word	0x200006ec

0800a8dc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b088      	sub	sp, #32
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8ec:	617b      	str	r3, [r7, #20]
  return(result);
 800a8ee:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a8f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8f2:	b672      	cpsid	i
}
 800a8f4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 f8b6 	bl	800aa68 <SEQ_BitPosition>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	4619      	mov	r1, r3
 800a900:	4a06      	ldr	r2, [pc, #24]	; (800a91c <UTIL_SEQ_RegTask+0x40>)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	f383 8810 	msr	PRIMASK, r3
}
 800a912:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a914:	bf00      	nop
}
 800a916:	3720      	adds	r7, #32
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	200006ec 	.word	0x200006ec

0800a920 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a920:	b480      	push	{r7}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a92a:	f3ef 8310 	mrs	r3, PRIMASK
 800a92e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a930:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a932:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a934:	b672      	cpsid	i
}
 800a936:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a938:	4b0d      	ldr	r3, [pc, #52]	; (800a970 <UTIL_SEQ_SetTask+0x50>)
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4313      	orrs	r3, r2
 800a940:	4a0b      	ldr	r2, [pc, #44]	; (800a970 <UTIL_SEQ_SetTask+0x50>)
 800a942:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a944:	4a0b      	ldr	r2, [pc, #44]	; (800a974 <UTIL_SEQ_SetTask+0x54>)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	431a      	orrs	r2, r3
 800a950:	4908      	ldr	r1, [pc, #32]	; (800a974 <UTIL_SEQ_SetTask+0x54>)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	f383 8810 	msr	PRIMASK, r3
}
 800a962:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a964:	bf00      	nop
}
 800a966:	371c      	adds	r7, #28
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	200006dc 	.word	0x200006dc
 800a974:	2000076c 	.word	0x2000076c

0800a978 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a978:	b480      	push	{r7}
 800a97a:	b087      	sub	sp, #28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a980:	f3ef 8310 	mrs	r3, PRIMASK
 800a984:	60fb      	str	r3, [r7, #12]
  return(result);
 800a986:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a98a:	b672      	cpsid	i
}
 800a98c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a98e:	4b09      	ldr	r3, [pc, #36]	; (800a9b4 <UTIL_SEQ_SetEvt+0x3c>)
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4313      	orrs	r3, r2
 800a996:	4a07      	ldr	r2, [pc, #28]	; (800a9b4 <UTIL_SEQ_SetEvt+0x3c>)
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f383 8810 	msr	PRIMASK, r3
}
 800a9a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a9a6:	bf00      	nop
}
 800a9a8:	371c      	adds	r7, #28
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	200006e0 	.word	0x200006e0

0800a9b8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a9c0:	4b1f      	ldr	r3, [pc, #124]	; (800aa40 <UTIL_SEQ_WaitEvt+0x88>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a9c6:	4b1e      	ldr	r3, [pc, #120]	; (800aa40 <UTIL_SEQ_WaitEvt+0x88>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ce:	d102      	bne.n	800a9d6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	61fb      	str	r3, [r7, #28]
 800a9d4:	e005      	b.n	800a9e2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a9d6:	4b1a      	ldr	r3, [pc, #104]	; (800aa40 <UTIL_SEQ_WaitEvt+0x88>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a9e2:	4b18      	ldr	r3, [pc, #96]	; (800aa44 <UTIL_SEQ_WaitEvt+0x8c>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a9e8:	4a16      	ldr	r2, [pc, #88]	; (800aa44 <UTIL_SEQ_WaitEvt+0x8c>)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a9ee:	e003      	b.n	800a9f8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a9f0:	6879      	ldr	r1, [r7, #4]
 800a9f2:	69f8      	ldr	r0, [r7, #28]
 800a9f4:	f7f7 fd14 	bl	8002420 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a9f8:	4b13      	ldr	r3, [pc, #76]	; (800aa48 <UTIL_SEQ_WaitEvt+0x90>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4013      	ands	r3, r2
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d0f5      	beq.n	800a9f0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800aa04:	4a0e      	ldr	r2, [pc, #56]	; (800aa40 <UTIL_SEQ_WaitEvt+0x88>)
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa0a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa0e:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa10:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aa12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa14:	b672      	cpsid	i
}
 800aa16:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	43da      	mvns	r2, r3
 800aa1c:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <UTIL_SEQ_WaitEvt+0x90>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4013      	ands	r3, r2
 800aa22:	4a09      	ldr	r2, [pc, #36]	; (800aa48 <UTIL_SEQ_WaitEvt+0x90>)
 800aa24:	6013      	str	r3, [r2, #0]
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f383 8810 	msr	PRIMASK, r3
}
 800aa30:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800aa32:	4a04      	ldr	r2, [pc, #16]	; (800aa44 <UTIL_SEQ_WaitEvt+0x8c>)
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	6013      	str	r3, [r2, #0]
  return;
 800aa38:	bf00      	nop
}
 800aa3a:	3720      	adds	r7, #32
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	200006e8 	.word	0x200006e8
 800aa44:	200006e4 	.word	0x200006e4
 800aa48:	200006e0 	.word	0x200006e0

0800aa4c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800aa50:	bf00      	nop
}
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800aa5e:	bf00      	nop
}
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800aa70:	2300      	movs	r3, #0
 800aa72:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	0c1b      	lsrs	r3, r3, #16
 800aa7c:	041b      	lsls	r3, r3, #16
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d104      	bne.n	800aa8c <SEQ_BitPosition+0x24>
 800aa82:	2310      	movs	r3, #16
 800aa84:	73fb      	strb	r3, [r7, #15]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	041b      	lsls	r3, r3, #16
 800aa8a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d105      	bne.n	800aaa2 <SEQ_BitPosition+0x3a>
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	3308      	adds	r3, #8
 800aa9a:	73fb      	strb	r3, [r7, #15]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	021b      	lsls	r3, r3, #8
 800aaa0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d105      	bne.n	800aab8 <SEQ_BitPosition+0x50>
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
 800aaae:	3304      	adds	r3, #4
 800aab0:	73fb      	strb	r3, [r7, #15]
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	011b      	lsls	r3, r3, #4
 800aab6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	0f1b      	lsrs	r3, r3, #28
 800aabc:	4a07      	ldr	r2, [pc, #28]	; (800aadc <SEQ_BitPosition+0x74>)
 800aabe:	5cd2      	ldrb	r2, [r2, r3]
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	4413      	add	r3, r2
 800aac4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
 800aac8:	f1c3 031f 	rsb	r3, r3, #31
 800aacc:	b2db      	uxtb	r3, r3
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	0800c6f0 	.word	0x0800c6f0

0800aae0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	605a      	str	r2, [r3, #4]
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b087      	sub	sp, #28
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab08:	f3ef 8310 	mrs	r3, PRIMASK
 800ab0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab12:	b672      	cpsid	i
}
 800ab14:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d102      	bne.n	800ab26 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ab20:	2301      	movs	r3, #1
 800ab22:	75fb      	strb	r3, [r7, #23]
 800ab24:	e001      	b.n	800ab2a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	75fb      	strb	r3, [r7, #23]
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f383 8810 	msr	PRIMASK, r3
}
 800ab34:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ab36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	371c      	adds	r7, #28
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ab52:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab54:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab58:	b672      	cpsid	i
}
 800ab5a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	605a      	str	r2, [r3, #4]
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	f383 8810 	msr	PRIMASK, r3
}
 800ab82:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ab84:	bf00      	nop
 800ab86:	371c      	adds	r7, #28
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab9a:	f3ef 8310 	mrs	r3, PRIMASK
 800ab9e:	60fb      	str	r3, [r7, #12]
  return(result);
 800aba0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aba2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aba4:	b672      	cpsid	i
}
 800aba6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	683a      	ldr	r2, [r7, #0]
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f383 8810 	msr	PRIMASK, r3
}
 800abce:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800abd0:	bf00      	nop
 800abd2:	371c      	adds	r7, #28
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abe4:	f3ef 8310 	mrs	r3, PRIMASK
 800abe8:	60fb      	str	r3, [r7, #12]
  return(result);
 800abea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800abec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abee:	b672      	cpsid	i
}
 800abf0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	6812      	ldr	r2, [r2, #0]
 800abfa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	6852      	ldr	r2, [r2, #4]
 800ac04:	605a      	str	r2, [r3, #4]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f383 8810 	msr	PRIMASK, r3
}
 800ac10:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac12:	bf00      	nop
 800ac14:	371c      	adds	r7, #28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b086      	sub	sp, #24
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac28:	f3ef 8310 	mrs	r3, PRIMASK
 800ac2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac32:	b672      	cpsid	i
}
 800ac34:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff ffca 	bl	800abdc <LST_remove_node>
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	f383 8810 	msr	PRIMASK, r3
}
 800ac52:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac54:	bf00      	nop
 800ac56:	3718      	adds	r7, #24
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <__assert_func>:
 800ac5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac5e:	4614      	mov	r4, r2
 800ac60:	461a      	mov	r2, r3
 800ac62:	4b09      	ldr	r3, [pc, #36]	; (800ac88 <__assert_func+0x2c>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4605      	mov	r5, r0
 800ac68:	68d8      	ldr	r0, [r3, #12]
 800ac6a:	b14c      	cbz	r4, 800ac80 <__assert_func+0x24>
 800ac6c:	4b07      	ldr	r3, [pc, #28]	; (800ac8c <__assert_func+0x30>)
 800ac6e:	9100      	str	r1, [sp, #0]
 800ac70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac74:	4906      	ldr	r1, [pc, #24]	; (800ac90 <__assert_func+0x34>)
 800ac76:	462b      	mov	r3, r5
 800ac78:	f000 f814 	bl	800aca4 <fiprintf>
 800ac7c:	f000 fd40 	bl	800b700 <abort>
 800ac80:	4b04      	ldr	r3, [pc, #16]	; (800ac94 <__assert_func+0x38>)
 800ac82:	461c      	mov	r4, r3
 800ac84:	e7f3      	b.n	800ac6e <__assert_func+0x12>
 800ac86:	bf00      	nop
 800ac88:	20000040 	.word	0x20000040
 800ac8c:	0800c700 	.word	0x0800c700
 800ac90:	0800c70d 	.word	0x0800c70d
 800ac94:	0800c73b 	.word	0x0800c73b

0800ac98 <__errno>:
 800ac98:	4b01      	ldr	r3, [pc, #4]	; (800aca0 <__errno+0x8>)
 800ac9a:	6818      	ldr	r0, [r3, #0]
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	20000040 	.word	0x20000040

0800aca4 <fiprintf>:
 800aca4:	b40e      	push	{r1, r2, r3}
 800aca6:	b503      	push	{r0, r1, lr}
 800aca8:	4601      	mov	r1, r0
 800acaa:	ab03      	add	r3, sp, #12
 800acac:	4805      	ldr	r0, [pc, #20]	; (800acc4 <fiprintf+0x20>)
 800acae:	f853 2b04 	ldr.w	r2, [r3], #4
 800acb2:	6800      	ldr	r0, [r0, #0]
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	f000 f95b 	bl	800af70 <_vfiprintf_r>
 800acba:	b002      	add	sp, #8
 800acbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800acc0:	b003      	add	sp, #12
 800acc2:	4770      	bx	lr
 800acc4:	20000040 	.word	0x20000040

0800acc8 <__libc_init_array>:
 800acc8:	b570      	push	{r4, r5, r6, lr}
 800acca:	4d0d      	ldr	r5, [pc, #52]	; (800ad00 <__libc_init_array+0x38>)
 800accc:	4c0d      	ldr	r4, [pc, #52]	; (800ad04 <__libc_init_array+0x3c>)
 800acce:	1b64      	subs	r4, r4, r5
 800acd0:	10a4      	asrs	r4, r4, #2
 800acd2:	2600      	movs	r6, #0
 800acd4:	42a6      	cmp	r6, r4
 800acd6:	d109      	bne.n	800acec <__libc_init_array+0x24>
 800acd8:	4d0b      	ldr	r5, [pc, #44]	; (800ad08 <__libc_init_array+0x40>)
 800acda:	4c0c      	ldr	r4, [pc, #48]	; (800ad0c <__libc_init_array+0x44>)
 800acdc:	f001 f9e0 	bl	800c0a0 <_init>
 800ace0:	1b64      	subs	r4, r4, r5
 800ace2:	10a4      	asrs	r4, r4, #2
 800ace4:	2600      	movs	r6, #0
 800ace6:	42a6      	cmp	r6, r4
 800ace8:	d105      	bne.n	800acf6 <__libc_init_array+0x2e>
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	f855 3b04 	ldr.w	r3, [r5], #4
 800acf0:	4798      	blx	r3
 800acf2:	3601      	adds	r6, #1
 800acf4:	e7ee      	b.n	800acd4 <__libc_init_array+0xc>
 800acf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acfa:	4798      	blx	r3
 800acfc:	3601      	adds	r6, #1
 800acfe:	e7f2      	b.n	800ace6 <__libc_init_array+0x1e>
 800ad00:	0800c7d4 	.word	0x0800c7d4
 800ad04:	0800c7d4 	.word	0x0800c7d4
 800ad08:	0800c7d4 	.word	0x0800c7d4
 800ad0c:	0800c7d8 	.word	0x0800c7d8

0800ad10 <malloc>:
 800ad10:	4b02      	ldr	r3, [pc, #8]	; (800ad1c <malloc+0xc>)
 800ad12:	4601      	mov	r1, r0
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	f000 b88d 	b.w	800ae34 <_malloc_r>
 800ad1a:	bf00      	nop
 800ad1c:	20000040 	.word	0x20000040

0800ad20 <free>:
 800ad20:	4b02      	ldr	r3, [pc, #8]	; (800ad2c <free+0xc>)
 800ad22:	4601      	mov	r1, r0
 800ad24:	6818      	ldr	r0, [r3, #0]
 800ad26:	f000 b819 	b.w	800ad5c <_free_r>
 800ad2a:	bf00      	nop
 800ad2c:	20000040 	.word	0x20000040

0800ad30 <memcpy>:
 800ad30:	440a      	add	r2, r1
 800ad32:	4291      	cmp	r1, r2
 800ad34:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad38:	d100      	bne.n	800ad3c <memcpy+0xc>
 800ad3a:	4770      	bx	lr
 800ad3c:	b510      	push	{r4, lr}
 800ad3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad46:	4291      	cmp	r1, r2
 800ad48:	d1f9      	bne.n	800ad3e <memcpy+0xe>
 800ad4a:	bd10      	pop	{r4, pc}

0800ad4c <memset>:
 800ad4c:	4402      	add	r2, r0
 800ad4e:	4603      	mov	r3, r0
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d100      	bne.n	800ad56 <memset+0xa>
 800ad54:	4770      	bx	lr
 800ad56:	f803 1b01 	strb.w	r1, [r3], #1
 800ad5a:	e7f9      	b.n	800ad50 <memset+0x4>

0800ad5c <_free_r>:
 800ad5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad5e:	2900      	cmp	r1, #0
 800ad60:	d044      	beq.n	800adec <_free_r+0x90>
 800ad62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad66:	9001      	str	r0, [sp, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad6e:	bfb8      	it	lt
 800ad70:	18e4      	addlt	r4, r4, r3
 800ad72:	f000 ff07 	bl	800bb84 <__malloc_lock>
 800ad76:	4a1e      	ldr	r2, [pc, #120]	; (800adf0 <_free_r+0x94>)
 800ad78:	9801      	ldr	r0, [sp, #4]
 800ad7a:	6813      	ldr	r3, [r2, #0]
 800ad7c:	b933      	cbnz	r3, 800ad8c <_free_r+0x30>
 800ad7e:	6063      	str	r3, [r4, #4]
 800ad80:	6014      	str	r4, [r2, #0]
 800ad82:	b003      	add	sp, #12
 800ad84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad88:	f000 bf02 	b.w	800bb90 <__malloc_unlock>
 800ad8c:	42a3      	cmp	r3, r4
 800ad8e:	d908      	bls.n	800ada2 <_free_r+0x46>
 800ad90:	6825      	ldr	r5, [r4, #0]
 800ad92:	1961      	adds	r1, r4, r5
 800ad94:	428b      	cmp	r3, r1
 800ad96:	bf01      	itttt	eq
 800ad98:	6819      	ldreq	r1, [r3, #0]
 800ad9a:	685b      	ldreq	r3, [r3, #4]
 800ad9c:	1949      	addeq	r1, r1, r5
 800ad9e:	6021      	streq	r1, [r4, #0]
 800ada0:	e7ed      	b.n	800ad7e <_free_r+0x22>
 800ada2:	461a      	mov	r2, r3
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	b10b      	cbz	r3, 800adac <_free_r+0x50>
 800ada8:	42a3      	cmp	r3, r4
 800adaa:	d9fa      	bls.n	800ada2 <_free_r+0x46>
 800adac:	6811      	ldr	r1, [r2, #0]
 800adae:	1855      	adds	r5, r2, r1
 800adb0:	42a5      	cmp	r5, r4
 800adb2:	d10b      	bne.n	800adcc <_free_r+0x70>
 800adb4:	6824      	ldr	r4, [r4, #0]
 800adb6:	4421      	add	r1, r4
 800adb8:	1854      	adds	r4, r2, r1
 800adba:	42a3      	cmp	r3, r4
 800adbc:	6011      	str	r1, [r2, #0]
 800adbe:	d1e0      	bne.n	800ad82 <_free_r+0x26>
 800adc0:	681c      	ldr	r4, [r3, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	6053      	str	r3, [r2, #4]
 800adc6:	4421      	add	r1, r4
 800adc8:	6011      	str	r1, [r2, #0]
 800adca:	e7da      	b.n	800ad82 <_free_r+0x26>
 800adcc:	d902      	bls.n	800add4 <_free_r+0x78>
 800adce:	230c      	movs	r3, #12
 800add0:	6003      	str	r3, [r0, #0]
 800add2:	e7d6      	b.n	800ad82 <_free_r+0x26>
 800add4:	6825      	ldr	r5, [r4, #0]
 800add6:	1961      	adds	r1, r4, r5
 800add8:	428b      	cmp	r3, r1
 800adda:	bf04      	itt	eq
 800addc:	6819      	ldreq	r1, [r3, #0]
 800adde:	685b      	ldreq	r3, [r3, #4]
 800ade0:	6063      	str	r3, [r4, #4]
 800ade2:	bf04      	itt	eq
 800ade4:	1949      	addeq	r1, r1, r5
 800ade6:	6021      	streq	r1, [r4, #0]
 800ade8:	6054      	str	r4, [r2, #4]
 800adea:	e7ca      	b.n	800ad82 <_free_r+0x26>
 800adec:	b003      	add	sp, #12
 800adee:	bd30      	pop	{r4, r5, pc}
 800adf0:	2000077c 	.word	0x2000077c

0800adf4 <sbrk_aligned>:
 800adf4:	b570      	push	{r4, r5, r6, lr}
 800adf6:	4e0e      	ldr	r6, [pc, #56]	; (800ae30 <sbrk_aligned+0x3c>)
 800adf8:	460c      	mov	r4, r1
 800adfa:	6831      	ldr	r1, [r6, #0]
 800adfc:	4605      	mov	r5, r0
 800adfe:	b911      	cbnz	r1, 800ae06 <sbrk_aligned+0x12>
 800ae00:	f000 fb7a 	bl	800b4f8 <_sbrk_r>
 800ae04:	6030      	str	r0, [r6, #0]
 800ae06:	4621      	mov	r1, r4
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f000 fb75 	bl	800b4f8 <_sbrk_r>
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	d00a      	beq.n	800ae28 <sbrk_aligned+0x34>
 800ae12:	1cc4      	adds	r4, r0, #3
 800ae14:	f024 0403 	bic.w	r4, r4, #3
 800ae18:	42a0      	cmp	r0, r4
 800ae1a:	d007      	beq.n	800ae2c <sbrk_aligned+0x38>
 800ae1c:	1a21      	subs	r1, r4, r0
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f000 fb6a 	bl	800b4f8 <_sbrk_r>
 800ae24:	3001      	adds	r0, #1
 800ae26:	d101      	bne.n	800ae2c <sbrk_aligned+0x38>
 800ae28:	f04f 34ff 	mov.w	r4, #4294967295
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	bd70      	pop	{r4, r5, r6, pc}
 800ae30:	20000780 	.word	0x20000780

0800ae34 <_malloc_r>:
 800ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	1ccd      	adds	r5, r1, #3
 800ae3a:	f025 0503 	bic.w	r5, r5, #3
 800ae3e:	3508      	adds	r5, #8
 800ae40:	2d0c      	cmp	r5, #12
 800ae42:	bf38      	it	cc
 800ae44:	250c      	movcc	r5, #12
 800ae46:	2d00      	cmp	r5, #0
 800ae48:	4607      	mov	r7, r0
 800ae4a:	db01      	blt.n	800ae50 <_malloc_r+0x1c>
 800ae4c:	42a9      	cmp	r1, r5
 800ae4e:	d905      	bls.n	800ae5c <_malloc_r+0x28>
 800ae50:	230c      	movs	r3, #12
 800ae52:	603b      	str	r3, [r7, #0]
 800ae54:	2600      	movs	r6, #0
 800ae56:	4630      	mov	r0, r6
 800ae58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae5c:	4e2e      	ldr	r6, [pc, #184]	; (800af18 <_malloc_r+0xe4>)
 800ae5e:	f000 fe91 	bl	800bb84 <__malloc_lock>
 800ae62:	6833      	ldr	r3, [r6, #0]
 800ae64:	461c      	mov	r4, r3
 800ae66:	bb34      	cbnz	r4, 800aeb6 <_malloc_r+0x82>
 800ae68:	4629      	mov	r1, r5
 800ae6a:	4638      	mov	r0, r7
 800ae6c:	f7ff ffc2 	bl	800adf4 <sbrk_aligned>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	4604      	mov	r4, r0
 800ae74:	d14d      	bne.n	800af12 <_malloc_r+0xde>
 800ae76:	6834      	ldr	r4, [r6, #0]
 800ae78:	4626      	mov	r6, r4
 800ae7a:	2e00      	cmp	r6, #0
 800ae7c:	d140      	bne.n	800af00 <_malloc_r+0xcc>
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	4631      	mov	r1, r6
 800ae82:	4638      	mov	r0, r7
 800ae84:	eb04 0803 	add.w	r8, r4, r3
 800ae88:	f000 fb36 	bl	800b4f8 <_sbrk_r>
 800ae8c:	4580      	cmp	r8, r0
 800ae8e:	d13a      	bne.n	800af06 <_malloc_r+0xd2>
 800ae90:	6821      	ldr	r1, [r4, #0]
 800ae92:	3503      	adds	r5, #3
 800ae94:	1a6d      	subs	r5, r5, r1
 800ae96:	f025 0503 	bic.w	r5, r5, #3
 800ae9a:	3508      	adds	r5, #8
 800ae9c:	2d0c      	cmp	r5, #12
 800ae9e:	bf38      	it	cc
 800aea0:	250c      	movcc	r5, #12
 800aea2:	4629      	mov	r1, r5
 800aea4:	4638      	mov	r0, r7
 800aea6:	f7ff ffa5 	bl	800adf4 <sbrk_aligned>
 800aeaa:	3001      	adds	r0, #1
 800aeac:	d02b      	beq.n	800af06 <_malloc_r+0xd2>
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	442b      	add	r3, r5
 800aeb2:	6023      	str	r3, [r4, #0]
 800aeb4:	e00e      	b.n	800aed4 <_malloc_r+0xa0>
 800aeb6:	6822      	ldr	r2, [r4, #0]
 800aeb8:	1b52      	subs	r2, r2, r5
 800aeba:	d41e      	bmi.n	800aefa <_malloc_r+0xc6>
 800aebc:	2a0b      	cmp	r2, #11
 800aebe:	d916      	bls.n	800aeee <_malloc_r+0xba>
 800aec0:	1961      	adds	r1, r4, r5
 800aec2:	42a3      	cmp	r3, r4
 800aec4:	6025      	str	r5, [r4, #0]
 800aec6:	bf18      	it	ne
 800aec8:	6059      	strne	r1, [r3, #4]
 800aeca:	6863      	ldr	r3, [r4, #4]
 800aecc:	bf08      	it	eq
 800aece:	6031      	streq	r1, [r6, #0]
 800aed0:	5162      	str	r2, [r4, r5]
 800aed2:	604b      	str	r3, [r1, #4]
 800aed4:	4638      	mov	r0, r7
 800aed6:	f104 060b 	add.w	r6, r4, #11
 800aeda:	f000 fe59 	bl	800bb90 <__malloc_unlock>
 800aede:	f026 0607 	bic.w	r6, r6, #7
 800aee2:	1d23      	adds	r3, r4, #4
 800aee4:	1af2      	subs	r2, r6, r3
 800aee6:	d0b6      	beq.n	800ae56 <_malloc_r+0x22>
 800aee8:	1b9b      	subs	r3, r3, r6
 800aeea:	50a3      	str	r3, [r4, r2]
 800aeec:	e7b3      	b.n	800ae56 <_malloc_r+0x22>
 800aeee:	6862      	ldr	r2, [r4, #4]
 800aef0:	42a3      	cmp	r3, r4
 800aef2:	bf0c      	ite	eq
 800aef4:	6032      	streq	r2, [r6, #0]
 800aef6:	605a      	strne	r2, [r3, #4]
 800aef8:	e7ec      	b.n	800aed4 <_malloc_r+0xa0>
 800aefa:	4623      	mov	r3, r4
 800aefc:	6864      	ldr	r4, [r4, #4]
 800aefe:	e7b2      	b.n	800ae66 <_malloc_r+0x32>
 800af00:	4634      	mov	r4, r6
 800af02:	6876      	ldr	r6, [r6, #4]
 800af04:	e7b9      	b.n	800ae7a <_malloc_r+0x46>
 800af06:	230c      	movs	r3, #12
 800af08:	603b      	str	r3, [r7, #0]
 800af0a:	4638      	mov	r0, r7
 800af0c:	f000 fe40 	bl	800bb90 <__malloc_unlock>
 800af10:	e7a1      	b.n	800ae56 <_malloc_r+0x22>
 800af12:	6025      	str	r5, [r4, #0]
 800af14:	e7de      	b.n	800aed4 <_malloc_r+0xa0>
 800af16:	bf00      	nop
 800af18:	2000077c 	.word	0x2000077c

0800af1c <__sfputc_r>:
 800af1c:	6893      	ldr	r3, [r2, #8]
 800af1e:	3b01      	subs	r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	b410      	push	{r4}
 800af24:	6093      	str	r3, [r2, #8]
 800af26:	da08      	bge.n	800af3a <__sfputc_r+0x1e>
 800af28:	6994      	ldr	r4, [r2, #24]
 800af2a:	42a3      	cmp	r3, r4
 800af2c:	db01      	blt.n	800af32 <__sfputc_r+0x16>
 800af2e:	290a      	cmp	r1, #10
 800af30:	d103      	bne.n	800af3a <__sfputc_r+0x1e>
 800af32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af36:	f000 bb23 	b.w	800b580 <__swbuf_r>
 800af3a:	6813      	ldr	r3, [r2, #0]
 800af3c:	1c58      	adds	r0, r3, #1
 800af3e:	6010      	str	r0, [r2, #0]
 800af40:	7019      	strb	r1, [r3, #0]
 800af42:	4608      	mov	r0, r1
 800af44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <__sfputs_r>:
 800af4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4c:	4606      	mov	r6, r0
 800af4e:	460f      	mov	r7, r1
 800af50:	4614      	mov	r4, r2
 800af52:	18d5      	adds	r5, r2, r3
 800af54:	42ac      	cmp	r4, r5
 800af56:	d101      	bne.n	800af5c <__sfputs_r+0x12>
 800af58:	2000      	movs	r0, #0
 800af5a:	e007      	b.n	800af6c <__sfputs_r+0x22>
 800af5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af60:	463a      	mov	r2, r7
 800af62:	4630      	mov	r0, r6
 800af64:	f7ff ffda 	bl	800af1c <__sfputc_r>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d1f3      	bne.n	800af54 <__sfputs_r+0xa>
 800af6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af70 <_vfiprintf_r>:
 800af70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	460d      	mov	r5, r1
 800af76:	b09d      	sub	sp, #116	; 0x74
 800af78:	4614      	mov	r4, r2
 800af7a:	4698      	mov	r8, r3
 800af7c:	4606      	mov	r6, r0
 800af7e:	b118      	cbz	r0, 800af88 <_vfiprintf_r+0x18>
 800af80:	6983      	ldr	r3, [r0, #24]
 800af82:	b90b      	cbnz	r3, 800af88 <_vfiprintf_r+0x18>
 800af84:	f000 fcde 	bl	800b944 <__sinit>
 800af88:	4b89      	ldr	r3, [pc, #548]	; (800b1b0 <_vfiprintf_r+0x240>)
 800af8a:	429d      	cmp	r5, r3
 800af8c:	d11b      	bne.n	800afc6 <_vfiprintf_r+0x56>
 800af8e:	6875      	ldr	r5, [r6, #4]
 800af90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af92:	07d9      	lsls	r1, r3, #31
 800af94:	d405      	bmi.n	800afa2 <_vfiprintf_r+0x32>
 800af96:	89ab      	ldrh	r3, [r5, #12]
 800af98:	059a      	lsls	r2, r3, #22
 800af9a:	d402      	bmi.n	800afa2 <_vfiprintf_r+0x32>
 800af9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af9e:	f000 fd6f 	bl	800ba80 <__retarget_lock_acquire_recursive>
 800afa2:	89ab      	ldrh	r3, [r5, #12]
 800afa4:	071b      	lsls	r3, r3, #28
 800afa6:	d501      	bpl.n	800afac <_vfiprintf_r+0x3c>
 800afa8:	692b      	ldr	r3, [r5, #16]
 800afaa:	b9eb      	cbnz	r3, 800afe8 <_vfiprintf_r+0x78>
 800afac:	4629      	mov	r1, r5
 800afae:	4630      	mov	r0, r6
 800afb0:	f000 fb38 	bl	800b624 <__swsetup_r>
 800afb4:	b1c0      	cbz	r0, 800afe8 <_vfiprintf_r+0x78>
 800afb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afb8:	07dc      	lsls	r4, r3, #31
 800afba:	d50e      	bpl.n	800afda <_vfiprintf_r+0x6a>
 800afbc:	f04f 30ff 	mov.w	r0, #4294967295
 800afc0:	b01d      	add	sp, #116	; 0x74
 800afc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc6:	4b7b      	ldr	r3, [pc, #492]	; (800b1b4 <_vfiprintf_r+0x244>)
 800afc8:	429d      	cmp	r5, r3
 800afca:	d101      	bne.n	800afd0 <_vfiprintf_r+0x60>
 800afcc:	68b5      	ldr	r5, [r6, #8]
 800afce:	e7df      	b.n	800af90 <_vfiprintf_r+0x20>
 800afd0:	4b79      	ldr	r3, [pc, #484]	; (800b1b8 <_vfiprintf_r+0x248>)
 800afd2:	429d      	cmp	r5, r3
 800afd4:	bf08      	it	eq
 800afd6:	68f5      	ldreq	r5, [r6, #12]
 800afd8:	e7da      	b.n	800af90 <_vfiprintf_r+0x20>
 800afda:	89ab      	ldrh	r3, [r5, #12]
 800afdc:	0598      	lsls	r0, r3, #22
 800afde:	d4ed      	bmi.n	800afbc <_vfiprintf_r+0x4c>
 800afe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afe2:	f000 fd4e 	bl	800ba82 <__retarget_lock_release_recursive>
 800afe6:	e7e9      	b.n	800afbc <_vfiprintf_r+0x4c>
 800afe8:	2300      	movs	r3, #0
 800afea:	9309      	str	r3, [sp, #36]	; 0x24
 800afec:	2320      	movs	r3, #32
 800afee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aff2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aff6:	2330      	movs	r3, #48	; 0x30
 800aff8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1bc <_vfiprintf_r+0x24c>
 800affc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b000:	f04f 0901 	mov.w	r9, #1
 800b004:	4623      	mov	r3, r4
 800b006:	469a      	mov	sl, r3
 800b008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b00c:	b10a      	cbz	r2, 800b012 <_vfiprintf_r+0xa2>
 800b00e:	2a25      	cmp	r2, #37	; 0x25
 800b010:	d1f9      	bne.n	800b006 <_vfiprintf_r+0x96>
 800b012:	ebba 0b04 	subs.w	fp, sl, r4
 800b016:	d00b      	beq.n	800b030 <_vfiprintf_r+0xc0>
 800b018:	465b      	mov	r3, fp
 800b01a:	4622      	mov	r2, r4
 800b01c:	4629      	mov	r1, r5
 800b01e:	4630      	mov	r0, r6
 800b020:	f7ff ff93 	bl	800af4a <__sfputs_r>
 800b024:	3001      	adds	r0, #1
 800b026:	f000 80aa 	beq.w	800b17e <_vfiprintf_r+0x20e>
 800b02a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b02c:	445a      	add	r2, fp
 800b02e:	9209      	str	r2, [sp, #36]	; 0x24
 800b030:	f89a 3000 	ldrb.w	r3, [sl]
 800b034:	2b00      	cmp	r3, #0
 800b036:	f000 80a2 	beq.w	800b17e <_vfiprintf_r+0x20e>
 800b03a:	2300      	movs	r3, #0
 800b03c:	f04f 32ff 	mov.w	r2, #4294967295
 800b040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b044:	f10a 0a01 	add.w	sl, sl, #1
 800b048:	9304      	str	r3, [sp, #16]
 800b04a:	9307      	str	r3, [sp, #28]
 800b04c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b050:	931a      	str	r3, [sp, #104]	; 0x68
 800b052:	4654      	mov	r4, sl
 800b054:	2205      	movs	r2, #5
 800b056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b05a:	4858      	ldr	r0, [pc, #352]	; (800b1bc <_vfiprintf_r+0x24c>)
 800b05c:	f7f5 f8a8 	bl	80001b0 <memchr>
 800b060:	9a04      	ldr	r2, [sp, #16]
 800b062:	b9d8      	cbnz	r0, 800b09c <_vfiprintf_r+0x12c>
 800b064:	06d1      	lsls	r1, r2, #27
 800b066:	bf44      	itt	mi
 800b068:	2320      	movmi	r3, #32
 800b06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b06e:	0713      	lsls	r3, r2, #28
 800b070:	bf44      	itt	mi
 800b072:	232b      	movmi	r3, #43	; 0x2b
 800b074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b078:	f89a 3000 	ldrb.w	r3, [sl]
 800b07c:	2b2a      	cmp	r3, #42	; 0x2a
 800b07e:	d015      	beq.n	800b0ac <_vfiprintf_r+0x13c>
 800b080:	9a07      	ldr	r2, [sp, #28]
 800b082:	4654      	mov	r4, sl
 800b084:	2000      	movs	r0, #0
 800b086:	f04f 0c0a 	mov.w	ip, #10
 800b08a:	4621      	mov	r1, r4
 800b08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b090:	3b30      	subs	r3, #48	; 0x30
 800b092:	2b09      	cmp	r3, #9
 800b094:	d94e      	bls.n	800b134 <_vfiprintf_r+0x1c4>
 800b096:	b1b0      	cbz	r0, 800b0c6 <_vfiprintf_r+0x156>
 800b098:	9207      	str	r2, [sp, #28]
 800b09a:	e014      	b.n	800b0c6 <_vfiprintf_r+0x156>
 800b09c:	eba0 0308 	sub.w	r3, r0, r8
 800b0a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	9304      	str	r3, [sp, #16]
 800b0a8:	46a2      	mov	sl, r4
 800b0aa:	e7d2      	b.n	800b052 <_vfiprintf_r+0xe2>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	1d19      	adds	r1, r3, #4
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	9103      	str	r1, [sp, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bfbb      	ittet	lt
 800b0b8:	425b      	neglt	r3, r3
 800b0ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b0be:	9307      	strge	r3, [sp, #28]
 800b0c0:	9307      	strlt	r3, [sp, #28]
 800b0c2:	bfb8      	it	lt
 800b0c4:	9204      	strlt	r2, [sp, #16]
 800b0c6:	7823      	ldrb	r3, [r4, #0]
 800b0c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0ca:	d10c      	bne.n	800b0e6 <_vfiprintf_r+0x176>
 800b0cc:	7863      	ldrb	r3, [r4, #1]
 800b0ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b0d0:	d135      	bne.n	800b13e <_vfiprintf_r+0x1ce>
 800b0d2:	9b03      	ldr	r3, [sp, #12]
 800b0d4:	1d1a      	adds	r2, r3, #4
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	9203      	str	r2, [sp, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	bfb8      	it	lt
 800b0de:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0e2:	3402      	adds	r4, #2
 800b0e4:	9305      	str	r3, [sp, #20]
 800b0e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1cc <_vfiprintf_r+0x25c>
 800b0ea:	7821      	ldrb	r1, [r4, #0]
 800b0ec:	2203      	movs	r2, #3
 800b0ee:	4650      	mov	r0, sl
 800b0f0:	f7f5 f85e 	bl	80001b0 <memchr>
 800b0f4:	b140      	cbz	r0, 800b108 <_vfiprintf_r+0x198>
 800b0f6:	2340      	movs	r3, #64	; 0x40
 800b0f8:	eba0 000a 	sub.w	r0, r0, sl
 800b0fc:	fa03 f000 	lsl.w	r0, r3, r0
 800b100:	9b04      	ldr	r3, [sp, #16]
 800b102:	4303      	orrs	r3, r0
 800b104:	3401      	adds	r4, #1
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b10c:	482c      	ldr	r0, [pc, #176]	; (800b1c0 <_vfiprintf_r+0x250>)
 800b10e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b112:	2206      	movs	r2, #6
 800b114:	f7f5 f84c 	bl	80001b0 <memchr>
 800b118:	2800      	cmp	r0, #0
 800b11a:	d03f      	beq.n	800b19c <_vfiprintf_r+0x22c>
 800b11c:	4b29      	ldr	r3, [pc, #164]	; (800b1c4 <_vfiprintf_r+0x254>)
 800b11e:	bb1b      	cbnz	r3, 800b168 <_vfiprintf_r+0x1f8>
 800b120:	9b03      	ldr	r3, [sp, #12]
 800b122:	3307      	adds	r3, #7
 800b124:	f023 0307 	bic.w	r3, r3, #7
 800b128:	3308      	adds	r3, #8
 800b12a:	9303      	str	r3, [sp, #12]
 800b12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b12e:	443b      	add	r3, r7
 800b130:	9309      	str	r3, [sp, #36]	; 0x24
 800b132:	e767      	b.n	800b004 <_vfiprintf_r+0x94>
 800b134:	fb0c 3202 	mla	r2, ip, r2, r3
 800b138:	460c      	mov	r4, r1
 800b13a:	2001      	movs	r0, #1
 800b13c:	e7a5      	b.n	800b08a <_vfiprintf_r+0x11a>
 800b13e:	2300      	movs	r3, #0
 800b140:	3401      	adds	r4, #1
 800b142:	9305      	str	r3, [sp, #20]
 800b144:	4619      	mov	r1, r3
 800b146:	f04f 0c0a 	mov.w	ip, #10
 800b14a:	4620      	mov	r0, r4
 800b14c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b150:	3a30      	subs	r2, #48	; 0x30
 800b152:	2a09      	cmp	r2, #9
 800b154:	d903      	bls.n	800b15e <_vfiprintf_r+0x1ee>
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0c5      	beq.n	800b0e6 <_vfiprintf_r+0x176>
 800b15a:	9105      	str	r1, [sp, #20]
 800b15c:	e7c3      	b.n	800b0e6 <_vfiprintf_r+0x176>
 800b15e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b162:	4604      	mov	r4, r0
 800b164:	2301      	movs	r3, #1
 800b166:	e7f0      	b.n	800b14a <_vfiprintf_r+0x1da>
 800b168:	ab03      	add	r3, sp, #12
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	462a      	mov	r2, r5
 800b16e:	4b16      	ldr	r3, [pc, #88]	; (800b1c8 <_vfiprintf_r+0x258>)
 800b170:	a904      	add	r1, sp, #16
 800b172:	4630      	mov	r0, r6
 800b174:	f3af 8000 	nop.w
 800b178:	4607      	mov	r7, r0
 800b17a:	1c78      	adds	r0, r7, #1
 800b17c:	d1d6      	bne.n	800b12c <_vfiprintf_r+0x1bc>
 800b17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b180:	07d9      	lsls	r1, r3, #31
 800b182:	d405      	bmi.n	800b190 <_vfiprintf_r+0x220>
 800b184:	89ab      	ldrh	r3, [r5, #12]
 800b186:	059a      	lsls	r2, r3, #22
 800b188:	d402      	bmi.n	800b190 <_vfiprintf_r+0x220>
 800b18a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b18c:	f000 fc79 	bl	800ba82 <__retarget_lock_release_recursive>
 800b190:	89ab      	ldrh	r3, [r5, #12]
 800b192:	065b      	lsls	r3, r3, #25
 800b194:	f53f af12 	bmi.w	800afbc <_vfiprintf_r+0x4c>
 800b198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b19a:	e711      	b.n	800afc0 <_vfiprintf_r+0x50>
 800b19c:	ab03      	add	r3, sp, #12
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	462a      	mov	r2, r5
 800b1a2:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <_vfiprintf_r+0x258>)
 800b1a4:	a904      	add	r1, sp, #16
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f000 f880 	bl	800b2ac <_printf_i>
 800b1ac:	e7e4      	b.n	800b178 <_vfiprintf_r+0x208>
 800b1ae:	bf00      	nop
 800b1b0:	0800c794 	.word	0x0800c794
 800b1b4:	0800c7b4 	.word	0x0800c7b4
 800b1b8:	0800c774 	.word	0x0800c774
 800b1bc:	0800c740 	.word	0x0800c740
 800b1c0:	0800c74a 	.word	0x0800c74a
 800b1c4:	00000000 	.word	0x00000000
 800b1c8:	0800af4b 	.word	0x0800af4b
 800b1cc:	0800c746 	.word	0x0800c746

0800b1d0 <_printf_common>:
 800b1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d4:	4616      	mov	r6, r2
 800b1d6:	4699      	mov	r9, r3
 800b1d8:	688a      	ldr	r2, [r1, #8]
 800b1da:	690b      	ldr	r3, [r1, #16]
 800b1dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	bfb8      	it	lt
 800b1e4:	4613      	movlt	r3, r2
 800b1e6:	6033      	str	r3, [r6, #0]
 800b1e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1ec:	4607      	mov	r7, r0
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	b10a      	cbz	r2, 800b1f6 <_printf_common+0x26>
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	6033      	str	r3, [r6, #0]
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	0699      	lsls	r1, r3, #26
 800b1fa:	bf42      	ittt	mi
 800b1fc:	6833      	ldrmi	r3, [r6, #0]
 800b1fe:	3302      	addmi	r3, #2
 800b200:	6033      	strmi	r3, [r6, #0]
 800b202:	6825      	ldr	r5, [r4, #0]
 800b204:	f015 0506 	ands.w	r5, r5, #6
 800b208:	d106      	bne.n	800b218 <_printf_common+0x48>
 800b20a:	f104 0a19 	add.w	sl, r4, #25
 800b20e:	68e3      	ldr	r3, [r4, #12]
 800b210:	6832      	ldr	r2, [r6, #0]
 800b212:	1a9b      	subs	r3, r3, r2
 800b214:	42ab      	cmp	r3, r5
 800b216:	dc26      	bgt.n	800b266 <_printf_common+0x96>
 800b218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b21c:	1e13      	subs	r3, r2, #0
 800b21e:	6822      	ldr	r2, [r4, #0]
 800b220:	bf18      	it	ne
 800b222:	2301      	movne	r3, #1
 800b224:	0692      	lsls	r2, r2, #26
 800b226:	d42b      	bmi.n	800b280 <_printf_common+0xb0>
 800b228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b22c:	4649      	mov	r1, r9
 800b22e:	4638      	mov	r0, r7
 800b230:	47c0      	blx	r8
 800b232:	3001      	adds	r0, #1
 800b234:	d01e      	beq.n	800b274 <_printf_common+0xa4>
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	68e5      	ldr	r5, [r4, #12]
 800b23a:	6832      	ldr	r2, [r6, #0]
 800b23c:	f003 0306 	and.w	r3, r3, #6
 800b240:	2b04      	cmp	r3, #4
 800b242:	bf08      	it	eq
 800b244:	1aad      	subeq	r5, r5, r2
 800b246:	68a3      	ldr	r3, [r4, #8]
 800b248:	6922      	ldr	r2, [r4, #16]
 800b24a:	bf0c      	ite	eq
 800b24c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b250:	2500      	movne	r5, #0
 800b252:	4293      	cmp	r3, r2
 800b254:	bfc4      	itt	gt
 800b256:	1a9b      	subgt	r3, r3, r2
 800b258:	18ed      	addgt	r5, r5, r3
 800b25a:	2600      	movs	r6, #0
 800b25c:	341a      	adds	r4, #26
 800b25e:	42b5      	cmp	r5, r6
 800b260:	d11a      	bne.n	800b298 <_printf_common+0xc8>
 800b262:	2000      	movs	r0, #0
 800b264:	e008      	b.n	800b278 <_printf_common+0xa8>
 800b266:	2301      	movs	r3, #1
 800b268:	4652      	mov	r2, sl
 800b26a:	4649      	mov	r1, r9
 800b26c:	4638      	mov	r0, r7
 800b26e:	47c0      	blx	r8
 800b270:	3001      	adds	r0, #1
 800b272:	d103      	bne.n	800b27c <_printf_common+0xac>
 800b274:	f04f 30ff 	mov.w	r0, #4294967295
 800b278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b27c:	3501      	adds	r5, #1
 800b27e:	e7c6      	b.n	800b20e <_printf_common+0x3e>
 800b280:	18e1      	adds	r1, r4, r3
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	2030      	movs	r0, #48	; 0x30
 800b286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b28a:	4422      	add	r2, r4
 800b28c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b294:	3302      	adds	r3, #2
 800b296:	e7c7      	b.n	800b228 <_printf_common+0x58>
 800b298:	2301      	movs	r3, #1
 800b29a:	4622      	mov	r2, r4
 800b29c:	4649      	mov	r1, r9
 800b29e:	4638      	mov	r0, r7
 800b2a0:	47c0      	blx	r8
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	d0e6      	beq.n	800b274 <_printf_common+0xa4>
 800b2a6:	3601      	adds	r6, #1
 800b2a8:	e7d9      	b.n	800b25e <_printf_common+0x8e>
	...

0800b2ac <_printf_i>:
 800b2ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b0:	7e0f      	ldrb	r7, [r1, #24]
 800b2b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2b4:	2f78      	cmp	r7, #120	; 0x78
 800b2b6:	4691      	mov	r9, r2
 800b2b8:	4680      	mov	r8, r0
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	469a      	mov	sl, r3
 800b2be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2c2:	d807      	bhi.n	800b2d4 <_printf_i+0x28>
 800b2c4:	2f62      	cmp	r7, #98	; 0x62
 800b2c6:	d80a      	bhi.n	800b2de <_printf_i+0x32>
 800b2c8:	2f00      	cmp	r7, #0
 800b2ca:	f000 80d8 	beq.w	800b47e <_printf_i+0x1d2>
 800b2ce:	2f58      	cmp	r7, #88	; 0x58
 800b2d0:	f000 80a3 	beq.w	800b41a <_printf_i+0x16e>
 800b2d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2dc:	e03a      	b.n	800b354 <_printf_i+0xa8>
 800b2de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2e2:	2b15      	cmp	r3, #21
 800b2e4:	d8f6      	bhi.n	800b2d4 <_printf_i+0x28>
 800b2e6:	a101      	add	r1, pc, #4	; (adr r1, 800b2ec <_printf_i+0x40>)
 800b2e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2ec:	0800b345 	.word	0x0800b345
 800b2f0:	0800b359 	.word	0x0800b359
 800b2f4:	0800b2d5 	.word	0x0800b2d5
 800b2f8:	0800b2d5 	.word	0x0800b2d5
 800b2fc:	0800b2d5 	.word	0x0800b2d5
 800b300:	0800b2d5 	.word	0x0800b2d5
 800b304:	0800b359 	.word	0x0800b359
 800b308:	0800b2d5 	.word	0x0800b2d5
 800b30c:	0800b2d5 	.word	0x0800b2d5
 800b310:	0800b2d5 	.word	0x0800b2d5
 800b314:	0800b2d5 	.word	0x0800b2d5
 800b318:	0800b465 	.word	0x0800b465
 800b31c:	0800b389 	.word	0x0800b389
 800b320:	0800b447 	.word	0x0800b447
 800b324:	0800b2d5 	.word	0x0800b2d5
 800b328:	0800b2d5 	.word	0x0800b2d5
 800b32c:	0800b487 	.word	0x0800b487
 800b330:	0800b2d5 	.word	0x0800b2d5
 800b334:	0800b389 	.word	0x0800b389
 800b338:	0800b2d5 	.word	0x0800b2d5
 800b33c:	0800b2d5 	.word	0x0800b2d5
 800b340:	0800b44f 	.word	0x0800b44f
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	1d1a      	adds	r2, r3, #4
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	602a      	str	r2, [r5, #0]
 800b34c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b354:	2301      	movs	r3, #1
 800b356:	e0a3      	b.n	800b4a0 <_printf_i+0x1f4>
 800b358:	6820      	ldr	r0, [r4, #0]
 800b35a:	6829      	ldr	r1, [r5, #0]
 800b35c:	0606      	lsls	r6, r0, #24
 800b35e:	f101 0304 	add.w	r3, r1, #4
 800b362:	d50a      	bpl.n	800b37a <_printf_i+0xce>
 800b364:	680e      	ldr	r6, [r1, #0]
 800b366:	602b      	str	r3, [r5, #0]
 800b368:	2e00      	cmp	r6, #0
 800b36a:	da03      	bge.n	800b374 <_printf_i+0xc8>
 800b36c:	232d      	movs	r3, #45	; 0x2d
 800b36e:	4276      	negs	r6, r6
 800b370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b374:	485e      	ldr	r0, [pc, #376]	; (800b4f0 <_printf_i+0x244>)
 800b376:	230a      	movs	r3, #10
 800b378:	e019      	b.n	800b3ae <_printf_i+0x102>
 800b37a:	680e      	ldr	r6, [r1, #0]
 800b37c:	602b      	str	r3, [r5, #0]
 800b37e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b382:	bf18      	it	ne
 800b384:	b236      	sxthne	r6, r6
 800b386:	e7ef      	b.n	800b368 <_printf_i+0xbc>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	6820      	ldr	r0, [r4, #0]
 800b38c:	1d19      	adds	r1, r3, #4
 800b38e:	6029      	str	r1, [r5, #0]
 800b390:	0601      	lsls	r1, r0, #24
 800b392:	d501      	bpl.n	800b398 <_printf_i+0xec>
 800b394:	681e      	ldr	r6, [r3, #0]
 800b396:	e002      	b.n	800b39e <_printf_i+0xf2>
 800b398:	0646      	lsls	r6, r0, #25
 800b39a:	d5fb      	bpl.n	800b394 <_printf_i+0xe8>
 800b39c:	881e      	ldrh	r6, [r3, #0]
 800b39e:	4854      	ldr	r0, [pc, #336]	; (800b4f0 <_printf_i+0x244>)
 800b3a0:	2f6f      	cmp	r7, #111	; 0x6f
 800b3a2:	bf0c      	ite	eq
 800b3a4:	2308      	moveq	r3, #8
 800b3a6:	230a      	movne	r3, #10
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3ae:	6865      	ldr	r5, [r4, #4]
 800b3b0:	60a5      	str	r5, [r4, #8]
 800b3b2:	2d00      	cmp	r5, #0
 800b3b4:	bfa2      	ittt	ge
 800b3b6:	6821      	ldrge	r1, [r4, #0]
 800b3b8:	f021 0104 	bicge.w	r1, r1, #4
 800b3bc:	6021      	strge	r1, [r4, #0]
 800b3be:	b90e      	cbnz	r6, 800b3c4 <_printf_i+0x118>
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	d04d      	beq.n	800b460 <_printf_i+0x1b4>
 800b3c4:	4615      	mov	r5, r2
 800b3c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3ca:	fb03 6711 	mls	r7, r3, r1, r6
 800b3ce:	5dc7      	ldrb	r7, [r0, r7]
 800b3d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3d4:	4637      	mov	r7, r6
 800b3d6:	42bb      	cmp	r3, r7
 800b3d8:	460e      	mov	r6, r1
 800b3da:	d9f4      	bls.n	800b3c6 <_printf_i+0x11a>
 800b3dc:	2b08      	cmp	r3, #8
 800b3de:	d10b      	bne.n	800b3f8 <_printf_i+0x14c>
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	07de      	lsls	r6, r3, #31
 800b3e4:	d508      	bpl.n	800b3f8 <_printf_i+0x14c>
 800b3e6:	6923      	ldr	r3, [r4, #16]
 800b3e8:	6861      	ldr	r1, [r4, #4]
 800b3ea:	4299      	cmp	r1, r3
 800b3ec:	bfde      	ittt	le
 800b3ee:	2330      	movle	r3, #48	; 0x30
 800b3f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3f8:	1b52      	subs	r2, r2, r5
 800b3fa:	6122      	str	r2, [r4, #16]
 800b3fc:	f8cd a000 	str.w	sl, [sp]
 800b400:	464b      	mov	r3, r9
 800b402:	aa03      	add	r2, sp, #12
 800b404:	4621      	mov	r1, r4
 800b406:	4640      	mov	r0, r8
 800b408:	f7ff fee2 	bl	800b1d0 <_printf_common>
 800b40c:	3001      	adds	r0, #1
 800b40e:	d14c      	bne.n	800b4aa <_printf_i+0x1fe>
 800b410:	f04f 30ff 	mov.w	r0, #4294967295
 800b414:	b004      	add	sp, #16
 800b416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41a:	4835      	ldr	r0, [pc, #212]	; (800b4f0 <_printf_i+0x244>)
 800b41c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b420:	6829      	ldr	r1, [r5, #0]
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	f851 6b04 	ldr.w	r6, [r1], #4
 800b428:	6029      	str	r1, [r5, #0]
 800b42a:	061d      	lsls	r5, r3, #24
 800b42c:	d514      	bpl.n	800b458 <_printf_i+0x1ac>
 800b42e:	07df      	lsls	r7, r3, #31
 800b430:	bf44      	itt	mi
 800b432:	f043 0320 	orrmi.w	r3, r3, #32
 800b436:	6023      	strmi	r3, [r4, #0]
 800b438:	b91e      	cbnz	r6, 800b442 <_printf_i+0x196>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	f023 0320 	bic.w	r3, r3, #32
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	2310      	movs	r3, #16
 800b444:	e7b0      	b.n	800b3a8 <_printf_i+0xfc>
 800b446:	6823      	ldr	r3, [r4, #0]
 800b448:	f043 0320 	orr.w	r3, r3, #32
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	2378      	movs	r3, #120	; 0x78
 800b450:	4828      	ldr	r0, [pc, #160]	; (800b4f4 <_printf_i+0x248>)
 800b452:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b456:	e7e3      	b.n	800b420 <_printf_i+0x174>
 800b458:	0659      	lsls	r1, r3, #25
 800b45a:	bf48      	it	mi
 800b45c:	b2b6      	uxthmi	r6, r6
 800b45e:	e7e6      	b.n	800b42e <_printf_i+0x182>
 800b460:	4615      	mov	r5, r2
 800b462:	e7bb      	b.n	800b3dc <_printf_i+0x130>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	6826      	ldr	r6, [r4, #0]
 800b468:	6961      	ldr	r1, [r4, #20]
 800b46a:	1d18      	adds	r0, r3, #4
 800b46c:	6028      	str	r0, [r5, #0]
 800b46e:	0635      	lsls	r5, r6, #24
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	d501      	bpl.n	800b478 <_printf_i+0x1cc>
 800b474:	6019      	str	r1, [r3, #0]
 800b476:	e002      	b.n	800b47e <_printf_i+0x1d2>
 800b478:	0670      	lsls	r0, r6, #25
 800b47a:	d5fb      	bpl.n	800b474 <_printf_i+0x1c8>
 800b47c:	8019      	strh	r1, [r3, #0]
 800b47e:	2300      	movs	r3, #0
 800b480:	6123      	str	r3, [r4, #16]
 800b482:	4615      	mov	r5, r2
 800b484:	e7ba      	b.n	800b3fc <_printf_i+0x150>
 800b486:	682b      	ldr	r3, [r5, #0]
 800b488:	1d1a      	adds	r2, r3, #4
 800b48a:	602a      	str	r2, [r5, #0]
 800b48c:	681d      	ldr	r5, [r3, #0]
 800b48e:	6862      	ldr	r2, [r4, #4]
 800b490:	2100      	movs	r1, #0
 800b492:	4628      	mov	r0, r5
 800b494:	f7f4 fe8c 	bl	80001b0 <memchr>
 800b498:	b108      	cbz	r0, 800b49e <_printf_i+0x1f2>
 800b49a:	1b40      	subs	r0, r0, r5
 800b49c:	6060      	str	r0, [r4, #4]
 800b49e:	6863      	ldr	r3, [r4, #4]
 800b4a0:	6123      	str	r3, [r4, #16]
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4a8:	e7a8      	b.n	800b3fc <_printf_i+0x150>
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	462a      	mov	r2, r5
 800b4ae:	4649      	mov	r1, r9
 800b4b0:	4640      	mov	r0, r8
 800b4b2:	47d0      	blx	sl
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	d0ab      	beq.n	800b410 <_printf_i+0x164>
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	079b      	lsls	r3, r3, #30
 800b4bc:	d413      	bmi.n	800b4e6 <_printf_i+0x23a>
 800b4be:	68e0      	ldr	r0, [r4, #12]
 800b4c0:	9b03      	ldr	r3, [sp, #12]
 800b4c2:	4298      	cmp	r0, r3
 800b4c4:	bfb8      	it	lt
 800b4c6:	4618      	movlt	r0, r3
 800b4c8:	e7a4      	b.n	800b414 <_printf_i+0x168>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	4632      	mov	r2, r6
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	4640      	mov	r0, r8
 800b4d2:	47d0      	blx	sl
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	d09b      	beq.n	800b410 <_printf_i+0x164>
 800b4d8:	3501      	adds	r5, #1
 800b4da:	68e3      	ldr	r3, [r4, #12]
 800b4dc:	9903      	ldr	r1, [sp, #12]
 800b4de:	1a5b      	subs	r3, r3, r1
 800b4e0:	42ab      	cmp	r3, r5
 800b4e2:	dcf2      	bgt.n	800b4ca <_printf_i+0x21e>
 800b4e4:	e7eb      	b.n	800b4be <_printf_i+0x212>
 800b4e6:	2500      	movs	r5, #0
 800b4e8:	f104 0619 	add.w	r6, r4, #25
 800b4ec:	e7f5      	b.n	800b4da <_printf_i+0x22e>
 800b4ee:	bf00      	nop
 800b4f0:	0800c751 	.word	0x0800c751
 800b4f4:	0800c762 	.word	0x0800c762

0800b4f8 <_sbrk_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4d06      	ldr	r5, [pc, #24]	; (800b514 <_sbrk_r+0x1c>)
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	4604      	mov	r4, r0
 800b500:	4608      	mov	r0, r1
 800b502:	602b      	str	r3, [r5, #0]
 800b504:	f7f5 faf6 	bl	8000af4 <_sbrk>
 800b508:	1c43      	adds	r3, r0, #1
 800b50a:	d102      	bne.n	800b512 <_sbrk_r+0x1a>
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	b103      	cbz	r3, 800b512 <_sbrk_r+0x1a>
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	bd38      	pop	{r3, r4, r5, pc}
 800b514:	20000788 	.word	0x20000788

0800b518 <sniprintf>:
 800b518:	b40c      	push	{r2, r3}
 800b51a:	b530      	push	{r4, r5, lr}
 800b51c:	4b17      	ldr	r3, [pc, #92]	; (800b57c <sniprintf+0x64>)
 800b51e:	1e0c      	subs	r4, r1, #0
 800b520:	681d      	ldr	r5, [r3, #0]
 800b522:	b09d      	sub	sp, #116	; 0x74
 800b524:	da08      	bge.n	800b538 <sniprintf+0x20>
 800b526:	238b      	movs	r3, #139	; 0x8b
 800b528:	602b      	str	r3, [r5, #0]
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295
 800b52e:	b01d      	add	sp, #116	; 0x74
 800b530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b534:	b002      	add	sp, #8
 800b536:	4770      	bx	lr
 800b538:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b53c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b540:	bf14      	ite	ne
 800b542:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b546:	4623      	moveq	r3, r4
 800b548:	9304      	str	r3, [sp, #16]
 800b54a:	9307      	str	r3, [sp, #28]
 800b54c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b550:	9002      	str	r0, [sp, #8]
 800b552:	9006      	str	r0, [sp, #24]
 800b554:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b558:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b55a:	ab21      	add	r3, sp, #132	; 0x84
 800b55c:	a902      	add	r1, sp, #8
 800b55e:	4628      	mov	r0, r5
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	f000 fba5 	bl	800bcb0 <_svfiprintf_r>
 800b566:	1c43      	adds	r3, r0, #1
 800b568:	bfbc      	itt	lt
 800b56a:	238b      	movlt	r3, #139	; 0x8b
 800b56c:	602b      	strlt	r3, [r5, #0]
 800b56e:	2c00      	cmp	r4, #0
 800b570:	d0dd      	beq.n	800b52e <sniprintf+0x16>
 800b572:	9b02      	ldr	r3, [sp, #8]
 800b574:	2200      	movs	r2, #0
 800b576:	701a      	strb	r2, [r3, #0]
 800b578:	e7d9      	b.n	800b52e <sniprintf+0x16>
 800b57a:	bf00      	nop
 800b57c:	20000040 	.word	0x20000040

0800b580 <__swbuf_r>:
 800b580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b582:	460e      	mov	r6, r1
 800b584:	4614      	mov	r4, r2
 800b586:	4605      	mov	r5, r0
 800b588:	b118      	cbz	r0, 800b592 <__swbuf_r+0x12>
 800b58a:	6983      	ldr	r3, [r0, #24]
 800b58c:	b90b      	cbnz	r3, 800b592 <__swbuf_r+0x12>
 800b58e:	f000 f9d9 	bl	800b944 <__sinit>
 800b592:	4b21      	ldr	r3, [pc, #132]	; (800b618 <__swbuf_r+0x98>)
 800b594:	429c      	cmp	r4, r3
 800b596:	d12b      	bne.n	800b5f0 <__swbuf_r+0x70>
 800b598:	686c      	ldr	r4, [r5, #4]
 800b59a:	69a3      	ldr	r3, [r4, #24]
 800b59c:	60a3      	str	r3, [r4, #8]
 800b59e:	89a3      	ldrh	r3, [r4, #12]
 800b5a0:	071a      	lsls	r2, r3, #28
 800b5a2:	d52f      	bpl.n	800b604 <__swbuf_r+0x84>
 800b5a4:	6923      	ldr	r3, [r4, #16]
 800b5a6:	b36b      	cbz	r3, 800b604 <__swbuf_r+0x84>
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	6820      	ldr	r0, [r4, #0]
 800b5ac:	1ac0      	subs	r0, r0, r3
 800b5ae:	6963      	ldr	r3, [r4, #20]
 800b5b0:	b2f6      	uxtb	r6, r6
 800b5b2:	4283      	cmp	r3, r0
 800b5b4:	4637      	mov	r7, r6
 800b5b6:	dc04      	bgt.n	800b5c2 <__swbuf_r+0x42>
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	f000 f92e 	bl	800b81c <_fflush_r>
 800b5c0:	bb30      	cbnz	r0, 800b610 <__swbuf_r+0x90>
 800b5c2:	68a3      	ldr	r3, [r4, #8]
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	60a3      	str	r3, [r4, #8]
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	6022      	str	r2, [r4, #0]
 800b5ce:	701e      	strb	r6, [r3, #0]
 800b5d0:	6963      	ldr	r3, [r4, #20]
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	4283      	cmp	r3, r0
 800b5d6:	d004      	beq.n	800b5e2 <__swbuf_r+0x62>
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	07db      	lsls	r3, r3, #31
 800b5dc:	d506      	bpl.n	800b5ec <__swbuf_r+0x6c>
 800b5de:	2e0a      	cmp	r6, #10
 800b5e0:	d104      	bne.n	800b5ec <__swbuf_r+0x6c>
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	f000 f919 	bl	800b81c <_fflush_r>
 800b5ea:	b988      	cbnz	r0, 800b610 <__swbuf_r+0x90>
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f0:	4b0a      	ldr	r3, [pc, #40]	; (800b61c <__swbuf_r+0x9c>)
 800b5f2:	429c      	cmp	r4, r3
 800b5f4:	d101      	bne.n	800b5fa <__swbuf_r+0x7a>
 800b5f6:	68ac      	ldr	r4, [r5, #8]
 800b5f8:	e7cf      	b.n	800b59a <__swbuf_r+0x1a>
 800b5fa:	4b09      	ldr	r3, [pc, #36]	; (800b620 <__swbuf_r+0xa0>)
 800b5fc:	429c      	cmp	r4, r3
 800b5fe:	bf08      	it	eq
 800b600:	68ec      	ldreq	r4, [r5, #12]
 800b602:	e7ca      	b.n	800b59a <__swbuf_r+0x1a>
 800b604:	4621      	mov	r1, r4
 800b606:	4628      	mov	r0, r5
 800b608:	f000 f80c 	bl	800b624 <__swsetup_r>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d0cb      	beq.n	800b5a8 <__swbuf_r+0x28>
 800b610:	f04f 37ff 	mov.w	r7, #4294967295
 800b614:	e7ea      	b.n	800b5ec <__swbuf_r+0x6c>
 800b616:	bf00      	nop
 800b618:	0800c794 	.word	0x0800c794
 800b61c:	0800c7b4 	.word	0x0800c7b4
 800b620:	0800c774 	.word	0x0800c774

0800b624 <__swsetup_r>:
 800b624:	4b32      	ldr	r3, [pc, #200]	; (800b6f0 <__swsetup_r+0xcc>)
 800b626:	b570      	push	{r4, r5, r6, lr}
 800b628:	681d      	ldr	r5, [r3, #0]
 800b62a:	4606      	mov	r6, r0
 800b62c:	460c      	mov	r4, r1
 800b62e:	b125      	cbz	r5, 800b63a <__swsetup_r+0x16>
 800b630:	69ab      	ldr	r3, [r5, #24]
 800b632:	b913      	cbnz	r3, 800b63a <__swsetup_r+0x16>
 800b634:	4628      	mov	r0, r5
 800b636:	f000 f985 	bl	800b944 <__sinit>
 800b63a:	4b2e      	ldr	r3, [pc, #184]	; (800b6f4 <__swsetup_r+0xd0>)
 800b63c:	429c      	cmp	r4, r3
 800b63e:	d10f      	bne.n	800b660 <__swsetup_r+0x3c>
 800b640:	686c      	ldr	r4, [r5, #4]
 800b642:	89a3      	ldrh	r3, [r4, #12]
 800b644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b648:	0719      	lsls	r1, r3, #28
 800b64a:	d42c      	bmi.n	800b6a6 <__swsetup_r+0x82>
 800b64c:	06dd      	lsls	r5, r3, #27
 800b64e:	d411      	bmi.n	800b674 <__swsetup_r+0x50>
 800b650:	2309      	movs	r3, #9
 800b652:	6033      	str	r3, [r6, #0]
 800b654:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b658:	81a3      	strh	r3, [r4, #12]
 800b65a:	f04f 30ff 	mov.w	r0, #4294967295
 800b65e:	e03e      	b.n	800b6de <__swsetup_r+0xba>
 800b660:	4b25      	ldr	r3, [pc, #148]	; (800b6f8 <__swsetup_r+0xd4>)
 800b662:	429c      	cmp	r4, r3
 800b664:	d101      	bne.n	800b66a <__swsetup_r+0x46>
 800b666:	68ac      	ldr	r4, [r5, #8]
 800b668:	e7eb      	b.n	800b642 <__swsetup_r+0x1e>
 800b66a:	4b24      	ldr	r3, [pc, #144]	; (800b6fc <__swsetup_r+0xd8>)
 800b66c:	429c      	cmp	r4, r3
 800b66e:	bf08      	it	eq
 800b670:	68ec      	ldreq	r4, [r5, #12]
 800b672:	e7e6      	b.n	800b642 <__swsetup_r+0x1e>
 800b674:	0758      	lsls	r0, r3, #29
 800b676:	d512      	bpl.n	800b69e <__swsetup_r+0x7a>
 800b678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b67a:	b141      	cbz	r1, 800b68e <__swsetup_r+0x6a>
 800b67c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b680:	4299      	cmp	r1, r3
 800b682:	d002      	beq.n	800b68a <__swsetup_r+0x66>
 800b684:	4630      	mov	r0, r6
 800b686:	f7ff fb69 	bl	800ad5c <_free_r>
 800b68a:	2300      	movs	r3, #0
 800b68c:	6363      	str	r3, [r4, #52]	; 0x34
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b694:	81a3      	strh	r3, [r4, #12]
 800b696:	2300      	movs	r3, #0
 800b698:	6063      	str	r3, [r4, #4]
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	6023      	str	r3, [r4, #0]
 800b69e:	89a3      	ldrh	r3, [r4, #12]
 800b6a0:	f043 0308 	orr.w	r3, r3, #8
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	b94b      	cbnz	r3, 800b6be <__swsetup_r+0x9a>
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6b4:	d003      	beq.n	800b6be <__swsetup_r+0x9a>
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f000 fa09 	bl	800bad0 <__smakebuf_r>
 800b6be:	89a0      	ldrh	r0, [r4, #12]
 800b6c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6c4:	f010 0301 	ands.w	r3, r0, #1
 800b6c8:	d00a      	beq.n	800b6e0 <__swsetup_r+0xbc>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	60a3      	str	r3, [r4, #8]
 800b6ce:	6963      	ldr	r3, [r4, #20]
 800b6d0:	425b      	negs	r3, r3
 800b6d2:	61a3      	str	r3, [r4, #24]
 800b6d4:	6923      	ldr	r3, [r4, #16]
 800b6d6:	b943      	cbnz	r3, 800b6ea <__swsetup_r+0xc6>
 800b6d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6dc:	d1ba      	bne.n	800b654 <__swsetup_r+0x30>
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
 800b6e0:	0781      	lsls	r1, r0, #30
 800b6e2:	bf58      	it	pl
 800b6e4:	6963      	ldrpl	r3, [r4, #20]
 800b6e6:	60a3      	str	r3, [r4, #8]
 800b6e8:	e7f4      	b.n	800b6d4 <__swsetup_r+0xb0>
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	e7f7      	b.n	800b6de <__swsetup_r+0xba>
 800b6ee:	bf00      	nop
 800b6f0:	20000040 	.word	0x20000040
 800b6f4:	0800c794 	.word	0x0800c794
 800b6f8:	0800c7b4 	.word	0x0800c7b4
 800b6fc:	0800c774 	.word	0x0800c774

0800b700 <abort>:
 800b700:	b508      	push	{r3, lr}
 800b702:	2006      	movs	r0, #6
 800b704:	f000 fbfc 	bl	800bf00 <raise>
 800b708:	2001      	movs	r0, #1
 800b70a:	f7f5 f97c 	bl	8000a06 <_exit>
	...

0800b710 <__sflush_r>:
 800b710:	898a      	ldrh	r2, [r1, #12]
 800b712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b716:	4605      	mov	r5, r0
 800b718:	0710      	lsls	r0, r2, #28
 800b71a:	460c      	mov	r4, r1
 800b71c:	d458      	bmi.n	800b7d0 <__sflush_r+0xc0>
 800b71e:	684b      	ldr	r3, [r1, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	dc05      	bgt.n	800b730 <__sflush_r+0x20>
 800b724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b726:	2b00      	cmp	r3, #0
 800b728:	dc02      	bgt.n	800b730 <__sflush_r+0x20>
 800b72a:	2000      	movs	r0, #0
 800b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b732:	2e00      	cmp	r6, #0
 800b734:	d0f9      	beq.n	800b72a <__sflush_r+0x1a>
 800b736:	2300      	movs	r3, #0
 800b738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b73c:	682f      	ldr	r7, [r5, #0]
 800b73e:	602b      	str	r3, [r5, #0]
 800b740:	d032      	beq.n	800b7a8 <__sflush_r+0x98>
 800b742:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b744:	89a3      	ldrh	r3, [r4, #12]
 800b746:	075a      	lsls	r2, r3, #29
 800b748:	d505      	bpl.n	800b756 <__sflush_r+0x46>
 800b74a:	6863      	ldr	r3, [r4, #4]
 800b74c:	1ac0      	subs	r0, r0, r3
 800b74e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b750:	b10b      	cbz	r3, 800b756 <__sflush_r+0x46>
 800b752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b754:	1ac0      	subs	r0, r0, r3
 800b756:	2300      	movs	r3, #0
 800b758:	4602      	mov	r2, r0
 800b75a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b75c:	6a21      	ldr	r1, [r4, #32]
 800b75e:	4628      	mov	r0, r5
 800b760:	47b0      	blx	r6
 800b762:	1c43      	adds	r3, r0, #1
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	d106      	bne.n	800b776 <__sflush_r+0x66>
 800b768:	6829      	ldr	r1, [r5, #0]
 800b76a:	291d      	cmp	r1, #29
 800b76c:	d82c      	bhi.n	800b7c8 <__sflush_r+0xb8>
 800b76e:	4a2a      	ldr	r2, [pc, #168]	; (800b818 <__sflush_r+0x108>)
 800b770:	40ca      	lsrs	r2, r1
 800b772:	07d6      	lsls	r6, r2, #31
 800b774:	d528      	bpl.n	800b7c8 <__sflush_r+0xb8>
 800b776:	2200      	movs	r2, #0
 800b778:	6062      	str	r2, [r4, #4]
 800b77a:	04d9      	lsls	r1, r3, #19
 800b77c:	6922      	ldr	r2, [r4, #16]
 800b77e:	6022      	str	r2, [r4, #0]
 800b780:	d504      	bpl.n	800b78c <__sflush_r+0x7c>
 800b782:	1c42      	adds	r2, r0, #1
 800b784:	d101      	bne.n	800b78a <__sflush_r+0x7a>
 800b786:	682b      	ldr	r3, [r5, #0]
 800b788:	b903      	cbnz	r3, 800b78c <__sflush_r+0x7c>
 800b78a:	6560      	str	r0, [r4, #84]	; 0x54
 800b78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b78e:	602f      	str	r7, [r5, #0]
 800b790:	2900      	cmp	r1, #0
 800b792:	d0ca      	beq.n	800b72a <__sflush_r+0x1a>
 800b794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b798:	4299      	cmp	r1, r3
 800b79a:	d002      	beq.n	800b7a2 <__sflush_r+0x92>
 800b79c:	4628      	mov	r0, r5
 800b79e:	f7ff fadd 	bl	800ad5c <_free_r>
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	6360      	str	r0, [r4, #52]	; 0x34
 800b7a6:	e7c1      	b.n	800b72c <__sflush_r+0x1c>
 800b7a8:	6a21      	ldr	r1, [r4, #32]
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	47b0      	blx	r6
 800b7b0:	1c41      	adds	r1, r0, #1
 800b7b2:	d1c7      	bne.n	800b744 <__sflush_r+0x34>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d0c4      	beq.n	800b744 <__sflush_r+0x34>
 800b7ba:	2b1d      	cmp	r3, #29
 800b7bc:	d001      	beq.n	800b7c2 <__sflush_r+0xb2>
 800b7be:	2b16      	cmp	r3, #22
 800b7c0:	d101      	bne.n	800b7c6 <__sflush_r+0xb6>
 800b7c2:	602f      	str	r7, [r5, #0]
 800b7c4:	e7b1      	b.n	800b72a <__sflush_r+0x1a>
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	e7ad      	b.n	800b72c <__sflush_r+0x1c>
 800b7d0:	690f      	ldr	r7, [r1, #16]
 800b7d2:	2f00      	cmp	r7, #0
 800b7d4:	d0a9      	beq.n	800b72a <__sflush_r+0x1a>
 800b7d6:	0793      	lsls	r3, r2, #30
 800b7d8:	680e      	ldr	r6, [r1, #0]
 800b7da:	bf08      	it	eq
 800b7dc:	694b      	ldreq	r3, [r1, #20]
 800b7de:	600f      	str	r7, [r1, #0]
 800b7e0:	bf18      	it	ne
 800b7e2:	2300      	movne	r3, #0
 800b7e4:	eba6 0807 	sub.w	r8, r6, r7
 800b7e8:	608b      	str	r3, [r1, #8]
 800b7ea:	f1b8 0f00 	cmp.w	r8, #0
 800b7ee:	dd9c      	ble.n	800b72a <__sflush_r+0x1a>
 800b7f0:	6a21      	ldr	r1, [r4, #32]
 800b7f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7f4:	4643      	mov	r3, r8
 800b7f6:	463a      	mov	r2, r7
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	47b0      	blx	r6
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	dc06      	bgt.n	800b80e <__sflush_r+0xfe>
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b806:	81a3      	strh	r3, [r4, #12]
 800b808:	f04f 30ff 	mov.w	r0, #4294967295
 800b80c:	e78e      	b.n	800b72c <__sflush_r+0x1c>
 800b80e:	4407      	add	r7, r0
 800b810:	eba8 0800 	sub.w	r8, r8, r0
 800b814:	e7e9      	b.n	800b7ea <__sflush_r+0xda>
 800b816:	bf00      	nop
 800b818:	20400001 	.word	0x20400001

0800b81c <_fflush_r>:
 800b81c:	b538      	push	{r3, r4, r5, lr}
 800b81e:	690b      	ldr	r3, [r1, #16]
 800b820:	4605      	mov	r5, r0
 800b822:	460c      	mov	r4, r1
 800b824:	b913      	cbnz	r3, 800b82c <_fflush_r+0x10>
 800b826:	2500      	movs	r5, #0
 800b828:	4628      	mov	r0, r5
 800b82a:	bd38      	pop	{r3, r4, r5, pc}
 800b82c:	b118      	cbz	r0, 800b836 <_fflush_r+0x1a>
 800b82e:	6983      	ldr	r3, [r0, #24]
 800b830:	b90b      	cbnz	r3, 800b836 <_fflush_r+0x1a>
 800b832:	f000 f887 	bl	800b944 <__sinit>
 800b836:	4b14      	ldr	r3, [pc, #80]	; (800b888 <_fflush_r+0x6c>)
 800b838:	429c      	cmp	r4, r3
 800b83a:	d11b      	bne.n	800b874 <_fflush_r+0x58>
 800b83c:	686c      	ldr	r4, [r5, #4]
 800b83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d0ef      	beq.n	800b826 <_fflush_r+0xa>
 800b846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b848:	07d0      	lsls	r0, r2, #31
 800b84a:	d404      	bmi.n	800b856 <_fflush_r+0x3a>
 800b84c:	0599      	lsls	r1, r3, #22
 800b84e:	d402      	bmi.n	800b856 <_fflush_r+0x3a>
 800b850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b852:	f000 f915 	bl	800ba80 <__retarget_lock_acquire_recursive>
 800b856:	4628      	mov	r0, r5
 800b858:	4621      	mov	r1, r4
 800b85a:	f7ff ff59 	bl	800b710 <__sflush_r>
 800b85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b860:	07da      	lsls	r2, r3, #31
 800b862:	4605      	mov	r5, r0
 800b864:	d4e0      	bmi.n	800b828 <_fflush_r+0xc>
 800b866:	89a3      	ldrh	r3, [r4, #12]
 800b868:	059b      	lsls	r3, r3, #22
 800b86a:	d4dd      	bmi.n	800b828 <_fflush_r+0xc>
 800b86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b86e:	f000 f908 	bl	800ba82 <__retarget_lock_release_recursive>
 800b872:	e7d9      	b.n	800b828 <_fflush_r+0xc>
 800b874:	4b05      	ldr	r3, [pc, #20]	; (800b88c <_fflush_r+0x70>)
 800b876:	429c      	cmp	r4, r3
 800b878:	d101      	bne.n	800b87e <_fflush_r+0x62>
 800b87a:	68ac      	ldr	r4, [r5, #8]
 800b87c:	e7df      	b.n	800b83e <_fflush_r+0x22>
 800b87e:	4b04      	ldr	r3, [pc, #16]	; (800b890 <_fflush_r+0x74>)
 800b880:	429c      	cmp	r4, r3
 800b882:	bf08      	it	eq
 800b884:	68ec      	ldreq	r4, [r5, #12]
 800b886:	e7da      	b.n	800b83e <_fflush_r+0x22>
 800b888:	0800c794 	.word	0x0800c794
 800b88c:	0800c7b4 	.word	0x0800c7b4
 800b890:	0800c774 	.word	0x0800c774

0800b894 <std>:
 800b894:	2300      	movs	r3, #0
 800b896:	b510      	push	{r4, lr}
 800b898:	4604      	mov	r4, r0
 800b89a:	e9c0 3300 	strd	r3, r3, [r0]
 800b89e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8a2:	6083      	str	r3, [r0, #8]
 800b8a4:	8181      	strh	r1, [r0, #12]
 800b8a6:	6643      	str	r3, [r0, #100]	; 0x64
 800b8a8:	81c2      	strh	r2, [r0, #14]
 800b8aa:	6183      	str	r3, [r0, #24]
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	2208      	movs	r2, #8
 800b8b0:	305c      	adds	r0, #92	; 0x5c
 800b8b2:	f7ff fa4b 	bl	800ad4c <memset>
 800b8b6:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <std+0x38>)
 800b8b8:	6263      	str	r3, [r4, #36]	; 0x24
 800b8ba:	4b05      	ldr	r3, [pc, #20]	; (800b8d0 <std+0x3c>)
 800b8bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8be:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <std+0x40>)
 800b8c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8c2:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <std+0x44>)
 800b8c4:	6224      	str	r4, [r4, #32]
 800b8c6:	6323      	str	r3, [r4, #48]	; 0x30
 800b8c8:	bd10      	pop	{r4, pc}
 800b8ca:	bf00      	nop
 800b8cc:	0800bf39 	.word	0x0800bf39
 800b8d0:	0800bf5b 	.word	0x0800bf5b
 800b8d4:	0800bf93 	.word	0x0800bf93
 800b8d8:	0800bfb7 	.word	0x0800bfb7

0800b8dc <_cleanup_r>:
 800b8dc:	4901      	ldr	r1, [pc, #4]	; (800b8e4 <_cleanup_r+0x8>)
 800b8de:	f000 b8af 	b.w	800ba40 <_fwalk_reent>
 800b8e2:	bf00      	nop
 800b8e4:	0800b81d 	.word	0x0800b81d

0800b8e8 <__sfmoreglue>:
 800b8e8:	b570      	push	{r4, r5, r6, lr}
 800b8ea:	2268      	movs	r2, #104	; 0x68
 800b8ec:	1e4d      	subs	r5, r1, #1
 800b8ee:	4355      	muls	r5, r2
 800b8f0:	460e      	mov	r6, r1
 800b8f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8f6:	f7ff fa9d 	bl	800ae34 <_malloc_r>
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	b140      	cbz	r0, 800b910 <__sfmoreglue+0x28>
 800b8fe:	2100      	movs	r1, #0
 800b900:	e9c0 1600 	strd	r1, r6, [r0]
 800b904:	300c      	adds	r0, #12
 800b906:	60a0      	str	r0, [r4, #8]
 800b908:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b90c:	f7ff fa1e 	bl	800ad4c <memset>
 800b910:	4620      	mov	r0, r4
 800b912:	bd70      	pop	{r4, r5, r6, pc}

0800b914 <__sfp_lock_acquire>:
 800b914:	4801      	ldr	r0, [pc, #4]	; (800b91c <__sfp_lock_acquire+0x8>)
 800b916:	f000 b8b3 	b.w	800ba80 <__retarget_lock_acquire_recursive>
 800b91a:	bf00      	nop
 800b91c:	20000785 	.word	0x20000785

0800b920 <__sfp_lock_release>:
 800b920:	4801      	ldr	r0, [pc, #4]	; (800b928 <__sfp_lock_release+0x8>)
 800b922:	f000 b8ae 	b.w	800ba82 <__retarget_lock_release_recursive>
 800b926:	bf00      	nop
 800b928:	20000785 	.word	0x20000785

0800b92c <__sinit_lock_acquire>:
 800b92c:	4801      	ldr	r0, [pc, #4]	; (800b934 <__sinit_lock_acquire+0x8>)
 800b92e:	f000 b8a7 	b.w	800ba80 <__retarget_lock_acquire_recursive>
 800b932:	bf00      	nop
 800b934:	20000786 	.word	0x20000786

0800b938 <__sinit_lock_release>:
 800b938:	4801      	ldr	r0, [pc, #4]	; (800b940 <__sinit_lock_release+0x8>)
 800b93a:	f000 b8a2 	b.w	800ba82 <__retarget_lock_release_recursive>
 800b93e:	bf00      	nop
 800b940:	20000786 	.word	0x20000786

0800b944 <__sinit>:
 800b944:	b510      	push	{r4, lr}
 800b946:	4604      	mov	r4, r0
 800b948:	f7ff fff0 	bl	800b92c <__sinit_lock_acquire>
 800b94c:	69a3      	ldr	r3, [r4, #24]
 800b94e:	b11b      	cbz	r3, 800b958 <__sinit+0x14>
 800b950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b954:	f7ff bff0 	b.w	800b938 <__sinit_lock_release>
 800b958:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b95c:	6523      	str	r3, [r4, #80]	; 0x50
 800b95e:	4b13      	ldr	r3, [pc, #76]	; (800b9ac <__sinit+0x68>)
 800b960:	4a13      	ldr	r2, [pc, #76]	; (800b9b0 <__sinit+0x6c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	62a2      	str	r2, [r4, #40]	; 0x28
 800b966:	42a3      	cmp	r3, r4
 800b968:	bf04      	itt	eq
 800b96a:	2301      	moveq	r3, #1
 800b96c:	61a3      	streq	r3, [r4, #24]
 800b96e:	4620      	mov	r0, r4
 800b970:	f000 f820 	bl	800b9b4 <__sfp>
 800b974:	6060      	str	r0, [r4, #4]
 800b976:	4620      	mov	r0, r4
 800b978:	f000 f81c 	bl	800b9b4 <__sfp>
 800b97c:	60a0      	str	r0, [r4, #8]
 800b97e:	4620      	mov	r0, r4
 800b980:	f000 f818 	bl	800b9b4 <__sfp>
 800b984:	2200      	movs	r2, #0
 800b986:	60e0      	str	r0, [r4, #12]
 800b988:	2104      	movs	r1, #4
 800b98a:	6860      	ldr	r0, [r4, #4]
 800b98c:	f7ff ff82 	bl	800b894 <std>
 800b990:	68a0      	ldr	r0, [r4, #8]
 800b992:	2201      	movs	r2, #1
 800b994:	2109      	movs	r1, #9
 800b996:	f7ff ff7d 	bl	800b894 <std>
 800b99a:	68e0      	ldr	r0, [r4, #12]
 800b99c:	2202      	movs	r2, #2
 800b99e:	2112      	movs	r1, #18
 800b9a0:	f7ff ff78 	bl	800b894 <std>
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	61a3      	str	r3, [r4, #24]
 800b9a8:	e7d2      	b.n	800b950 <__sinit+0xc>
 800b9aa:	bf00      	nop
 800b9ac:	0800c73c 	.word	0x0800c73c
 800b9b0:	0800b8dd 	.word	0x0800b8dd

0800b9b4 <__sfp>:
 800b9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b6:	4607      	mov	r7, r0
 800b9b8:	f7ff ffac 	bl	800b914 <__sfp_lock_acquire>
 800b9bc:	4b1e      	ldr	r3, [pc, #120]	; (800ba38 <__sfp+0x84>)
 800b9be:	681e      	ldr	r6, [r3, #0]
 800b9c0:	69b3      	ldr	r3, [r6, #24]
 800b9c2:	b913      	cbnz	r3, 800b9ca <__sfp+0x16>
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	f7ff ffbd 	bl	800b944 <__sinit>
 800b9ca:	3648      	adds	r6, #72	; 0x48
 800b9cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	d503      	bpl.n	800b9dc <__sfp+0x28>
 800b9d4:	6833      	ldr	r3, [r6, #0]
 800b9d6:	b30b      	cbz	r3, 800ba1c <__sfp+0x68>
 800b9d8:	6836      	ldr	r6, [r6, #0]
 800b9da:	e7f7      	b.n	800b9cc <__sfp+0x18>
 800b9dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9e0:	b9d5      	cbnz	r5, 800ba18 <__sfp+0x64>
 800b9e2:	4b16      	ldr	r3, [pc, #88]	; (800ba3c <__sfp+0x88>)
 800b9e4:	60e3      	str	r3, [r4, #12]
 800b9e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9ea:	6665      	str	r5, [r4, #100]	; 0x64
 800b9ec:	f000 f847 	bl	800ba7e <__retarget_lock_init_recursive>
 800b9f0:	f7ff ff96 	bl	800b920 <__sfp_lock_release>
 800b9f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9fc:	6025      	str	r5, [r4, #0]
 800b9fe:	61a5      	str	r5, [r4, #24]
 800ba00:	2208      	movs	r2, #8
 800ba02:	4629      	mov	r1, r5
 800ba04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba08:	f7ff f9a0 	bl	800ad4c <memset>
 800ba0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba14:	4620      	mov	r0, r4
 800ba16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba18:	3468      	adds	r4, #104	; 0x68
 800ba1a:	e7d9      	b.n	800b9d0 <__sfp+0x1c>
 800ba1c:	2104      	movs	r1, #4
 800ba1e:	4638      	mov	r0, r7
 800ba20:	f7ff ff62 	bl	800b8e8 <__sfmoreglue>
 800ba24:	4604      	mov	r4, r0
 800ba26:	6030      	str	r0, [r6, #0]
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d1d5      	bne.n	800b9d8 <__sfp+0x24>
 800ba2c:	f7ff ff78 	bl	800b920 <__sfp_lock_release>
 800ba30:	230c      	movs	r3, #12
 800ba32:	603b      	str	r3, [r7, #0]
 800ba34:	e7ee      	b.n	800ba14 <__sfp+0x60>
 800ba36:	bf00      	nop
 800ba38:	0800c73c 	.word	0x0800c73c
 800ba3c:	ffff0001 	.word	0xffff0001

0800ba40 <_fwalk_reent>:
 800ba40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba44:	4606      	mov	r6, r0
 800ba46:	4688      	mov	r8, r1
 800ba48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba4c:	2700      	movs	r7, #0
 800ba4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba52:	f1b9 0901 	subs.w	r9, r9, #1
 800ba56:	d505      	bpl.n	800ba64 <_fwalk_reent+0x24>
 800ba58:	6824      	ldr	r4, [r4, #0]
 800ba5a:	2c00      	cmp	r4, #0
 800ba5c:	d1f7      	bne.n	800ba4e <_fwalk_reent+0xe>
 800ba5e:	4638      	mov	r0, r7
 800ba60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba64:	89ab      	ldrh	r3, [r5, #12]
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d907      	bls.n	800ba7a <_fwalk_reent+0x3a>
 800ba6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	d003      	beq.n	800ba7a <_fwalk_reent+0x3a>
 800ba72:	4629      	mov	r1, r5
 800ba74:	4630      	mov	r0, r6
 800ba76:	47c0      	blx	r8
 800ba78:	4307      	orrs	r7, r0
 800ba7a:	3568      	adds	r5, #104	; 0x68
 800ba7c:	e7e9      	b.n	800ba52 <_fwalk_reent+0x12>

0800ba7e <__retarget_lock_init_recursive>:
 800ba7e:	4770      	bx	lr

0800ba80 <__retarget_lock_acquire_recursive>:
 800ba80:	4770      	bx	lr

0800ba82 <__retarget_lock_release_recursive>:
 800ba82:	4770      	bx	lr

0800ba84 <__swhatbuf_r>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	460e      	mov	r6, r1
 800ba88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba8c:	2900      	cmp	r1, #0
 800ba8e:	b096      	sub	sp, #88	; 0x58
 800ba90:	4614      	mov	r4, r2
 800ba92:	461d      	mov	r5, r3
 800ba94:	da08      	bge.n	800baa8 <__swhatbuf_r+0x24>
 800ba96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	602a      	str	r2, [r5, #0]
 800ba9e:	061a      	lsls	r2, r3, #24
 800baa0:	d410      	bmi.n	800bac4 <__swhatbuf_r+0x40>
 800baa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baa6:	e00e      	b.n	800bac6 <__swhatbuf_r+0x42>
 800baa8:	466a      	mov	r2, sp
 800baaa:	f000 faab 	bl	800c004 <_fstat_r>
 800baae:	2800      	cmp	r0, #0
 800bab0:	dbf1      	blt.n	800ba96 <__swhatbuf_r+0x12>
 800bab2:	9a01      	ldr	r2, [sp, #4]
 800bab4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bab8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800babc:	425a      	negs	r2, r3
 800babe:	415a      	adcs	r2, r3
 800bac0:	602a      	str	r2, [r5, #0]
 800bac2:	e7ee      	b.n	800baa2 <__swhatbuf_r+0x1e>
 800bac4:	2340      	movs	r3, #64	; 0x40
 800bac6:	2000      	movs	r0, #0
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	b016      	add	sp, #88	; 0x58
 800bacc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bad0 <__smakebuf_r>:
 800bad0:	898b      	ldrh	r3, [r1, #12]
 800bad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bad4:	079d      	lsls	r5, r3, #30
 800bad6:	4606      	mov	r6, r0
 800bad8:	460c      	mov	r4, r1
 800bada:	d507      	bpl.n	800baec <__smakebuf_r+0x1c>
 800badc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	6123      	str	r3, [r4, #16]
 800bae4:	2301      	movs	r3, #1
 800bae6:	6163      	str	r3, [r4, #20]
 800bae8:	b002      	add	sp, #8
 800baea:	bd70      	pop	{r4, r5, r6, pc}
 800baec:	ab01      	add	r3, sp, #4
 800baee:	466a      	mov	r2, sp
 800baf0:	f7ff ffc8 	bl	800ba84 <__swhatbuf_r>
 800baf4:	9900      	ldr	r1, [sp, #0]
 800baf6:	4605      	mov	r5, r0
 800baf8:	4630      	mov	r0, r6
 800bafa:	f7ff f99b 	bl	800ae34 <_malloc_r>
 800bafe:	b948      	cbnz	r0, 800bb14 <__smakebuf_r+0x44>
 800bb00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb04:	059a      	lsls	r2, r3, #22
 800bb06:	d4ef      	bmi.n	800bae8 <__smakebuf_r+0x18>
 800bb08:	f023 0303 	bic.w	r3, r3, #3
 800bb0c:	f043 0302 	orr.w	r3, r3, #2
 800bb10:	81a3      	strh	r3, [r4, #12]
 800bb12:	e7e3      	b.n	800badc <__smakebuf_r+0xc>
 800bb14:	4b0d      	ldr	r3, [pc, #52]	; (800bb4c <__smakebuf_r+0x7c>)
 800bb16:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	6020      	str	r0, [r4, #0]
 800bb1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	9b00      	ldr	r3, [sp, #0]
 800bb24:	6163      	str	r3, [r4, #20]
 800bb26:	9b01      	ldr	r3, [sp, #4]
 800bb28:	6120      	str	r0, [r4, #16]
 800bb2a:	b15b      	cbz	r3, 800bb44 <__smakebuf_r+0x74>
 800bb2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb30:	4630      	mov	r0, r6
 800bb32:	f000 fa79 	bl	800c028 <_isatty_r>
 800bb36:	b128      	cbz	r0, 800bb44 <__smakebuf_r+0x74>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	f023 0303 	bic.w	r3, r3, #3
 800bb3e:	f043 0301 	orr.w	r3, r3, #1
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	89a0      	ldrh	r0, [r4, #12]
 800bb46:	4305      	orrs	r5, r0
 800bb48:	81a5      	strh	r5, [r4, #12]
 800bb4a:	e7cd      	b.n	800bae8 <__smakebuf_r+0x18>
 800bb4c:	0800b8dd 	.word	0x0800b8dd

0800bb50 <memmove>:
 800bb50:	4288      	cmp	r0, r1
 800bb52:	b510      	push	{r4, lr}
 800bb54:	eb01 0402 	add.w	r4, r1, r2
 800bb58:	d902      	bls.n	800bb60 <memmove+0x10>
 800bb5a:	4284      	cmp	r4, r0
 800bb5c:	4623      	mov	r3, r4
 800bb5e:	d807      	bhi.n	800bb70 <memmove+0x20>
 800bb60:	1e43      	subs	r3, r0, #1
 800bb62:	42a1      	cmp	r1, r4
 800bb64:	d008      	beq.n	800bb78 <memmove+0x28>
 800bb66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb6e:	e7f8      	b.n	800bb62 <memmove+0x12>
 800bb70:	4402      	add	r2, r0
 800bb72:	4601      	mov	r1, r0
 800bb74:	428a      	cmp	r2, r1
 800bb76:	d100      	bne.n	800bb7a <memmove+0x2a>
 800bb78:	bd10      	pop	{r4, pc}
 800bb7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb82:	e7f7      	b.n	800bb74 <memmove+0x24>

0800bb84 <__malloc_lock>:
 800bb84:	4801      	ldr	r0, [pc, #4]	; (800bb8c <__malloc_lock+0x8>)
 800bb86:	f7ff bf7b 	b.w	800ba80 <__retarget_lock_acquire_recursive>
 800bb8a:	bf00      	nop
 800bb8c:	20000784 	.word	0x20000784

0800bb90 <__malloc_unlock>:
 800bb90:	4801      	ldr	r0, [pc, #4]	; (800bb98 <__malloc_unlock+0x8>)
 800bb92:	f7ff bf76 	b.w	800ba82 <__retarget_lock_release_recursive>
 800bb96:	bf00      	nop
 800bb98:	20000784 	.word	0x20000784

0800bb9c <_realloc_r>:
 800bb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba0:	4680      	mov	r8, r0
 800bba2:	4614      	mov	r4, r2
 800bba4:	460e      	mov	r6, r1
 800bba6:	b921      	cbnz	r1, 800bbb2 <_realloc_r+0x16>
 800bba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbac:	4611      	mov	r1, r2
 800bbae:	f7ff b941 	b.w	800ae34 <_malloc_r>
 800bbb2:	b92a      	cbnz	r2, 800bbc0 <_realloc_r+0x24>
 800bbb4:	f7ff f8d2 	bl	800ad5c <_free_r>
 800bbb8:	4625      	mov	r5, r4
 800bbba:	4628      	mov	r0, r5
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	f000 fa54 	bl	800c06c <_malloc_usable_size_r>
 800bbc4:	4284      	cmp	r4, r0
 800bbc6:	4607      	mov	r7, r0
 800bbc8:	d802      	bhi.n	800bbd0 <_realloc_r+0x34>
 800bbca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbce:	d812      	bhi.n	800bbf6 <_realloc_r+0x5a>
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	4640      	mov	r0, r8
 800bbd4:	f7ff f92e 	bl	800ae34 <_malloc_r>
 800bbd8:	4605      	mov	r5, r0
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d0ed      	beq.n	800bbba <_realloc_r+0x1e>
 800bbde:	42bc      	cmp	r4, r7
 800bbe0:	4622      	mov	r2, r4
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	bf28      	it	cs
 800bbe6:	463a      	movcs	r2, r7
 800bbe8:	f7ff f8a2 	bl	800ad30 <memcpy>
 800bbec:	4631      	mov	r1, r6
 800bbee:	4640      	mov	r0, r8
 800bbf0:	f7ff f8b4 	bl	800ad5c <_free_r>
 800bbf4:	e7e1      	b.n	800bbba <_realloc_r+0x1e>
 800bbf6:	4635      	mov	r5, r6
 800bbf8:	e7df      	b.n	800bbba <_realloc_r+0x1e>

0800bbfa <__ssputs_r>:
 800bbfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbfe:	688e      	ldr	r6, [r1, #8]
 800bc00:	429e      	cmp	r6, r3
 800bc02:	4682      	mov	sl, r0
 800bc04:	460c      	mov	r4, r1
 800bc06:	4690      	mov	r8, r2
 800bc08:	461f      	mov	r7, r3
 800bc0a:	d838      	bhi.n	800bc7e <__ssputs_r+0x84>
 800bc0c:	898a      	ldrh	r2, [r1, #12]
 800bc0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc12:	d032      	beq.n	800bc7a <__ssputs_r+0x80>
 800bc14:	6825      	ldr	r5, [r4, #0]
 800bc16:	6909      	ldr	r1, [r1, #16]
 800bc18:	eba5 0901 	sub.w	r9, r5, r1
 800bc1c:	6965      	ldr	r5, [r4, #20]
 800bc1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc26:	3301      	adds	r3, #1
 800bc28:	444b      	add	r3, r9
 800bc2a:	106d      	asrs	r5, r5, #1
 800bc2c:	429d      	cmp	r5, r3
 800bc2e:	bf38      	it	cc
 800bc30:	461d      	movcc	r5, r3
 800bc32:	0553      	lsls	r3, r2, #21
 800bc34:	d531      	bpl.n	800bc9a <__ssputs_r+0xa0>
 800bc36:	4629      	mov	r1, r5
 800bc38:	f7ff f8fc 	bl	800ae34 <_malloc_r>
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	b950      	cbnz	r0, 800bc56 <__ssputs_r+0x5c>
 800bc40:	230c      	movs	r3, #12
 800bc42:	f8ca 3000 	str.w	r3, [sl]
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc4c:	81a3      	strh	r3, [r4, #12]
 800bc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc56:	6921      	ldr	r1, [r4, #16]
 800bc58:	464a      	mov	r2, r9
 800bc5a:	f7ff f869 	bl	800ad30 <memcpy>
 800bc5e:	89a3      	ldrh	r3, [r4, #12]
 800bc60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc68:	81a3      	strh	r3, [r4, #12]
 800bc6a:	6126      	str	r6, [r4, #16]
 800bc6c:	6165      	str	r5, [r4, #20]
 800bc6e:	444e      	add	r6, r9
 800bc70:	eba5 0509 	sub.w	r5, r5, r9
 800bc74:	6026      	str	r6, [r4, #0]
 800bc76:	60a5      	str	r5, [r4, #8]
 800bc78:	463e      	mov	r6, r7
 800bc7a:	42be      	cmp	r6, r7
 800bc7c:	d900      	bls.n	800bc80 <__ssputs_r+0x86>
 800bc7e:	463e      	mov	r6, r7
 800bc80:	6820      	ldr	r0, [r4, #0]
 800bc82:	4632      	mov	r2, r6
 800bc84:	4641      	mov	r1, r8
 800bc86:	f7ff ff63 	bl	800bb50 <memmove>
 800bc8a:	68a3      	ldr	r3, [r4, #8]
 800bc8c:	1b9b      	subs	r3, r3, r6
 800bc8e:	60a3      	str	r3, [r4, #8]
 800bc90:	6823      	ldr	r3, [r4, #0]
 800bc92:	4433      	add	r3, r6
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	2000      	movs	r0, #0
 800bc98:	e7db      	b.n	800bc52 <__ssputs_r+0x58>
 800bc9a:	462a      	mov	r2, r5
 800bc9c:	f7ff ff7e 	bl	800bb9c <_realloc_r>
 800bca0:	4606      	mov	r6, r0
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d1e1      	bne.n	800bc6a <__ssputs_r+0x70>
 800bca6:	6921      	ldr	r1, [r4, #16]
 800bca8:	4650      	mov	r0, sl
 800bcaa:	f7ff f857 	bl	800ad5c <_free_r>
 800bcae:	e7c7      	b.n	800bc40 <__ssputs_r+0x46>

0800bcb0 <_svfiprintf_r>:
 800bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	4698      	mov	r8, r3
 800bcb6:	898b      	ldrh	r3, [r1, #12]
 800bcb8:	061b      	lsls	r3, r3, #24
 800bcba:	b09d      	sub	sp, #116	; 0x74
 800bcbc:	4607      	mov	r7, r0
 800bcbe:	460d      	mov	r5, r1
 800bcc0:	4614      	mov	r4, r2
 800bcc2:	d50e      	bpl.n	800bce2 <_svfiprintf_r+0x32>
 800bcc4:	690b      	ldr	r3, [r1, #16]
 800bcc6:	b963      	cbnz	r3, 800bce2 <_svfiprintf_r+0x32>
 800bcc8:	2140      	movs	r1, #64	; 0x40
 800bcca:	f7ff f8b3 	bl	800ae34 <_malloc_r>
 800bcce:	6028      	str	r0, [r5, #0]
 800bcd0:	6128      	str	r0, [r5, #16]
 800bcd2:	b920      	cbnz	r0, 800bcde <_svfiprintf_r+0x2e>
 800bcd4:	230c      	movs	r3, #12
 800bcd6:	603b      	str	r3, [r7, #0]
 800bcd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcdc:	e0d1      	b.n	800be82 <_svfiprintf_r+0x1d2>
 800bcde:	2340      	movs	r3, #64	; 0x40
 800bce0:	616b      	str	r3, [r5, #20]
 800bce2:	2300      	movs	r3, #0
 800bce4:	9309      	str	r3, [sp, #36]	; 0x24
 800bce6:	2320      	movs	r3, #32
 800bce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcec:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcf0:	2330      	movs	r3, #48	; 0x30
 800bcf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be9c <_svfiprintf_r+0x1ec>
 800bcf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcfa:	f04f 0901 	mov.w	r9, #1
 800bcfe:	4623      	mov	r3, r4
 800bd00:	469a      	mov	sl, r3
 800bd02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd06:	b10a      	cbz	r2, 800bd0c <_svfiprintf_r+0x5c>
 800bd08:	2a25      	cmp	r2, #37	; 0x25
 800bd0a:	d1f9      	bne.n	800bd00 <_svfiprintf_r+0x50>
 800bd0c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd10:	d00b      	beq.n	800bd2a <_svfiprintf_r+0x7a>
 800bd12:	465b      	mov	r3, fp
 800bd14:	4622      	mov	r2, r4
 800bd16:	4629      	mov	r1, r5
 800bd18:	4638      	mov	r0, r7
 800bd1a:	f7ff ff6e 	bl	800bbfa <__ssputs_r>
 800bd1e:	3001      	adds	r0, #1
 800bd20:	f000 80aa 	beq.w	800be78 <_svfiprintf_r+0x1c8>
 800bd24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd26:	445a      	add	r2, fp
 800bd28:	9209      	str	r2, [sp, #36]	; 0x24
 800bd2a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f000 80a2 	beq.w	800be78 <_svfiprintf_r+0x1c8>
 800bd34:	2300      	movs	r3, #0
 800bd36:	f04f 32ff 	mov.w	r2, #4294967295
 800bd3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd3e:	f10a 0a01 	add.w	sl, sl, #1
 800bd42:	9304      	str	r3, [sp, #16]
 800bd44:	9307      	str	r3, [sp, #28]
 800bd46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd4a:	931a      	str	r3, [sp, #104]	; 0x68
 800bd4c:	4654      	mov	r4, sl
 800bd4e:	2205      	movs	r2, #5
 800bd50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd54:	4851      	ldr	r0, [pc, #324]	; (800be9c <_svfiprintf_r+0x1ec>)
 800bd56:	f7f4 fa2b 	bl	80001b0 <memchr>
 800bd5a:	9a04      	ldr	r2, [sp, #16]
 800bd5c:	b9d8      	cbnz	r0, 800bd96 <_svfiprintf_r+0xe6>
 800bd5e:	06d0      	lsls	r0, r2, #27
 800bd60:	bf44      	itt	mi
 800bd62:	2320      	movmi	r3, #32
 800bd64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd68:	0711      	lsls	r1, r2, #28
 800bd6a:	bf44      	itt	mi
 800bd6c:	232b      	movmi	r3, #43	; 0x2b
 800bd6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd72:	f89a 3000 	ldrb.w	r3, [sl]
 800bd76:	2b2a      	cmp	r3, #42	; 0x2a
 800bd78:	d015      	beq.n	800bda6 <_svfiprintf_r+0xf6>
 800bd7a:	9a07      	ldr	r2, [sp, #28]
 800bd7c:	4654      	mov	r4, sl
 800bd7e:	2000      	movs	r0, #0
 800bd80:	f04f 0c0a 	mov.w	ip, #10
 800bd84:	4621      	mov	r1, r4
 800bd86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd8a:	3b30      	subs	r3, #48	; 0x30
 800bd8c:	2b09      	cmp	r3, #9
 800bd8e:	d94e      	bls.n	800be2e <_svfiprintf_r+0x17e>
 800bd90:	b1b0      	cbz	r0, 800bdc0 <_svfiprintf_r+0x110>
 800bd92:	9207      	str	r2, [sp, #28]
 800bd94:	e014      	b.n	800bdc0 <_svfiprintf_r+0x110>
 800bd96:	eba0 0308 	sub.w	r3, r0, r8
 800bd9a:	fa09 f303 	lsl.w	r3, r9, r3
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	9304      	str	r3, [sp, #16]
 800bda2:	46a2      	mov	sl, r4
 800bda4:	e7d2      	b.n	800bd4c <_svfiprintf_r+0x9c>
 800bda6:	9b03      	ldr	r3, [sp, #12]
 800bda8:	1d19      	adds	r1, r3, #4
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	9103      	str	r1, [sp, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	bfbb      	ittet	lt
 800bdb2:	425b      	neglt	r3, r3
 800bdb4:	f042 0202 	orrlt.w	r2, r2, #2
 800bdb8:	9307      	strge	r3, [sp, #28]
 800bdba:	9307      	strlt	r3, [sp, #28]
 800bdbc:	bfb8      	it	lt
 800bdbe:	9204      	strlt	r2, [sp, #16]
 800bdc0:	7823      	ldrb	r3, [r4, #0]
 800bdc2:	2b2e      	cmp	r3, #46	; 0x2e
 800bdc4:	d10c      	bne.n	800bde0 <_svfiprintf_r+0x130>
 800bdc6:	7863      	ldrb	r3, [r4, #1]
 800bdc8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdca:	d135      	bne.n	800be38 <_svfiprintf_r+0x188>
 800bdcc:	9b03      	ldr	r3, [sp, #12]
 800bdce:	1d1a      	adds	r2, r3, #4
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	9203      	str	r2, [sp, #12]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	bfb8      	it	lt
 800bdd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bddc:	3402      	adds	r4, #2
 800bdde:	9305      	str	r3, [sp, #20]
 800bde0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800beac <_svfiprintf_r+0x1fc>
 800bde4:	7821      	ldrb	r1, [r4, #0]
 800bde6:	2203      	movs	r2, #3
 800bde8:	4650      	mov	r0, sl
 800bdea:	f7f4 f9e1 	bl	80001b0 <memchr>
 800bdee:	b140      	cbz	r0, 800be02 <_svfiprintf_r+0x152>
 800bdf0:	2340      	movs	r3, #64	; 0x40
 800bdf2:	eba0 000a 	sub.w	r0, r0, sl
 800bdf6:	fa03 f000 	lsl.w	r0, r3, r0
 800bdfa:	9b04      	ldr	r3, [sp, #16]
 800bdfc:	4303      	orrs	r3, r0
 800bdfe:	3401      	adds	r4, #1
 800be00:	9304      	str	r3, [sp, #16]
 800be02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be06:	4826      	ldr	r0, [pc, #152]	; (800bea0 <_svfiprintf_r+0x1f0>)
 800be08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be0c:	2206      	movs	r2, #6
 800be0e:	f7f4 f9cf 	bl	80001b0 <memchr>
 800be12:	2800      	cmp	r0, #0
 800be14:	d038      	beq.n	800be88 <_svfiprintf_r+0x1d8>
 800be16:	4b23      	ldr	r3, [pc, #140]	; (800bea4 <_svfiprintf_r+0x1f4>)
 800be18:	bb1b      	cbnz	r3, 800be62 <_svfiprintf_r+0x1b2>
 800be1a:	9b03      	ldr	r3, [sp, #12]
 800be1c:	3307      	adds	r3, #7
 800be1e:	f023 0307 	bic.w	r3, r3, #7
 800be22:	3308      	adds	r3, #8
 800be24:	9303      	str	r3, [sp, #12]
 800be26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be28:	4433      	add	r3, r6
 800be2a:	9309      	str	r3, [sp, #36]	; 0x24
 800be2c:	e767      	b.n	800bcfe <_svfiprintf_r+0x4e>
 800be2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be32:	460c      	mov	r4, r1
 800be34:	2001      	movs	r0, #1
 800be36:	e7a5      	b.n	800bd84 <_svfiprintf_r+0xd4>
 800be38:	2300      	movs	r3, #0
 800be3a:	3401      	adds	r4, #1
 800be3c:	9305      	str	r3, [sp, #20]
 800be3e:	4619      	mov	r1, r3
 800be40:	f04f 0c0a 	mov.w	ip, #10
 800be44:	4620      	mov	r0, r4
 800be46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be4a:	3a30      	subs	r2, #48	; 0x30
 800be4c:	2a09      	cmp	r2, #9
 800be4e:	d903      	bls.n	800be58 <_svfiprintf_r+0x1a8>
 800be50:	2b00      	cmp	r3, #0
 800be52:	d0c5      	beq.n	800bde0 <_svfiprintf_r+0x130>
 800be54:	9105      	str	r1, [sp, #20]
 800be56:	e7c3      	b.n	800bde0 <_svfiprintf_r+0x130>
 800be58:	fb0c 2101 	mla	r1, ip, r1, r2
 800be5c:	4604      	mov	r4, r0
 800be5e:	2301      	movs	r3, #1
 800be60:	e7f0      	b.n	800be44 <_svfiprintf_r+0x194>
 800be62:	ab03      	add	r3, sp, #12
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	462a      	mov	r2, r5
 800be68:	4b0f      	ldr	r3, [pc, #60]	; (800bea8 <_svfiprintf_r+0x1f8>)
 800be6a:	a904      	add	r1, sp, #16
 800be6c:	4638      	mov	r0, r7
 800be6e:	f3af 8000 	nop.w
 800be72:	1c42      	adds	r2, r0, #1
 800be74:	4606      	mov	r6, r0
 800be76:	d1d6      	bne.n	800be26 <_svfiprintf_r+0x176>
 800be78:	89ab      	ldrh	r3, [r5, #12]
 800be7a:	065b      	lsls	r3, r3, #25
 800be7c:	f53f af2c 	bmi.w	800bcd8 <_svfiprintf_r+0x28>
 800be80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be82:	b01d      	add	sp, #116	; 0x74
 800be84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be88:	ab03      	add	r3, sp, #12
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	462a      	mov	r2, r5
 800be8e:	4b06      	ldr	r3, [pc, #24]	; (800bea8 <_svfiprintf_r+0x1f8>)
 800be90:	a904      	add	r1, sp, #16
 800be92:	4638      	mov	r0, r7
 800be94:	f7ff fa0a 	bl	800b2ac <_printf_i>
 800be98:	e7eb      	b.n	800be72 <_svfiprintf_r+0x1c2>
 800be9a:	bf00      	nop
 800be9c:	0800c740 	.word	0x0800c740
 800bea0:	0800c74a 	.word	0x0800c74a
 800bea4:	00000000 	.word	0x00000000
 800bea8:	0800bbfb 	.word	0x0800bbfb
 800beac:	0800c746 	.word	0x0800c746

0800beb0 <_raise_r>:
 800beb0:	291f      	cmp	r1, #31
 800beb2:	b538      	push	{r3, r4, r5, lr}
 800beb4:	4604      	mov	r4, r0
 800beb6:	460d      	mov	r5, r1
 800beb8:	d904      	bls.n	800bec4 <_raise_r+0x14>
 800beba:	2316      	movs	r3, #22
 800bebc:	6003      	str	r3, [r0, #0]
 800bebe:	f04f 30ff 	mov.w	r0, #4294967295
 800bec2:	bd38      	pop	{r3, r4, r5, pc}
 800bec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bec6:	b112      	cbz	r2, 800bece <_raise_r+0x1e>
 800bec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800becc:	b94b      	cbnz	r3, 800bee2 <_raise_r+0x32>
 800bece:	4620      	mov	r0, r4
 800bed0:	f000 f830 	bl	800bf34 <_getpid_r>
 800bed4:	462a      	mov	r2, r5
 800bed6:	4601      	mov	r1, r0
 800bed8:	4620      	mov	r0, r4
 800beda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bede:	f000 b817 	b.w	800bf10 <_kill_r>
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d00a      	beq.n	800befc <_raise_r+0x4c>
 800bee6:	1c59      	adds	r1, r3, #1
 800bee8:	d103      	bne.n	800bef2 <_raise_r+0x42>
 800beea:	2316      	movs	r3, #22
 800beec:	6003      	str	r3, [r0, #0]
 800beee:	2001      	movs	r0, #1
 800bef0:	e7e7      	b.n	800bec2 <_raise_r+0x12>
 800bef2:	2400      	movs	r4, #0
 800bef4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bef8:	4628      	mov	r0, r5
 800befa:	4798      	blx	r3
 800befc:	2000      	movs	r0, #0
 800befe:	e7e0      	b.n	800bec2 <_raise_r+0x12>

0800bf00 <raise>:
 800bf00:	4b02      	ldr	r3, [pc, #8]	; (800bf0c <raise+0xc>)
 800bf02:	4601      	mov	r1, r0
 800bf04:	6818      	ldr	r0, [r3, #0]
 800bf06:	f7ff bfd3 	b.w	800beb0 <_raise_r>
 800bf0a:	bf00      	nop
 800bf0c:	20000040 	.word	0x20000040

0800bf10 <_kill_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d07      	ldr	r5, [pc, #28]	; (800bf30 <_kill_r+0x20>)
 800bf14:	2300      	movs	r3, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	4608      	mov	r0, r1
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	602b      	str	r3, [r5, #0]
 800bf1e:	f7f4 fd62 	bl	80009e6 <_kill>
 800bf22:	1c43      	adds	r3, r0, #1
 800bf24:	d102      	bne.n	800bf2c <_kill_r+0x1c>
 800bf26:	682b      	ldr	r3, [r5, #0]
 800bf28:	b103      	cbz	r3, 800bf2c <_kill_r+0x1c>
 800bf2a:	6023      	str	r3, [r4, #0]
 800bf2c:	bd38      	pop	{r3, r4, r5, pc}
 800bf2e:	bf00      	nop
 800bf30:	20000788 	.word	0x20000788

0800bf34 <_getpid_r>:
 800bf34:	f7f4 bd4f 	b.w	80009d6 <_getpid>

0800bf38 <__sread>:
 800bf38:	b510      	push	{r4, lr}
 800bf3a:	460c      	mov	r4, r1
 800bf3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf40:	f000 f89c 	bl	800c07c <_read_r>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	bfab      	itete	ge
 800bf48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf4a:	89a3      	ldrhlt	r3, [r4, #12]
 800bf4c:	181b      	addge	r3, r3, r0
 800bf4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf52:	bfac      	ite	ge
 800bf54:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf56:	81a3      	strhlt	r3, [r4, #12]
 800bf58:	bd10      	pop	{r4, pc}

0800bf5a <__swrite>:
 800bf5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf5e:	461f      	mov	r7, r3
 800bf60:	898b      	ldrh	r3, [r1, #12]
 800bf62:	05db      	lsls	r3, r3, #23
 800bf64:	4605      	mov	r5, r0
 800bf66:	460c      	mov	r4, r1
 800bf68:	4616      	mov	r6, r2
 800bf6a:	d505      	bpl.n	800bf78 <__swrite+0x1e>
 800bf6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf70:	2302      	movs	r3, #2
 800bf72:	2200      	movs	r2, #0
 800bf74:	f000 f868 	bl	800c048 <_lseek_r>
 800bf78:	89a3      	ldrh	r3, [r4, #12]
 800bf7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf82:	81a3      	strh	r3, [r4, #12]
 800bf84:	4632      	mov	r2, r6
 800bf86:	463b      	mov	r3, r7
 800bf88:	4628      	mov	r0, r5
 800bf8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8e:	f000 b817 	b.w	800bfc0 <_write_r>

0800bf92 <__sseek>:
 800bf92:	b510      	push	{r4, lr}
 800bf94:	460c      	mov	r4, r1
 800bf96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf9a:	f000 f855 	bl	800c048 <_lseek_r>
 800bf9e:	1c43      	adds	r3, r0, #1
 800bfa0:	89a3      	ldrh	r3, [r4, #12]
 800bfa2:	bf15      	itete	ne
 800bfa4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfae:	81a3      	strheq	r3, [r4, #12]
 800bfb0:	bf18      	it	ne
 800bfb2:	81a3      	strhne	r3, [r4, #12]
 800bfb4:	bd10      	pop	{r4, pc}

0800bfb6 <__sclose>:
 800bfb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfba:	f000 b813 	b.w	800bfe4 <_close_r>
	...

0800bfc0 <_write_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4d07      	ldr	r5, [pc, #28]	; (800bfe0 <_write_r+0x20>)
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	4608      	mov	r0, r1
 800bfc8:	4611      	mov	r1, r2
 800bfca:	2200      	movs	r2, #0
 800bfcc:	602a      	str	r2, [r5, #0]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f7f4 fd40 	bl	8000a54 <_write>
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	d102      	bne.n	800bfde <_write_r+0x1e>
 800bfd8:	682b      	ldr	r3, [r5, #0]
 800bfda:	b103      	cbz	r3, 800bfde <_write_r+0x1e>
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
 800bfe0:	20000788 	.word	0x20000788

0800bfe4 <_close_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4d06      	ldr	r5, [pc, #24]	; (800c000 <_close_r+0x1c>)
 800bfe8:	2300      	movs	r3, #0
 800bfea:	4604      	mov	r4, r0
 800bfec:	4608      	mov	r0, r1
 800bfee:	602b      	str	r3, [r5, #0]
 800bff0:	f7f4 fd4c 	bl	8000a8c <_close>
 800bff4:	1c43      	adds	r3, r0, #1
 800bff6:	d102      	bne.n	800bffe <_close_r+0x1a>
 800bff8:	682b      	ldr	r3, [r5, #0]
 800bffa:	b103      	cbz	r3, 800bffe <_close_r+0x1a>
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	bd38      	pop	{r3, r4, r5, pc}
 800c000:	20000788 	.word	0x20000788

0800c004 <_fstat_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	4d07      	ldr	r5, [pc, #28]	; (800c024 <_fstat_r+0x20>)
 800c008:	2300      	movs	r3, #0
 800c00a:	4604      	mov	r4, r0
 800c00c:	4608      	mov	r0, r1
 800c00e:	4611      	mov	r1, r2
 800c010:	602b      	str	r3, [r5, #0]
 800c012:	f7f4 fd47 	bl	8000aa4 <_fstat>
 800c016:	1c43      	adds	r3, r0, #1
 800c018:	d102      	bne.n	800c020 <_fstat_r+0x1c>
 800c01a:	682b      	ldr	r3, [r5, #0]
 800c01c:	b103      	cbz	r3, 800c020 <_fstat_r+0x1c>
 800c01e:	6023      	str	r3, [r4, #0]
 800c020:	bd38      	pop	{r3, r4, r5, pc}
 800c022:	bf00      	nop
 800c024:	20000788 	.word	0x20000788

0800c028 <_isatty_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d06      	ldr	r5, [pc, #24]	; (800c044 <_isatty_r+0x1c>)
 800c02c:	2300      	movs	r3, #0
 800c02e:	4604      	mov	r4, r0
 800c030:	4608      	mov	r0, r1
 800c032:	602b      	str	r3, [r5, #0]
 800c034:	f7f4 fd46 	bl	8000ac4 <_isatty>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_isatty_r+0x1a>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_isatty_r+0x1a>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	20000788 	.word	0x20000788

0800c048 <_lseek_r>:
 800c048:	b538      	push	{r3, r4, r5, lr}
 800c04a:	4d07      	ldr	r5, [pc, #28]	; (800c068 <_lseek_r+0x20>)
 800c04c:	4604      	mov	r4, r0
 800c04e:	4608      	mov	r0, r1
 800c050:	4611      	mov	r1, r2
 800c052:	2200      	movs	r2, #0
 800c054:	602a      	str	r2, [r5, #0]
 800c056:	461a      	mov	r2, r3
 800c058:	f7f4 fd3f 	bl	8000ada <_lseek>
 800c05c:	1c43      	adds	r3, r0, #1
 800c05e:	d102      	bne.n	800c066 <_lseek_r+0x1e>
 800c060:	682b      	ldr	r3, [r5, #0]
 800c062:	b103      	cbz	r3, 800c066 <_lseek_r+0x1e>
 800c064:	6023      	str	r3, [r4, #0]
 800c066:	bd38      	pop	{r3, r4, r5, pc}
 800c068:	20000788 	.word	0x20000788

0800c06c <_malloc_usable_size_r>:
 800c06c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c070:	1f18      	subs	r0, r3, #4
 800c072:	2b00      	cmp	r3, #0
 800c074:	bfbc      	itt	lt
 800c076:	580b      	ldrlt	r3, [r1, r0]
 800c078:	18c0      	addlt	r0, r0, r3
 800c07a:	4770      	bx	lr

0800c07c <_read_r>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	4d07      	ldr	r5, [pc, #28]	; (800c09c <_read_r+0x20>)
 800c080:	4604      	mov	r4, r0
 800c082:	4608      	mov	r0, r1
 800c084:	4611      	mov	r1, r2
 800c086:	2200      	movs	r2, #0
 800c088:	602a      	str	r2, [r5, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	f7f4 fcc5 	bl	8000a1a <_read>
 800c090:	1c43      	adds	r3, r0, #1
 800c092:	d102      	bne.n	800c09a <_read_r+0x1e>
 800c094:	682b      	ldr	r3, [r5, #0]
 800c096:	b103      	cbz	r3, 800c09a <_read_r+0x1e>
 800c098:	6023      	str	r3, [r4, #0]
 800c09a:	bd38      	pop	{r3, r4, r5, pc}
 800c09c:	20000788 	.word	0x20000788

0800c0a0 <_init>:
 800c0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a2:	bf00      	nop
 800c0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0a6:	bc08      	pop	{r3}
 800c0a8:	469e      	mov	lr, r3
 800c0aa:	4770      	bx	lr

0800c0ac <_fini>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	bf00      	nop
 800c0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b2:	bc08      	pop	{r3}
 800c0b4:	469e      	mov	lr, r3
 800c0b6:	4770      	bx	lr
