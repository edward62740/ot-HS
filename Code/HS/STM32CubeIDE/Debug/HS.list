
HS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1a0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  0800c2e0  0800c2e0  0001c2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cb54  0800cb54  0001cb54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cb58  0800cb58  0001cb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000008  0800cb5c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 SYSTEM_DRIVER_CONTEXT 00000011  200000a4  0800cbf8  000200a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006fc  200000b8  0800cc09  000200b8  2**2
                  ALLOC
  8 ._user_heap_stack 00002804  200007b4  0800cc09  000207b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 11 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 12 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 13 .debug_info   0003e467  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000078e8  00000000  00000000  0005e54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000030c0  00000000  00000000  00065e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002d78  00000000  00000000  00068ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003374e  00000000  00000000  0006bc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ccb1  00000000  00000000  0009f3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114829  00000000  00000000  000dc06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f0898  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d1bc  00000000  00000000  001f08e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000b8 	.word	0x200000b8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c2c8 	.word	0x0800c2c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000bc 	.word	0x200000bc
 800017c:	0800c2c8 	.word	0x0800c2c8

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	460b      	mov	r3, r1
 800025a:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800025c:	23ff      	movs	r3, #255	; 0xff
 800025e:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000260:	2300      	movs	r3, #0
 8000262:	81fb      	strh	r3, [r7, #14]
 8000264:	e021      	b.n	80002aa <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8000266:	89fb      	ldrh	r3, [r7, #14]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	781a      	ldrb	r2, [r3, #0]
 800026e:	7b7b      	ldrb	r3, [r7, #13]
 8000270:	4053      	eors	r3, r2
 8000272:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000274:	2308      	movs	r3, #8
 8000276:	733b      	strb	r3, [r7, #12]
 8000278:	e011      	b.n	800029e <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800027a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800027e:	2b00      	cmp	r3, #0
 8000280:	da07      	bge.n	8000292 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000282:	7b7b      	ldrb	r3, [r7, #13]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	b25b      	sxtb	r3, r3
 8000288:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800028c:	b25b      	sxtb	r3, r3
 800028e:	737b      	strb	r3, [r7, #13]
 8000290:	e002      	b.n	8000298 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000292:	7b7b      	ldrb	r3, [r7, #13]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000298:	7b3b      	ldrb	r3, [r7, #12]
 800029a:	3b01      	subs	r3, #1
 800029c:	733b      	strb	r3, [r7, #12]
 800029e:	7b3b      	ldrb	r3, [r7, #12]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1ea      	bne.n	800027a <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80002a4:	89fb      	ldrh	r3, [r7, #14]
 80002a6:	3301      	adds	r3, #1
 80002a8:	81fb      	strh	r3, [r7, #14]
 80002aa:	89fa      	ldrh	r2, [r7, #14]
 80002ac:	887b      	ldrh	r3, [r7, #2]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d3d9      	bcc.n	8000266 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80002b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	807b      	strh	r3, [r7, #2]
 80002cc:	4613      	mov	r3, r2
 80002ce:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	4619      	mov	r1, r3
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f7ff ffbb 	bl	8000250 <sensirion_common_generate_crc>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	787b      	ldrb	r3, [r7, #1]
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d002      	beq.n	80002ea <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 80002e4:	f04f 33ff 	mov.w	r3, #4294967295
 80002e8:	e000      	b.n	80002ec <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 80002ea:	2300      	movs	r3, #0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <sensirion_i2c_read_words_as_bytes>:
    }
    return idx;
}

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b096      	sub	sp, #88	; 0x58
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	4613      	mov	r3, r2
 8000302:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000304:	88bb      	ldrh	r3, [r7, #4]
 8000306:	461a      	mov	r2, r3
 8000308:	0052      	lsls	r2, r2, #1
 800030a:	4413      	add	r3, r2
 800030c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000310:	f107 0308 	add.w	r3, r7, #8
 8000314:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8000316:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f8a2 	bl	8000468 <sensirion_i2c_read>
 8000324:	4603      	mov	r3, r0
 8000326:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 800032a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800032e:	2b00      	cmp	r3, #0
 8000330:	d002      	beq.n	8000338 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000332:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000336:	e047      	b.n	80003c8 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000338:	2300      	movs	r3, #0
 800033a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800033e:	2300      	movs	r3, #0
 8000340:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000344:	e039      	b.n	80003ba <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000346:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800034a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800034c:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 800034e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000352:	3302      	adds	r3, #2
 8000354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000356:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	2102      	movs	r1, #2
 800035e:	f7ff ffaf 	bl	80002c0 <sensirion_common_check_crc>
 8000362:	4603      	mov	r3, r0
 8000364:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 8000368:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000370:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000374:	e028      	b.n	80003c8 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 8000376:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800037a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800037c:	441a      	add	r2, r3
 800037e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000382:	1c59      	adds	r1, r3, #1
 8000384:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 8000388:	4619      	mov	r1, r3
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	440b      	add	r3, r1
 800038e:	7812      	ldrb	r2, [r2, #0]
 8000390:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000392:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000396:	3301      	adds	r3, #1
 8000398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800039a:	441a      	add	r2, r3
 800039c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80003a0:	1c59      	adds	r1, r3, #1
 80003a2:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80003a6:	4619      	mov	r1, r3
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	440b      	add	r3, r1
 80003ac:	7812      	ldrb	r2, [r2, #0]
 80003ae:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80003b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80003b4:	3303      	adds	r3, #3
 80003b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80003ba:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80003be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3bf      	bcc.n	8000346 <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80003c6:	2300      	movs	r3, #0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3758      	adds	r7, #88	; 0x58
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	6039      	str	r1, [r7, #0]
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	4613      	mov	r3, r2
 80003de:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80003e0:	88ba      	ldrh	r2, [r7, #4]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	6839      	ldr	r1, [r7, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff84 	bl	80002f4 <sensirion_i2c_read_words_as_bytes>
 80003ec:	4603      	mov	r3, r0
 80003ee:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 80003f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <sensirion_i2c_read_words+0x2e>
        return ret;
 80003f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003fc:	e020      	b.n	8000440 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e017      	b.n	8000434 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	683a      	ldr	r2, [r7, #0]
 800040a:	4413      	add	r3, r2
 800040c:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	021b      	lsls	r3, r3, #8
 8000414:	b21a      	sxth	r2, r3
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	3301      	adds	r3, #1
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b21b      	sxth	r3, r3
 800041e:	4313      	orrs	r3, r2
 8000420:	b219      	sxth	r1, r3
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	4413      	add	r3, r2
 800042a:	b28a      	uxth	r2, r1
 800042c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	3301      	adds	r3, #1
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	b29b      	uxth	r3, r3
 8000438:	88ba      	ldrh	r2, [r7, #4]
 800043a:	429a      	cmp	r2, r3
 800043c:	d8e2      	bhi.n	8000404 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(I2C_HandleTypeDef* i2c_handle) {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	i2c = i2c_handle;
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <sensirion_i2c_init+0x1c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6013      	str	r3, [r2, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	200000d4 	.word	0x200000d4

08000468 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af02      	add	r7, sp, #8
 800046e:	4603      	mov	r3, r0
 8000470:	6039      	str	r1, [r7, #0]
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Receive(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <sensirion_i2c_read+0x34>)
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	b29b      	uxth	r3, r3
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	b299      	uxth	r1, r3
 8000484:	88bb      	ldrh	r3, [r7, #4]
 8000486:	2205      	movs	r2, #5
 8000488:	9200      	str	r2, [sp, #0]
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	f004 fd7a 	bl	8004f84 <HAL_I2C_Master_Receive>
 8000490:	4603      	mov	r3, r0
 8000492:	b25b      	sxtb	r3, r3
}
 8000494:	4618      	mov	r0, r3
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200000d4 	.word	0x200000d4

080004a0 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	4603      	mov	r3, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	4613      	mov	r3, r2
 80004ae:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Transmit(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <sensirion_i2c_write+0x34>)
 80004b2:	6818      	ldr	r0, [r3, #0]
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	b299      	uxth	r1, r3
 80004bc:	88bb      	ldrh	r3, [r7, #4]
 80004be:	2205      	movs	r2, #5
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	f004 fc6a 	bl	8004d9c <HAL_I2C_Master_Transmit>
 80004c8:	4603      	mov	r3, r0
 80004ca:	b25b      	sxtb	r3, r3
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000d4 	.word	0x200000d4

080004d8 <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <sensirion_sleep_usec+0x40>)
 80004e4:	fba2 2303 	umull	r2, r3, r2, r3
 80004e8:	099b      	lsrs	r3, r3, #6
 80004ea:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <sensirion_sleep_usec+0x40>)
 80004f0:	fba3 1302 	umull	r1, r3, r3, r2
 80004f4:	099b      	lsrs	r3, r3, #6
 80004f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004fa:	fb01 f303 	mul.w	r3, r1, r3
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <sensirion_sleep_usec+0x32>
        msec++;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	3301      	adds	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f001 ffa6 	bl	800245c <HAL_Delay>
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	10624dd3 	.word	0x10624dd3

0800051c <sht4x_activate_medium_heater>:
#define SHT_DRV_VERSION_STR "5.3.0"
static uint8_t sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
static uint16_t sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;


int16_t sht4x_activate_medium_heater(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	81fb      	strh	r3, [r7, #14]
    buffer[offset++] = (uint8_t)0x24;
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	81fa      	strh	r2, [r7, #14]
 800052c:	3310      	adds	r3, #16
 800052e:	443b      	add	r3, r7
 8000530:	2224      	movs	r2, #36	; 0x24
 8000532:	f803 2c0c 	strb.w	r2, [r3, #-12]

    error = sensirion_i2c_write(SHT4X_ADDRESS, &buffer[0], offset);
 8000536:	89fa      	ldrh	r2, [r7, #14]
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4619      	mov	r1, r3
 800053c:	2044      	movs	r0, #68	; 0x44
 800053e:	f7ff ffaf 	bl	80004a0 <sensirion_i2c_write>
 8000542:	4603      	mov	r3, r0
 8000544:	81bb      	strh	r3, [r7, #12]
    if (error) {
 8000546:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <sht4x_activate_medium_heater+0x38>
        return error;
 800054e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000552:	e000      	b.n	8000556 <sht4x_activate_medium_heater+0x3a>
    }


    return NO_ERROR;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <sht4x_measure_blocking_read>:

int16_t sht4x_measure_blocking_read(int32_t* temperature, int32_t* humidity) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sht4x_measure();
 800056a:	f000 f819 	bl	80005a0 <sht4x_measure>
 800056e:	4603      	mov	r3, r0
 8000570:	81fb      	strh	r3, [r7, #14]
    if (ret)
 8000572:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <sht4x_measure_blocking_read+0x20>
        return ret;
 800057a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800057e:	e009      	b.n	8000594 <sht4x_measure_blocking_read+0x34>
    sensirion_sleep_usec(sht4x_cmd_measure_delay_us);
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <sht4x_measure_blocking_read+0x3c>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ffa7 	bl	80004d8 <sensirion_sleep_usec>
    return sht4x_read(temperature, humidity);
 800058a:	6839      	ldr	r1, [r7, #0]
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f815 	bl	80005bc <sht4x_read>
 8000592:	4603      	mov	r3, r0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000000a 	.word	0x2000000a

080005a0 <sht4x_measure>:

int16_t sht4x_measure(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    return sensirion_i2c_write(SHT4X_ADDRESS, &sht4x_cmd_measure, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	4904      	ldr	r1, [pc, #16]	; (80005b8 <sht4x_measure+0x18>)
 80005a8:	2044      	movs	r0, #68	; 0x44
 80005aa:	f7ff ff79 	bl	80004a0 <sensirion_i2c_write>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b21b      	sxth	r3, r3
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000008 	.word	0x20000008

080005bc <sht4x_read>:

int16_t sht4x_read(int32_t* temperature, int32_t* humidity) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHT4X_ADDRESS, words,
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2202      	movs	r2, #2
 80005cc:	4619      	mov	r1, r3
 80005ce:	2044      	movs	r0, #68	; 0x44
 80005d0:	f7ff fefe 	bl	80003d0 <sensirion_i2c_read_words>
 80005d4:	4603      	mov	r3, r0
 80005d6:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 65535 - 45
     * Relative Humidity = 125 * (S_RH / 65535) - 6
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 80005d8:	893b      	ldrh	r3, [r7, #8]
 80005da:	461a      	mov	r2, r3
 80005dc:	f245 5373 	movw	r3, #21875	; 0x5573
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	135b      	asrs	r3, r3, #13
 80005e6:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 80005ea:	3bc8      	subs	r3, #200	; 0xc8
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	6013      	str	r3, [r2, #0]
    *humidity = ((15625 * (int32_t)words[1]) >> 13) - 6000;
 80005f0:	897b      	ldrh	r3, [r7, #10]
 80005f2:	461a      	mov	r2, r3
 80005f4:	f643 5309 	movw	r3, #15625	; 0x3d09
 80005f8:	fb02 f303 	mul.w	r3, r2, r3
 80005fc:	135b      	asrs	r3, r3, #13
 80005fe:	f5a3 53bb 	sub.w	r3, r3, #5984	; 0x1760
 8000602:	3b10      	subs	r3, #16
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	6013      	str	r3, [r2, #0]

    return ret;
 8000608:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <sht4x_enable_low_power_mode>:
    uint32_t serial;

    return sht4x_read_serial(&serial);
}

void sht4x_enable_low_power_mode(uint8_t enable_low_power_mode) {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
    if (enable_low_power_mode) {
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d007      	beq.n	8000634 <sht4x_enable_low_power_mode+0x20>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_LPM;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <sht4x_enable_low_power_mode+0x3c>)
 8000626:	22e0      	movs	r2, #224	; 0xe0
 8000628:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_LPM_USEC;
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <sht4x_enable_low_power_mode+0x40>)
 800062c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000630:	801a      	strh	r2, [r3, #0]
    } else {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
    }
}
 8000632:	e006      	b.n	8000642 <sht4x_enable_low_power_mode+0x2e>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <sht4x_enable_low_power_mode+0x3c>)
 8000636:	22fd      	movs	r2, #253	; 0xfd
 8000638:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <sht4x_enable_low_power_mode+0x40>)
 800063c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000640:	801a      	strh	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000008 	.word	0x20000008
 8000654:	2000000a 	.word	0x2000000a

08000658 <platform_stts22h_init>:
#include <stm32wbxx_hal.h>
stmdev_ctx_t dev_ctx;
stmdev_ctx_t *ctx;

bool platform_stts22h_init(I2C_HandleTypeDef* i2c_handle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	  static uint8_t whoamI;
	  /* Initialize mems driver interface */

	  dev_ctx.write_reg = platform_write;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <platform_stts22h_init+0x3c>)
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <platform_stts22h_init+0x40>)
 8000664:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <platform_stts22h_init+0x3c>)
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <platform_stts22h_init+0x44>)
 800066a:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &i2c_handle;
 800066c:	4a09      	ldr	r2, [pc, #36]	; (8000694 <platform_stts22h_init+0x3c>)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	60d3      	str	r3, [r2, #12]
	  ctx = &dev_ctx;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <platform_stts22h_init+0x48>)
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <platform_stts22h_init+0x3c>)
 8000676:	601a      	str	r2, [r3, #0]
	  /* Check device ID */
	  stts22h_dev_id_get(&whoamI);
 8000678:	480a      	ldr	r0, [pc, #40]	; (80006a4 <platform_stts22h_init+0x4c>)
 800067a:	f000 f966 	bl	800094a <stts22h_dev_id_get>

	  return (whoamI == STTS22H_ID ? true : false);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <platform_stts22h_init+0x4c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2ba0      	cmp	r3, #160	; 0xa0
 8000684:	bf0c      	ite	eq
 8000686:	2301      	moveq	r3, #1
 8000688:	2300      	movne	r3, #0
 800068a:	b2db      	uxtb	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000d8 	.word	0x200000d8
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080006df 	.word	0x080006df
 80006a0:	200000e8 	.word	0x200000e8
 80006a4:	200000ec 	.word	0x200000ec

080006a8 <platform_write>:

int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	461a      	mov	r2, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	72fb      	strb	r3, [r7, #11]
 80006b8:	4613      	mov	r3, r2
 80006ba:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Receive(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	b299      	uxth	r1, r3
 80006c4:	893b      	ldrh	r3, [r7, #8]
 80006c6:	2205      	movs	r2, #5
 80006c8:	9200      	str	r2, [sp, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f004 fc59 	bl	8004f84 <HAL_I2C_Master_Receive>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b25b      	sxtb	r3, r3
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <platform_read>:


int32_t platform_read(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af02      	add	r7, sp, #8
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	461a      	mov	r2, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	72fb      	strb	r3, [r7, #11]
 80006ee:	4613      	mov	r3, r2
 80006f0:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Transmit(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	b299      	uxth	r1, r3
 80006fa:	893b      	ldrh	r3, [r7, #8]
 80006fc:	2205      	movs	r2, #5
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f004 fb4a 	bl	8004d9c <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	b25b      	sxtb	r3, r3
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg( uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <stts22h_read_reg+0x30>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	685c      	ldr	r4, [r3, #4]
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <stts22h_read_reg+0x30>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68d8      	ldr	r0, [r3, #12]
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	79f9      	ldrb	r1, [r7, #7]
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	47a0      	blx	r4
 8000738:	60f8      	str	r0, [r7, #12]

  return ret;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	200000e8 	.word	0x200000e8

08000748 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg( uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <stts22h_write_reg+0x30>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681c      	ldr	r4, [r3, #0]
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <stts22h_write_reg+0x30>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	79f9      	ldrb	r1, [r7, #7]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	47a0      	blx	r4
 800076c:	60f8      	str	r0, [r7, #12]

  return ret;
 800076e:	68fb      	ldr	r3, [r7, #12]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	200000e8 	.word	0x200000e8

0800077c <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(
                                   stts22h_odr_temp_t val)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	2004      	movs	r0, #4
 8000790:	f7ff ffc0 	bl	8000714 <stts22h_read_reg>
 8000794:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d107      	bne.n	80007ac <stts22h_temp_data_rate_set+0x30>
  {
    ret = stts22h_read_reg(STTS22H_SOFTWARE_RESET,
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	200c      	movs	r0, #12
 80007a6:	f7ff ffb5 	bl	8000714 <stts22h_read_reg>
 80007aa:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d11d      	bne.n	80007ee <stts22h_temp_data_rate_set+0x72>
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d11a      	bne.n	80007ee <stts22h_temp_data_rate_set+0x72>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 80007b8:	7c3b      	ldrb	r3, [r7, #16]
 80007ba:	f043 0302 	orr.w	r3, r3, #2
 80007be:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	200c      	movs	r0, #12
 80007ca:	f7ff ffbd 	bl	8000748 <stts22h_write_reg>
 80007ce:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10b      	bne.n	80007ee <stts22h_temp_data_rate_set+0x72>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 80007d6:	7c3b      	ldrb	r3, [r7, #16]
 80007d8:	f36f 0341 	bfc	r3, #1, #1
 80007dc:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	200c      	movs	r0, #12
 80007e8:	f7ff ffae 	bl	8000748 <stts22h_write_reg>
 80007ec:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d008      	beq.n	8000806 <stts22h_temp_data_rate_set+0x8a>
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b12      	cmp	r3, #18
 80007f8:	d005      	beq.n	8000806 <stts22h_temp_data_rate_set+0x8a>
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b22      	cmp	r3, #34	; 0x22
 80007fe:	d002      	beq.n	8000806 <stts22h_temp_data_rate_set+0x8a>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b32      	cmp	r3, #50	; 0x32
 8000804:	d123      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000806:	7b3b      	ldrb	r3, [r7, #12]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 800080e:	2b00      	cmp	r3, #0
 8000810:	d11d      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d11a      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000818:	7c3b      	ldrb	r3, [r7, #16]
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	200c      	movs	r0, #12
 800082a:	f7ff ff8d 	bl	8000748 <stts22h_write_reg>
 800082e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10b      	bne.n	800084e <stts22h_temp_data_rate_set+0xd2>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000836:	7c3b      	ldrb	r3, [r7, #16]
 8000838:	f36f 0341 	bfc	r3, #1, #1
 800083c:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	2201      	movs	r2, #1
 8000844:	4619      	mov	r1, r3
 8000846:	200c      	movs	r0, #12
 8000848:	f7ff ff7e 	bl	8000748 <stts22h_write_reg>
 800084c:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b04      	cmp	r3, #4
 8000852:	d125      	bne.n	80008a0 <stts22h_temp_data_rate_set+0x124>
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d122      	bne.n	80008a0 <stts22h_temp_data_rate_set+0x124>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800085a:	7c3b      	ldrb	r3, [r7, #16]
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000862:	7c3b      	ldrb	r3, [r7, #16]
 8000864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000868:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	2201      	movs	r2, #1
 8000870:	4619      	mov	r1, r3
 8000872:	200c      	movs	r0, #12
 8000874:	f7ff ff68 	bl	8000748 <stts22h_write_reg>
 8000878:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d10f      	bne.n	80008a0 <stts22h_temp_data_rate_set+0x124>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000880:	7c3b      	ldrb	r3, [r7, #16]
 8000882:	f36f 0341 	bfc	r3, #1, #1
 8000886:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000888:	7c3b      	ldrb	r3, [r7, #16]
 800088a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088e:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	200c      	movs	r0, #12
 800089a:	f7ff ff55 	bl	8000748 <stts22h_write_reg>
 800089e:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d12a      	bne.n	80008fc <stts22h_temp_data_rate_set+0x180>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	f362 0300 	bfi	r3, r2, #0, #1
 80008b4:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	7b3b      	ldrb	r3, [r7, #12]
 80008c2:	f362 0382 	bfi	r3, r2, #2, #1
 80008c6:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	f362 13c7 	bfi	r3, r2, #7, #1
 80008d8:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	091b      	lsrs	r3, r3, #4
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	7b3b      	ldrb	r3, [r7, #12]
 80008e6:	f362 1305 	bfi	r3, r2, #4, #2
 80008ea:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2201      	movs	r2, #1
 80008f2:	4619      	mov	r1, r3
 80008f4:	2004      	movs	r0, #4
 80008f6:	f7ff ff27 	bl	8000748 <stts22h_write_reg>
 80008fa:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80008fc:	697b      	ldr	r3, [r7, #20]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get( int16_t *val)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_TEMP_L_OUT, buff, 2);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2202      	movs	r2, #2
 8000914:	4619      	mov	r1, r3
 8000916:	2006      	movs	r0, #6
 8000918:	f7ff fefc 	bl	8000714 <stts22h_read_reg>
 800091c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800091e:	7a7b      	ldrb	r3, [r7, #9]
 8000920:	b21a      	sxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092c:	b29b      	uxth	r3, r3
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b29a      	uxth	r2, r3
 8000932:	7a3b      	ldrb	r3, [r7, #8]
 8000934:	b29b      	uxth	r3, r3
 8000936:	4413      	add	r3, r2
 8000938:	b29b      	uxth	r3, r3
 800093a:	b21a      	sxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	801a      	strh	r2, [r3, #0]

  return ret;
 8000940:	68fb      	ldr	r3, [r7, #12]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get( uint8_t *buff)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_WHOAMI, buff, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fedc 	bl	8000714 <stts22h_read_reg>
 800095c:	60f8      	str	r0, [r7, #12]

  return ret;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000968:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096c:	3304      	adds	r3, #4

0800096e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000970:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000972:	d3f9      	bcc.n	8000968 <CopyDataInit>
  bx lr
 8000974:	4770      	bx	lr

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000976:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000978:	3004      	adds	r0, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800097a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>
  bx lr
 800097e:	4770      	bx	lr

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000984:	f003 faac 	bl	8003ee0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <LoopForever+0x8>)
 800098a:	490c      	ldr	r1, [pc, #48]	; (80009bc <LoopForever+0xc>)
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <LoopForever+0x10>)
 800098e:	2300      	movs	r3, #0
 8000990:	f7ff ffed 	bl	800096e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <LoopForever+0x14>)
 8000996:	490c      	ldr	r1, [pc, #48]	; (80009c8 <LoopForever+0x18>)
 8000998:	2300      	movs	r3, #0
 800099a:	f7ff ffee 	bl	800097a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <LoopForever+0x1c>)
 80009a0:	490b      	ldr	r1, [pc, #44]	; (80009d0 <LoopForever+0x20>)
 80009a2:	2300      	movs	r3, #0
 80009a4:	f7ff ffe9 	bl	800097a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a8:	f00a faa2 	bl	800aef0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80009ac:	f002 fd4c 	bl	8003448 <main>

080009b0 <LoopForever>:

LoopForever:
  b LoopForever
 80009b0:	e7fe      	b.n	80009b0 <LoopForever>
 80009b2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80009b4:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 80009b8:	20000008 	.word	0x20000008
 80009bc:	200000a4 	.word	0x200000a4
 80009c0:	0800cb5c 	.word	0x0800cb5c
  INIT_BSS _sbss, _ebss
 80009c4:	200000b8 	.word	0x200000b8
 80009c8:	200007b4 	.word	0x200007b4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80009cc:	200300e8 	.word	0x200300e8
 80009d0:	20030c6a 	.word	0x20030c6a

080009d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_IRQHandler>

080009d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  return 1;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <_kill>:

int _kill(int pid, int sig)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009f0:	f00a fa66 	bl	800aec0 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2216      	movs	r2, #22
 80009f8:	601a      	str	r2, [r3, #0]
  return -1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_exit>:

void _exit (int status)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffe7 	bl	80009e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a18:	e7fe      	b.n	8000a18 <_exit+0x12>

08000a1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	60f8      	str	r0, [r7, #12]
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	e00a      	b.n	8000a42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a2c:	f3af 8000 	nop.w
 8000a30:	4601      	mov	r1, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	60ba      	str	r2, [r7, #8]
 8000a38:	b2ca      	uxtb	r2, r1
 8000a3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	dbf0      	blt.n	8000a2c <_read+0x12>
  }

  return len;
 8000a4a:	687b      	ldr	r3, [r7, #4]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e009      	b.n	8000a7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	60ba      	str	r2, [r7, #8]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	3301      	adds	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	dbf1      	blt.n	8000a66 <_write+0x12>
  }
  return len;
 8000a82:	687b      	ldr	r3, [r7, #4]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_close>:

int _close(int file)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_isatty>:

int _isatty(int file)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b085      	sub	sp, #20
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f00a f9cc 	bl	800aec0 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20024000 	.word	0x20024000
 8000b54:	00002000 	.word	0x00002000
 8000b58:	200000f0 	.word	0x200000f0
 8000b5c:	200007b8 	.word	0x200007b8

08000b60 <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f007 ff55 	bl	8008a22 <otCoapSendResponseWithParameters>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <APP_THREAD_Init>:
static otInstance *sInstance = NULL;

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

	  /* USER CODE END APP_THREAD_INIT_1 */
	  SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f008 ff6e 	bl	8009a6e <SHCI_C2_RADIO_AllowLowPower>
	  SHCI_CmdStatus_t ThreadInitStatus;

	  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
	  APP_THREAD_CheckWirelessFirmwareInfo();
 8000b92:	f000 fad9 	bl	8001148 <APP_THREAD_CheckWirelessFirmwareInfo>
	#if (CFG_USB_INTERFACE_ENABLE != 0)
	  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
	#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

	  /* Register cmdbuffer */
	  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000b96:	482e      	ldr	r0, [pc, #184]	; (8000c50 <APP_THREAD_Init+0xcc>)
 8000b98:	f000 fd42 	bl	8001620 <APP_THREAD_RegisterCmdBuffer>

	  /**
	   * Do not allow standby in the application
	   */
	  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	2002      	movs	r0, #2
 8000ba0:	f009 fe4e 	bl	800a840 <UTIL_LPM_SetOffMode>
	  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f009 fe1a 	bl	800a7e0 <UTIL_LPM_SetStopMode>
	/* Init config buffer and call TL_THREAD_Init */
	APP_THREAD_TL_THREAD_INIT();
 8000bac:	f000 fdf6 	bl	800179c <APP_THREAD_TL_THREAD_INIT>

	/* Configure UART for sending CLI command from M4 */
	APP_THREAD_Init_UART_CLI();
 8000bb0:	f000 fdec 	bl	800178c <APP_THREAD_Init_UART_CLI>

	/* Send Thread start system cmd to M0 */
	ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000bb4:	f008 ff2f 	bl	8009a16 <SHCI_C2_THREAD_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]

	//otPlatRadioGetIeeeEui64(sInstance, &eui64);

	/* Prevent unused argument(s) compilation warning */
	UNUSED(ThreadInitStatus);
	sInstance = otInstanceInitSingle();
 8000bbc:	f007 ff99 	bl	8008af2 <otInstanceInitSingle>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a24      	ldr	r2, [pc, #144]	; (8000c54 <APP_THREAD_Init+0xd0>)
 8000bc4:	6013      	str	r3, [r2, #0]
	assert(sInstance);
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <APP_THREAD_Init+0xd0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <APP_THREAD_Init+0x56>
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <APP_THREAD_Init+0xd4>)
 8000bd0:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <APP_THREAD_Init+0xd8>)
 8000bd2:	21c7      	movs	r1, #199	; 0xc7
 8000bd4:	4822      	ldr	r0, [pc, #136]	; (8000c60 <APP_THREAD_Init+0xdc>)
 8000bd6:	f00a f955 	bl	800ae84 <__assert_func>
	APP_THREAD_SetSleepyEndDeviceMode();
 8000bda:	f000 f98f 	bl	8000efc <APP_THREAD_SetSleepyEndDeviceMode>
	/* Initialize and configure the Thread device*/
	otPlatRadioSetTransmitPower(sInstance, 6);
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <APP_THREAD_Init+0xd0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2106      	movs	r1, #6
 8000be4:	4618      	mov	r0, r3
 8000be6:	f008 fee3 	bl	80099b0 <otPlatRadioSetTransmitPower>
	APP_THREAD_DeviceConfig();
 8000bea:	f000 f9bb 	bl	8000f64 <APP_THREAD_DeviceConfig>
	//appSrpInit();
	/* Register task */
	/* Create the different tasks */
	UTIL_SEQ_RegTask(1 << (uint32_t) CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU,
 8000bee:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <APP_THREAD_Init+0xe0>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f009 ff86 	bl	800ab04 <UTIL_SEQ_RegTask>
			APP_THREAD_ProcessMsgM0ToM4);

	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &coapMessageTimerId, hw_ts_Repeated,
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <APP_THREAD_Init+0xe4>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	491b      	ldr	r1, [pc, #108]	; (8000c6c <APP_THREAD_Init+0xe8>)
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f002 f9c6 	bl	8002f90 <HW_TS_Create>
			(HW_TS_pTimerCb_t) APP_THREAD_SendCoapMsg);
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &setThreadLpTimerId, hw_ts_SingleShot,
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <APP_THREAD_Init+0xec>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	491a      	ldr	r1, [pc, #104]	; (8000c74 <APP_THREAD_Init+0xf0>)
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f002 f9c0 	bl	8002f90 <HW_TS_Create>
			APP_THREAD_SetSleepyEndDeviceMode);
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &srpRegisterTimerId, hw_ts_SingleShot,
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <APP_THREAD_Init+0xf4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	4919      	ldr	r1, [pc, #100]	; (8000c7c <APP_THREAD_Init+0xf8>)
 8000c16:	2000      	movs	r0, #0
 8000c18:	f002 f9ba 	bl	8002f90 <HW_TS_Create>
			appSrpInit);
	HW_TS_Start(coapMessageTimerId, coapMessageIntervalMs);
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <APP_THREAD_Init+0xe8>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f24f 0223 	movw	r2, #61475	; 0xf023
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 fab0 	bl	800318c <HW_TS_Start>
	//HW_TS_Start(srpRegisterTimerId, 10 * 1000 * 1000 / CFG_TS_TICK_VAL);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4813      	ldr	r0, [pc, #76]	; (8000c80 <APP_THREAD_Init+0xfc>)
 8000c32:	f003 ffab 	bl	8004b8c <HAL_GPIO_WritePin>
	/* USER CODE BEGIN INIT TASKS */


	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f009 fdd1 	bl	800a7e0 <UTIL_LPM_SetStopMode>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 8000c3e:	2101      	movs	r1, #1
 8000c40:	2001      	movs	r0, #1
 8000c42:	f008 ff14 	bl	8009a6e <SHCI_C2_RADIO_AllowLowPower>

}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200300e8 	.word	0x200300e8
 8000c54:	20000248 	.word	0x20000248
 8000c58:	0800c2ec 	.word	0x0800c2ec
 8000c5c:	0800c9b0 	.word	0x0800c9b0
 8000c60:	0800c2f8 	.word	0x0800c2f8
 8000c64:	08001831 	.word	0x08001831
 8000c68:	080013c1 	.word	0x080013c1
 8000c6c:	20000104 	.word	0x20000104
 8000c70:	08000efd 	.word	0x08000efd
 8000c74:	20000105 	.word	0x20000105
 8000c78:	08000c85 	.word	0x08000c85
 8000c7c:	20000106 	.word	0x20000106
 8000c80:	48000800 	.word	0x48000800

08000c84 <appSrpInit>:

void appSrpInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b090      	sub	sp, #64	; 0x40
 8000c88:	af00      	add	r7, sp, #0
    otError error = OT_ERROR_NONE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    char *hostName;
    char *HOST_NAME = "OT-HS-0";
 8000c90:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <appSrpInit+0xf8>)
 8000c92:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t size;
    hostName = otSrpClientBuffersGetHostNameString(sInstance, &size);
 8000c94:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <appSrpInit+0xfc>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f009 f9a7 	bl	8009ff2 <otSrpClientBuffersGetHostNameString>
 8000ca4:	6378      	str	r0, [r7, #52]	; 0x34
    error |= otSrpClientSetHostName(sInstance, HOST_NAME);
 8000ca6:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <appSrpInit+0xfc>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000cac:	4618      	mov	r0, r3
 8000cae:	f009 f913 	bl	8009ed8 <otSrpClientSetHostName>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    memcpy(hostName, HOST_NAME, sizeof(HOST_NAME) + 1);
 8000cc0:	2205      	movs	r2, #5
 8000cc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000cc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000cc6:	f00a f947 	bl	800af58 <memcpy>

    otSrpClientEnableAutoHostAddress(sInstance);
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <appSrpInit+0xfc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f009 f933 	bl	8009f3a <otSrpClientEnableAutoHostAddress>


    otSrpClientBuffersServiceEntry *entry = NULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
    char *string;

    entry = otSrpClientBuffersAllocateService(sInstance);
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <appSrpInit+0xfc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f009 f9b8 	bl	800a052 <otSrpClientBuffersAllocateService>
 8000ce2:	6338      	str	r0, [r7, #48]	; 0x30

    entry->mService.mPort = 33434;
 8000ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce6:	f248 229a 	movw	r2, #33434	; 0x829a
 8000cea:	821a      	strh	r2, [r3, #16]
    char INST_NAME[32];
    snprintf(INST_NAME, 32, "ipv6bc%d", 255);
 8000cec:	1d38      	adds	r0, r7, #4
 8000cee:	23ff      	movs	r3, #255	; 0xff
 8000cf0:	4a24      	ldr	r2, [pc, #144]	; (8000d84 <appSrpInit+0x100>)
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	f00a fd24 	bl	800b740 <sniprintf>
    char *SERV_NAME = "_ot._udp";
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <appSrpInit+0x104>)
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    string = otSrpClientBuffersGetServiceEntryInstanceNameString(entry, &size);
 8000cfc:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000d00:	4619      	mov	r1, r3
 8000d02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d04:	f009 fa02 	bl	800a10c <otSrpClientBuffersGetServiceEntryInstanceNameString>
 8000d08:	62b8      	str	r0, [r7, #40]	; 0x28
    memcpy(string, INST_NAME, size);
 8000d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d14:	f00a f920 	bl	800af58 <memcpy>


    string = otSrpClientBuffersGetServiceEntryServiceNameString(entry, &size);
 8000d18:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d20:	f009 f9c1 	bl	800a0a6 <otSrpClientBuffersGetServiceEntryServiceNameString>
 8000d24:	62b8      	str	r0, [r7, #40]	; 0x28
    memcpy(string, SERV_NAME, size);
 8000d26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d28:	461a      	mov	r2, r3
 8000d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d2e:	f00a f913 	bl	800af58 <memcpy>

    error |= otSrpClientAddService(sInstance, &entry->mService);
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <appSrpInit+0xfc>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f009 f928 	bl	8009f90 <otSrpClientAddService>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    entry = NULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30

    otSrpClientEnableAutoStartMode(sInstance, /* aCallback */ NULL, /* aContext */ NULL);
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <appSrpInit+0xfc>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f009 f888 	bl	8009e70 <otSrpClientEnableAutoStartMode>
    if(error != OT_ERROR_NONE) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d004      	beq.n	8000d72 <appSrpInit+0xee>
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	4807      	ldr	r0, [pc, #28]	; (8000d8c <appSrpInit+0x108>)
 8000d6e:	f003 ff0d 	bl	8004b8c <HAL_GPIO_WritePin>
}
 8000d72:	bf00      	nop
 8000d74:	3740      	adds	r7, #64	; 0x40
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	0800c348 	.word	0x0800c348
 8000d80:	20000248 	.word	0x20000248
 8000d84:	0800c350 	.word	0x0800c350
 8000d88:	0800c35c 	.word	0x0800c35c
 8000d8c:	48000800 	.word	0x48000800

08000d90 <APP_THREAD_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN APP_THREAD_Error_1 */

	/* USER CODE END APP_THREAD_Error_1 */
	switch (ErrId)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b16      	cmp	r3, #22
 8000d9e:	f200 8081 	bhi.w	8000ea4 <APP_THREAD_Error+0x114>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <APP_THREAD_Error+0x18>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000e05 	.word	0x08000e05
 8000dac:	08000e0f 	.word	0x08000e0f
 8000db0:	08000e19 	.word	0x08000e19
 8000db4:	08000e23 	.word	0x08000e23
 8000db8:	08000e2d 	.word	0x08000e2d
 8000dbc:	08000e37 	.word	0x08000e37
 8000dc0:	08000e41 	.word	0x08000e41
 8000dc4:	08000e4b 	.word	0x08000e4b
 8000dc8:	08000e5f 	.word	0x08000e5f
 8000dcc:	08000e69 	.word	0x08000e69
 8000dd0:	08000e73 	.word	0x08000e73
 8000dd4:	08000e7d 	.word	0x08000e7d
 8000dd8:	08000ea5 	.word	0x08000ea5
 8000ddc:	08000e87 	.word	0x08000e87
 8000de0:	08000e91 	.word	0x08000e91
 8000de4:	08000ea5 	.word	0x08000ea5
 8000de8:	08000ea5 	.word	0x08000ea5
 8000dec:	08000ea5 	.word	0x08000ea5
 8000df0:	08000ea5 	.word	0x08000ea5
 8000df4:	08000ea5 	.word	0x08000ea5
 8000df8:	08000e9b 	.word	0x08000e9b
 8000dfc:	08000ea5 	.word	0x08000ea5
 8000e00:	08000e55 	.word	0x08000e55
	{
	case ERR_REC_MULTI_MSG_FROM_M0:
		APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8000e04:	6839      	ldr	r1, [r7, #0]
 8000e06:	482c      	ldr	r0, [pc, #176]	; (8000eb8 <APP_THREAD_Error+0x128>)
 8000e08:	f000 f98a 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e0c:	e04f      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_STATE_CB:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ", ErrCode);
 8000e0e:	6839      	ldr	r1, [r7, #0]
 8000e10:	482a      	ldr	r0, [pc, #168]	; (8000ebc <APP_THREAD_Error+0x12c>)
 8000e12:	f000 f985 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e16:	e04a      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_CHANNEL:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ", ErrCode);
 8000e18:	6839      	ldr	r1, [r7, #0]
 8000e1a:	4829      	ldr	r0, [pc, #164]	; (8000ec0 <APP_THREAD_Error+0x130>)
 8000e1c:	f000 f980 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e20:	e045      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_PANID:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ", ErrCode);
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	4827      	ldr	r0, [pc, #156]	; (8000ec4 <APP_THREAD_Error+0x134>)
 8000e26:	f000 f97b 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e2a:	e040      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_IPV6_ENABLE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ", ErrCode);
 8000e2c:	6839      	ldr	r1, [r7, #0]
 8000e2e:	4826      	ldr	r0, [pc, #152]	; (8000ec8 <APP_THREAD_Error+0x138>)
 8000e30:	f000 f976 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e34:	e03b      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_START:
		APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8000e36:	6839      	ldr	r1, [r7, #0]
 8000e38:	4824      	ldr	r0, [pc, #144]	; (8000ecc <APP_THREAD_Error+0x13c>)
 8000e3a:	f000 f971 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e3e:	e036      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_ERASE_PERSISTENT_INFO:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	4823      	ldr	r0, [pc, #140]	; (8000ed0 <APP_THREAD_Error+0x140>)
 8000e44:	f000 f96c 	bl	8001120 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000e48:	e031      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_SET_NETWORK_KEY:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ", ErrCode);
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	4821      	ldr	r0, [pc, #132]	; (8000ed4 <APP_THREAD_Error+0x144>)
 8000e4e:	f000 f967 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e52:	e02c      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_CHECK_WIRELESS:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ", ErrCode);
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	4820      	ldr	r0, [pc, #128]	; (8000ed8 <APP_THREAD_Error+0x148>)
 8000e58:	f000 f962 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e5c:	e027      	b.n	8000eae <APP_THREAD_Error+0x11e>
		/* USER CODE BEGIN APP_THREAD_Error_2 */
	case ERR_THREAD_COAP_START:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ", ErrCode);
 8000e5e:	6839      	ldr	r1, [r7, #0]
 8000e60:	481e      	ldr	r0, [pc, #120]	; (8000edc <APP_THREAD_Error+0x14c>)
 8000e62:	f000 f95d 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e66:	e022      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_ADD_RESSOURCE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",
 8000e68:	6839      	ldr	r1, [r7, #0]
 8000e6a:	481d      	ldr	r0, [pc, #116]	; (8000ee0 <APP_THREAD_Error+0x150>)
 8000e6c:	f000 f958 	bl	8001120 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000e70:	e01d      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_MESSAGE_READ:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ", ErrCode);
 8000e72:	6839      	ldr	r1, [r7, #0]
 8000e74:	481b      	ldr	r0, [pc, #108]	; (8000ee4 <APP_THREAD_Error+0x154>)
 8000e76:	f000 f953 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e7a:	e018      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_SEND_RESPONSE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",
 8000e7c:	6839      	ldr	r1, [r7, #0]
 8000e7e:	481a      	ldr	r0, [pc, #104]	; (8000ee8 <APP_THREAD_Error+0x158>)
 8000e80:	f000 f94e 	bl	8001120 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000e84:	e013      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_APPEND:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ", ErrCode);
 8000e86:	6839      	ldr	r1, [r7, #0]
 8000e88:	4818      	ldr	r0, [pc, #96]	; (8000eec <APP_THREAD_Error+0x15c>)
 8000e8a:	f000 f949 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e8e:	e00e      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_COAP_SEND_REQUEST:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ", ErrCode);
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	4817      	ldr	r0, [pc, #92]	; (8000ef0 <APP_THREAD_Error+0x160>)
 8000e94:	f000 f944 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000e98:	e009      	b.n	8000eae <APP_THREAD_Error+0x11e>
	case ERR_THREAD_MSG_COMPARE_FAILED:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <APP_THREAD_Error+0x164>)
 8000e9e:	f000 f93f 	bl	8001120 <APP_THREAD_TraceError>
				ErrCode);
		break;
 8000ea2:	e004      	b.n	8000eae <APP_THREAD_Error+0x11e>
		/* USER CODE END APP_THREAD_Error_2 */
	default:
		APP_THREAD_TraceError("ERROR Unknown ", 0);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <APP_THREAD_Error+0x168>)
 8000ea8:	f000 f93a 	bl	8001120 <APP_THREAD_TraceError>
		break;
 8000eac:	bf00      	nop
	}
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	0800c368 	.word	0x0800c368
 8000ebc:	0800c38c 	.word	0x0800c38c
 8000ec0:	0800c3b0 	.word	0x0800c3b0
 8000ec4:	0800c3d0 	.word	0x0800c3d0
 8000ec8:	0800c3f0 	.word	0x0800c3f0
 8000ecc:	0800c410 	.word	0x0800c410
 8000ed0:	0800c42c 	.word	0x0800c42c
 8000ed4:	0800c458 	.word	0x0800c458
 8000ed8:	0800c47c 	.word	0x0800c47c
 8000edc:	0800c4a0 	.word	0x0800c4a0
 8000ee0:	0800c4c0 	.word	0x0800c4c0
 8000ee4:	0800c4e8 	.word	0x0800c4e8
 8000ee8:	0800c50c 	.word	0x0800c50c
 8000eec:	0800c534 	.word	0x0800c534
 8000ef0:	0800c554 	.word	0x0800c554
 8000ef4:	0800c57c 	.word	0x0800c57c
 8000ef8:	0800c5a4 	.word	0x0800c5a4

08000efc <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
	otError error = OT_ERROR_NONE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	71fb      	strb	r3, [r7, #7]

	/* Set the pool period to 5 sec. It means that when the device will enter
	 * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
	 * This message will act as keep alive message.
	 */
	otLinkSetPollPeriod(sInstance, 5000);
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <APP_THREAD_SetSleepyEndDeviceMode+0x60>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f241 3188 	movw	r1, #5000	; 0x1388
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f007 fe6f 	bl	8008bf2 <otLinkSetPollPeriod>

	/* Set the sleepy end device mode */
	OT_LinkMode.mRxOnWhenIdle = 0;
 8000f14:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 8000f16:	7813      	ldrb	r3, [r2, #0]
 8000f18:	f36f 0300 	bfc	r3, #0, #1
 8000f1c:	7013      	strb	r3, [r2, #0]
	OT_LinkMode.mDeviceType = 0;
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 8000f20:	7813      	ldrb	r3, [r2, #0]
 8000f22:	f36f 0341 	bfc	r3, #1, #1
 8000f26:	7013      	strb	r3, [r2, #0]
	OT_LinkMode.mNetworkData = 1;
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 8000f2a:	7813      	ldrb	r3, [r2, #0]
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	7013      	strb	r3, [r2, #0]

	error = otThreadSetLinkMode(sInstance, OT_LinkMode);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <APP_THREAD_SetSleepyEndDeviceMode+0x60>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <APP_THREAD_SetSleepyEndDeviceMode+0x64>)
 8000f38:	7811      	ldrb	r1, [r2, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f009 f949 	bl	800a1d2 <otThreadSetLinkMode>
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d004      	beq.n	8000f54 <APP_THREAD_SetSleepyEndDeviceMode+0x58>
		APP_THREAD_Error(ERR_THREAD_LINK_MODE, error);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	2011      	movs	r0, #17
 8000f50:	f7ff ff1e 	bl	8000d90 <APP_THREAD_Error>

}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000248 	.word	0x20000248
 8000f60:	200000f4 	.word	0x200000f4

08000f64 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b0a7      	sub	sp, #156	; 0x9c
 8000f68:	af00      	add	r7, sp, #0
	otError error;
	error = otInstanceErasePersistentInfo(sInstance);
 8000f6a:	4b65      	ldr	r3, [pc, #404]	; (8001100 <APP_THREAD_DeviceConfig+0x19c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f007 fde6 	bl	8008b40 <otInstanceErasePersistentInfo>
 8000f74:	4603      	mov	r3, r0
 8000f76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	  if (error != OT_ERROR_NONE)
 8000f7a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <APP_THREAD_DeviceConfig+0x2a>
	  {
	    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8000f82:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000f86:	4619      	mov	r1, r3
 8000f88:	2006      	movs	r0, #6
 8000f8a:	f7ff ff01 	bl	8000d90 <APP_THREAD_Error>
	  }
	static char aNetworkName[] = "OpenThread Test";

	otOperationalDataset aDataset;

	memset(&aDataset, 0, sizeof(otOperationalDataset));
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	2278      	movs	r2, #120	; 0x78
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f009 ffec 	bl	800af74 <memset>
	/*
	 * Fields that can be configured in otOperationDataset to override defaults:
	 *     Network Name, Mesh Local Prefix, Extended PAN ID, PAN ID, Delay Timer,
	 *     Channel, Channel Mask Page 0, Network Key, PSKc, Security Policy
	 */
	aDataset.mActiveTimestamp.mSeconds             = 1;
 8000f9c:	f04f 0201 	mov.w	r2, #1
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	aDataset.mComponents.mIsActiveTimestampPresent = true;
 8000fa8:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Channel to 15 */
	aDataset.mChannel = 26;
 8000fb4:	231a      	movs	r3, #26
 8000fb6:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	aDataset.mComponents.mIsChannelPresent = true;
 8000fba:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

	/* Set Pan ID to 2222 */
	aDataset.mPanId = (otPanId) 0xCCC1;
 8000fc6:	f64c 43c1 	movw	r3, #52417	; 0xccc1
 8000fca:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	aDataset.mComponents.mIsPanIdPresent = true;
 8000fce:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Extended Pan ID to  */
	uint8_t extPanId[OT_EXT_PAN_ID_SIZE] =
 8000fda:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <APP_THREAD_DeviceConfig+0x1a0>)
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe4:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22 };
	memcpy(aDataset.mExtendedPanId.m8, extPanId,
 8000fe8:	f107 0259 	add.w	r2, r7, #89	; 0x59
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	cb03      	ldmia	r3!, {r0, r1}
 8000ff2:	6010      	str	r0, [r2, #0]
 8000ff4:	6051      	str	r1, [r2, #4]
			sizeof(aDataset.mExtendedPanId));
	aDataset.mComponents.mIsExtendedPanIdPresent = true;
 8000ff6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set network key to  */
	uint8_t key[OT_NETWORK_KEY_SIZE] =
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <APP_THREAD_DeviceConfig+0x1a4>)
 8001004:	463c      	mov	r4, r7
 8001006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001008:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{ 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF };
	memcpy(aDataset.mNetworkKey.m8, key, sizeof(aDataset.mNetworkKey));
 800100c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001010:	463b      	mov	r3, r7
 8001012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001014:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	aDataset.mComponents.mIsNetworkKeyPresent = true;
 8001018:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	/* Set Network Name */
	size_t length = strlen(aNetworkName);
 8001024:	4839      	ldr	r0, [pc, #228]	; (800110c <APP_THREAD_DeviceConfig+0x1a8>)
 8001026:	f7ff f8b5 	bl	8000194 <strlen>
 800102a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	assert(length <= OT_NETWORK_NAME_MAX_SIZE);
 800102e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001032:	2b10      	cmp	r3, #16
 8001034:	d906      	bls.n	8001044 <APP_THREAD_DeviceConfig+0xe0>
 8001036:	4b36      	ldr	r3, [pc, #216]	; (8001110 <APP_THREAD_DeviceConfig+0x1ac>)
 8001038:	4a36      	ldr	r2, [pc, #216]	; (8001114 <APP_THREAD_DeviceConfig+0x1b0>)
 800103a:	f240 11a5 	movw	r1, #421	; 0x1a5
 800103e:	4836      	ldr	r0, [pc, #216]	; (8001118 <APP_THREAD_DeviceConfig+0x1b4>)
 8001040:	f009 ff20 	bl	800ae84 <__assert_func>
	memcpy(aDataset.mNetworkName.m8, aNetworkName, length);
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	3330      	adds	r3, #48	; 0x30
 800104a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800104e:	492f      	ldr	r1, [pc, #188]	; (800110c <APP_THREAD_DeviceConfig+0x1a8>)
 8001050:	4618      	mov	r0, r3
 8001052:	f009 ff81 	bl	800af58 <memcpy>
	aDataset.mComponents.mIsNetworkNamePresent = true;
 8001056:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	/* Set the Active Operational Dataset to this dataset */
	error = otDatasetSetActive(sInstance, &aDataset);
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <APP_THREAD_DeviceConfig+0x19c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f107 0218 	add.w	r2, r7, #24
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f007 fd0f 	bl	8008a90 <otDatasetSetActive>
 8001072:	4603      	mov	r3, r0
 8001074:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	error = otIp6SetEnabled(sInstance, true);
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <APP_THREAD_DeviceConfig+0x19c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	4618      	mov	r0, r3
 8001080:	f007 fd87 	bl	8008b92 <otIp6SetEnabled>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (error != OT_ERROR_NONE)
 800108a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <APP_THREAD_DeviceConfig+0x13a>
	{
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8001092:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001096:	4619      	mov	r1, r3
 8001098:	2004      	movs	r0, #4
 800109a:	f7ff fe79 	bl	8000d90 <APP_THREAD_Error>
	}
	error = otThreadSetEnabled(sInstance, true);
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <APP_THREAD_DeviceConfig+0x19c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2101      	movs	r1, #1
 80010a4:	4618      	mov	r0, r3
 80010a6:	f009 f864 	bl	800a172 <otThreadSetEnabled>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (error != OT_ERROR_NONE)
 80010b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <APP_THREAD_DeviceConfig+0x160>
	{
		APP_THREAD_Error(ERR_THREAD_START, error);
 80010b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80010bc:	4619      	mov	r1, r3
 80010be:	2005      	movs	r0, #5
 80010c0:	f7ff fe66 	bl	8000d90 <APP_THREAD_Error>
	}
	/* USER CODE BEGIN DEVICECONFIG */
	/* Start the COAP server */
	error = otCoapStart(sInstance, OT_DEFAULT_COAP_PORT);
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <APP_THREAD_DeviceConfig+0x19c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f241 6133 	movw	r1, #5683	; 0x1633
 80010cc:	4618      	mov	r0, r3
 80010ce:	f007 fc4c 	bl	800896a <otCoapStart>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (error != OT_ERROR_NONE)
 80010d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <APP_THREAD_DeviceConfig+0x188>
	{
		APP_THREAD_Error(ERR_THREAD_COAP_START, error);
 80010e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80010e4:	4619      	mov	r1, r3
 80010e6:	2008      	movs	r0, #8
 80010e8:	f7ff fe52 	bl	8000d90 <APP_THREAD_Error>
	}
	/* Add COAP resources */
	otCoapAddResource(sInstance, &OT_Ressource);
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <APP_THREAD_DeviceConfig+0x19c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	490a      	ldr	r1, [pc, #40]	; (800111c <APP_THREAD_DeviceConfig+0x1b8>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f007 fc69 	bl	80089ca <otCoapAddResource>

	/* USER CODE END DEVICECONFIG */
}
 80010f8:	bf00      	nop
 80010fa:	379c      	adds	r7, #156	; 0x9c
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	20000248 	.word	0x20000248
 8001104:	0800c5d8 	.word	0x0800c5d8
 8001108:	0800c5e0 	.word	0x0800c5e0
 800110c:	2000001c 	.word	0x2000001c
 8001110:	0800c5b4 	.word	0x0800c5b4
 8001114:	0800c9c0 	.word	0x0800c9c0
 8001118:	0800c2f8 	.word	0x0800c2f8
 800111c:	2000000c 	.word	0x2000000c

08001120 <APP_THREAD_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
 * @retval None
 */
static void APP_THREAD_TraceError(const char *pMess, uint32_t ErrCode)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af02      	add	r7, sp, #8
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN TRACE_ERROR */
	APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <APP_THREAD_TraceError+0x24>)
 8001132:	2101      	movs	r1, #1
 8001134:	2000      	movs	r0, #0
 8001136:	f002 fec3 	bl	8003ec0 <logApplication>

	/* USER CODE END TRACE_ERROR */
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	0800c5f0 	.word	0x0800c5f0

08001148 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af02      	add	r7, sp, #8
	WirelessFwInfo_t wireless_info_instance;
	WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	617b      	str	r3, [r7, #20]

	if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f008 fcaa 	bl	8009aac <SHCI_GetWirelessFwInfo>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
	{
		APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS,
 800115e:	2101      	movs	r1, #1
 8001160:	2016      	movs	r0, #22
 8001162:	f7ff fe15 	bl	8000d90 <APP_THREAD_Error>
					(uint32_t) ERR_INTERFACE_FATAL);
			break;
		}
		APP_DBG("**********************************************************");
	}
}
 8001166:	e07c      	b.n	8001262 <APP_THREAD_CheckWirelessFirmwareInfo+0x11a>
		APP_DBG("*****************WIRELESS COPROCESSOR FW*******************");
 8001168:	4a40      	ldr	r2, [pc, #256]	; (800126c <APP_THREAD_CheckWirelessFirmwareInfo+0x124>)
 800116a:	2101      	movs	r1, #1
 800116c:	2000      	movs	r0, #0
 800116e:	f002 fea7 	bl	8003ec0 <logApplication>
		APP_DBG("STACK VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor,
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	461a      	mov	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	789b      	ldrb	r3, [r3, #2]
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	9200      	str	r2, [sp, #0]
 8001186:	460b      	mov	r3, r1
 8001188:	4a39      	ldr	r2, [pc, #228]	; (8001270 <APP_THREAD_CheckWirelessFirmwareInfo+0x128>)
 800118a:	2101      	movs	r1, #1
 800118c:	2000      	movs	r0, #0
 800118e:	f002 fe97 	bl	8003ec0 <logApplication>
		APP_DBG("Version release type: %d", p_wireless_info->VersionReleaseType);
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	4a37      	ldr	r2, [pc, #220]	; (8001274 <APP_THREAD_CheckWirelessFirmwareInfo+0x12c>)
 8001198:	2101      	movs	r1, #1
 800119a:	2000      	movs	r0, #0
 800119c:	f002 fe90 	bl	8003ec0 <logApplication>
		APP_DBG("Version branch type: %d", p_wireless_info->VersionBranch);
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	4a34      	ldr	r2, [pc, #208]	; (8001278 <APP_THREAD_CheckWirelessFirmwareInfo+0x130>)
 80011a6:	2101      	movs	r1, #1
 80011a8:	2000      	movs	r0, #0
 80011aa:	f002 fe89 	bl	8003ec0 <logApplication>
		APP_DBG("FUS VERSION ID = %d.%d.%d", p_wireless_info->FusVersionMajor,
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	7a9b      	ldrb	r3, [r3, #10]
 80011b2:	4619      	mov	r1, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	7adb      	ldrb	r3, [r3, #11]
 80011b8:	461a      	mov	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	7b1b      	ldrb	r3, [r3, #12]
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	9200      	str	r2, [sp, #0]
 80011c2:	460b      	mov	r3, r1
 80011c4:	4a2d      	ldr	r2, [pc, #180]	; (800127c <APP_THREAD_CheckWirelessFirmwareInfo+0x134>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	2000      	movs	r0, #0
 80011ca:	f002 fe79 	bl	8003ec0 <logApplication>
		APP_DBG("Stack type: %d", p_wireless_info->StackType);
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	7a5b      	ldrb	r3, [r3, #9]
 80011d2:	4a2b      	ldr	r2, [pc, #172]	; (8001280 <APP_THREAD_CheckWirelessFirmwareInfo+0x138>)
 80011d4:	2101      	movs	r1, #1
 80011d6:	2000      	movs	r0, #0
 80011d8:	f002 fe72 	bl	8003ec0 <logApplication>
		APP_DBG("MEMSIZE flash: %d", p_wireless_info->MemorySizeFlash);
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	7a1b      	ldrb	r3, [r3, #8]
 80011e0:	4a28      	ldr	r2, [pc, #160]	; (8001284 <APP_THREAD_CheckWirelessFirmwareInfo+0x13c>)
 80011e2:	2101      	movs	r1, #1
 80011e4:	2000      	movs	r0, #0
 80011e6:	f002 fe6b 	bl	8003ec0 <logApplication>
		APP_DBG("MEMSIZE sram1: %d", p_wireless_info->MemorySizeSram1);
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	79db      	ldrb	r3, [r3, #7]
 80011ee:	4a26      	ldr	r2, [pc, #152]	; (8001288 <APP_THREAD_CheckWirelessFirmwareInfo+0x140>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	2000      	movs	r0, #0
 80011f4:	f002 fe64 	bl	8003ec0 <logApplication>
		APP_DBG("MEMSIZE sram2a: %d", p_wireless_info->MemorySizeSram2A);
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	799b      	ldrb	r3, [r3, #6]
 80011fc:	4a23      	ldr	r2, [pc, #140]	; (800128c <APP_THREAD_CheckWirelessFirmwareInfo+0x144>)
 80011fe:	2101      	movs	r1, #1
 8001200:	2000      	movs	r0, #0
 8001202:	f002 fe5d 	bl	8003ec0 <logApplication>
		APP_DBG("MEMSIZE sram2b: %d", p_wireless_info->MemorySizeSram2B);
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	4a21      	ldr	r2, [pc, #132]	; (8001290 <APP_THREAD_CheckWirelessFirmwareInfo+0x148>)
 800120c:	2101      	movs	r1, #1
 800120e:	2000      	movs	r0, #0
 8001210:	f002 fe56 	bl	8003ec0 <logApplication>
		switch (p_wireless_info->StackType)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	7a5b      	ldrb	r3, [r3, #9]
 8001218:	2b50      	cmp	r3, #80	; 0x50
 800121a:	d012      	beq.n	8001242 <APP_THREAD_CheckWirelessFirmwareInfo+0xfa>
 800121c:	2b50      	cmp	r3, #80	; 0x50
 800121e:	dc16      	bgt.n	800124e <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
 8001220:	2b10      	cmp	r3, #16
 8001222:	d002      	beq.n	800122a <APP_THREAD_CheckWirelessFirmwareInfo+0xe2>
 8001224:	2b11      	cmp	r3, #17
 8001226:	d006      	beq.n	8001236 <APP_THREAD_CheckWirelessFirmwareInfo+0xee>
 8001228:	e011      	b.n	800124e <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
			APP_DBG("FW Type : Thread FTD")
 800122a:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <APP_THREAD_CheckWirelessFirmwareInfo+0x14c>)
 800122c:	2101      	movs	r1, #1
 800122e:	2000      	movs	r0, #0
 8001230:	f002 fe46 	bl	8003ec0 <logApplication>
			break;
 8001234:	e010      	b.n	8001258 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
			APP_DBG("FW Type : Thread MTD")
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <APP_THREAD_CheckWirelessFirmwareInfo+0x150>)
 8001238:	2101      	movs	r1, #1
 800123a:	2000      	movs	r0, #0
 800123c:	f002 fe40 	bl	8003ec0 <logApplication>
			break;
 8001240:	e00a      	b.n	8001258 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
			APP_DBG("FW Type : Static Concurrent Mode BLE/Thread")
 8001242:	4a16      	ldr	r2, [pc, #88]	; (800129c <APP_THREAD_CheckWirelessFirmwareInfo+0x154>)
 8001244:	2101      	movs	r1, #1
 8001246:	2000      	movs	r0, #0
 8001248:	f002 fe3a 	bl	8003ec0 <logApplication>
			break;
 800124c:	e004      	b.n	8001258 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
			APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS,
 800124e:	2101      	movs	r1, #1
 8001250:	2016      	movs	r0, #22
 8001252:	f7ff fd9d 	bl	8000d90 <APP_THREAD_Error>
			break;
 8001256:	bf00      	nop
		APP_DBG("**********************************************************");
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <APP_THREAD_CheckWirelessFirmwareInfo+0x158>)
 800125a:	2101      	movs	r1, #1
 800125c:	2000      	movs	r0, #0
 800125e:	f002 fe2f 	bl	8003ec0 <logApplication>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	0800c614 	.word	0x0800c614
 8001270:	0800c650 	.word	0x0800c650
 8001274:	0800c66c 	.word	0x0800c66c
 8001278:	0800c688 	.word	0x0800c688
 800127c:	0800c6a0 	.word	0x0800c6a0
 8001280:	0800c6bc 	.word	0x0800c6bc
 8001284:	0800c6cc 	.word	0x0800c6cc
 8001288:	0800c6e0 	.word	0x0800c6e0
 800128c:	0800c6f4 	.word	0x0800c6f4
 8001290:	0800c708 	.word	0x0800c708
 8001294:	0800c71c 	.word	0x0800c71c
 8001298:	0800c734 	.word	0x0800c734
 800129c:	0800c74c 	.word	0x0800c74c
 80012a0:	0800c778 	.word	0x0800c778

080012a4 <APP_THREAD_CoapPermissionsRequestHandler>:
 */

static void APP_THREAD_CoapPermissionsRequestHandler(void *pContext,
		otMessage *pMessage, const otMessageInfo *pMessageInfo)

{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 80012b0:	2100      	movs	r1, #0
 80012b2:	2001      	movs	r0, #1
 80012b4:	f008 fbdb 	bl	8009a6e <SHCI_C2_RADIO_AllowLowPower>
	coapConnectionEstablished = true;
 80012b8:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <APP_THREAD_CoapPermissionsRequestHandler+0x104>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2102      	movs	r1, #2
 80012c2:	483a      	ldr	r0, [pc, #232]	; (80013ac <APP_THREAD_CoapPermissionsRequestHandler+0x108>)
 80012c4:	f003 fc62 	bl	8004b8c <HAL_GPIO_WritePin>
	/* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
	//GPIO_PinOutSet(IP_LED_PORT, IP_LED_PIN);
	//printIPv6Addr(&aMessageInfo->mPeerAddr);
	brAddr = pMessageInfo->mPeerAddr;
 80012c8:	4a39      	ldr	r2, [pc, #228]	; (80013b0 <APP_THREAD_CoapPermissionsRequestHandler+0x10c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4614      	mov	r4, r2
 80012ce:	3310      	adds	r3, #16
 80012d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	otError error = OT_ERROR_NONE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	77fb      	strb	r3, [r7, #31]
	otMessage *responseMessage;
	otCoapCode responseCode = OT_COAP_CODE_CHANGED;
 80012da:	2344      	movs	r3, #68	; 0x44
 80012dc:	77bb      	strb	r3, [r7, #30]
	otCoapCode messageCode = otCoapMessageGetCode(pMessage);
 80012de:	68b8      	ldr	r0, [r7, #8]
 80012e0:	f007 fa4d 	bl	800877e <otCoapMessageGetCode>
 80012e4:	4603      	mov	r3, r0
 80012e6:	777b      	strb	r3, [r7, #29]

	responseMessage = otCoapNewMessage((otInstance*) pContext, NULL);
 80012e8:	2100      	movs	r1, #0
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f007 f8df 	bl	80084ae <otCoapNewMessage>
 80012f0:	61b8      	str	r0, [r7, #24]

	otCoapMessageInitResponse(responseMessage, pMessage,
 80012f2:	7fbb      	ldrb	r3, [r7, #30]
 80012f4:	2202      	movs	r2, #2
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	69b8      	ldr	r0, [r7, #24]
 80012fa:	f007 f93b 	bl	8008574 <otCoapMessageInitResponse>
			OT_COAP_TYPE_ACKNOWLEDGMENT, responseCode);
	otCoapMessageSetToken(responseMessage, otCoapMessageGetToken(pMessage),
 80012fe:	68b8      	ldr	r0, [r7, #8]
 8001300:	f007 fac9 	bl	8008896 <otCoapMessageGetToken>
 8001304:	4604      	mov	r4, r0
 8001306:	68b8      	ldr	r0, [r7, #8]
 8001308:	f007 fa97 	bl	800883a <otCoapMessageGetTokenLength>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	4621      	mov	r1, r4
 8001312:	69b8      	ldr	r0, [r7, #24]
 8001314:	f007 f96c 	bl	80085f0 <otCoapMessageSetToken>
			otCoapMessageGetTokenLength(pMessage));
	otCoapMessageSetPayloadMarker(responseMessage);
 8001318:	69b8      	ldr	r0, [r7, #24]
 800131a:	f007 fa02 	bl	8008722 <otCoapMessageSetPayloadMarker>

	uint16_t offset = otMessageGetOffset(pMessage);
 800131e:	68b8      	ldr	r0, [r7, #8]
 8001320:	f007 fcc3 	bl	8008caa <otMessageGetOffset>
 8001324:	4603      	mov	r3, r0
 8001326:	82fb      	strh	r3, [r7, #22]
	otMessageRead(pMessage, offset, resource_name, sizeof(resource_name) - 1);
 8001328:	8af9      	ldrh	r1, [r7, #22]
 800132a:	231f      	movs	r3, #31
 800132c:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <APP_THREAD_CoapPermissionsRequestHandler+0x110>)
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f007 fd24 	bl	8008d7c <otMessageRead>

	if (OT_COAP_CODE_GET == messageCode)
 8001334:	7f7b      	ldrb	r3, [r7, #29]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10e      	bne.n	8001358 <APP_THREAD_CoapPermissionsRequestHandler+0xb4>
	{

		error = otMessageAppend(responseMessage, "ack", 3);
 800133a:	2203      	movs	r2, #3
 800133c:	491e      	ldr	r1, [pc, #120]	; (80013b8 <APP_THREAD_CoapPermissionsRequestHandler+0x114>)
 800133e:	69b8      	ldr	r0, [r7, #24]
 8001340:	f007 fce3 	bl	8008d0a <otMessageAppend>
 8001344:	4603      	mov	r3, r0
 8001346:	77fb      	strb	r3, [r7, #31]
		error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f7ff fc07 	bl	8000b60 <otCoapSendResponse>
 8001352:	4603      	mov	r3, r0
 8001354:	77fb      	strb	r3, [r7, #31]
 8001356:	e011      	b.n	800137c <APP_THREAD_CoapPermissionsRequestHandler+0xd8>
				pMessageInfo);
	}
	else
	{
		error = otMessageAppend(responseMessage, "nack", 4);
 8001358:	2204      	movs	r2, #4
 800135a:	4918      	ldr	r1, [pc, #96]	; (80013bc <APP_THREAD_CoapPermissionsRequestHandler+0x118>)
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f007 fcd4 	bl	8008d0a <otMessageAppend>
 8001362:	4603      	mov	r3, r0
 8001364:	77fb      	strb	r3, [r7, #31]
		otCoapMessageSetCode(responseMessage, OT_COAP_CODE_METHOD_NOT_ALLOWED);
 8001366:	2185      	movs	r1, #133	; 0x85
 8001368:	69b8      	ldr	r0, [r7, #24]
 800136a:	f007 fa36 	bl	80087da <otCoapMessageSetCode>
		error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	69b9      	ldr	r1, [r7, #24]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff fbf4 	bl	8000b60 <otCoapSendResponse>
 8001378:	4603      	mov	r3, r0
 800137a:	77fb      	strb	r3, [r7, #31]
				pMessageInfo);
	}

	if (error != OT_ERROR_NONE && responseMessage != NULL)
 800137c:	7ffb      	ldrb	r3, [r7, #31]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <APP_THREAD_CoapPermissionsRequestHandler+0xea>
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <APP_THREAD_CoapPermissionsRequestHandler+0xea>
	{
		otMessageFree(responseMessage);
 8001388:	69b8      	ldr	r0, [r7, #24]
 800138a:	f007 fc61 	bl	8008c50 <otMessageFree>
	}

	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 800138e:	2101      	movs	r1, #1
 8001390:	2001      	movs	r0, #1
 8001392:	f008 fb6c 	bl	8009a6e <SHCI_C2_RADIO_AllowLowPower>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2102      	movs	r1, #2
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <APP_THREAD_CoapPermissionsRequestHandler+0x108>)
 800139c:	f003 fbf6 	bl	8004b8c <HAL_GPIO_WritePin>
}
 80013a0:	bf00      	nop
 80013a2:	3724      	adds	r7, #36	; 0x24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	20000240 	.word	0x20000240
 80013ac:	48000800 	.word	0x48000800
 80013b0:	20000228 	.word	0x20000228
 80013b4:	20000208 	.word	0x20000208
 80013b8:	0800c7b4 	.word	0x0800c7b4
 80013bc:	0800c7b8 	.word	0x0800c7b8

080013c0 <APP_THREAD_SendCoapMsg>:
 * @brief Task associated to the push button.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(char *buf)
{
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	b0ad      	sub	sp, #180	; 0xb4
 80013c4:	af0e      	add	r7, sp, #56	; 0x38
 80013c6:	6278      	str	r0, [r7, #36]	; 0x24
	if (!coapConnectionEstablished)
 80013c8:	4b88      	ldr	r3, [pc, #544]	; (80015ec <APP_THREAD_SendCoapMsg+0x22c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f083 0301 	eor.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 8105 	bne.w	80015e2 <APP_THREAD_SendCoapMsg+0x222>
		return;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2102      	movs	r1, #2
 80013dc:	4884      	ldr	r0, [pc, #528]	; (80015f0 <APP_THREAD_SendCoapMsg+0x230>)
 80013de:	f003 fbd5 	bl	8004b8c <HAL_GPIO_WritePin>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, FALSE);
 80013e2:	2100      	movs	r1, #0
 80013e4:	2001      	movs	r0, #1
 80013e6:	f008 fb42 	bl	8009a6e <SHCI_C2_RADIO_AllowLowPower>

	sht4x_read(&sensor_data.temp_main, &sensor_data.humidity);
 80013ea:	4982      	ldr	r1, [pc, #520]	; (80015f4 <APP_THREAD_SendCoapMsg+0x234>)
 80013ec:	4882      	ldr	r0, [pc, #520]	; (80015f8 <APP_THREAD_SendCoapMsg+0x238>)
 80013ee:	f7ff f8e5 	bl	80005bc <sht4x_read>
	stts22h_temperature_raw_get(&sensor_data.temp_aux);
 80013f2:	4882      	ldr	r0, [pc, #520]	; (80015fc <APP_THREAD_SendCoapMsg+0x23c>)
 80013f4:	f7ff fa87 	bl	8000906 <stts22h_temperature_raw_get>

	int8_t state;
	int8_t ret = app_algo_proc(sensor_data, false, &state);
 80013f8:	4a7e      	ldr	r2, [pc, #504]	; (80015f4 <APP_THREAD_SendCoapMsg+0x234>)
 80013fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2300      	movs	r3, #0
 8001402:	ca07      	ldmia	r2, {r0, r1, r2}
 8001404:	f000 fdca 	bl	8001f9c <app_algo_proc>
 8001408:	4603      	mov	r3, r0
 800140a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	if (ret == RES_HEAT)
 800140e:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8001412:	2b01      	cmp	r3, #1
 8001414:	d101      	bne.n	800141a <APP_THREAD_SendCoapMsg+0x5a>
		sht4x_activate_medium_heater();
 8001416:	f7ff f881 	bl	800051c <sht4x_activate_medium_heater>
	int8_t rssi;
	otThreadGetParentLastRssi(sInstance, &rssi);
 800141a:	4b79      	ldr	r3, [pc, #484]	; (8001600 <APP_THREAD_SendCoapMsg+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f107 026b 	add.w	r2, r7, #107	; 0x6b
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f008 ff15 	bl	800a254 <otThreadGetParentLastRssi>
	 * humidity (int32_t): radar presence score
	 * temp_aux (int16_t): radar presence distance
	 * rssi (int8_t): last rssi from parent
	 * appCoapSendTxCtr (uint32_t): total CoAP transmissions
	 */
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%ld,%d,%ld,%d",
 800142a:	2301      	movs	r3, #1
 800142c:	469c      	mov	ip, r3
			device_type, eui64[0], eui64[1], eui64[2], eui64[3],
 800142e:	4b75      	ldr	r3, [pc, #468]	; (8001604 <APP_THREAD_SendCoapMsg+0x244>)
 8001430:	781b      	ldrb	r3, [r3, #0]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%ld,%d,%ld,%d",
 8001432:	461d      	mov	r5, r3
			device_type, eui64[0], eui64[1], eui64[2], eui64[3],
 8001434:	4b73      	ldr	r3, [pc, #460]	; (8001604 <APP_THREAD_SendCoapMsg+0x244>)
 8001436:	785b      	ldrb	r3, [r3, #1]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%ld,%d,%ld,%d",
 8001438:	461e      	mov	r6, r3
			device_type, eui64[0], eui64[1], eui64[2], eui64[3],
 800143a:	4b72      	ldr	r3, [pc, #456]	; (8001604 <APP_THREAD_SendCoapMsg+0x244>)
 800143c:	789b      	ldrb	r3, [r3, #2]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%ld,%d,%ld,%d",
 800143e:	623b      	str	r3, [r7, #32]
			device_type, eui64[0], eui64[1], eui64[2], eui64[3],
 8001440:	4b70      	ldr	r3, [pc, #448]	; (8001604 <APP_THREAD_SendCoapMsg+0x244>)
 8001442:	78db      	ldrb	r3, [r3, #3]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%ld,%d,%ld,%d",
 8001444:	61fb      	str	r3, [r7, #28]
			eui64[4], eui64[5], eui64[6], eui64[7],
 8001446:	4b6f      	ldr	r3, [pc, #444]	; (8001604 <APP_THREAD_SendCoapMsg+0x244>)
 8001448:	791b      	ldrb	r3, [r3, #4]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%ld,%d,%ld,%d",
 800144a:	61bb      	str	r3, [r7, #24]
			eui64[4], eui64[5], eui64[6], eui64[7],
 800144c:	4b6d      	ldr	r3, [pc, #436]	; (8001604 <APP_THREAD_SendCoapMsg+0x244>)
 800144e:	795b      	ldrb	r3, [r3, #5]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%ld,%d,%ld,%d",
 8001450:	617b      	str	r3, [r7, #20]
			eui64[4], eui64[5], eui64[6], eui64[7],
 8001452:	4b6c      	ldr	r3, [pc, #432]	; (8001604 <APP_THREAD_SendCoapMsg+0x244>)
 8001454:	799b      	ldrb	r3, [r3, #6]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%ld,%d,%ld,%d",
 8001456:	613b      	str	r3, [r7, #16]
			eui64[4], eui64[5], eui64[6], eui64[7],
 8001458:	4b6a      	ldr	r3, [pc, #424]	; (8001604 <APP_THREAD_SendCoapMsg+0x244>)
 800145a:	79db      	ldrb	r3, [r3, #7]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%ld,%d,%ld,%d",
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b65      	ldr	r3, [pc, #404]	; (80015f4 <APP_THREAD_SendCoapMsg+0x234>)
 8001460:	6858      	ldr	r0, [r3, #4]
 8001462:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <APP_THREAD_SendCoapMsg+0x234>)
 8001464:	681c      	ldr	r4, [r3, #0]
			sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux,
 8001466:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <APP_THREAD_SendCoapMsg+0x234>)
 8001468:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%ld,%d,%ld,%d",
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b64      	ldr	r3, [pc, #400]	; (8001608 <APP_THREAD_SendCoapMsg+0x248>)
 8001476:	6819      	ldr	r1, [r3, #0]
 8001478:	1c4a      	adds	r2, r1, #1
 800147a:	4b63      	ldr	r3, [pc, #396]	; (8001608 <APP_THREAD_SendCoapMsg+0x248>)
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001482:	930d      	str	r3, [sp, #52]	; 0x34
 8001484:	910c      	str	r1, [sp, #48]	; 0x30
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	920b      	str	r2, [sp, #44]	; 0x2c
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	920a      	str	r2, [sp, #40]	; 0x28
 800148e:	9409      	str	r4, [sp, #36]	; 0x24
 8001490:	9008      	str	r0, [sp, #32]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	9207      	str	r2, [sp, #28]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	9206      	str	r2, [sp, #24]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	9205      	str	r2, [sp, #20]
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	9204      	str	r2, [sp, #16]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	9203      	str	r2, [sp, #12]
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	9601      	str	r6, [sp, #4]
 80014ac:	9500      	str	r5, [sp, #0]
 80014ae:	4663      	mov	r3, ip
 80014b0:	4a56      	ldr	r2, [pc, #344]	; (800160c <APP_THREAD_SendCoapMsg+0x24c>)
 80014b2:	21fe      	movs	r1, #254	; 0xfe
 80014b4:	4856      	ldr	r0, [pc, #344]	; (8001610 <APP_THREAD_SendCoapMsg+0x250>)
 80014b6:	f00a f943 	bl	800b740 <sniprintf>
			rssi, appCoapSendTxCtr++,1800);
	buf = tmp_tx_buf;
 80014ba:	4b55      	ldr	r3, [pc, #340]	; (8001610 <APP_THREAD_SendCoapMsg+0x250>)
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
	APP_DBG("In appthread handler temp:%d hum:%d temp_aux:%d",
 80014be:	4b4d      	ldr	r3, [pc, #308]	; (80015f4 <APP_THREAD_SendCoapMsg+0x234>)
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <APP_THREAD_SendCoapMsg+0x234>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	494b      	ldr	r1, [pc, #300]	; (80015f4 <APP_THREAD_SendCoapMsg+0x234>)
 80014c8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80014cc:	9101      	str	r1, [sp, #4]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	4a50      	ldr	r2, [pc, #320]	; (8001614 <APP_THREAD_SendCoapMsg+0x254>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	2000      	movs	r0, #0
 80014d8:	f002 fcf2 	bl	8003ec0 <logApplication>
			sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux);
	otError error = OT_ERROR_NONE;
 80014dc:	2300      	movs	r3, #0
 80014de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	otMessage *message = NULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	673b      	str	r3, [r7, #112]	; 0x70
	otMessageInfo messageInfo;
	uint16_t payloadLength = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	// Default parameters
	otCoapType coapType = OT_COAP_TYPE_NON_CONFIRMABLE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	otIp6Address coapDestinationIp = brAddr;
 80014f2:	4b49      	ldr	r3, [pc, #292]	; (8001618 <APP_THREAD_SendCoapMsg+0x258>)
 80014f4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80014f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	message = otCoapNewMessage(NULL, NULL);
 80014fe:	2100      	movs	r1, #0
 8001500:	2000      	movs	r0, #0
 8001502:	f006 ffd4 	bl	80084ae <otCoapNewMessage>
 8001506:	6738      	str	r0, [r7, #112]	; 0x70

	otCoapMessageInit(message, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8001508:	2203      	movs	r2, #3
 800150a:	2101      	movs	r1, #1
 800150c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800150e:	f006 fffc 	bl	800850a <otCoapMessageInit>
	otCoapMessageGenerateToken(message, OT_COAP_DEFAULT_TOKEN_LENGTH);
 8001512:	2102      	movs	r1, #2
 8001514:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001516:	f007 f8a2 	bl	800865e <otCoapMessageGenerateToken>
	error = otCoapMessageAppendUriPathOptions(message, resource_name);
 800151a:	4940      	ldr	r1, [pc, #256]	; (800161c <APP_THREAD_SendCoapMsg+0x25c>)
 800151c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800151e:	f007 f8ce 	bl	80086be <otCoapMessageAppendUriPathOptions>
 8001522:	4603      	mov	r3, r0
 8001524:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	payloadLength = strlen(buf);
 8001528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800152a:	f7fe fe33 	bl	8000194 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if (payloadLength > 0)
 8001534:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <APP_THREAD_SendCoapMsg+0x188>
	{
		error = otCoapMessageSetPayloadMarker(message);
 800153c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800153e:	f007 f8f0 	bl	8008722 <otCoapMessageSetPayloadMarker>
 8001542:	4603      	mov	r3, r0
 8001544:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	// Embed content into message if given
	if (payloadLength > 0)
 8001548:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <APP_THREAD_SendCoapMsg+0x1a4>
	{
		error = otMessageAppend(message, buf, payloadLength);
 8001550:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001554:	461a      	mov	r2, r3
 8001556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001558:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800155a:	f007 fbd6 	bl	8008d0a <otMessageAppend>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}

	memset(&messageInfo, 0, sizeof(messageInfo));
 8001564:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001568:	222c      	movs	r2, #44	; 0x2c
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f009 fd01 	bl	800af74 <memset>
	messageInfo.mPeerAddr = coapDestinationIp;
 8001572:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800157c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	messageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8001580:	f241 6333 	movw	r3, #5683	; 0x1633
 8001584:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	if (coapConnectionEstablished)
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <APP_THREAD_SendCoapMsg+0x22c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d012      	beq.n	80015b6 <APP_THREAD_SendCoapMsg+0x1f6>
	{
		error = otCoapSendRequestWithParameters(NULL, message, &messageInfo,
 8001590:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001594:	2300      	movs	r3, #0
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80015a0:	2000      	movs	r0, #0
 80015a2:	f007 f9a5 	bl	80088f0 <otCoapSendRequestWithParameters>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				NULL,
				NULL,
				NULL);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2102      	movs	r1, #2
 80015b0:	480f      	ldr	r0, [pc, #60]	; (80015f0 <APP_THREAD_SendCoapMsg+0x230>)
 80015b2:	f003 faeb 	bl	8004b8c <HAL_GPIO_WritePin>
	}

	if ((error != OT_ERROR_NONE) && (message != NULL))
 80015b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <APP_THREAD_SendCoapMsg+0x20a>
 80015be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <APP_THREAD_SendCoapMsg+0x20a>
	{
		otMessageFree(message);
 80015c4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80015c6:	f007 fb43 	bl	8008c50 <otMessageFree>
	}
	sht4x_measure();
 80015ca:	f7fe ffe9 	bl	80005a0 <sht4x_measure>
	SHCI_C2_RADIO_AllowLowPower(THREAD_IP, TRUE);
 80015ce:	2101      	movs	r1, #1
 80015d0:	2001      	movs	r0, #1
 80015d2:	f008 fa4c 	bl	8009a6e <SHCI_C2_RADIO_AllowLowPower>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2102      	movs	r1, #2
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <APP_THREAD_SendCoapMsg+0x230>)
 80015dc:	f003 fad6 	bl	8004b8c <HAL_GPIO_WritePin>
 80015e0:	e000      	b.n	80015e4 <APP_THREAD_SendCoapMsg+0x224>
		return;
 80015e2:	bf00      	nop
}
 80015e4:	377c      	adds	r7, #124	; 0x7c
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000240 	.word	0x20000240
 80015f0:	48000800 	.word	0x48000800
 80015f4:	200005a4 	.word	0x200005a4
 80015f8:	200005a8 	.word	0x200005a8
 80015fc:	200005ac 	.word	0x200005ac
 8001600:	20000248 	.word	0x20000248
 8001604:	20000238 	.word	0x20000238
 8001608:	20000244 	.word	0x20000244
 800160c:	0800c824 	.word	0x0800c824
 8001610:	20000108 	.word	0x20000108
 8001614:	0800c850 	.word	0x0800c850
 8001618:	20000228 	.word	0x20000228
 800161c:	20000208 	.word	0x20000208

08001620 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	p_thread_otcmdbuffer = p_buffer;
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <APP_THREAD_RegisterCmdBuffer+0x1c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200000f8 	.word	0x200000f8

08001640 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	330c      	adds	r3, #12
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	200000f8 	.word	0x200000f8

08001658 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) ((TL_EvtPacket_t*) p_thread_otcmdbuffer)->evtserial.evt.payload;
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	330b      	adds	r3, #11
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	200000f8 	.word	0x200000f8

08001670 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) (p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	330b      	adds	r3, #11
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	200000fc 	.word	0x200000fc

08001688 <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

	/* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
	p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <Ot_Cmd_Transfer_Common+0x44>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2200      	movs	r2, #0
 8001694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001698:	725a      	strb	r2, [r3, #9]
 800169a:	2200      	movs	r2, #0
 800169c:	f042 0202 	orr.w	r2, r2, #2
 80016a0:	729a      	strb	r2, [r3, #10]
	/* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
	 * + ID (4 bytes) + Size (4 bytes) */
	uint32_t l_size =
			((Thread_OT_Cmd_Request_t*) (p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <Ot_Cmd_Transfer_Common+0x44>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	330c      	adds	r3, #12
 80016a8:	685b      	ldr	r3, [r3, #4]
					* 4U + 8U;
 80016aa:	3302      	adds	r3, #2
	uint32_t l_size =
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	607b      	str	r3, [r7, #4]
	p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <Ot_Cmd_Transfer_Common+0x44>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	72da      	strb	r2, [r3, #11]

	TL_OT_SendCmd();
 80016ba:	f008 ff13 	bl	800a4e4 <TL_OT_SendCmd>

	/* Wait completion of cmd */
	Wait_Getting_Ack_From_M0();
 80016be:	f000 f840 	bl	8001742 <Wait_Getting_Ack_From_M0>

}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200000f8 	.word	0x200000f8

080016d0 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	Ot_Cmd_Transfer_Common();
 80016d4:	f7ff ffd8 	bl	8001688 <Ot_Cmd_Transfer_Common>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <Ot_Cmd_TransferWithNotif>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_TransferWithNotif(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	/* Flag to specify to UTIL_SEQ_EvtIdle that M0 to M4 notifications are allowed */
	g_ot_notification_allowed = 1U;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <Ot_Cmd_TransferWithNotif+0x14>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]

	Ot_Cmd_Transfer_Common();
 80016e6:	f7ff ffcf 	bl	8001688 <Ot_Cmd_Transfer_Common>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000025c 	.word	0x2000025c

080016f4 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(Otbuffer);

	Receive_Ack_From_M0();
 80016fc:	f000 f828 	bl	8001750 <Receive_Ack_From_M0>

	/* Does not allow OpenThread M0 to M4 notification */
	g_ot_notification_allowed = 0U;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <TL_OT_CmdEvtReceived+0x1c>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000025c 	.word	0x2000025c

08001714 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	p_thread_notif_M0_to_M4 = Notbuffer;
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <TL_THREAD_NotReceived+0x1c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]

	Receive_Notification_From_M0();
 8001722:	f000 f81d 	bl	8001760 <Receive_Notification_From_M0>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200000fc 	.word	0x200000fc

08001734 <Pre_OtCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_OtCmdProcessing(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

	UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8001738:	2004      	movs	r0, #4
 800173a:	f009 fa51 	bl	800abe0 <UTIL_SEQ_WaitEvt>

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}

08001742 <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
	UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 8001746:	2002      	movs	r0, #2
 8001748:	f009 fa4a 	bl	800abe0 <UTIL_SEQ_WaitEvt>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8001754:	2002      	movs	r0, #2
 8001756:	f009 fa23 	bl	800aba0 <UTIL_SEQ_SetEvt>
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	CptReceiveMsgFromM0++;
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <Receive_Notification_From_M0+0x1c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	4a04      	ldr	r2, [pc, #16]	; (800177c <Receive_Notification_From_M0+0x1c>)
 800176c:	6013      	str	r3, [r2, #0]
	UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800176e:	2100      	movs	r1, #0
 8001770:	2001      	movs	r0, #1
 8001772:	f009 f9e9 	bl	800ab48 <UTIL_SEQ_SetTask>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000100 	.word	0x20000100

08001780 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static inline void Send_CLI_Ack_For_OT(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0

	/* Notify M0 that characters have been sent to UART */
	TL_THREAD_CliSendAck();
 8001784:	f008 feca 	bl	800a51c <TL_THREAD_CliSendAck>

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
	MX_LPUART1_UART_Init();
	HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*) &ThreadOtCmdBuffer;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80017a4:	601a      	str	r2, [r3, #0]
	ThreadConfigBuffer.p_ThreadNotAckBuffer =
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <APP_THREAD_TL_THREAD_INIT+0x30>)
 80017aa:	609a      	str	r2, [r3, #8]
			(uint8_t*) ThreadNotifRspEvtBuffer;
	ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*) &ThreadCliCmdBuffer;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <APP_THREAD_TL_THREAD_INIT+0x34>)
 80017b0:	605a      	str	r2, [r3, #4]
	ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*) &ThreadCliNotBuffer;
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <APP_THREAD_TL_THREAD_INIT+0x38>)
 80017b6:	60da      	str	r2, [r3, #12]

	TL_THREAD_Init(&ThreadConfigBuffer);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80017ba:	f008 fe73 	bl	800a4a4 <TL_THREAD_Init>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20030028 	.word	0x20030028
 80017c8:	200300e8 	.word	0x200300e8
 80017cc:	200301f4 	.word	0x200301f4
 80017d0:	20030300 	.word	0x20030300
 80017d4:	2003040c 	.word	0x2003040c

080017d8 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived(TL_EvtPacket_t *Notbuffer)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	TL_CmdPacket_t *l_CliBuffer = (TL_CmdPacket_t*) Notbuffer;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	60fb      	str	r3, [r7, #12]
	uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	7adb      	ldrb	r3, [r3, #11]
 80017e8:	72fb      	strb	r3, [r7, #11]

	/* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
	if (strcmp((const char*) l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	330c      	adds	r3, #12
 80017ee:	490b      	ldr	r1, [pc, #44]	; (800181c <TL_THREAD_CliNotReceived+0x44>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fcc5 	bl	8000180 <strcmp>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d009      	beq.n	8001810 <TL_THREAD_CliNotReceived+0x38>
	{
		/* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
		HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload,
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f103 010c 	add.w	r1, r3, #12
 8001802:	7afb      	ldrb	r3, [r7, #11]
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <TL_THREAD_CliNotReceived+0x48>)
 8001808:	2002      	movs	r0, #2
 800180a:	f001 fd53 	bl	80032b4 <HW_UART_Transmit_IT>
	}
	else
	{
		Send_CLI_Ack_For_OT();
	}
}
 800180e:	e001      	b.n	8001814 <TL_THREAD_CliNotReceived+0x3c>
		Send_CLI_Ack_For_OT();
 8001810:	f7ff ffb6 	bl	8001780 <Send_CLI_Ack_For_OT>
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	0800c880 	.word	0x0800c880
 8001820:	08001825 	.word	0x08001825

08001824 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	Send_CLI_Ack_For_OT();
 8001828:	f7ff ffaa 	bl	8001780 <Send_CLI_Ack_For_OT>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}

08001830 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	if (CptReceiveMsgFromM0 != 0)
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00d      	beq.n	8001858 <APP_THREAD_ProcessMsgM0ToM4+0x28>
	{
		/* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
		if (CptReceiveMsgFromM0 > 1U)
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d904      	bls.n	800184e <APP_THREAD_ProcessMsgM0ToM4+0x1e>
		{
			APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8001844:	2100      	movs	r1, #0
 8001846:	2000      	movs	r0, #0
 8001848:	f7ff faa2 	bl	8000d90 <APP_THREAD_Error>
 800184c:	e001      	b.n	8001852 <APP_THREAD_ProcessMsgM0ToM4+0x22>
		}
		else
		{
			OpenThread_CallBack_Processing();
 800184e:	f007 fad5 	bl	8008dfc <OpenThread_CallBack_Processing>
		}
		/* Reset counter */
		CptReceiveMsgFromM0 = 0;
 8001852:	4b02      	ldr	r3, [pc, #8]	; (800185c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
	}
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000100 	.word	0x20000100

08001860 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <LL_PWR_EnableBootC2+0x1c>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <LL_PWR_EnableBootC2+0x1c>)
 800186a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	58000400 	.word	0x58000400

08001880 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800188a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800188e:	4905      	ldr	r1, [pc, #20]	; (80018a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4313      	orrs	r3, r2
 8001894:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	58000800 	.word	0x58000800

080018a8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	4904      	ldr	r1, [pc, #16]	; (80018c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	620b      	str	r3, [r1, #32]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	58000800 	.word	0x58000800

080018cc <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018f0:	68fb      	ldr	r3, [r7, #12]
}
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80018fe:	b480      	push	{r7}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800190e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001928:	68fb      	ldr	r3, [r7, #12]
}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	601a      	str	r2, [r3, #0]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	605a      	str	r2, [r3, #4]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	605a      	str	r2, [r3, #4]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	401a      	ands	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	605a      	str	r2, [r3, #4]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	609a      	str	r2, [r3, #8]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	041a      	lsls	r2, r3, #16
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	609a      	str	r2, [r3, #8]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	4013      	ands	r3, r2
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d101      	bne.n	8001a5c <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69da      	ldr	r2, [r3, #28]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d101      	bne.n	8001a86 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001a98:	2102      	movs	r1, #2
 8001a9a:	482a      	ldr	r0, [pc, #168]	; (8001b44 <HW_IPCC_Rx_Handler+0xb0>)
 8001a9c:	f7ff ffe5 	bl	8001a6a <LL_C2_IPCC_IsActiveFlag_CHx>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HW_IPCC_Rx_Handler+0x26>
 8001aa6:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <HW_IPCC_Rx_Handler+0xb0>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001ab4:	f000 f8f8 	bl	8001ca8 <HW_IPCC_SYS_EvtHandler>
 8001ab8:	e041      	b.n	8001b3e <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8001aba:	2104      	movs	r1, #4
 8001abc:	4821      	ldr	r0, [pc, #132]	; (8001b44 <HW_IPCC_Rx_Handler+0xb0>)
 8001abe:	f7ff ffd4 	bl	8001a6a <LL_C2_IPCC_IsActiveFlag_CHx>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d009      	beq.n	8001adc <HW_IPCC_Rx_Handler+0x48>
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HW_IPCC_Rx_Handler+0xb0>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8001ad6:	f000 f937 	bl	8001d48 <HW_IPCC_THREAD_NotEvtHandler>
 8001ada:	e030      	b.n	8001b3e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8001adc:	2110      	movs	r1, #16
 8001ade:	4819      	ldr	r0, [pc, #100]	; (8001b44 <HW_IPCC_Rx_Handler+0xb0>)
 8001ae0:	f7ff ffc3 	bl	8001a6a <LL_C2_IPCC_IsActiveFlag_CHx>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d009      	beq.n	8001afe <HW_IPCC_Rx_Handler+0x6a>
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HW_IPCC_Rx_Handler+0xb0>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8001af8:	f000 f932 	bl	8001d60 <HW_IPCC_THREAD_CliNotEvtHandler>
 8001afc:	e01f      	b.n	8001b3e <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001afe:	2101      	movs	r1, #1
 8001b00:	4810      	ldr	r0, [pc, #64]	; (8001b44 <HW_IPCC_Rx_Handler+0xb0>)
 8001b02:	f7ff ffb2 	bl	8001a6a <LL_C2_IPCC_IsActiveFlag_CHx>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HW_IPCC_Rx_Handler+0x8a>
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HW_IPCC_Rx_Handler+0xb0>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8001b18:	f000 f88a 	bl	8001c30 <HW_IPCC_BLE_EvtHandler>
 8001b1c:	e00f      	b.n	8001b3e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001b1e:	2108      	movs	r1, #8
 8001b20:	4808      	ldr	r0, [pc, #32]	; (8001b44 <HW_IPCC_Rx_Handler+0xb0>)
 8001b22:	f7ff ffa2 	bl	8001a6a <LL_C2_IPCC_IsActiveFlag_CHx>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d009      	beq.n	8001b40 <HW_IPCC_Rx_Handler+0xac>
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HW_IPCC_Rx_Handler+0xb0>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001b3a:	f000 f95d 	bl	8001df8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001b3e:	bf00      	nop
 8001b40:	bf00      	nop
}
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	58000c00 	.word	0x58000c00

08001b48 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	4822      	ldr	r0, [pc, #136]	; (8001bd8 <HW_IPCC_Tx_Handler+0x90>)
 8001b50:	f7ff ff76 	bl	8001a40 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HW_IPCC_Tx_Handler+0x26>
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HW_IPCC_Tx_Handler+0x90>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001b68:	f000 f892 	bl	8001c90 <HW_IPCC_SYS_CmdEvtHandler>
 8001b6c:	e031      	b.n	8001bd2 <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8001b6e:	2104      	movs	r1, #4
 8001b70:	4819      	ldr	r0, [pc, #100]	; (8001bd8 <HW_IPCC_Tx_Handler+0x90>)
 8001b72:	f7ff ff65 	bl	8001a40 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HW_IPCC_Tx_Handler+0x48>
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HW_IPCC_Tx_Handler+0x90>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8001b8a:	f000 f8d1 	bl	8001d30 <HW_IPCC_OT_CmdEvtHandler>
 8001b8e:	e020      	b.n	8001bd2 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001b90:	2108      	movs	r1, #8
 8001b92:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <HW_IPCC_Tx_Handler+0x90>)
 8001b94:	f7ff ff54 	bl	8001a40 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <HW_IPCC_Tx_Handler+0x6a>
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HW_IPCC_Tx_Handler+0x90>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001bac:	f000 f906 	bl	8001dbc <HW_IPCC_MM_FreeBufHandler>
 8001bb0:	e00f      	b.n	8001bd2 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <HW_IPCC_Tx_Handler+0x90>)
 8001bb6:	f7ff ff43 	bl	8001a40 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HW_IPCC_Tx_Handler+0x8c>
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HW_IPCC_Tx_Handler+0x90>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001bce:	f000 f83b 	bl	8001c48 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001bd2:	bf00      	nop
 8001bd4:	bf00      	nop
}
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	58000c00 	.word	0x58000c00

08001bdc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001be0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001be4:	f7ff fe8b 	bl	80018fe <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001be8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bec:	f7ff fe5c 	bl	80018a8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001bf0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bf4:	f7ff fe44 	bl	8001880 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001bf8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001bfa:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001bfc:	f7ff fe30 	bl	8001860 <LL_PWR_EnableBootC2>

  return;
 8001c00:	bf00      	nop
}
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001c08:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001c0c:	f7ff fe5e 	bl	80018cc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001c10:	4806      	ldr	r0, [pc, #24]	; (8001c2c <HW_IPCC_Init+0x28>)
 8001c12:	f7ff fea0 	bl	8001956 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <HW_IPCC_Init+0x28>)
 8001c18:	f7ff fe8d 	bl	8001936 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001c1c:	202c      	movs	r0, #44	; 0x2c
 8001c1e:	f002 fbd2 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001c22:	202d      	movs	r0, #45	; 0x2d
 8001c24:	f002 fbcf 	bl	80043c6 <HAL_NVIC_EnableIRQ>

  return;
 8001c28:	bf00      	nop
}
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	58000c00 	.word	0x58000c00

08001c30 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001c34:	f008 fb7e 	bl	800a334 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4802      	ldr	r0, [pc, #8]	; (8001c44 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001c3c:	f7ff fee3 	bl	8001a06 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001c40:	bf00      	nop
}
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	58000c00 	.word	0x58000c00

08001c48 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	4803      	ldr	r0, [pc, #12]	; (8001c5c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001c50:	f7ff fea4 	bl	800199c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001c54:	f008 fb9e 	bl	800a394 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001c58:	bf00      	nop
}
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	58000c00 	.word	0x58000c00

08001c60 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001c64:	2102      	movs	r1, #2
 8001c66:	4802      	ldr	r0, [pc, #8]	; (8001c70 <HW_IPCC_SYS_Init+0x10>)
 8001c68:	f7ff feaa 	bl	80019c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001c6c:	bf00      	nop
}
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	58000c00 	.word	0x58000c00

08001c74 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4804      	ldr	r0, [pc, #16]	; (8001c8c <HW_IPCC_SYS_SendCmd+0x18>)
 8001c7c:	f7ff fed1 	bl	8001a22 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001c80:	2102      	movs	r1, #2
 8001c82:	4802      	ldr	r0, [pc, #8]	; (8001c8c <HW_IPCC_SYS_SendCmd+0x18>)
 8001c84:	f7ff fe77 	bl	8001976 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001c88:	bf00      	nop
}
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	58000c00 	.word	0x58000c00

08001c90 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001c94:	2102      	movs	r1, #2
 8001c96:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001c98:	f7ff fe80 	bl	800199c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001c9c:	f008 fbca 	bl	800a434 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001ca0:	bf00      	nop
}
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	58000c00 	.word	0x58000c00

08001ca8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001cac:	f008 fbd8 	bl	800a460 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001cb0:	2102      	movs	r1, #2
 8001cb2:	4802      	ldr	r0, [pc, #8]	; (8001cbc <HW_IPCC_SYS_EvtHandler+0x14>)
 8001cb4:	f7ff fea7 	bl	8001a06 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001cb8:	bf00      	nop
}
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	58000c00 	.word	0x58000c00

08001cc0 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <HW_IPCC_THREAD_Init+0x18>)
 8001cc8:	f7ff fe7a 	bl	80019c0 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001ccc:	2110      	movs	r1, #16
 8001cce:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <HW_IPCC_THREAD_Init+0x18>)
 8001cd0:	f7ff fe76 	bl	80019c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001cd4:	bf00      	nop
}
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	58000c00 	.word	0x58000c00

08001cdc <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <HW_IPCC_OT_SendCmd+0x18>)
 8001ce4:	f7ff fe9d 	bl	8001a22 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001ce8:	2104      	movs	r1, #4
 8001cea:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <HW_IPCC_OT_SendCmd+0x18>)
 8001cec:	f7ff fe43 	bl	8001976 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001cf0:	bf00      	nop
}
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	58000c00 	.word	0x58000c00

08001cf8 <HW_IPCC_THREAD_SendAck>:

  return;
}

void HW_IPCC_THREAD_SendAck( void )
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	4804      	ldr	r0, [pc, #16]	; (8001d10 <HW_IPCC_THREAD_SendAck+0x18>)
 8001d00:	f7ff fe81 	bl	8001a06 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001d04:	2104      	movs	r1, #4
 8001d06:	4802      	ldr	r0, [pc, #8]	; (8001d10 <HW_IPCC_THREAD_SendAck+0x18>)
 8001d08:	f7ff fe5a 	bl	80019c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001d0c:	bf00      	nop
}
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	58000c00 	.word	0x58000c00

08001d14 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001d18:	2110      	movs	r1, #16
 8001d1a:	4804      	ldr	r0, [pc, #16]	; (8001d2c <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001d1c:	f7ff fe73 	bl	8001a06 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001d20:	2110      	movs	r1, #16
 8001d22:	4802      	ldr	r0, [pc, #8]	; (8001d2c <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001d24:	f7ff fe4c 	bl	80019c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001d28:	bf00      	nop
}
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	58000c00 	.word	0x58000c00

08001d30 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001d34:	2104      	movs	r1, #4
 8001d36:	4803      	ldr	r0, [pc, #12]	; (8001d44 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8001d38:	f7ff fe30 	bl	800199c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8001d3c:	f008 fbfc 	bl	800a538 <HW_IPCC_OT_CmdEvtNot>

  return;
 8001d40:	bf00      	nop
}
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	58000c00 	.word	0x58000c00

08001d48 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	4803      	ldr	r0, [pc, #12]	; (8001d5c <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8001d50:	f7ff fe48 	bl	80019e4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8001d54:	f008 fbfc 	bl	800a550 <HW_IPCC_THREAD_EvtNot>

  return;
 8001d58:	bf00      	nop
}
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	58000c00 	.word	0x58000c00

08001d60 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001d64:	2110      	movs	r1, #16
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8001d68:	f7ff fe3c 	bl	80019e4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8001d6c:	f008 fbfc 	bl	800a568 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8001d70:	bf00      	nop
}
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	58000c00 	.word	0x58000c00

08001d78 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001d80:	2108      	movs	r1, #8
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001d84:	f7ff fe5c 	bl	8001a40 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001d94:	2108      	movs	r1, #8
 8001d96:	4807      	ldr	r0, [pc, #28]	; (8001db4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001d98:	f7ff fded 	bl	8001976 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001d9c:	e006      	b.n	8001dac <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001da2:	2108      	movs	r1, #8
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001da6:	f7ff fe3c 	bl	8001a22 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001daa:	bf00      	nop
}
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	58000c00 	.word	0x58000c00
 8001db8:	2000024c 	.word	0x2000024c

08001dbc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001dc4:	f7ff fdea 	bl	800199c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001dce:	2108      	movs	r1, #8
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001dd2:	f7ff fe26 	bl	8001a22 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001dd6:	bf00      	nop
}
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	58000c00 	.word	0x58000c00
 8001de0:	2000024c 	.word	0x2000024c

08001de4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001de8:	2108      	movs	r1, #8
 8001dea:	4802      	ldr	r0, [pc, #8]	; (8001df4 <HW_IPCC_TRACES_Init+0x10>)
 8001dec:	f7ff fde8 	bl	80019c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001df0:	bf00      	nop
}
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	58000c00 	.word	0x58000c00

08001df8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001dfc:	f008 fc46 	bl	800a68c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001e00:	2108      	movs	r1, #8
 8001e02:	4802      	ldr	r0, [pc, #8]	; (8001e0c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001e04:	f7ff fdff 	bl	8001a06 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001e08:	bf00      	nop
}
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	58000c00 	.word	0x58000c00

08001e10 <create_sensor_LL>:
	eStateFsm cur_state;
	int32_t baseline_temp_delta;
} fsm;

SensorQueueLL* create_sensor_LL(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
	SensorQueueLL *ret = malloc(sizeof(SensorQueueLL));
 8001e16:	200c      	movs	r0, #12
 8001e18:	f009 f88e 	bl	800af38 <malloc>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	607b      	str	r3, [r7, #4]
	ret->front = NULL;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
	ret->rear = NULL;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
	ret->size = 0;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	721a      	strb	r2, [r3, #8]
	return ret;
 8001e32:	687b      	ldr	r3, [r7, #4]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <update_sensor_LL>:

void update_sensor_LL(SensorQueueLL *ll, SensorData_t dat)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	4638      	mov	r0, r7
 8001e46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	SensorDataNode *new = malloc(sizeof(SensorDataNode));
 8001e4a:	2010      	movs	r0, #16
 8001e4c:	f009 f874 	bl	800af38 <malloc>
 8001e50:	4603      	mov	r3, r0
 8001e52:	617b      	str	r3, [r7, #20]
	if(new == NULL) return;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d039      	beq.n	8001ece <update_sensor_LL+0x92>
	new->data = dat;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	463a      	mov	r2, r7
 8001e60:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	new->next = NULL;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
	if (ll->size == 0)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	7a1b      	ldrb	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <update_sensor_LL+0x4c>
	{
		ll->front = new;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	601a      	str	r2, [r3, #0]
		ll->rear = new;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	605a      	str	r2, [r3, #4]
		ll->size = 1;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	721a      	strb	r2, [r3, #8]
 8001e86:	e023      	b.n	8001ed0 <update_sensor_LL+0x94>
	}
	else
	{
		if (ll->size >= 10)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	7a1b      	ldrb	r3, [r3, #8]
 8001e8c:	2b09      	cmp	r3, #9
 8001e8e:	d910      	bls.n	8001eb2 <update_sensor_LL+0x76>
		{
			SensorDataNode *del = ll->front;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	613b      	str	r3, [r7, #16]
			ll->front = ll->front->next;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]
			free(del);
 8001ea0:	6938      	ldr	r0, [r7, #16]
 8001ea2:	f009 f851 	bl	800af48 <free>
			ll->size--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	7a1b      	ldrb	r3, [r3, #8]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	721a      	strb	r2, [r3, #8]
		}
		ll->rear->next = new;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	601a      	str	r2, [r3, #0]
		ll->rear = new;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	605a      	str	r2, [r3, #4]
		ll->size++;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	7a1b      	ldrb	r3, [r3, #8]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	721a      	strb	r2, [r3, #8]
 8001ecc:	e000      	b.n	8001ed0 <update_sensor_LL+0x94>
	if(new == NULL) return;
 8001ece:	bf00      	nop
	}
}
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <traverse_sensor_LL>:

uint8_t traverse_sensor_LL(SensorQueueLL *ll, bool isHum, int32_t l_th, int32_t u_th, int32_t *avg_temp, int32_t *avg_hum)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b087      	sub	sp, #28
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	72fb      	strb	r3, [r7, #11]
	SensorDataNode *cur = ll->front;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	617b      	str	r3, [r7, #20]
	uint8_t ret = 0, ctr = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	74fb      	strb	r3, [r7, #19]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	74bb      	strb	r3, [r7, #18]
	while (cur != NULL)
 8001ef4:	e029      	b.n	8001f4a <traverse_sensor_LL+0x74>
	{
		if (isHum && (cur->data.humidity < l_th || cur->data.humidity > u_th))
 8001ef6:	7afb      	ldrb	r3, [r7, #11]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <traverse_sensor_LL+0x42>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	dc04      	bgt.n	8001f10 <traverse_sensor_LL+0x3a>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	da03      	bge.n	8001f18 <traverse_sensor_LL+0x42>
			ret++;
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	3301      	adds	r3, #1
 8001f14:	74fb      	strb	r3, [r7, #19]
 8001f16:	e012      	b.n	8001f3e <traverse_sensor_LL+0x68>
		else if (!isHum && (cur->data.temp_main < l_th || cur->data.temp_main > u_th))
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	f083 0301 	eor.w	r3, r3, #1
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00c      	beq.n	8001f3e <traverse_sensor_LL+0x68>
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	dc04      	bgt.n	8001f38 <traverse_sensor_LL+0x62>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	da02      	bge.n	8001f3e <traverse_sensor_LL+0x68>
			ret++;
 8001f38:	7cfb      	ldrb	r3, [r7, #19]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	74fb      	strb	r3, [r7, #19]


		cur = cur->next;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	617b      	str	r3, [r7, #20]
		ctr++;
 8001f44:	7cbb      	ldrb	r3, [r7, #18]
 8001f46:	3301      	adds	r3, #1
 8001f48:	74bb      	strb	r3, [r7, #18]
	while (cur != NULL)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1d2      	bne.n	8001ef6 <traverse_sensor_LL+0x20>
	}

	return ret;
 8001f50:	7cfb      	ldrb	r3, [r7, #19]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <app_algo_init>:

void app_algo_init(SensorData_t data)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fsm.data_hist = create_sensor_LL();
 8001f6c:	f7ff ff50 	bl	8001e10 <create_sensor_LL>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4a09      	ldr	r2, [pc, #36]	; (8001f98 <app_algo_init+0x38>)
 8001f74:	6013      	str	r3, [r2, #0]
	fsm.data_hist->size = 0;
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <app_algo_init+0x38>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	721a      	strb	r2, [r3, #8]
	fsm.cur_state = STATE_INIT;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <app_algo_init+0x38>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	711a      	strb	r2, [r3, #4]
	fsm.baseline_temp_delta = data.temp_main - (int32_t)data.temp_aux;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	4a02      	ldr	r2, [pc, #8]	; (8001f98 <app_algo_init+0x38>)
 8001f8e:	6093      	str	r3, [r2, #8]
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000250 	.word	0x20000250

08001f9c <app_algo_proc>:

eResFsm app_algo_proc(SensorData_t data, bool ext_sig_reset, int8_t *state)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b08b      	sub	sp, #44	; 0x2c
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	1d3c      	adds	r4, r7, #4
 8001fa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001fa8:	70fb      	strb	r3, [r7, #3]
	update_sensor_LL(fsm.data_hist, data);
 8001faa:	4b4d      	ldr	r3, [pc, #308]	; (80020e0 <app_algo_proc+0x144>)
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb2:	f7ff ff43 	bl	8001e3c <update_sensor_LL>
	*state = fsm.cur_state;
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <app_algo_proc+0x144>)
 8001fb8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	701a      	strb	r2, [r3, #0]
	if (ext_sig_reset)
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <app_algo_proc+0x34>
	{
		fsm.cur_state = STATE_INIT;
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <app_algo_proc+0x144>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e082      	b.n	80020d6 <app_algo_proc+0x13a>
	}

	switch (fsm.cur_state)
 8001fd0:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <app_algo_proc+0x144>)
 8001fd2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d87a      	bhi.n	80020d2 <app_algo_proc+0x136>
 8001fdc:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <app_algo_proc+0x48>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	080020cd 	.word	0x080020cd
 8001fe8:	08001ffd 	.word	0x08001ffd
 8001fec:	08002011 	.word	0x08002011
 8001ff0:	0800202d 	.word	0x0800202d
 8001ff4:	0800208b 	.word	0x0800208b
 8001ff8:	0800209f 	.word	0x0800209f
	{
	case STATE_INIT:
	{
		fsm.cur_state = STATE_MEAS;
 8001ffc:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <app_algo_proc+0x144>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	711a      	strb	r2, [r3, #4]
		APP_DBG("FSM STATE INIT");
 8002002:	4a38      	ldr	r2, [pc, #224]	; (80020e4 <app_algo_proc+0x148>)
 8002004:	2101      	movs	r1, #1
 8002006:	2000      	movs	r0, #0
 8002008:	f001 ff5a 	bl	8003ec0 <logApplication>
		return RES_NONE;
 800200c:	2300      	movs	r3, #0
 800200e:	e062      	b.n	80020d6 <app_algo_proc+0x13a>
	}
	case STATE_MEAS:
	{
		APP_DBG("FSM STATE MEAS");
 8002010:	4a35      	ldr	r2, [pc, #212]	; (80020e8 <app_algo_proc+0x14c>)
 8002012:	2101      	movs	r1, #1
 8002014:	2000      	movs	r0, #0
 8002016:	f001 ff53 	bl	8003ec0 <logApplication>
		if (data.humidity > HUMIDITY_TRIG_TH_POS)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a33      	ldr	r2, [pc, #204]	; (80020ec <app_algo_proc+0x150>)
 800201e:	4293      	cmp	r3, r2
 8002020:	dd02      	ble.n	8002028 <app_algo_proc+0x8c>
			fsm.cur_state = STATE_PRETRIG;
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <app_algo_proc+0x144>)
 8002024:	2202      	movs	r2, #2
 8002026:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8002028:	2300      	movs	r3, #0
 800202a:	e054      	b.n	80020d6 <app_algo_proc+0x13a>
	}
	case STATE_PRETRIG:
	{
		APP_DBG("FSM STATE PRETRIG\n");
 800202c:	4a30      	ldr	r2, [pc, #192]	; (80020f0 <app_algo_proc+0x154>)
 800202e:	2101      	movs	r1, #1
 8002030:	2000      	movs	r0, #0
 8002032:	f001 ff45 	bl	8003ec0 <logApplication>
		if (data.humidity < HUMIDITY_TRIG_TH_NEG)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a2e      	ldr	r2, [pc, #184]	; (80020f4 <app_algo_proc+0x158>)
 800203a:	4293      	cmp	r3, r2
 800203c:	da04      	bge.n	8002048 <app_algo_proc+0xac>
		{
			fsm.cur_state = STATE_MEAS;
 800203e:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <app_algo_proc+0x144>)
 8002040:	2201      	movs	r2, #1
 8002042:	711a      	strb	r2, [r3, #4]
			return RES_NONE;
 8002044:	2300      	movs	r3, #0
 8002046:	e046      	b.n	80020d6 <app_algo_proc+0x13a>
		}
		int32_t t, h;
		uint8_t ct = traverse_sensor_LL(fsm.data_hist, true, 0, HUMIDITY_TRIG_TH_POS, &t, &h);
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <app_algo_proc+0x144>)
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	4a27      	ldr	r2, [pc, #156]	; (80020ec <app_algo_proc+0x150>)
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	f107 0318 	add.w	r3, r7, #24
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	2200      	movs	r2, #0
 800205e:	2101      	movs	r1, #1
 8002060:	f7ff ff39 	bl	8001ed6 <traverse_sensor_LL>
 8002064:	4603      	mov	r3, r0
 8002066:	77fb      	strb	r3, [r7, #31]
		APP_DBG("Pretrig ctr:%d", ct);
 8002068:	7ffb      	ldrb	r3, [r7, #31]
 800206a:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <app_algo_proc+0x15c>)
 800206c:	2101      	movs	r1, #1
 800206e:	2000      	movs	r0, #0
 8002070:	f001 ff26 	bl	8003ec0 <logApplication>
		if (ct >= HUMIDITY_SAMPLES_TRIG_TH)
 8002074:	2205      	movs	r2, #5
 8002076:	7ffb      	ldrb	r3, [r7, #31]
 8002078:	4293      	cmp	r3, r2
 800207a:	d304      	bcc.n	8002086 <app_algo_proc+0xea>
		{
			fsm.cur_state = STATE_HEATING;
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <app_algo_proc+0x144>)
 800207e:	2203      	movs	r2, #3
 8002080:	711a      	strb	r2, [r3, #4]
			return RES_HEAT;
 8002082:	2301      	movs	r3, #1
 8002084:	e027      	b.n	80020d6 <app_algo_proc+0x13a>
		}
		return RES_NONE;
 8002086:	2300      	movs	r3, #0
 8002088:	e025      	b.n	80020d6 <app_algo_proc+0x13a>
	}
	case STATE_HEATING:
	{
		APP_DBG("FSM STATE HEATING");
 800208a:	4a1c      	ldr	r2, [pc, #112]	; (80020fc <app_algo_proc+0x160>)
 800208c:	2101      	movs	r1, #1
 800208e:	2000      	movs	r0, #0
 8002090:	f001 ff16 	bl	8003ec0 <logApplication>
		fsm.cur_state = STATE_COOLDOWN;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <app_algo_proc+0x144>)
 8002096:	2204      	movs	r2, #4
 8002098:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 800209a:	2300      	movs	r3, #0
 800209c:	e01b      	b.n	80020d6 <app_algo_proc+0x13a>
	}
	case STATE_COOLDOWN:
	{
		APP_DBG("FSM STATE COOLDOWN");
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <app_algo_proc+0x164>)
 80020a0:	2101      	movs	r1, #1
 80020a2:	2000      	movs	r0, #0
 80020a4:	f001 ff0c 	bl	8003ec0 <logApplication>
		if(data.temp_main - data.temp_aux < fsm.baseline_temp_delta + TEMPERATURE_COOLDOWN_MAX_ALLOWED_DELTA)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80020ae:	1a9a      	subs	r2, r3, r2
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <app_algo_proc+0x144>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020b8:	440b      	add	r3, r1
 80020ba:	429a      	cmp	r2, r3
 80020bc:	da04      	bge.n	80020c8 <app_algo_proc+0x12c>
		{
			fsm.cur_state = STATE_MEAS;
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <app_algo_proc+0x144>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	711a      	strb	r2, [r3, #4]
			return RES_NONE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e006      	b.n	80020d6 <app_algo_proc+0x13a>
		}
		else
		{
			return RES_INVL;
 80020c8:	2302      	movs	r3, #2
 80020ca:	e004      	b.n	80020d6 <app_algo_proc+0x13a>
		}
	}
	case STATE_UNDEF:
		return RES_FAULT;
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295
 80020d0:	e001      	b.n	80020d6 <app_algo_proc+0x13a>
	}
	return RES_FAULT;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000250 	.word	0x20000250
 80020e4:	0800c884 	.word	0x0800c884
 80020e8:	0800c894 	.word	0x0800c894
 80020ec:	00016760 	.word	0x00016760
 80020f0:	0800c8a4 	.word	0x0800c8a4
 80020f4:	000157c0 	.word	0x000157c0
 80020f8:	0800c8b8 	.word	0x0800c8b8
 80020fc:	0800c8c8 	.word	0x0800c8c8
 8002100:	0800c8dc 	.word	0x0800c8dc

08002104 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <LL_C2_PWR_SetPowerMode+0x28>)
 800210e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4905      	ldr	r1, [pc, #20]	; (800212c <LL_C2_PWR_SetPowerMode+0x28>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	58000400 	.word	0x58000400

08002130 <LL_EXTI_EnableIT_32_63>:
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <LL_EXTI_EnableIT_32_63+0x24>)
 800213a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800213e:	4905      	ldr	r1, [pc, #20]	; (8002154 <LL_EXTI_EnableIT_32_63+0x24>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	58000800 	.word	0x58000800

08002158 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002166:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002172:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	cafecafe 	.word	0xcafecafe

08002194 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80021a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <LL_LPM_EnableSleep+0x1c>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <LL_LPM_EnableSleep+0x1c>)
 80021c6:	f023 0304 	bic.w	r3, r3, #4
 80021ca:	6113      	str	r3, [r2, #16]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	22ca      	movs	r2, #202	; 0xca
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2253      	movs	r2, #83	; 0x53
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 0207 	bic.w	r2, r3, #7
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <MX_APPE_Config+0x18>)
 8002242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002246:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8002248:	f000 f82c 	bl	80022a4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800224c:	f000 f831 	bl	80022b2 <Config_HSE>

  return;
 8002250:	bf00      	nop
}
 8002252:	bd80      	pop	{r7, pc}
 8002254:	58004000 	.word	0x58004000

08002258 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800225c:	f000 f83d 	bl	80022da <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8002260:	f000 f856 	bl	8002310 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002264:	4907      	ldr	r1, [pc, #28]	; (8002284 <MX_APPE_Init+0x2c>)
 8002266:	2000      	movs	r0, #0
 8002268:	f000 fdb8 	bl	8002ddc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //Init_Debug();
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800226c:	2101      	movs	r1, #1
 800226e:	2001      	movs	r0, #1
 8002270:	f008 fab6 	bl	800a7e0 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8002274:	2101      	movs	r1, #1
 8002276:	2001      	movs	r0, #1
 8002278:	f008 fae2 	bl	800a840 <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800227c:	f000 f856 	bl	800232c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8002280:	bf00      	nop
}
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000580 	.word	0x20000580

08002288 <Init_Smps>:

void Init_Smps(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800228c:	bf00      	nop
}
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <Init_Exti>:

void Init_Exti(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800229a:	2050      	movs	r0, #80	; 0x50
 800229c:	f7ff ff48 	bl	8002130 <LL_EXTI_EnableIT_32_63>

  return;
 80022a0:	bf00      	nop
}
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80022a8:	bf00      	nop
}
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f008 fa57 	bl	800a76c <OTP_Read>
 80022be:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	799b      	ldrb	r3, [r3, #6]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff44 	bl	8002158 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
}
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <System_Init>:

static void System_Init(void)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	af00      	add	r7, sp, #0
  Init_Smps();
 80022de:	f7ff ffd3 	bl	8002288 <Init_Smps>

  Init_Exti();
 80022e2:	f7ff ffd8 	bl	8002296 <Init_Exti>

  Init_Rtc();
 80022e6:	f000 f803 	bl	80022f0 <Init_Rtc>

  return;
 80022ea:	bf00      	nop
}
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80022f4:	4805      	ldr	r0, [pc, #20]	; (800230c <Init_Rtc+0x1c>)
 80022f6:	f7ff ff7e 	bl	80021f6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80022fa:	2100      	movs	r1, #0
 80022fc:	4803      	ldr	r0, [pc, #12]	; (800230c <Init_Rtc+0x1c>)
 80022fe:	f7ff ff8a 	bl	8002216 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002302:	4802      	ldr	r0, [pc, #8]	; (800230c <Init_Rtc+0x1c>)
 8002304:	f7ff ff6a 	bl	80021dc <LL_RTC_EnableWriteProtection>

  return;
 8002308:	bf00      	nop
}
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40002800 	.word	0x40002800

08002310 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002314:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002318:	f7ff ff3c 	bl	8002194 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800231c:	f008 fa4e 	bl	800a7bc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002320:	2004      	movs	r0, #4
 8002322:	f7ff feef 	bl	8002104 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8002326:	bf00      	nop
}
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8002332:	f007 ffc5 	bl	800a2c0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8002336:	4a11      	ldr	r2, [pc, #68]	; (800237c <appe_Tl_Init+0x50>)
 8002338:	2100      	movs	r1, #0
 800233a:	2004      	movs	r0, #4
 800233c:	f008 fbe2 	bl	800ab04 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <appe_Tl_Init+0x54>)
 8002342:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <appe_Tl_Init+0x58>)
 8002346:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002348:	463b      	mov	r3, r7
 800234a:	4619      	mov	r1, r3
 800234c:	480e      	ldr	r0, [pc, #56]	; (8002388 <appe_Tl_Init+0x5c>)
 800234e:	f007 fc5b 	bl	8009c08 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <appe_Tl_Init+0x60>)
 8002358:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <appe_Tl_Init+0x64>)
 800235c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800235e:	f240 533c 	movw	r3, #1340	; 0x53c
 8002362:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	4618      	mov	r0, r3
 800236a:	f008 f909 	bl	800a580 <TL_MM_Init>

  TL_Enable();
 800236e:	f007 ffa0 	bl	800a2b2 <TL_Enable>

  return;
 8002372:	bf00      	nop
}
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	08009c41 	.word	0x08009c41
 8002380:	20030a54 	.word	0x20030a54
 8002384:	08002395 	.word	0x08002395
 8002388:	080023ab 	.word	0x080023ab
 800238c:	20030b60 	.word	0x20030b60
 8002390:	20030518 	.word	0x20030518

08002394 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800239e:	bf00      	nop
}
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	330b      	adds	r3, #11
 80023b8:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 80023c4:	d004      	beq.n	80023d0 <APPE_SysUserEvtRx+0x26>
 80023c6:	f249 2201 	movw	r2, #37377	; 0x9201
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d003      	beq.n	80023d6 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 80023ce:	e008      	b.n	80023e2 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 80023d0:	f000 f834 	bl	800243c <APPE_SysEvtReadyProcessing>
         break;
 80023d4:	e005      	b.n	80023e2 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	789b      	ldrb	r3, [r3, #2]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f806 	bl	80023ec <APPE_SysEvtError>
         break;
 80023e0:	bf00      	nop
  }
  return;
 80023e2:	bf00      	nop
}
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	2b7d      	cmp	r3, #125	; 0x7d
 80023fa:	d002      	beq.n	8002402 <APPE_SysEvtError+0x16>
 80023fc:	2b7e      	cmp	r3, #126	; 0x7e
 80023fe:	d006      	beq.n	800240e <APPE_SysEvtError+0x22>
 8002400:	e00b      	b.n	800241a <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8002402:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <APPE_SysEvtError+0x44>)
 8002404:	2101      	movs	r1, #1
 8002406:	2000      	movs	r0, #0
 8002408:	f001 fd5a 	bl	8003ec0 <logApplication>
       break;
 800240c:	e00c      	b.n	8002428 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <APPE_SysEvtError+0x48>)
 8002410:	2101      	movs	r1, #1
 8002412:	2000      	movs	r0, #0
 8002414:	f001 fd54 	bl	8003ec0 <logApplication>
       break;
 8002418:	e006      	b.n	8002428 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4a06      	ldr	r2, [pc, #24]	; (8002438 <APPE_SysEvtError+0x4c>)
 800241e:	2101      	movs	r1, #1
 8002420:	2000      	movs	r0, #0
 8002422:	f001 fd4d 	bl	8003ec0 <logApplication>
       break;
 8002426:	bf00      	nop
  }
  return;
 8002428:	bf00      	nop
}
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	0800c8f0 	.word	0x0800c8f0
 8002434:	0800c914 	.word	0x0800c914
 8002438:	0800c934 	.word	0x0800c934

0800243c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8002440:	f008 f912 	bl	800a668 <TL_TRACES_Init>

  APP_THREAD_Init();
 8002444:	f7fe fb9e 	bl	8000b84 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002448:	2100      	movs	r1, #0
 800244a:	2001      	movs	r0, #1
 800244c:	f008 f9c8 	bl	800a7e0 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002450:	2100      	movs	r1, #0
 8002452:	2001      	movs	r0, #1
 8002454:	f008 f9f4 	bl	800a840 <UTIL_LPM_SetOffMode>
  return;
 8002458:	bf00      	nop
}
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002464:	f001 fe00 	bl	8004068 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d00a      	beq.n	800248c <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8002476:	f001 fe0f 	bl	8004098 <HAL_GetTickFreq>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002484:	e002      	b.n	800248c <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002486:	f7ff fe99 	bl	80021bc <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800248a:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800248c:	f001 fdec 	bl	8004068 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	429a      	cmp	r2, r3
 800249a:	d8f4      	bhi.n	8002486 <HAL_Delay+0x2a>
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80024aa:	f04f 30ff 	mov.w	r0, #4294967295
 80024ae:	f008 fa2d 	bl	800a90c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 80024ba:	f008 f9f1 	bl	800a8a0 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80024be:	bf00      	nop
}
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d003      	beq.n	80024dc <UTIL_SEQ_EvtIdle+0x18>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d00c      	beq.n	80024f4 <UTIL_SEQ_EvtIdle+0x30>
 80024da:	e012      	b.n	8002502 <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <UTIL_SEQ_EvtIdle+0x50>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d103      	bne.n	80024ec <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f008 fa11 	bl	800a90c <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 80024ea:	e00f      	b.n	800250c <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f008 fa0d 	bl	800a90c <UTIL_SEQ_Run>
    break;
 80024f2:	e00b      	b.n	800250c <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80024f4:	2004      	movs	r0, #4
 80024f6:	f008 fb53 	bl	800aba0 <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f008 fa06 	bl	800a90c <UTIL_SEQ_Run>
    break;
 8002500:	e004      	b.n	800250c <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002502:	f04f 30ff 	mov.w	r0, #4294967295
 8002506:	f008 fa01 	bl	800a90c <UTIL_SEQ_Run>
    break;
 800250a:	bf00      	nop
  }
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	2000025c 	.word	0x2000025c

08002518 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8002520:	2100      	movs	r1, #0
 8002522:	2004      	movs	r0, #4
 8002524:	f008 fb10 	bl	800ab48 <UTIL_SEQ_SetTask>
  return;
 8002528:	bf00      	nop
}
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8002538:	2001      	movs	r0, #1
 800253a:	f008 fb31 	bl	800aba0 <UTIL_SEQ_SetEvt>
  return;
 800253e:	bf00      	nop
}
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 800254e:	2001      	movs	r0, #1
 8002550:	f008 fb46 	bl	800abe0 <UTIL_SEQ_WaitEvt>
  return;
 8002554:	bf00      	nop
}
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f008 f847 	bl	800a5f8 <TL_MM_EvtDone>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002582:	2101      	movs	r1, #1
 8002584:	2000      	movs	r0, #0
 8002586:	f001 fc9b 	bl	8003ec0 <logApplication>
  switch(GPIO_Pin)
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002590:	d003      	beq.n	800259a <HAL_GPIO_EXTI_Callback+0x26>
 8002592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002596:	d005      	beq.n	80025a4 <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 8002598:	e005      	b.n	80025a6 <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 800259a:	2101      	movs	r1, #1
 800259c:	2008      	movs	r0, #8
 800259e:	f008 fad3 	bl	800ab48 <UTIL_SEQ_SetTask>
        break;
 80025a2:	e000      	b.n	80025a6 <HAL_GPIO_EXTI_Callback+0x32>
        break;
 80025a4:	bf00      	nop
  }
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	0800c954 	.word	0x0800c954

080025b4 <LL_EXTI_EnableIT_0_31>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80025be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80025c2:	4905      	ldr	r1, [pc, #20]	; (80025d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	58000800 	.word	0x58000800

080025dc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4904      	ldr	r1, [pc, #16]	; (80025fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	58000800 	.word	0x58000800

08002600 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <ReadRtcSsrValue+0x3c>)
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	b29b      	uxth	r3, r3
 800260c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <ReadRtcSsrValue+0x3c>)
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	b29b      	uxth	r3, r3
 8002614:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002616:	e005      	b.n	8002624 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <ReadRtcSsrValue+0x3c>)
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	b29b      	uxth	r3, r3
 8002622:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d1f5      	bne.n	8002618 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800262c:	683b      	ldr	r3, [r7, #0]
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40002800 	.word	0x40002800

08002640 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	460a      	mov	r2, r1
 800264a:	71fb      	strb	r3, [r7, #7]
 800264c:	4613      	mov	r3, r2
 800264e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002650:	79ba      	ldrb	r2, [r7, #6]
 8002652:	491d      	ldr	r1, [pc, #116]	; (80026c8 <LinkTimerAfter+0x88>)
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	440b      	add	r3, r1
 800265e:	3315      	adds	r3, #21
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b06      	cmp	r3, #6
 8002668:	d009      	beq.n	800267e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	4916      	ldr	r1, [pc, #88]	; (80026c8 <LinkTimerAfter+0x88>)
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	3314      	adds	r3, #20
 800267a:	79fa      	ldrb	r2, [r7, #7]
 800267c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800267e:	79fa      	ldrb	r2, [r7, #7]
 8002680:	4911      	ldr	r1, [pc, #68]	; (80026c8 <LinkTimerAfter+0x88>)
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	440b      	add	r3, r1
 800268c:	3315      	adds	r3, #21
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002692:	79fa      	ldrb	r2, [r7, #7]
 8002694:	490c      	ldr	r1, [pc, #48]	; (80026c8 <LinkTimerAfter+0x88>)
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	3314      	adds	r3, #20
 80026a2:	79ba      	ldrb	r2, [r7, #6]
 80026a4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80026a6:	79ba      	ldrb	r2, [r7, #6]
 80026a8:	4907      	ldr	r1, [pc, #28]	; (80026c8 <LinkTimerAfter+0x88>)
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	3315      	adds	r3, #21
 80026b6:	79fa      	ldrb	r2, [r7, #7]
 80026b8:	701a      	strb	r2, [r3, #0]

  return;
 80026ba:	bf00      	nop
}
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000260 	.word	0x20000260

080026cc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	460a      	mov	r2, r1
 80026d6:	71fb      	strb	r3, [r7, #7]
 80026d8:	4613      	mov	r3, r2
 80026da:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <LinkTimerBefore+0xb8>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	79ba      	ldrb	r2, [r7, #6]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d032      	beq.n	800274e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80026e8:	79ba      	ldrb	r2, [r7, #6]
 80026ea:	4927      	ldr	r1, [pc, #156]	; (8002788 <LinkTimerBefore+0xbc>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	3314      	adds	r3, #20
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	4922      	ldr	r1, [pc, #136]	; (8002788 <LinkTimerBefore+0xbc>)
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	3315      	adds	r3, #21
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	491d      	ldr	r1, [pc, #116]	; (8002788 <LinkTimerBefore+0xbc>)
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	3315      	adds	r3, #21
 8002720:	79ba      	ldrb	r2, [r7, #6]
 8002722:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002724:	79fa      	ldrb	r2, [r7, #7]
 8002726:	4918      	ldr	r1, [pc, #96]	; (8002788 <LinkTimerBefore+0xbc>)
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	3314      	adds	r3, #20
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002738:	79ba      	ldrb	r2, [r7, #6]
 800273a:	4913      	ldr	r1, [pc, #76]	; (8002788 <LinkTimerBefore+0xbc>)
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	3314      	adds	r3, #20
 8002748:	79fa      	ldrb	r2, [r7, #7]
 800274a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800274c:	e014      	b.n	8002778 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800274e:	79fa      	ldrb	r2, [r7, #7]
 8002750:	490d      	ldr	r1, [pc, #52]	; (8002788 <LinkTimerBefore+0xbc>)
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	3315      	adds	r3, #21
 800275e:	79ba      	ldrb	r2, [r7, #6]
 8002760:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002762:	79ba      	ldrb	r2, [r7, #6]
 8002764:	4908      	ldr	r1, [pc, #32]	; (8002788 <LinkTimerBefore+0xbc>)
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	3314      	adds	r3, #20
 8002772:	79fa      	ldrb	r2, [r7, #7]
 8002774:	701a      	strb	r2, [r3, #0]
  return;
 8002776:	bf00      	nop
}
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	200002f0 	.word	0x200002f0
 8002788:	20000260 	.word	0x20000260

0800278c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002796:	4b4e      	ldr	r3, [pc, #312]	; (80028d0 <linkTimer+0x144>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b06      	cmp	r3, #6
 800279e:	d118      	bne.n	80027d2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80027a0:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <linkTimer+0x144>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <linkTimer+0x148>)
 80027a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80027aa:	4a49      	ldr	r2, [pc, #292]	; (80028d0 <linkTimer+0x144>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	4949      	ldr	r1, [pc, #292]	; (80028d8 <linkTimer+0x14c>)
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	3315      	adds	r3, #21
 80027c0:	2206      	movs	r2, #6
 80027c2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80027c4:	4b45      	ldr	r3, [pc, #276]	; (80028dc <linkTimer+0x150>)
 80027c6:	f04f 32ff 	mov.w	r2, #4294967295
 80027ca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	81fb      	strh	r3, [r7, #14]
 80027d0:	e078      	b.n	80028c4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80027d2:	f000 f909 	bl	80029e8 <ReturnTimeElapsed>
 80027d6:	4603      	mov	r3, r0
 80027d8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80027da:	79fa      	ldrb	r2, [r7, #7]
 80027dc:	493e      	ldr	r1, [pc, #248]	; (80028d8 <linkTimer+0x14c>)
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	440b      	add	r3, r1
 80027e8:	3308      	adds	r3, #8
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	89fb      	ldrh	r3, [r7, #14]
 80027ee:	79fa      	ldrb	r2, [r7, #7]
 80027f0:	4419      	add	r1, r3
 80027f2:	4839      	ldr	r0, [pc, #228]	; (80028d8 <linkTimer+0x14c>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4403      	add	r3, r0
 80027fe:	3308      	adds	r3, #8
 8002800:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002802:	79fa      	ldrb	r2, [r7, #7]
 8002804:	4934      	ldr	r1, [pc, #208]	; (80028d8 <linkTimer+0x14c>)
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	440b      	add	r3, r1
 8002810:	3308      	adds	r3, #8
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002816:	4b2e      	ldr	r3, [pc, #184]	; (80028d0 <linkTimer+0x144>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	4619      	mov	r1, r3
 800281e:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <linkTimer+0x14c>)
 8002820:	460b      	mov	r3, r1
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	440b      	add	r3, r1
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	3308      	adds	r3, #8
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	d337      	bcc.n	80028a4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002834:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <linkTimer+0x144>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800283a:	7b7a      	ldrb	r2, [r7, #13]
 800283c:	4926      	ldr	r1, [pc, #152]	; (80028d8 <linkTimer+0x14c>)
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	3315      	adds	r3, #21
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800284e:	e013      	b.n	8002878 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002850:	7b7a      	ldrb	r2, [r7, #13]
 8002852:	4921      	ldr	r1, [pc, #132]	; (80028d8 <linkTimer+0x14c>)
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	3315      	adds	r3, #21
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002864:	7b7a      	ldrb	r2, [r7, #13]
 8002866:	491c      	ldr	r1, [pc, #112]	; (80028d8 <linkTimer+0x14c>)
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	3315      	adds	r3, #21
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002878:	7b3b      	ldrb	r3, [r7, #12]
 800287a:	2b06      	cmp	r3, #6
 800287c:	d00b      	beq.n	8002896 <linkTimer+0x10a>
 800287e:	7b3a      	ldrb	r2, [r7, #12]
 8002880:	4915      	ldr	r1, [pc, #84]	; (80028d8 <linkTimer+0x14c>)
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	3308      	adds	r3, #8
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	429a      	cmp	r2, r3
 8002894:	d2dc      	bcs.n	8002850 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002896:	7b7a      	ldrb	r2, [r7, #13]
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fecf 	bl	8002640 <LinkTimerAfter>
 80028a2:	e00f      	b.n	80028c4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <linkTimer+0x144>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff0c 	bl	80026cc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <linkTimer+0x144>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <linkTimer+0x148>)
 80028bc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80028be:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <linkTimer+0x144>)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80028c4:	89fb      	ldrh	r3, [r7, #14]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200002f0 	.word	0x200002f0
 80028d4:	200002f1 	.word	0x200002f1
 80028d8:	20000260 	.word	0x20000260
 80028dc:	200002f4 	.word	0x200002f4

080028e0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	460a      	mov	r2, r1
 80028ea:	71fb      	strb	r3, [r7, #7]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80028f0:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <UnlinkTimer+0xf8>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	79fa      	ldrb	r2, [r7, #7]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d111      	bne.n	8002920 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80028fc:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <UnlinkTimer+0xf8>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b36      	ldr	r3, [pc, #216]	; (80029dc <UnlinkTimer+0xfc>)
 8002904:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002906:	79fa      	ldrb	r2, [r7, #7]
 8002908:	4935      	ldr	r1, [pc, #212]	; (80029e0 <UnlinkTimer+0x100>)
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	3315      	adds	r3, #21
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <UnlinkTimer+0xf8>)
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e03e      	b.n	800299e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002920:	79fa      	ldrb	r2, [r7, #7]
 8002922:	492f      	ldr	r1, [pc, #188]	; (80029e0 <UnlinkTimer+0x100>)
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	3314      	adds	r3, #20
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002934:	79fa      	ldrb	r2, [r7, #7]
 8002936:	492a      	ldr	r1, [pc, #168]	; (80029e0 <UnlinkTimer+0x100>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	440b      	add	r3, r1
 8002942:	3315      	adds	r3, #21
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002948:	79f9      	ldrb	r1, [r7, #7]
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	4824      	ldr	r0, [pc, #144]	; (80029e0 <UnlinkTimer+0x100>)
 800294e:	460b      	mov	r3, r1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	440b      	add	r3, r1
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4403      	add	r3, r0
 8002958:	3315      	adds	r3, #21
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b2d8      	uxtb	r0, r3
 800295e:	4920      	ldr	r1, [pc, #128]	; (80029e0 <UnlinkTimer+0x100>)
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	3315      	adds	r3, #21
 800296c:	4602      	mov	r2, r0
 800296e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002970:	7bbb      	ldrb	r3, [r7, #14]
 8002972:	2b06      	cmp	r3, #6
 8002974:	d013      	beq.n	800299e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002976:	79f9      	ldrb	r1, [r7, #7]
 8002978:	7bba      	ldrb	r2, [r7, #14]
 800297a:	4819      	ldr	r0, [pc, #100]	; (80029e0 <UnlinkTimer+0x100>)
 800297c:	460b      	mov	r3, r1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	440b      	add	r3, r1
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4403      	add	r3, r0
 8002986:	3314      	adds	r3, #20
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b2d8      	uxtb	r0, r3
 800298c:	4914      	ldr	r1, [pc, #80]	; (80029e0 <UnlinkTimer+0x100>)
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	3314      	adds	r3, #20
 800299a:	4602      	mov	r2, r0
 800299c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800299e:	79fa      	ldrb	r2, [r7, #7]
 80029a0:	490f      	ldr	r1, [pc, #60]	; (80029e0 <UnlinkTimer+0x100>)
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	330c      	adds	r3, #12
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <UnlinkTimer+0xf8>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b06      	cmp	r3, #6
 80029ba:	d107      	bne.n	80029cc <UnlinkTimer+0xec>
 80029bc:	79bb      	ldrb	r3, [r7, #6]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d104      	bne.n	80029cc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <UnlinkTimer+0x104>)
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	601a      	str	r2, [r3, #0]
  }

  return;
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
}
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	200002f0 	.word	0x200002f0
 80029dc:	200002f1 	.word	0x200002f1
 80029e0:	20000260 	.word	0x20000260
 80029e4:	200002f4 	.word	0x200002f4

080029e8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <ReturnTimeElapsed+0x70>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f6:	d026      	beq.n	8002a46 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80029f8:	f7ff fe02 	bl	8002600 <ReadRtcSsrValue>
 80029fc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <ReturnTimeElapsed+0x70>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d805      	bhi.n	8002a14 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002a08:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <ReturnTimeElapsed+0x70>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	e00a      	b.n	8002a2a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <ReturnTimeElapsed+0x74>)
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002a20:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <ReturnTimeElapsed+0x70>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <ReturnTimeElapsed+0x78>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <ReturnTimeElapsed+0x7c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	40d3      	lsrs	r3, r2
 8002a42:	607b      	str	r3, [r7, #4]
 8002a44:	e001      	b.n	8002a4a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	b29b      	uxth	r3, r3
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200002f4 	.word	0x200002f4
 8002a5c:	200002fc 	.word	0x200002fc
 8002a60:	200002fa 	.word	0x200002fa
 8002a64:	200002f9 	.word	0x200002f9

08002a68 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d108      	bne.n	8002a8a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002a78:	f7ff fdc2 	bl	8002600 <ReadRtcSsrValue>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4a21      	ldr	r2, [pc, #132]	; (8002b04 <RestartWakeupCounter+0x9c>)
 8002a80:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002a82:	2003      	movs	r0, #3
 8002a84:	f001 fccb 	bl	800441e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002a88:	e039      	b.n	8002afe <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d803      	bhi.n	8002a98 <RestartWakeupCounter+0x30>
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <RestartWakeupCounter+0xa0>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d002      	beq.n	8002a9e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002a9e:	bf00      	nop
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <RestartWakeupCounter+0xa4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f8      	beq.n	8002aa0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <RestartWakeupCounter+0xa4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <RestartWakeupCounter+0xa4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002abe:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <RestartWakeupCounter+0xa8>)
 8002ac2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ac6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002ac8:	2003      	movs	r0, #3
 8002aca:	f001 fcb6 	bl	800443a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <RestartWakeupCounter+0xac>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	490e      	ldr	r1, [pc, #56]	; (8002b14 <RestartWakeupCounter+0xac>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002ade:	f7ff fd8f 	bl	8002600 <ReadRtcSsrValue>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <RestartWakeupCounter+0x9c>)
 8002ae6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <RestartWakeupCounter+0xa4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <RestartWakeupCounter+0xa4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002af6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002af8:	f3af 8000 	nop.w
  return ;
 8002afc:	bf00      	nop
}
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200002f4 	.word	0x200002f4
 8002b08:	200002f9 	.word	0x200002f9
 8002b0c:	20000580 	.word	0x20000580
 8002b10:	58000800 	.word	0x58000800
 8002b14:	40002800 	.word	0x40002800

08002b18 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002b1e:	4b45      	ldr	r3, [pc, #276]	; (8002c34 <RescheduleTimerList+0x11c>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2a:	d107      	bne.n	8002b3c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002b2c:	bf00      	nop
 8002b2e:	4b42      	ldr	r3, [pc, #264]	; (8002c38 <RescheduleTimerList+0x120>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f8      	bne.n	8002b2e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002b3c:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <RescheduleTimerList+0x120>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <RescheduleTimerList+0x120>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <RescheduleTimerList+0x124>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	493a      	ldr	r1, [pc, #232]	; (8002c40 <RescheduleTimerList+0x128>)
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	3308      	adds	r3, #8
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002b66:	f7ff ff3f 	bl	80029e8 <ReturnTimeElapsed>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d205      	bcs.n	8002b82 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002b7a:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <RescheduleTimerList+0x12c>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e04d      	b.n	8002c1e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	4a30      	ldr	r2, [pc, #192]	; (8002c48 <RescheduleTimerList+0x130>)
 8002b86:	8812      	ldrh	r2, [r2, #0]
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d906      	bls.n	8002ba2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002b94:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <RescheduleTimerList+0x130>)
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002b9a:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <RescheduleTimerList+0x12c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e03d      	b.n	8002c1e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <RescheduleTimerList+0x12c>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002bb2:	e034      	b.n	8002c1e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	4922      	ldr	r1, [pc, #136]	; (8002c40 <RescheduleTimerList+0x128>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d20a      	bcs.n	8002be2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	491c      	ldr	r1, [pc, #112]	; (8002c40 <RescheduleTimerList+0x128>)
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	3308      	adds	r3, #8
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e013      	b.n	8002c0a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	4916      	ldr	r1, [pc, #88]	; (8002c40 <RescheduleTimerList+0x128>)
 8002be6:	4613      	mov	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	1ac9      	subs	r1, r1, r3
 8002bfa:	4811      	ldr	r0, [pc, #68]	; (8002c40 <RescheduleTimerList+0x128>)
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4403      	add	r3, r0
 8002c06:	3308      	adds	r3, #8
 8002c08:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	490c      	ldr	r1, [pc, #48]	; (8002c40 <RescheduleTimerList+0x128>)
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	3315      	adds	r3, #21
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b06      	cmp	r3, #6
 8002c22:	d1c7      	bne.n	8002bb4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002c24:	89bb      	ldrh	r3, [r7, #12]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ff1e 	bl	8002a68 <RestartWakeupCounter>

  return ;
 8002c2c:	bf00      	nop
}
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40002800 	.word	0x40002800
 8002c38:	20000580 	.word	0x20000580
 8002c3c:	200002f0 	.word	0x200002f0
 8002c40:	20000260 	.word	0x20000260
 8002c44:	200002f8 	.word	0x200002f8
 8002c48:	200002fe 	.word	0x200002fe

08002c4c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c52:	f3ef 8310 	mrs	r3, PRIMASK
 8002c56:	617b      	str	r3, [r7, #20]
  return(result);
 8002c58:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002c5c:	b672      	cpsid	i
}
 8002c5e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002c60:	4b59      	ldr	r3, [pc, #356]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	22ca      	movs	r2, #202	; 0xca
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
 8002c68:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2253      	movs	r2, #83	; 0x53
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002c70:	4b55      	ldr	r3, [pc, #340]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	4b54      	ldr	r3, [pc, #336]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002c80:	4b52      	ldr	r3, [pc, #328]	; (8002dcc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002c88:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c8c:	4950      	ldr	r1, [pc, #320]	; (8002dd0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	330c      	adds	r3, #12
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d16e      	bne.n	8002d80 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002ca2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002ca6:	494a      	ldr	r1, [pc, #296]	; (8002dd0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002cb6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002cba:	4945      	ldr	r1, [pc, #276]	; (8002dd0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3310      	adds	r3, #16
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002ccc:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d04c      	beq.n	8002d70 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002cd6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002cda:	493d      	ldr	r1, [pc, #244]	; (8002dd0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	330d      	adds	r3, #13
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d124      	bne.n	8002d3a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fdf2 	bl	80028e0 <UnlinkTimer>
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f383 8810 	msr	PRIMASK, r3
}
 8002d06:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002d08:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d0c:	4930      	ldr	r1, [pc, #192]	; (8002dd0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	3304      	adds	r3, #4
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fa32 	bl	800318c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	22ca      	movs	r2, #202	; 0xca
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2253      	movs	r2, #83	; 0x53
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24
 8002d38:	e012      	b.n	8002d60 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f383 8810 	msr	PRIMASK, r3
}
 8002d44:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f99a 	bl	8003084 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	22ca      	movs	r2, #202	; 0xca
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2253      	movs	r2, #83	; 0x53
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	4619      	mov	r1, r3
 8002d68:	69b8      	ldr	r0, [r7, #24]
 8002d6a:	f000 fa95 	bl	8003298 <HW_TS_RTC_Int_AppNot>
 8002d6e:	e022      	b.n	8002db6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002d70:	f7ff fed2 	bl	8002b18 <RescheduleTimerList>
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f383 8810 	msr	PRIMASK, r3
}
 8002d7e:	e01a      	b.n	8002db6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002d80:	bf00      	nop
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f8      	beq.n	8002d82 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002da0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002da4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f383 8810 	msr	PRIMASK, r3
}
 8002db4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	22ff      	movs	r2, #255	; 0xff
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002dbe:	bf00      	nop
}
 8002dc0:	3728      	adds	r7, #40	; 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000580 	.word	0x20000580
 8002dcc:	200002f0 	.word	0x200002f0
 8002dd0:	20000260 	.word	0x20000260
 8002dd4:	200002f8 	.word	0x200002f8
 8002dd8:	58000800 	.word	0x58000800

08002ddc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002de8:	4b5e      	ldr	r3, [pc, #376]	; (8002f64 <HW_TS_Init+0x188>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	22ca      	movs	r2, #202	; 0xca
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24
 8002df0:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <HW_TS_Init+0x188>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2253      	movs	r2, #83	; 0x53
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002df8:	4b5b      	ldr	r3, [pc, #364]	; (8002f68 <HW_TS_Init+0x18c>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4a5a      	ldr	r2, [pc, #360]	; (8002f68 <HW_TS_Init+0x18c>)
 8002dfe:	f043 0320 	orr.w	r3, r3, #32
 8002e02:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002e04:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <HW_TS_Init+0x18c>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f1c3 0304 	rsb	r3, r3, #4
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4b55      	ldr	r3, [pc, #340]	; (8002f6c <HW_TS_Init+0x190>)
 8002e18:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002e1a:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <HW_TS_Init+0x18c>)
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e22:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002e26:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	fa92 f2a2 	rbit	r2, r2
 8002e2e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	2a00      	cmp	r2, #0
 8002e38:	d101      	bne.n	8002e3e <HW_TS_Init+0x62>
  {
    return 32U;
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	e003      	b.n	8002e46 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	fab2 f282 	clz	r2, r2
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	40d3      	lsrs	r3, r2
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <HW_TS_Init+0x194>)
 8002e50:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002e52:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <HW_TS_Init+0x18c>)
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	4b44      	ldr	r3, [pc, #272]	; (8002f74 <HW_TS_Init+0x198>)
 8002e64:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002e66:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <HW_TS_Init+0x198>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	4a40      	ldr	r2, [pc, #256]	; (8002f70 <HW_TS_Init+0x194>)
 8002e6e:	7812      	ldrb	r2, [r2, #0]
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e78:	4a3c      	ldr	r2, [pc, #240]	; (8002f6c <HW_TS_Init+0x190>)
 8002e7a:	7812      	ldrb	r2, [r2, #0]
 8002e7c:	40d3      	lsrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d904      	bls.n	8002e94 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HW_TS_Init+0x19c>)
 8002e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e90:	801a      	strh	r2, [r3, #0]
 8002e92:	e003      	b.n	8002e9c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <HW_TS_Init+0x19c>)
 8002e9a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002e9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ea0:	f7ff fb9c 	bl	80025dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002ea4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ea8:	f7ff fb84 	bl	80025b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d13d      	bne.n	8002f2e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002eb2:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <HW_TS_Init+0x1a0>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002eb8:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <HW_TS_Init+0x1a4>)
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebe:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e00c      	b.n	8002ee0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002ec6:	7ffa      	ldrb	r2, [r7, #31]
 8002ec8:	492e      	ldr	r1, [pc, #184]	; (8002f84 <HW_TS_Init+0x1a8>)
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002eda:	7ffb      	ldrb	r3, [r7, #31]
 8002edc:	3301      	adds	r3, #1
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	7ffb      	ldrb	r3, [r7, #31]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	d9ef      	bls.n	8002ec6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002ee6:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <HW_TS_Init+0x1ac>)
 8002ee8:	2206      	movs	r2, #6
 8002eea:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HW_TS_Init+0x188>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HW_TS_Init+0x188>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HW_TS_Init+0x188>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <HW_TS_Init+0x188>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002f0c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002f0e:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <HW_TS_Init+0x1b0>)
 8002f10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f14:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002f16:	2003      	movs	r0, #3
 8002f18:	f001 fa8f 	bl	800443a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HW_TS_Init+0x188>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HW_TS_Init+0x188>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	e009      	b.n	8002f42 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HW_TS_Init+0x188>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002f3c:	2003      	movs	r0, #3
 8002f3e:	f001 fa6e 	bl	800441e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HW_TS_Init+0x188>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	22ff      	movs	r2, #255	; 0xff
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2103      	movs	r1, #3
 8002f4e:	2003      	movs	r0, #3
 8002f50:	f001 fa1f 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002f54:	2003      	movs	r0, #3
 8002f56:	f001 fa36 	bl	80043c6 <HAL_NVIC_EnableIRQ>

  return;
 8002f5a:	bf00      	nop
}
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000580 	.word	0x20000580
 8002f68:	40002800 	.word	0x40002800
 8002f6c:	200002f9 	.word	0x200002f9
 8002f70:	200002fa 	.word	0x200002fa
 8002f74:	200002fc 	.word	0x200002fc
 8002f78:	200002fe 	.word	0x200002fe
 8002f7c:	200002f8 	.word	0x200002f8
 8002f80:	200002f4 	.word	0x200002f4
 8002f84:	20000260 	.word	0x20000260
 8002f88:	200002f0 	.word	0x200002f0
 8002f8c:	58000800 	.word	0x58000800

08002f90 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b08b      	sub	sp, #44	; 0x2c
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8002faa:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fac:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002fae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb0:	b672      	cpsid	i
}
 8002fb2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002fb4:	e004      	b.n	8002fc0 <HW_TS_Create+0x30>
  {
    loop++;
 8002fb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d80c      	bhi.n	8002fe2 <HW_TS_Create+0x52>
 8002fc8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002fcc:	492c      	ldr	r1, [pc, #176]	; (8003080 <HW_TS_Create+0xf0>)
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	330c      	adds	r3, #12
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e9      	bne.n	8002fb6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002fe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	d038      	beq.n	800305c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002fea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002fee:	4924      	ldr	r1, [pc, #144]	; (8003080 <HW_TS_Create+0xf0>)
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	440b      	add	r3, r1
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f383 8810 	msr	PRIMASK, r3
}
 800300a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800300c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003010:	491b      	ldr	r1, [pc, #108]	; (8003080 <HW_TS_Create+0xf0>)
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	3310      	adds	r3, #16
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8003022:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003026:	4916      	ldr	r1, [pc, #88]	; (8003080 <HW_TS_Create+0xf0>)
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	330d      	adds	r3, #13
 8003034:	79fa      	ldrb	r2, [r7, #7]
 8003036:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8003038:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800303c:	4910      	ldr	r1, [pc, #64]	; (8003080 <HW_TS_Create+0xf0>)
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003052:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003054:	2300      	movs	r3, #0
 8003056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800305a:	e008      	b.n	800306e <HW_TS_Create+0xde>
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f383 8810 	msr	PRIMASK, r3
}
 8003066:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800306e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003072:	4618      	mov	r0, r3
 8003074:	372c      	adds	r7, #44	; 0x2c
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000260 	.word	0x20000260

08003084 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308e:	f3ef 8310 	mrs	r3, PRIMASK
 8003092:	60fb      	str	r3, [r7, #12]
  return(result);
 8003094:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003096:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003098:	b672      	cpsid	i
}
 800309a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800309c:	2003      	movs	r0, #3
 800309e:	f001 f9a0 	bl	80043e2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80030a2:	4b34      	ldr	r3, [pc, #208]	; (8003174 <HW_TS_Stop+0xf0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	22ca      	movs	r2, #202	; 0xca
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24
 80030aa:	4b32      	ldr	r3, [pc, #200]	; (8003174 <HW_TS_Stop+0xf0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2253      	movs	r2, #83	; 0x53
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80030b2:	79fa      	ldrb	r2, [r7, #7]
 80030b4:	4930      	ldr	r1, [pc, #192]	; (8003178 <HW_TS_Stop+0xf4>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	330c      	adds	r3, #12
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d142      	bne.n	8003150 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fc06 	bl	80028e0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <HW_TS_Stop+0xf8>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b06      	cmp	r3, #6
 80030de:	d12f      	bne.n	8003140 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HW_TS_Stop+0xfc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ec:	d107      	bne.n	80030fe <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80030ee:	bf00      	nop
 80030f0:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HW_TS_Stop+0xf0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f8      	bne.n	80030f0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HW_TS_Stop+0xf0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HW_TS_Stop+0xf0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800310e:	bf00      	nop
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HW_TS_Stop+0xf0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f8      	beq.n	8003110 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HW_TS_Stop+0xf0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HW_TS_Stop+0xf0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800312e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <HW_TS_Stop+0x100>)
 8003132:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003136:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003138:	2003      	movs	r0, #3
 800313a:	f001 f97e 	bl	800443a <HAL_NVIC_ClearPendingIRQ>
 800313e:	e007      	b.n	8003150 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <HW_TS_Stop+0x104>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	7cfa      	ldrb	r2, [r7, #19]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800314c:	f7ff fce4 	bl	8002b18 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HW_TS_Stop+0xf0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	22ff      	movs	r2, #255	; 0xff
 8003156:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003158:	2003      	movs	r0, #3
 800315a:	f001 f934 	bl	80043c6 <HAL_NVIC_EnableIRQ>
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f383 8810 	msr	PRIMASK, r3
}
 8003168:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800316a:	bf00      	nop
}
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000580 	.word	0x20000580
 8003178:	20000260 	.word	0x20000260
 800317c:	200002f0 	.word	0x200002f0
 8003180:	40002800 	.word	0x40002800
 8003184:	58000800 	.word	0x58000800
 8003188:	200002f1 	.word	0x200002f1

0800318c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003198:	79fa      	ldrb	r2, [r7, #7]
 800319a:	493b      	ldr	r1, [pc, #236]	; (8003288 <HW_TS_Start+0xfc>)
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	330c      	adds	r3, #12
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d103      	bne.n	80031b8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff66 	bl	8003084 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b8:	f3ef 8310 	mrs	r3, PRIMASK
 80031bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80031be:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80031c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80031c2:	b672      	cpsid	i
}
 80031c4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80031c6:	2003      	movs	r0, #3
 80031c8:	f001 f90b 	bl	80043e2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80031cc:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HW_TS_Start+0x100>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	22ca      	movs	r2, #202	; 0xca
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <HW_TS_Start+0x100>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2253      	movs	r2, #83	; 0x53
 80031da:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80031dc:	79fa      	ldrb	r2, [r7, #7]
 80031de:	492a      	ldr	r1, [pc, #168]	; (8003288 <HW_TS_Start+0xfc>)
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	330c      	adds	r3, #12
 80031ec:	2202      	movs	r2, #2
 80031ee:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80031f0:	79fa      	ldrb	r2, [r7, #7]
 80031f2:	4925      	ldr	r1, [pc, #148]	; (8003288 <HW_TS_Start+0xfc>)
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	440b      	add	r3, r1
 80031fe:	3308      	adds	r3, #8
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003204:	79fa      	ldrb	r2, [r7, #7]
 8003206:	4920      	ldr	r1, [pc, #128]	; (8003288 <HW_TS_Start+0xfc>)
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	3304      	adds	r3, #4
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fab6 	bl	800278c <linkTimer>
 8003220:	4603      	mov	r3, r0
 8003222:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HW_TS_Start+0x104>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800322a:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <HW_TS_Start+0x108>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	7c7a      	ldrb	r2, [r7, #17]
 8003232:	429a      	cmp	r2, r3
 8003234:	d002      	beq.n	800323c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8003236:	f7ff fc6f 	bl	8002b18 <RescheduleTimerList>
 800323a:	e013      	b.n	8003264 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800323c:	79fa      	ldrb	r2, [r7, #7]
 800323e:	4912      	ldr	r1, [pc, #72]	; (8003288 <HW_TS_Start+0xfc>)
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3308      	adds	r3, #8
 800324c:	6819      	ldr	r1, [r3, #0]
 800324e:	8a7b      	ldrh	r3, [r7, #18]
 8003250:	79fa      	ldrb	r2, [r7, #7]
 8003252:	1ac9      	subs	r1, r1, r3
 8003254:	480c      	ldr	r0, [pc, #48]	; (8003288 <HW_TS_Start+0xfc>)
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4403      	add	r3, r0
 8003260:	3308      	adds	r3, #8
 8003262:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <HW_TS_Start+0x100>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	22ff      	movs	r2, #255	; 0xff
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800326c:	2003      	movs	r0, #3
 800326e:	f001 f8aa 	bl	80043c6 <HAL_NVIC_EnableIRQ>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f383 8810 	msr	PRIMASK, r3
}
 800327c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800327e:	bf00      	nop
}
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000260 	.word	0x20000260
 800328c:	20000580 	.word	0x20000580
 8003290:	200002f0 	.word	0x200002f0
 8003294:	200002f1 	.word	0x200002f1

08003298 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	460b      	mov	r3, r1
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4798      	blx	r3

  return;
 80032aa:	bf00      	nop
}
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HW_UART_Transmit_IT>:

    return;
}

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	4603      	mov	r3, r0
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	4613      	mov	r3, r2
 80032c4:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HW_UART_Transmit_IT+0x1e>
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d00d      	beq.n	80032ec <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80032d0:	e019      	b.n	8003306 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 80032d2:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <HW_UART_Transmit_IT+0x5c>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HW_UART_Transmit_IT+0x60>)
 80032da:	4a0f      	ldr	r2, [pc, #60]	; (8003318 <HW_UART_Transmit_IT+0x64>)
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	89bb      	ldrh	r3, [r7, #12]
 80032e0:	461a      	mov	r2, r3
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	480b      	ldr	r0, [pc, #44]	; (8003314 <HW_UART_Transmit_IT+0x60>)
 80032e6:	f004 faad 	bl	8007844 <HAL_UART_Transmit_IT>
            break;
 80032ea:	e00c      	b.n	8003306 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 80032ec:	4a0b      	ldr	r2, [pc, #44]	; (800331c <HW_UART_Transmit_IT+0x68>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HW_UART_Transmit_IT+0x6c>)
 80032f4:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <HW_UART_Transmit_IT+0x70>)
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	89bb      	ldrh	r3, [r7, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	4808      	ldr	r0, [pc, #32]	; (8003320 <HW_UART_Transmit_IT+0x6c>)
 8003300:	f004 faa0 	bl	8007844 <HAL_UART_Transmit_IT>
            break;
 8003304:	bf00      	nop
    }

    return;
 8003306:	bf00      	nop
}
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000300 	.word	0x20000300
 8003314:	200003d8 	.word	0x200003d8
 8003318:	40013800 	.word	0x40013800
 800331c:	20000304 	.word	0x20000304
 8003320:	20000344 	.word	0x20000344
 8003324:	40008000 	.word	0x40008000

08003328 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0f      	ldr	r2, [pc, #60]	; (8003374 <HAL_UART_TxCpltCallback+0x4c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00a      	beq.n	8003350 <HAL_UART_TxCpltCallback+0x28>
 800333a:	4a0f      	ldr	r2, [pc, #60]	; (8003378 <HAL_UART_TxCpltCallback+0x50>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d10f      	bne.n	8003360 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_UART_TxCpltCallback+0x54>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00d      	beq.n	8003364 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_UART_TxCpltCallback+0x54>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4798      	blx	r3
            }
            break;
 800334e:	e009      	b.n	8003364 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_UART_TxCpltCallback+0x58>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_UART_TxCpltCallback+0x58>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4798      	blx	r3
            }
            break;
 800335e:	e003      	b.n	8003368 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8003360:	bf00      	nop
 8003362:	e002      	b.n	800336a <HAL_UART_TxCpltCallback+0x42>
            break;
 8003364:	bf00      	nop
 8003366:	e000      	b.n	800336a <HAL_UART_TxCpltCallback+0x42>
            break;
 8003368:	bf00      	nop
    }

    return;
 800336a:	bf00      	nop
}
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40008000 	.word	0x40008000
 8003378:	40013800 	.word	0x40013800
 800337c:	20000300 	.word	0x20000300
 8003380:	20000304 	.word	0x20000304

08003384 <LL_RCC_LSE_SetDriveCapability>:
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f023 0218 	bic.w	r2, r3, #24
 8003398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_AHB1_GRP1_EnableClock>:
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4013      	ands	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033d4:	68fb      	ldr	r3, [r7, #12]
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_AHB2_GRP1_EnableClock>:
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80033fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4013      	ands	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003406:	68fb      	ldr	r3, [r7, #12]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_APB1_GRP1_EnableClock>:
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003420:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4313      	orrs	r3, r2
 800342a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800342c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003430:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003438:	68fb      	ldr	r3, [r7, #12]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <main>:
SensorData_t sensor_data;
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800344c:	f000 fd9e 	bl	8003f8c <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 8003450:	f7fe fef4 	bl	800223c <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003454:	f000 f834 	bl	80034c0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8003458:	f000 f88e 	bl	8003578 <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 800345c:	f000 f8ac 	bl	80035b8 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003460:	f000 f972 	bl	8003748 <MX_GPIO_Init>
	MX_DMA_Init();
 8003464:	f000 f956 	bl	8003714 <MX_DMA_Init>
	MX_RF_Init();
 8003468:	f000 f918 	bl	800369c <MX_RF_Init>
	MX_RTC_Init();
 800346c:	f000 f91e 	bl	80036ac <MX_RTC_Init>
	MX_I2C1_Init();
 8003470:	f000 f8b6 	bl	80035e0 <MX_I2C1_Init>

	/*--[ Scanning Done ]--*/
	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 8003474:	f7fe fef0 	bl	8002258 <MX_APPE_Init>


	sensirion_i2c_init(&hi2c1);
 8003478:	480d      	ldr	r0, [pc, #52]	; (80034b0 <main+0x68>)
 800347a:	f7fc ffe5 	bl	8000448 <sensirion_i2c_init>

	sht4x_enable_low_power_mode(1);
 800347e:	2001      	movs	r0, #1
 8003480:	f7fd f8c8 	bl	8000614 <sht4x_enable_low_power_mode>
	platform_stts22h_init(&hi2c1);
 8003484:	480a      	ldr	r0, [pc, #40]	; (80034b0 <main+0x68>)
 8003486:	f7fd f8e7 	bl	8000658 <platform_stts22h_init>
	stts22h_temp_data_rate_set(0x01);
 800348a:	2001      	movs	r0, #1
 800348c:	f7fd f976 	bl	800077c <stts22h_temp_data_rate_set>
	sht4x_measure_blocking_read(&sensor_data.temp_main, &sensor_data.humidity);
 8003490:	4908      	ldr	r1, [pc, #32]	; (80034b4 <main+0x6c>)
 8003492:	4809      	ldr	r0, [pc, #36]	; (80034b8 <main+0x70>)
 8003494:	f7fd f864 	bl	8000560 <sht4x_measure_blocking_read>
	stts22h_temperature_raw_get(&sensor_data.temp_aux);
 8003498:	4808      	ldr	r0, [pc, #32]	; (80034bc <main+0x74>)
 800349a:	f7fd fa34 	bl	8000906 <stts22h_temperature_raw_get>
	app_algo_init(sensor_data);
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <main+0x6c>)
 80034a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034a4:	f7fe fd5c 	bl	8001f60 <app_algo_init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		MX_APPE_Process();
 80034a8:	f7fe fffd 	bl	80024a6 <MX_APPE_Process>
 80034ac:	e7fc      	b.n	80034a8 <main+0x60>
 80034ae:	bf00      	nop
 80034b0:	2000052c 	.word	0x2000052c
 80034b4:	200005a4 	.word	0x200005a4
 80034b8:	200005a8 	.word	0x200005a8
 80034bc:	200005ac 	.word	0x200005ac

080034c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b09a      	sub	sp, #104	; 0x68
 80034c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034c6:	f107 0320 	add.w	r3, r7, #32
 80034ca:	2248      	movs	r2, #72	; 0x48
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f007 fd50 	bl	800af74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	60da      	str	r2, [r3, #12]
 80034e0:	611a      	str	r2, [r3, #16]
 80034e2:	615a      	str	r2, [r3, #20]
 80034e4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80034e6:	f002 f9eb 	bl	80058c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7ff ff4a 	bl	8003384 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034f0:	4b20      	ldr	r3, [pc, #128]	; (8003574 <SystemClock_Config+0xb4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034f8:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <SystemClock_Config+0xb4>)
 80034fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <SystemClock_Config+0xb4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800350c:	2307      	movs	r3, #7
 800350e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003516:	2301      	movs	r3, #1
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800351a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003520:	2340      	movs	r3, #64	; 0x40
 8003522:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003524:	2300      	movs	r3, #0
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003528:	f107 0320 	add.w	r3, r7, #32
 800352c:	4618      	mov	r0, r3
 800352e:	f002 fdc1 	bl	80060b4 <HAL_RCC_OscConfig>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003538:	f000 f930 	bl	800379c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800353c:	236f      	movs	r3, #111	; 0x6f
 800353e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003540:	2302      	movs	r3, #2
 8003542:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	2101      	movs	r1, #1
 800355c:	4618      	mov	r0, r3
 800355e:	f003 f91d 	bl	800679c <HAL_RCC_ClockConfig>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003568:	f000 f918 	bl	800379c <Error_Handler>
  }
}
 800356c:	bf00      	nop
 800356e:	3768      	adds	r7, #104	; 0x68
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	58000400 	.word	0x58000400

08003578 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b094      	sub	sp, #80	; 0x50
 800357c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800357e:	463b      	mov	r3, r7
 8003580:	2250      	movs	r2, #80	; 0x50
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f007 fcf5 	bl	800af74 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800358a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800358e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003590:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003594:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003596:	2302      	movs	r3, #2
 8003598:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800359a:	2300      	movs	r3, #0
 800359c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800359e:	463b      	mov	r3, r7
 80035a0:	4618      	mov	r0, r3
 80035a2:	f003 fd0c 	bl	8006fbe <HAL_RCCEx_PeriphCLKConfig>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80035ac:	f000 f8f6 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80035b0:	bf00      	nop
 80035b2:	3750      	adds	r7, #80	; 0x50
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <MX_IPCC_Init+0x20>)
 80035be:	4a07      	ldr	r2, [pc, #28]	; (80035dc <MX_IPCC_Init+0x24>)
 80035c0:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 80035c2:	4805      	ldr	r0, [pc, #20]	; (80035d8 <MX_IPCC_Init+0x20>)
 80035c4:	f002 f8f6 	bl	80057b4 <HAL_IPCC_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_IPCC_Init+0x1a>
		Error_Handler();
 80035ce:	f000 f8e5 	bl	800379c <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000308 	.word	0x20000308
 80035dc:	58000c00 	.word	0x58000c00

080035e0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	// Configure PB8 and PB9 as alternate function pins
	__HAL_RCC_I2C1_CLK_ENABLE();
 80035e6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80035ea:	f7ff ff13 	bl	8003414 <LL_APB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80035ee:	2002      	movs	r0, #2
 80035f0:	f7ff fef7 	bl	80033e2 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef gpio_init;
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80035f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035f8:	607b      	str	r3, [r7, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 80035fa:	2312      	movs	r3, #18
 80035fc:	60bb      	str	r3, [r7, #8]
	gpio_init.Pull = GPIO_PULLUP;
 80035fe:	2301      	movs	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003602:	2303      	movs	r3, #3
 8003604:	613b      	str	r3, [r7, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 8003606:	2304      	movs	r3, #4
 8003608:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &gpio_init);
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4820      	ldr	r0, [pc, #128]	; (8003690 <MX_I2C1_Init+0xb0>)
 8003610:	f001 f94c 	bl	80048ac <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 8003614:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <MX_I2C1_Init+0xb4>)
 8003616:	4a20      	ldr	r2, [pc, #128]	; (8003698 <MX_I2C1_Init+0xb8>)
 8003618:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 800361a:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <MX_I2C1_Init+0xb4>)
 800361c:	f640 6214 	movw	r2, #3604	; 0xe14
 8003620:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0x00;
 8003622:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <MX_I2C1_Init+0xb4>)
 8003624:	2200      	movs	r2, #0
 8003626:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003628:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <MX_I2C1_Init+0xb4>)
 800362a:	2201      	movs	r2, #1
 800362c:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800362e:	4b19      	ldr	r3, [pc, #100]	; (8003694 <MX_I2C1_Init+0xb4>)
 8003630:	2200      	movs	r2, #0
 8003632:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <MX_I2C1_Init+0xb4>)
 8003636:	2200      	movs	r2, #0
 8003638:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800363a:	4b16      	ldr	r3, [pc, #88]	; (8003694 <MX_I2C1_Init+0xb4>)
 800363c:	2200      	movs	r2, #0
 800363e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003640:	4b14      	ldr	r3, [pc, #80]	; (8003694 <MX_I2C1_Init+0xb4>)
 8003642:	2200      	movs	r2, #0
 8003644:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <MX_I2C1_Init+0xb4>)
 8003648:	2200      	movs	r2, #0
 800364a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800364c:	4811      	ldr	r0, [pc, #68]	; (8003694 <MX_I2C1_Init+0xb4>)
 800364e:	f001 fb0b 	bl	8004c68 <HAL_I2C_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <MX_I2C1_Init+0x7c>
		Error_Handler();
 8003658:	f000 f8a0 	bl	800379c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800365c:	2100      	movs	r1, #0
 800365e:	480d      	ldr	r0, [pc, #52]	; (8003694 <MX_I2C1_Init+0xb4>)
 8003660:	f001 fffe 	bl	8005660 <HAL_I2CEx_ConfigAnalogFilter>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_I2C1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 800366a:	f000 f897 	bl	800379c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800366e:	2100      	movs	r1, #0
 8003670:	4808      	ldr	r0, [pc, #32]	; (8003694 <MX_I2C1_Init+0xb4>)
 8003672:	f002 f840 	bl	80056f6 <HAL_I2CEx_ConfigDigitalFilter>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_I2C1_Init+0xa0>
		Error_Handler();
 800367c:	f000 f88e 	bl	800379c <Error_Handler>
	}
	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003680:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003684:	f002 f884 	bl	8005790 <HAL_I2CEx_EnableFastModePlus>
}
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	48000400 	.word	0x48000400
 8003694:	2000052c 	.word	0x2000052c
 8003698:	40005400 	.word	0x40005400

0800369c <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80036b0:	4b16      	ldr	r3, [pc, #88]	; (800370c <MX_RTC_Init+0x60>)
 80036b2:	4a17      	ldr	r2, [pc, #92]	; (8003710 <MX_RTC_Init+0x64>)
 80036b4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <MX_RTC_Init+0x60>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <MX_RTC_Init+0x60>)
 80036be:	220f      	movs	r2, #15
 80036c0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <MX_RTC_Init+0x60>)
 80036c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80036c8:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <MX_RTC_Init+0x60>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <MX_RTC_Init+0x60>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <MX_RTC_Init+0x60>)
 80036d8:	2200      	movs	r2, #0
 80036da:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <MX_RTC_Init+0x60>)
 80036de:	2200      	movs	r2, #0
 80036e0:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80036e2:	480a      	ldr	r0, [pc, #40]	; (800370c <MX_RTC_Init+0x60>)
 80036e4:	f003 fef2 	bl	80074cc <HAL_RTC_Init>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_RTC_Init+0x46>
		Error_Handler();
 80036ee:	f000 f855 	bl	800379c <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 80036f2:	2200      	movs	r2, #0
 80036f4:	2100      	movs	r1, #0
 80036f6:	4805      	ldr	r0, [pc, #20]	; (800370c <MX_RTC_Init+0x60>)
 80036f8:	f003 ffe8 	bl	80076cc <HAL_RTCEx_SetWakeUpTimer_IT>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8003702:	f000 f84b 	bl	800379c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000580 	.word	0x20000580
 8003710:	40002800 	.word	0x40002800

08003714 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003718:	2004      	movs	r0, #4
 800371a:	f7ff fe49 	bl	80033b0 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 800371e:	2001      	movs	r0, #1
 8003720:	f7ff fe46 	bl	80033b0 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003724:	2200      	movs	r2, #0
 8003726:	2100      	movs	r1, #0
 8003728:	200b      	movs	r0, #11
 800372a:	f000 fe32 	bl	8004392 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800372e:	200b      	movs	r0, #11
 8003730:	f000 fe49 	bl	80043c6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003734:	2200      	movs	r2, #0
 8003736:	2100      	movs	r1, #0
 8003738:	200c      	movs	r0, #12
 800373a:	f000 fe2a 	bl	8004392 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800373e:	200c      	movs	r0, #12
 8003740:	f000 fe41 	bl	80043c6 <HAL_NVIC_EnableIRQ>

}
 8003744:	bf00      	nop
 8003746:	bd80      	pop	{r7, pc}

08003748 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800374e:	2004      	movs	r0, #4
 8003750:	f7ff fe47 	bl	80033e2 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003754:	2001      	movs	r0, #1
 8003756:	f7ff fe44 	bl	80033e2 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800375a:	2002      	movs	r0, #2
 800375c:	f7ff fe41 	bl	80033e2 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	609a      	str	r2, [r3, #8]
 800376a:	60da      	str	r2, [r3, #12]
 800376c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800376e:	2303      	movs	r3, #3
 8003770:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003772:	2301      	movs	r3, #1
 8003774:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4805      	ldr	r0, [pc, #20]	; (8003798 <MX_GPIO_Init+0x50>)
 8003784:	f001 f892 	bl	80048ac <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003788:	2102      	movs	r1, #2
 800378a:	4803      	ldr	r0, [pc, #12]	; (8003798 <MX_GPIO_Init+0x50>)
 800378c:	f001 fa16 	bl	8004bbc <HAL_GPIO_TogglePin>

}
 8003790:	bf00      	nop
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	48000800 	.word	0x48000800

0800379c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <LL_PWR_SetPowerMode>:
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <LL_PWR_SetPowerMode+0x24>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f023 0207 	bic.w	r2, r3, #7
 80037bc:	4904      	ldr	r1, [pc, #16]	; (80037d0 <LL_PWR_SetPowerMode+0x24>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	58000400 	.word	0x58000400

080037d4 <LL_C2_PWR_SetPowerMode>:
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <LL_C2_PWR_SetPowerMode+0x28>)
 80037de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037e2:	f023 0207 	bic.w	r2, r3, #7
 80037e6:	4905      	ldr	r1, [pc, #20]	; (80037fc <LL_C2_PWR_SetPowerMode+0x28>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	58000400 	.word	0x58000400

08003800 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <LL_PWR_ClearFlag_WU+0x14>)
 8003806:	221f      	movs	r2, #31
 8003808:	619a      	str	r2, [r3, #24]
}
 800380a:	bf00      	nop
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	58000400 	.word	0x58000400

08003818 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 800381c:	4b07      	ldr	r3, [pc, #28]	; (800383c <LL_PWR_IsActiveFlag_C2SB+0x24>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382a:	d101      	bne.n	8003830 <LL_PWR_IsActiveFlag_C2SB+0x18>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	58000400 	.word	0x58000400

08003840 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800384e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003852:	d101      	bne.n	8003858 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	58000400 	.word	0x58000400

08003868 <LL_RCC_HSE_Enable>:
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800386c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <LL_RCC_HSE_IsReady>:
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800388a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003898:	d101      	bne.n	800389e <LL_RCC_HSE_IsReady+0x18>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <LL_RCC_HSE_IsReady+0x1a>
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <LL_RCC_HSI_Enable>:
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80038ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]
}
 80038be:	bf00      	nop
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <LL_RCC_HSI_IsReady>:
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80038cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038da:	d101      	bne.n	80038e0 <LL_RCC_HSI_IsReady+0x18>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <LL_RCC_HSI_IsReady+0x1a>
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_RCC_SetSysClkSource>:
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80038f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f023 0203 	bic.w	r2, r3, #3
 80038fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_RCC_GetSysClkSource>:
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4313      	orrs	r3, r2
 8003946:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_LPM_EnableSleep>:
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <LL_LPM_EnableSleep+0x1c>)
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <LL_LPM_EnableSleep+0x1c>)
 800395e:	f023 0304 	bic.w	r3, r3, #4
 8003962:	6113      	str	r3, [r2, #16]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <LL_LPM_EnableDeepSleep+0x1c>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	4a04      	ldr	r2, [pc, #16]	; (8003990 <LL_LPM_EnableDeepSleep+0x1c>)
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	6113      	str	r3, [r2, #16]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	3220      	adds	r2, #32
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <LL_HSEM_1StepLock+0x2c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d001      	beq.n	80039b2 <LL_HSEM_1StepLock+0x1e>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <LL_HSEM_1StepLock+0x20>
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	80000400 	.word	0x80000400

080039c4 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 80039ee:	f000 fb5f 	bl	80040b0 <HAL_SuspendTick>

  EnterLowPower();
 80039f2:	f000 f839 	bl	8003a68 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 80039f6:	f7ff ff03 	bl	8003800 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 80039fa:	2003      	movs	r0, #3
 80039fc:	f7ff fed6 	bl	80037ac <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8003a00:	f7ff ffb8 	bl	8003974 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8003a04:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8003a06:	bf00      	nop
}
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 8003a0e:	f000 fb5f 	bl	80040d0 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8003a12:	bf00      	nop
}
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8003a1a:	f000 fb49 	bl	80040b0 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8003a1e:	f000 f823 	bl	8003a68 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/

  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 8003a22:	2002      	movs	r0, #2
 8003a24:	f7ff fec2 	bl	80037ac <LL_PWR_SetPowerMode>

  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8003a28:	2004      	movs	r0, #4
 8003a2a:	f7ff fed3 	bl	80037d4 <LL_C2_PWR_SetPowerMode>
  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8003a2e:	f7ff ffa1 	bl	8003974 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8003a32:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8003a34:	bf00      	nop
}
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8003a3c:	f000 f850 	bl	8003ae0 <ExitLowPower>

  HAL_ResumeTick();
 8003a40:	f000 fb46 	bl	80040d0 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8003a44:	bf00      	nop
}
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8003a4c:	f000 fb30 	bl	80040b0 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8003a50:	f7ff ff80 	bl	8003954 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8003a54:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8003a56:	bf00      	nop
}
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8003a5e:	f000 fb37 	bl	80040d0 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8003a62:	bf00      	nop
}
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8003a6c:	bf00      	nop
 8003a6e:	2103      	movs	r1, #3
 8003a70:	4819      	ldr	r0, [pc, #100]	; (8003ad8 <EnterLowPower+0x70>)
 8003a72:	f7ff ff8f 	bl	8003994 <LL_HSEM_1StepLock>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f8      	bne.n	8003a6e <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	4816      	ldr	r0, [pc, #88]	; (8003ad8 <EnterLowPower+0x70>)
 8003a80:	f7ff ff88 	bl	8003994 <LL_HSEM_1StepLock>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d117      	bne.n	8003aba <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8003a8a:	f7ff fed9 	bl	8003840 <LL_PWR_IsActiveFlag_C2DS>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d104      	bne.n	8003a9e <EnterLowPower+0x36>
 8003a94:	f7ff fec0 	bl	8003818 <LL_PWR_IsActiveFlag_C2SB>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d015      	beq.n	8003aca <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2104      	movs	r1, #4
 8003aa2:	480d      	ldr	r0, [pc, #52]	; (8003ad8 <EnterLowPower+0x70>)
 8003aa4:	f7ff ff8e 	bl	80039c4 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8003aa8:	f000 f852 	bl	8003b50 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <EnterLowPower+0x74>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <EnterLowPower+0x74>)
 8003ab2:	f023 0307 	bic.w	r3, r3, #7
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	e007      	b.n	8003aca <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8003aba:	f000 f849 	bl	8003b50 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <EnterLowPower+0x74>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a06      	ldr	r2, [pc, #24]	; (8003adc <EnterLowPower+0x74>)
 8003ac4:	f023 0307 	bic.w	r3, r3, #7
 8003ac8:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2103      	movs	r1, #3
 8003ace:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <EnterLowPower+0x70>)
 8003ad0:	f7ff ff78 	bl	80039c4 <LL_HSEM_ReleaseLock>

  return;
 8003ad4:	bf00      	nop
}
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	58001400 	.word	0x58001400
 8003adc:	58004000 	.word	0x58004000

08003ae0 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2104      	movs	r1, #4
 8003ae8:	4817      	ldr	r0, [pc, #92]	; (8003b48 <ExitLowPower+0x68>)
 8003aea:	f7ff ff6b 	bl	80039c4 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8003aee:	bf00      	nop
 8003af0:	2103      	movs	r1, #3
 8003af2:	4815      	ldr	r0, [pc, #84]	; (8003b48 <ExitLowPower+0x68>)
 8003af4:	f7ff ff4e 	bl	8003994 <LL_HSEM_1StepLock>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f8      	bne.n	8003af0 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003afe:	f7ff ff09 	bl	8003914 <LL_RCC_GetSysClkSource>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d118      	bne.n	8003b3a <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 8003b08:	f7ff feae 	bl	8003868 <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <ExitLowPower+0x6c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 0307 	bic.w	r3, r3, #7
 8003b14:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <ExitLowPower+0x6c>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 8003b1c:	bf00      	nop
 8003b1e:	f7ff feb2 	bl	8003886 <LL_RCC_HSE_IsReady>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0fa      	beq.n	8003b1e <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8003b28:	2002      	movs	r0, #2
 8003b2a:	f7ff fedf 	bl	80038ec <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8003b2e:	bf00      	nop
 8003b30:	f7ff fef0 	bl	8003914 <LL_RCC_GetSysClkSource>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d1fa      	bne.n	8003b30 <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2103      	movs	r1, #3
 8003b3e:	4802      	ldr	r0, [pc, #8]	; (8003b48 <ExitLowPower+0x68>)
 8003b40:	f7ff ff40 	bl	80039c4 <LL_HSEM_ReleaseLock>

  return;
 8003b44:	bf00      	nop
}
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	58001400 	.word	0x58001400
 8003b4c:	58004000 	.word	0x58004000

08003b50 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8003b54:	f7ff fea9 	bl	80038aa <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8003b58:	bf00      	nop
 8003b5a:	f7ff feb5 	bl	80038c8 <LL_RCC_HSI_IsReady>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0fa      	beq.n	8003b5a <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003b64:	2001      	movs	r0, #1
 8003b66:	f7ff fec1 	bl	80038ec <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7ff fede 	bl	800392c <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8003b70:	bf00      	nop
 8003b72:	f7ff fecf 	bl	8003914 <LL_RCC_GetSysClkSource>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d1fa      	bne.n	8003b72 <Switch_On_HSI+0x22>
  return;
 8003b7c:	bf00      	nop
}
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <LL_AHB3_GRP1_EnableClock>:
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <LL_APB1_GRP1_EnableClock>:
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c24:	68fb      	ldr	r3, [r7, #12]
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003c36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003c3a:	f7ff ffc8 	bl	8003bce <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2100      	movs	r1, #0
 8003c42:	2001      	movs	r0, #1
 8003c44:	f000 fba5 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f000 fbbc 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2100      	movs	r1, #0
 8003c52:	2004      	movs	r0, #4
 8003c54:	f000 fb9d 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003c58:	2004      	movs	r0, #4
 8003c5a:	f000 fbb4 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2100      	movs	r1, #0
 8003c62:	2005      	movs	r0, #5
 8003c64:	f000 fb95 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003c68:	2005      	movs	r0, #5
 8003c6a:	f000 fbac 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	2015      	movs	r0, #21
 8003c74:	f000 fb8d 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8003c78:	2015      	movs	r0, #21
 8003c7a:	f000 fba4 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2100      	movs	r1, #0
 8003c82:	202b      	movs	r0, #43	; 0x2b
 8003c84:	f000 fb85 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8003c88:	202b      	movs	r0, #43	; 0x2b
 8003c8a:	f000 fb9c 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2100      	movs	r1, #0
 8003c92:	202e      	movs	r0, #46	; 0x2e
 8003c94:	f000 fb7d 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003c98:	202e      	movs	r0, #46	; 0x2e
 8003c9a:	f000 fb94 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	2036      	movs	r0, #54	; 0x36
 8003ca4:	f000 fb75 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003ca8:	2036      	movs	r0, #54	; 0x36
 8003caa:	f000 fb8c 	bl	80043c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0d      	ldr	r2, [pc, #52]	; (8003cf8 <HAL_IPCC_MspInit+0x44>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d113      	bne.n	8003cee <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003cc6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003cca:	f7ff ff80 	bl	8003bce <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	202c      	movs	r0, #44	; 0x2c
 8003cd4:	f000 fb5d 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003cd8:	202c      	movs	r0, #44	; 0x2c
 8003cda:	f000 fb74 	bl	80043c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	202d      	movs	r0, #45	; 0x2d
 8003ce4:	f000 fb55 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003ce8:	202d      	movs	r0, #45	; 0x2d
 8003cea:	f000 fb6c 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	58000c00 	.word	0x58000c00

08003cfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b096      	sub	sp, #88	; 0x58
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d04:	f107 0308 	add.w	r3, r7, #8
 8003d08:	2250      	movs	r2, #80	; 0x50
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f007 f931 	bl	800af74 <memset>
  if(hrtc->Instance==RTC)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a19      	ldr	r2, [pc, #100]	; (8003d7c <HAL_RTC_MspInit+0x80>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d12b      	bne.n	8003d74 <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003d1c:	f001 fdd0 	bl	80058c0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8003d20:	f001 fdce 	bl	80058c0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 8003d24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d28:	f7ff ff2a 	bl	8003b80 <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d30:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d36:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d38:	f107 0308 	add.w	r3, r7, #8
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f003 f93e 	bl	8006fbe <HAL_RCCEx_PeriphCLKConfig>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8003d48:	f7ff fd28 	bl	800379c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d4c:	f7ff ff2e 	bl	8003bac <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003d50:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d54:	f7ff ff54 	bl	8003c00 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	2003      	movs	r0, #3
 8003d5e:	f000 fb18 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003d62:	2003      	movs	r0, #3
 8003d64:	f000 fb2f 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <HAL_RTC_MspInit+0x80>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a03      	ldr	r2, [pc, #12]	; (8003d7c <HAL_RTC_MspInit+0x80>)
 8003d6e:	f023 0307 	bic.w	r3, r3, #7
 8003d72:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d74:	bf00      	nop
 8003d76:	3758      	adds	r7, #88	; 0x58
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40002800 	.word	0x40002800

08003d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d84:	bf00      	nop
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d92:	e7fe      	b.n	8003d92 <HardFault_Handler+0x4>

08003d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d98:	e7fe      	b.n	8003d98 <MemManage_Handler+0x4>

08003d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d9e:	e7fe      	b.n	8003d9e <BusFault_Handler+0x4>

08003da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003da4:	e7fe      	b.n	8003da4 <UsageFault_Handler+0x4>

08003da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003da6:	b480      	push	{r7}
 8003da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dd4:	f000 f934 	bl	8004040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dd8:	bf00      	nop
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003de0:	f001 fdd4 	bl	800598c <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003dec:	f7fe ff2e 	bl	8002c4c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003df8:	f000 fc9a 	bl	8004730 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003dfc:	bf00      	nop
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <DMA1_Channel1_IRQHandler+0x10>)
 8003e16:	f000 fbdc 	bl	80045d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	2000046c 	.word	0x2000046c

08003e24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <DMA1_Channel2_IRQHandler+0x10>)
 8003e2a:	f000 fbd2 	bl	80045d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200004cc 	.word	0x200004cc

08003e38 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e4c:	4802      	ldr	r0, [pc, #8]	; (8003e58 <USART1_IRQHandler+0x10>)
 8003e4e:	f003 fd8d 	bl	800796c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200003d8 	.word	0x200003d8

08003e5c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003e60:	4802      	ldr	r0, [pc, #8]	; (8003e6c <LPUART1_IRQHandler+0x10>)
 8003e62:	f003 fd83 	bl	800796c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000344 	.word	0x20000344

08003e70 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003e82:	f7fd fe07 	bl	8001a94 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003e8e:	f7fd fe5b 	bl	8001b48 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003e9a:	f000 fec1 	bl	8004c20 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 8003eb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003eb8:	f000 fe9a 	bl	8004bf0 <HAL_GPIO_EXTI_IRQHandler>
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8003ec0:	b40c      	push	{r2, r3}
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	460a      	mov	r2, r1
 8003ecc:	71fb      	strb	r3, [r7, #7]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	b002      	add	sp, #8
 8003ede:	4770      	bx	lr

08003ee0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003ee4:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <SystemInit+0xa0>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <SystemInit+0xa0>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <SystemInit+0xa0>)
 8003ef2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003f12:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f1e:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <SystemInit+0xa4>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f30:	f023 0305 	bic.w	r3, r3, #5
 8003f34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f50:	4a0d      	ldr	r2, [pc, #52]	; (8003f88 <SystemInit+0xa8>)
 8003f52:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f58:	4a0b      	ldr	r2, [pc, #44]	; (8003f88 <SystemInit+0xa8>)
 8003f5a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f70:	2200      	movs	r2, #0
 8003f72:	619a      	str	r2, [r3, #24]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000ed00 	.word	0xe000ed00
 8003f84:	faf6fefb 	.word	0xfaf6fefb
 8003f88:	22041000 	.word	0x22041000

08003f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_Init+0x3c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a0b      	ldr	r2, [pc, #44]	; (8003fc8 <HAL_Init+0x3c>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa2:	2003      	movs	r0, #3
 8003fa4:	f000 f9ea 	bl	800437c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f000 f80f 	bl	8003fcc <HAL_InitTick>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	71fb      	strb	r3, [r7, #7]
 8003fb8:	e001      	b.n	8003fbe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fba:	f7ff fe3a 	bl	8003c32 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	58004000 	.word	0x58004000

08003fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003fd8:	4b17      	ldr	r3, [pc, #92]	; (8004038 <HAL_InitTick+0x6c>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d024      	beq.n	800402a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003fe0:	f002 fd88 	bl	8006af4 <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b14      	ldr	r3, [pc, #80]	; (8004038 <HAL_InitTick+0x6c>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	4619      	mov	r1, r3
 8003fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fa04 	bl	8004406 <HAL_SYSTICK_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10f      	bne.n	8004024 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	d809      	bhi.n	800401e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800400a:	2200      	movs	r2, #0
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	f04f 30ff 	mov.w	r0, #4294967295
 8004012:	f000 f9be 	bl	8004392 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004016:	4a09      	ldr	r2, [pc, #36]	; (800403c <HAL_InitTick+0x70>)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	e007      	b.n	800402e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	73fb      	strb	r3, [r7, #15]
 8004022:	e004      	b.n	800402e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
 8004028:	e001      	b.n	800402e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000034 	.word	0x20000034
 800403c:	20000030 	.word	0x20000030

08004040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_IncTick+0x20>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_IncTick+0x24>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4413      	add	r3, r2
 8004050:	4a04      	ldr	r2, [pc, #16]	; (8004064 <HAL_IncTick+0x24>)
 8004052:	6013      	str	r3, [r2, #0]
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20000034 	.word	0x20000034
 8004064:	200005b0 	.word	0x200005b0

08004068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return uwTick;
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_GetTick+0x14>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	200005b0 	.word	0x200005b0

08004080 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <HAL_GetTickPrio+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000030 	.word	0x20000030

08004098 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <HAL_GetTickFreq+0x14>)
 800409e:	781b      	ldrb	r3, [r3, #0]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000034 	.word	0x20000034

080040b0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_SuspendTick+0x1c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_SuspendTick+0x1c>)
 80040ba:	f023 0302 	bic.w	r3, r3, #2
 80040be:	6013      	str	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	e000e010 	.word	0xe000e010

080040d0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_ResumeTick+0x1c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <HAL_ResumeTick+0x1c>)
 80040da:	f043 0302 	orr.w	r3, r3, #2
 80040de:	6013      	str	r3, [r2, #0]
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	e000e010 	.word	0xe000e010

080040f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <__NVIC_SetPriorityGrouping+0x44>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800410c:	4013      	ands	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800411c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <__NVIC_SetPriorityGrouping+0x44>)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	60d3      	str	r3, [r2, #12]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000ed00 	.word	0xe000ed00

08004138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <__NVIC_GetPriorityGrouping+0x18>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	f003 0307 	and.w	r3, r3, #7
}
 8004146:	4618      	mov	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	2b00      	cmp	r3, #0
 8004164:	db0b      	blt.n	800417e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	4907      	ldr	r1, [pc, #28]	; (800418c <__NVIC_EnableIRQ+0x38>)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2001      	movs	r0, #1
 8004176:	fa00 f202 	lsl.w	r2, r0, r2
 800417a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	e000e100 	.word	0xe000e100

08004190 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	db12      	blt.n	80041c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	f003 021f 	and.w	r2, r3, #31
 80041a8:	490a      	ldr	r1, [pc, #40]	; (80041d4 <__NVIC_DisableIRQ+0x44>)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2001      	movs	r0, #1
 80041b2:	fa00 f202 	lsl.w	r2, r0, r2
 80041b6:	3320      	adds	r3, #32
 80041b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80041bc:	f3bf 8f4f 	dsb	sy
}
 80041c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041c2:	f3bf 8f6f 	isb	sy
}
 80041c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000e100 	.word	0xe000e100

080041d8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	db0c      	blt.n	8004204 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	f003 021f 	and.w	r2, r3, #31
 80041f0:	4907      	ldr	r1, [pc, #28]	; (8004210 <__NVIC_SetPendingIRQ+0x38>)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2001      	movs	r0, #1
 80041fa:	fa00 f202 	lsl.w	r2, r0, r2
 80041fe:	3340      	adds	r3, #64	; 0x40
 8004200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000e100 	.word	0xe000e100

08004214 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	db0c      	blt.n	8004240 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	f003 021f 	and.w	r2, r3, #31
 800422c:	4907      	ldr	r1, [pc, #28]	; (800424c <__NVIC_ClearPendingIRQ+0x38>)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2001      	movs	r0, #1
 8004236:	fa00 f202 	lsl.w	r2, r0, r2
 800423a:	3360      	adds	r3, #96	; 0x60
 800423c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000e100 	.word	0xe000e100

08004250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	6039      	str	r1, [r7, #0]
 800425a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004260:	2b00      	cmp	r3, #0
 8004262:	db0a      	blt.n	800427a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	490c      	ldr	r1, [pc, #48]	; (800429c <__NVIC_SetPriority+0x4c>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	0112      	lsls	r2, r2, #4
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	440b      	add	r3, r1
 8004274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004278:	e00a      	b.n	8004290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4908      	ldr	r1, [pc, #32]	; (80042a0 <__NVIC_SetPriority+0x50>)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	3b04      	subs	r3, #4
 8004288:	0112      	lsls	r2, r2, #4
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	440b      	add	r3, r1
 800428e:	761a      	strb	r2, [r3, #24]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000e100 	.word	0xe000e100
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b089      	sub	sp, #36	; 0x24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f1c3 0307 	rsb	r3, r3, #7
 80042be:	2b04      	cmp	r3, #4
 80042c0:	bf28      	it	cs
 80042c2:	2304      	movcs	r3, #4
 80042c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3304      	adds	r3, #4
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d902      	bls.n	80042d4 <NVIC_EncodePriority+0x30>
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	3b03      	subs	r3, #3
 80042d2:	e000      	b.n	80042d6 <NVIC_EncodePriority+0x32>
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	401a      	ands	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042ec:	f04f 31ff 	mov.w	r1, #4294967295
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	43d9      	mvns	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042fc:	4313      	orrs	r3, r2
         );
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3724      	adds	r7, #36	; 0x24
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004310:	f3bf 8f4f 	dsb	sy
}
 8004314:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <__NVIC_SystemReset+0x24>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800431e:	4904      	ldr	r1, [pc, #16]	; (8004330 <__NVIC_SystemReset+0x24>)
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <__NVIC_SystemReset+0x28>)
 8004322:	4313      	orrs	r3, r2
 8004324:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004326:	f3bf 8f4f 	dsb	sy
}
 800432a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800432c:	bf00      	nop
 800432e:	e7fd      	b.n	800432c <__NVIC_SystemReset+0x20>
 8004330:	e000ed00 	.word	0xe000ed00
 8004334:	05fa0004 	.word	0x05fa0004

08004338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004348:	d301      	bcc.n	800434e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800434a:	2301      	movs	r3, #1
 800434c:	e00f      	b.n	800436e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800434e:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <SysTick_Config+0x40>)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004356:	210f      	movs	r1, #15
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	f7ff ff78 	bl	8004250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <SysTick_Config+0x40>)
 8004362:	2200      	movs	r2, #0
 8004364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004366:	4b04      	ldr	r3, [pc, #16]	; (8004378 <SysTick_Config+0x40>)
 8004368:	2207      	movs	r2, #7
 800436a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	e000e010 	.word	0xe000e010

0800437c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff feb3 	bl	80040f0 <__NVIC_SetPriorityGrouping>
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043a0:	f7ff feca 	bl	8004138 <__NVIC_GetPriorityGrouping>
 80043a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	6978      	ldr	r0, [r7, #20]
 80043ac:	f7ff ff7a 	bl	80042a4 <NVIC_EncodePriority>
 80043b0:	4602      	mov	r2, r0
 80043b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff ff49 	bl	8004250 <__NVIC_SetPriority>
}
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	4603      	mov	r3, r0
 80043ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff febd 	bl	8004154 <__NVIC_EnableIRQ>
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	4603      	mov	r3, r0
 80043ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fecd 	bl	8004190 <__NVIC_DisableIRQ>
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004402:	f7ff ff83 	bl	800430c <__NVIC_SystemReset>

08004406 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ff92 	bl	8004338 <SysTick_Config>
 8004414:	4603      	mov	r3, r0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	4603      	mov	r3, r0
 8004426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fed3 	bl	80041d8 <__NVIC_SetPendingIRQ>
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fee3 	bl	8004214 <__NVIC_ClearPendingIRQ>
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e04f      	b.n	8004508 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d008      	beq.n	8004486 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2204      	movs	r2, #4
 8004478:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e040      	b.n	8004508 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 020e 	bic.w	r2, r2, #14
 8004494:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	f003 021c 	and.w	r2, r3, #28
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	2101      	movs	r1, #1
 80044c4:	fa01 f202 	lsl.w	r2, r1, r2
 80044c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00c      	beq.n	80044f6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d005      	beq.n	8004538 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2204      	movs	r2, #4
 8004530:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	73fb      	strb	r3, [r7, #15]
 8004536:	e047      	b.n	80045c8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 020e 	bic.w	r2, r2, #14
 8004546:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0201 	bic.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004566:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	f003 021c 	and.w	r2, r3, #28
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f202 	lsl.w	r2, r1, r2
 800457a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004584:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800459c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4798      	blx	r3
    }
  }
  return status;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	f003 031c 	and.w	r3, r3, #28
 80045f2:	2204      	movs	r2, #4
 80045f4:	409a      	lsls	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d026      	beq.n	800464c <HAL_DMA_IRQHandler+0x7a>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d021      	beq.n	800464c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d107      	bne.n	8004626 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0204 	bic.w	r2, r2, #4
 8004624:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	f003 021c 	and.w	r2, r3, #28
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2104      	movs	r1, #4
 8004634:	fa01 f202 	lsl.w	r2, r1, r2
 8004638:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	2b00      	cmp	r3, #0
 8004640:	d071      	beq.n	8004726 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800464a:	e06c      	b.n	8004726 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004650:	f003 031c 	and.w	r3, r3, #28
 8004654:	2202      	movs	r2, #2
 8004656:	409a      	lsls	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d02e      	beq.n	80046be <HAL_DMA_IRQHandler+0xec>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d029      	beq.n	80046be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 020a 	bic.w	r2, r2, #10
 8004686:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004694:	f003 021c 	and.w	r2, r3, #28
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	2102      	movs	r1, #2
 800469e:	fa01 f202 	lsl.w	r2, r1, r2
 80046a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d038      	beq.n	8004726 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80046bc:	e033      	b.n	8004726 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	f003 031c 	and.w	r3, r3, #28
 80046c6:	2208      	movs	r2, #8
 80046c8:	409a      	lsls	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d02a      	beq.n	8004728 <HAL_DMA_IRQHandler+0x156>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d025      	beq.n	8004728 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 020e 	bic.w	r2, r2, #14
 80046ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	f003 021c 	and.w	r2, r3, #28
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	2101      	movs	r1, #1
 80046fa:	fa01 f202 	lsl.w	r2, r1, r2
 80046fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471a:	2b00      	cmp	r3, #0
 800471c:	d004      	beq.n	8004728 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004726:	bf00      	nop
 8004728:	bf00      	nop
}
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
 800473a:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800473c:	4b41      	ldr	r3, [pc, #260]	; (8004844 <HAL_FLASH_IRQHandler+0x114>)
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004744:	4013      	ands	r3, r2
 8004746:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8004748:	4b3e      	ldr	r3, [pc, #248]	; (8004844 <HAL_FLASH_IRQHandler+0x114>)
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	4b3e      	ldr	r3, [pc, #248]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	43db      	mvns	r3, r3
 8004752:	493c      	ldr	r1, [pc, #240]	; (8004844 <HAL_FLASH_IRQHandler+0x114>)
 8004754:	4013      	ands	r3, r2
 8004756:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 8004758:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	4b3b      	ldr	r3, [pc, #236]	; (800484c <HAL_FLASH_IRQHandler+0x11c>)
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 8004764:	4b38      	ldr	r3, [pc, #224]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	e008      	b.n	800477e <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 800476c:	4b36      	ldr	r3, [pc, #216]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 8004778:	4b33      	ldr	r3, [pc, #204]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d022      	beq.n	80047ca <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004784:	4b30      	ldr	r3, [pc, #192]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4313      	orrs	r3, r2
 800478c:	4a2e      	ldr	r2, [pc, #184]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 800478e:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <HAL_FLASH_IRQHandler+0x7a>
 800479a:	4b2a      	ldr	r3, [pc, #168]	; (8004844 <HAL_FLASH_IRQHandler+0x114>)
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80047a4:	4927      	ldr	r1, [pc, #156]	; (8004844 <HAL_FLASH_IRQHandler+0x114>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	618b      	str	r3, [r1, #24]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_FLASH_IRQHandler+0x8e>
 80047b4:	4a23      	ldr	r2, [pc, #140]	; (8004844 <HAL_FLASH_IRQHandler+0x114>)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80047bc:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80047be:	4b22      	ldr	r3, [pc, #136]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f84d 	bl	8004864 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80047ca:	4b1e      	ldr	r3, [pc, #120]	; (8004844 <HAL_FLASH_IRQHandler+0x114>)
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d124      	bne.n	8004820 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80047d6:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_FLASH_IRQHandler+0x114>)
 80047d8:	2201      	movs	r2, #1
 80047da:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 80047dc:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d117      	bne.n	8004814 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 80047e4:	4b18      	ldr	r3, [pc, #96]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	4a17      	ldr	r2, [pc, #92]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 80047ec:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 80047ee:	4b16      	ldr	r3, [pc, #88]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	3301      	adds	r3, #1
 80047fc:	4a12      	ldr	r2, [pc, #72]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 80047fe:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 f837 	bl	8004878 <FLASH_PageErase>
 800480a:	e006      	b.n	800481a <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800480c:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]
 8004812:	e002      	b.n	800481a <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f818 	bl	8004850 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d108      	bne.n	800483a <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_FLASH_IRQHandler+0x114>)
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	4a05      	ldr	r2, [pc, #20]	; (8004844 <HAL_FLASH_IRQHandler+0x114>)
 800482e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004832:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004834:	4b04      	ldr	r3, [pc, #16]	; (8004848 <HAL_FLASH_IRQHandler+0x118>)
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
  }
}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	58004000 	.word	0x58004000
 8004848:	200005b4 	.word	0x200005b4
 800484c:	00040001 	.word	0x00040001

08004850 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <FLASH_PageErase+0x30>)
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4313      	orrs	r3, r2
 800488e:	4a06      	ldr	r2, [pc, #24]	; (80048a8 <FLASH_PageErase+0x30>)
 8004890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004894:	f043 0302 	orr.w	r3, r3, #2
 8004898:	6153      	str	r3, [r2, #20]
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	58004000 	.word	0x58004000

080048ac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048ba:	e14c      	b.n	8004b56 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2101      	movs	r1, #1
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 813e 	beq.w	8004b50 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d005      	beq.n	80048ec <HAL_GPIO_Init+0x40>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d130      	bne.n	800494e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2203      	movs	r2, #3
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004922:	2201      	movs	r2, #1
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0201 	and.w	r2, r3, #1
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b03      	cmp	r3, #3
 8004958:	d017      	beq.n	800498a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	2203      	movs	r2, #3
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4013      	ands	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d123      	bne.n	80049de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	08da      	lsrs	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3208      	adds	r2, #8
 800499e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	08da      	lsrs	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3208      	adds	r2, #8
 80049d8:	6939      	ldr	r1, [r7, #16]
 80049da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	2203      	movs	r2, #3
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4013      	ands	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 0203 	and.w	r2, r3, #3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8098 	beq.w	8004b50 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a20:	4a54      	ldr	r2, [pc, #336]	; (8004b74 <HAL_GPIO_Init+0x2c8>)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	089b      	lsrs	r3, r3, #2
 8004a26:	3302      	adds	r3, #2
 8004a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	220f      	movs	r2, #15
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4013      	ands	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a4a:	d019      	beq.n	8004a80 <HAL_GPIO_Init+0x1d4>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a4a      	ldr	r2, [pc, #296]	; (8004b78 <HAL_GPIO_Init+0x2cc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d013      	beq.n	8004a7c <HAL_GPIO_Init+0x1d0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a49      	ldr	r2, [pc, #292]	; (8004b7c <HAL_GPIO_Init+0x2d0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00d      	beq.n	8004a78 <HAL_GPIO_Init+0x1cc>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a48      	ldr	r2, [pc, #288]	; (8004b80 <HAL_GPIO_Init+0x2d4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d007      	beq.n	8004a74 <HAL_GPIO_Init+0x1c8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a47      	ldr	r2, [pc, #284]	; (8004b84 <HAL_GPIO_Init+0x2d8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_GPIO_Init+0x1c4>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	e008      	b.n	8004a82 <HAL_GPIO_Init+0x1d6>
 8004a70:	2307      	movs	r3, #7
 8004a72:	e006      	b.n	8004a82 <HAL_GPIO_Init+0x1d6>
 8004a74:	2303      	movs	r3, #3
 8004a76:	e004      	b.n	8004a82 <HAL_GPIO_Init+0x1d6>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e002      	b.n	8004a82 <HAL_GPIO_Init+0x1d6>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <HAL_GPIO_Init+0x1d6>
 8004a80:	2300      	movs	r3, #0
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	f002 0203 	and.w	r2, r2, #3
 8004a88:	0092      	lsls	r2, r2, #2
 8004a8a:	4093      	lsls	r3, r2
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a92:	4938      	ldr	r1, [pc, #224]	; (8004b74 <HAL_GPIO_Init+0x2c8>)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	3302      	adds	r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aa0:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4013      	ands	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ac4:	4a30      	ldr	r2, [pc, #192]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004aca:	4b2f      	ldr	r3, [pc, #188]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004aee:	4a26      	ldr	r2, [pc, #152]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004af4:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004b22:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4013      	ands	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b48:	4a0f      	ldr	r2, [pc, #60]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	3301      	adds	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f aeab 	bne.w	80048bc <HAL_GPIO_Init+0x10>
  }
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40010000 	.word	0x40010000
 8004b78:	48000400 	.word	0x48000400
 8004b7c:	48000800 	.word	0x48000800
 8004b80:	48000c00 	.word	0x48000c00
 8004b84:	48001000 	.word	0x48001000
 8004b88:	58000800 	.word	0x58000800

08004b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	807b      	strh	r3, [r7, #2]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b9c:	787b      	ldrb	r3, [r7, #1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ba2:	887a      	ldrh	r2, [r7, #2]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ba8:	e002      	b.n	8004bb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004baa:	887a      	ldrh	r2, [r7, #2]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bce:	887a      	ldrh	r2, [r7, #2]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	041a      	lsls	r2, r3, #16
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	43d9      	mvns	r1, r3
 8004bda:	887b      	ldrh	r3, [r7, #2]
 8004bdc:	400b      	ands	r3, r1
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	619a      	str	r2, [r3, #24]
}
 8004be4:	bf00      	nop
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bfa:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d006      	beq.n	8004c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fd fcb0 	bl	8002574 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	58000800 	.word	0x58000800

08004c20 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <HAL_HSEM_IRQHandler+0x30>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004c2c:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <HAL_HSEM_IRQHandler+0x30>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	43db      	mvns	r3, r3
 8004c34:	4906      	ldr	r1, [pc, #24]	; (8004c50 <HAL_HSEM_IRQHandler+0x30>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004c3a:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <HAL_HSEM_IRQHandler+0x30>)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f807 	bl	8004c54 <HAL_HSEM_FreeCallback>
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	58001500 	.word	0x58001500

08004c54 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e081      	b.n	8004d7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f879 	bl	8004d86 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	; 0x24
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d107      	bne.n	8004ce2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cde:	609a      	str	r2, [r3, #8]
 8004ce0:	e006      	b.n	8004cf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004cee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d104      	bne.n	8004d02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69d9      	ldr	r1, [r3, #28]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	607a      	str	r2, [r7, #4]
 8004da6:	461a      	mov	r2, r3
 8004da8:	460b      	mov	r3, r1
 8004daa:	817b      	strh	r3, [r7, #10]
 8004dac:	4613      	mov	r3, r2
 8004dae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	f040 80da 	bne.w	8004f72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_I2C_Master_Transmit+0x30>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e0d3      	b.n	8004f74 <HAL_I2C_Master_Transmit+0x1d8>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dd4:	f7ff f948 	bl	8004068 <HAL_GetTick>
 8004dd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	2319      	movs	r3, #25
 8004de0:	2201      	movs	r2, #1
 8004de2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f9e6 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e0be      	b.n	8004f74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2221      	movs	r2, #33	; 0x21
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2210      	movs	r2, #16
 8004e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	893a      	ldrh	r2, [r7, #8]
 8004e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2bff      	cmp	r3, #255	; 0xff
 8004e26:	d90e      	bls.n	8004e46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	22ff      	movs	r2, #255	; 0xff
 8004e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	8979      	ldrh	r1, [r7, #10]
 8004e36:	4b51      	ldr	r3, [pc, #324]	; (8004f7c <HAL_I2C_Master_Transmit+0x1e0>)
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fbdc 	bl	80055fc <I2C_TransferConfig>
 8004e44:	e06c      	b.n	8004f20 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	8979      	ldrh	r1, [r7, #10]
 8004e58:	4b48      	ldr	r3, [pc, #288]	; (8004f7c <HAL_I2C_Master_Transmit+0x1e0>)
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fbcb 	bl	80055fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004e66:	e05b      	b.n	8004f20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	6a39      	ldr	r1, [r7, #32]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f9e3 	bl	8005238 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e07b      	b.n	8004f74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d034      	beq.n	8004f20 <HAL_I2C_Master_Transmit+0x184>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d130      	bne.n	8004f20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f975 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e04d      	b.n	8004f74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2bff      	cmp	r3, #255	; 0xff
 8004ee0:	d90e      	bls.n	8004f00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	8979      	ldrh	r1, [r7, #10]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fb7f 	bl	80055fc <I2C_TransferConfig>
 8004efe:	e00f      	b.n	8004f20 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	8979      	ldrh	r1, [r7, #10]
 8004f12:	2300      	movs	r3, #0
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 fb6e 	bl	80055fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d19e      	bne.n	8004e68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	6a39      	ldr	r1, [r7, #32]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f9c2 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e01a      	b.n	8004f74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2220      	movs	r2, #32
 8004f44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6859      	ldr	r1, [r3, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_I2C_Master_Transmit+0x1e4>)
 8004f52:	400b      	ands	r3, r1
 8004f54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e000      	b.n	8004f74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004f72:	2302      	movs	r3, #2
  }
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	80002000 	.word	0x80002000
 8004f80:	fe00e800 	.word	0xfe00e800

08004f84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	460b      	mov	r3, r1
 8004f92:	817b      	strh	r3, [r7, #10]
 8004f94:	4613      	mov	r3, r2
 8004f96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	f040 80db 	bne.w	800515c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_I2C_Master_Receive+0x30>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e0d4      	b.n	800515e <HAL_I2C_Master_Receive+0x1da>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fbc:	f7ff f854 	bl	8004068 <HAL_GetTick>
 8004fc0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2319      	movs	r3, #25
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f8f2 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e0bf      	b.n	800515e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2222      	movs	r2, #34	; 0x22
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2210      	movs	r2, #16
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	893a      	ldrh	r2, [r7, #8]
 8004ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500a:	b29b      	uxth	r3, r3
 800500c:	2bff      	cmp	r3, #255	; 0xff
 800500e:	d90e      	bls.n	800502e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	22ff      	movs	r2, #255	; 0xff
 8005014:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501a:	b2da      	uxtb	r2, r3
 800501c:	8979      	ldrh	r1, [r7, #10]
 800501e:	4b52      	ldr	r3, [pc, #328]	; (8005168 <HAL_I2C_Master_Receive+0x1e4>)
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fae8 	bl	80055fc <I2C_TransferConfig>
 800502c:	e06d      	b.n	800510a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503c:	b2da      	uxtb	r2, r3
 800503e:	8979      	ldrh	r1, [r7, #10]
 8005040:	4b49      	ldr	r3, [pc, #292]	; (8005168 <HAL_I2C_Master_Receive+0x1e4>)
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 fad7 	bl	80055fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800504e:	e05c      	b.n	800510a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	6a39      	ldr	r1, [r7, #32]
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f96b 	bl	8005330 <I2C_WaitOnRXNEFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e07c      	b.n	800515e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d034      	beq.n	800510a <HAL_I2C_Master_Receive+0x186>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d130      	bne.n	800510a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	2200      	movs	r2, #0
 80050b0:	2180      	movs	r1, #128	; 0x80
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f880 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e04d      	b.n	800515e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2bff      	cmp	r3, #255	; 0xff
 80050ca:	d90e      	bls.n	80050ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	22ff      	movs	r2, #255	; 0xff
 80050d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	8979      	ldrh	r1, [r7, #10]
 80050da:	2300      	movs	r3, #0
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fa8a 	bl	80055fc <I2C_TransferConfig>
 80050e8:	e00f      	b.n	800510a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	8979      	ldrh	r1, [r7, #10]
 80050fc:	2300      	movs	r3, #0
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 fa79 	bl	80055fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d19d      	bne.n	8005050 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	6a39      	ldr	r1, [r7, #32]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f8cd 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e01a      	b.n	800515e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2220      	movs	r2, #32
 800512e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <HAL_I2C_Master_Receive+0x1e8>)
 800513c:	400b      	ands	r3, r1
 800513e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e000      	b.n	800515e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
  }
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	80002400 	.word	0x80002400
 800516c:	fe00e800 	.word	0xfe00e800

08005170 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d103      	bne.n	800518e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b01      	cmp	r3, #1
 800519a:	d007      	beq.n	80051ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	619a      	str	r2, [r3, #24]
  }
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c8:	e022      	b.n	8005210 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d01e      	beq.n	8005210 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d2:	f7fe ff49 	bl	8004068 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d113      	bne.n	8005210 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e00f      	b.n	8005230 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4013      	ands	r3, r2
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	429a      	cmp	r2, r3
 800521e:	bf0c      	ite	eq
 8005220:	2301      	moveq	r3, #1
 8005222:	2300      	movne	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	429a      	cmp	r2, r3
 800522c:	d0cd      	beq.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005244:	e02c      	b.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f8ea 	bl	8005424 <I2C_IsErrorOccurred>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e02a      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d01e      	beq.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fe ff01 	bl	8004068 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d113      	bne.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e007      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d1cb      	bne.n	8005246 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c4:	e028      	b.n	8005318 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f8aa 	bl	8005424 <I2C_IsErrorOccurred>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e026      	b.n	8005328 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fe fec5 	bl	8004068 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d113      	bne.n	8005318 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e007      	b.n	8005328 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	d1cf      	bne.n	80052c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800533c:	e064      	b.n	8005408 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f86e 	bl	8005424 <I2C_IsErrorOccurred>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e062      	b.n	8005418 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b20      	cmp	r3, #32
 800535e:	d138      	bne.n	80053d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b04      	cmp	r3, #4
 800536c:	d105      	bne.n	800537a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e04e      	b.n	8005418 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b10      	cmp	r3, #16
 8005386:	d107      	bne.n	8005398 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2210      	movs	r2, #16
 800538e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2204      	movs	r2, #4
 8005394:	645a      	str	r2, [r3, #68]	; 0x44
 8005396:	e002      	b.n	800539e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2220      	movs	r2, #32
 80053a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6859      	ldr	r1, [r3, #4]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80053b2:	400b      	ands	r3, r1
 80053b4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e022      	b.n	8005418 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d2:	f7fe fe49 	bl	8004068 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d302      	bcc.n	80053e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10f      	bne.n	8005408 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ec:	f043 0220 	orr.w	r2, r3, #32
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e007      	b.n	8005418 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d193      	bne.n	800533e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	fe00e800 	.word	0xfe00e800

08005424 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b00      	cmp	r3, #0
 800544e:	d075      	beq.n	800553c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2210      	movs	r2, #16
 8005456:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005458:	e056      	b.n	8005508 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d052      	beq.n	8005508 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7fe fe01 	bl	8004068 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <I2C_IsErrorOccurred+0x54>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d147      	bne.n	8005508 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005482:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800548a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549a:	d12e      	bne.n	80054fa <I2C_IsErrorOccurred+0xd6>
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054a2:	d02a      	beq.n	80054fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d027      	beq.n	80054fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054ba:	f7fe fdd5 	bl	8004068 <HAL_GetTick>
 80054be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054c0:	e01b      	b.n	80054fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054c2:	f7fe fdd1 	bl	8004068 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b19      	cmp	r3, #25
 80054ce:	d914      	bls.n	80054fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d4:	f043 0220 	orr.w	r2, r3, #32
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b20      	cmp	r3, #32
 8005506:	d1dc      	bne.n	80054c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b20      	cmp	r3, #32
 8005514:	d003      	beq.n	800551e <I2C_IsErrorOccurred+0xfa>
 8005516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800551a:	2b00      	cmp	r3, #0
 800551c:	d09d      	beq.n	800545a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800551e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005522:	2b00      	cmp	r3, #0
 8005524:	d103      	bne.n	800552e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2220      	movs	r2, #32
 800552c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	f043 0304 	orr.w	r3, r3, #4
 8005534:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800555e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00b      	beq.n	8005588 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	f043 0308 	orr.w	r3, r3, #8
 8005576:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005580:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00b      	beq.n	80055aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	f043 0302 	orr.w	r3, r3, #2
 8005598:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80055aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01c      	beq.n	80055ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f7ff fddc 	bl	8005170 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6859      	ldr	r1, [r3, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4b0d      	ldr	r3, [pc, #52]	; (80055f8 <I2C_IsErrorOccurred+0x1d4>)
 80055c4:	400b      	ands	r3, r1
 80055c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80055ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3728      	adds	r7, #40	; 0x28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	fe00e800 	.word	0xfe00e800

080055fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	460b      	mov	r3, r1
 8005608:	817b      	strh	r3, [r7, #10]
 800560a:	4613      	mov	r3, r2
 800560c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800560e:	897b      	ldrh	r3, [r7, #10]
 8005610:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005614:	7a7b      	ldrb	r3, [r7, #9]
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800561c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	4313      	orrs	r3, r2
 8005626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800562a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	0d5b      	lsrs	r3, r3, #21
 8005636:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800563a:	4b08      	ldr	r3, [pc, #32]	; (800565c <I2C_TransferConfig+0x60>)
 800563c:	430b      	orrs	r3, r1
 800563e:	43db      	mvns	r3, r3
 8005640:	ea02 0103 	and.w	r1, r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	03ff63ff 	.word	0x03ff63ff

08005660 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b20      	cmp	r3, #32
 8005674:	d138      	bne.n	80056e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005680:	2302      	movs	r3, #2
 8005682:	e032      	b.n	80056ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2224      	movs	r2, #36	; 0x24
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6819      	ldr	r1, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b20      	cmp	r3, #32
 800570a:	d139      	bne.n	8005780 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005716:	2302      	movs	r3, #2
 8005718:	e033      	b.n	8005782 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2224      	movs	r2, #36	; 0x24
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005748:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	e000      	b.n	8005782 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005780:	2302      	movs	r3, #2
  }
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	4904      	ldr	r1, [pc, #16]	; (80057b0 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	604b      	str	r3, [r1, #4]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	40010000 	.word	0x40010000

080057b4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01e      	beq.n	8005804 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80057c6:	4b13      	ldr	r3, [pc, #76]	; (8005814 <HAL_IPCC_Init+0x60>)
 80057c8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fe fa6c 	bl	8003cb4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80057dc:	68b8      	ldr	r0, [r7, #8]
 80057de:	f000 f85b 	bl	8005898 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f82c 	bl	800584c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005802:	e001      	b.n	8005808 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	58000c00 	.word	0x58000c00

08005818 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	4613      	mov	r3, r2
 800583e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e00f      	b.n	800587a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	4a0b      	ldr	r2, [pc, #44]	; (8005890 <IPCC_SetDefaultCallbacks+0x44>)
 8005864:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3306      	adds	r3, #6
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	4a08      	ldr	r2, [pc, #32]	; (8005894 <IPCC_SetDefaultCallbacks+0x48>)
 8005872:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b05      	cmp	r3, #5
 800587e:	d9ec      	bls.n	800585a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	08005819 	.word	0x08005819
 8005894:	08005833 	.word	0x08005833

08005898 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80058ac:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	223f      	movs	r2, #63	; 0x3f
 80058b2:	609a      	str	r2, [r3, #8]
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058c4:	4b05      	ldr	r3, [pc, #20]	; (80058dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a04      	ldr	r2, [pc, #16]	; (80058dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ce:	6013      	str	r3, [r2, #0]
}
 80058d0:	bf00      	nop
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	58000400 	.word	0x58000400

080058e0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
	...

080058f0 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80058f8:	4b04      	ldr	r3, [pc, #16]	; (800590c <LL_EXTI_ReadFlag_0_31+0x1c>)
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4013      	ands	r3, r2
}
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	58000800 	.word	0x58000800

08005910 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 8005918:	4b04      	ldr	r3, [pc, #16]	; (800592c <LL_EXTI_ReadFlag_32_63+0x1c>)
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4013      	ands	r3, r2
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	58000800 	.word	0x58000800

08005930 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005938:	4a04      	ldr	r2, [pc, #16]	; (800594c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60d3      	str	r3, [r2, #12]
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	58000800 	.word	0x58000800

08005950 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005958:	4a04      	ldr	r2, [pc, #16]	; (800596c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	58000800 	.word	0x58000800

08005970 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005974:	4b04      	ldr	r3, [pc, #16]	; (8005988 <HAL_PWREx_GetVoltageRange+0x18>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800597c:	4618      	mov	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	58000400 	.word	0x58000400

0800598c <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8005990:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005994:	f7ff ffac 	bl	80058f0 <LL_EXTI_ReadFlag_0_31>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800599e:	f7ff ff9f 	bl	80058e0 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80059a2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80059a6:	f7ff ffc3 	bl	8005930 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 80059aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80059ae:	f7ff ff9f 	bl	80058f0 <LL_EXTI_ReadFlag_0_31>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 80059b8:	f000 f811 	bl	80059de <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 80059bc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80059c0:	f7ff ffb6 	bl	8005930 <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 80059c4:	2002      	movs	r0, #2
 80059c6:	f7ff ffa3 	bl	8005910 <LL_EXTI_ReadFlag_32_63>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d004      	beq.n	80059da <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 80059d0:	f000 f80c 	bl	80059ec <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 80059d4:	2002      	movs	r0, #2
 80059d6:	f7ff ffbb 	bl	8005950 <LL_EXTI_ClearFlag_32_63>
  }
}
 80059da:	bf00      	nop
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 80059de:	b480      	push	{r7}
 80059e0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <LL_RCC_HSE_IsEnabledDiv2>:
{
 80059fa:	b480      	push	{r7}
 80059fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80059fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0c:	d101      	bne.n	8005a12 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <LL_RCC_HSE_Enable>:
{
 8005a1e:	b480      	push	{r7}
 8005a20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
}
 8005a32:	bf00      	nop
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <LL_RCC_HSE_Disable>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a4e:	6013      	str	r3, [r2, #0]
}
 8005a50:	bf00      	nop
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <LL_RCC_HSE_IsReady>:
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a6c:	d101      	bne.n	8005a72 <LL_RCC_HSE_IsReady+0x18>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <LL_RCC_HSE_IsReady+0x1a>
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <LL_RCC_HSI_Enable>:
{
 8005a7e:	b480      	push	{r7}
 8005a80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a90:	6013      	str	r3, [r2, #0]
}
 8005a92:	bf00      	nop
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <LL_RCC_HSI_Disable>:
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aae:	6013      	str	r3, [r2, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <LL_RCC_HSI_IsReady>:
{
 8005aba:	b480      	push	{r7}
 8005abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005acc:	d101      	bne.n	8005ad2 <LL_RCC_HSI_IsReady+0x18>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <LL_RCC_HSI_IsReady+0x1a>
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <LL_RCC_HSI_SetCalibTrimming>:
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005af8:	4313      	orrs	r3, r2
 8005afa:	604b      	str	r3, [r1, #4]
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <LL_RCC_HSI48_Enable>:
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005b20:	bf00      	nop
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <LL_RCC_HSI48_Disable>:
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005b42:	bf00      	nop
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <LL_RCC_HSI48_IsReady>:
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d101      	bne.n	8005b64 <LL_RCC_HSI48_IsReady+0x18>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <LL_RCC_HSI48_IsReady+0x1a>
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <LL_RCC_LSE_Enable>:
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b88:	bf00      	nop
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <LL_RCC_LSE_Disable>:
{
 8005b92:	b480      	push	{r7}
 8005b94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba2:	f023 0301 	bic.w	r3, r3, #1
 8005ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005baa:	bf00      	nop
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <LL_RCC_LSE_EnableBypass>:
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc4:	f043 0304 	orr.w	r3, r3, #4
 8005bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005bcc:	bf00      	nop
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <LL_RCC_LSE_DisableBypass>:
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be6:	f023 0304 	bic.w	r3, r3, #4
 8005bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <LL_RCC_LSE_IsReady>:
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d101      	bne.n	8005c10 <LL_RCC_LSE_IsReady+0x18>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <LL_RCC_LSE_IsReady+0x1a>
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <LL_RCC_LSI1_Enable>:
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c2c:	f043 0301 	orr.w	r3, r3, #1
 8005c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <LL_RCC_LSI1_Disable>:
{
 8005c3e:	b480      	push	{r7}
 8005c40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c56:	bf00      	nop
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <LL_RCC_LSI1_IsReady>:
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d101      	bne.n	8005c78 <LL_RCC_LSI1_IsReady+0x18>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <LL_RCC_LSI1_IsReady+0x1a>
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <LL_RCC_LSI2_Enable>:
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c94:	f043 0304 	orr.w	r3, r3, #4
 8005c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <LL_RCC_LSI2_Disable>:
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb6:	f023 0304 	bic.w	r3, r3, #4
 8005cba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005cbe:	bf00      	nop
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <LL_RCC_LSI2_IsReady>:
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d101      	bne.n	8005ce0 <LL_RCC_LSI2_IsReady+0x18>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <LL_RCC_LSI2_IsReady+0x1a>
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <LL_RCC_LSI2_SetTrimming>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cfc:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <LL_RCC_MSI_Enable>:
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d28:	f043 0301 	orr.w	r3, r3, #1
 8005d2c:	6013      	str	r3, [r2, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <LL_RCC_MSI_Disable>:
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d46:	f023 0301 	bic.w	r3, r3, #1
 8005d4a:	6013      	str	r3, [r2, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <LL_RCC_MSI_IsReady>:
{
 8005d56:	b480      	push	{r7}
 8005d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d101      	bne.n	8005d6c <LL_RCC_MSI_IsReady+0x16>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e000      	b.n	8005d6e <LL_RCC_MSI_IsReady+0x18>
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <LL_RCC_MSI_SetRange>:
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	600b      	str	r3, [r1, #0]
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <LL_RCC_MSI_GetRange>:
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005db0:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2bb0      	cmp	r3, #176	; 0xb0
 8005db6:	d901      	bls.n	8005dbc <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005db8:	23b0      	movs	r3, #176	; 0xb0
 8005dba:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005dbc:	687b      	ldr	r3, [r7, #4]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <LL_RCC_MSI_SetCalibTrimming>:
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005de4:	4313      	orrs	r3, r2
 8005de6:	604b      	str	r3, [r1, #4]
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <LL_RCC_SetSysClkSource>:
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f023 0203 	bic.w	r2, r3, #3
 8005e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	608b      	str	r3, [r1, #8]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <LL_RCC_GetSysClkSource>:
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 030c 	and.w	r3, r3, #12
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <LL_RCC_SetAHBPrescaler>:
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	608b      	str	r3, [r1, #8]
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <LL_C2_RCC_SetAHBPrescaler>:
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <LL_RCC_SetAHB4Prescaler>:
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e98:	f023 020f 	bic.w	r2, r3, #15
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <LL_RCC_SetAPB1Prescaler>:
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	608b      	str	r3, [r1, #8]
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <LL_RCC_SetAPB2Prescaler>:
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	608b      	str	r3, [r1, #8]
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <LL_RCC_GetAHBPrescaler>:
{
 8005f06:	b480      	push	{r7}
 8005f08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <LL_RCC_GetAHB4Prescaler>:
{
 8005f1e:	b480      	push	{r7}
 8005f20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f4c:	6013      	str	r3, [r2, #0]
}
 8005f4e:	bf00      	nop
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f6a:	6013      	str	r3, [r2, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005f76:	b480      	push	{r7}
 8005f78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f88:	d101      	bne.n	8005f8e <LL_RCC_PLL_IsReady+0x18>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <LL_RCC_PLL_IsReady+0x1a>
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	0a1b      	lsrs	r3, r3, #8
 8005fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f003 0303 	and.w	r3, r3, #3
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800600a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600e:	d101      	bne.n	8006014 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006028:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800602c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006034:	d101      	bne.n	800603a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006046:	b480      	push	{r7}
 8006048:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800604a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605a:	d101      	bne.n	8006060 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800605c:	2301      	movs	r3, #1
 800605e:	e000      	b.n	8006062 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800607e:	d101      	bne.n	8006084 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006080:	2301      	movs	r3, #1
 8006082:	e000      	b.n	8006086 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800609e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060a2:	d101      	bne.n	80060a8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b08d      	sub	sp, #52	; 0x34
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e363      	b.n	800678e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 808d 	beq.w	80061ee <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d4:	f7ff fea2 	bl	8005e1c <LL_RCC_GetSysClkSource>
 80060d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060da:	f7ff ff83 	bl	8005fe4 <LL_RCC_PLL_GetMainSource>
 80060de:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_RCC_OscConfig+0x3e>
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	2b0c      	cmp	r3, #12
 80060ea:	d147      	bne.n	800617c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d144      	bne.n	800617c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e347      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006102:	f7ff fe4d 	bl	8005da0 <LL_RCC_MSI_GetRange>
 8006106:	4603      	mov	r3, r0
 8006108:	429c      	cmp	r4, r3
 800610a:	d914      	bls.n	8006136 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fd03 	bl	8006b1c <RCC_SetFlashLatencyFromMSIRange>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e336      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fe27 	bl	8005d78 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff fe4b 	bl	8005dca <LL_RCC_MSI_SetCalibTrimming>
 8006134:	e013      	b.n	800615e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fe1c 	bl	8005d78 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fe40 	bl	8005dca <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fce4 	bl	8006b1c <RCC_SetFlashLatencyFromMSIRange>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e317      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800615e:	f000 fcc9 	bl	8006af4 <HAL_RCC_GetHCLKFreq>
 8006162:	4603      	mov	r3, r0
 8006164:	4aa4      	ldr	r2, [pc, #656]	; (80063f8 <HAL_RCC_OscConfig+0x344>)
 8006166:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006168:	4ba4      	ldr	r3, [pc, #656]	; (80063fc <HAL_RCC_OscConfig+0x348>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f7fd ff2d 	bl	8003fcc <HAL_InitTick>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d039      	beq.n	80061ec <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e308      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01e      	beq.n	80061c2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006184:	f7ff fdc9 	bl	8005d1a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006188:	f7fd ff6e 	bl	8004068 <HAL_GetTick>
 800618c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006190:	f7fd ff6a 	bl	8004068 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e2f5      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80061a2:	f7ff fdd8 	bl	8005d56 <LL_RCC_MSI_IsReady>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0f1      	beq.n	8006190 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fde1 	bl	8005d78 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fe05 	bl	8005dca <LL_RCC_MSI_SetCalibTrimming>
 80061c0:	e015      	b.n	80061ee <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061c2:	f7ff fdb9 	bl	8005d38 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061c6:	f7fd ff4f 	bl	8004068 <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061ce:	f7fd ff4b 	bl	8004068 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e2d6      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80061e0:	f7ff fdb9 	bl	8005d56 <LL_RCC_MSI_IsReady>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f1      	bne.n	80061ce <HAL_RCC_OscConfig+0x11a>
 80061ea:	e000      	b.n	80061ee <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80061ec:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d047      	beq.n	800628a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061fa:	f7ff fe0f 	bl	8005e1c <LL_RCC_GetSysClkSource>
 80061fe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006200:	f7ff fef0 	bl	8005fe4 <LL_RCC_PLL_GetMainSource>
 8006204:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d005      	beq.n	8006218 <HAL_RCC_OscConfig+0x164>
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	2b0c      	cmp	r3, #12
 8006210:	d108      	bne.n	8006224 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d105      	bne.n	8006224 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d134      	bne.n	800628a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e2b4      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622c:	d102      	bne.n	8006234 <HAL_RCC_OscConfig+0x180>
 800622e:	f7ff fbf6 	bl	8005a1e <LL_RCC_HSE_Enable>
 8006232:	e001      	b.n	8006238 <HAL_RCC_OscConfig+0x184>
 8006234:	f7ff fc02 	bl	8005a3c <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d012      	beq.n	8006266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006240:	f7fd ff12 	bl	8004068 <HAL_GetTick>
 8006244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006248:	f7fd ff0e 	bl	8004068 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b64      	cmp	r3, #100	; 0x64
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e299      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800625a:	f7ff fbfe 	bl	8005a5a <LL_RCC_HSE_IsReady>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f1      	beq.n	8006248 <HAL_RCC_OscConfig+0x194>
 8006264:	e011      	b.n	800628a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006266:	f7fd feff 	bl	8004068 <HAL_GetTick>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800626c:	e008      	b.n	8006280 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800626e:	f7fd fefb 	bl	8004068 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b64      	cmp	r3, #100	; 0x64
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e286      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006280:	f7ff fbeb 	bl	8005a5a <LL_RCC_HSE_IsReady>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f1      	bne.n	800626e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d04c      	beq.n	8006330 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006296:	f7ff fdc1 	bl	8005e1c <LL_RCC_GetSysClkSource>
 800629a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800629c:	f7ff fea2 	bl	8005fe4 <LL_RCC_PLL_GetMainSource>
 80062a0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d005      	beq.n	80062b4 <HAL_RCC_OscConfig+0x200>
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	2b0c      	cmp	r3, #12
 80062ac:	d10e      	bne.n	80062cc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d10b      	bne.n	80062cc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e266      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fc0a 	bl	8005ade <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80062ca:	e031      	b.n	8006330 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d019      	beq.n	8006308 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062d4:	f7ff fbd3 	bl	8005a7e <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d8:	f7fd fec6 	bl	8004068 <HAL_GetTick>
 80062dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062e0:	f7fd fec2 	bl	8004068 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e24d      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80062f2:	f7ff fbe2 	bl	8005aba <LL_RCC_HSI_IsReady>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0f1      	beq.n	80062e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff fbec 	bl	8005ade <LL_RCC_HSI_SetCalibTrimming>
 8006306:	e013      	b.n	8006330 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006308:	f7ff fbc8 	bl	8005a9c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fd feac 	bl	8004068 <HAL_GetTick>
 8006310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006314:	f7fd fea8 	bl	8004068 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e233      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006326:	f7ff fbc8 	bl	8005aba <LL_RCC_HSI_IsReady>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1f1      	bne.n	8006314 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80a3 	beq.w	8006490 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d076      	beq.n	8006440 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	2b00      	cmp	r3, #0
 800635c:	d046      	beq.n	80063ec <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800635e:	f7ff fc7f 	bl	8005c60 <LL_RCC_LSI1_IsReady>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d113      	bne.n	8006390 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006368:	f7ff fc58 	bl	8005c1c <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800636c:	f7fd fe7c 	bl	8004068 <HAL_GetTick>
 8006370:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006374:	f7fd fe78 	bl	8004068 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e203      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006386:	f7ff fc6b 	bl	8005c60 <LL_RCC_LSI1_IsReady>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f1      	beq.n	8006374 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006390:	f7ff fc78 	bl	8005c84 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7fd fe68 	bl	8004068 <HAL_GetTick>
 8006398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800639c:	f7fd fe64 	bl	8004068 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e1ef      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80063ae:	f7ff fc8b 	bl	8005cc8 <LL_RCC_LSI2_IsReady>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f1      	beq.n	800639c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fc95 	bl	8005cec <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80063c2:	f7ff fc3c 	bl	8005c3e <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c6:	f7fd fe4f 	bl	8004068 <HAL_GetTick>
 80063ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80063cc:	e008      	b.n	80063e0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80063ce:	f7fd fe4b 	bl	8004068 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e1d6      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80063e0:	f7ff fc3e 	bl	8005c60 <LL_RCC_LSI1_IsReady>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f1      	bne.n	80063ce <HAL_RCC_OscConfig+0x31a>
 80063ea:	e051      	b.n	8006490 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80063ec:	f7ff fc16 	bl	8005c1c <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f0:	f7fd fe3a 	bl	8004068 <HAL_GetTick>
 80063f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80063f6:	e00c      	b.n	8006412 <HAL_RCC_OscConfig+0x35e>
 80063f8:	2000002c 	.word	0x2000002c
 80063fc:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006400:	f7fd fe32 	bl	8004068 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e1bd      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006412:	f7ff fc25 	bl	8005c60 <LL_RCC_LSI1_IsReady>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0f1      	beq.n	8006400 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800641c:	f7ff fc43 	bl	8005ca6 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006422:	f7fd fe21 	bl	8004068 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b03      	cmp	r3, #3
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e1ac      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006434:	f7ff fc48 	bl	8005cc8 <LL_RCC_LSI2_IsReady>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f1      	bne.n	8006422 <HAL_RCC_OscConfig+0x36e>
 800643e:	e027      	b.n	8006490 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006440:	f7ff fc31 	bl	8005ca6 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006444:	f7fd fe10 	bl	8004068 <HAL_GetTick>
 8006448:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800644c:	f7fd fe0c 	bl	8004068 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b03      	cmp	r3, #3
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e197      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800645e:	f7ff fc33 	bl	8005cc8 <LL_RCC_LSI2_IsReady>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1f1      	bne.n	800644c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006468:	f7ff fbe9 	bl	8005c3e <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800646c:	f7fd fdfc 	bl	8004068 <HAL_GetTick>
 8006470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006474:	f7fd fdf8 	bl	8004068 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e183      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006486:	f7ff fbeb 	bl	8005c60 <LL_RCC_LSI1_IsReady>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1f1      	bne.n	8006474 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d05b      	beq.n	8006554 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800649c:	4ba7      	ldr	r3, [pc, #668]	; (800673c <HAL_RCC_OscConfig+0x688>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d114      	bne.n	80064d2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80064a8:	f7ff fa0a 	bl	80058c0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ac:	f7fd fddc 	bl	8004068 <HAL_GetTick>
 80064b0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b4:	f7fd fdd8 	bl	8004068 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e163      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064c6:	4b9d      	ldr	r3, [pc, #628]	; (800673c <HAL_RCC_OscConfig+0x688>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f0      	beq.n	80064b4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d102      	bne.n	80064e0 <HAL_RCC_OscConfig+0x42c>
 80064da:	f7ff fb49 	bl	8005b70 <LL_RCC_LSE_Enable>
 80064de:	e00c      	b.n	80064fa <HAL_RCC_OscConfig+0x446>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	d104      	bne.n	80064f2 <HAL_RCC_OscConfig+0x43e>
 80064e8:	f7ff fb64 	bl	8005bb4 <LL_RCC_LSE_EnableBypass>
 80064ec:	f7ff fb40 	bl	8005b70 <LL_RCC_LSE_Enable>
 80064f0:	e003      	b.n	80064fa <HAL_RCC_OscConfig+0x446>
 80064f2:	f7ff fb4e 	bl	8005b92 <LL_RCC_LSE_Disable>
 80064f6:	f7ff fb6e 	bl	8005bd6 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d014      	beq.n	800652c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006502:	f7fd fdb1 	bl	8004068 <HAL_GetTick>
 8006506:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006508:	e00a      	b.n	8006520 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650a:	f7fd fdad 	bl	8004068 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f241 3288 	movw	r2, #5000	; 0x1388
 8006518:	4293      	cmp	r3, r2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e136      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006520:	f7ff fb6a 	bl	8005bf8 <LL_RCC_LSE_IsReady>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0ef      	beq.n	800650a <HAL_RCC_OscConfig+0x456>
 800652a:	e013      	b.n	8006554 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fd fd9c 	bl	8004068 <HAL_GetTick>
 8006530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006532:	e00a      	b.n	800654a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006534:	f7fd fd98 	bl	8004068 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e121      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800654a:	f7ff fb55 	bl	8005bf8 <LL_RCC_LSE_IsReady>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1ef      	bne.n	8006534 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d02c      	beq.n	80065ba <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	2b00      	cmp	r3, #0
 8006566:	d014      	beq.n	8006592 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006568:	f7ff face 	bl	8005b08 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800656c:	f7fd fd7c 	bl	8004068 <HAL_GetTick>
 8006570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006574:	f7fd fd78 	bl	8004068 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e103      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006586:	f7ff fae1 	bl	8005b4c <LL_RCC_HSI48_IsReady>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0f1      	beq.n	8006574 <HAL_RCC_OscConfig+0x4c0>
 8006590:	e013      	b.n	80065ba <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006592:	f7ff faca 	bl	8005b2a <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006596:	f7fd fd67 	bl	8004068 <HAL_GetTick>
 800659a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800659e:	f7fd fd63 	bl	8004068 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e0ee      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80065b0:	f7ff facc 	bl	8005b4c <LL_RCC_HSI48_IsReady>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f1      	bne.n	800659e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80e4 	beq.w	800678c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065c4:	f7ff fc2a 	bl	8005e1c <LL_RCC_GetSysClkSource>
 80065c8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80065ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	f040 80b4 	bne.w	8006744 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f003 0203 	and.w	r2, r3, #3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d123      	bne.n	8006632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d11c      	bne.n	8006632 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006604:	429a      	cmp	r2, r3
 8006606:	d114      	bne.n	8006632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006612:	429a      	cmp	r2, r3
 8006614:	d10d      	bne.n	8006632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006620:	429a      	cmp	r2, r3
 8006622:	d106      	bne.n	8006632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800662e:	429a      	cmp	r2, r3
 8006630:	d05d      	beq.n	80066ee <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b0c      	cmp	r3, #12
 8006636:	d058      	beq.n	80066ea <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e0a1      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800664a:	f7ff fc85 	bl	8005f58 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800664e:	f7fd fd0b 	bl	8004068 <HAL_GetTick>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006656:	f7fd fd07 	bl	8004068 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e092      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1ef      	bne.n	8006656 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	4b30      	ldr	r3, [pc, #192]	; (8006740 <HAL_RCC_OscConfig+0x68c>)
 800667e:	4013      	ands	r3, r2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006688:	4311      	orrs	r1, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800668e:	0212      	lsls	r2, r2, #8
 8006690:	4311      	orrs	r1, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006696:	4311      	orrs	r1, r2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800669c:	4311      	orrs	r1, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80066a2:	430a      	orrs	r2, r1
 80066a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80066ac:	f7ff fc45 	bl	8005f3a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066c0:	f7fd fcd2 	bl	8004068 <HAL_GetTick>
 80066c4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c8:	f7fd fcce 	bl	8004068 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e059      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0ef      	beq.n	80066c8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066e8:	e050      	b.n	800678c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e04f      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d147      	bne.n	800678c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80066fc:	f7ff fc1d 	bl	8005f3a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800670a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800670e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006710:	f7fd fcaa 	bl	8004068 <HAL_GetTick>
 8006714:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006718:	f7fd fca6 	bl	8004068 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e031      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800672a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0ef      	beq.n	8006718 <HAL_RCC_OscConfig+0x664>
 8006738:	e028      	b.n	800678c <HAL_RCC_OscConfig+0x6d8>
 800673a:	bf00      	nop
 800673c:	58000400 	.word	0x58000400
 8006740:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b0c      	cmp	r3, #12
 8006748:	d01e      	beq.n	8006788 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674a:	f7ff fc05 	bl	8005f58 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674e:	f7fd fc8b 	bl	8004068 <HAL_GetTick>
 8006752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006754:	e008      	b.n	8006768 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006756:	f7fd fc87 	bl	8004068 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e012      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1ef      	bne.n	8006756 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <HAL_RCC_OscConfig+0x6e4>)
 8006782:	4013      	ands	r3, r2
 8006784:	60cb      	str	r3, [r1, #12]
 8006786:	e001      	b.n	800678c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3734      	adds	r7, #52	; 0x34
 8006792:	46bd      	mov	sp, r7
 8006794:	bd90      	pop	{r4, r7, pc}
 8006796:	bf00      	nop
 8006798:	eefefffc 	.word	0xeefefffc

0800679c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e12d      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067b0:	4b98      	ldr	r3, [pc, #608]	; (8006a14 <HAL_RCC_ClockConfig+0x278>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d91b      	bls.n	80067f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067be:	4b95      	ldr	r3, [pc, #596]	; (8006a14 <HAL_RCC_ClockConfig+0x278>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f023 0207 	bic.w	r2, r3, #7
 80067c6:	4993      	ldr	r1, [pc, #588]	; (8006a14 <HAL_RCC_ClockConfig+0x278>)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ce:	f7fd fc4b 	bl	8004068 <HAL_GetTick>
 80067d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067d4:	e008      	b.n	80067e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80067d6:	f7fd fc47 	bl	8004068 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e111      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e8:	4b8a      	ldr	r3, [pc, #552]	; (8006a14 <HAL_RCC_ClockConfig+0x278>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d1ef      	bne.n	80067d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d016      	beq.n	8006830 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff fb14 	bl	8005e34 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800680c:	f7fd fc2c 	bl	8004068 <HAL_GetTick>
 8006810:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006812:	e008      	b.n	8006826 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006814:	f7fd fc28 	bl	8004068 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e0f2      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006826:	f7ff fbe9 	bl	8005ffc <LL_RCC_IsActiveFlag_HPRE>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f1      	beq.n	8006814 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d016      	beq.n	800686a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff fb0b 	bl	8005e5c <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006846:	f7fd fc0f 	bl	8004068 <HAL_GetTick>
 800684a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800684c:	e008      	b.n	8006860 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800684e:	f7fd fc0b 	bl	8004068 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e0d5      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006860:	f7ff fbde 	bl	8006020 <LL_RCC_IsActiveFlag_C2HPRE>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f1      	beq.n	800684e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d016      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fb04 	bl	8005e88 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006880:	f7fd fbf2 	bl	8004068 <HAL_GetTick>
 8006884:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006888:	f7fd fbee 	bl	8004068 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e0b8      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800689a:	f7ff fbd4 	bl	8006046 <LL_RCC_IsActiveFlag_SHDHPRE>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f1      	beq.n	8006888 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d016      	beq.n	80068de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff fafe 	bl	8005eb6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068ba:	f7fd fbd5 	bl	8004068 <HAL_GetTick>
 80068be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068c2:	f7fd fbd1 	bl	8004068 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e09b      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80068d4:	f7ff fbca 	bl	800606c <LL_RCC_IsActiveFlag_PPRE1>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f1      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d017      	beq.n	800691a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff faf4 	bl	8005ede <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068f6:	f7fd fbb7 	bl	8004068 <HAL_GetTick>
 80068fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068fe:	f7fd fbb3 	bl	8004068 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e07d      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006910:	f7ff fbbe 	bl	8006090 <LL_RCC_IsActiveFlag_PPRE2>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0f1      	beq.n	80068fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d043      	beq.n	80069ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d106      	bne.n	800693c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800692e:	f7ff f894 	bl	8005a5a <LL_RCC_HSE_IsReady>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d11e      	bne.n	8006976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e067      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d106      	bne.n	8006952 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006944:	f7ff fb17 	bl	8005f76 <LL_RCC_PLL_IsReady>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d113      	bne.n	8006976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e05c      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800695a:	f7ff f9fc 	bl	8005d56 <LL_RCC_MSI_IsReady>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d108      	bne.n	8006976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e051      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006968:	f7ff f8a7 	bl	8005aba <LL_RCC_HSI_IsReady>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e04a      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff fa3a 	bl	8005df4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006980:	f7fd fb72 	bl	8004068 <HAL_GetTick>
 8006984:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006986:	e00a      	b.n	800699e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006988:	f7fd fb6e 	bl	8004068 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e036      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699e:	f7ff fa3d 	bl	8005e1c <LL_RCC_GetSysClkSource>
 80069a2:	4602      	mov	r2, r0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d1ec      	bne.n	8006988 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069ae:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <HAL_RCC_ClockConfig+0x278>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d21b      	bcs.n	80069f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069bc:	4b15      	ldr	r3, [pc, #84]	; (8006a14 <HAL_RCC_ClockConfig+0x278>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f023 0207 	bic.w	r2, r3, #7
 80069c4:	4913      	ldr	r1, [pc, #76]	; (8006a14 <HAL_RCC_ClockConfig+0x278>)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069cc:	f7fd fb4c 	bl	8004068 <HAL_GetTick>
 80069d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069d4:	f7fd fb48 	bl	8004068 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e012      	b.n	8006a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e6:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <HAL_RCC_ClockConfig+0x278>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d1ef      	bne.n	80069d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80069f4:	f000 f87e 	bl	8006af4 <HAL_RCC_GetHCLKFreq>
 80069f8:	4603      	mov	r3, r0
 80069fa:	4a07      	ldr	r2, [pc, #28]	; (8006a18 <HAL_RCC_ClockConfig+0x27c>)
 80069fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80069fe:	f7fd fb3f 	bl	8004080 <HAL_GetTickPrio>
 8006a02:	4603      	mov	r3, r0
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fd fae1 	bl	8003fcc <HAL_InitTick>
 8006a0a:	4603      	mov	r3, r0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	58004000 	.word	0x58004000
 8006a18:	2000002c 	.word	0x2000002c

08006a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a1c:	b590      	push	{r4, r7, lr}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a22:	f7ff f9fb 	bl	8005e1c <LL_RCC_GetSysClkSource>
 8006a26:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006a2e:	f7ff f9b7 	bl	8005da0 <LL_RCC_MSI_GetRange>
 8006a32:	4603      	mov	r3, r0
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	4a2b      	ldr	r2, [pc, #172]	; (8006ae8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	e04b      	b.n	8006adc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d102      	bne.n	8006a50 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a4a:	4b28      	ldr	r3, [pc, #160]	; (8006aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	e045      	b.n	8006adc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d10a      	bne.n	8006a6c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a56:	f7fe ffd0 	bl	80059fa <LL_RCC_HSE_IsEnabledDiv2>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d102      	bne.n	8006a66 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006a60:	4b22      	ldr	r3, [pc, #136]	; (8006aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	e03a      	b.n	8006adc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006a66:	4b22      	ldr	r3, [pc, #136]	; (8006af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	e037      	b.n	8006adc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006a6c:	f7ff faba 	bl	8005fe4 <LL_RCC_PLL_GetMainSource>
 8006a70:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d003      	beq.n	8006a80 <HAL_RCC_GetSysClockFreq+0x64>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d003      	beq.n	8006a86 <HAL_RCC_GetSysClockFreq+0x6a>
 8006a7e:	e00d      	b.n	8006a9c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006a80:	4b1a      	ldr	r3, [pc, #104]	; (8006aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a82:	60bb      	str	r3, [r7, #8]
        break;
 8006a84:	e015      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a86:	f7fe ffb8 	bl	80059fa <LL_RCC_HSE_IsEnabledDiv2>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d102      	bne.n	8006a96 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006a90:	4b16      	ldr	r3, [pc, #88]	; (8006aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a92:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006a94:	e00d      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006a96:	4b16      	ldr	r3, [pc, #88]	; (8006af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006a98:	60bb      	str	r3, [r7, #8]
        break;
 8006a9a:	e00a      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006a9c:	f7ff f980 	bl	8005da0 <LL_RCC_MSI_GetRange>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	091b      	lsrs	r3, r3, #4
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	4a0f      	ldr	r2, [pc, #60]	; (8006ae8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aae:	60bb      	str	r3, [r7, #8]
        break;
 8006ab0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006ab2:	f7ff fa72 	bl	8005f9a <LL_RCC_PLL_GetN>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	fb03 f402 	mul.w	r4, r3, r2
 8006abe:	f7ff fa85 	bl	8005fcc <LL_RCC_PLL_GetDivider>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	091b      	lsrs	r3, r3, #4
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	fbb4 f4f3 	udiv	r4, r4, r3
 8006acc:	f7ff fa72 	bl	8005fb4 <LL_RCC_PLL_GetR>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	0f5b      	lsrs	r3, r3, #29
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ada:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006adc:	68fb      	ldr	r3, [r7, #12]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd90      	pop	{r4, r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	0800ca30 	.word	0x0800ca30
 8006aec:	00f42400 	.word	0x00f42400
 8006af0:	01e84800 	.word	0x01e84800

08006af4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006af4:	b598      	push	{r3, r4, r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006af8:	f7ff ff90 	bl	8006a1c <HAL_RCC_GetSysClockFreq>
 8006afc:	4604      	mov	r4, r0
 8006afe:	f7ff fa02 	bl	8005f06 <LL_RCC_GetAHBPrescaler>
 8006b02:	4603      	mov	r3, r0
 8006b04:	091b      	lsrs	r3, r3, #4
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	4a03      	ldr	r2, [pc, #12]	; (8006b18 <HAL_RCC_GetHCLKFreq+0x24>)
 8006b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	bd98      	pop	{r3, r4, r7, pc}
 8006b18:	0800c9f0 	.word	0x0800c9f0

08006b1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006b1c:	b590      	push	{r4, r7, lr}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2bb0      	cmp	r3, #176	; 0xb0
 8006b28:	d903      	bls.n	8006b32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006b2a:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e007      	b.n	8006b42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	4a11      	ldr	r2, [pc, #68]	; (8006b80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006b42:	f7ff f9ec 	bl	8005f1e <LL_RCC_GetAHB4Prescaler>
 8006b46:	4603      	mov	r3, r0
 8006b48:	091b      	lsrs	r3, r3, #4
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	4a0d      	ldr	r2, [pc, #52]	; (8006b84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4a0a      	ldr	r2, [pc, #40]	; (8006b88 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006b60:	fba2 2303 	umull	r2, r3, r2, r3
 8006b64:	0c9c      	lsrs	r4, r3, #18
 8006b66:	f7fe ff03 	bl	8005970 <HAL_PWREx_GetVoltageRange>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 f80c 	bl	8006b8c <RCC_SetFlashLatency>
 8006b74:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd90      	pop	{r4, r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	0800ca30 	.word	0x0800ca30
 8006b84:	0800c9f0 	.word	0x0800c9f0
 8006b88:	431bde83 	.word	0x431bde83

08006b8c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006b8c:	b590      	push	{r4, r7, lr}
 8006b8e:	b093      	sub	sp, #76	; 0x4c
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006b96:	4b37      	ldr	r3, [pc, #220]	; (8006c74 <RCC_SetFlashLatency+0xe8>)
 8006b98:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006ba2:	4a35      	ldr	r2, [pc, #212]	; (8006c78 <RCC_SetFlashLatency+0xec>)
 8006ba4:	f107 031c 	add.w	r3, r7, #28
 8006ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8006baa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006bae:	4b33      	ldr	r3, [pc, #204]	; (8006c7c <RCC_SetFlashLatency+0xf0>)
 8006bb0:	f107 040c 	add.w	r4, r7, #12
 8006bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006bba:	2300      	movs	r3, #0
 8006bbc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bc4:	d11a      	bne.n	8006bfc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8006bca:	e013      	b.n	8006bf4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	3348      	adds	r3, #72	; 0x48
 8006bd2:	443b      	add	r3, r7
 8006bd4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d807      	bhi.n	8006bee <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	3348      	adds	r3, #72	; 0x48
 8006be4:	443b      	add	r3, r7
 8006be6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006bea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006bec:	e020      	b.n	8006c30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8006bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d9e8      	bls.n	8006bcc <RCC_SetFlashLatency+0x40>
 8006bfa:	e019      	b.n	8006c30 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c00:	e013      	b.n	8006c2a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	3348      	adds	r3, #72	; 0x48
 8006c08:	443b      	add	r3, r7
 8006c0a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d807      	bhi.n	8006c24 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	3348      	adds	r3, #72	; 0x48
 8006c1a:	443b      	add	r3, r7
 8006c1c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006c20:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006c22:	e005      	b.n	8006c30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c26:	3301      	adds	r3, #1
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d9e8      	bls.n	8006c02 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006c30:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <RCC_SetFlashLatency+0xf4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f023 0207 	bic.w	r2, r3, #7
 8006c38:	4911      	ldr	r1, [pc, #68]	; (8006c80 <RCC_SetFlashLatency+0xf4>)
 8006c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c40:	f7fd fa12 	bl	8004068 <HAL_GetTick>
 8006c44:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006c46:	e008      	b.n	8006c5a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006c48:	f7fd fa0e 	bl	8004068 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e007      	b.n	8006c6a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006c5a:	4b09      	ldr	r3, [pc, #36]	; (8006c80 <RCC_SetFlashLatency+0xf4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d1ef      	bne.n	8006c48 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	374c      	adds	r7, #76	; 0x4c
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd90      	pop	{r4, r7, pc}
 8006c72:	bf00      	nop
 8006c74:	0800c984 	.word	0x0800c984
 8006c78:	0800c994 	.word	0x0800c994
 8006c7c:	0800c9a0 	.word	0x0800c9a0
 8006c80:	58004000 	.word	0x58004000

08006c84 <LL_RCC_LSE_IsEnabled>:
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <LL_RCC_LSE_IsEnabled+0x18>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <LL_RCC_LSE_IsEnabled+0x1a>
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <LL_RCC_LSE_IsReady>:
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d101      	bne.n	8006cc0 <LL_RCC_LSE_IsReady+0x18>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e000      	b.n	8006cc2 <LL_RCC_LSE_IsReady+0x1a>
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <LL_RCC_SetRFWKPClockSource>:
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <LL_RCC_SetSMPSClockSource>:
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	f023 0203 	bic.w	r2, r3, #3
 8006d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <LL_RCC_SetSMPSPrescaler>:
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <LL_RCC_SetUSARTClockSource>:
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d58:	f023 0203 	bic.w	r2, r3, #3
 8006d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <LL_RCC_SetLPUARTClockSource>:
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <LL_RCC_SetI2CClockSource>:
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	091b      	lsrs	r3, r3, #4
 8006db4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006db8:	43db      	mvns	r3, r3
 8006dba:	401a      	ands	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006dc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <LL_RCC_SetLPTIMClockSource>:
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	0c1b      	lsrs	r3, r3, #16
 8006dee:	041b      	lsls	r3, r3, #16
 8006df0:	43db      	mvns	r3, r3
 8006df2:	401a      	ands	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	041b      	lsls	r3, r3, #16
 8006df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <LL_RCC_SetSAIClockSource>:
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <LL_RCC_SetRNGClockSource>:
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <LL_RCC_SetCLK48ClockSource>:
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <LL_RCC_SetUSBClockSource>:
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff ffe3 	bl	8006e66 <LL_RCC_SetCLK48ClockSource>
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <LL_RCC_SetADCClockSource>:
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <LL_RCC_SetRTCClockSource>:
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <LL_RCC_GetRTCClockSource>:
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <LL_RCC_ForceBackupDomainReset>:
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f32:	bf00      	nop
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <LL_RCC_ReleaseBackupDomainReset>:
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f54:	bf00      	nop
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <LL_RCC_PLLSAI1_Enable>:
{
 8006f5e:	b480      	push	{r7}
 8006f60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f70:	6013      	str	r3, [r2, #0]
}
 8006f72:	bf00      	nop
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <LL_RCC_PLLSAI1_Disable>:
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f8e:	6013      	str	r3, [r2, #0]
}
 8006f90:	bf00      	nop
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <LL_RCC_PLLSAI1_IsReady>:
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fac:	d101      	bne.n	8006fb2 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b088      	sub	sp, #32
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006fca:	2300      	movs	r3, #0
 8006fcc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d034      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fe2:	d021      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006fe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fe8:	d81b      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fee:	d01d      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006ff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ff4:	d815      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00b      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ffe:	d110      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800700a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800700e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007010:	e00d      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3304      	adds	r3, #4
 8007016:	4618      	mov	r0, r3
 8007018:	f000 f947 	bl	80072aa <RCCEx_PLLSAI1_ConfigNP>
 800701c:	4603      	mov	r3, r0
 800701e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007020:	e005      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	77fb      	strb	r3, [r7, #31]
        break;
 8007026:	e002      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007028:	bf00      	nop
 800702a:	e000      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800702c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800702e:	7ffb      	ldrb	r3, [r7, #31]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d105      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff fee8 	bl	8006e0e <LL_RCC_SetSAIClockSource>
 800703e:	e001      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	7ffb      	ldrb	r3, [r7, #31]
 8007042:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800704c:	2b00      	cmp	r3, #0
 800704e:	d046      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007050:	f7ff ff56 	bl	8006f00 <LL_RCC_GetRTCClockSource>
 8007054:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	429a      	cmp	r2, r3
 800705e:	d03c      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007060:	f7fe fc2e 	bl	80058c0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d105      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff ff30 	bl	8006ed4 <LL_RCC_SetRTCClockSource>
 8007074:	e02e      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800707a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007080:	f7ff ff4b 	bl	8006f1a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007084:	f7ff ff5a 	bl	8006f3c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80070a0:	f7ff fdf0 	bl	8006c84 <LL_RCC_LSE_IsEnabled>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d114      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070aa:	f7fc ffdd 	bl	8004068 <HAL_GetTick>
 80070ae:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80070b0:	e00b      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070b2:	f7fc ffd9 	bl	8004068 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d902      	bls.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	77fb      	strb	r3, [r7, #31]
              break;
 80070c8:	e004      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80070ca:	f7ff fded 	bl	8006ca8 <LL_RCC_LSE_IsReady>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d1ee      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80070d4:	7ffb      	ldrb	r3, [r7, #31]
 80070d6:	77bb      	strb	r3, [r7, #30]
 80070d8:	e001      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070da:	7ffb      	ldrb	r3, [r7, #31]
 80070dc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7ff fe2a 	bl	8006d48 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff fe35 	bl	8006d74 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0310 	and.w	r3, r3, #16
 8007112:	2b00      	cmp	r3, #0
 8007114:	d004      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff fe5d 	bl	8006dda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff fe52 	bl	8006dda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	d004      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff fe2a 	bl	8006da0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff fe1f 	bl	8006da0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716a:	2b00      	cmp	r3, #0
 800716c:	d022      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff fe8d 	bl	8006e92 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007180:	d107      	bne.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800718c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007190:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800719a:	d10b      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 f8dd 	bl	8007360 <RCCEx_PLLSAI1_ConfigNQ>
 80071a6:	4603      	mov	r3, r0
 80071a8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80071aa:	7ffb      	ldrb	r3, [r7, #31]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80071b0:	7ffb      	ldrb	r3, [r7, #31]
 80071b2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d02b      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c8:	d008      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071d2:	d003      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff fe2a 	bl	8006e3a <LL_RCC_SetRNGClockSource>
 80071e6:	e00a      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x240>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	2000      	movs	r0, #0
 80071f4:	f7ff fe21 	bl	8006e3a <LL_RCC_SetRNGClockSource>
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f7ff fe34 	bl	8006e66 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007206:	d107      	bne.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007216:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007220:	2b00      	cmp	r3, #0
 8007222:	d022      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff fe3d 	bl	8006ea8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007236:	d107      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007246:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007250:	d10b      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3304      	adds	r3, #4
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f8dd 	bl	8007416 <RCCEx_PLLSAI1_ConfigNR>
 800725c:	4603      	mov	r3, r0
 800725e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007260:	7ffb      	ldrb	r3, [r7, #31]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007266:	7ffb      	ldrb	r3, [r7, #31]
 8007268:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d004      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff fd26 	bl	8006ccc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d009      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff fd45 	bl	8006d20 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff fd2c 	bl	8006cf8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80072a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80072b6:	f7ff fe61 	bl	8006f7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072ba:	f7fc fed5 	bl	8004068 <HAL_GetTick>
 80072be:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80072c0:	e009      	b.n	80072d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072c2:	f7fc fed1 	bl	8004068 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d902      	bls.n	80072d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	73fb      	strb	r3, [r7, #15]
      break;
 80072d4:	e004      	b.n	80072e0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80072d6:	f7ff fe60 	bl	8006f9a <LL_RCC_PLLSAI1_IsReady>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1f0      	bne.n	80072c2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d137      	bne.n	8007356 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80072e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072fa:	4313      	orrs	r3, r2
 80072fc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80072fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007310:	4313      	orrs	r3, r2
 8007312:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007314:	f7ff fe23 	bl	8006f5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007318:	f7fc fea6 	bl	8004068 <HAL_GetTick>
 800731c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800731e:	e009      	b.n	8007334 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007320:	f7fc fea2 	bl	8004068 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d902      	bls.n	8007334 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	73fb      	strb	r3, [r7, #15]
        break;
 8007332:	e004      	b.n	800733e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007334:	f7ff fe31 	bl	8006f9a <LL_RCC_PLLSAI1_IsReady>
 8007338:	4603      	mov	r3, r0
 800733a:	2b01      	cmp	r3, #1
 800733c:	d1f0      	bne.n	8007320 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d108      	bne.n	8007356 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007348:	691a      	ldr	r2, [r3, #16]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007352:	4313      	orrs	r3, r2
 8007354:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800736c:	f7ff fe06 	bl	8006f7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007370:	f7fc fe7a 	bl	8004068 <HAL_GetTick>
 8007374:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007376:	e009      	b.n	800738c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007378:	f7fc fe76 	bl	8004068 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d902      	bls.n	800738c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	73fb      	strb	r3, [r7, #15]
      break;
 800738a:	e004      	b.n	8007396 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800738c:	f7ff fe05 	bl	8006f9a <LL_RCC_PLLSAI1_IsReady>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f0      	bne.n	8007378 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d137      	bne.n	800740c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800739c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073b0:	4313      	orrs	r3, r2
 80073b2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80073b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073c6:	4313      	orrs	r3, r2
 80073c8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80073ca:	f7ff fdc8 	bl	8006f5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ce:	f7fc fe4b 	bl	8004068 <HAL_GetTick>
 80073d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80073d4:	e009      	b.n	80073ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073d6:	f7fc fe47 	bl	8004068 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d902      	bls.n	80073ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	73fb      	strb	r3, [r7, #15]
        break;
 80073e8:	e004      	b.n	80073f4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80073ea:	f7ff fdd6 	bl	8006f9a <LL_RCC_PLLSAI1_IsReady>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d1f0      	bne.n	80073d6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d108      	bne.n	800740c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80073fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073fe:	691a      	ldr	r2, [r3, #16]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007408:	4313      	orrs	r3, r2
 800740a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007422:	f7ff fdab 	bl	8006f7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007426:	f7fc fe1f 	bl	8004068 <HAL_GetTick>
 800742a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800742c:	e009      	b.n	8007442 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800742e:	f7fc fe1b 	bl	8004068 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d902      	bls.n	8007442 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	73fb      	strb	r3, [r7, #15]
      break;
 8007440:	e004      	b.n	800744c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007442:	f7ff fdaa 	bl	8006f9a <LL_RCC_PLLSAI1_IsReady>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1f0      	bne.n	800742e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d137      	bne.n	80074c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007466:	4313      	orrs	r3, r2
 8007468:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800746a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800747c:	4313      	orrs	r3, r2
 800747e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007480:	f7ff fd6d 	bl	8006f5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007484:	f7fc fdf0 	bl	8004068 <HAL_GetTick>
 8007488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800748a:	e009      	b.n	80074a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800748c:	f7fc fdec 	bl	8004068 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d902      	bls.n	80074a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	73fb      	strb	r3, [r7, #15]
        break;
 800749e:	e004      	b.n	80074aa <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80074a0:	f7ff fd7b 	bl	8006f9a <LL_RCC_PLLSAI1_IsReady>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d1f0      	bne.n	800748c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d108      	bne.n	80074c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80074b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b4:	691a      	ldr	r2, [r3, #16]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074be:	4313      	orrs	r3, r2
 80074c0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e09f      	b.n	800761e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7fc fc02 	bl	8003cfc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007500:	4b49      	ldr	r3, [pc, #292]	; (8007628 <HAL_RTC_Init+0x15c>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f003 0310 	and.w	r3, r3, #16
 8007508:	2b10      	cmp	r3, #16
 800750a:	d07e      	beq.n	800760a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	22ca      	movs	r2, #202	; 0xca
 8007512:	625a      	str	r2, [r3, #36]	; 0x24
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2253      	movs	r2, #83	; 0x53
 800751a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f8ab 	bl	8007678 <RTC_EnterInitMode>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	22ff      	movs	r2, #255	; 0xff
 800752e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2204      	movs	r2, #4
 8007534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	73fb      	strb	r3, [r7, #15]
 800753c:	e067      	b.n	800760e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800754c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007550:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6899      	ldr	r1, [r3, #8]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	68d2      	ldr	r2, [r2, #12]
 8007578:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6919      	ldr	r1, [r3, #16]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	041a      	lsls	r2, r3, #16
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800759c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0203 	bic.w	r2, r2, #3
 80075ac:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	69da      	ldr	r2, [r3, #28]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d113      	bne.n	80075fc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f829 	bl	800762c <HAL_RTC_WaitForSynchro>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00d      	beq.n	80075fc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	22ff      	movs	r2, #255	; 0xff
 80075e6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2204      	movs	r2, #4
 80075ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e010      	b.n	800761e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	22ff      	movs	r2, #255	; 0xff
 8007602:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]
 8007608:	e001      	b.n	800760e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d103      	bne.n	800761c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800761c:	7bfb      	ldrb	r3, [r7, #15]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	40002800 	.word	0x40002800

0800762c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007642:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007644:	f7fc fd10 	bl	8004068 <HAL_GetTick>
 8007648:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800764a:	e009      	b.n	8007660 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800764c:	f7fc fd0c 	bl	8004068 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800765a:	d901      	bls.n	8007660 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e007      	b.n	8007670 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0ee      	beq.n	800764c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d119      	bne.n	80076c2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f04f 32ff 	mov.w	r2, #4294967295
 8007696:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007698:	f7fc fce6 	bl	8004068 <HAL_GetTick>
 800769c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800769e:	e009      	b.n	80076b4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80076a0:	f7fc fce2 	bl	8004068 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076ae:	d901      	bls.n	80076b4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e007      	b.n	80076c4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0ee      	beq.n	80076a0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e0a8      	b.n	8007838 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2202      	movs	r2, #2
 80076f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	22ca      	movs	r2, #202	; 0xca
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2253      	movs	r2, #83	; 0x53
 8007704:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007710:	2b00      	cmp	r3, #0
 8007712:	d020      	beq.n	8007756 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007714:	f7fc fca8 	bl	8004068 <HAL_GetTick>
 8007718:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800771a:	e015      	b.n	8007748 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800771c:	f7fc fca4 	bl	8004068 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800772a:	d90d      	bls.n	8007748 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	22ff      	movs	r2, #255	; 0xff
 8007732:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2203      	movs	r2, #3
 8007738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e077      	b.n	8007838 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f003 0304 	and.w	r3, r3, #4
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e2      	bne.n	800771c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007764:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	b2da      	uxtb	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007776:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007778:	f7fc fc76 	bl	8004068 <HAL_GetTick>
 800777c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800777e:	e015      	b.n	80077ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007780:	f7fc fc72 	bl	8004068 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800778e:	d90d      	bls.n	80077ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	22ff      	movs	r2, #255	; 0xff
 8007796:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2203      	movs	r2, #3
 800779c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e045      	b.n	8007838 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0e2      	beq.n	8007780 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0207 	bic.w	r2, r2, #7
 80077d0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6899      	ldr	r1, [r3, #8]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	430a      	orrs	r2, r1
 80077e0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80077e2:	4b17      	ldr	r3, [pc, #92]	; (8007840 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80077e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077e8:	4a15      	ldr	r2, [pc, #84]	; (8007840 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80077ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80077f2:	4b13      	ldr	r3, [pc, #76]	; (8007840 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a12      	ldr	r2, [pc, #72]	; (8007840 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80077f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077fc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800780c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800781c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	22ff      	movs	r2, #255	; 0xff
 8007824:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	58000800 	.word	0x58000800

08007844 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007844:	b480      	push	{r7}
 8007846:	b091      	sub	sp, #68	; 0x44
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	4613      	mov	r3, r2
 8007850:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007858:	2b20      	cmp	r3, #32
 800785a:	d178      	bne.n	800794e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_UART_Transmit_IT+0x24>
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e071      	b.n	8007950 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	88fa      	ldrh	r2, [r7, #6]
 8007876:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	88fa      	ldrh	r2, [r7, #6]
 800787e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2221      	movs	r2, #33	; 0x21
 8007894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800789c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a0:	d12a      	bne.n	80078f8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078aa:	d107      	bne.n	80078bc <HAL_UART_Transmit_IT+0x78>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4a29      	ldr	r2, [pc, #164]	; (800795c <HAL_UART_Transmit_IT+0x118>)
 80078b8:	679a      	str	r2, [r3, #120]	; 0x78
 80078ba:	e002      	b.n	80078c2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4a28      	ldr	r2, [pc, #160]	; (8007960 <HAL_UART_Transmit_IT+0x11c>)
 80078c0:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3308      	adds	r3, #8
 80078e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078e2:	637a      	str	r2, [r7, #52]	; 0x34
 80078e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e5      	bne.n	80078c2 <HAL_UART_Transmit_IT+0x7e>
 80078f6:	e028      	b.n	800794a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007900:	d107      	bne.n	8007912 <HAL_UART_Transmit_IT+0xce>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d103      	bne.n	8007912 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4a15      	ldr	r2, [pc, #84]	; (8007964 <HAL_UART_Transmit_IT+0x120>)
 800790e:	679a      	str	r2, [r3, #120]	; 0x78
 8007910:	e002      	b.n	8007918 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	4a14      	ldr	r2, [pc, #80]	; (8007968 <HAL_UART_Transmit_IT+0x124>)
 8007916:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	613b      	str	r3, [r7, #16]
   return(result);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007936:	623b      	str	r3, [r7, #32]
 8007938:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	69f9      	ldr	r1, [r7, #28]
 800793c:	6a3a      	ldr	r2, [r7, #32]
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	61bb      	str	r3, [r7, #24]
   return(result);
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e6      	bne.n	8007918 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	e000      	b.n	8007950 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800794e:	2302      	movs	r3, #2
  }
}
 8007950:	4618      	mov	r0, r3
 8007952:	3744      	adds	r7, #68	; 0x44
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	08008333 	.word	0x08008333
 8007960:	08008253 	.word	0x08008253
 8007964:	08008191 	.word	0x08008191
 8007968:	080080d9 	.word	0x080080d9

0800796c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b0ba      	sub	sp, #232	; 0xe8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007992:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007996:	f640 030f 	movw	r3, #2063	; 0x80f
 800799a:	4013      	ands	r3, r2
 800799c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d11b      	bne.n	80079e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ac:	f003 0320 	and.w	r3, r3, #32
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d015      	beq.n	80079e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b8:	f003 0320 	and.w	r3, r3, #32
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d105      	bne.n	80079cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 82e3 	beq.w	8007f9c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	4798      	blx	r3
      }
      return;
 80079de:	e2dd      	b.n	8007f9c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8123 	beq.w	8007c30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80079ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80079ee:	4b8d      	ldr	r3, [pc, #564]	; (8007c24 <HAL_UART_IRQHandler+0x2b8>)
 80079f0:	4013      	ands	r3, r2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80079f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079fa:	4b8b      	ldr	r3, [pc, #556]	; (8007c28 <HAL_UART_IRQHandler+0x2bc>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 8116 	beq.w	8007c30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d011      	beq.n	8007a34 <HAL_UART_IRQHandler+0xc8>
 8007a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00b      	beq.n	8007a34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2201      	movs	r2, #1
 8007a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2a:	f043 0201 	orr.w	r2, r3, #1
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d011      	beq.n	8007a64 <HAL_UART_IRQHandler+0xf8>
 8007a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2202      	movs	r2, #2
 8007a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5a:	f043 0204 	orr.w	r2, r3, #4
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d011      	beq.n	8007a94 <HAL_UART_IRQHandler+0x128>
 8007a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00b      	beq.n	8007a94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2204      	movs	r2, #4
 8007a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a8a:	f043 0202 	orr.w	r2, r3, #2
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d017      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d105      	bne.n	8007ab8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007aac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ab0:	4b5c      	ldr	r3, [pc, #368]	; (8007c24 <HAL_UART_IRQHandler+0x2b8>)
 8007ab2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2208      	movs	r2, #8
 8007abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac6:	f043 0208 	orr.w	r2, r3, #8
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d012      	beq.n	8007b02 <HAL_UART_IRQHandler+0x196>
 8007adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af8:	f043 0220 	orr.w	r2, r3, #32
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 8249 	beq.w	8007fa0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d013      	beq.n	8007b42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d105      	bne.n	8007b32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b56:	2b40      	cmp	r3, #64	; 0x40
 8007b58:	d005      	beq.n	8007b66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d054      	beq.n	8007c10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fa3a 	bl	8007fe0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d146      	bne.n	8007c08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ba6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1d9      	bne.n	8007b7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d017      	beq.n	8007c00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bd6:	4a15      	ldr	r2, [pc, #84]	; (8007c2c <HAL_UART_IRQHandler+0x2c0>)
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fc fc97 	bl	8004514 <HAL_DMA_Abort_IT>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d019      	beq.n	8007c20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfe:	e00f      	b.n	8007c20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f9d7 	bl	8007fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c06:	e00b      	b.n	8007c20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f9d3 	bl	8007fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0e:	e007      	b.n	8007c20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f9cf 	bl	8007fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007c1e:	e1bf      	b.n	8007fa0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c20:	bf00      	nop
    return;
 8007c22:	e1bd      	b.n	8007fa0 <HAL_UART_IRQHandler+0x634>
 8007c24:	10000001 	.word	0x10000001
 8007c28:	04000120 	.word	0x04000120
 8007c2c:	080080ad 	.word	0x080080ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	f040 8153 	bne.w	8007ee0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3e:	f003 0310 	and.w	r3, r3, #16
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 814c 	beq.w	8007ee0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 8145 	beq.w	8007ee0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2210      	movs	r2, #16
 8007c5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c68:	2b40      	cmp	r3, #64	; 0x40
 8007c6a:	f040 80bb 	bne.w	8007de4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 818f 	beq.w	8007fa4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c90:	429a      	cmp	r2, r3
 8007c92:	f080 8187 	bcs.w	8007fa4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f040 8087 	bne.w	8007dc2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ce2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1da      	bne.n	8007cb4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3308      	adds	r3, #8
 8007d04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e1      	bne.n	8007cfe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3308      	adds	r3, #8
 8007d40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3308      	adds	r3, #8
 8007d5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e3      	bne.n	8007d3a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d90:	f023 0310 	bic.w	r3, r3, #16
 8007d94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007da2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007da4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007da8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e4      	bne.n	8007d80 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fc fb4a 	bl	8004456 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f8f3 	bl	8007fc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007de2:	e0df      	b.n	8007fa4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 80d1 	beq.w	8007fa8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007e06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 80cc 	beq.w	8007fa8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e32:	647b      	str	r3, [r7, #68]	; 0x44
 8007e34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e4      	bne.n	8007e10 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	623b      	str	r3, [r7, #32]
   return(result);
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e5c:	f023 0301 	bic.w	r3, r3, #1
 8007e60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3308      	adds	r3, #8
 8007e6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e6e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e1      	bne.n	8007e46 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0310 	bic.w	r3, r3, #16
 8007eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007eb8:	61fb      	str	r3, [r7, #28]
 8007eba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	69b9      	ldr	r1, [r7, #24]
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e4      	bne.n	8007e96 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f875 	bl	8007fc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ede:	e063      	b.n	8007fa8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00e      	beq.n	8007f0a <HAL_UART_IRQHandler+0x59e>
 8007eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d008      	beq.n	8007f0a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fab5 	bl	8008472 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f08:	e051      	b.n	8007fae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d014      	beq.n	8007f40 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d105      	bne.n	8007f2e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d008      	beq.n	8007f40 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d03a      	beq.n	8007fac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	4798      	blx	r3
    }
    return;
 8007f3e:	e035      	b.n	8007fac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d009      	beq.n	8007f60 <HAL_UART_IRQHandler+0x5f4>
 8007f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fa5f 	bl	800841c <UART_EndTransmit_IT>
    return;
 8007f5e:	e026      	b.n	8007fae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d009      	beq.n	8007f80 <HAL_UART_IRQHandler+0x614>
 8007f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa8e 	bl	800849a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f7e:	e016      	b.n	8007fae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d010      	beq.n	8007fae <HAL_UART_IRQHandler+0x642>
 8007f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da0c      	bge.n	8007fae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fa76 	bl	8008486 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f9a:	e008      	b.n	8007fae <HAL_UART_IRQHandler+0x642>
      return;
 8007f9c:	bf00      	nop
 8007f9e:	e006      	b.n	8007fae <HAL_UART_IRQHandler+0x642>
    return;
 8007fa0:	bf00      	nop
 8007fa2:	e004      	b.n	8007fae <HAL_UART_IRQHandler+0x642>
      return;
 8007fa4:	bf00      	nop
 8007fa6:	e002      	b.n	8007fae <HAL_UART_IRQHandler+0x642>
      return;
 8007fa8:	bf00      	nop
 8007faa:	e000      	b.n	8007fae <HAL_UART_IRQHandler+0x642>
    return;
 8007fac:	bf00      	nop
  }
}
 8007fae:	37e8      	adds	r7, #232	; 0xe8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b095      	sub	sp, #84	; 0x54
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008006:	643b      	str	r3, [r7, #64]	; 0x40
 8008008:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800800c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800800e:	e841 2300 	strex	r3, r2, [r1]
 8008012:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e6      	bne.n	8007fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3308      	adds	r3, #8
 8008020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	61fb      	str	r3, [r7, #28]
   return(result);
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008030:	f023 0301 	bic.w	r3, r3, #1
 8008034:	64bb      	str	r3, [r7, #72]	; 0x48
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3308      	adds	r3, #8
 800803c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800803e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008040:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e3      	bne.n	800801a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008056:	2b01      	cmp	r3, #1
 8008058:	d118      	bne.n	800808c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	60bb      	str	r3, [r7, #8]
   return(result);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f023 0310 	bic.w	r3, r3, #16
 800806e:	647b      	str	r3, [r7, #68]	; 0x44
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008078:	61bb      	str	r3, [r7, #24]
 800807a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6979      	ldr	r1, [r7, #20]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	613b      	str	r3, [r7, #16]
   return(result);
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2220      	movs	r2, #32
 8008090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	675a      	str	r2, [r3, #116]	; 0x74
}
 80080a0:	bf00      	nop
 80080a2:	3754      	adds	r7, #84	; 0x54
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7ff ff72 	bl	8007fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080d0:	bf00      	nop
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080d8:	b480      	push	{r7}
 80080da:	b08f      	sub	sp, #60	; 0x3c
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e6:	2b21      	cmp	r3, #33	; 0x21
 80080e8:	d14c      	bne.n	8008184 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d132      	bne.n	800815c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	61fb      	str	r3, [r7, #28]
   return(result);
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008116:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800811a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e6      	bne.n	80080f6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	60bb      	str	r3, [r7, #8]
   return(result);
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800813c:	633b      	str	r3, [r7, #48]	; 0x30
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	61bb      	str	r3, [r7, #24]
 8008148:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	6979      	ldr	r1, [r7, #20]
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	613b      	str	r3, [r7, #16]
   return(result);
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e6      	bne.n	8008128 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800815a:	e013      	b.n	8008184 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008160:	781a      	ldrb	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008178:	b29b      	uxth	r3, r3
 800817a:	3b01      	subs	r3, #1
 800817c:	b29a      	uxth	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008184:	bf00      	nop
 8008186:	373c      	adds	r7, #60	; 0x3c
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008190:	b480      	push	{r7}
 8008192:	b091      	sub	sp, #68	; 0x44
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800819e:	2b21      	cmp	r3, #33	; 0x21
 80081a0:	d151      	bne.n	8008246 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d132      	bne.n	8008214 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	e853 3f00 	ldrex	r3, [r3]
 80081ba:	623b      	str	r3, [r7, #32]
   return(result);
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	633b      	str	r3, [r7, #48]	; 0x30
 80081ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d4:	e841 2300 	strex	r3, r2, [r1]
 80081d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e6      	bne.n	80081ae <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fe:	61fb      	str	r3, [r7, #28]
 8008200:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	69b9      	ldr	r1, [r7, #24]
 8008204:	69fa      	ldr	r2, [r7, #28]
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	617b      	str	r3, [r7, #20]
   return(result);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e6      	bne.n	80081e0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008212:	e018      	b.n	8008246 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008218:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800821a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008228:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822e:	1c9a      	adds	r2, r3, #2
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800823a:	b29b      	uxth	r3, r3
 800823c:	3b01      	subs	r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008246:	bf00      	nop
 8008248:	3744      	adds	r7, #68	; 0x44
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008252:	b480      	push	{r7}
 8008254:	b091      	sub	sp, #68	; 0x44
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008260:	2b21      	cmp	r3, #33	; 0x21
 8008262:	d160      	bne.n	8008326 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800826a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800826c:	e057      	b.n	800831e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d133      	bne.n	80082e2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3308      	adds	r3, #8
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	e853 3f00 	ldrex	r3, [r3]
 8008288:	623b      	str	r3, [r7, #32]
   return(result);
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008290:	63bb      	str	r3, [r7, #56]	; 0x38
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3308      	adds	r3, #8
 8008298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800829a:	633a      	str	r2, [r7, #48]	; 0x30
 800829c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e5      	bne.n	800827a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082c2:	637b      	str	r3, [r7, #52]	; 0x34
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082cc:	61fb      	str	r3, [r7, #28]
 80082ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d0:	69b9      	ldr	r1, [r7, #24]
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	617b      	str	r3, [r7, #20]
   return(result);
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e6      	bne.n	80082ae <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80082e0:	e021      	b.n	8008326 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d013      	beq.n	8008318 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f4:	781a      	ldrb	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b01      	subs	r3, #1
 8008310:	b29a      	uxth	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008318:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800831a:	3b01      	subs	r3, #1
 800831c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800831e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1a4      	bne.n	800826e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008324:	e7ff      	b.n	8008326 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008326:	bf00      	nop
 8008328:	3744      	adds	r7, #68	; 0x44
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008332:	b480      	push	{r7}
 8008334:	b091      	sub	sp, #68	; 0x44
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008340:	2b21      	cmp	r3, #33	; 0x21
 8008342:	d165      	bne.n	8008410 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800834a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800834c:	e05c      	b.n	8008408 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008354:	b29b      	uxth	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d133      	bne.n	80083c2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3308      	adds	r3, #8
 8008360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	61fb      	str	r3, [r7, #28]
   return(result);
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3308      	adds	r3, #8
 8008378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800837a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800837c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e5      	bne.n	800835a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	e853 3f00 	ldrex	r3, [r3]
 800839a:	60bb      	str	r3, [r7, #8]
   return(result);
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a2:	633b      	str	r3, [r7, #48]	; 0x30
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	461a      	mov	r2, r3
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	61bb      	str	r3, [r7, #24]
 80083ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b0:	6979      	ldr	r1, [r7, #20]
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	e841 2300 	strex	r3, r2, [r1]
 80083b8:	613b      	str	r3, [r7, #16]
   return(result);
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1e6      	bne.n	800838e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80083c0:	e026      	b.n	8008410 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d018      	beq.n	8008402 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083e4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ea:	1c9a      	adds	r2, r3, #2
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	3b01      	subs	r3, #1
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008402:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008404:	3b01      	subs	r3, #1
 8008406:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008408:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800840a:	2b00      	cmp	r3, #0
 800840c:	d19f      	bne.n	800834e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800840e:	e7ff      	b.n	8008410 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008410:	bf00      	nop
 8008412:	3744      	adds	r7, #68	; 0x44
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	60bb      	str	r3, [r7, #8]
   return(result);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008438:	61fb      	str	r3, [r7, #28]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	61bb      	str	r3, [r7, #24]
 8008444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6979      	ldr	r1, [r7, #20]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	613b      	str	r3, [r7, #16]
   return(result);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e6      	bne.n	8008424 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7fa ff5f 	bl	8003328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800846a:	bf00      	nop
 800846c:	3720      	adds	r7, #32
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800847a:	bf00      	nop
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80084a2:	bf00      	nop
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80084b8:	f7f9 f93c 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80084bc:	f7f9 f8c0 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 80084c0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f062 0208 	orn	r2, r2, #8
 80084ca:	701a      	strb	r2, [r3, #0]
 80084cc:	2200      	movs	r2, #0
 80084ce:	705a      	strb	r2, [r3, #1]
 80084d0:	2200      	movs	r2, #0
 80084d2:	709a      	strb	r2, [r3, #2]
 80084d4:	2200      	movs	r2, #0
 80084d6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f042 0201 	orr.w	r2, r2, #1
 80084e0:	711a      	strb	r2, [r3, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	715a      	strb	r2, [r3, #5]
 80084e6:	2200      	movs	r2, #0
 80084e8:	719a      	strb	r2, [r3, #6]
 80084ea:	2200      	movs	r2, #0
 80084ec:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80084f4:	f7f9 f8ec 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80084f8:	f7f9 f8ae 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 80084fc:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	689b      	ldr	r3, [r3, #8]

}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <otCoapMessageInit>:

void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	460b      	mov	r3, r1
 8008514:	70fb      	strb	r3, [r7, #3]
 8008516:	4613      	mov	r3, r2
 8008518:	70bb      	strb	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800851a:	f7f9 f90b 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800851e:	f7f9 f88f 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008522:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f062 0228 	orn	r2, r2, #40	; 0x28
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	2200      	movs	r2, #0
 8008530:	705a      	strb	r2, [r3, #1]
 8008532:	2200      	movs	r2, #0
 8008534:	709a      	strb	r2, [r3, #2]
 8008536:	2200      	movs	r2, #0
 8008538:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f042 0203 	orr.w	r2, r2, #3
 8008542:	711a      	strb	r2, [r3, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	715a      	strb	r2, [r3, #5]
 8008548:	2200      	movs	r2, #0
 800854a:	719a      	strb	r2, [r3, #6]
 800854c:	2200      	movs	r2, #0
 800854e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aType;
 8008556:	78fa      	ldrb	r2, [r7, #3]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aCode;
 800855c:	78ba      	ldrb	r2, [r7, #2]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8008562:	f7f9 f8b5 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008566:	f7f9 f877 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 800856a:	60f8      	str	r0, [r7, #12]
}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <otCoapMessageInitResponse>:

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4611      	mov	r1, r2
 8008580:	461a      	mov	r2, r3
 8008582:	460b      	mov	r3, r1
 8008584:	71fb      	strb	r3, [r7, #7]
 8008586:	4613      	mov	r3, r2
 8008588:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800858a:	f7f9 f8d3 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800858e:	f7f9 f857 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008592:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2200      	movs	r2, #0
 8008598:	f062 0227 	orn	r2, r2, #39	; 0x27
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	2200      	movs	r2, #0
 80085a0:	705a      	strb	r2, [r3, #1]
 80085a2:	2200      	movs	r2, #0
 80085a4:	709a      	strb	r2, [r3, #2]
 80085a6:	2200      	movs	r2, #0
 80085a8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f042 0204 	orr.w	r2, r2, #4
 80085b2:	711a      	strb	r2, [r3, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	715a      	strb	r2, [r3, #5]
 80085b8:	2200      	movs	r2, #0
 80085ba:	719a      	strb	r2, [r3, #6]
 80085bc:	2200      	movs	r2, #0
 80085be:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 80085cc:	79fa      	ldrb	r2, [r7, #7]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 80085d2:	79ba      	ldrb	r2, [r7, #6]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 80085d8:	f7f9 f87a 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80085dc:	f7f9 f83c 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 80085e0:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	b2db      	uxtb	r3, r3
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <otCoapMessageSetToken>:

otError otCoapMessageSetToken(otMessage *aMessage, const uint8_t *aToken, uint8_t aTokenLength)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	71fb      	strb	r3, [r7, #7]
  Pre_OtCmdProcessing();
 80085fe:	f7f9 f899 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008602:	f7f9 f81d 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008606:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_TOKEN;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2200      	movs	r2, #0
 800860c:	f062 0226 	orn	r2, r2, #38	; 0x26
 8008610:	701a      	strb	r2, [r3, #0]
 8008612:	2200      	movs	r2, #0
 8008614:	705a      	strb	r2, [r3, #1]
 8008616:	2200      	movs	r2, #0
 8008618:	709a      	strb	r2, [r3, #2]
 800861a:	2200      	movs	r2, #0
 800861c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2200      	movs	r2, #0
 8008622:	f042 0203 	orr.w	r2, r2, #3
 8008626:	711a      	strb	r2, [r3, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	715a      	strb	r2, [r3, #5]
 800862c:	2200      	movs	r2, #0
 800862e:	719a      	strb	r2, [r3, #6]
 8008630:	2200      	movs	r2, #0
 8008632:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aToken;
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTokenLength;
 8008640:	79fa      	ldrb	r2, [r7, #7]
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8008646:	f7f9 f843 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800864a:	f7f9 f805 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 800864e:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	b2db      	uxtb	r3, r3
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <otCoapMessageGenerateToken>:

void otCoapMessageGenerateToken(otMessage *aMessage, uint8_t aTokenLength)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800866a:	f7f9 f863 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800866e:	f7f8 ffe7 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008672:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GENERATE_TOKEN;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f062 0225 	orn	r2, r2, #37	; 0x25
 800867c:	701a      	strb	r2, [r3, #0]
 800867e:	2200      	movs	r2, #0
 8008680:	705a      	strb	r2, [r3, #1]
 8008682:	2200      	movs	r2, #0
 8008684:	709a      	strb	r2, [r3, #2]
 8008686:	2200      	movs	r2, #0
 8008688:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f042 0202 	orr.w	r2, r2, #2
 8008692:	711a      	strb	r2, [r3, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	715a      	strb	r2, [r3, #5]
 8008698:	2200      	movs	r2, #0
 800869a:	719a      	strb	r2, [r3, #6]
 800869c:	2200      	movs	r2, #0
 800869e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aTokenLength;
 80086a6:	78fa      	ldrb	r2, [r7, #3]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80086ac:	f7f9 f810 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80086b0:	f7f8 ffd2 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 80086b4:	60f8      	str	r0, [r7, #12]
}
 80086b6:	bf00      	nop
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <otCoapMessageAppendUriPathOptions>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80086c8:	f7f9 f834 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80086cc:	f7f8 ffb8 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 80086d0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_APPEND_URI_PATH_OPTIONS;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f062 0220 	orn	r2, r2, #32
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	2200      	movs	r2, #0
 80086de:	705a      	strb	r2, [r3, #1]
 80086e0:	2200      	movs	r2, #0
 80086e2:	709a      	strb	r2, [r3, #2]
 80086e4:	2200      	movs	r2, #0
 80086e6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f042 0202 	orr.w	r2, r2, #2
 80086f0:	711a      	strb	r2, [r3, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	715a      	strb	r2, [r3, #5]
 80086f6:	2200      	movs	r2, #0
 80086f8:	719a      	strb	r2, [r3, #6]
 80086fa:	2200      	movs	r2, #0
 80086fc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aUriPath;
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800870a:	f7f8 ffe1 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800870e:	f7f8 ffa3 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008712:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	b2db      	uxtb	r3, r3
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800872a:	f7f9 f803 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800872e:	f7f8 ff87 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008732:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f062 0219 	orn	r2, r2, #25
 800873c:	701a      	strb	r2, [r3, #0]
 800873e:	2200      	movs	r2, #0
 8008740:	705a      	strb	r2, [r3, #1]
 8008742:	2200      	movs	r2, #0
 8008744:	709a      	strb	r2, [r3, #2]
 8008746:	2200      	movs	r2, #0
 8008748:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f042 0201 	orr.w	r2, r2, #1
 8008752:	711a      	strb	r2, [r3, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	715a      	strb	r2, [r3, #5]
 8008758:	2200      	movs	r2, #0
 800875a:	719a      	strb	r2, [r3, #6]
 800875c:	2200      	movs	r2, #0
 800875e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008766:	f7f8 ffb3 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800876a:	f7f8 ff75 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 800876e:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	b2db      	uxtb	r3, r3
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <otCoapMessageGetCode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otCoapType)p_ot_req->Data[0];
}

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008786:	f7f8 ffd5 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800878a:	f7f8 ff59 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 800878e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f062 0217 	orn	r2, r2, #23
 8008798:	701a      	strb	r2, [r3, #0]
 800879a:	2200      	movs	r2, #0
 800879c:	705a      	strb	r2, [r3, #1]
 800879e:	2200      	movs	r2, #0
 80087a0:	709a      	strb	r2, [r3, #2]
 80087a2:	2200      	movs	r2, #0
 80087a4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f042 0201 	orr.w	r2, r2, #1
 80087ae:	711a      	strb	r2, [r3, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	715a      	strb	r2, [r3, #5]
 80087b4:	2200      	movs	r2, #0
 80087b6:	719a      	strb	r2, [r3, #6]
 80087b8:	2200      	movs	r2, #0
 80087ba:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80087c2:	f7f8 ff85 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80087c6:	f7f8 ff47 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 80087ca:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	b2db      	uxtb	r3, r3
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <otCoapMessageSetCode>:

void otCoapMessageSetCode(otMessage *aMessage, otCoapCode aCode)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80087e6:	f7f8 ffa5 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80087ea:	f7f8 ff29 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 80087ee:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_CODE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f062 0216 	orn	r2, r2, #22
 80087f8:	701a      	strb	r2, [r3, #0]
 80087fa:	2200      	movs	r2, #0
 80087fc:	705a      	strb	r2, [r3, #1]
 80087fe:	2200      	movs	r2, #0
 8008800:	709a      	strb	r2, [r3, #2]
 8008802:	2200      	movs	r2, #0
 8008804:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f042 0202 	orr.w	r2, r2, #2
 800880e:	711a      	strb	r2, [r3, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	715a      	strb	r2, [r3, #5]
 8008814:	2200      	movs	r2, #0
 8008816:	719a      	strb	r2, [r3, #6]
 8008818:	2200      	movs	r2, #0
 800881a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aCode;
 8008822:	78fa      	ldrb	r2, [r7, #3]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8008828:	f7f8 ff52 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800882c:	f7f8 ff14 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008830:	60f8      	str	r0, [r7, #12]
}
 8008832:	bf00      	nop
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <otCoapMessageGetTokenLength>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t)p_ot_req->Data[0];
}

uint8_t otCoapMessageGetTokenLength(const otMessage *aMessage)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008842:	f7f8 ff77 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008846:	f7f8 fefb 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 800884a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN_LENGTH;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f062 0213 	orn	r2, r2, #19
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	2200      	movs	r2, #0
 8008858:	705a      	strb	r2, [r3, #1]
 800885a:	2200      	movs	r2, #0
 800885c:	709a      	strb	r2, [r3, #2]
 800885e:	2200      	movs	r2, #0
 8008860:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f042 0201 	orr.w	r2, r2, #1
 800886a:	711a      	strb	r2, [r3, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	715a      	strb	r2, [r3, #5]
 8008870:	2200      	movs	r2, #0
 8008872:	719a      	strb	r2, [r3, #6]
 8008874:	2200      	movs	r2, #0
 8008876:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800887e:	f7f8 ff27 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008882:	f7f8 fee9 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008886:	60f8      	str	r0, [r7, #12]
  return (uint8_t)p_ot_req->Data[0];
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	b2db      	uxtb	r3, r3
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <otCoapMessageGetToken>:

const uint8_t *otCoapMessageGetToken(const otMessage *aMessage)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800889e:	f7f8 ff49 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80088a2:	f7f8 fecd 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 80088a6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f062 0212 	orn	r2, r2, #18
 80088b0:	701a      	strb	r2, [r3, #0]
 80088b2:	2200      	movs	r2, #0
 80088b4:	705a      	strb	r2, [r3, #1]
 80088b6:	2200      	movs	r2, #0
 80088b8:	709a      	strb	r2, [r3, #2]
 80088ba:	2200      	movs	r2, #0
 80088bc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f042 0201 	orr.w	r2, r2, #1
 80088c6:	711a      	strb	r2, [r3, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	715a      	strb	r2, [r3, #5]
 80088cc:	2200      	movs	r2, #0
 80088ce:	719a      	strb	r2, [r3, #6]
 80088d0:	2200      	movs	r2, #0
 80088d2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80088da:	f7f8 fef9 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80088de:	f7f8 febb 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 80088e2:	60f8      	str	r0, [r7, #12]
  return (uint8_t *)p_ot_req->Data[0];
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	689b      	ldr	r3, [r3, #8]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <otCoapSendRequestWithParameters>:
                                        otMessage *               aMessage,
                                        const otMessageInfo *     aMessageInfo,
                                        otCoapResponseHandler     aHandler,
                                        void *                    aContext,
                                        const otCoapTxParameters *aTxParameters)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
 80088fc:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 80088fe:	f7f8 ff19 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008902:	f7f8 fe9d 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008906:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST_WITH_PARAMETERS;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2200      	movs	r2, #0
 800890c:	f062 0209 	orn	r2, r2, #9
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	2200      	movs	r2, #0
 8008914:	705a      	strb	r2, [r3, #1]
 8008916:	2200      	movs	r2, #0
 8008918:	709a      	strb	r2, [r3, #2]
 800891a:	2200      	movs	r2, #0
 800891c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=5;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2200      	movs	r2, #0
 8008922:	f042 0205 	orr.w	r2, r2, #5
 8008926:	711a      	strb	r2, [r3, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	715a      	strb	r2, [r3, #5]
 800892c:	2200      	movs	r2, #0
 800892e:	719a      	strb	r2, [r3, #6]
 8008930:	2200      	movs	r2, #0
 8008932:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aHandler;
 8008940:	683a      	ldr	r2, [r7, #0]
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aContext;
 8008946:	6a3a      	ldr	r2, [r7, #32]
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	615a      	str	r2, [r3, #20]
  p_ot_req->Data[4] = (uint32_t) aTxParameters;
 800894c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	619a      	str	r2, [r3, #24]

  Ot_Cmd_Transfer();
 8008952:	f7f8 febd 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008956:	f7f8 fe7f 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 800895a:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	b2db      	uxtb	r3, r3
}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8008976:	f7f8 fedd 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800897a:	f7f8 fe61 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 800897e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f062 0207 	orn	r2, r2, #7
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	2200      	movs	r2, #0
 800898c:	705a      	strb	r2, [r3, #1]
 800898e:	2200      	movs	r2, #0
 8008990:	709a      	strb	r2, [r3, #2]
 8008992:	2200      	movs	r2, #0
 8008994:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f042 0201 	orr.w	r2, r2, #1
 800899e:	711a      	strb	r2, [r3, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	715a      	strb	r2, [r3, #5]
 80089a4:	2200      	movs	r2, #0
 80089a6:	719a      	strb	r2, [r3, #6]
 80089a8:	2200      	movs	r2, #0
 80089aa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 80089ac:	887a      	ldrh	r2, [r7, #2]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80089b2:	f7f8 fe8d 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80089b6:	f7f8 fe4f 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 80089ba:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	b2db      	uxtb	r3, r3
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80089d4:	f7f8 feae 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80089d8:	f7f8 fe32 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 80089dc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f062 0203 	orn	r2, r2, #3
 80089e6:	701a      	strb	r2, [r3, #0]
 80089e8:	2200      	movs	r2, #0
 80089ea:	705a      	strb	r2, [r3, #1]
 80089ec:	2200      	movs	r2, #0
 80089ee:	709a      	strb	r2, [r3, #2]
 80089f0:	2200      	movs	r2, #0
 80089f2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f042 0201 	orr.w	r2, r2, #1
 80089fc:	711a      	strb	r2, [r3, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	715a      	strb	r2, [r3, #5]
 8008a02:	2200      	movs	r2, #0
 8008a04:	719a      	strb	r2, [r3, #6]
 8008a06:	2200      	movs	r2, #0
 8008a08:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008a10:	f7f8 fe5e 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008a14:	f7f8 fe20 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008a18:	60f8      	str	r0, [r7, #12]
}
 8008a1a:	bf00      	nop
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b086      	sub	sp, #24
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
 8008a2e:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 8008a30:	f7f8 fe80 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008a34:	f7f8 fe04 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008a38:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	701a      	strb	r2, [r3, #0]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f042 0201 	orr.w	r2, r2, #1
 8008a46:	705a      	strb	r2, [r3, #1]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	709a      	strb	r2, [r3, #2]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f042 0203 	orr.w	r2, r2, #3
 8008a58:	711a      	strb	r2, [r3, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	715a      	strb	r2, [r3, #5]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	719a      	strb	r2, [r3, #6]
 8008a62:	2200      	movs	r2, #0
 8008a64:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8008a78:	f7f8 fe2a 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008a7c:	f7f8 fdec 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008a80:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	b2db      	uxtb	r3, r3
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <otDatasetSetActive>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otDatasetSetActive(otInstance *aInstance, const otOperationalDataset *aDataset)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008a9a:	f7f8 fe4b 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008a9e:	f7f8 fdcf 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008aa2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_DATASET_SET_ACTIVE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f042 0201 	orr.w	r2, r2, #1
 8008ab4:	705a      	strb	r2, [r3, #1]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	709a      	strb	r2, [r3, #2]
 8008aba:	2200      	movs	r2, #0
 8008abc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f042 0201 	orr.w	r2, r2, #1
 8008ac6:	711a      	strb	r2, [r3, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	715a      	strb	r2, [r3, #5]
 8008acc:	2200      	movs	r2, #0
 8008ace:	719a      	strb	r2, [r3, #6]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aDataset;
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008ada:	f7f8 fdf9 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008ade:	f7f8 fdbb 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008ae2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	b2db      	uxtb	r3, r3
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 8008af8:	f7f8 fe1c 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008afc:	f7f8 fda0 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008b00:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f062 0235 	orn	r2, r2, #53	; 0x35
 8008b0a:	701a      	strb	r2, [r3, #0]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	705a      	strb	r2, [r3, #1]
 8008b10:	2200      	movs	r2, #0
 8008b12:	709a      	strb	r2, [r3, #2]
 8008b14:	2200      	movs	r2, #0
 8008b16:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	711a      	strb	r2, [r3, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	715a      	strb	r2, [r3, #5]
 8008b22:	2200      	movs	r2, #0
 8008b24:	719a      	strb	r2, [r3, #6]
 8008b26:	2200      	movs	r2, #0
 8008b28:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8008b2a:	f7f8 fdd1 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008b2e:	f7f8 fd93 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008b32:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <otInstanceErasePersistentInfo>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008b48:	f7f8 fdf4 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008b4c:	f7f8 fd78 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008b50:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f062 022c 	orn	r2, r2, #44	; 0x2c
 8008b5a:	701a      	strb	r2, [r3, #0]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	705a      	strb	r2, [r3, #1]
 8008b60:	2200      	movs	r2, #0
 8008b62:	709a      	strb	r2, [r3, #2]
 8008b64:	2200      	movs	r2, #0
 8008b66:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	711a      	strb	r2, [r3, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	715a      	strb	r2, [r3, #5]
 8008b72:	2200      	movs	r2, #0
 8008b74:	719a      	strb	r2, [r3, #6]
 8008b76:	2200      	movs	r2, #0
 8008b78:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8008b7a:	f7f8 fda9 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008b7e:	f7f8 fd6b 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008b82:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	b2db      	uxtb	r3, r3
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8008b9e:	f7f8 fdc9 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008ba2:	f7f8 fd4d 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008ba6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	705a      	strb	r2, [r3, #1]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	709a      	strb	r2, [r3, #2]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f042 0201 	orr.w	r2, r2, #1
 8008bc6:	711a      	strb	r2, [r3, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	715a      	strb	r2, [r3, #5]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	719a      	strb	r2, [r3, #6]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8008bd4:	78fa      	ldrb	r2, [r7, #3]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008bda:	f7f8 fd79 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008bde:	f7f8 fd3b 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008be2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	b2db      	uxtb	r3, r3
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8008bfc:	f7f8 fd9a 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008c00:	f7f8 fd1e 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008c04:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f042 0210 	orr.w	r2, r2, #16
 8008c0e:	701a      	strb	r2, [r3, #0]
 8008c10:	2200      	movs	r2, #0
 8008c12:	705a      	strb	r2, [r3, #1]
 8008c14:	2200      	movs	r2, #0
 8008c16:	709a      	strb	r2, [r3, #2]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f042 0201 	orr.w	r2, r2, #1
 8008c24:	711a      	strb	r2, [r3, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	715a      	strb	r2, [r3, #5]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	719a      	strb	r2, [r3, #6]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008c38:	f7f8 fd4a 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008c3c:	f7f8 fd0c 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008c40:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	b2db      	uxtb	r3, r3
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008c58:	f7f8 fd6c 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008c5c:	f7f8 fcf0 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008c60:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f042 0216 	orr.w	r2, r2, #22
 8008c6a:	701a      	strb	r2, [r3, #0]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f042 0201 	orr.w	r2, r2, #1
 8008c72:	705a      	strb	r2, [r3, #1]
 8008c74:	2200      	movs	r2, #0
 8008c76:	709a      	strb	r2, [r3, #2]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f042 0201 	orr.w	r2, r2, #1
 8008c84:	711a      	strb	r2, [r3, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	715a      	strb	r2, [r3, #5]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	719a      	strb	r2, [r3, #6]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008c98:	f7f8 fd1a 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008c9c:	f7f8 fcdc 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008ca0:	60f8      	str	r0, [r7, #12]
}
 8008ca2:	bf00      	nop
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8008cb2:	f7f8 fd3f 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008cb6:	f7f8 fcc3 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008cba:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f042 0219 	orr.w	r2, r2, #25
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f042 0201 	orr.w	r2, r2, #1
 8008ccc:	705a      	strb	r2, [r3, #1]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	709a      	strb	r2, [r3, #2]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f042 0201 	orr.w	r2, r2, #1
 8008cde:	711a      	strb	r2, [r3, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	715a      	strb	r2, [r3, #5]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	719a      	strb	r2, [r3, #6]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8008cf2:	f7f8 fced 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008cf6:	f7f8 fcaf 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008cfa:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	b29b      	uxth	r3, r3
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <otMessageAppend>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b086      	sub	sp, #24
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	60f8      	str	r0, [r7, #12]
 8008d12:	60b9      	str	r1, [r7, #8]
 8008d14:	4613      	mov	r3, r2
 8008d16:	80fb      	strh	r3, [r7, #6]
  Pre_OtCmdProcessing();
 8008d18:	f7f8 fd0c 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008d1c:	f7f8 fc90 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008d20:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f042 021e 	orr.w	r2, r2, #30
 8008d2a:	701a      	strb	r2, [r3, #0]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f042 0201 	orr.w	r2, r2, #1
 8008d32:	705a      	strb	r2, [r3, #1]
 8008d34:	2200      	movs	r2, #0
 8008d36:	709a      	strb	r2, [r3, #2]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f042 0203 	orr.w	r2, r2, #3
 8008d44:	711a      	strb	r2, [r3, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	715a      	strb	r2, [r3, #5]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	719a      	strb	r2, [r3, #6]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aBuf;
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aLength;
 8008d5e:	88fa      	ldrh	r2, [r7, #6]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8008d64:	f7f8 fcb4 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008d68:	f7f8 fc76 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008d6c:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	b2db      	uxtb	r3, r3
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	607a      	str	r2, [r7, #4]
 8008d86:	461a      	mov	r2, r3
 8008d88:	460b      	mov	r3, r1
 8008d8a:	817b      	strh	r3, [r7, #10]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 8008d90:	f7f8 fcd0 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8008d94:	f7f8 fc54 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8008d98:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f042 021f 	orr.w	r2, r2, #31
 8008da2:	701a      	strb	r2, [r3, #0]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	705a      	strb	r2, [r3, #1]
 8008dac:	2200      	movs	r2, #0
 8008dae:	709a      	strb	r2, [r3, #2]
 8008db0:	2200      	movs	r2, #0
 8008db2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f042 0204 	orr.w	r2, r2, #4
 8008dbc:	711a      	strb	r2, [r3, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	715a      	strb	r2, [r3, #5]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	719a      	strb	r2, [r3, #6]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 8008dd0:	897a      	ldrh	r2, [r7, #10]
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 8008ddc:	893a      	ldrh	r2, [r7, #8]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8008de2:	f7f8 fc75 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8008de6:	f7f8 fc37 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8008dea:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	b29b      	uxth	r3, r3
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3718      	adds	r7, #24
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8008dfc:	b5b0      	push	{r4, r5, r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8008e06:	f7f8 fc33 	bl	8001670 <THREAD_Get_NotificationPayloadBuffer>
 8008e0a:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	2b48      	cmp	r3, #72	; 0x48
 8008e14:	f200 8543 	bhi.w	800989e <OpenThread_CallBack_Processing+0xaa2>
 8008e18:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <OpenThread_CallBack_Processing+0x24>)
 8008e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1e:	bf00      	nop
 8008e20:	0800918b 	.word	0x0800918b
 8008e24:	08009243 	.word	0x08009243
 8008e28:	0800929b 	.word	0x0800929b
 8008e2c:	08009347 	.word	0x08009347
 8008e30:	08009353 	.word	0x08009353
 8008e34:	08009371 	.word	0x08009371
 8008e38:	0800989f 	.word	0x0800989f
 8008e3c:	0800939b 	.word	0x0800939b
 8008e40:	080093b5 	.word	0x080093b5
 8008e44:	080093e9 	.word	0x080093e9
 8008e48:	08009407 	.word	0x08009407
 8008e4c:	08009425 	.word	0x08009425
 8008e50:	0800989f 	.word	0x0800989f
 8008e54:	0800944f 	.word	0x0800944f
 8008e58:	080094b1 	.word	0x080094b1
 8008e5c:	080094d7 	.word	0x080094d7
 8008e60:	080094f7 	.word	0x080094f7
 8008e64:	08009515 	.word	0x08009515
 8008e68:	0800989f 	.word	0x0800989f
 8008e6c:	0800953d 	.word	0x0800953d
 8008e70:	08009565 	.word	0x08009565
 8008e74:	0800989f 	.word	0x0800989f
 8008e78:	08009583 	.word	0x08009583
 8008e7c:	080095a7 	.word	0x080095a7
 8008e80:	080095d1 	.word	0x080095d1
 8008e84:	08008fb1 	.word	0x08008fb1
 8008e88:	08008fd5 	.word	0x08008fd5
 8008e8c:	08008ff9 	.word	0x08008ff9
 8008e90:	08009023 	.word	0x08009023
 8008e94:	0800989f 	.word	0x0800989f
 8008e98:	080095f1 	.word	0x080095f1
 8008e9c:	0800989f 	.word	0x0800989f
 8008ea0:	0800989f 	.word	0x0800989f
 8008ea4:	0800989f 	.word	0x0800989f
 8008ea8:	0800989f 	.word	0x0800989f
 8008eac:	0800989f 	.word	0x0800989f
 8008eb0:	08009279 	.word	0x08009279
 8008eb4:	080092d9 	.word	0x080092d9
 8008eb8:	080092ff 	.word	0x080092ff
 8008ebc:	08009325 	.word	0x08009325
 8008ec0:	08009613 	.word	0x08009613
 8008ec4:	08009651 	.word	0x08009651
 8008ec8:	08009669 	.word	0x08009669
 8008ecc:	080091a7 	.word	0x080091a7
 8008ed0:	0800920d 	.word	0x0800920d
 8008ed4:	0800989f 	.word	0x0800989f
 8008ed8:	0800904d 	.word	0x0800904d
 8008edc:	0800906d 	.word	0x0800906d
 8008ee0:	0800908d 	.word	0x0800908d
 8008ee4:	080090ad 	.word	0x080090ad
 8008ee8:	080090cf 	.word	0x080090cf
 8008eec:	080090f1 	.word	0x080090f1
 8008ef0:	0800989f 	.word	0x0800989f
 8008ef4:	0800989f 	.word	0x0800989f
 8008ef8:	08008f45 	.word	0x08008f45
 8008efc:	08008f69 	.word	0x08008f69
 8008f00:	08008f8d 	.word	0x08008f8d
 8008f04:	0800989f 	.word	0x0800989f
 8008f08:	0800989f 	.word	0x0800989f
 8008f0c:	08009113 	.word	0x08009113
 8008f10:	08009131 	.word	0x08009131
 8008f14:	0800989f 	.word	0x0800989f
 8008f18:	08009163 	.word	0x08009163
 8008f1c:	08009225 	.word	0x08009225
 8008f20:	08009697 	.word	0x08009697
 8008f24:	080096b5 	.word	0x080096b5
 8008f28:	080096d3 	.word	0x080096d3
 8008f2c:	08009751 	.word	0x08009751
 8008f30:	0800977f 	.word	0x0800977f
 8008f34:	080097c3 	.word	0x080097c3
 8008f38:	0800982d 	.word	0x0800982d
 8008f3c:	0800986b 	.word	0x0800986b
 8008f40:	080097f7 	.word	0x080097f7
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 8008f44:	4b9f      	ldr	r3, [pc, #636]	; (80091c4 <OpenThread_CallBack_Processing+0x3c8>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 84ab 	beq.w	80098a4 <OpenThread_CallBack_Processing+0xaa8>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008f4e:	4b9d      	ldr	r3, [pc, #628]	; (80091c4 <OpenThread_CallBack_Processing+0x3c8>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	6892      	ldr	r2, [r2, #8]
 8008f56:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008f5c:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8008f62:	4798      	blx	r3
    }
    break;
 8008f64:	f000 bc9e 	b.w	80098a4 <OpenThread_CallBack_Processing+0xaa8>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 8008f68:	4b97      	ldr	r3, [pc, #604]	; (80091c8 <OpenThread_CallBack_Processing+0x3cc>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 849b 	beq.w	80098a8 <OpenThread_CallBack_Processing+0xaac>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008f72:	4b95      	ldr	r3, [pc, #596]	; (80091c8 <OpenThread_CallBack_Processing+0x3cc>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	6892      	ldr	r2, [r2, #8]
 8008f7a:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008f80:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8008f86:	4798      	blx	r3
    }
    break;
 8008f88:	f000 bc8e 	b.w	80098a8 <OpenThread_CallBack_Processing+0xaac>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 8008f8c:	4b8f      	ldr	r3, [pc, #572]	; (80091cc <OpenThread_CallBack_Processing+0x3d0>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 848b 	beq.w	80098ac <OpenThread_CallBack_Processing+0xab0>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008f96:	4b8d      	ldr	r3, [pc, #564]	; (80091cc <OpenThread_CallBack_Processing+0x3d0>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	6892      	ldr	r2, [r2, #8]
 8008f9e:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008fa4:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8008faa:	4798      	blx	r3
    }
    break;
 8008fac:	f000 bc7e 	b.w	80098ac <OpenThread_CallBack_Processing+0xab0>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 8008fb0:	4b87      	ldr	r3, [pc, #540]	; (80091d0 <OpenThread_CallBack_Processing+0x3d4>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 847b 	beq.w	80098b0 <OpenThread_CallBack_Processing+0xab4>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008fba:	4b85      	ldr	r3, [pc, #532]	; (80091d0 <OpenThread_CallBack_Processing+0x3d4>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	6892      	ldr	r2, [r2, #8]
 8008fc2:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008fc8:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8008fce:	4798      	blx	r3
    }
    break;
 8008fd0:	f000 bc6e 	b.w	80098b0 <OpenThread_CallBack_Processing+0xab4>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 8008fd4:	4b7f      	ldr	r3, [pc, #508]	; (80091d4 <OpenThread_CallBack_Processing+0x3d8>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f000 846b 	beq.w	80098b4 <OpenThread_CallBack_Processing+0xab8>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008fde:	4b7d      	ldr	r3, [pc, #500]	; (80091d4 <OpenThread_CallBack_Processing+0x3d8>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	6892      	ldr	r2, [r2, #8]
 8008fe6:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008fec:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8008ff2:	4798      	blx	r3
    }
    break;
 8008ff4:	f000 bc5e 	b.w	80098b4 <OpenThread_CallBack_Processing+0xab8>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 8008ff8:	4b77      	ldr	r3, [pc, #476]	; (80091d8 <OpenThread_CallBack_Processing+0x3dc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 845b 	beq.w	80098b8 <OpenThread_CallBack_Processing+0xabc>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8009002:	4b75      	ldr	r3, [pc, #468]	; (80091d8 <OpenThread_CallBack_Processing+0x3dc>)
 8009004:	681c      	ldr	r4, [r3, #0]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8009010:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 8009016:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800901c:	47a0      	blx	r4
    }
    break;
 800901e:	f000 bc4b 	b.w	80098b8 <OpenThread_CallBack_Processing+0xabc>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 8009022:	4b6e      	ldr	r3, [pc, #440]	; (80091dc <OpenThread_CallBack_Processing+0x3e0>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 8448 	beq.w	80098bc <OpenThread_CallBack_Processing+0xac0>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800902c:	4b6b      	ldr	r3, [pc, #428]	; (80091dc <OpenThread_CallBack_Processing+0x3e0>)
 800902e:	681c      	ldr	r4, [r3, #0]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800903a:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8009040:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 8009046:	47a0      	blx	r4
    }
    break;
 8009048:	f000 bc38 	b.w	80098bc <OpenThread_CallBack_Processing+0xac0>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 800904c:	4b64      	ldr	r3, [pc, #400]	; (80091e0 <OpenThread_CallBack_Processing+0x3e4>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 8435 	beq.w	80098c0 <OpenThread_CallBack_Processing+0xac4>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8009056:	4b62      	ldr	r3, [pc, #392]	; (80091e0 <OpenThread_CallBack_Processing+0x3e4>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	6892      	ldr	r2, [r2, #8]
 800905e:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 8009064:	4611      	mov	r1, r2
 8009066:	4798      	blx	r3
    }
    break;
 8009068:	f000 bc2a 	b.w	80098c0 <OpenThread_CallBack_Processing+0xac4>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 800906c:	4b5d      	ldr	r3, [pc, #372]	; (80091e4 <OpenThread_CallBack_Processing+0x3e8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8427 	beq.w	80098c4 <OpenThread_CallBack_Processing+0xac8>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 8009076:	4b5b      	ldr	r3, [pc, #364]	; (80091e4 <OpenThread_CallBack_Processing+0x3e8>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	6892      	ldr	r2, [r2, #8]
 800907e:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 8009084:	4611      	mov	r1, r2
 8009086:	4798      	blx	r3
    }
    break;
 8009088:	f000 bc1c 	b.w	80098c4 <OpenThread_CallBack_Processing+0xac8>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 800908c:	4b56      	ldr	r3, [pc, #344]	; (80091e8 <OpenThread_CallBack_Processing+0x3ec>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 8419 	beq.w	80098c8 <OpenThread_CallBack_Processing+0xacc>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 8009096:	4b54      	ldr	r3, [pc, #336]	; (80091e8 <OpenThread_CallBack_Processing+0x3ec>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	6892      	ldr	r2, [r2, #8]
 800909e:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 80090a4:	4611      	mov	r1, r2
 80090a6:	4798      	blx	r3
    }
    break;
 80090a8:	f000 bc0e 	b.w	80098c8 <OpenThread_CallBack_Processing+0xacc>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 80090ac:	4b4f      	ldr	r3, [pc, #316]	; (80091ec <OpenThread_CallBack_Processing+0x3f0>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 840b 	beq.w	80098cc <OpenThread_CallBack_Processing+0xad0>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 80090b6:	4b4d      	ldr	r3, [pc, #308]	; (80091ec <OpenThread_CallBack_Processing+0x3f0>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	6892      	ldr	r2, [r2, #8]
 80090be:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 80090c4:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 80090ca:	4798      	blx	r3
    }
    break;
 80090cc:	e3fe      	b.n	80098cc <OpenThread_CallBack_Processing+0xad0>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 80090ce:	4b48      	ldr	r3, [pc, #288]	; (80091f0 <OpenThread_CallBack_Processing+0x3f4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f000 83fc 	beq.w	80098d0 <OpenThread_CallBack_Processing+0xad4>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 80090d8:	4b45      	ldr	r3, [pc, #276]	; (80091f0 <OpenThread_CallBack_Processing+0x3f4>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	6892      	ldr	r2, [r2, #8]
 80090e0:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 80090e6:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 80090ec:	4798      	blx	r3
    }
    break;
 80090ee:	e3ef      	b.n	80098d0 <OpenThread_CallBack_Processing+0xad4>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 80090f0:	4b3f      	ldr	r3, [pc, #252]	; (80091f0 <OpenThread_CallBack_Processing+0x3f4>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 83ed 	beq.w	80098d4 <OpenThread_CallBack_Processing+0xad8>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 80090fa:	4b3e      	ldr	r3, [pc, #248]	; (80091f4 <OpenThread_CallBack_Processing+0x3f8>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	6892      	ldr	r2, [r2, #8]
 8009102:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 8009108:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 800910e:	4798      	blx	r3
    }
    break;
 8009110:	e3e0      	b.n	80098d4 <OpenThread_CallBack_Processing+0xad8>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 8009112:	4b39      	ldr	r3, [pc, #228]	; (80091f8 <OpenThread_CallBack_Processing+0x3fc>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 83de 	beq.w	80098d8 <OpenThread_CallBack_Processing+0xadc>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800911c:	4b36      	ldr	r3, [pc, #216]	; (80091f8 <OpenThread_CallBack_Processing+0x3fc>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	6892      	ldr	r2, [r2, #8]
 8009124:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800912a:	4611      	mov	r1, r2
 800912c:	4798      	blx	r3
    }
    break;
 800912e:	e3d3      	b.n	80098d8 <OpenThread_CallBack_Processing+0xadc>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 8009130:	4b32      	ldr	r3, [pc, #200]	; (80091fc <OpenThread_CallBack_Processing+0x400>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 83d1 	beq.w	80098dc <OpenThread_CallBack_Processing+0xae0>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 800913a:	4b30      	ldr	r3, [pc, #192]	; (80091fc <OpenThread_CallBack_Processing+0x400>)
 800913c:	681c      	ldr	r4, [r3, #0]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 8009148:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 800914e:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 8009154:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	462b      	mov	r3, r5
 800915e:	47a0      	blx	r4
    }
    break;
 8009160:	e3bc      	b.n	80098dc <OpenThread_CallBack_Processing+0xae0>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 8009162:	4b27      	ldr	r3, [pc, #156]	; (8009200 <OpenThread_CallBack_Processing+0x404>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 83ba 	beq.w	80098e0 <OpenThread_CallBack_Processing+0xae4>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800916c:	4b24      	ldr	r3, [pc, #144]	; (8009200 <OpenThread_CallBack_Processing+0x404>)
 800916e:	681c      	ldr	r4, [r3, #0]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800917a:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009180:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009186:	47a0      	blx	r4
    }
    break;
 8009188:	e3aa      	b.n	80098e0 <OpenThread_CallBack_Processing+0xae4>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 800918a:	4b1e      	ldr	r3, [pc, #120]	; (8009204 <OpenThread_CallBack_Processing+0x408>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 83a8 	beq.w	80098e4 <OpenThread_CallBack_Processing+0xae8>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8009194:	4b1b      	ldr	r3, [pc, #108]	; (8009204 <OpenThread_CallBack_Processing+0x408>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 80091a0:	4611      	mov	r1, r2
 80091a2:	4798      	blx	r3
    }
    break;
 80091a4:	e39e      	b.n	80098e4 <OpenThread_CallBack_Processing+0xae8>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 80091a6:	4b18      	ldr	r3, [pc, #96]	; (8009208 <OpenThread_CallBack_Processing+0x40c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 839c 	beq.w	80098e8 <OpenThread_CallBack_Processing+0xaec>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 80091b0:	4b15      	ldr	r3, [pc, #84]	; (8009208 <OpenThread_CallBack_Processing+0x40c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	6892      	ldr	r2, [r2, #8]
 80091b8:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 80091be:	4611      	mov	r1, r2
 80091c0:	4798      	blx	r3
    }
    break;
 80091c2:	e391      	b.n	80098e8 <OpenThread_CallBack_Processing+0xaec>
 80091c4:	20000660 	.word	0x20000660
 80091c8:	20000668 	.word	0x20000668
 80091cc:	20000664 	.word	0x20000664
 80091d0:	200005f4 	.word	0x200005f4
 80091d4:	200005f0 	.word	0x200005f0
 80091d8:	200005f8 	.word	0x200005f8
 80091dc:	200005ec 	.word	0x200005ec
 80091e0:	2000066c 	.word	0x2000066c
 80091e4:	20000670 	.word	0x20000670
 80091e8:	20000674 	.word	0x20000674
 80091ec:	2000067c 	.word	0x2000067c
 80091f0:	20000678 	.word	0x20000678
 80091f4:	20000680 	.word	0x20000680
 80091f8:	2000068c 	.word	0x2000068c
 80091fc:	20000688 	.word	0x20000688
 8009200:	20000684 	.word	0x20000684
 8009204:	200005cc 	.word	0x200005cc
 8009208:	200005fc 	.word	0x200005fc
  case MSG_M0TOM4_THREAD_DETACH_GRACEFULLY_CB:
    if (otDetachGracefullyCb != NULL)
 800920c:	4b97      	ldr	r3, [pc, #604]	; (800946c <OpenThread_CallBack_Processing+0x670>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 836b 	beq.w	80098ec <OpenThread_CallBack_Processing+0xaf0>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 8009216:	4b95      	ldr	r3, [pc, #596]	; (800946c <OpenThread_CallBack_Processing+0x670>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	6892      	ldr	r2, [r2, #8]
 800921e:	4610      	mov	r0, r2
 8009220:	4798      	blx	r3
    }
    break;
 8009222:	e363      	b.n	80098ec <OpenThread_CallBack_Processing+0xaf0>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 8009224:	4b92      	ldr	r3, [pc, #584]	; (8009470 <OpenThread_CallBack_Processing+0x674>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 8361 	beq.w	80098f0 <OpenThread_CallBack_Processing+0xaf4>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800922e:	4b90      	ldr	r3, [pc, #576]	; (8009470 <OpenThread_CallBack_Processing+0x674>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	6892      	ldr	r2, [r2, #8]
 8009236:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800923c:	4611      	mov	r1, r2
 800923e:	4798      	blx	r3
    }
    break;
 8009240:	e356      	b.n	80098f0 <OpenThread_CallBack_Processing+0xaf4>
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	461a      	mov	r2, r3
 8009248:	4b8a      	ldr	r3, [pc, #552]	; (8009474 <OpenThread_CallBack_Processing+0x678>)
 800924a:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 800924c:	4b89      	ldr	r3, [pc, #548]	; (8009474 <OpenThread_CallBack_Processing+0x678>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	4a89      	ldr	r2, [pc, #548]	; (8009478 <OpenThread_CallBack_Processing+0x67c>)
 8009254:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 8009256:	4b88      	ldr	r3, [pc, #544]	; (8009478 <OpenThread_CallBack_Processing+0x67c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 834a 	beq.w	80098f4 <OpenThread_CallBack_Processing+0xaf8>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8009260:	4b85      	ldr	r3, [pc, #532]	; (8009478 <OpenThread_CallBack_Processing+0x67c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a83      	ldr	r2, [pc, #524]	; (8009474 <OpenThread_CallBack_Processing+0x678>)
 8009266:	6812      	ldr	r2, [r2, #0]
 8009268:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800926e:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8009274:	4798      	blx	r3
    }
    break;
 8009276:	e33d      	b.n	80098f4 <OpenThread_CallBack_Processing+0xaf8>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 8009278:	4b80      	ldr	r3, [pc, #512]	; (800947c <OpenThread_CallBack_Processing+0x680>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 833b 	beq.w	80098f8 <OpenThread_CallBack_Processing+0xafc>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009282:	4b7e      	ldr	r3, [pc, #504]	; (800947c <OpenThread_CallBack_Processing+0x680>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	6892      	ldr	r2, [r2, #8]
 800928a:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009290:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009296:	4798      	blx	r3
    }
    break;
 8009298:	e32e      	b.n	80098f8 <OpenThread_CallBack_Processing+0xafc>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	461a      	mov	r2, r3
 80092a0:	4b77      	ldr	r3, [pc, #476]	; (8009480 <OpenThread_CallBack_Processing+0x684>)
 80092a2:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 80092a4:	4b76      	ldr	r3, [pc, #472]	; (8009480 <OpenThread_CallBack_Processing+0x684>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	4a76      	ldr	r2, [pc, #472]	; (8009484 <OpenThread_CallBack_Processing+0x688>)
 80092ac:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 80092ae:	4b75      	ldr	r3, [pc, #468]	; (8009484 <OpenThread_CallBack_Processing+0x688>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 8322 	beq.w	80098fc <OpenThread_CallBack_Processing+0xb00>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80092b8:	4b72      	ldr	r3, [pc, #456]	; (8009484 <OpenThread_CallBack_Processing+0x688>)
 80092ba:	681c      	ldr	r4, [r3, #0]
 80092bc:	4b70      	ldr	r3, [pc, #448]	; (8009480 <OpenThread_CallBack_Processing+0x684>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80092c6:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80092cc:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	47a0      	blx	r4
    }
    break;
 80092d6:	e311      	b.n	80098fc <OpenThread_CallBack_Processing+0xb00>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 80092d8:	4b6b      	ldr	r3, [pc, #428]	; (8009488 <OpenThread_CallBack_Processing+0x68c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 830f 	beq.w	8009900 <OpenThread_CallBack_Processing+0xb04>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 80092e2:	4b69      	ldr	r3, [pc, #420]	; (8009488 <OpenThread_CallBack_Processing+0x68c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	6892      	ldr	r2, [r2, #8]
 80092ea:	2a00      	cmp	r2, #0
 80092ec:	bf14      	ite	ne
 80092ee:	2201      	movne	r2, #1
 80092f0:	2200      	moveq	r2, #0
 80092f2:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 80092f8:	4611      	mov	r1, r2
 80092fa:	4798      	blx	r3
    }
    break;
 80092fc:	e300      	b.n	8009900 <OpenThread_CallBack_Processing+0xb04>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 80092fe:	4b62      	ldr	r3, [pc, #392]	; (8009488 <OpenThread_CallBack_Processing+0x68c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 82fe 	beq.w	8009904 <OpenThread_CallBack_Processing+0xb08>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8009308:	4b5f      	ldr	r3, [pc, #380]	; (8009488 <OpenThread_CallBack_Processing+0x68c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	6892      	ldr	r2, [r2, #8]
 8009310:	2a00      	cmp	r2, #0
 8009312:	bf14      	ite	ne
 8009314:	2201      	movne	r2, #1
 8009316:	2200      	moveq	r2, #0
 8009318:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800931e:	4611      	mov	r1, r2
 8009320:	4798      	blx	r3
    }
    break;
 8009322:	e2ef      	b.n	8009904 <OpenThread_CallBack_Processing+0xb08>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 8009324:	4b59      	ldr	r3, [pc, #356]	; (800948c <OpenThread_CallBack_Processing+0x690>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 82ed 	beq.w	8009908 <OpenThread_CallBack_Processing+0xb0c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800932e:	4b57      	ldr	r3, [pc, #348]	; (800948c <OpenThread_CallBack_Processing+0x690>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	6892      	ldr	r2, [r2, #8]
 8009336:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800933c:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 8009342:	4798      	blx	r3
    }
    break;
 8009344:	e2e0      	b.n	8009908 <OpenThread_CallBack_Processing+0xb0c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 8009346:	2001      	movs	r0, #1
 8009348:	f000 fb78 	bl	8009a3c <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 800934c:	f7fb f857 	bl	80043fe <HAL_NVIC_SystemReset>
    break;
 8009350:	e317      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 8009352:	4b4f      	ldr	r3, [pc, #316]	; (8009490 <OpenThread_CallBack_Processing+0x694>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 82d8 	beq.w	800990c <OpenThread_CallBack_Processing+0xb10>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800935c:	4b4c      	ldr	r3, [pc, #304]	; (8009490 <OpenThread_CallBack_Processing+0x694>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	6892      	ldr	r2, [r2, #8]
 8009364:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800936a:	4611      	mov	r1, r2
 800936c:	4798      	blx	r3
    }
    break;
 800936e:	e2cd      	b.n	800990c <OpenThread_CallBack_Processing+0xb10>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 8009370:	4b48      	ldr	r3, [pc, #288]	; (8009494 <OpenThread_CallBack_Processing+0x698>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 82cb 	beq.w	8009910 <OpenThread_CallBack_Processing+0xb14>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800937a:	4b46      	ldr	r3, [pc, #280]	; (8009494 <OpenThread_CallBack_Processing+0x698>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	6892      	ldr	r2, [r2, #8]
 8009382:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009388:	2a00      	cmp	r2, #0
 800938a:	bf14      	ite	ne
 800938c:	2201      	movne	r2, #1
 800938e:	2200      	moveq	r2, #0
 8009390:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009396:	4798      	blx	r3
    }
    break;
 8009398:	e2ba      	b.n	8009910 <OpenThread_CallBack_Processing+0xb14>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 800939a:	4b3f      	ldr	r3, [pc, #252]	; (8009498 <OpenThread_CallBack_Processing+0x69c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 82b8 	beq.w	8009914 <OpenThread_CallBack_Processing+0xb18>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 80093a4:	4b3c      	ldr	r3, [pc, #240]	; (8009498 <OpenThread_CallBack_Processing+0x69c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 80093ac:	4611      	mov	r1, r2
 80093ae:	2000      	movs	r0, #0
 80093b0:	4798      	blx	r3
    }
    break;
 80093b2:	e2af      	b.n	8009914 <OpenThread_CallBack_Processing+0xb18>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 80093b4:	4b39      	ldr	r3, [pc, #228]	; (800949c <OpenThread_CallBack_Processing+0x6a0>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 82ad 	beq.w	8009918 <OpenThread_CallBack_Processing+0xb1c>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80093be:	4b37      	ldr	r3, [pc, #220]	; (800949c <OpenThread_CallBack_Processing+0x6a0>)
 80093c0:	681c      	ldr	r4, [r3, #0]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80093cc:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80093d2:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80093d8:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	462b      	mov	r3, r5
 80093e4:	47a0      	blx	r4
    }
    break;
 80093e6:	e297      	b.n	8009918 <OpenThread_CallBack_Processing+0xb1c>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 80093e8:	4b2d      	ldr	r3, [pc, #180]	; (80094a0 <OpenThread_CallBack_Processing+0x6a4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 8295 	beq.w	800991c <OpenThread_CallBack_Processing+0xb20>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80093f2:	4b2b      	ldr	r3, [pc, #172]	; (80094a0 <OpenThread_CallBack_Processing+0x6a4>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	6892      	ldr	r2, [r2, #8]
 80093fa:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8009400:	4611      	mov	r1, r2
 8009402:	4798      	blx	r3
    }
    break;
 8009404:	e28a      	b.n	800991c <OpenThread_CallBack_Processing+0xb20>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 8009406:	4b27      	ldr	r3, [pc, #156]	; (80094a4 <OpenThread_CallBack_Processing+0x6a8>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 8288 	beq.w	8009920 <OpenThread_CallBack_Processing+0xb24>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8009410:	4b24      	ldr	r3, [pc, #144]	; (80094a4 <OpenThread_CallBack_Processing+0x6a8>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	6892      	ldr	r2, [r2, #8]
 8009418:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800941e:	4611      	mov	r1, r2
 8009420:	4798      	blx	r3
    }
    break;
 8009422:	e27d      	b.n	8009920 <OpenThread_CallBack_Processing+0xb24>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 8009424:	4b20      	ldr	r3, [pc, #128]	; (80094a8 <OpenThread_CallBack_Processing+0x6ac>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 827b 	beq.w	8009924 <OpenThread_CallBack_Processing+0xb28>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800942e:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <OpenThread_CallBack_Processing+0x6ac>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	6892      	ldr	r2, [r2, #8]
 8009436:	4610      	mov	r0, r2
          p_notification->Data[1],
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800943c:	2a00      	cmp	r2, #0
 800943e:	bf14      	ite	ne
 8009440:	2201      	movne	r2, #1
 8009442:	2200      	moveq	r2, #0
 8009444:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800944a:	4798      	blx	r3
    }
    break;
 800944c:	e26a      	b.n	8009924 <OpenThread_CallBack_Processing+0xb28>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 800944e:	4b17      	ldr	r3, [pc, #92]	; (80094ac <OpenThread_CallBack_Processing+0x6b0>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 8268 	beq.w	8009928 <OpenThread_CallBack_Processing+0xb2c>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 8009458:	4b14      	ldr	r3, [pc, #80]	; (80094ac <OpenThread_CallBack_Processing+0x6b0>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	6892      	ldr	r2, [r2, #8]
 8009460:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 8009466:	4611      	mov	r1, r2
 8009468:	4798      	blx	r3
    }
    break;
 800946a:	e25d      	b.n	8009928 <OpenThread_CallBack_Processing+0xb2c>
 800946c:	20000600 	.word	0x20000600
 8009470:	20000604 	.word	0x20000604
 8009474:	20000648 	.word	0x20000648
 8009478:	2000063c 	.word	0x2000063c
 800947c:	20000640 	.word	0x20000640
 8009480:	2000064c 	.word	0x2000064c
 8009484:	20000644 	.word	0x20000644
 8009488:	20000654 	.word	0x20000654
 800948c:	20000650 	.word	0x20000650
 8009490:	200005d4 	.word	0x200005d4
 8009494:	200005d8 	.word	0x200005d8
 8009498:	200005d0 	.word	0x200005d0
 800949c:	200005dc 	.word	0x200005dc
 80094a0:	200005e0 	.word	0x200005e0
 80094a4:	200005e4 	.word	0x200005e4
 80094a8:	200005e8 	.word	0x200005e8
 80094ac:	20000608 	.word	0x20000608
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 80094b0:	4b95      	ldr	r3, [pc, #596]	; (8009708 <OpenThread_CallBack_Processing+0x90c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f000 8239 	beq.w	800992c <OpenThread_CallBack_Processing+0xb30>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80094ba:	4b93      	ldr	r3, [pc, #588]	; (8009708 <OpenThread_CallBack_Processing+0x90c>)
 80094bc:	681c      	ldr	r4, [r3, #0]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80094c6:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80094cc:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80094d2:	47a0      	blx	r4
    }
    break;
 80094d4:	e22a      	b.n	800992c <OpenThread_CallBack_Processing+0xb30>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 80094d6:	4b8d      	ldr	r3, [pc, #564]	; (800970c <OpenThread_CallBack_Processing+0x910>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 8228 	beq.w	8009930 <OpenThread_CallBack_Processing+0xb34>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 80094e0:	4b8a      	ldr	r3, [pc, #552]	; (800970c <OpenThread_CallBack_Processing+0x910>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	6892      	ldr	r2, [r2, #8]
 80094e8:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 80094f2:	4798      	blx	r3
    }
    break;
 80094f4:	e21c      	b.n	8009930 <OpenThread_CallBack_Processing+0xb34>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 80094f6:	4b86      	ldr	r3, [pc, #536]	; (8009710 <OpenThread_CallBack_Processing+0x914>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 821a 	beq.w	8009934 <OpenThread_CallBack_Processing+0xb38>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 8009500:	4b83      	ldr	r3, [pc, #524]	; (8009710 <OpenThread_CallBack_Processing+0x914>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	6892      	ldr	r2, [r2, #8]
 8009508:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800950e:	4611      	mov	r1, r2
 8009510:	4798      	blx	r3
    }
    break;
 8009512:	e20f      	b.n	8009934 <OpenThread_CallBack_Processing+0xb38>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 8009514:	4b7f      	ldr	r3, [pc, #508]	; (8009714 <OpenThread_CallBack_Processing+0x918>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 820d 	beq.w	8009938 <OpenThread_CallBack_Processing+0xb3c>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800951e:	4b7d      	ldr	r3, [pc, #500]	; (8009714 <OpenThread_CallBack_Processing+0x918>)
 8009520:	681c      	ldr	r4, [r3, #0]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800952c:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 8009532:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 8009538:	47a0      	blx	r4
    }
    break;
 800953a:	e1fd      	b.n	8009938 <OpenThread_CallBack_Processing+0xb3c>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 800953c:	4b76      	ldr	r3, [pc, #472]	; (8009718 <OpenThread_CallBack_Processing+0x91c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 81fb 	beq.w	800993c <OpenThread_CallBack_Processing+0xb40>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8009546:	4b74      	ldr	r3, [pc, #464]	; (8009718 <OpenThread_CallBack_Processing+0x91c>)
 8009548:	681c      	ldr	r4, [r3, #0]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8009554:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800955a:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8009560:	47a0      	blx	r4
    }
    break;
 8009562:	e1eb      	b.n	800993c <OpenThread_CallBack_Processing+0xb40>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 8009564:	4b6d      	ldr	r3, [pc, #436]	; (800971c <OpenThread_CallBack_Processing+0x920>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 81e9 	beq.w	8009940 <OpenThread_CallBack_Processing+0xb44>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800956e:	4b6b      	ldr	r3, [pc, #428]	; (800971c <OpenThread_CallBack_Processing+0x920>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	6892      	ldr	r2, [r2, #8]
 8009576:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 800957c:	4611      	mov	r1, r2
 800957e:	4798      	blx	r3
    }
    break;
 8009580:	e1de      	b.n	8009940 <OpenThread_CallBack_Processing+0xb44>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 8009582:	4b67      	ldr	r3, [pc, #412]	; (8009720 <OpenThread_CallBack_Processing+0x924>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 81dc 	beq.w	8009944 <OpenThread_CallBack_Processing+0xb48>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800958c:	4b64      	ldr	r3, [pc, #400]	; (8009720 <OpenThread_CallBack_Processing+0x924>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	6892      	ldr	r2, [r2, #8]
 8009594:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800959a:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80095a0:	b2d2      	uxtb	r2, r2
 80095a2:	4798      	blx	r3
    }
    break;
 80095a4:	e1ce      	b.n	8009944 <OpenThread_CallBack_Processing+0xb48>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 80095a6:	4b5f      	ldr	r3, [pc, #380]	; (8009724 <OpenThread_CallBack_Processing+0x928>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 81cc 	beq.w	8009948 <OpenThread_CallBack_Processing+0xb4c>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80095b0:	4b5c      	ldr	r3, [pc, #368]	; (8009724 <OpenThread_CallBack_Processing+0x928>)
 80095b2:	681c      	ldr	r4, [r3, #0]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80095be:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80095c4:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	47a0      	blx	r4
    }
    break;
 80095ce:	e1bb      	b.n	8009948 <OpenThread_CallBack_Processing+0xb4c>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 80095d0:	4b55      	ldr	r3, [pc, #340]	; (8009728 <OpenThread_CallBack_Processing+0x92c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 81b9 	beq.w	800994c <OpenThread_CallBack_Processing+0xb50>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80095da:	4b53      	ldr	r3, [pc, #332]	; (8009728 <OpenThread_CallBack_Processing+0x92c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	6892      	ldr	r2, [r2, #8]
 80095e2:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80095e8:	b252      	sxtb	r2, r2
 80095ea:	4611      	mov	r1, r2
 80095ec:	4798      	blx	r3
    }
    break;
 80095ee:	e1ad      	b.n	800994c <OpenThread_CallBack_Processing+0xb50>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 80095f0:	4b4e      	ldr	r3, [pc, #312]	; (800972c <OpenThread_CallBack_Processing+0x930>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 81ab 	beq.w	8009950 <OpenThread_CallBack_Processing+0xb54>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 80095fa:	4b4c      	ldr	r3, [pc, #304]	; (800972c <OpenThread_CallBack_Processing+0x930>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	6892      	ldr	r2, [r2, #8]
 8009602:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 8009608:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800960e:	4798      	blx	r3
    }
    break;
 8009610:	e19e      	b.n	8009950 <OpenThread_CallBack_Processing+0xb54>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	461a      	mov	r2, r3
 8009618:	4b45      	ldr	r3, [pc, #276]	; (8009730 <OpenThread_CallBack_Processing+0x934>)
 800961a:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 800961c:	4b44      	ldr	r3, [pc, #272]	; (8009730 <OpenThread_CallBack_Processing+0x934>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	4a44      	ldr	r2, [pc, #272]	; (8009734 <OpenThread_CallBack_Processing+0x938>)
 8009624:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 8009626:	4b43      	ldr	r3, [pc, #268]	; (8009734 <OpenThread_CallBack_Processing+0x938>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 8192 	beq.w	8009954 <OpenThread_CallBack_Processing+0xb58>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 8009630:	4b40      	ldr	r3, [pc, #256]	; (8009734 <OpenThread_CallBack_Processing+0x938>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a3e      	ldr	r2, [pc, #248]	; (8009730 <OpenThread_CallBack_Processing+0x934>)
 8009636:	6812      	ldr	r2, [r2, #0]
 8009638:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800963e:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 8009644:	4798      	blx	r3
 8009646:	4603      	mov	r3, r0
 8009648:	461a      	mov	r2, r3
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	609a      	str	r2, [r3, #8]
      }
      break;
 800964e:	e181      	b.n	8009954 <OpenThread_CallBack_Processing+0xb58>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 8009650:	4b39      	ldr	r3, [pc, #228]	; (8009738 <OpenThread_CallBack_Processing+0x93c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 817f 	beq.w	8009958 <OpenThread_CallBack_Processing+0xb5c>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 800965a:	4b37      	ldr	r3, [pc, #220]	; (8009738 <OpenThread_CallBack_Processing+0x93c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	6892      	ldr	r2, [r2, #8]
 8009662:	4610      	mov	r0, r2
 8009664:	4798      	blx	r3
    }
    break;
 8009666:	e177      	b.n	8009958 <OpenThread_CallBack_Processing+0xb5c>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 8009668:	4b34      	ldr	r3, [pc, #208]	; (800973c <OpenThread_CallBack_Processing+0x940>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	f000 8175 	beq.w	800995c <OpenThread_CallBack_Processing+0xb60>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 8009672:	4b32      	ldr	r3, [pc, #200]	; (800973c <OpenThread_CallBack_Processing+0x940>)
 8009674:	6819      	ldr	r1, [r3, #0]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 8009680:	2200      	movs	r2, #0
 8009682:	461c      	mov	r4, r3
 8009684:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800968a:	b2db      	uxtb	r3, r3
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	4622      	mov	r2, r4
 8009690:	462b      	mov	r3, r5
 8009692:	4788      	blx	r1
    }
    break;
 8009694:	e162      	b.n	800995c <OpenThread_CallBack_Processing+0xb60>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 8009696:	4b2a      	ldr	r3, [pc, #168]	; (8009740 <OpenThread_CallBack_Processing+0x944>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 8160 	beq.w	8009960 <OpenThread_CallBack_Processing+0xb64>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 80096a0:	4b27      	ldr	r3, [pc, #156]	; (8009740 <OpenThread_CallBack_Processing+0x944>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	6892      	ldr	r2, [r2, #8]
 80096a8:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 80096ae:	4611      	mov	r1, r2
 80096b0:	4798      	blx	r3
    }
    break;
 80096b2:	e155      	b.n	8009960 <OpenThread_CallBack_Processing+0xb64>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 80096b4:	4b23      	ldr	r3, [pc, #140]	; (8009744 <OpenThread_CallBack_Processing+0x948>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 8153 	beq.w	8009964 <OpenThread_CallBack_Processing+0xb68>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 80096be:	4b21      	ldr	r3, [pc, #132]	; (8009744 <OpenThread_CallBack_Processing+0x948>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	6892      	ldr	r2, [r2, #8]
 80096c6:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 80096cc:	4611      	mov	r1, r2
 80096ce:	4798      	blx	r3
    }
    break;
 80096d0:	e148      	b.n	8009964 <OpenThread_CallBack_Processing+0xb68>
//      otTcpBytesAckedCb((otTcpEndpoint *) p_notification->Data[0],
//          (size_t) p_notification->Data[1]);
//    }
//    break;
  case MSG_M0TOM4_TCP_DISCONNECTED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80096da:	4a1b      	ldr	r2, [pc, #108]	; (8009748 <OpenThread_CallBack_Processing+0x94c>)
 80096dc:	6013      	str	r3, [r2, #0]

    otTcpDisconnectedCb = mySTTcpEndpointHandlerContext->mDisconnectedCallback;
 80096de:	4b1a      	ldr	r3, [pc, #104]	; (8009748 <OpenThread_CallBack_Processing+0x94c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	4a19      	ldr	r2, [pc, #100]	; (800974c <OpenThread_CallBack_Processing+0x950>)
 80096e6:	6013      	str	r3, [r2, #0]

    if (otTcpDisconnectedCb != NULL)
 80096e8:	4b18      	ldr	r3, [pc, #96]	; (800974c <OpenThread_CallBack_Processing+0x950>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 813b 	beq.w	8009968 <OpenThread_CallBack_Processing+0xb6c>
    {
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 80096f2:	4b16      	ldr	r3, [pc, #88]	; (800974c <OpenThread_CallBack_Processing+0x950>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	6892      	ldr	r2, [r2, #8]
 80096fa:	4610      	mov	r0, r2
          (otTcpDisconnectedReason) p_notification->Data[1]);
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	68d2      	ldr	r2, [r2, #12]
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 8009700:	b2d2      	uxtb	r2, r2
 8009702:	4611      	mov	r1, r2
 8009704:	4798      	blx	r3
    }
    break;
 8009706:	e12f      	b.n	8009968 <OpenThread_CallBack_Processing+0xb6c>
 8009708:	20000614 	.word	0x20000614
 800970c:	20000618 	.word	0x20000618
 8009710:	2000060c 	.word	0x2000060c
 8009714:	20000610 	.word	0x20000610
 8009718:	2000061c 	.word	0x2000061c
 800971c:	20000620 	.word	0x20000620
 8009720:	20000624 	.word	0x20000624
 8009724:	20000628 	.word	0x20000628
 8009728:	2000062c 	.word	0x2000062c
 800972c:	20000630 	.word	0x20000630
 8009730:	20000638 	.word	0x20000638
 8009734:	20000634 	.word	0x20000634
 8009738:	20000658 	.word	0x20000658
 800973c:	2000065c 	.word	0x2000065c
 8009740:	20000690 	.word	0x20000690
 8009744:	20000694 	.word	0x20000694
 8009748:	20000698 	.word	0x20000698
 800974c:	200006a0 	.word	0x200006a0
  case MSG_M0TOM4_TCP_ESTABLISHED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009758:	4a8d      	ldr	r2, [pc, #564]	; (8009990 <OpenThread_CallBack_Processing+0xb94>)
 800975a:	6013      	str	r3, [r2, #0]

    otTcpEstablishedCb = mySTTcpEndpointHandlerContext->mEstablishedCallback;
 800975c:	4b8c      	ldr	r3, [pc, #560]	; (8009990 <OpenThread_CallBack_Processing+0xb94>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	4a8c      	ldr	r2, [pc, #560]	; (8009994 <OpenThread_CallBack_Processing+0xb98>)
 8009764:	6013      	str	r3, [r2, #0]

    if (otTcpEstablishedCb != NULL)
 8009766:	4b8b      	ldr	r3, [pc, #556]	; (8009994 <OpenThread_CallBack_Processing+0xb98>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 80fe 	beq.w	800996c <OpenThread_CallBack_Processing+0xb70>
    {
      otTcpEstablishedCb((otTcpEndpoint *) p_notification->Data[0]);
 8009770:	4b88      	ldr	r3, [pc, #544]	; (8009994 <OpenThread_CallBack_Processing+0xb98>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	6892      	ldr	r2, [r2, #8]
 8009778:	4610      	mov	r0, r2
 800977a:	4798      	blx	r3
    }
    break;
 800977c:	e0f6      	b.n	800996c <OpenThread_CallBack_Processing+0xb70>
  case MSG_M0TOM4_TCP_RECEIVE_AVAILABLE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009786:	4a82      	ldr	r2, [pc, #520]	; (8009990 <OpenThread_CallBack_Processing+0xb94>)
 8009788:	6013      	str	r3, [r2, #0]

    otTcpReceiveAvailableCb = mySTTcpEndpointHandlerContext->mReceiveAvailableCallback;
 800978a:	4b81      	ldr	r3, [pc, #516]	; (8009990 <OpenThread_CallBack_Processing+0xb94>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	4a81      	ldr	r2, [pc, #516]	; (8009998 <OpenThread_CallBack_Processing+0xb9c>)
 8009792:	6013      	str	r3, [r2, #0]

    if (otTcpReceiveAvailableCb != NULL)
 8009794:	4b80      	ldr	r3, [pc, #512]	; (8009998 <OpenThread_CallBack_Processing+0xb9c>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 80e9 	beq.w	8009970 <OpenThread_CallBack_Processing+0xb74>
    {
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800979e:	4b7e      	ldr	r3, [pc, #504]	; (8009998 <OpenThread_CallBack_Processing+0xb9c>)
 80097a0:	681c      	ldr	r4, [r3, #0]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	4618      	mov	r0, r3
          (size_t) p_notification->Data[1],
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	68d9      	ldr	r1, [r3, #12]
          (bool) p_notification->Data[2],
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	691b      	ldr	r3, [r3, #16]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bf14      	ite	ne
 80097b4:	2301      	movne	r3, #1
 80097b6:	2300      	moveq	r3, #0
 80097b8:	b2da      	uxtb	r2, r3
          (size_t) p_notification->Data[3]);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 80097be:	47a0      	blx	r4
    }
    break;
 80097c0:	e0d6      	b.n	8009970 <OpenThread_CallBack_Processing+0xb74>
  case MSG_M0TOM4_TCP_SEND_DONE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80097ca:	4a71      	ldr	r2, [pc, #452]	; (8009990 <OpenThread_CallBack_Processing+0xb94>)
 80097cc:	6013      	str	r3, [r2, #0]

    otTcpSendDoneCb = mySTTcpEndpointHandlerContext->mSendDoneCallback;
 80097ce:	4b70      	ldr	r3, [pc, #448]	; (8009990 <OpenThread_CallBack_Processing+0xb94>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	4a71      	ldr	r2, [pc, #452]	; (800999c <OpenThread_CallBack_Processing+0xba0>)
 80097d6:	6013      	str	r3, [r2, #0]

    if (otTcpSendDoneCb != NULL)
 80097d8:	4b70      	ldr	r3, [pc, #448]	; (800999c <OpenThread_CallBack_Processing+0xba0>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 80c9 	beq.w	8009974 <OpenThread_CallBack_Processing+0xb78>
    {
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 80097e2:	4b6e      	ldr	r3, [pc, #440]	; (800999c <OpenThread_CallBack_Processing+0xba0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	6892      	ldr	r2, [r2, #8]
 80097ea:	4610      	mov	r0, r2
          (otLinkedBuffer *) p_notification->Data[1]);
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	68d2      	ldr	r2, [r2, #12]
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 80097f0:	4611      	mov	r1, r2
 80097f2:	4798      	blx	r3
    }
    break;
 80097f4:	e0be      	b.n	8009974 <OpenThread_CallBack_Processing+0xb78>
//    {
//      otTcpSendReadyCb((otTcpEndpoint *) p_notification->Data[0]);
//    }
//    break;
  case MSG_M0TOM4_TCP_FORWARD_PROGRESS_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80097fe:	4a64      	ldr	r2, [pc, #400]	; (8009990 <OpenThread_CallBack_Processing+0xb94>)
 8009800:	6013      	str	r3, [r2, #0]

    mForwardProgressCallback = mySTTcpEndpointHandlerContext->mForwardProgressCallback;
 8009802:	4b63      	ldr	r3, [pc, #396]	; (8009990 <OpenThread_CallBack_Processing+0xb94>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	4a65      	ldr	r2, [pc, #404]	; (80099a0 <OpenThread_CallBack_Processing+0xba4>)
 800980a:	6013      	str	r3, [r2, #0]

    if (mForwardProgressCallback != NULL)
 800980c:	4b64      	ldr	r3, [pc, #400]	; (80099a0 <OpenThread_CallBack_Processing+0xba4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 80b1 	beq.w	8009978 <OpenThread_CallBack_Processing+0xb7c>
    {
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 8009816:	4b62      	ldr	r3, [pc, #392]	; (80099a0 <OpenThread_CallBack_Processing+0xba4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	6892      	ldr	r2, [r2, #8]
 800981e:	4610      	mov	r0, r2
          (size_t) p_notification->Data[1],
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	68d1      	ldr	r1, [r2, #12]
          (size_t) p_notification->Data[2]);
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	6912      	ldr	r2, [r2, #16]
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 8009828:	4798      	blx	r3
    }
    break;
 800982a:	e0a5      	b.n	8009978 <OpenThread_CallBack_Processing+0xb7c>
  case MSG_M0TOM4_TCP_ACCEPT_READY_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	4a5c      	ldr	r2, [pc, #368]	; (80099a4 <OpenThread_CallBack_Processing+0xba8>)
 8009834:	6013      	str	r3, [r2, #0]

    otTcpAcceptReadyCb = mySTTcpListenerHandlerContext->mAcceptReadyCallback;
 8009836:	4b5b      	ldr	r3, [pc, #364]	; (80099a4 <OpenThread_CallBack_Processing+0xba8>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	4a5a      	ldr	r2, [pc, #360]	; (80099a8 <OpenThread_CallBack_Processing+0xbac>)
 800983e:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptReadyCb != NULL)
 8009840:	4b59      	ldr	r3, [pc, #356]	; (80099a8 <OpenThread_CallBack_Processing+0xbac>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 8099 	beq.w	800997c <OpenThread_CallBack_Processing+0xb80>
    {
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800984a:	4b57      	ldr	r3, [pc, #348]	; (80099a8 <OpenThread_CallBack_Processing+0xbac>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	6892      	ldr	r2, [r2, #8]
 8009852:	4610      	mov	r0, r2
          (const otSockAddr *) p_notification->Data[1],
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	68d2      	ldr	r2, [r2, #12]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 8009858:	4611      	mov	r1, r2
          (otTcpEndpoint **) p_notification->Data[2]);
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	6912      	ldr	r2, [r2, #16]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800985e:	4798      	blx	r3
 8009860:	4603      	mov	r3, r0
 8009862:	461a      	mov	r2, r3
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	609a      	str	r2, [r3, #8]
    }
    break;
 8009868:	e088      	b.n	800997c <OpenThread_CallBack_Processing+0xb80>
  case MSG_M0TOM4_TCP_ACCEPT_DONE_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	4a4c      	ldr	r2, [pc, #304]	; (80099a4 <OpenThread_CallBack_Processing+0xba8>)
 8009872:	6013      	str	r3, [r2, #0]

    otTcpAcceptDoneCb = mySTTcpListenerHandlerContext->mAcceptDoneCallback;
 8009874:	4b4b      	ldr	r3, [pc, #300]	; (80099a4 <OpenThread_CallBack_Processing+0xba8>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	4a4c      	ldr	r2, [pc, #304]	; (80099ac <OpenThread_CallBack_Processing+0xbb0>)
 800987c:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptDoneCb != NULL)
 800987e:	4b4b      	ldr	r3, [pc, #300]	; (80099ac <OpenThread_CallBack_Processing+0xbb0>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d07c      	beq.n	8009980 <OpenThread_CallBack_Processing+0xb84>
    {
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 8009886:	4b49      	ldr	r3, [pc, #292]	; (80099ac <OpenThread_CallBack_Processing+0xbb0>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	6892      	ldr	r2, [r2, #8]
 800988e:	4610      	mov	r0, r2
          (otTcpEndpoint *) p_notification->Data[1],
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	68d2      	ldr	r2, [r2, #12]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 8009894:	4611      	mov	r1, r2
          (const otSockAddr *) p_notification->Data[2]);
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	6912      	ldr	r2, [r2, #16]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800989a:	4798      	blx	r3
    }
    break;
 800989c:	e070      	b.n	8009980 <OpenThread_CallBack_Processing+0xb84>
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	71fb      	strb	r3, [r7, #7]
    break;
 80098a2:	e06e      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098a4:	bf00      	nop
 80098a6:	e06c      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098a8:	bf00      	nop
 80098aa:	e06a      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098ac:	bf00      	nop
 80098ae:	e068      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098b0:	bf00      	nop
 80098b2:	e066      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098b4:	bf00      	nop
 80098b6:	e064      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098b8:	bf00      	nop
 80098ba:	e062      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098bc:	bf00      	nop
 80098be:	e060      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098c0:	bf00      	nop
 80098c2:	e05e      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098c4:	bf00      	nop
 80098c6:	e05c      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098c8:	bf00      	nop
 80098ca:	e05a      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098cc:	bf00      	nop
 80098ce:	e058      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098d0:	bf00      	nop
 80098d2:	e056      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098d4:	bf00      	nop
 80098d6:	e054      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098d8:	bf00      	nop
 80098da:	e052      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098dc:	bf00      	nop
 80098de:	e050      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098e0:	bf00      	nop
 80098e2:	e04e      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098e4:	bf00      	nop
 80098e6:	e04c      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098e8:	bf00      	nop
 80098ea:	e04a      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098ec:	bf00      	nop
 80098ee:	e048      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098f0:	bf00      	nop
 80098f2:	e046      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098f4:	bf00      	nop
 80098f6:	e044      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098f8:	bf00      	nop
 80098fa:	e042      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 80098fc:	bf00      	nop
 80098fe:	e040      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009900:	bf00      	nop
 8009902:	e03e      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009904:	bf00      	nop
 8009906:	e03c      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009908:	bf00      	nop
 800990a:	e03a      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 800990c:	bf00      	nop
 800990e:	e038      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009910:	bf00      	nop
 8009912:	e036      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009914:	bf00      	nop
 8009916:	e034      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009918:	bf00      	nop
 800991a:	e032      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 800991c:	bf00      	nop
 800991e:	e030      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009920:	bf00      	nop
 8009922:	e02e      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009924:	bf00      	nop
 8009926:	e02c      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009928:	bf00      	nop
 800992a:	e02a      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 800992c:	bf00      	nop
 800992e:	e028      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009930:	bf00      	nop
 8009932:	e026      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009934:	bf00      	nop
 8009936:	e024      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009938:	bf00      	nop
 800993a:	e022      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 800993c:	bf00      	nop
 800993e:	e020      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009940:	bf00      	nop
 8009942:	e01e      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009944:	bf00      	nop
 8009946:	e01c      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009948:	bf00      	nop
 800994a:	e01a      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 800994c:	bf00      	nop
 800994e:	e018      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009950:	bf00      	nop
 8009952:	e016      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
      break;
 8009954:	bf00      	nop
 8009956:	e014      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009958:	bf00      	nop
 800995a:	e012      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 800995c:	bf00      	nop
 800995e:	e010      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009960:	bf00      	nop
 8009962:	e00e      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009964:	bf00      	nop
 8009966:	e00c      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009968:	bf00      	nop
 800996a:	e00a      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 800996c:	bf00      	nop
 800996e:	e008      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009970:	bf00      	nop
 8009972:	e006      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009974:	bf00      	nop
 8009976:	e004      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009978:	bf00      	nop
 800997a:	e002      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 800997c:	bf00      	nop
 800997e:	e000      	b.n	8009982 <OpenThread_CallBack_Processing+0xb86>
    break;
 8009980:	bf00      	nop
  }

  TL_THREAD_SendAck();
 8009982:	f000 fdbd 	bl	800a500 <TL_THREAD_SendAck>
  return status;
 8009986:	79fb      	ldrb	r3, [r7, #7]

}
 8009988:	4618      	mov	r0, r3
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bdb0      	pop	{r4, r5, r7, pc}
 8009990:	20000698 	.word	0x20000698
 8009994:	200006a4 	.word	0x200006a4
 8009998:	200006a8 	.word	0x200006a8
 800999c:	200006ac 	.word	0x200006ac
 80099a0:	200006b8 	.word	0x200006b8
 80099a4:	2000069c 	.word	0x2000069c
 80099a8:	200006b0 	.word	0x200006b0
 80099ac:	200006b4 	.word	0x200006b4

080099b0 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 80099bc:	f7f7 feba 	bl	8001734 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80099c0:	f7f7 fe3e 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 80099c4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80099ce:	701a      	strb	r2, [r3, #0]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f042 0202 	orr.w	r2, r2, #2
 80099d6:	705a      	strb	r2, [r3, #1]
 80099d8:	2200      	movs	r2, #0
 80099da:	709a      	strb	r2, [r3, #2]
 80099dc:	2200      	movs	r2, #0
 80099de:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f042 0201 	orr.w	r2, r2, #1
 80099e8:	711a      	strb	r2, [r3, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	715a      	strb	r2, [r3, #5]
 80099ee:	2200      	movs	r2, #0
 80099f0:	719a      	strb	r2, [r3, #6]
 80099f2:	2200      	movs	r2, #0
 80099f4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 80099f6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80099fe:	f7f7 fe67 	bl	80016d0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009a02:	f7f7 fe29 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009a06:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	b2db      	uxtb	r3, r3
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b086      	sub	sp, #24
 8009a1a:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009a1c:	1d3b      	adds	r3, r7, #4
 8009a1e:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	2200      	movs	r2, #0
 8009a24:	2100      	movs	r1, #0
 8009a26:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8009a2a:	f000 f957 	bl	8009cdc <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	330b      	adds	r3, #11
 8009a32:	78db      	ldrb	r3, [r3, #3]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b088      	sub	sp, #32
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009a46:	f107 030c 	add.w	r3, r7, #12
 8009a4a:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8009a50:	f107 020c 	add.w	r2, r7, #12
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	2101      	movs	r1, #1
 8009a58:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8009a5c:	f000 f93e 	bl	8009cdc <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	330b      	adds	r3, #11
 8009a64:	78db      	ldrb	r3, [r3, #3]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3720      	adds	r7, #32
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b088      	sub	sp, #32
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	4603      	mov	r3, r0
 8009a76:	460a      	mov	r2, r1
 8009a78:	71fb      	strb	r3, [r7, #7]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009a7e:	f107 030c 	add.w	r3, r7, #12
 8009a82:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8009a84:	79fb      	ldrb	r3, [r7, #7]
 8009a86:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 8009a88:	79bb      	ldrb	r3, [r7, #6]
 8009a8a:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 8009a8c:	f107 020c 	add.w	r2, r7, #12
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	2102      	movs	r1, #2
 8009a94:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 8009a98:	f000 f920 	bl	8009cdc <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	330b      	adds	r3, #11
 8009aa0:	78db      	ldrb	r3, [r3, #3]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3720      	adds	r7, #32
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b08b      	sub	sp, #44	; 0x2c
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009acc:	2300      	movs	r3, #0
 8009ace:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009ad4:	4b4a      	ldr	r3, [pc, #296]	; (8009c00 <SHCI_GetWirelessFwInfo+0x154>)
 8009ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009adc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009ae6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a44      	ldr	r2, [pc, #272]	; (8009c04 <SHCI_GetWirelessFwInfo+0x158>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d10f      	bne.n	8009b18 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	695b      	ldr	r3, [r3, #20]
 8009afc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	69db      	ldr	r3, [r3, #28]
 8009b08:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	617b      	str	r3, [r7, #20]
 8009b16:	e01a      	b.n	8009b4e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009b20:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009b24:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	0e1b      	lsrs	r3, r3, #24
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	0c1b      	lsrs	r3, r3, #16
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	0a1b      	lsrs	r3, r3, #8
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	091b      	lsrs	r3, r3, #4
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	f003 030f 	and.w	r3, r3, #15
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	f003 030f 	and.w	r3, r3, #15
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	0e1b      	lsrs	r3, r3, #24
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	0c1b      	lsrs	r3, r3, #16
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	0a1b      	lsrs	r3, r3, #8
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	0e1b      	lsrs	r3, r3, #24
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	0c1b      	lsrs	r3, r3, #16
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	0a1b      	lsrs	r3, r3, #8
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	0e1b      	lsrs	r3, r3, #24
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	0c1b      	lsrs	r3, r3, #16
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	372c      	adds	r7, #44	; 0x2c
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	58004000 	.word	0x58004000
 8009c04:	a94656b9 	.word	0xa94656b9

08009c08 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	4a08      	ldr	r2, [pc, #32]	; (8009c38 <shci_init+0x30>)
 8009c18:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009c1a:	4a08      	ldr	r2, [pc, #32]	; (8009c3c <shci_init+0x34>)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009c20:	4806      	ldr	r0, [pc, #24]	; (8009c3c <shci_init+0x34>)
 8009c22:	f000 f911 	bl	8009e48 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 f894 	bl	8009d58 <TlInit>

  return;
 8009c30:	bf00      	nop
}
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	200006dc 	.word	0x200006dc
 8009c3c:	200006bc 	.word	0x200006bc

08009c40 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009c46:	4822      	ldr	r0, [pc, #136]	; (8009cd0 <shci_user_evt_proc+0x90>)
 8009c48:	f001 f86e 	bl	800ad28 <LST_is_empty>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d12b      	bne.n	8009caa <shci_user_evt_proc+0x6a>
 8009c52:	4b20      	ldr	r3, [pc, #128]	; (8009cd4 <shci_user_evt_proc+0x94>)
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d027      	beq.n	8009caa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009c5a:	f107 030c 	add.w	r3, r7, #12
 8009c5e:	4619      	mov	r1, r3
 8009c60:	481b      	ldr	r0, [pc, #108]	; (8009cd0 <shci_user_evt_proc+0x90>)
 8009c62:	f001 f8f0 	bl	800ae46 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009c66:	4b1c      	ldr	r3, [pc, #112]	; (8009cd8 <shci_user_evt_proc+0x98>)
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00c      	beq.n	8009c88 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009c72:	2301      	movs	r3, #1
 8009c74:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009c76:	4b18      	ldr	r3, [pc, #96]	; (8009cd8 <shci_user_evt_proc+0x98>)
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	1d3a      	adds	r2, r7, #4
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009c80:	793a      	ldrb	r2, [r7, #4]
 8009c82:	4b14      	ldr	r3, [pc, #80]	; (8009cd4 <shci_user_evt_proc+0x94>)
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	e002      	b.n	8009c8e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009c88:	4b12      	ldr	r3, [pc, #72]	; (8009cd4 <shci_user_evt_proc+0x94>)
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009c8e:	4b11      	ldr	r3, [pc, #68]	; (8009cd4 <shci_user_evt_proc+0x94>)
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d004      	beq.n	8009ca0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 fcad 	bl	800a5f8 <TL_MM_EvtDone>
 8009c9e:	e004      	b.n	8009caa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	480a      	ldr	r0, [pc, #40]	; (8009cd0 <shci_user_evt_proc+0x90>)
 8009ca6:	f001 f861 	bl	800ad6c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009caa:	4809      	ldr	r0, [pc, #36]	; (8009cd0 <shci_user_evt_proc+0x90>)
 8009cac:	f001 f83c 	bl	800ad28 <LST_is_empty>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d107      	bne.n	8009cc6 <shci_user_evt_proc+0x86>
 8009cb6:	4b07      	ldr	r3, [pc, #28]	; (8009cd4 <shci_user_evt_proc+0x94>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009cbe:	4804      	ldr	r0, [pc, #16]	; (8009cd0 <shci_user_evt_proc+0x90>)
 8009cc0:	f7f8 fc2a 	bl	8002518 <shci_notify_asynch_evt>
  }


  return;
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
}
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	200000a4 	.word	0x200000a4
 8009cd4:	200000b4 	.word	0x200000b4
 8009cd8:	200006bc 	.word	0x200006bc

08009cdc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60ba      	str	r2, [r7, #8]
 8009ce4:	607b      	str	r3, [r7, #4]
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	81fb      	strh	r3, [r7, #14]
 8009cea:	460b      	mov	r3, r1
 8009cec:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009cee:	2000      	movs	r0, #0
 8009cf0:	f000 f864 	bl	8009dbc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009cf4:	4b16      	ldr	r3, [pc, #88]	; (8009d50 <shci_send+0x74>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	89fa      	ldrh	r2, [r7, #14]
 8009cfa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009cfe:	4b14      	ldr	r3, [pc, #80]	; (8009d50 <shci_send+0x74>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	7b7a      	ldrb	r2, [r7, #13]
 8009d04:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009d06:	4b12      	ldr	r3, [pc, #72]	; (8009d50 <shci_send+0x74>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	330c      	adds	r3, #12
 8009d0c:	7b7a      	ldrb	r2, [r7, #13]
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f001 f921 	bl	800af58 <memcpy>

  shciContext.io.Send(0,0);
 8009d16:	4b0f      	ldr	r3, [pc, #60]	; (8009d54 <shci_send+0x78>)
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009d20:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009d24:	f7f8 fc0f 	bl	8002546 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f103 0008 	add.w	r0, r3, #8
 8009d2e:	4b08      	ldr	r3, [pc, #32]	; (8009d50 <shci_send+0x74>)
 8009d30:	6819      	ldr	r1, [r3, #0]
 8009d32:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <shci_send+0x74>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	789b      	ldrb	r3, [r3, #2]
 8009d38:	3303      	adds	r3, #3
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f001 f90c 	bl	800af58 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009d40:	2001      	movs	r0, #1
 8009d42:	f000 f83b 	bl	8009dbc <Cmd_SetStatus>

  return;
 8009d46:	bf00      	nop
}
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	200000b0 	.word	0x200000b0
 8009d54:	200006bc 	.word	0x200006bc

08009d58 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009d60:	4a10      	ldr	r2, [pc, #64]	; (8009da4 <TlInit+0x4c>)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009d66:	4810      	ldr	r0, [pc, #64]	; (8009da8 <TlInit+0x50>)
 8009d68:	f000 ffce 	bl	800ad08 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	f000 f825 	bl	8009dbc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009d72:	4b0e      	ldr	r3, [pc, #56]	; (8009dac <TlInit+0x54>)
 8009d74:	2201      	movs	r2, #1
 8009d76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009d78:	4b0d      	ldr	r3, [pc, #52]	; (8009db0 <TlInit+0x58>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00c      	beq.n	8009d9a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009d84:	4b0b      	ldr	r3, [pc, #44]	; (8009db4 <TlInit+0x5c>)
 8009d86:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009d88:	4b0b      	ldr	r3, [pc, #44]	; (8009db8 <TlInit+0x60>)
 8009d8a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009d8c:	4b08      	ldr	r3, [pc, #32]	; (8009db0 <TlInit+0x58>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f107 020c 	add.w	r2, r7, #12
 8009d94:	4610      	mov	r0, r2
 8009d96:	4798      	blx	r3
  }

  return;
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
}
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	200000b0 	.word	0x200000b0
 8009da8:	200000a4 	.word	0x200000a4
 8009dac:	200000b4 	.word	0x200000b4
 8009db0:	200006bc 	.word	0x200006bc
 8009db4:	08009e0d 	.word	0x08009e0d
 8009db8:	08009e25 	.word	0x08009e25

08009dbc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10b      	bne.n	8009de4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009dcc:	4b0d      	ldr	r3, [pc, #52]	; (8009e04 <Cmd_SetStatus+0x48>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d003      	beq.n	8009ddc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009dd4:	4b0b      	ldr	r3, [pc, #44]	; (8009e04 <Cmd_SetStatus+0x48>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2000      	movs	r0, #0
 8009dda:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <Cmd_SetStatus+0x4c>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009de2:	e00b      	b.n	8009dfc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009de4:	4b08      	ldr	r3, [pc, #32]	; (8009e08 <Cmd_SetStatus+0x4c>)
 8009de6:	2201      	movs	r2, #1
 8009de8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009dea:	4b06      	ldr	r3, [pc, #24]	; (8009e04 <Cmd_SetStatus+0x48>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d004      	beq.n	8009dfc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009df2:	4b04      	ldr	r3, [pc, #16]	; (8009e04 <Cmd_SetStatus+0x48>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2001      	movs	r0, #1
 8009df8:	4798      	blx	r3
  return;
 8009dfa:	bf00      	nop
 8009dfc:	bf00      	nop
}
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	200006dc 	.word	0x200006dc
 8009e08:	200000ac 	.word	0x200000ac

08009e0c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009e14:	2000      	movs	r0, #0
 8009e16:	f7f8 fb8b 	bl	8002530 <shci_cmd_resp_release>

  return;
 8009e1a:	bf00      	nop
}
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
	...

08009e24 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009e2c:	6879      	ldr	r1, [r7, #4]
 8009e2e:	4805      	ldr	r0, [pc, #20]	; (8009e44 <TlUserEvtReceived+0x20>)
 8009e30:	f000 ffc2 	bl	800adb8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009e34:	4803      	ldr	r0, [pc, #12]	; (8009e44 <TlUserEvtReceived+0x20>)
 8009e36:	f7f8 fb6f 	bl	8002518 <shci_notify_asynch_evt>

  return;
 8009e3a:	bf00      	nop
}
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	200000a4 	.word	0x200000a4

08009e48 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a05      	ldr	r2, [pc, #20]	; (8009e68 <shci_register_io_bus+0x20>)
 8009e54:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a04      	ldr	r2, [pc, #16]	; (8009e6c <shci_register_io_bus+0x24>)
 8009e5a:	611a      	str	r2, [r3, #16]

  return;
 8009e5c:	bf00      	nop
}
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	0800a3a9 	.word	0x0800a3a9
 8009e6c:	0800a3fd 	.word	0x0800a3fd

08009e70 <otSrpClientEnableAutoStartMode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}


void otSrpClientEnableAutoStartMode(otInstance *aInstance, otSrpClientAutoStartCallback aCallback, void *aContext)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 8009e7c:	f7f7 fc5a 	bl	8001734 <Pre_OtCmdProcessing>

  otSrpClientAutoStartCb = aCallback;
 8009e80:	4a14      	ldr	r2, [pc, #80]	; (8009ed4 <otSrpClientEnableAutoStartMode+0x64>)
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	6013      	str	r3, [r2, #0]

  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e86:	f7f7 fbdb 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8009e8a:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ENABLE_AUTO_START_MODE;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f062 0234 	orn	r2, r2, #52	; 0x34
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f042 0201 	orr.w	r2, r2, #1
 8009e9c:	705a      	strb	r2, [r3, #1]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	709a      	strb	r2, [r3, #2]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f042 0201 	orr.w	r2, r2, #1
 8009eae:	711a      	strb	r2, [r3, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	715a      	strb	r2, [r3, #5]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	719a      	strb	r2, [r3, #6]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aContext;
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_TransferWithNotif();
 8009ec2:	f7f7 fc0b 	bl	80016dc <Ot_Cmd_TransferWithNotif>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ec6:	f7f7 fbc7 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009eca:	6178      	str	r0, [r7, #20]
}
 8009ecc:	bf00      	nop
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	2000068c 	.word	0x2000068c

08009ed8 <otSrpClientSetHostName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otSrpClientHostInfo*)p_ot_req->Data[0];
}

otError otSrpClientSetHostName(otInstance *aInstance, const char *aName)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009ee2:	f7f7 fc27 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009ee6:	f7f7 fbab 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8009eea:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_SET_HOST_NAME;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f062 022a 	orn	r2, r2, #42	; 0x2a
 8009ef4:	701a      	strb	r2, [r3, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f042 0201 	orr.w	r2, r2, #1
 8009efc:	705a      	strb	r2, [r3, #1]
 8009efe:	2200      	movs	r2, #0
 8009f00:	709a      	strb	r2, [r3, #2]
 8009f02:	2200      	movs	r2, #0
 8009f04:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f042 0201 	orr.w	r2, r2, #1
 8009f0e:	711a      	strb	r2, [r3, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	715a      	strb	r2, [r3, #5]
 8009f14:	2200      	movs	r2, #0
 8009f16:	719a      	strb	r2, [r3, #6]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aName;
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009f22:	f7f7 fbd5 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f26:	f7f7 fb97 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f2a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	b2db      	uxtb	r3, r3
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <otSrpClientEnableAutoHostAddress>:

otError otSrpClientEnableAutoHostAddress(otInstance *aInstance)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009f42:	f7f7 fbf7 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f46:	f7f7 fb7b 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8009f4a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ENABLE_AUTO_HOST_ADDRESS;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f062 0229 	orn	r2, r2, #41	; 0x29
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f042 0201 	orr.w	r2, r2, #1
 8009f5c:	705a      	strb	r2, [r3, #1]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	709a      	strb	r2, [r3, #2]
 8009f62:	2200      	movs	r2, #0
 8009f64:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	711a      	strb	r2, [r3, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	715a      	strb	r2, [r3, #5]
 8009f70:	2200      	movs	r2, #0
 8009f72:	719a      	strb	r2, [r3, #6]
 8009f74:	2200      	movs	r2, #0
 8009f76:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8009f78:	f7f7 fbaa 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f7c:	f7f7 fb6c 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f80:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	b2db      	uxtb	r3, r3
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <otSrpClientAddService>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otSrpClientAddService(otInstance *aInstance, otSrpClientService *aService)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009f9a:	f7f7 fbcb 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f9e:	f7f7 fb4f 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 8009fa2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_ADD_SERVICE;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f062 0227 	orn	r2, r2, #39	; 0x27
 8009fac:	701a      	strb	r2, [r3, #0]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f042 0201 	orr.w	r2, r2, #1
 8009fb4:	705a      	strb	r2, [r3, #1]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	709a      	strb	r2, [r3, #2]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f042 0201 	orr.w	r2, r2, #1
 8009fc6:	711a      	strb	r2, [r3, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	715a      	strb	r2, [r3, #5]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	719a      	strb	r2, [r3, #6]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aService;
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009fda:	f7f7 fb79 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009fde:	f7f7 fb3b 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009fe2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	b2db      	uxtb	r3, r3
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <otSrpClientBuffersGetHostNameString>:
#ifdef OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_ENABLE

#include "srp_client_buffers.h"

char *otSrpClientBuffersGetHostNameString(otInstance *aInstance, uint16_t *aSize)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009ffc:	f7f7 fb9a 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a000:	f7f7 fb1e 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 800a004:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_HOST_NAME_STRING;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f062 021c 	orn	r2, r2, #28
 800a00e:	701a      	strb	r2, [r3, #0]
 800a010:	2200      	movs	r2, #0
 800a012:	f042 0201 	orr.w	r2, r2, #1
 800a016:	705a      	strb	r2, [r3, #1]
 800a018:	2200      	movs	r2, #0
 800a01a:	709a      	strb	r2, [r3, #2]
 800a01c:	2200      	movs	r2, #0
 800a01e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	f042 0201 	orr.w	r2, r2, #1
 800a028:	711a      	strb	r2, [r3, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	715a      	strb	r2, [r3, #5]
 800a02e:	2200      	movs	r2, #0
 800a030:	719a      	strb	r2, [r3, #6]
 800a032:	2200      	movs	r2, #0
 800a034:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSize;
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a03c:	f7f7 fb48 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a040:	f7f7 fb0a 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a044:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	689b      	ldr	r3, [r3, #8]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <otSrpClientBuffersAllocateService>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otIp6Address*)p_ot_req->Data[0];
}

otSrpClientBuffersServiceEntry *otSrpClientBuffersAllocateService(otInstance *aInstance)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a05a:	f7f7 fb6b 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a05e:	f7f7 faef 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 800a062:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_ALLOCATE_SERVICE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f062 021a 	orn	r2, r2, #26
 800a06c:	701a      	strb	r2, [r3, #0]
 800a06e:	2200      	movs	r2, #0
 800a070:	f042 0201 	orr.w	r2, r2, #1
 800a074:	705a      	strb	r2, [r3, #1]
 800a076:	2200      	movs	r2, #0
 800a078:	709a      	strb	r2, [r3, #2]
 800a07a:	2200      	movs	r2, #0
 800a07c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	711a      	strb	r2, [r3, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	715a      	strb	r2, [r3, #5]
 800a088:	2200      	movs	r2, #0
 800a08a:	719a      	strb	r2, [r3, #6]
 800a08c:	2200      	movs	r2, #0
 800a08e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a090:	f7f7 fb1e 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a094:	f7f7 fae0 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a098:	60f8      	str	r0, [r7, #12]
  return (otSrpClientBuffersServiceEntry*)p_ot_req->Data[0];
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	689b      	ldr	r3, [r3, #8]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <otSrpClientBuffersGetServiceEntryServiceNameString>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

char *otSrpClientBuffersGetServiceEntryServiceNameString(otSrpClientBuffersServiceEntry *aEntry, uint16_t *aSize)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b084      	sub	sp, #16
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a0b0:	f7f7 fb40 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a0b4:	f7f7 fac4 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 800a0b8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_SERVICE_ENTRY_SERVICE_NAME_STRING;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f062 0217 	orn	r2, r2, #23
 800a0c2:	701a      	strb	r2, [r3, #0]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f042 0201 	orr.w	r2, r2, #1
 800a0ca:	705a      	strb	r2, [r3, #1]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	709a      	strb	r2, [r3, #2]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f042 0202 	orr.w	r2, r2, #2
 800a0dc:	711a      	strb	r2, [r3, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	715a      	strb	r2, [r3, #5]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	719a      	strb	r2, [r3, #6]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aEntry;
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aSize;
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a0f6:	f7f7 faeb 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a0fa:	f7f7 faad 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a0fe:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	689b      	ldr	r3, [r3, #8]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <otSrpClientBuffersGetServiceEntryInstanceNameString>:

char *otSrpClientBuffersGetServiceEntryInstanceNameString(otSrpClientBuffersServiceEntry *aEntry, uint16_t *aSize)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a116:	f7f7 fb0d 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a11a:	f7f7 fa91 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 800a11e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_SRP_CLIENT_BUFFERS_GET_SERVICE_ENTRY_INSTANCE_NAME_STRING;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f062 0216 	orn	r2, r2, #22
 800a128:	701a      	strb	r2, [r3, #0]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f042 0201 	orr.w	r2, r2, #1
 800a130:	705a      	strb	r2, [r3, #1]
 800a132:	2200      	movs	r2, #0
 800a134:	709a      	strb	r2, [r3, #2]
 800a136:	2200      	movs	r2, #0
 800a138:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f042 0202 	orr.w	r2, r2, #2
 800a142:	711a      	strb	r2, [r3, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	715a      	strb	r2, [r3, #5]
 800a148:	2200      	movs	r2, #0
 800a14a:	719a      	strb	r2, [r3, #6]
 800a14c:	2200      	movs	r2, #0
 800a14e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aEntry;
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aSize;
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a15c:	f7f7 fab8 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a160:	f7f7 fa7a 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a164:	60f8      	str	r0, [r7, #12]
  return (char*)p_ot_req->Data[0];
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	689b      	ldr	r3, [r3, #8]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a17e:	f7f7 fad9 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a182:	f7f7 fa5d 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 800a186:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a190:	701a      	strb	r2, [r3, #0]
 800a192:	2200      	movs	r2, #0
 800a194:	705a      	strb	r2, [r3, #1]
 800a196:	2200      	movs	r2, #0
 800a198:	709a      	strb	r2, [r3, #2]
 800a19a:	2200      	movs	r2, #0
 800a19c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f042 0201 	orr.w	r2, r2, #1
 800a1a6:	711a      	strb	r2, [r3, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	715a      	strb	r2, [r3, #5]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	719a      	strb	r2, [r3, #6]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a1b4:	78fa      	ldrb	r2, [r7, #3]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a1ba:	f7f7 fa89 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a1be:	f7f7 fa4b 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a1c2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	b2db      	uxtb	r3, r3
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b084      	sub	sp, #16
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a1dc:	f7f7 faaa 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a1e0:	f7f7 fa2e 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 800a1e4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 800a1ee:	701a      	strb	r2, [r3, #0]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	705a      	strb	r2, [r3, #1]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	709a      	strb	r2, [r3, #2]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f042 0203 	orr.w	r2, r2, #3
 800a204:	711a      	strb	r2, [r3, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	715a      	strb	r2, [r3, #5]
 800a20a:	2200      	movs	r2, #0
 800a20c:	719a      	strb	r2, [r3, #6]
 800a20e:	2200      	movs	r2, #0
 800a210:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 800a212:	783b      	ldrb	r3, [r7, #0]
 800a214:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	461a      	mov	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 800a220:	783b      	ldrb	r3, [r7, #0]
 800a222:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a226:	b2db      	uxtb	r3, r3
 800a228:	461a      	mov	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 800a22e:	783b      	ldrb	r3, [r7, #0]
 800a230:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a234:	b2db      	uxtb	r3, r3
 800a236:	461a      	mov	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800a23c:	f7f7 fa48 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a240:	f7f7 fa0a 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a244:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	b2db      	uxtb	r3, r3
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <otThreadGetParentLastRssi>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otThreadGetParentLastRssi(otInstance *aInstance, int8_t *aLastRssi)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a25e:	f7f7 fa69 	bl	8001734 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a262:	f7f7 f9ed 	bl	8001640 <THREAD_Get_OTCmdPayloadBuffer>
 800a266:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_PARENT_LAST_RSSI;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f062 0270 	orn	r2, r2, #112	; 0x70
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	2200      	movs	r2, #0
 800a274:	705a      	strb	r2, [r3, #1]
 800a276:	2200      	movs	r2, #0
 800a278:	709a      	strb	r2, [r3, #2]
 800a27a:	2200      	movs	r2, #0
 800a27c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f042 0201 	orr.w	r2, r2, #1
 800a286:	711a      	strb	r2, [r3, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	715a      	strb	r2, [r3, #5]
 800a28c:	2200      	movs	r2, #0
 800a28e:	719a      	strb	r2, [r3, #6]
 800a290:	2200      	movs	r2, #0
 800a292:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aLastRssi;
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a29a:	f7f7 fa19 	bl	80016d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a29e:	f7f7 f9db 	bl	8001658 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a2a2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	b2db      	uxtb	r3, r3
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a2b6:	f7f7 fc91 	bl	8001bdc <HW_IPCC_Enable>

  return;
 800a2ba:	bf00      	nop
}
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <TL_Init>:


void TL_Init( void )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a2c4:	4b10      	ldr	r3, [pc, #64]	; (800a308 <TL_Init+0x48>)
 800a2c6:	4a11      	ldr	r2, [pc, #68]	; (800a30c <TL_Init+0x4c>)
 800a2c8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a2ca:	4b0f      	ldr	r3, [pc, #60]	; (800a308 <TL_Init+0x48>)
 800a2cc:	4a10      	ldr	r2, [pc, #64]	; (800a310 <TL_Init+0x50>)
 800a2ce:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a2d0:	4b0d      	ldr	r3, [pc, #52]	; (800a308 <TL_Init+0x48>)
 800a2d2:	4a10      	ldr	r2, [pc, #64]	; (800a314 <TL_Init+0x54>)
 800a2d4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a2d6:	4b0c      	ldr	r3, [pc, #48]	; (800a308 <TL_Init+0x48>)
 800a2d8:	4a0f      	ldr	r2, [pc, #60]	; (800a318 <TL_Init+0x58>)
 800a2da:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	; (800a308 <TL_Init+0x48>)
 800a2de:	4a0f      	ldr	r2, [pc, #60]	; (800a31c <TL_Init+0x5c>)
 800a2e0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <TL_Init+0x48>)
 800a2e4:	4a0e      	ldr	r2, [pc, #56]	; (800a320 <TL_Init+0x60>)
 800a2e6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a2e8:	4b07      	ldr	r3, [pc, #28]	; (800a308 <TL_Init+0x48>)
 800a2ea:	4a0e      	ldr	r2, [pc, #56]	; (800a324 <TL_Init+0x64>)
 800a2ec:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a2ee:	4b06      	ldr	r3, [pc, #24]	; (800a308 <TL_Init+0x48>)
 800a2f0:	4a0d      	ldr	r2, [pc, #52]	; (800a328 <TL_Init+0x68>)
 800a2f2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a2f4:	4b04      	ldr	r3, [pc, #16]	; (800a308 <TL_Init+0x48>)
 800a2f6:	4a0d      	ldr	r2, [pc, #52]	; (800a32c <TL_Init+0x6c>)
 800a2f8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a2fa:	4b03      	ldr	r3, [pc, #12]	; (800a308 <TL_Init+0x48>)
 800a2fc:	4a0c      	ldr	r2, [pc, #48]	; (800a330 <TL_Init+0x70>)
 800a2fe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a300:	f7f7 fc80 	bl	8001c04 <HW_IPCC_Init>

  return;
 800a304:	bf00      	nop
}
 800a306:	bd80      	pop	{r7, pc}
 800a308:	20030000 	.word	0x20030000
 800a30c:	20030038 	.word	0x20030038
 800a310:	20030058 	.word	0x20030058
 800a314:	20030068 	.word	0x20030068
 800a318:	20030078 	.word	0x20030078
 800a31c:	20030080 	.word	0x20030080
 800a320:	20030088 	.word	0x20030088
 800a324:	20030090 	.word	0x20030090
 800a328:	200300ac 	.word	0x200300ac
 800a32c:	200300b0 	.word	0x200300b0
 800a330:	200300bc 	.word	0x200300bc

0800a334 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a33a:	e01c      	b.n	800a376 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a33c:	1d3b      	adds	r3, r7, #4
 800a33e:	4619      	mov	r1, r3
 800a340:	4812      	ldr	r0, [pc, #72]	; (800a38c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a342:	f000 fd80 	bl	800ae46 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	7a5b      	ldrb	r3, [r3, #9]
 800a34a:	2b0f      	cmp	r3, #15
 800a34c:	d003      	beq.n	800a356 <HW_IPCC_BLE_RxEvtNot+0x22>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	7a5b      	ldrb	r3, [r3, #9]
 800a352:	2b0e      	cmp	r3, #14
 800a354:	d105      	bne.n	800a362 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4619      	mov	r1, r3
 800a35a:	2002      	movs	r0, #2
 800a35c:	f000 f9b0 	bl	800a6c0 <OutputDbgTrace>
 800a360:	e004      	b.n	800a36c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4619      	mov	r1, r3
 800a366:	2003      	movs	r0, #3
 800a368:	f000 f9aa 	bl	800a6c0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a36c:	4b08      	ldr	r3, [pc, #32]	; (800a390 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	4610      	mov	r0, r2
 800a374:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a376:	4805      	ldr	r0, [pc, #20]	; (800a38c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a378:	f000 fcd6 	bl	800ad28 <LST_is_empty>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0dc      	beq.n	800a33c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a382:	bf00      	nop
}
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	200300d8 	.word	0x200300d8
 800a390:	200006e8 	.word	0x200006e8

0800a394 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a398:	4b02      	ldr	r3, [pc, #8]	; (800a3a4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4798      	blx	r3

  return;
 800a39e:	bf00      	nop
}
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	200006ec 	.word	0x200006ec

0800a3a8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a3b4:	480d      	ldr	r0, [pc, #52]	; (800a3ec <TL_SYS_Init+0x44>)
 800a3b6:	f000 fca7 	bl	800ad08 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a3ba:	4b0d      	ldr	r3, [pc, #52]	; (800a3f0 <TL_SYS_Init+0x48>)
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	689a      	ldr	r2, [r3, #8]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	4a08      	ldr	r2, [pc, #32]	; (800a3ec <TL_SYS_Init+0x44>)
 800a3cc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a3ce:	f7f7 fc47 	bl	8001c60 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a07      	ldr	r2, [pc, #28]	; (800a3f4 <TL_SYS_Init+0x4c>)
 800a3d8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	4a06      	ldr	r2, [pc, #24]	; (800a3f8 <TL_SYS_Init+0x50>)
 800a3e0:	6013      	str	r3, [r2, #0]

  return 0;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	200300e0 	.word	0x200300e0
 800a3f0:	20030000 	.word	0x20030000
 800a3f4:	200006f0 	.word	0x200006f0
 800a3f8:	200006f4 	.word	0x200006f4

0800a3fc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	460b      	mov	r3, r1
 800a406:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a408:	4b09      	ldr	r3, [pc, #36]	; (800a430 <TL_SYS_SendCmd+0x34>)
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2210      	movs	r2, #16
 800a410:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a412:	4b07      	ldr	r3, [pc, #28]	; (800a430 <TL_SYS_SendCmd+0x34>)
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4619      	mov	r1, r3
 800a41a:	2004      	movs	r0, #4
 800a41c:	f000 f950 	bl	800a6c0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a420:	f7f7 fc28 	bl	8001c74 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20030000 	.word	0x20030000

0800a434 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a438:	4b07      	ldr	r3, [pc, #28]	; (800a458 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4619      	mov	r1, r3
 800a440:	2005      	movs	r0, #5
 800a442:	f000 f93d 	bl	800a6c0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a446:	4b05      	ldr	r3, [pc, #20]	; (800a45c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a03      	ldr	r2, [pc, #12]	; (800a458 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a44c:	68d2      	ldr	r2, [r2, #12]
 800a44e:	6812      	ldr	r2, [r2, #0]
 800a450:	4610      	mov	r0, r2
 800a452:	4798      	blx	r3

  return;
 800a454:	bf00      	nop
}
 800a456:	bd80      	pop	{r7, pc}
 800a458:	20030000 	.word	0x20030000
 800a45c:	200006f0 	.word	0x200006f0

0800a460 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a466:	e00e      	b.n	800a486 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a468:	1d3b      	adds	r3, r7, #4
 800a46a:	4619      	mov	r1, r3
 800a46c:	480b      	ldr	r0, [pc, #44]	; (800a49c <HW_IPCC_SYS_EvtNot+0x3c>)
 800a46e:	f000 fcea 	bl	800ae46 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4619      	mov	r1, r3
 800a476:	2006      	movs	r0, #6
 800a478:	f000 f922 	bl	800a6c0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a47c:	4b08      	ldr	r3, [pc, #32]	; (800a4a0 <HW_IPCC_SYS_EvtNot+0x40>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	4610      	mov	r0, r2
 800a484:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a486:	4805      	ldr	r0, [pc, #20]	; (800a49c <HW_IPCC_SYS_EvtNot+0x3c>)
 800a488:	f000 fc4e 	bl	800ad28 <LST_is_empty>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d0ea      	beq.n	800a468 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a492:	bf00      	nop
}
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	200300e0 	.word	0x200300e0
 800a4a0:	200006f4 	.word	0x200006f4

0800a4a4 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800a4ac:	4b0c      	ldr	r3, [pc, #48]	; (800a4e0 <TL_THREAD_Init+0x3c>)
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689a      	ldr	r2, [r3, #8]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800a4d2:	f7f7 fbf5 	bl	8001cc0 <HW_IPCC_THREAD_Init>

  return;
 800a4d6:	bf00      	nop
}
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20030000 	.word	0x20030000

0800a4e4 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800a4e8:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <TL_OT_SendCmd+0x18>)
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	2208      	movs	r2, #8
 800a4f0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800a4f2:	f7f7 fbf3 	bl	8001cdc <HW_IPCC_OT_SendCmd>

  return;
 800a4f6:	bf00      	nop
}
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20030000 	.word	0x20030000

0800a500 <TL_THREAD_SendAck>:

  return;
}

void TL_THREAD_SendAck ( void )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a504:	4b04      	ldr	r3, [pc, #16]	; (800a518 <TL_THREAD_SendAck+0x18>)
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	220d      	movs	r2, #13
 800a50c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800a50e:	f7f7 fbf3 	bl	8001cf8 <HW_IPCC_THREAD_SendAck>

  return;
 800a512:	bf00      	nop
}
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20030000 	.word	0x20030000

0800a51c <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a520:	4b04      	ldr	r3, [pc, #16]	; (800a534 <TL_THREAD_CliSendAck+0x18>)
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	220d      	movs	r2, #13
 800a528:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800a52a:	f7f7 fbf3 	bl	8001d14 <HW_IPCC_THREAD_CliSendAck>

  return;
 800a52e:	bf00      	nop
}
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20030000 	.word	0x20030000

0800a538 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800a53c:	4b03      	ldr	r3, [pc, #12]	; (800a54c <HW_IPCC_OT_CmdEvtNot+0x14>)
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	4618      	mov	r0, r3
 800a544:	f7f7 f8d6 	bl	80016f4 <TL_OT_CmdEvtReceived>

  return;
 800a548:	bf00      	nop
}
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20030000 	.word	0x20030000

0800a550 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800a554:	4b03      	ldr	r3, [pc, #12]	; (800a564 <HW_IPCC_THREAD_EvtNot+0x14>)
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7f7 f8da 	bl	8001714 <TL_THREAD_NotReceived>

  return;
 800a560:	bf00      	nop
}
 800a562:	bd80      	pop	{r7, pc}
 800a564:	20030000 	.word	0x20030000

0800a568 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800a56c:	4b03      	ldr	r3, [pc, #12]	; (800a57c <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	4618      	mov	r0, r3
 800a574:	f7f7 f930 	bl	80017d8 <TL_THREAD_CliNotReceived>

  return;
 800a578:	bf00      	nop
}
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	20030000 	.word	0x20030000

0800a580 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a588:	4817      	ldr	r0, [pc, #92]	; (800a5e8 <TL_MM_Init+0x68>)
 800a58a:	f000 fbbd 	bl	800ad08 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a58e:	4817      	ldr	r0, [pc, #92]	; (800a5ec <TL_MM_Init+0x6c>)
 800a590:	f000 fbba 	bl	800ad08 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a594:	4b16      	ldr	r3, [pc, #88]	; (800a5f0 <TL_MM_Init+0x70>)
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	4a16      	ldr	r2, [pc, #88]	; (800a5f4 <TL_MM_Init+0x74>)
 800a59a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a59c:	4b15      	ldr	r3, [pc, #84]	; (800a5f4 <TL_MM_Init+0x74>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	6892      	ldr	r2, [r2, #8]
 800a5a4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a5a6:	4b13      	ldr	r3, [pc, #76]	; (800a5f4 <TL_MM_Init+0x74>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	68d2      	ldr	r2, [r2, #12]
 800a5ae:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a5b0:	4b10      	ldr	r3, [pc, #64]	; (800a5f4 <TL_MM_Init+0x74>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a0c      	ldr	r2, [pc, #48]	; (800a5e8 <TL_MM_Init+0x68>)
 800a5b6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a5b8:	4b0e      	ldr	r3, [pc, #56]	; (800a5f4 <TL_MM_Init+0x74>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	6812      	ldr	r2, [r2, #0]
 800a5c0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a5c2:	4b0c      	ldr	r3, [pc, #48]	; (800a5f4 <TL_MM_Init+0x74>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	6852      	ldr	r2, [r2, #4]
 800a5ca:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a5cc:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <TL_MM_Init+0x74>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	6912      	ldr	r2, [r2, #16]
 800a5d4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a5d6:	4b07      	ldr	r3, [pc, #28]	; (800a5f4 <TL_MM_Init+0x74>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6952      	ldr	r2, [r2, #20]
 800a5de:	619a      	str	r2, [r3, #24]

  return;
 800a5e0:	bf00      	nop
}
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	200300c8 	.word	0x200300c8
 800a5ec:	200006e0 	.word	0x200006e0
 800a5f0:	20030000 	.word	0x20030000
 800a5f4:	200006f8 	.word	0x200006f8

0800a5f8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a600:	6879      	ldr	r1, [r7, #4]
 800a602:	4807      	ldr	r0, [pc, #28]	; (800a620 <TL_MM_EvtDone+0x28>)
 800a604:	f000 fbd8 	bl	800adb8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a608:	6879      	ldr	r1, [r7, #4]
 800a60a:	2000      	movs	r0, #0
 800a60c:	f000 f858 	bl	800a6c0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a610:	4804      	ldr	r0, [pc, #16]	; (800a624 <TL_MM_EvtDone+0x2c>)
 800a612:	f7f7 fbb1 	bl	8001d78 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a616:	bf00      	nop
}
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	200006e0 	.word	0x200006e0
 800a624:	0800a629 	.word	0x0800a629

0800a628 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a62e:	e00c      	b.n	800a64a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a630:	1d3b      	adds	r3, r7, #4
 800a632:	4619      	mov	r1, r3
 800a634:	480a      	ldr	r0, [pc, #40]	; (800a660 <SendFreeBuf+0x38>)
 800a636:	f000 fc06 	bl	800ae46 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a63a:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <SendFreeBuf+0x3c>)
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	4611      	mov	r1, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f000 fbb7 	bl	800adb8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a64a:	4805      	ldr	r0, [pc, #20]	; (800a660 <SendFreeBuf+0x38>)
 800a64c:	f000 fb6c 	bl	800ad28 <LST_is_empty>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d0ec      	beq.n	800a630 <SendFreeBuf+0x8>
  }

  return;
 800a656:	bf00      	nop
}
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	200006e0 	.word	0x200006e0
 800a664:	20030000 	.word	0x20030000

0800a668 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a66c:	4805      	ldr	r0, [pc, #20]	; (800a684 <TL_TRACES_Init+0x1c>)
 800a66e:	f000 fb4b 	bl	800ad08 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <TL_TRACES_Init+0x20>)
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	4a03      	ldr	r2, [pc, #12]	; (800a684 <TL_TRACES_Init+0x1c>)
 800a678:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a67a:	f7f7 fbb3 	bl	8001de4 <HW_IPCC_TRACES_Init>

  return;
 800a67e:	bf00      	nop
}
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200300d0 	.word	0x200300d0
 800a688:	20030000 	.word	0x20030000

0800a68c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a692:	e008      	b.n	800a6a6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a694:	1d3b      	adds	r3, r7, #4
 800a696:	4619      	mov	r1, r3
 800a698:	4808      	ldr	r0, [pc, #32]	; (800a6bc <HW_IPCC_TRACES_EvtNot+0x30>)
 800a69a:	f000 fbd4 	bl	800ae46 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7f7 ff5b 	bl	800255c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a6a6:	4805      	ldr	r0, [pc, #20]	; (800a6bc <HW_IPCC_TRACES_EvtNot+0x30>)
 800a6a8:	f000 fb3e 	bl	800ad28 <LST_is_empty>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d0f0      	beq.n	800a694 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a6b2:	bf00      	nop
}
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	200300d0 	.word	0x200300d0

0800a6c0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	6039      	str	r1, [r7, #0]
 800a6ca:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a6cc:	79fb      	ldrb	r3, [r7, #7]
 800a6ce:	2b06      	cmp	r3, #6
 800a6d0:	d845      	bhi.n	800a75e <OutputDbgTrace+0x9e>
 800a6d2:	a201      	add	r2, pc, #4	; (adr r2, 800a6d8 <OutputDbgTrace+0x18>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a6f5 	.word	0x0800a6f5
 800a6dc:	0800a719 	.word	0x0800a719
 800a6e0:	0800a71f 	.word	0x0800a71f
 800a6e4:	0800a733 	.word	0x0800a733
 800a6e8:	0800a73f 	.word	0x0800a73f
 800a6ec:	0800a745 	.word	0x0800a745
 800a6f0:	0800a753 	.word	0x0800a753
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	7a5b      	ldrb	r3, [r3, #9]
 800a6fc:	2bff      	cmp	r3, #255	; 0xff
 800a6fe:	d005      	beq.n	800a70c <OutputDbgTrace+0x4c>
 800a700:	2bff      	cmp	r3, #255	; 0xff
 800a702:	dc05      	bgt.n	800a710 <OutputDbgTrace+0x50>
 800a704:	2b0e      	cmp	r3, #14
 800a706:	d005      	beq.n	800a714 <OutputDbgTrace+0x54>
 800a708:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a70a:	e001      	b.n	800a710 <OutputDbgTrace+0x50>
          break;
 800a70c:	bf00      	nop
 800a70e:	e027      	b.n	800a760 <OutputDbgTrace+0xa0>
          break;
 800a710:	bf00      	nop
 800a712:	e025      	b.n	800a760 <OutputDbgTrace+0xa0>
          break;
 800a714:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a716:	e023      	b.n	800a760 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a71c:	e020      	b.n	800a760 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	7a5b      	ldrb	r3, [r3, #9]
 800a726:	2b0e      	cmp	r3, #14
 800a728:	d001      	beq.n	800a72e <OutputDbgTrace+0x6e>
 800a72a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a72c:	e000      	b.n	800a730 <OutputDbgTrace+0x70>
          break;
 800a72e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a730:	e016      	b.n	800a760 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	7a5b      	ldrb	r3, [r3, #9]
 800a73a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a73c:	e010      	b.n	800a760 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a742:	e00d      	b.n	800a760 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	7a5b      	ldrb	r3, [r3, #9]
 800a74c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a74e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a750:	e006      	b.n	800a760 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	7a5b      	ldrb	r3, [r3, #9]
 800a75a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a75c:	e000      	b.n	800a760 <OutputDbgTrace+0xa0>

    default:
      break;
 800a75e:	bf00      	nop
  }

  return;
 800a760:	bf00      	nop
}
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a776:	4b0f      	ldr	r3, [pc, #60]	; (800a7b4 <OTP_Read+0x48>)
 800a778:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a77a:	e002      	b.n	800a782 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3b08      	subs	r3, #8
 800a780:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3307      	adds	r3, #7
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	79fa      	ldrb	r2, [r7, #7]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d003      	beq.n	800a796 <OTP_Read+0x2a>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	4a09      	ldr	r2, [pc, #36]	; (800a7b8 <OTP_Read+0x4c>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d1f2      	bne.n	800a77c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3307      	adds	r3, #7
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	79fa      	ldrb	r2, [r7, #7]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d001      	beq.n	800a7a6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	1fff73f8 	.word	0x1fff73f8
 800a7b8:	1fff7000 	.word	0x1fff7000

0800a7bc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a7c0:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <UTIL_LPM_Init+0x1c>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <UTIL_LPM_Init+0x20>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a7cc:	bf00      	nop
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	200006fc 	.word	0x200006fc
 800a7dc:	20000700 	.word	0x20000700

0800a7e0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a7f0:	613b      	str	r3, [r7, #16]
  return(result);
 800a7f2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a7f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7f6:	b672      	cpsid	i
}
 800a7f8:	bf00      	nop

  switch( state )
 800a7fa:	78fb      	ldrb	r3, [r7, #3]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d008      	beq.n	800a812 <UTIL_LPM_SetStopMode+0x32>
 800a800:	2b01      	cmp	r3, #1
 800a802:	d10e      	bne.n	800a822 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a804:	4b0d      	ldr	r3, [pc, #52]	; (800a83c <UTIL_LPM_SetStopMode+0x5c>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	4a0b      	ldr	r2, [pc, #44]	; (800a83c <UTIL_LPM_SetStopMode+0x5c>)
 800a80e:	6013      	str	r3, [r2, #0]
      break;
 800a810:	e008      	b.n	800a824 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	43da      	mvns	r2, r3
 800a816:	4b09      	ldr	r3, [pc, #36]	; (800a83c <UTIL_LPM_SetStopMode+0x5c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4013      	ands	r3, r2
 800a81c:	4a07      	ldr	r2, [pc, #28]	; (800a83c <UTIL_LPM_SetStopMode+0x5c>)
 800a81e:	6013      	str	r3, [r2, #0]
      break;
 800a820:	e000      	b.n	800a824 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a822:	bf00      	nop
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f383 8810 	msr	PRIMASK, r3
}
 800a82e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a830:	bf00      	nop
 800a832:	371c      	adds	r7, #28
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	200006fc 	.word	0x200006fc

0800a840 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a840:	b480      	push	{r7}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	460b      	mov	r3, r1
 800a84a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a84c:	f3ef 8310 	mrs	r3, PRIMASK
 800a850:	613b      	str	r3, [r7, #16]
  return(result);
 800a852:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a854:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a856:	b672      	cpsid	i
}
 800a858:	bf00      	nop
  
  switch(state)
 800a85a:	78fb      	ldrb	r3, [r7, #3]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d008      	beq.n	800a872 <UTIL_LPM_SetOffMode+0x32>
 800a860:	2b01      	cmp	r3, #1
 800a862:	d10e      	bne.n	800a882 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a864:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <UTIL_LPM_SetOffMode+0x5c>)
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	4a0b      	ldr	r2, [pc, #44]	; (800a89c <UTIL_LPM_SetOffMode+0x5c>)
 800a86e:	6013      	str	r3, [r2, #0]
      break;
 800a870:	e008      	b.n	800a884 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	43da      	mvns	r2, r3
 800a876:	4b09      	ldr	r3, [pc, #36]	; (800a89c <UTIL_LPM_SetOffMode+0x5c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4013      	ands	r3, r2
 800a87c:	4a07      	ldr	r2, [pc, #28]	; (800a89c <UTIL_LPM_SetOffMode+0x5c>)
 800a87e:	6013      	str	r3, [r2, #0]
      break;
 800a880:	e000      	b.n	800a884 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a882:	bf00      	nop
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f383 8810 	msr	PRIMASK, r3
}
 800a88e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a890:	bf00      	nop
 800a892:	371c      	adds	r7, #28
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	20000700 	.word	0x20000700

0800a8a0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800a8ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8b0:	b672      	cpsid	i
}
 800a8b2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a8b4:	4b12      	ldr	r3, [pc, #72]	; (800a900 <UTIL_LPM_EnterLowPower+0x60>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d006      	beq.n	800a8ca <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a8bc:	4b11      	ldr	r3, [pc, #68]	; (800a904 <UTIL_LPM_EnterLowPower+0x64>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a8c2:	4b10      	ldr	r3, [pc, #64]	; (800a904 <UTIL_LPM_EnterLowPower+0x64>)
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	4798      	blx	r3
 800a8c8:	e010      	b.n	800a8ec <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a8ca:	4b0f      	ldr	r3, [pc, #60]	; (800a908 <UTIL_LPM_EnterLowPower+0x68>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d006      	beq.n	800a8e0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800a8d2:	4b0c      	ldr	r3, [pc, #48]	; (800a904 <UTIL_LPM_EnterLowPower+0x64>)
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a8d8:	4b0a      	ldr	r3, [pc, #40]	; (800a904 <UTIL_LPM_EnterLowPower+0x64>)
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	4798      	blx	r3
 800a8de:	e005      	b.n	800a8ec <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800a8e0:	4b08      	ldr	r3, [pc, #32]	; (800a904 <UTIL_LPM_EnterLowPower+0x64>)
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a8e6:	4b07      	ldr	r3, [pc, #28]	; (800a904 <UTIL_LPM_EnterLowPower+0x64>)
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	4798      	blx	r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f383 8810 	msr	PRIMASK, r3
}
 800a8f6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a8f8:	bf00      	nop
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	200006fc 	.word	0x200006fc
 800a904:	0800c9d8 	.word	0x0800c9d8
 800a908:	20000700 	.word	0x20000700

0800a90c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b090      	sub	sp, #64	; 0x40
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a914:	4b73      	ldr	r3, [pc, #460]	; (800aae4 <UTIL_SEQ_Run+0x1d8>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a91a:	4b72      	ldr	r3, [pc, #456]	; (800aae4 <UTIL_SEQ_Run+0x1d8>)
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4013      	ands	r3, r2
 800a922:	4a70      	ldr	r2, [pc, #448]	; (800aae4 <UTIL_SEQ_Run+0x1d8>)
 800a924:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a926:	4b70      	ldr	r3, [pc, #448]	; (800aae8 <UTIL_SEQ_Run+0x1dc>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a92c:	4b6f      	ldr	r3, [pc, #444]	; (800aaec <UTIL_SEQ_Run+0x1e0>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a932:	4b6f      	ldr	r3, [pc, #444]	; (800aaf0 <UTIL_SEQ_Run+0x1e4>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800a938:	4b6e      	ldr	r3, [pc, #440]	; (800aaf4 <UTIL_SEQ_Run+0x1e8>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a93e:	e08d      	b.n	800aa5c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a940:	2300      	movs	r3, #0
 800a942:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a944:	e002      	b.n	800a94c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a948:	3301      	adds	r3, #1
 800a94a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a94c:	4a6a      	ldr	r2, [pc, #424]	; (800aaf8 <UTIL_SEQ_Run+0x1ec>)
 800a94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a950:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a956:	401a      	ands	r2, r3
 800a958:	4b62      	ldr	r3, [pc, #392]	; (800aae4 <UTIL_SEQ_Run+0x1d8>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4013      	ands	r3, r2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d0f1      	beq.n	800a946 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a962:	4a65      	ldr	r2, [pc, #404]	; (800aaf8 <UTIL_SEQ_Run+0x1ec>)
 800a964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a966:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	401a      	ands	r2, r3
 800a96e:	4b5d      	ldr	r3, [pc, #372]	; (800aae4 <UTIL_SEQ_Run+0x1d8>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4013      	ands	r3, r2
 800a974:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a976:	4a60      	ldr	r2, [pc, #384]	; (800aaf8 <UTIL_SEQ_Run+0x1ec>)
 800a978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	4413      	add	r3, r2
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a982:	4013      	ands	r3, r2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d106      	bne.n	800a996 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a988:	4a5b      	ldr	r2, [pc, #364]	; (800aaf8 <UTIL_SEQ_Run+0x1ec>)
 800a98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a98c:	00db      	lsls	r3, r3, #3
 800a98e:	4413      	add	r3, r2
 800a990:	f04f 32ff 	mov.w	r2, #4294967295
 800a994:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a996:	4a58      	ldr	r2, [pc, #352]	; (800aaf8 <UTIL_SEQ_Run+0x1ec>)
 800a998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	4413      	add	r3, r2
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 f973 	bl	800ac90 <SEQ_BitPosition>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	4b53      	ldr	r3, [pc, #332]	; (800aafc <UTIL_SEQ_Run+0x1f0>)
 800a9b0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a9b2:	4a51      	ldr	r2, [pc, #324]	; (800aaf8 <UTIL_SEQ_Run+0x1ec>)
 800a9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	4413      	add	r3, r2
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	4b4f      	ldr	r3, [pc, #316]	; (800aafc <UTIL_SEQ_Run+0x1f0>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2101      	movs	r1, #1
 800a9c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9c6:	43db      	mvns	r3, r3
 800a9c8:	401a      	ands	r2, r3
 800a9ca:	494b      	ldr	r1, [pc, #300]	; (800aaf8 <UTIL_SEQ_Run+0x1ec>)
 800a9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ce:	00db      	lsls	r3, r3, #3
 800a9d0:	440b      	add	r3, r1
 800a9d2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a9d8:	61bb      	str	r3, [r7, #24]
  return(result);
 800a9da:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a9dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9de:	b672      	cpsid	i
}
 800a9e0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a9e2:	4b46      	ldr	r3, [pc, #280]	; (800aafc <UTIL_SEQ_Run+0x1f0>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ec:	43da      	mvns	r2, r3
 800a9ee:	4b3e      	ldr	r3, [pc, #248]	; (800aae8 <UTIL_SEQ_Run+0x1dc>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	4a3c      	ldr	r2, [pc, #240]	; (800aae8 <UTIL_SEQ_Run+0x1dc>)
 800a9f6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9fc:	e013      	b.n	800aa26 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa00:	3b01      	subs	r3, #1
 800aa02:	4a3d      	ldr	r2, [pc, #244]	; (800aaf8 <UTIL_SEQ_Run+0x1ec>)
 800aa04:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800aa08:	4b3c      	ldr	r3, [pc, #240]	; (800aafc <UTIL_SEQ_Run+0x1f0>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa12:	43da      	mvns	r2, r3
 800aa14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa16:	3b01      	subs	r3, #1
 800aa18:	400a      	ands	r2, r1
 800aa1a:	4937      	ldr	r1, [pc, #220]	; (800aaf8 <UTIL_SEQ_Run+0x1ec>)
 800aa1c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800aa20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa22:	3b01      	subs	r3, #1
 800aa24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e8      	bne.n	800a9fe <UTIL_SEQ_Run+0xf2>
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	f383 8810 	msr	PRIMASK, r3
}
 800aa36:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800aa38:	4b30      	ldr	r3, [pc, #192]	; (800aafc <UTIL_SEQ_Run+0x1f0>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a30      	ldr	r2, [pc, #192]	; (800ab00 <UTIL_SEQ_Run+0x1f4>)
 800aa3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa42:	4798      	blx	r3

    local_taskset = TaskSet;
 800aa44:	4b28      	ldr	r3, [pc, #160]	; (800aae8 <UTIL_SEQ_Run+0x1dc>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800aa4a:	4b28      	ldr	r3, [pc, #160]	; (800aaec <UTIL_SEQ_Run+0x1e0>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800aa50:	4b27      	ldr	r3, [pc, #156]	; (800aaf0 <UTIL_SEQ_Run+0x1e4>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800aa56:	4b27      	ldr	r3, [pc, #156]	; (800aaf4 <UTIL_SEQ_Run+0x1e8>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800aa5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	401a      	ands	r2, r3
 800aa62:	4b20      	ldr	r3, [pc, #128]	; (800aae4 <UTIL_SEQ_Run+0x1d8>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4013      	ands	r3, r2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d005      	beq.n	800aa78 <UTIL_SEQ_Run+0x16c>
 800aa6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa70:	4013      	ands	r3, r2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f43f af64 	beq.w	800a940 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800aa78:	4b20      	ldr	r3, [pc, #128]	; (800aafc <UTIL_SEQ_Run+0x1f0>)
 800aa7a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800aa80:	f000 f8f8 	bl	800ac74 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa84:	f3ef 8310 	mrs	r3, PRIMASK
 800aa88:	613b      	str	r3, [r7, #16]
  return(result);
 800aa8a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800aa8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa8e:	b672      	cpsid	i
}
 800aa90:	bf00      	nop
  local_taskset = TaskSet;
 800aa92:	4b15      	ldr	r3, [pc, #84]	; (800aae8 <UTIL_SEQ_Run+0x1dc>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800aa98:	4b14      	ldr	r3, [pc, #80]	; (800aaec <UTIL_SEQ_Run+0x1e0>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800aa9e:	4b14      	ldr	r3, [pc, #80]	; (800aaf0 <UTIL_SEQ_Run+0x1e4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800aaa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	401a      	ands	r2, r3
 800aaaa:	4b0e      	ldr	r3, [pc, #56]	; (800aae4 <UTIL_SEQ_Run+0x1d8>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4013      	ands	r3, r2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d107      	bne.n	800aac4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800aab4:	4b0f      	ldr	r3, [pc, #60]	; (800aaf4 <UTIL_SEQ_Run+0x1e8>)
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaba:	4013      	ands	r3, r2
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800aac0:	f7f7 fcf9 	bl	80024b6 <UTIL_SEQ_Idle>
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f383 8810 	msr	PRIMASK, r3
}
 800aace:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800aad0:	f000 f8d7 	bl	800ac82 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800aad4:	4a03      	ldr	r2, [pc, #12]	; (800aae4 <UTIL_SEQ_Run+0x1d8>)
 800aad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad8:	6013      	str	r3, [r2, #0]

  return;
 800aada:	bf00      	nop
}
 800aadc:	3740      	adds	r7, #64	; 0x40
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	2000003c 	.word	0x2000003c
 800aae8:	20000704 	.word	0x20000704
 800aaec:	20000708 	.word	0x20000708
 800aaf0:	20000038 	.word	0x20000038
 800aaf4:	2000070c 	.word	0x2000070c
 800aaf8:	20000794 	.word	0x20000794
 800aafc:	20000710 	.word	0x20000710
 800ab00:	20000714 	.word	0x20000714

0800ab04 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab10:	f3ef 8310 	mrs	r3, PRIMASK
 800ab14:	617b      	str	r3, [r7, #20]
  return(result);
 800ab16:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800ab18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab1a:	b672      	cpsid	i
}
 800ab1c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 f8b6 	bl	800ac90 <SEQ_BitPosition>
 800ab24:	4603      	mov	r3, r0
 800ab26:	4619      	mov	r1, r3
 800ab28:	4a06      	ldr	r2, [pc, #24]	; (800ab44 <UTIL_SEQ_RegTask+0x40>)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	f383 8810 	msr	PRIMASK, r3
}
 800ab3a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ab3c:	bf00      	nop
}
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	20000714 	.word	0x20000714

0800ab48 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab52:	f3ef 8310 	mrs	r3, PRIMASK
 800ab56:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab58:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ab5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab5c:	b672      	cpsid	i
}
 800ab5e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ab60:	4b0d      	ldr	r3, [pc, #52]	; (800ab98 <UTIL_SEQ_SetTask+0x50>)
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	4a0b      	ldr	r2, [pc, #44]	; (800ab98 <UTIL_SEQ_SetTask+0x50>)
 800ab6a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ab6c:	4a0b      	ldr	r2, [pc, #44]	; (800ab9c <UTIL_SEQ_SetTask+0x54>)
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	431a      	orrs	r2, r3
 800ab78:	4908      	ldr	r1, [pc, #32]	; (800ab9c <UTIL_SEQ_SetTask+0x54>)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f383 8810 	msr	PRIMASK, r3
}
 800ab8a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ab8c:	bf00      	nop
}
 800ab8e:	371c      	adds	r7, #28
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	20000704 	.word	0x20000704
 800ab9c:	20000794 	.word	0x20000794

0800aba0 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800aba0:	b480      	push	{r7}
 800aba2:	b087      	sub	sp, #28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aba8:	f3ef 8310 	mrs	r3, PRIMASK
 800abac:	60fb      	str	r3, [r7, #12]
  return(result);
 800abae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800abb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abb2:	b672      	cpsid	i
}
 800abb4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800abb6:	4b09      	ldr	r3, [pc, #36]	; (800abdc <UTIL_SEQ_SetEvt+0x3c>)
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	4a07      	ldr	r2, [pc, #28]	; (800abdc <UTIL_SEQ_SetEvt+0x3c>)
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	f383 8810 	msr	PRIMASK, r3
}
 800abcc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800abce:	bf00      	nop
}
 800abd0:	371c      	adds	r7, #28
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	20000708 	.word	0x20000708

0800abe0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b088      	sub	sp, #32
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800abe8:	4b1f      	ldr	r3, [pc, #124]	; (800ac68 <UTIL_SEQ_WaitEvt+0x88>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800abee:	4b1e      	ldr	r3, [pc, #120]	; (800ac68 <UTIL_SEQ_WaitEvt+0x88>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf6:	d102      	bne.n	800abfe <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800abf8:	2300      	movs	r3, #0
 800abfa:	61fb      	str	r3, [r7, #28]
 800abfc:	e005      	b.n	800ac0a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800abfe:	4b1a      	ldr	r3, [pc, #104]	; (800ac68 <UTIL_SEQ_WaitEvt+0x88>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2201      	movs	r2, #1
 800ac04:	fa02 f303 	lsl.w	r3, r2, r3
 800ac08:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800ac0a:	4b18      	ldr	r3, [pc, #96]	; (800ac6c <UTIL_SEQ_WaitEvt+0x8c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800ac10:	4a16      	ldr	r2, [pc, #88]	; (800ac6c <UTIL_SEQ_WaitEvt+0x8c>)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800ac16:	e003      	b.n	800ac20 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800ac18:	6879      	ldr	r1, [r7, #4]
 800ac1a:	69f8      	ldr	r0, [r7, #28]
 800ac1c:	f7f7 fc52 	bl	80024c4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800ac20:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <UTIL_SEQ_WaitEvt+0x90>)
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4013      	ands	r3, r2
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0f5      	beq.n	800ac18 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800ac2c:	4a0e      	ldr	r2, [pc, #56]	; (800ac68 <UTIL_SEQ_WaitEvt+0x88>)
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac32:	f3ef 8310 	mrs	r3, PRIMASK
 800ac36:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac38:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ac3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac3c:	b672      	cpsid	i
}
 800ac3e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	43da      	mvns	r2, r3
 800ac44:	4b0a      	ldr	r3, [pc, #40]	; (800ac70 <UTIL_SEQ_WaitEvt+0x90>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4013      	ands	r3, r2
 800ac4a:	4a09      	ldr	r2, [pc, #36]	; (800ac70 <UTIL_SEQ_WaitEvt+0x90>)
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f383 8810 	msr	PRIMASK, r3
}
 800ac58:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800ac5a:	4a04      	ldr	r2, [pc, #16]	; (800ac6c <UTIL_SEQ_WaitEvt+0x8c>)
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	6013      	str	r3, [r2, #0]
  return;
 800ac60:	bf00      	nop
}
 800ac62:	3720      	adds	r7, #32
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	20000710 	.word	0x20000710
 800ac6c:	2000070c 	.word	0x2000070c
 800ac70:	20000708 	.word	0x20000708

0800ac74 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ac74:	b480      	push	{r7}
 800ac76:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ac78:	bf00      	nop
}
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ac82:	b480      	push	{r7}
 800ac84:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ac86:	bf00      	nop
}
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	0c1b      	lsrs	r3, r3, #16
 800aca4:	041b      	lsls	r3, r3, #16
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d104      	bne.n	800acb4 <SEQ_BitPosition+0x24>
 800acaa:	2310      	movs	r3, #16
 800acac:	73fb      	strb	r3, [r7, #15]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	041b      	lsls	r3, r3, #16
 800acb2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d105      	bne.n	800acca <SEQ_BitPosition+0x3a>
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
 800acc0:	3308      	adds	r3, #8
 800acc2:	73fb      	strb	r3, [r7, #15]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	021b      	lsls	r3, r3, #8
 800acc8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d105      	bne.n	800ace0 <SEQ_BitPosition+0x50>
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	3304      	adds	r3, #4
 800acd8:	73fb      	strb	r3, [r7, #15]
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	011b      	lsls	r3, r3, #4
 800acde:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	0f1b      	lsrs	r3, r3, #28
 800ace4:	4a07      	ldr	r2, [pc, #28]	; (800ad04 <SEQ_BitPosition+0x74>)
 800ace6:	5cd2      	ldrb	r2, [r2, r3]
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
 800acea:	4413      	add	r3, r2
 800acec:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800acee:	7bfb      	ldrb	r3, [r7, #15]
 800acf0:	f1c3 031f 	rsb	r3, r3, #31
 800acf4:	b2db      	uxtb	r3, r3
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	0800ca70 	.word	0x0800ca70

0800ad08 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	605a      	str	r2, [r3, #4]
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad30:	f3ef 8310 	mrs	r3, PRIMASK
 800ad34:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad36:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ad38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad3a:	b672      	cpsid	i
}
 800ad3c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d102      	bne.n	800ad4e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	75fb      	strb	r3, [r7, #23]
 800ad4c:	e001      	b.n	800ad52 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	75fb      	strb	r3, [r7, #23]
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f383 8810 	msr	PRIMASK, r3
}
 800ad5c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ad5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	371c      	adds	r7, #28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad76:	f3ef 8310 	mrs	r3, PRIMASK
 800ad7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ad7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad80:	b672      	cpsid	i
}
 800ad82:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	683a      	ldr	r2, [r7, #0]
 800ad9e:	605a      	str	r2, [r3, #4]
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f383 8810 	msr	PRIMASK, r3
}
 800adaa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800adac:	bf00      	nop
 800adae:	371c      	adds	r7, #28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800adb8:	b480      	push	{r7}
 800adba:	b087      	sub	sp, #28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adc2:	f3ef 8310 	mrs	r3, PRIMASK
 800adc6:	60fb      	str	r3, [r7, #12]
  return(result);
 800adc8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800adca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800adcc:	b672      	cpsid	i
}
 800adce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	f383 8810 	msr	PRIMASK, r3
}
 800adf6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800adf8:	bf00      	nop
 800adfa:	371c      	adds	r7, #28
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b087      	sub	sp, #28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ae10:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae12:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ae14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae16:	b672      	cpsid	i
}
 800ae18:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	6812      	ldr	r2, [r2, #0]
 800ae22:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	6852      	ldr	r2, [r2, #4]
 800ae2c:	605a      	str	r2, [r3, #4]
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	f383 8810 	msr	PRIMASK, r3
}
 800ae38:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ae3a:	bf00      	nop
 800ae3c:	371c      	adds	r7, #28
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b086      	sub	sp, #24
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae50:	f3ef 8310 	mrs	r3, PRIMASK
 800ae54:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae56:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ae58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae5a:	b672      	cpsid	i
}
 800ae5c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff ffca 	bl	800ae04 <LST_remove_node>
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f383 8810 	msr	PRIMASK, r3
}
 800ae7a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ae7c:	bf00      	nop
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <__assert_func>:
 800ae84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae86:	4614      	mov	r4, r2
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4b09      	ldr	r3, [pc, #36]	; (800aeb0 <__assert_func+0x2c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4605      	mov	r5, r0
 800ae90:	68d8      	ldr	r0, [r3, #12]
 800ae92:	b14c      	cbz	r4, 800aea8 <__assert_func+0x24>
 800ae94:	4b07      	ldr	r3, [pc, #28]	; (800aeb4 <__assert_func+0x30>)
 800ae96:	9100      	str	r1, [sp, #0]
 800ae98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae9c:	4906      	ldr	r1, [pc, #24]	; (800aeb8 <__assert_func+0x34>)
 800ae9e:	462b      	mov	r3, r5
 800aea0:	f000 f814 	bl	800aecc <fiprintf>
 800aea4:	f000 fd40 	bl	800b928 <abort>
 800aea8:	4b04      	ldr	r3, [pc, #16]	; (800aebc <__assert_func+0x38>)
 800aeaa:	461c      	mov	r4, r3
 800aeac:	e7f3      	b.n	800ae96 <__assert_func+0x12>
 800aeae:	bf00      	nop
 800aeb0:	20000040 	.word	0x20000040
 800aeb4:	0800ca80 	.word	0x0800ca80
 800aeb8:	0800ca8d 	.word	0x0800ca8d
 800aebc:	0800cabb 	.word	0x0800cabb

0800aec0 <__errno>:
 800aec0:	4b01      	ldr	r3, [pc, #4]	; (800aec8 <__errno+0x8>)
 800aec2:	6818      	ldr	r0, [r3, #0]
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	20000040 	.word	0x20000040

0800aecc <fiprintf>:
 800aecc:	b40e      	push	{r1, r2, r3}
 800aece:	b503      	push	{r0, r1, lr}
 800aed0:	4601      	mov	r1, r0
 800aed2:	ab03      	add	r3, sp, #12
 800aed4:	4805      	ldr	r0, [pc, #20]	; (800aeec <fiprintf+0x20>)
 800aed6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeda:	6800      	ldr	r0, [r0, #0]
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	f000 f95b 	bl	800b198 <_vfiprintf_r>
 800aee2:	b002      	add	sp, #8
 800aee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aee8:	b003      	add	sp, #12
 800aeea:	4770      	bx	lr
 800aeec:	20000040 	.word	0x20000040

0800aef0 <__libc_init_array>:
 800aef0:	b570      	push	{r4, r5, r6, lr}
 800aef2:	4d0d      	ldr	r5, [pc, #52]	; (800af28 <__libc_init_array+0x38>)
 800aef4:	4c0d      	ldr	r4, [pc, #52]	; (800af2c <__libc_init_array+0x3c>)
 800aef6:	1b64      	subs	r4, r4, r5
 800aef8:	10a4      	asrs	r4, r4, #2
 800aefa:	2600      	movs	r6, #0
 800aefc:	42a6      	cmp	r6, r4
 800aefe:	d109      	bne.n	800af14 <__libc_init_array+0x24>
 800af00:	4d0b      	ldr	r5, [pc, #44]	; (800af30 <__libc_init_array+0x40>)
 800af02:	4c0c      	ldr	r4, [pc, #48]	; (800af34 <__libc_init_array+0x44>)
 800af04:	f001 f9e0 	bl	800c2c8 <_init>
 800af08:	1b64      	subs	r4, r4, r5
 800af0a:	10a4      	asrs	r4, r4, #2
 800af0c:	2600      	movs	r6, #0
 800af0e:	42a6      	cmp	r6, r4
 800af10:	d105      	bne.n	800af1e <__libc_init_array+0x2e>
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	f855 3b04 	ldr.w	r3, [r5], #4
 800af18:	4798      	blx	r3
 800af1a:	3601      	adds	r6, #1
 800af1c:	e7ee      	b.n	800aefc <__libc_init_array+0xc>
 800af1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af22:	4798      	blx	r3
 800af24:	3601      	adds	r6, #1
 800af26:	e7f2      	b.n	800af0e <__libc_init_array+0x1e>
 800af28:	0800cb54 	.word	0x0800cb54
 800af2c:	0800cb54 	.word	0x0800cb54
 800af30:	0800cb54 	.word	0x0800cb54
 800af34:	0800cb58 	.word	0x0800cb58

0800af38 <malloc>:
 800af38:	4b02      	ldr	r3, [pc, #8]	; (800af44 <malloc+0xc>)
 800af3a:	4601      	mov	r1, r0
 800af3c:	6818      	ldr	r0, [r3, #0]
 800af3e:	f000 b88d 	b.w	800b05c <_malloc_r>
 800af42:	bf00      	nop
 800af44:	20000040 	.word	0x20000040

0800af48 <free>:
 800af48:	4b02      	ldr	r3, [pc, #8]	; (800af54 <free+0xc>)
 800af4a:	4601      	mov	r1, r0
 800af4c:	6818      	ldr	r0, [r3, #0]
 800af4e:	f000 b819 	b.w	800af84 <_free_r>
 800af52:	bf00      	nop
 800af54:	20000040 	.word	0x20000040

0800af58 <memcpy>:
 800af58:	440a      	add	r2, r1
 800af5a:	4291      	cmp	r1, r2
 800af5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800af60:	d100      	bne.n	800af64 <memcpy+0xc>
 800af62:	4770      	bx	lr
 800af64:	b510      	push	{r4, lr}
 800af66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af6e:	4291      	cmp	r1, r2
 800af70:	d1f9      	bne.n	800af66 <memcpy+0xe>
 800af72:	bd10      	pop	{r4, pc}

0800af74 <memset>:
 800af74:	4402      	add	r2, r0
 800af76:	4603      	mov	r3, r0
 800af78:	4293      	cmp	r3, r2
 800af7a:	d100      	bne.n	800af7e <memset+0xa>
 800af7c:	4770      	bx	lr
 800af7e:	f803 1b01 	strb.w	r1, [r3], #1
 800af82:	e7f9      	b.n	800af78 <memset+0x4>

0800af84 <_free_r>:
 800af84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af86:	2900      	cmp	r1, #0
 800af88:	d044      	beq.n	800b014 <_free_r+0x90>
 800af8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af8e:	9001      	str	r0, [sp, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	f1a1 0404 	sub.w	r4, r1, #4
 800af96:	bfb8      	it	lt
 800af98:	18e4      	addlt	r4, r4, r3
 800af9a:	f000 ff07 	bl	800bdac <__malloc_lock>
 800af9e:	4a1e      	ldr	r2, [pc, #120]	; (800b018 <_free_r+0x94>)
 800afa0:	9801      	ldr	r0, [sp, #4]
 800afa2:	6813      	ldr	r3, [r2, #0]
 800afa4:	b933      	cbnz	r3, 800afb4 <_free_r+0x30>
 800afa6:	6063      	str	r3, [r4, #4]
 800afa8:	6014      	str	r4, [r2, #0]
 800afaa:	b003      	add	sp, #12
 800afac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afb0:	f000 bf02 	b.w	800bdb8 <__malloc_unlock>
 800afb4:	42a3      	cmp	r3, r4
 800afb6:	d908      	bls.n	800afca <_free_r+0x46>
 800afb8:	6825      	ldr	r5, [r4, #0]
 800afba:	1961      	adds	r1, r4, r5
 800afbc:	428b      	cmp	r3, r1
 800afbe:	bf01      	itttt	eq
 800afc0:	6819      	ldreq	r1, [r3, #0]
 800afc2:	685b      	ldreq	r3, [r3, #4]
 800afc4:	1949      	addeq	r1, r1, r5
 800afc6:	6021      	streq	r1, [r4, #0]
 800afc8:	e7ed      	b.n	800afa6 <_free_r+0x22>
 800afca:	461a      	mov	r2, r3
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	b10b      	cbz	r3, 800afd4 <_free_r+0x50>
 800afd0:	42a3      	cmp	r3, r4
 800afd2:	d9fa      	bls.n	800afca <_free_r+0x46>
 800afd4:	6811      	ldr	r1, [r2, #0]
 800afd6:	1855      	adds	r5, r2, r1
 800afd8:	42a5      	cmp	r5, r4
 800afda:	d10b      	bne.n	800aff4 <_free_r+0x70>
 800afdc:	6824      	ldr	r4, [r4, #0]
 800afde:	4421      	add	r1, r4
 800afe0:	1854      	adds	r4, r2, r1
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	6011      	str	r1, [r2, #0]
 800afe6:	d1e0      	bne.n	800afaa <_free_r+0x26>
 800afe8:	681c      	ldr	r4, [r3, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	6053      	str	r3, [r2, #4]
 800afee:	4421      	add	r1, r4
 800aff0:	6011      	str	r1, [r2, #0]
 800aff2:	e7da      	b.n	800afaa <_free_r+0x26>
 800aff4:	d902      	bls.n	800affc <_free_r+0x78>
 800aff6:	230c      	movs	r3, #12
 800aff8:	6003      	str	r3, [r0, #0]
 800affa:	e7d6      	b.n	800afaa <_free_r+0x26>
 800affc:	6825      	ldr	r5, [r4, #0]
 800affe:	1961      	adds	r1, r4, r5
 800b000:	428b      	cmp	r3, r1
 800b002:	bf04      	itt	eq
 800b004:	6819      	ldreq	r1, [r3, #0]
 800b006:	685b      	ldreq	r3, [r3, #4]
 800b008:	6063      	str	r3, [r4, #4]
 800b00a:	bf04      	itt	eq
 800b00c:	1949      	addeq	r1, r1, r5
 800b00e:	6021      	streq	r1, [r4, #0]
 800b010:	6054      	str	r4, [r2, #4]
 800b012:	e7ca      	b.n	800afaa <_free_r+0x26>
 800b014:	b003      	add	sp, #12
 800b016:	bd30      	pop	{r4, r5, pc}
 800b018:	200007a4 	.word	0x200007a4

0800b01c <sbrk_aligned>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	4e0e      	ldr	r6, [pc, #56]	; (800b058 <sbrk_aligned+0x3c>)
 800b020:	460c      	mov	r4, r1
 800b022:	6831      	ldr	r1, [r6, #0]
 800b024:	4605      	mov	r5, r0
 800b026:	b911      	cbnz	r1, 800b02e <sbrk_aligned+0x12>
 800b028:	f000 fb7a 	bl	800b720 <_sbrk_r>
 800b02c:	6030      	str	r0, [r6, #0]
 800b02e:	4621      	mov	r1, r4
 800b030:	4628      	mov	r0, r5
 800b032:	f000 fb75 	bl	800b720 <_sbrk_r>
 800b036:	1c43      	adds	r3, r0, #1
 800b038:	d00a      	beq.n	800b050 <sbrk_aligned+0x34>
 800b03a:	1cc4      	adds	r4, r0, #3
 800b03c:	f024 0403 	bic.w	r4, r4, #3
 800b040:	42a0      	cmp	r0, r4
 800b042:	d007      	beq.n	800b054 <sbrk_aligned+0x38>
 800b044:	1a21      	subs	r1, r4, r0
 800b046:	4628      	mov	r0, r5
 800b048:	f000 fb6a 	bl	800b720 <_sbrk_r>
 800b04c:	3001      	adds	r0, #1
 800b04e:	d101      	bne.n	800b054 <sbrk_aligned+0x38>
 800b050:	f04f 34ff 	mov.w	r4, #4294967295
 800b054:	4620      	mov	r0, r4
 800b056:	bd70      	pop	{r4, r5, r6, pc}
 800b058:	200007a8 	.word	0x200007a8

0800b05c <_malloc_r>:
 800b05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b060:	1ccd      	adds	r5, r1, #3
 800b062:	f025 0503 	bic.w	r5, r5, #3
 800b066:	3508      	adds	r5, #8
 800b068:	2d0c      	cmp	r5, #12
 800b06a:	bf38      	it	cc
 800b06c:	250c      	movcc	r5, #12
 800b06e:	2d00      	cmp	r5, #0
 800b070:	4607      	mov	r7, r0
 800b072:	db01      	blt.n	800b078 <_malloc_r+0x1c>
 800b074:	42a9      	cmp	r1, r5
 800b076:	d905      	bls.n	800b084 <_malloc_r+0x28>
 800b078:	230c      	movs	r3, #12
 800b07a:	603b      	str	r3, [r7, #0]
 800b07c:	2600      	movs	r6, #0
 800b07e:	4630      	mov	r0, r6
 800b080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b084:	4e2e      	ldr	r6, [pc, #184]	; (800b140 <_malloc_r+0xe4>)
 800b086:	f000 fe91 	bl	800bdac <__malloc_lock>
 800b08a:	6833      	ldr	r3, [r6, #0]
 800b08c:	461c      	mov	r4, r3
 800b08e:	bb34      	cbnz	r4, 800b0de <_malloc_r+0x82>
 800b090:	4629      	mov	r1, r5
 800b092:	4638      	mov	r0, r7
 800b094:	f7ff ffc2 	bl	800b01c <sbrk_aligned>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	4604      	mov	r4, r0
 800b09c:	d14d      	bne.n	800b13a <_malloc_r+0xde>
 800b09e:	6834      	ldr	r4, [r6, #0]
 800b0a0:	4626      	mov	r6, r4
 800b0a2:	2e00      	cmp	r6, #0
 800b0a4:	d140      	bne.n	800b128 <_malloc_r+0xcc>
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	eb04 0803 	add.w	r8, r4, r3
 800b0b0:	f000 fb36 	bl	800b720 <_sbrk_r>
 800b0b4:	4580      	cmp	r8, r0
 800b0b6:	d13a      	bne.n	800b12e <_malloc_r+0xd2>
 800b0b8:	6821      	ldr	r1, [r4, #0]
 800b0ba:	3503      	adds	r5, #3
 800b0bc:	1a6d      	subs	r5, r5, r1
 800b0be:	f025 0503 	bic.w	r5, r5, #3
 800b0c2:	3508      	adds	r5, #8
 800b0c4:	2d0c      	cmp	r5, #12
 800b0c6:	bf38      	it	cc
 800b0c8:	250c      	movcc	r5, #12
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7ff ffa5 	bl	800b01c <sbrk_aligned>
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	d02b      	beq.n	800b12e <_malloc_r+0xd2>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	442b      	add	r3, r5
 800b0da:	6023      	str	r3, [r4, #0]
 800b0dc:	e00e      	b.n	800b0fc <_malloc_r+0xa0>
 800b0de:	6822      	ldr	r2, [r4, #0]
 800b0e0:	1b52      	subs	r2, r2, r5
 800b0e2:	d41e      	bmi.n	800b122 <_malloc_r+0xc6>
 800b0e4:	2a0b      	cmp	r2, #11
 800b0e6:	d916      	bls.n	800b116 <_malloc_r+0xba>
 800b0e8:	1961      	adds	r1, r4, r5
 800b0ea:	42a3      	cmp	r3, r4
 800b0ec:	6025      	str	r5, [r4, #0]
 800b0ee:	bf18      	it	ne
 800b0f0:	6059      	strne	r1, [r3, #4]
 800b0f2:	6863      	ldr	r3, [r4, #4]
 800b0f4:	bf08      	it	eq
 800b0f6:	6031      	streq	r1, [r6, #0]
 800b0f8:	5162      	str	r2, [r4, r5]
 800b0fa:	604b      	str	r3, [r1, #4]
 800b0fc:	4638      	mov	r0, r7
 800b0fe:	f104 060b 	add.w	r6, r4, #11
 800b102:	f000 fe59 	bl	800bdb8 <__malloc_unlock>
 800b106:	f026 0607 	bic.w	r6, r6, #7
 800b10a:	1d23      	adds	r3, r4, #4
 800b10c:	1af2      	subs	r2, r6, r3
 800b10e:	d0b6      	beq.n	800b07e <_malloc_r+0x22>
 800b110:	1b9b      	subs	r3, r3, r6
 800b112:	50a3      	str	r3, [r4, r2]
 800b114:	e7b3      	b.n	800b07e <_malloc_r+0x22>
 800b116:	6862      	ldr	r2, [r4, #4]
 800b118:	42a3      	cmp	r3, r4
 800b11a:	bf0c      	ite	eq
 800b11c:	6032      	streq	r2, [r6, #0]
 800b11e:	605a      	strne	r2, [r3, #4]
 800b120:	e7ec      	b.n	800b0fc <_malloc_r+0xa0>
 800b122:	4623      	mov	r3, r4
 800b124:	6864      	ldr	r4, [r4, #4]
 800b126:	e7b2      	b.n	800b08e <_malloc_r+0x32>
 800b128:	4634      	mov	r4, r6
 800b12a:	6876      	ldr	r6, [r6, #4]
 800b12c:	e7b9      	b.n	800b0a2 <_malloc_r+0x46>
 800b12e:	230c      	movs	r3, #12
 800b130:	603b      	str	r3, [r7, #0]
 800b132:	4638      	mov	r0, r7
 800b134:	f000 fe40 	bl	800bdb8 <__malloc_unlock>
 800b138:	e7a1      	b.n	800b07e <_malloc_r+0x22>
 800b13a:	6025      	str	r5, [r4, #0]
 800b13c:	e7de      	b.n	800b0fc <_malloc_r+0xa0>
 800b13e:	bf00      	nop
 800b140:	200007a4 	.word	0x200007a4

0800b144 <__sfputc_r>:
 800b144:	6893      	ldr	r3, [r2, #8]
 800b146:	3b01      	subs	r3, #1
 800b148:	2b00      	cmp	r3, #0
 800b14a:	b410      	push	{r4}
 800b14c:	6093      	str	r3, [r2, #8]
 800b14e:	da08      	bge.n	800b162 <__sfputc_r+0x1e>
 800b150:	6994      	ldr	r4, [r2, #24]
 800b152:	42a3      	cmp	r3, r4
 800b154:	db01      	blt.n	800b15a <__sfputc_r+0x16>
 800b156:	290a      	cmp	r1, #10
 800b158:	d103      	bne.n	800b162 <__sfputc_r+0x1e>
 800b15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b15e:	f000 bb23 	b.w	800b7a8 <__swbuf_r>
 800b162:	6813      	ldr	r3, [r2, #0]
 800b164:	1c58      	adds	r0, r3, #1
 800b166:	6010      	str	r0, [r2, #0]
 800b168:	7019      	strb	r1, [r3, #0]
 800b16a:	4608      	mov	r0, r1
 800b16c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <__sfputs_r>:
 800b172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b174:	4606      	mov	r6, r0
 800b176:	460f      	mov	r7, r1
 800b178:	4614      	mov	r4, r2
 800b17a:	18d5      	adds	r5, r2, r3
 800b17c:	42ac      	cmp	r4, r5
 800b17e:	d101      	bne.n	800b184 <__sfputs_r+0x12>
 800b180:	2000      	movs	r0, #0
 800b182:	e007      	b.n	800b194 <__sfputs_r+0x22>
 800b184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b188:	463a      	mov	r2, r7
 800b18a:	4630      	mov	r0, r6
 800b18c:	f7ff ffda 	bl	800b144 <__sfputc_r>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d1f3      	bne.n	800b17c <__sfputs_r+0xa>
 800b194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b198 <_vfiprintf_r>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	460d      	mov	r5, r1
 800b19e:	b09d      	sub	sp, #116	; 0x74
 800b1a0:	4614      	mov	r4, r2
 800b1a2:	4698      	mov	r8, r3
 800b1a4:	4606      	mov	r6, r0
 800b1a6:	b118      	cbz	r0, 800b1b0 <_vfiprintf_r+0x18>
 800b1a8:	6983      	ldr	r3, [r0, #24]
 800b1aa:	b90b      	cbnz	r3, 800b1b0 <_vfiprintf_r+0x18>
 800b1ac:	f000 fcde 	bl	800bb6c <__sinit>
 800b1b0:	4b89      	ldr	r3, [pc, #548]	; (800b3d8 <_vfiprintf_r+0x240>)
 800b1b2:	429d      	cmp	r5, r3
 800b1b4:	d11b      	bne.n	800b1ee <_vfiprintf_r+0x56>
 800b1b6:	6875      	ldr	r5, [r6, #4]
 800b1b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ba:	07d9      	lsls	r1, r3, #31
 800b1bc:	d405      	bmi.n	800b1ca <_vfiprintf_r+0x32>
 800b1be:	89ab      	ldrh	r3, [r5, #12]
 800b1c0:	059a      	lsls	r2, r3, #22
 800b1c2:	d402      	bmi.n	800b1ca <_vfiprintf_r+0x32>
 800b1c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1c6:	f000 fd6f 	bl	800bca8 <__retarget_lock_acquire_recursive>
 800b1ca:	89ab      	ldrh	r3, [r5, #12]
 800b1cc:	071b      	lsls	r3, r3, #28
 800b1ce:	d501      	bpl.n	800b1d4 <_vfiprintf_r+0x3c>
 800b1d0:	692b      	ldr	r3, [r5, #16]
 800b1d2:	b9eb      	cbnz	r3, 800b210 <_vfiprintf_r+0x78>
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f000 fb38 	bl	800b84c <__swsetup_r>
 800b1dc:	b1c0      	cbz	r0, 800b210 <_vfiprintf_r+0x78>
 800b1de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1e0:	07dc      	lsls	r4, r3, #31
 800b1e2:	d50e      	bpl.n	800b202 <_vfiprintf_r+0x6a>
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e8:	b01d      	add	sp, #116	; 0x74
 800b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ee:	4b7b      	ldr	r3, [pc, #492]	; (800b3dc <_vfiprintf_r+0x244>)
 800b1f0:	429d      	cmp	r5, r3
 800b1f2:	d101      	bne.n	800b1f8 <_vfiprintf_r+0x60>
 800b1f4:	68b5      	ldr	r5, [r6, #8]
 800b1f6:	e7df      	b.n	800b1b8 <_vfiprintf_r+0x20>
 800b1f8:	4b79      	ldr	r3, [pc, #484]	; (800b3e0 <_vfiprintf_r+0x248>)
 800b1fa:	429d      	cmp	r5, r3
 800b1fc:	bf08      	it	eq
 800b1fe:	68f5      	ldreq	r5, [r6, #12]
 800b200:	e7da      	b.n	800b1b8 <_vfiprintf_r+0x20>
 800b202:	89ab      	ldrh	r3, [r5, #12]
 800b204:	0598      	lsls	r0, r3, #22
 800b206:	d4ed      	bmi.n	800b1e4 <_vfiprintf_r+0x4c>
 800b208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b20a:	f000 fd4e 	bl	800bcaa <__retarget_lock_release_recursive>
 800b20e:	e7e9      	b.n	800b1e4 <_vfiprintf_r+0x4c>
 800b210:	2300      	movs	r3, #0
 800b212:	9309      	str	r3, [sp, #36]	; 0x24
 800b214:	2320      	movs	r3, #32
 800b216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b21a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b21e:	2330      	movs	r3, #48	; 0x30
 800b220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3e4 <_vfiprintf_r+0x24c>
 800b224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b228:	f04f 0901 	mov.w	r9, #1
 800b22c:	4623      	mov	r3, r4
 800b22e:	469a      	mov	sl, r3
 800b230:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b234:	b10a      	cbz	r2, 800b23a <_vfiprintf_r+0xa2>
 800b236:	2a25      	cmp	r2, #37	; 0x25
 800b238:	d1f9      	bne.n	800b22e <_vfiprintf_r+0x96>
 800b23a:	ebba 0b04 	subs.w	fp, sl, r4
 800b23e:	d00b      	beq.n	800b258 <_vfiprintf_r+0xc0>
 800b240:	465b      	mov	r3, fp
 800b242:	4622      	mov	r2, r4
 800b244:	4629      	mov	r1, r5
 800b246:	4630      	mov	r0, r6
 800b248:	f7ff ff93 	bl	800b172 <__sfputs_r>
 800b24c:	3001      	adds	r0, #1
 800b24e:	f000 80aa 	beq.w	800b3a6 <_vfiprintf_r+0x20e>
 800b252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b254:	445a      	add	r2, fp
 800b256:	9209      	str	r2, [sp, #36]	; 0x24
 800b258:	f89a 3000 	ldrb.w	r3, [sl]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 80a2 	beq.w	800b3a6 <_vfiprintf_r+0x20e>
 800b262:	2300      	movs	r3, #0
 800b264:	f04f 32ff 	mov.w	r2, #4294967295
 800b268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b26c:	f10a 0a01 	add.w	sl, sl, #1
 800b270:	9304      	str	r3, [sp, #16]
 800b272:	9307      	str	r3, [sp, #28]
 800b274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b278:	931a      	str	r3, [sp, #104]	; 0x68
 800b27a:	4654      	mov	r4, sl
 800b27c:	2205      	movs	r2, #5
 800b27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b282:	4858      	ldr	r0, [pc, #352]	; (800b3e4 <_vfiprintf_r+0x24c>)
 800b284:	f7f4 ff94 	bl	80001b0 <memchr>
 800b288:	9a04      	ldr	r2, [sp, #16]
 800b28a:	b9d8      	cbnz	r0, 800b2c4 <_vfiprintf_r+0x12c>
 800b28c:	06d1      	lsls	r1, r2, #27
 800b28e:	bf44      	itt	mi
 800b290:	2320      	movmi	r3, #32
 800b292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b296:	0713      	lsls	r3, r2, #28
 800b298:	bf44      	itt	mi
 800b29a:	232b      	movmi	r3, #43	; 0x2b
 800b29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2a6:	d015      	beq.n	800b2d4 <_vfiprintf_r+0x13c>
 800b2a8:	9a07      	ldr	r2, [sp, #28]
 800b2aa:	4654      	mov	r4, sl
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	f04f 0c0a 	mov.w	ip, #10
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2b8:	3b30      	subs	r3, #48	; 0x30
 800b2ba:	2b09      	cmp	r3, #9
 800b2bc:	d94e      	bls.n	800b35c <_vfiprintf_r+0x1c4>
 800b2be:	b1b0      	cbz	r0, 800b2ee <_vfiprintf_r+0x156>
 800b2c0:	9207      	str	r2, [sp, #28]
 800b2c2:	e014      	b.n	800b2ee <_vfiprintf_r+0x156>
 800b2c4:	eba0 0308 	sub.w	r3, r0, r8
 800b2c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	46a2      	mov	sl, r4
 800b2d2:	e7d2      	b.n	800b27a <_vfiprintf_r+0xe2>
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	1d19      	adds	r1, r3, #4
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	9103      	str	r1, [sp, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	bfbb      	ittet	lt
 800b2e0:	425b      	neglt	r3, r3
 800b2e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b2e6:	9307      	strge	r3, [sp, #28]
 800b2e8:	9307      	strlt	r3, [sp, #28]
 800b2ea:	bfb8      	it	lt
 800b2ec:	9204      	strlt	r2, [sp, #16]
 800b2ee:	7823      	ldrb	r3, [r4, #0]
 800b2f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b2f2:	d10c      	bne.n	800b30e <_vfiprintf_r+0x176>
 800b2f4:	7863      	ldrb	r3, [r4, #1]
 800b2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2f8:	d135      	bne.n	800b366 <_vfiprintf_r+0x1ce>
 800b2fa:	9b03      	ldr	r3, [sp, #12]
 800b2fc:	1d1a      	adds	r2, r3, #4
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	9203      	str	r2, [sp, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	bfb8      	it	lt
 800b306:	f04f 33ff 	movlt.w	r3, #4294967295
 800b30a:	3402      	adds	r4, #2
 800b30c:	9305      	str	r3, [sp, #20]
 800b30e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3f4 <_vfiprintf_r+0x25c>
 800b312:	7821      	ldrb	r1, [r4, #0]
 800b314:	2203      	movs	r2, #3
 800b316:	4650      	mov	r0, sl
 800b318:	f7f4 ff4a 	bl	80001b0 <memchr>
 800b31c:	b140      	cbz	r0, 800b330 <_vfiprintf_r+0x198>
 800b31e:	2340      	movs	r3, #64	; 0x40
 800b320:	eba0 000a 	sub.w	r0, r0, sl
 800b324:	fa03 f000 	lsl.w	r0, r3, r0
 800b328:	9b04      	ldr	r3, [sp, #16]
 800b32a:	4303      	orrs	r3, r0
 800b32c:	3401      	adds	r4, #1
 800b32e:	9304      	str	r3, [sp, #16]
 800b330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b334:	482c      	ldr	r0, [pc, #176]	; (800b3e8 <_vfiprintf_r+0x250>)
 800b336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b33a:	2206      	movs	r2, #6
 800b33c:	f7f4 ff38 	bl	80001b0 <memchr>
 800b340:	2800      	cmp	r0, #0
 800b342:	d03f      	beq.n	800b3c4 <_vfiprintf_r+0x22c>
 800b344:	4b29      	ldr	r3, [pc, #164]	; (800b3ec <_vfiprintf_r+0x254>)
 800b346:	bb1b      	cbnz	r3, 800b390 <_vfiprintf_r+0x1f8>
 800b348:	9b03      	ldr	r3, [sp, #12]
 800b34a:	3307      	adds	r3, #7
 800b34c:	f023 0307 	bic.w	r3, r3, #7
 800b350:	3308      	adds	r3, #8
 800b352:	9303      	str	r3, [sp, #12]
 800b354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b356:	443b      	add	r3, r7
 800b358:	9309      	str	r3, [sp, #36]	; 0x24
 800b35a:	e767      	b.n	800b22c <_vfiprintf_r+0x94>
 800b35c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b360:	460c      	mov	r4, r1
 800b362:	2001      	movs	r0, #1
 800b364:	e7a5      	b.n	800b2b2 <_vfiprintf_r+0x11a>
 800b366:	2300      	movs	r3, #0
 800b368:	3401      	adds	r4, #1
 800b36a:	9305      	str	r3, [sp, #20]
 800b36c:	4619      	mov	r1, r3
 800b36e:	f04f 0c0a 	mov.w	ip, #10
 800b372:	4620      	mov	r0, r4
 800b374:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b378:	3a30      	subs	r2, #48	; 0x30
 800b37a:	2a09      	cmp	r2, #9
 800b37c:	d903      	bls.n	800b386 <_vfiprintf_r+0x1ee>
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d0c5      	beq.n	800b30e <_vfiprintf_r+0x176>
 800b382:	9105      	str	r1, [sp, #20]
 800b384:	e7c3      	b.n	800b30e <_vfiprintf_r+0x176>
 800b386:	fb0c 2101 	mla	r1, ip, r1, r2
 800b38a:	4604      	mov	r4, r0
 800b38c:	2301      	movs	r3, #1
 800b38e:	e7f0      	b.n	800b372 <_vfiprintf_r+0x1da>
 800b390:	ab03      	add	r3, sp, #12
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	462a      	mov	r2, r5
 800b396:	4b16      	ldr	r3, [pc, #88]	; (800b3f0 <_vfiprintf_r+0x258>)
 800b398:	a904      	add	r1, sp, #16
 800b39a:	4630      	mov	r0, r6
 800b39c:	f3af 8000 	nop.w
 800b3a0:	4607      	mov	r7, r0
 800b3a2:	1c78      	adds	r0, r7, #1
 800b3a4:	d1d6      	bne.n	800b354 <_vfiprintf_r+0x1bc>
 800b3a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3a8:	07d9      	lsls	r1, r3, #31
 800b3aa:	d405      	bmi.n	800b3b8 <_vfiprintf_r+0x220>
 800b3ac:	89ab      	ldrh	r3, [r5, #12]
 800b3ae:	059a      	lsls	r2, r3, #22
 800b3b0:	d402      	bmi.n	800b3b8 <_vfiprintf_r+0x220>
 800b3b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3b4:	f000 fc79 	bl	800bcaa <__retarget_lock_release_recursive>
 800b3b8:	89ab      	ldrh	r3, [r5, #12]
 800b3ba:	065b      	lsls	r3, r3, #25
 800b3bc:	f53f af12 	bmi.w	800b1e4 <_vfiprintf_r+0x4c>
 800b3c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3c2:	e711      	b.n	800b1e8 <_vfiprintf_r+0x50>
 800b3c4:	ab03      	add	r3, sp, #12
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	462a      	mov	r2, r5
 800b3ca:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <_vfiprintf_r+0x258>)
 800b3cc:	a904      	add	r1, sp, #16
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	f000 f880 	bl	800b4d4 <_printf_i>
 800b3d4:	e7e4      	b.n	800b3a0 <_vfiprintf_r+0x208>
 800b3d6:	bf00      	nop
 800b3d8:	0800cb14 	.word	0x0800cb14
 800b3dc:	0800cb34 	.word	0x0800cb34
 800b3e0:	0800caf4 	.word	0x0800caf4
 800b3e4:	0800cac0 	.word	0x0800cac0
 800b3e8:	0800caca 	.word	0x0800caca
 800b3ec:	00000000 	.word	0x00000000
 800b3f0:	0800b173 	.word	0x0800b173
 800b3f4:	0800cac6 	.word	0x0800cac6

0800b3f8 <_printf_common>:
 800b3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3fc:	4616      	mov	r6, r2
 800b3fe:	4699      	mov	r9, r3
 800b400:	688a      	ldr	r2, [r1, #8]
 800b402:	690b      	ldr	r3, [r1, #16]
 800b404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b408:	4293      	cmp	r3, r2
 800b40a:	bfb8      	it	lt
 800b40c:	4613      	movlt	r3, r2
 800b40e:	6033      	str	r3, [r6, #0]
 800b410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b414:	4607      	mov	r7, r0
 800b416:	460c      	mov	r4, r1
 800b418:	b10a      	cbz	r2, 800b41e <_printf_common+0x26>
 800b41a:	3301      	adds	r3, #1
 800b41c:	6033      	str	r3, [r6, #0]
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	0699      	lsls	r1, r3, #26
 800b422:	bf42      	ittt	mi
 800b424:	6833      	ldrmi	r3, [r6, #0]
 800b426:	3302      	addmi	r3, #2
 800b428:	6033      	strmi	r3, [r6, #0]
 800b42a:	6825      	ldr	r5, [r4, #0]
 800b42c:	f015 0506 	ands.w	r5, r5, #6
 800b430:	d106      	bne.n	800b440 <_printf_common+0x48>
 800b432:	f104 0a19 	add.w	sl, r4, #25
 800b436:	68e3      	ldr	r3, [r4, #12]
 800b438:	6832      	ldr	r2, [r6, #0]
 800b43a:	1a9b      	subs	r3, r3, r2
 800b43c:	42ab      	cmp	r3, r5
 800b43e:	dc26      	bgt.n	800b48e <_printf_common+0x96>
 800b440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b444:	1e13      	subs	r3, r2, #0
 800b446:	6822      	ldr	r2, [r4, #0]
 800b448:	bf18      	it	ne
 800b44a:	2301      	movne	r3, #1
 800b44c:	0692      	lsls	r2, r2, #26
 800b44e:	d42b      	bmi.n	800b4a8 <_printf_common+0xb0>
 800b450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b454:	4649      	mov	r1, r9
 800b456:	4638      	mov	r0, r7
 800b458:	47c0      	blx	r8
 800b45a:	3001      	adds	r0, #1
 800b45c:	d01e      	beq.n	800b49c <_printf_common+0xa4>
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	68e5      	ldr	r5, [r4, #12]
 800b462:	6832      	ldr	r2, [r6, #0]
 800b464:	f003 0306 	and.w	r3, r3, #6
 800b468:	2b04      	cmp	r3, #4
 800b46a:	bf08      	it	eq
 800b46c:	1aad      	subeq	r5, r5, r2
 800b46e:	68a3      	ldr	r3, [r4, #8]
 800b470:	6922      	ldr	r2, [r4, #16]
 800b472:	bf0c      	ite	eq
 800b474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b478:	2500      	movne	r5, #0
 800b47a:	4293      	cmp	r3, r2
 800b47c:	bfc4      	itt	gt
 800b47e:	1a9b      	subgt	r3, r3, r2
 800b480:	18ed      	addgt	r5, r5, r3
 800b482:	2600      	movs	r6, #0
 800b484:	341a      	adds	r4, #26
 800b486:	42b5      	cmp	r5, r6
 800b488:	d11a      	bne.n	800b4c0 <_printf_common+0xc8>
 800b48a:	2000      	movs	r0, #0
 800b48c:	e008      	b.n	800b4a0 <_printf_common+0xa8>
 800b48e:	2301      	movs	r3, #1
 800b490:	4652      	mov	r2, sl
 800b492:	4649      	mov	r1, r9
 800b494:	4638      	mov	r0, r7
 800b496:	47c0      	blx	r8
 800b498:	3001      	adds	r0, #1
 800b49a:	d103      	bne.n	800b4a4 <_printf_common+0xac>
 800b49c:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a4:	3501      	adds	r5, #1
 800b4a6:	e7c6      	b.n	800b436 <_printf_common+0x3e>
 800b4a8:	18e1      	adds	r1, r4, r3
 800b4aa:	1c5a      	adds	r2, r3, #1
 800b4ac:	2030      	movs	r0, #48	; 0x30
 800b4ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4b2:	4422      	add	r2, r4
 800b4b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4bc:	3302      	adds	r3, #2
 800b4be:	e7c7      	b.n	800b450 <_printf_common+0x58>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	47c0      	blx	r8
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	d0e6      	beq.n	800b49c <_printf_common+0xa4>
 800b4ce:	3601      	adds	r6, #1
 800b4d0:	e7d9      	b.n	800b486 <_printf_common+0x8e>
	...

0800b4d4 <_printf_i>:
 800b4d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d8:	7e0f      	ldrb	r7, [r1, #24]
 800b4da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4dc:	2f78      	cmp	r7, #120	; 0x78
 800b4de:	4691      	mov	r9, r2
 800b4e0:	4680      	mov	r8, r0
 800b4e2:	460c      	mov	r4, r1
 800b4e4:	469a      	mov	sl, r3
 800b4e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4ea:	d807      	bhi.n	800b4fc <_printf_i+0x28>
 800b4ec:	2f62      	cmp	r7, #98	; 0x62
 800b4ee:	d80a      	bhi.n	800b506 <_printf_i+0x32>
 800b4f0:	2f00      	cmp	r7, #0
 800b4f2:	f000 80d8 	beq.w	800b6a6 <_printf_i+0x1d2>
 800b4f6:	2f58      	cmp	r7, #88	; 0x58
 800b4f8:	f000 80a3 	beq.w	800b642 <_printf_i+0x16e>
 800b4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b504:	e03a      	b.n	800b57c <_printf_i+0xa8>
 800b506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b50a:	2b15      	cmp	r3, #21
 800b50c:	d8f6      	bhi.n	800b4fc <_printf_i+0x28>
 800b50e:	a101      	add	r1, pc, #4	; (adr r1, 800b514 <_printf_i+0x40>)
 800b510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b514:	0800b56d 	.word	0x0800b56d
 800b518:	0800b581 	.word	0x0800b581
 800b51c:	0800b4fd 	.word	0x0800b4fd
 800b520:	0800b4fd 	.word	0x0800b4fd
 800b524:	0800b4fd 	.word	0x0800b4fd
 800b528:	0800b4fd 	.word	0x0800b4fd
 800b52c:	0800b581 	.word	0x0800b581
 800b530:	0800b4fd 	.word	0x0800b4fd
 800b534:	0800b4fd 	.word	0x0800b4fd
 800b538:	0800b4fd 	.word	0x0800b4fd
 800b53c:	0800b4fd 	.word	0x0800b4fd
 800b540:	0800b68d 	.word	0x0800b68d
 800b544:	0800b5b1 	.word	0x0800b5b1
 800b548:	0800b66f 	.word	0x0800b66f
 800b54c:	0800b4fd 	.word	0x0800b4fd
 800b550:	0800b4fd 	.word	0x0800b4fd
 800b554:	0800b6af 	.word	0x0800b6af
 800b558:	0800b4fd 	.word	0x0800b4fd
 800b55c:	0800b5b1 	.word	0x0800b5b1
 800b560:	0800b4fd 	.word	0x0800b4fd
 800b564:	0800b4fd 	.word	0x0800b4fd
 800b568:	0800b677 	.word	0x0800b677
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	1d1a      	adds	r2, r3, #4
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	602a      	str	r2, [r5, #0]
 800b574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b57c:	2301      	movs	r3, #1
 800b57e:	e0a3      	b.n	800b6c8 <_printf_i+0x1f4>
 800b580:	6820      	ldr	r0, [r4, #0]
 800b582:	6829      	ldr	r1, [r5, #0]
 800b584:	0606      	lsls	r6, r0, #24
 800b586:	f101 0304 	add.w	r3, r1, #4
 800b58a:	d50a      	bpl.n	800b5a2 <_printf_i+0xce>
 800b58c:	680e      	ldr	r6, [r1, #0]
 800b58e:	602b      	str	r3, [r5, #0]
 800b590:	2e00      	cmp	r6, #0
 800b592:	da03      	bge.n	800b59c <_printf_i+0xc8>
 800b594:	232d      	movs	r3, #45	; 0x2d
 800b596:	4276      	negs	r6, r6
 800b598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b59c:	485e      	ldr	r0, [pc, #376]	; (800b718 <_printf_i+0x244>)
 800b59e:	230a      	movs	r3, #10
 800b5a0:	e019      	b.n	800b5d6 <_printf_i+0x102>
 800b5a2:	680e      	ldr	r6, [r1, #0]
 800b5a4:	602b      	str	r3, [r5, #0]
 800b5a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5aa:	bf18      	it	ne
 800b5ac:	b236      	sxthne	r6, r6
 800b5ae:	e7ef      	b.n	800b590 <_printf_i+0xbc>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	6820      	ldr	r0, [r4, #0]
 800b5b4:	1d19      	adds	r1, r3, #4
 800b5b6:	6029      	str	r1, [r5, #0]
 800b5b8:	0601      	lsls	r1, r0, #24
 800b5ba:	d501      	bpl.n	800b5c0 <_printf_i+0xec>
 800b5bc:	681e      	ldr	r6, [r3, #0]
 800b5be:	e002      	b.n	800b5c6 <_printf_i+0xf2>
 800b5c0:	0646      	lsls	r6, r0, #25
 800b5c2:	d5fb      	bpl.n	800b5bc <_printf_i+0xe8>
 800b5c4:	881e      	ldrh	r6, [r3, #0]
 800b5c6:	4854      	ldr	r0, [pc, #336]	; (800b718 <_printf_i+0x244>)
 800b5c8:	2f6f      	cmp	r7, #111	; 0x6f
 800b5ca:	bf0c      	ite	eq
 800b5cc:	2308      	moveq	r3, #8
 800b5ce:	230a      	movne	r3, #10
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5d6:	6865      	ldr	r5, [r4, #4]
 800b5d8:	60a5      	str	r5, [r4, #8]
 800b5da:	2d00      	cmp	r5, #0
 800b5dc:	bfa2      	ittt	ge
 800b5de:	6821      	ldrge	r1, [r4, #0]
 800b5e0:	f021 0104 	bicge.w	r1, r1, #4
 800b5e4:	6021      	strge	r1, [r4, #0]
 800b5e6:	b90e      	cbnz	r6, 800b5ec <_printf_i+0x118>
 800b5e8:	2d00      	cmp	r5, #0
 800b5ea:	d04d      	beq.n	800b688 <_printf_i+0x1b4>
 800b5ec:	4615      	mov	r5, r2
 800b5ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5f2:	fb03 6711 	mls	r7, r3, r1, r6
 800b5f6:	5dc7      	ldrb	r7, [r0, r7]
 800b5f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5fc:	4637      	mov	r7, r6
 800b5fe:	42bb      	cmp	r3, r7
 800b600:	460e      	mov	r6, r1
 800b602:	d9f4      	bls.n	800b5ee <_printf_i+0x11a>
 800b604:	2b08      	cmp	r3, #8
 800b606:	d10b      	bne.n	800b620 <_printf_i+0x14c>
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	07de      	lsls	r6, r3, #31
 800b60c:	d508      	bpl.n	800b620 <_printf_i+0x14c>
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	6861      	ldr	r1, [r4, #4]
 800b612:	4299      	cmp	r1, r3
 800b614:	bfde      	ittt	le
 800b616:	2330      	movle	r3, #48	; 0x30
 800b618:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b61c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b620:	1b52      	subs	r2, r2, r5
 800b622:	6122      	str	r2, [r4, #16]
 800b624:	f8cd a000 	str.w	sl, [sp]
 800b628:	464b      	mov	r3, r9
 800b62a:	aa03      	add	r2, sp, #12
 800b62c:	4621      	mov	r1, r4
 800b62e:	4640      	mov	r0, r8
 800b630:	f7ff fee2 	bl	800b3f8 <_printf_common>
 800b634:	3001      	adds	r0, #1
 800b636:	d14c      	bne.n	800b6d2 <_printf_i+0x1fe>
 800b638:	f04f 30ff 	mov.w	r0, #4294967295
 800b63c:	b004      	add	sp, #16
 800b63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b642:	4835      	ldr	r0, [pc, #212]	; (800b718 <_printf_i+0x244>)
 800b644:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b648:	6829      	ldr	r1, [r5, #0]
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b650:	6029      	str	r1, [r5, #0]
 800b652:	061d      	lsls	r5, r3, #24
 800b654:	d514      	bpl.n	800b680 <_printf_i+0x1ac>
 800b656:	07df      	lsls	r7, r3, #31
 800b658:	bf44      	itt	mi
 800b65a:	f043 0320 	orrmi.w	r3, r3, #32
 800b65e:	6023      	strmi	r3, [r4, #0]
 800b660:	b91e      	cbnz	r6, 800b66a <_printf_i+0x196>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	f023 0320 	bic.w	r3, r3, #32
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	2310      	movs	r3, #16
 800b66c:	e7b0      	b.n	800b5d0 <_printf_i+0xfc>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	f043 0320 	orr.w	r3, r3, #32
 800b674:	6023      	str	r3, [r4, #0]
 800b676:	2378      	movs	r3, #120	; 0x78
 800b678:	4828      	ldr	r0, [pc, #160]	; (800b71c <_printf_i+0x248>)
 800b67a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b67e:	e7e3      	b.n	800b648 <_printf_i+0x174>
 800b680:	0659      	lsls	r1, r3, #25
 800b682:	bf48      	it	mi
 800b684:	b2b6      	uxthmi	r6, r6
 800b686:	e7e6      	b.n	800b656 <_printf_i+0x182>
 800b688:	4615      	mov	r5, r2
 800b68a:	e7bb      	b.n	800b604 <_printf_i+0x130>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	6826      	ldr	r6, [r4, #0]
 800b690:	6961      	ldr	r1, [r4, #20]
 800b692:	1d18      	adds	r0, r3, #4
 800b694:	6028      	str	r0, [r5, #0]
 800b696:	0635      	lsls	r5, r6, #24
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	d501      	bpl.n	800b6a0 <_printf_i+0x1cc>
 800b69c:	6019      	str	r1, [r3, #0]
 800b69e:	e002      	b.n	800b6a6 <_printf_i+0x1d2>
 800b6a0:	0670      	lsls	r0, r6, #25
 800b6a2:	d5fb      	bpl.n	800b69c <_printf_i+0x1c8>
 800b6a4:	8019      	strh	r1, [r3, #0]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6123      	str	r3, [r4, #16]
 800b6aa:	4615      	mov	r5, r2
 800b6ac:	e7ba      	b.n	800b624 <_printf_i+0x150>
 800b6ae:	682b      	ldr	r3, [r5, #0]
 800b6b0:	1d1a      	adds	r2, r3, #4
 800b6b2:	602a      	str	r2, [r5, #0]
 800b6b4:	681d      	ldr	r5, [r3, #0]
 800b6b6:	6862      	ldr	r2, [r4, #4]
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f7f4 fd78 	bl	80001b0 <memchr>
 800b6c0:	b108      	cbz	r0, 800b6c6 <_printf_i+0x1f2>
 800b6c2:	1b40      	subs	r0, r0, r5
 800b6c4:	6060      	str	r0, [r4, #4]
 800b6c6:	6863      	ldr	r3, [r4, #4]
 800b6c8:	6123      	str	r3, [r4, #16]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6d0:	e7a8      	b.n	800b624 <_printf_i+0x150>
 800b6d2:	6923      	ldr	r3, [r4, #16]
 800b6d4:	462a      	mov	r2, r5
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	4640      	mov	r0, r8
 800b6da:	47d0      	blx	sl
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d0ab      	beq.n	800b638 <_printf_i+0x164>
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	079b      	lsls	r3, r3, #30
 800b6e4:	d413      	bmi.n	800b70e <_printf_i+0x23a>
 800b6e6:	68e0      	ldr	r0, [r4, #12]
 800b6e8:	9b03      	ldr	r3, [sp, #12]
 800b6ea:	4298      	cmp	r0, r3
 800b6ec:	bfb8      	it	lt
 800b6ee:	4618      	movlt	r0, r3
 800b6f0:	e7a4      	b.n	800b63c <_printf_i+0x168>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	4632      	mov	r2, r6
 800b6f6:	4649      	mov	r1, r9
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	47d0      	blx	sl
 800b6fc:	3001      	adds	r0, #1
 800b6fe:	d09b      	beq.n	800b638 <_printf_i+0x164>
 800b700:	3501      	adds	r5, #1
 800b702:	68e3      	ldr	r3, [r4, #12]
 800b704:	9903      	ldr	r1, [sp, #12]
 800b706:	1a5b      	subs	r3, r3, r1
 800b708:	42ab      	cmp	r3, r5
 800b70a:	dcf2      	bgt.n	800b6f2 <_printf_i+0x21e>
 800b70c:	e7eb      	b.n	800b6e6 <_printf_i+0x212>
 800b70e:	2500      	movs	r5, #0
 800b710:	f104 0619 	add.w	r6, r4, #25
 800b714:	e7f5      	b.n	800b702 <_printf_i+0x22e>
 800b716:	bf00      	nop
 800b718:	0800cad1 	.word	0x0800cad1
 800b71c:	0800cae2 	.word	0x0800cae2

0800b720 <_sbrk_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d06      	ldr	r5, [pc, #24]	; (800b73c <_sbrk_r+0x1c>)
 800b724:	2300      	movs	r3, #0
 800b726:	4604      	mov	r4, r0
 800b728:	4608      	mov	r0, r1
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	f7f5 f9e2 	bl	8000af4 <_sbrk>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_sbrk_r+0x1a>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_sbrk_r+0x1a>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	200007b0 	.word	0x200007b0

0800b740 <sniprintf>:
 800b740:	b40c      	push	{r2, r3}
 800b742:	b530      	push	{r4, r5, lr}
 800b744:	4b17      	ldr	r3, [pc, #92]	; (800b7a4 <sniprintf+0x64>)
 800b746:	1e0c      	subs	r4, r1, #0
 800b748:	681d      	ldr	r5, [r3, #0]
 800b74a:	b09d      	sub	sp, #116	; 0x74
 800b74c:	da08      	bge.n	800b760 <sniprintf+0x20>
 800b74e:	238b      	movs	r3, #139	; 0x8b
 800b750:	602b      	str	r3, [r5, #0]
 800b752:	f04f 30ff 	mov.w	r0, #4294967295
 800b756:	b01d      	add	sp, #116	; 0x74
 800b758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b75c:	b002      	add	sp, #8
 800b75e:	4770      	bx	lr
 800b760:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b764:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b768:	bf14      	ite	ne
 800b76a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b76e:	4623      	moveq	r3, r4
 800b770:	9304      	str	r3, [sp, #16]
 800b772:	9307      	str	r3, [sp, #28]
 800b774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b778:	9002      	str	r0, [sp, #8]
 800b77a:	9006      	str	r0, [sp, #24]
 800b77c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b780:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b782:	ab21      	add	r3, sp, #132	; 0x84
 800b784:	a902      	add	r1, sp, #8
 800b786:	4628      	mov	r0, r5
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	f000 fba5 	bl	800bed8 <_svfiprintf_r>
 800b78e:	1c43      	adds	r3, r0, #1
 800b790:	bfbc      	itt	lt
 800b792:	238b      	movlt	r3, #139	; 0x8b
 800b794:	602b      	strlt	r3, [r5, #0]
 800b796:	2c00      	cmp	r4, #0
 800b798:	d0dd      	beq.n	800b756 <sniprintf+0x16>
 800b79a:	9b02      	ldr	r3, [sp, #8]
 800b79c:	2200      	movs	r2, #0
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	e7d9      	b.n	800b756 <sniprintf+0x16>
 800b7a2:	bf00      	nop
 800b7a4:	20000040 	.word	0x20000040

0800b7a8 <__swbuf_r>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	460e      	mov	r6, r1
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	b118      	cbz	r0, 800b7ba <__swbuf_r+0x12>
 800b7b2:	6983      	ldr	r3, [r0, #24]
 800b7b4:	b90b      	cbnz	r3, 800b7ba <__swbuf_r+0x12>
 800b7b6:	f000 f9d9 	bl	800bb6c <__sinit>
 800b7ba:	4b21      	ldr	r3, [pc, #132]	; (800b840 <__swbuf_r+0x98>)
 800b7bc:	429c      	cmp	r4, r3
 800b7be:	d12b      	bne.n	800b818 <__swbuf_r+0x70>
 800b7c0:	686c      	ldr	r4, [r5, #4]
 800b7c2:	69a3      	ldr	r3, [r4, #24]
 800b7c4:	60a3      	str	r3, [r4, #8]
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	071a      	lsls	r2, r3, #28
 800b7ca:	d52f      	bpl.n	800b82c <__swbuf_r+0x84>
 800b7cc:	6923      	ldr	r3, [r4, #16]
 800b7ce:	b36b      	cbz	r3, 800b82c <__swbuf_r+0x84>
 800b7d0:	6923      	ldr	r3, [r4, #16]
 800b7d2:	6820      	ldr	r0, [r4, #0]
 800b7d4:	1ac0      	subs	r0, r0, r3
 800b7d6:	6963      	ldr	r3, [r4, #20]
 800b7d8:	b2f6      	uxtb	r6, r6
 800b7da:	4283      	cmp	r3, r0
 800b7dc:	4637      	mov	r7, r6
 800b7de:	dc04      	bgt.n	800b7ea <__swbuf_r+0x42>
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	f000 f92e 	bl	800ba44 <_fflush_r>
 800b7e8:	bb30      	cbnz	r0, 800b838 <__swbuf_r+0x90>
 800b7ea:	68a3      	ldr	r3, [r4, #8]
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	60a3      	str	r3, [r4, #8]
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	6022      	str	r2, [r4, #0]
 800b7f6:	701e      	strb	r6, [r3, #0]
 800b7f8:	6963      	ldr	r3, [r4, #20]
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	4283      	cmp	r3, r0
 800b7fe:	d004      	beq.n	800b80a <__swbuf_r+0x62>
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	07db      	lsls	r3, r3, #31
 800b804:	d506      	bpl.n	800b814 <__swbuf_r+0x6c>
 800b806:	2e0a      	cmp	r6, #10
 800b808:	d104      	bne.n	800b814 <__swbuf_r+0x6c>
 800b80a:	4621      	mov	r1, r4
 800b80c:	4628      	mov	r0, r5
 800b80e:	f000 f919 	bl	800ba44 <_fflush_r>
 800b812:	b988      	cbnz	r0, 800b838 <__swbuf_r+0x90>
 800b814:	4638      	mov	r0, r7
 800b816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b818:	4b0a      	ldr	r3, [pc, #40]	; (800b844 <__swbuf_r+0x9c>)
 800b81a:	429c      	cmp	r4, r3
 800b81c:	d101      	bne.n	800b822 <__swbuf_r+0x7a>
 800b81e:	68ac      	ldr	r4, [r5, #8]
 800b820:	e7cf      	b.n	800b7c2 <__swbuf_r+0x1a>
 800b822:	4b09      	ldr	r3, [pc, #36]	; (800b848 <__swbuf_r+0xa0>)
 800b824:	429c      	cmp	r4, r3
 800b826:	bf08      	it	eq
 800b828:	68ec      	ldreq	r4, [r5, #12]
 800b82a:	e7ca      	b.n	800b7c2 <__swbuf_r+0x1a>
 800b82c:	4621      	mov	r1, r4
 800b82e:	4628      	mov	r0, r5
 800b830:	f000 f80c 	bl	800b84c <__swsetup_r>
 800b834:	2800      	cmp	r0, #0
 800b836:	d0cb      	beq.n	800b7d0 <__swbuf_r+0x28>
 800b838:	f04f 37ff 	mov.w	r7, #4294967295
 800b83c:	e7ea      	b.n	800b814 <__swbuf_r+0x6c>
 800b83e:	bf00      	nop
 800b840:	0800cb14 	.word	0x0800cb14
 800b844:	0800cb34 	.word	0x0800cb34
 800b848:	0800caf4 	.word	0x0800caf4

0800b84c <__swsetup_r>:
 800b84c:	4b32      	ldr	r3, [pc, #200]	; (800b918 <__swsetup_r+0xcc>)
 800b84e:	b570      	push	{r4, r5, r6, lr}
 800b850:	681d      	ldr	r5, [r3, #0]
 800b852:	4606      	mov	r6, r0
 800b854:	460c      	mov	r4, r1
 800b856:	b125      	cbz	r5, 800b862 <__swsetup_r+0x16>
 800b858:	69ab      	ldr	r3, [r5, #24]
 800b85a:	b913      	cbnz	r3, 800b862 <__swsetup_r+0x16>
 800b85c:	4628      	mov	r0, r5
 800b85e:	f000 f985 	bl	800bb6c <__sinit>
 800b862:	4b2e      	ldr	r3, [pc, #184]	; (800b91c <__swsetup_r+0xd0>)
 800b864:	429c      	cmp	r4, r3
 800b866:	d10f      	bne.n	800b888 <__swsetup_r+0x3c>
 800b868:	686c      	ldr	r4, [r5, #4]
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b870:	0719      	lsls	r1, r3, #28
 800b872:	d42c      	bmi.n	800b8ce <__swsetup_r+0x82>
 800b874:	06dd      	lsls	r5, r3, #27
 800b876:	d411      	bmi.n	800b89c <__swsetup_r+0x50>
 800b878:	2309      	movs	r3, #9
 800b87a:	6033      	str	r3, [r6, #0]
 800b87c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b880:	81a3      	strh	r3, [r4, #12]
 800b882:	f04f 30ff 	mov.w	r0, #4294967295
 800b886:	e03e      	b.n	800b906 <__swsetup_r+0xba>
 800b888:	4b25      	ldr	r3, [pc, #148]	; (800b920 <__swsetup_r+0xd4>)
 800b88a:	429c      	cmp	r4, r3
 800b88c:	d101      	bne.n	800b892 <__swsetup_r+0x46>
 800b88e:	68ac      	ldr	r4, [r5, #8]
 800b890:	e7eb      	b.n	800b86a <__swsetup_r+0x1e>
 800b892:	4b24      	ldr	r3, [pc, #144]	; (800b924 <__swsetup_r+0xd8>)
 800b894:	429c      	cmp	r4, r3
 800b896:	bf08      	it	eq
 800b898:	68ec      	ldreq	r4, [r5, #12]
 800b89a:	e7e6      	b.n	800b86a <__swsetup_r+0x1e>
 800b89c:	0758      	lsls	r0, r3, #29
 800b89e:	d512      	bpl.n	800b8c6 <__swsetup_r+0x7a>
 800b8a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8a2:	b141      	cbz	r1, 800b8b6 <__swsetup_r+0x6a>
 800b8a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8a8:	4299      	cmp	r1, r3
 800b8aa:	d002      	beq.n	800b8b2 <__swsetup_r+0x66>
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f7ff fb69 	bl	800af84 <_free_r>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	6363      	str	r3, [r4, #52]	; 0x34
 800b8b6:	89a3      	ldrh	r3, [r4, #12]
 800b8b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8bc:	81a3      	strh	r3, [r4, #12]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	6063      	str	r3, [r4, #4]
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	89a3      	ldrh	r3, [r4, #12]
 800b8c8:	f043 0308 	orr.w	r3, r3, #8
 800b8cc:	81a3      	strh	r3, [r4, #12]
 800b8ce:	6923      	ldr	r3, [r4, #16]
 800b8d0:	b94b      	cbnz	r3, 800b8e6 <__swsetup_r+0x9a>
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8dc:	d003      	beq.n	800b8e6 <__swsetup_r+0x9a>
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f000 fa09 	bl	800bcf8 <__smakebuf_r>
 800b8e6:	89a0      	ldrh	r0, [r4, #12]
 800b8e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8ec:	f010 0301 	ands.w	r3, r0, #1
 800b8f0:	d00a      	beq.n	800b908 <__swsetup_r+0xbc>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	60a3      	str	r3, [r4, #8]
 800b8f6:	6963      	ldr	r3, [r4, #20]
 800b8f8:	425b      	negs	r3, r3
 800b8fa:	61a3      	str	r3, [r4, #24]
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	b943      	cbnz	r3, 800b912 <__swsetup_r+0xc6>
 800b900:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b904:	d1ba      	bne.n	800b87c <__swsetup_r+0x30>
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	0781      	lsls	r1, r0, #30
 800b90a:	bf58      	it	pl
 800b90c:	6963      	ldrpl	r3, [r4, #20]
 800b90e:	60a3      	str	r3, [r4, #8]
 800b910:	e7f4      	b.n	800b8fc <__swsetup_r+0xb0>
 800b912:	2000      	movs	r0, #0
 800b914:	e7f7      	b.n	800b906 <__swsetup_r+0xba>
 800b916:	bf00      	nop
 800b918:	20000040 	.word	0x20000040
 800b91c:	0800cb14 	.word	0x0800cb14
 800b920:	0800cb34 	.word	0x0800cb34
 800b924:	0800caf4 	.word	0x0800caf4

0800b928 <abort>:
 800b928:	b508      	push	{r3, lr}
 800b92a:	2006      	movs	r0, #6
 800b92c:	f000 fbfc 	bl	800c128 <raise>
 800b930:	2001      	movs	r0, #1
 800b932:	f7f5 f868 	bl	8000a06 <_exit>
	...

0800b938 <__sflush_r>:
 800b938:	898a      	ldrh	r2, [r1, #12]
 800b93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b93e:	4605      	mov	r5, r0
 800b940:	0710      	lsls	r0, r2, #28
 800b942:	460c      	mov	r4, r1
 800b944:	d458      	bmi.n	800b9f8 <__sflush_r+0xc0>
 800b946:	684b      	ldr	r3, [r1, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	dc05      	bgt.n	800b958 <__sflush_r+0x20>
 800b94c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b94e:	2b00      	cmp	r3, #0
 800b950:	dc02      	bgt.n	800b958 <__sflush_r+0x20>
 800b952:	2000      	movs	r0, #0
 800b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b95a:	2e00      	cmp	r6, #0
 800b95c:	d0f9      	beq.n	800b952 <__sflush_r+0x1a>
 800b95e:	2300      	movs	r3, #0
 800b960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b964:	682f      	ldr	r7, [r5, #0]
 800b966:	602b      	str	r3, [r5, #0]
 800b968:	d032      	beq.n	800b9d0 <__sflush_r+0x98>
 800b96a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b96c:	89a3      	ldrh	r3, [r4, #12]
 800b96e:	075a      	lsls	r2, r3, #29
 800b970:	d505      	bpl.n	800b97e <__sflush_r+0x46>
 800b972:	6863      	ldr	r3, [r4, #4]
 800b974:	1ac0      	subs	r0, r0, r3
 800b976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b978:	b10b      	cbz	r3, 800b97e <__sflush_r+0x46>
 800b97a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b97c:	1ac0      	subs	r0, r0, r3
 800b97e:	2300      	movs	r3, #0
 800b980:	4602      	mov	r2, r0
 800b982:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b984:	6a21      	ldr	r1, [r4, #32]
 800b986:	4628      	mov	r0, r5
 800b988:	47b0      	blx	r6
 800b98a:	1c43      	adds	r3, r0, #1
 800b98c:	89a3      	ldrh	r3, [r4, #12]
 800b98e:	d106      	bne.n	800b99e <__sflush_r+0x66>
 800b990:	6829      	ldr	r1, [r5, #0]
 800b992:	291d      	cmp	r1, #29
 800b994:	d82c      	bhi.n	800b9f0 <__sflush_r+0xb8>
 800b996:	4a2a      	ldr	r2, [pc, #168]	; (800ba40 <__sflush_r+0x108>)
 800b998:	40ca      	lsrs	r2, r1
 800b99a:	07d6      	lsls	r6, r2, #31
 800b99c:	d528      	bpl.n	800b9f0 <__sflush_r+0xb8>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	6062      	str	r2, [r4, #4]
 800b9a2:	04d9      	lsls	r1, r3, #19
 800b9a4:	6922      	ldr	r2, [r4, #16]
 800b9a6:	6022      	str	r2, [r4, #0]
 800b9a8:	d504      	bpl.n	800b9b4 <__sflush_r+0x7c>
 800b9aa:	1c42      	adds	r2, r0, #1
 800b9ac:	d101      	bne.n	800b9b2 <__sflush_r+0x7a>
 800b9ae:	682b      	ldr	r3, [r5, #0]
 800b9b0:	b903      	cbnz	r3, 800b9b4 <__sflush_r+0x7c>
 800b9b2:	6560      	str	r0, [r4, #84]	; 0x54
 800b9b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9b6:	602f      	str	r7, [r5, #0]
 800b9b8:	2900      	cmp	r1, #0
 800b9ba:	d0ca      	beq.n	800b952 <__sflush_r+0x1a>
 800b9bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9c0:	4299      	cmp	r1, r3
 800b9c2:	d002      	beq.n	800b9ca <__sflush_r+0x92>
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	f7ff fadd 	bl	800af84 <_free_r>
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	6360      	str	r0, [r4, #52]	; 0x34
 800b9ce:	e7c1      	b.n	800b954 <__sflush_r+0x1c>
 800b9d0:	6a21      	ldr	r1, [r4, #32]
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	47b0      	blx	r6
 800b9d8:	1c41      	adds	r1, r0, #1
 800b9da:	d1c7      	bne.n	800b96c <__sflush_r+0x34>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0c4      	beq.n	800b96c <__sflush_r+0x34>
 800b9e2:	2b1d      	cmp	r3, #29
 800b9e4:	d001      	beq.n	800b9ea <__sflush_r+0xb2>
 800b9e6:	2b16      	cmp	r3, #22
 800b9e8:	d101      	bne.n	800b9ee <__sflush_r+0xb6>
 800b9ea:	602f      	str	r7, [r5, #0]
 800b9ec:	e7b1      	b.n	800b952 <__sflush_r+0x1a>
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f4:	81a3      	strh	r3, [r4, #12]
 800b9f6:	e7ad      	b.n	800b954 <__sflush_r+0x1c>
 800b9f8:	690f      	ldr	r7, [r1, #16]
 800b9fa:	2f00      	cmp	r7, #0
 800b9fc:	d0a9      	beq.n	800b952 <__sflush_r+0x1a>
 800b9fe:	0793      	lsls	r3, r2, #30
 800ba00:	680e      	ldr	r6, [r1, #0]
 800ba02:	bf08      	it	eq
 800ba04:	694b      	ldreq	r3, [r1, #20]
 800ba06:	600f      	str	r7, [r1, #0]
 800ba08:	bf18      	it	ne
 800ba0a:	2300      	movne	r3, #0
 800ba0c:	eba6 0807 	sub.w	r8, r6, r7
 800ba10:	608b      	str	r3, [r1, #8]
 800ba12:	f1b8 0f00 	cmp.w	r8, #0
 800ba16:	dd9c      	ble.n	800b952 <__sflush_r+0x1a>
 800ba18:	6a21      	ldr	r1, [r4, #32]
 800ba1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba1c:	4643      	mov	r3, r8
 800ba1e:	463a      	mov	r2, r7
 800ba20:	4628      	mov	r0, r5
 800ba22:	47b0      	blx	r6
 800ba24:	2800      	cmp	r0, #0
 800ba26:	dc06      	bgt.n	800ba36 <__sflush_r+0xfe>
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba2e:	81a3      	strh	r3, [r4, #12]
 800ba30:	f04f 30ff 	mov.w	r0, #4294967295
 800ba34:	e78e      	b.n	800b954 <__sflush_r+0x1c>
 800ba36:	4407      	add	r7, r0
 800ba38:	eba8 0800 	sub.w	r8, r8, r0
 800ba3c:	e7e9      	b.n	800ba12 <__sflush_r+0xda>
 800ba3e:	bf00      	nop
 800ba40:	20400001 	.word	0x20400001

0800ba44 <_fflush_r>:
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	690b      	ldr	r3, [r1, #16]
 800ba48:	4605      	mov	r5, r0
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	b913      	cbnz	r3, 800ba54 <_fflush_r+0x10>
 800ba4e:	2500      	movs	r5, #0
 800ba50:	4628      	mov	r0, r5
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	b118      	cbz	r0, 800ba5e <_fflush_r+0x1a>
 800ba56:	6983      	ldr	r3, [r0, #24]
 800ba58:	b90b      	cbnz	r3, 800ba5e <_fflush_r+0x1a>
 800ba5a:	f000 f887 	bl	800bb6c <__sinit>
 800ba5e:	4b14      	ldr	r3, [pc, #80]	; (800bab0 <_fflush_r+0x6c>)
 800ba60:	429c      	cmp	r4, r3
 800ba62:	d11b      	bne.n	800ba9c <_fflush_r+0x58>
 800ba64:	686c      	ldr	r4, [r5, #4]
 800ba66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d0ef      	beq.n	800ba4e <_fflush_r+0xa>
 800ba6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba70:	07d0      	lsls	r0, r2, #31
 800ba72:	d404      	bmi.n	800ba7e <_fflush_r+0x3a>
 800ba74:	0599      	lsls	r1, r3, #22
 800ba76:	d402      	bmi.n	800ba7e <_fflush_r+0x3a>
 800ba78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba7a:	f000 f915 	bl	800bca8 <__retarget_lock_acquire_recursive>
 800ba7e:	4628      	mov	r0, r5
 800ba80:	4621      	mov	r1, r4
 800ba82:	f7ff ff59 	bl	800b938 <__sflush_r>
 800ba86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba88:	07da      	lsls	r2, r3, #31
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	d4e0      	bmi.n	800ba50 <_fflush_r+0xc>
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	059b      	lsls	r3, r3, #22
 800ba92:	d4dd      	bmi.n	800ba50 <_fflush_r+0xc>
 800ba94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba96:	f000 f908 	bl	800bcaa <__retarget_lock_release_recursive>
 800ba9a:	e7d9      	b.n	800ba50 <_fflush_r+0xc>
 800ba9c:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <_fflush_r+0x70>)
 800ba9e:	429c      	cmp	r4, r3
 800baa0:	d101      	bne.n	800baa6 <_fflush_r+0x62>
 800baa2:	68ac      	ldr	r4, [r5, #8]
 800baa4:	e7df      	b.n	800ba66 <_fflush_r+0x22>
 800baa6:	4b04      	ldr	r3, [pc, #16]	; (800bab8 <_fflush_r+0x74>)
 800baa8:	429c      	cmp	r4, r3
 800baaa:	bf08      	it	eq
 800baac:	68ec      	ldreq	r4, [r5, #12]
 800baae:	e7da      	b.n	800ba66 <_fflush_r+0x22>
 800bab0:	0800cb14 	.word	0x0800cb14
 800bab4:	0800cb34 	.word	0x0800cb34
 800bab8:	0800caf4 	.word	0x0800caf4

0800babc <std>:
 800babc:	2300      	movs	r3, #0
 800babe:	b510      	push	{r4, lr}
 800bac0:	4604      	mov	r4, r0
 800bac2:	e9c0 3300 	strd	r3, r3, [r0]
 800bac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800baca:	6083      	str	r3, [r0, #8]
 800bacc:	8181      	strh	r1, [r0, #12]
 800bace:	6643      	str	r3, [r0, #100]	; 0x64
 800bad0:	81c2      	strh	r2, [r0, #14]
 800bad2:	6183      	str	r3, [r0, #24]
 800bad4:	4619      	mov	r1, r3
 800bad6:	2208      	movs	r2, #8
 800bad8:	305c      	adds	r0, #92	; 0x5c
 800bada:	f7ff fa4b 	bl	800af74 <memset>
 800bade:	4b05      	ldr	r3, [pc, #20]	; (800baf4 <std+0x38>)
 800bae0:	6263      	str	r3, [r4, #36]	; 0x24
 800bae2:	4b05      	ldr	r3, [pc, #20]	; (800baf8 <std+0x3c>)
 800bae4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bae6:	4b05      	ldr	r3, [pc, #20]	; (800bafc <std+0x40>)
 800bae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800baea:	4b05      	ldr	r3, [pc, #20]	; (800bb00 <std+0x44>)
 800baec:	6224      	str	r4, [r4, #32]
 800baee:	6323      	str	r3, [r4, #48]	; 0x30
 800baf0:	bd10      	pop	{r4, pc}
 800baf2:	bf00      	nop
 800baf4:	0800c161 	.word	0x0800c161
 800baf8:	0800c183 	.word	0x0800c183
 800bafc:	0800c1bb 	.word	0x0800c1bb
 800bb00:	0800c1df 	.word	0x0800c1df

0800bb04 <_cleanup_r>:
 800bb04:	4901      	ldr	r1, [pc, #4]	; (800bb0c <_cleanup_r+0x8>)
 800bb06:	f000 b8af 	b.w	800bc68 <_fwalk_reent>
 800bb0a:	bf00      	nop
 800bb0c:	0800ba45 	.word	0x0800ba45

0800bb10 <__sfmoreglue>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	2268      	movs	r2, #104	; 0x68
 800bb14:	1e4d      	subs	r5, r1, #1
 800bb16:	4355      	muls	r5, r2
 800bb18:	460e      	mov	r6, r1
 800bb1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb1e:	f7ff fa9d 	bl	800b05c <_malloc_r>
 800bb22:	4604      	mov	r4, r0
 800bb24:	b140      	cbz	r0, 800bb38 <__sfmoreglue+0x28>
 800bb26:	2100      	movs	r1, #0
 800bb28:	e9c0 1600 	strd	r1, r6, [r0]
 800bb2c:	300c      	adds	r0, #12
 800bb2e:	60a0      	str	r0, [r4, #8]
 800bb30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb34:	f7ff fa1e 	bl	800af74 <memset>
 800bb38:	4620      	mov	r0, r4
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}

0800bb3c <__sfp_lock_acquire>:
 800bb3c:	4801      	ldr	r0, [pc, #4]	; (800bb44 <__sfp_lock_acquire+0x8>)
 800bb3e:	f000 b8b3 	b.w	800bca8 <__retarget_lock_acquire_recursive>
 800bb42:	bf00      	nop
 800bb44:	200007ad 	.word	0x200007ad

0800bb48 <__sfp_lock_release>:
 800bb48:	4801      	ldr	r0, [pc, #4]	; (800bb50 <__sfp_lock_release+0x8>)
 800bb4a:	f000 b8ae 	b.w	800bcaa <__retarget_lock_release_recursive>
 800bb4e:	bf00      	nop
 800bb50:	200007ad 	.word	0x200007ad

0800bb54 <__sinit_lock_acquire>:
 800bb54:	4801      	ldr	r0, [pc, #4]	; (800bb5c <__sinit_lock_acquire+0x8>)
 800bb56:	f000 b8a7 	b.w	800bca8 <__retarget_lock_acquire_recursive>
 800bb5a:	bf00      	nop
 800bb5c:	200007ae 	.word	0x200007ae

0800bb60 <__sinit_lock_release>:
 800bb60:	4801      	ldr	r0, [pc, #4]	; (800bb68 <__sinit_lock_release+0x8>)
 800bb62:	f000 b8a2 	b.w	800bcaa <__retarget_lock_release_recursive>
 800bb66:	bf00      	nop
 800bb68:	200007ae 	.word	0x200007ae

0800bb6c <__sinit>:
 800bb6c:	b510      	push	{r4, lr}
 800bb6e:	4604      	mov	r4, r0
 800bb70:	f7ff fff0 	bl	800bb54 <__sinit_lock_acquire>
 800bb74:	69a3      	ldr	r3, [r4, #24]
 800bb76:	b11b      	cbz	r3, 800bb80 <__sinit+0x14>
 800bb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb7c:	f7ff bff0 	b.w	800bb60 <__sinit_lock_release>
 800bb80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb84:	6523      	str	r3, [r4, #80]	; 0x50
 800bb86:	4b13      	ldr	r3, [pc, #76]	; (800bbd4 <__sinit+0x68>)
 800bb88:	4a13      	ldr	r2, [pc, #76]	; (800bbd8 <__sinit+0x6c>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb8e:	42a3      	cmp	r3, r4
 800bb90:	bf04      	itt	eq
 800bb92:	2301      	moveq	r3, #1
 800bb94:	61a3      	streq	r3, [r4, #24]
 800bb96:	4620      	mov	r0, r4
 800bb98:	f000 f820 	bl	800bbdc <__sfp>
 800bb9c:	6060      	str	r0, [r4, #4]
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 f81c 	bl	800bbdc <__sfp>
 800bba4:	60a0      	str	r0, [r4, #8]
 800bba6:	4620      	mov	r0, r4
 800bba8:	f000 f818 	bl	800bbdc <__sfp>
 800bbac:	2200      	movs	r2, #0
 800bbae:	60e0      	str	r0, [r4, #12]
 800bbb0:	2104      	movs	r1, #4
 800bbb2:	6860      	ldr	r0, [r4, #4]
 800bbb4:	f7ff ff82 	bl	800babc <std>
 800bbb8:	68a0      	ldr	r0, [r4, #8]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	2109      	movs	r1, #9
 800bbbe:	f7ff ff7d 	bl	800babc <std>
 800bbc2:	68e0      	ldr	r0, [r4, #12]
 800bbc4:	2202      	movs	r2, #2
 800bbc6:	2112      	movs	r1, #18
 800bbc8:	f7ff ff78 	bl	800babc <std>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	61a3      	str	r3, [r4, #24]
 800bbd0:	e7d2      	b.n	800bb78 <__sinit+0xc>
 800bbd2:	bf00      	nop
 800bbd4:	0800cabc 	.word	0x0800cabc
 800bbd8:	0800bb05 	.word	0x0800bb05

0800bbdc <__sfp>:
 800bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbde:	4607      	mov	r7, r0
 800bbe0:	f7ff ffac 	bl	800bb3c <__sfp_lock_acquire>
 800bbe4:	4b1e      	ldr	r3, [pc, #120]	; (800bc60 <__sfp+0x84>)
 800bbe6:	681e      	ldr	r6, [r3, #0]
 800bbe8:	69b3      	ldr	r3, [r6, #24]
 800bbea:	b913      	cbnz	r3, 800bbf2 <__sfp+0x16>
 800bbec:	4630      	mov	r0, r6
 800bbee:	f7ff ffbd 	bl	800bb6c <__sinit>
 800bbf2:	3648      	adds	r6, #72	; 0x48
 800bbf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	d503      	bpl.n	800bc04 <__sfp+0x28>
 800bbfc:	6833      	ldr	r3, [r6, #0]
 800bbfe:	b30b      	cbz	r3, 800bc44 <__sfp+0x68>
 800bc00:	6836      	ldr	r6, [r6, #0]
 800bc02:	e7f7      	b.n	800bbf4 <__sfp+0x18>
 800bc04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc08:	b9d5      	cbnz	r5, 800bc40 <__sfp+0x64>
 800bc0a:	4b16      	ldr	r3, [pc, #88]	; (800bc64 <__sfp+0x88>)
 800bc0c:	60e3      	str	r3, [r4, #12]
 800bc0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc12:	6665      	str	r5, [r4, #100]	; 0x64
 800bc14:	f000 f847 	bl	800bca6 <__retarget_lock_init_recursive>
 800bc18:	f7ff ff96 	bl	800bb48 <__sfp_lock_release>
 800bc1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc24:	6025      	str	r5, [r4, #0]
 800bc26:	61a5      	str	r5, [r4, #24]
 800bc28:	2208      	movs	r2, #8
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc30:	f7ff f9a0 	bl	800af74 <memset>
 800bc34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc40:	3468      	adds	r4, #104	; 0x68
 800bc42:	e7d9      	b.n	800bbf8 <__sfp+0x1c>
 800bc44:	2104      	movs	r1, #4
 800bc46:	4638      	mov	r0, r7
 800bc48:	f7ff ff62 	bl	800bb10 <__sfmoreglue>
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	6030      	str	r0, [r6, #0]
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d1d5      	bne.n	800bc00 <__sfp+0x24>
 800bc54:	f7ff ff78 	bl	800bb48 <__sfp_lock_release>
 800bc58:	230c      	movs	r3, #12
 800bc5a:	603b      	str	r3, [r7, #0]
 800bc5c:	e7ee      	b.n	800bc3c <__sfp+0x60>
 800bc5e:	bf00      	nop
 800bc60:	0800cabc 	.word	0x0800cabc
 800bc64:	ffff0001 	.word	0xffff0001

0800bc68 <_fwalk_reent>:
 800bc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	4688      	mov	r8, r1
 800bc70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc74:	2700      	movs	r7, #0
 800bc76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc7a:	f1b9 0901 	subs.w	r9, r9, #1
 800bc7e:	d505      	bpl.n	800bc8c <_fwalk_reent+0x24>
 800bc80:	6824      	ldr	r4, [r4, #0]
 800bc82:	2c00      	cmp	r4, #0
 800bc84:	d1f7      	bne.n	800bc76 <_fwalk_reent+0xe>
 800bc86:	4638      	mov	r0, r7
 800bc88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc8c:	89ab      	ldrh	r3, [r5, #12]
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d907      	bls.n	800bca2 <_fwalk_reent+0x3a>
 800bc92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc96:	3301      	adds	r3, #1
 800bc98:	d003      	beq.n	800bca2 <_fwalk_reent+0x3a>
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	4630      	mov	r0, r6
 800bc9e:	47c0      	blx	r8
 800bca0:	4307      	orrs	r7, r0
 800bca2:	3568      	adds	r5, #104	; 0x68
 800bca4:	e7e9      	b.n	800bc7a <_fwalk_reent+0x12>

0800bca6 <__retarget_lock_init_recursive>:
 800bca6:	4770      	bx	lr

0800bca8 <__retarget_lock_acquire_recursive>:
 800bca8:	4770      	bx	lr

0800bcaa <__retarget_lock_release_recursive>:
 800bcaa:	4770      	bx	lr

0800bcac <__swhatbuf_r>:
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	460e      	mov	r6, r1
 800bcb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb4:	2900      	cmp	r1, #0
 800bcb6:	b096      	sub	sp, #88	; 0x58
 800bcb8:	4614      	mov	r4, r2
 800bcba:	461d      	mov	r5, r3
 800bcbc:	da08      	bge.n	800bcd0 <__swhatbuf_r+0x24>
 800bcbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	602a      	str	r2, [r5, #0]
 800bcc6:	061a      	lsls	r2, r3, #24
 800bcc8:	d410      	bmi.n	800bcec <__swhatbuf_r+0x40>
 800bcca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcce:	e00e      	b.n	800bcee <__swhatbuf_r+0x42>
 800bcd0:	466a      	mov	r2, sp
 800bcd2:	f000 faab 	bl	800c22c <_fstat_r>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	dbf1      	blt.n	800bcbe <__swhatbuf_r+0x12>
 800bcda:	9a01      	ldr	r2, [sp, #4]
 800bcdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bce0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bce4:	425a      	negs	r2, r3
 800bce6:	415a      	adcs	r2, r3
 800bce8:	602a      	str	r2, [r5, #0]
 800bcea:	e7ee      	b.n	800bcca <__swhatbuf_r+0x1e>
 800bcec:	2340      	movs	r3, #64	; 0x40
 800bcee:	2000      	movs	r0, #0
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	b016      	add	sp, #88	; 0x58
 800bcf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bcf8 <__smakebuf_r>:
 800bcf8:	898b      	ldrh	r3, [r1, #12]
 800bcfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcfc:	079d      	lsls	r5, r3, #30
 800bcfe:	4606      	mov	r6, r0
 800bd00:	460c      	mov	r4, r1
 800bd02:	d507      	bpl.n	800bd14 <__smakebuf_r+0x1c>
 800bd04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	6123      	str	r3, [r4, #16]
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	6163      	str	r3, [r4, #20]
 800bd10:	b002      	add	sp, #8
 800bd12:	bd70      	pop	{r4, r5, r6, pc}
 800bd14:	ab01      	add	r3, sp, #4
 800bd16:	466a      	mov	r2, sp
 800bd18:	f7ff ffc8 	bl	800bcac <__swhatbuf_r>
 800bd1c:	9900      	ldr	r1, [sp, #0]
 800bd1e:	4605      	mov	r5, r0
 800bd20:	4630      	mov	r0, r6
 800bd22:	f7ff f99b 	bl	800b05c <_malloc_r>
 800bd26:	b948      	cbnz	r0, 800bd3c <__smakebuf_r+0x44>
 800bd28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2c:	059a      	lsls	r2, r3, #22
 800bd2e:	d4ef      	bmi.n	800bd10 <__smakebuf_r+0x18>
 800bd30:	f023 0303 	bic.w	r3, r3, #3
 800bd34:	f043 0302 	orr.w	r3, r3, #2
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	e7e3      	b.n	800bd04 <__smakebuf_r+0xc>
 800bd3c:	4b0d      	ldr	r3, [pc, #52]	; (800bd74 <__smakebuf_r+0x7c>)
 800bd3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	6020      	str	r0, [r4, #0]
 800bd44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd48:	81a3      	strh	r3, [r4, #12]
 800bd4a:	9b00      	ldr	r3, [sp, #0]
 800bd4c:	6163      	str	r3, [r4, #20]
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	6120      	str	r0, [r4, #16]
 800bd52:	b15b      	cbz	r3, 800bd6c <__smakebuf_r+0x74>
 800bd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f000 fa79 	bl	800c250 <_isatty_r>
 800bd5e:	b128      	cbz	r0, 800bd6c <__smakebuf_r+0x74>
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	f023 0303 	bic.w	r3, r3, #3
 800bd66:	f043 0301 	orr.w	r3, r3, #1
 800bd6a:	81a3      	strh	r3, [r4, #12]
 800bd6c:	89a0      	ldrh	r0, [r4, #12]
 800bd6e:	4305      	orrs	r5, r0
 800bd70:	81a5      	strh	r5, [r4, #12]
 800bd72:	e7cd      	b.n	800bd10 <__smakebuf_r+0x18>
 800bd74:	0800bb05 	.word	0x0800bb05

0800bd78 <memmove>:
 800bd78:	4288      	cmp	r0, r1
 800bd7a:	b510      	push	{r4, lr}
 800bd7c:	eb01 0402 	add.w	r4, r1, r2
 800bd80:	d902      	bls.n	800bd88 <memmove+0x10>
 800bd82:	4284      	cmp	r4, r0
 800bd84:	4623      	mov	r3, r4
 800bd86:	d807      	bhi.n	800bd98 <memmove+0x20>
 800bd88:	1e43      	subs	r3, r0, #1
 800bd8a:	42a1      	cmp	r1, r4
 800bd8c:	d008      	beq.n	800bda0 <memmove+0x28>
 800bd8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd96:	e7f8      	b.n	800bd8a <memmove+0x12>
 800bd98:	4402      	add	r2, r0
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	428a      	cmp	r2, r1
 800bd9e:	d100      	bne.n	800bda2 <memmove+0x2a>
 800bda0:	bd10      	pop	{r4, pc}
 800bda2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bda6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdaa:	e7f7      	b.n	800bd9c <memmove+0x24>

0800bdac <__malloc_lock>:
 800bdac:	4801      	ldr	r0, [pc, #4]	; (800bdb4 <__malloc_lock+0x8>)
 800bdae:	f7ff bf7b 	b.w	800bca8 <__retarget_lock_acquire_recursive>
 800bdb2:	bf00      	nop
 800bdb4:	200007ac 	.word	0x200007ac

0800bdb8 <__malloc_unlock>:
 800bdb8:	4801      	ldr	r0, [pc, #4]	; (800bdc0 <__malloc_unlock+0x8>)
 800bdba:	f7ff bf76 	b.w	800bcaa <__retarget_lock_release_recursive>
 800bdbe:	bf00      	nop
 800bdc0:	200007ac 	.word	0x200007ac

0800bdc4 <_realloc_r>:
 800bdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc8:	4680      	mov	r8, r0
 800bdca:	4614      	mov	r4, r2
 800bdcc:	460e      	mov	r6, r1
 800bdce:	b921      	cbnz	r1, 800bdda <_realloc_r+0x16>
 800bdd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	f7ff b941 	b.w	800b05c <_malloc_r>
 800bdda:	b92a      	cbnz	r2, 800bde8 <_realloc_r+0x24>
 800bddc:	f7ff f8d2 	bl	800af84 <_free_r>
 800bde0:	4625      	mov	r5, r4
 800bde2:	4628      	mov	r0, r5
 800bde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde8:	f000 fa54 	bl	800c294 <_malloc_usable_size_r>
 800bdec:	4284      	cmp	r4, r0
 800bdee:	4607      	mov	r7, r0
 800bdf0:	d802      	bhi.n	800bdf8 <_realloc_r+0x34>
 800bdf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bdf6:	d812      	bhi.n	800be1e <_realloc_r+0x5a>
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	f7ff f92e 	bl	800b05c <_malloc_r>
 800be00:	4605      	mov	r5, r0
 800be02:	2800      	cmp	r0, #0
 800be04:	d0ed      	beq.n	800bde2 <_realloc_r+0x1e>
 800be06:	42bc      	cmp	r4, r7
 800be08:	4622      	mov	r2, r4
 800be0a:	4631      	mov	r1, r6
 800be0c:	bf28      	it	cs
 800be0e:	463a      	movcs	r2, r7
 800be10:	f7ff f8a2 	bl	800af58 <memcpy>
 800be14:	4631      	mov	r1, r6
 800be16:	4640      	mov	r0, r8
 800be18:	f7ff f8b4 	bl	800af84 <_free_r>
 800be1c:	e7e1      	b.n	800bde2 <_realloc_r+0x1e>
 800be1e:	4635      	mov	r5, r6
 800be20:	e7df      	b.n	800bde2 <_realloc_r+0x1e>

0800be22 <__ssputs_r>:
 800be22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be26:	688e      	ldr	r6, [r1, #8]
 800be28:	429e      	cmp	r6, r3
 800be2a:	4682      	mov	sl, r0
 800be2c:	460c      	mov	r4, r1
 800be2e:	4690      	mov	r8, r2
 800be30:	461f      	mov	r7, r3
 800be32:	d838      	bhi.n	800bea6 <__ssputs_r+0x84>
 800be34:	898a      	ldrh	r2, [r1, #12]
 800be36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be3a:	d032      	beq.n	800bea2 <__ssputs_r+0x80>
 800be3c:	6825      	ldr	r5, [r4, #0]
 800be3e:	6909      	ldr	r1, [r1, #16]
 800be40:	eba5 0901 	sub.w	r9, r5, r1
 800be44:	6965      	ldr	r5, [r4, #20]
 800be46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be4e:	3301      	adds	r3, #1
 800be50:	444b      	add	r3, r9
 800be52:	106d      	asrs	r5, r5, #1
 800be54:	429d      	cmp	r5, r3
 800be56:	bf38      	it	cc
 800be58:	461d      	movcc	r5, r3
 800be5a:	0553      	lsls	r3, r2, #21
 800be5c:	d531      	bpl.n	800bec2 <__ssputs_r+0xa0>
 800be5e:	4629      	mov	r1, r5
 800be60:	f7ff f8fc 	bl	800b05c <_malloc_r>
 800be64:	4606      	mov	r6, r0
 800be66:	b950      	cbnz	r0, 800be7e <__ssputs_r+0x5c>
 800be68:	230c      	movs	r3, #12
 800be6a:	f8ca 3000 	str.w	r3, [sl]
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be74:	81a3      	strh	r3, [r4, #12]
 800be76:	f04f 30ff 	mov.w	r0, #4294967295
 800be7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7e:	6921      	ldr	r1, [r4, #16]
 800be80:	464a      	mov	r2, r9
 800be82:	f7ff f869 	bl	800af58 <memcpy>
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be90:	81a3      	strh	r3, [r4, #12]
 800be92:	6126      	str	r6, [r4, #16]
 800be94:	6165      	str	r5, [r4, #20]
 800be96:	444e      	add	r6, r9
 800be98:	eba5 0509 	sub.w	r5, r5, r9
 800be9c:	6026      	str	r6, [r4, #0]
 800be9e:	60a5      	str	r5, [r4, #8]
 800bea0:	463e      	mov	r6, r7
 800bea2:	42be      	cmp	r6, r7
 800bea4:	d900      	bls.n	800bea8 <__ssputs_r+0x86>
 800bea6:	463e      	mov	r6, r7
 800bea8:	6820      	ldr	r0, [r4, #0]
 800beaa:	4632      	mov	r2, r6
 800beac:	4641      	mov	r1, r8
 800beae:	f7ff ff63 	bl	800bd78 <memmove>
 800beb2:	68a3      	ldr	r3, [r4, #8]
 800beb4:	1b9b      	subs	r3, r3, r6
 800beb6:	60a3      	str	r3, [r4, #8]
 800beb8:	6823      	ldr	r3, [r4, #0]
 800beba:	4433      	add	r3, r6
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	2000      	movs	r0, #0
 800bec0:	e7db      	b.n	800be7a <__ssputs_r+0x58>
 800bec2:	462a      	mov	r2, r5
 800bec4:	f7ff ff7e 	bl	800bdc4 <_realloc_r>
 800bec8:	4606      	mov	r6, r0
 800beca:	2800      	cmp	r0, #0
 800becc:	d1e1      	bne.n	800be92 <__ssputs_r+0x70>
 800bece:	6921      	ldr	r1, [r4, #16]
 800bed0:	4650      	mov	r0, sl
 800bed2:	f7ff f857 	bl	800af84 <_free_r>
 800bed6:	e7c7      	b.n	800be68 <__ssputs_r+0x46>

0800bed8 <_svfiprintf_r>:
 800bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	4698      	mov	r8, r3
 800bede:	898b      	ldrh	r3, [r1, #12]
 800bee0:	061b      	lsls	r3, r3, #24
 800bee2:	b09d      	sub	sp, #116	; 0x74
 800bee4:	4607      	mov	r7, r0
 800bee6:	460d      	mov	r5, r1
 800bee8:	4614      	mov	r4, r2
 800beea:	d50e      	bpl.n	800bf0a <_svfiprintf_r+0x32>
 800beec:	690b      	ldr	r3, [r1, #16]
 800beee:	b963      	cbnz	r3, 800bf0a <_svfiprintf_r+0x32>
 800bef0:	2140      	movs	r1, #64	; 0x40
 800bef2:	f7ff f8b3 	bl	800b05c <_malloc_r>
 800bef6:	6028      	str	r0, [r5, #0]
 800bef8:	6128      	str	r0, [r5, #16]
 800befa:	b920      	cbnz	r0, 800bf06 <_svfiprintf_r+0x2e>
 800befc:	230c      	movs	r3, #12
 800befe:	603b      	str	r3, [r7, #0]
 800bf00:	f04f 30ff 	mov.w	r0, #4294967295
 800bf04:	e0d1      	b.n	800c0aa <_svfiprintf_r+0x1d2>
 800bf06:	2340      	movs	r3, #64	; 0x40
 800bf08:	616b      	str	r3, [r5, #20]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf0e:	2320      	movs	r3, #32
 800bf10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf14:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf18:	2330      	movs	r3, #48	; 0x30
 800bf1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c0c4 <_svfiprintf_r+0x1ec>
 800bf1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf22:	f04f 0901 	mov.w	r9, #1
 800bf26:	4623      	mov	r3, r4
 800bf28:	469a      	mov	sl, r3
 800bf2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf2e:	b10a      	cbz	r2, 800bf34 <_svfiprintf_r+0x5c>
 800bf30:	2a25      	cmp	r2, #37	; 0x25
 800bf32:	d1f9      	bne.n	800bf28 <_svfiprintf_r+0x50>
 800bf34:	ebba 0b04 	subs.w	fp, sl, r4
 800bf38:	d00b      	beq.n	800bf52 <_svfiprintf_r+0x7a>
 800bf3a:	465b      	mov	r3, fp
 800bf3c:	4622      	mov	r2, r4
 800bf3e:	4629      	mov	r1, r5
 800bf40:	4638      	mov	r0, r7
 800bf42:	f7ff ff6e 	bl	800be22 <__ssputs_r>
 800bf46:	3001      	adds	r0, #1
 800bf48:	f000 80aa 	beq.w	800c0a0 <_svfiprintf_r+0x1c8>
 800bf4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf4e:	445a      	add	r2, fp
 800bf50:	9209      	str	r2, [sp, #36]	; 0x24
 800bf52:	f89a 3000 	ldrb.w	r3, [sl]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	f000 80a2 	beq.w	800c0a0 <_svfiprintf_r+0x1c8>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf66:	f10a 0a01 	add.w	sl, sl, #1
 800bf6a:	9304      	str	r3, [sp, #16]
 800bf6c:	9307      	str	r3, [sp, #28]
 800bf6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf72:	931a      	str	r3, [sp, #104]	; 0x68
 800bf74:	4654      	mov	r4, sl
 800bf76:	2205      	movs	r2, #5
 800bf78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf7c:	4851      	ldr	r0, [pc, #324]	; (800c0c4 <_svfiprintf_r+0x1ec>)
 800bf7e:	f7f4 f917 	bl	80001b0 <memchr>
 800bf82:	9a04      	ldr	r2, [sp, #16]
 800bf84:	b9d8      	cbnz	r0, 800bfbe <_svfiprintf_r+0xe6>
 800bf86:	06d0      	lsls	r0, r2, #27
 800bf88:	bf44      	itt	mi
 800bf8a:	2320      	movmi	r3, #32
 800bf8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf90:	0711      	lsls	r1, r2, #28
 800bf92:	bf44      	itt	mi
 800bf94:	232b      	movmi	r3, #43	; 0x2b
 800bf96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf9a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf9e:	2b2a      	cmp	r3, #42	; 0x2a
 800bfa0:	d015      	beq.n	800bfce <_svfiprintf_r+0xf6>
 800bfa2:	9a07      	ldr	r2, [sp, #28]
 800bfa4:	4654      	mov	r4, sl
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	f04f 0c0a 	mov.w	ip, #10
 800bfac:	4621      	mov	r1, r4
 800bfae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfb2:	3b30      	subs	r3, #48	; 0x30
 800bfb4:	2b09      	cmp	r3, #9
 800bfb6:	d94e      	bls.n	800c056 <_svfiprintf_r+0x17e>
 800bfb8:	b1b0      	cbz	r0, 800bfe8 <_svfiprintf_r+0x110>
 800bfba:	9207      	str	r2, [sp, #28]
 800bfbc:	e014      	b.n	800bfe8 <_svfiprintf_r+0x110>
 800bfbe:	eba0 0308 	sub.w	r3, r0, r8
 800bfc2:	fa09 f303 	lsl.w	r3, r9, r3
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	9304      	str	r3, [sp, #16]
 800bfca:	46a2      	mov	sl, r4
 800bfcc:	e7d2      	b.n	800bf74 <_svfiprintf_r+0x9c>
 800bfce:	9b03      	ldr	r3, [sp, #12]
 800bfd0:	1d19      	adds	r1, r3, #4
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	9103      	str	r1, [sp, #12]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	bfbb      	ittet	lt
 800bfda:	425b      	neglt	r3, r3
 800bfdc:	f042 0202 	orrlt.w	r2, r2, #2
 800bfe0:	9307      	strge	r3, [sp, #28]
 800bfe2:	9307      	strlt	r3, [sp, #28]
 800bfe4:	bfb8      	it	lt
 800bfe6:	9204      	strlt	r2, [sp, #16]
 800bfe8:	7823      	ldrb	r3, [r4, #0]
 800bfea:	2b2e      	cmp	r3, #46	; 0x2e
 800bfec:	d10c      	bne.n	800c008 <_svfiprintf_r+0x130>
 800bfee:	7863      	ldrb	r3, [r4, #1]
 800bff0:	2b2a      	cmp	r3, #42	; 0x2a
 800bff2:	d135      	bne.n	800c060 <_svfiprintf_r+0x188>
 800bff4:	9b03      	ldr	r3, [sp, #12]
 800bff6:	1d1a      	adds	r2, r3, #4
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	9203      	str	r2, [sp, #12]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	bfb8      	it	lt
 800c000:	f04f 33ff 	movlt.w	r3, #4294967295
 800c004:	3402      	adds	r4, #2
 800c006:	9305      	str	r3, [sp, #20]
 800c008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c0d4 <_svfiprintf_r+0x1fc>
 800c00c:	7821      	ldrb	r1, [r4, #0]
 800c00e:	2203      	movs	r2, #3
 800c010:	4650      	mov	r0, sl
 800c012:	f7f4 f8cd 	bl	80001b0 <memchr>
 800c016:	b140      	cbz	r0, 800c02a <_svfiprintf_r+0x152>
 800c018:	2340      	movs	r3, #64	; 0x40
 800c01a:	eba0 000a 	sub.w	r0, r0, sl
 800c01e:	fa03 f000 	lsl.w	r0, r3, r0
 800c022:	9b04      	ldr	r3, [sp, #16]
 800c024:	4303      	orrs	r3, r0
 800c026:	3401      	adds	r4, #1
 800c028:	9304      	str	r3, [sp, #16]
 800c02a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c02e:	4826      	ldr	r0, [pc, #152]	; (800c0c8 <_svfiprintf_r+0x1f0>)
 800c030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c034:	2206      	movs	r2, #6
 800c036:	f7f4 f8bb 	bl	80001b0 <memchr>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d038      	beq.n	800c0b0 <_svfiprintf_r+0x1d8>
 800c03e:	4b23      	ldr	r3, [pc, #140]	; (800c0cc <_svfiprintf_r+0x1f4>)
 800c040:	bb1b      	cbnz	r3, 800c08a <_svfiprintf_r+0x1b2>
 800c042:	9b03      	ldr	r3, [sp, #12]
 800c044:	3307      	adds	r3, #7
 800c046:	f023 0307 	bic.w	r3, r3, #7
 800c04a:	3308      	adds	r3, #8
 800c04c:	9303      	str	r3, [sp, #12]
 800c04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c050:	4433      	add	r3, r6
 800c052:	9309      	str	r3, [sp, #36]	; 0x24
 800c054:	e767      	b.n	800bf26 <_svfiprintf_r+0x4e>
 800c056:	fb0c 3202 	mla	r2, ip, r2, r3
 800c05a:	460c      	mov	r4, r1
 800c05c:	2001      	movs	r0, #1
 800c05e:	e7a5      	b.n	800bfac <_svfiprintf_r+0xd4>
 800c060:	2300      	movs	r3, #0
 800c062:	3401      	adds	r4, #1
 800c064:	9305      	str	r3, [sp, #20]
 800c066:	4619      	mov	r1, r3
 800c068:	f04f 0c0a 	mov.w	ip, #10
 800c06c:	4620      	mov	r0, r4
 800c06e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c072:	3a30      	subs	r2, #48	; 0x30
 800c074:	2a09      	cmp	r2, #9
 800c076:	d903      	bls.n	800c080 <_svfiprintf_r+0x1a8>
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d0c5      	beq.n	800c008 <_svfiprintf_r+0x130>
 800c07c:	9105      	str	r1, [sp, #20]
 800c07e:	e7c3      	b.n	800c008 <_svfiprintf_r+0x130>
 800c080:	fb0c 2101 	mla	r1, ip, r1, r2
 800c084:	4604      	mov	r4, r0
 800c086:	2301      	movs	r3, #1
 800c088:	e7f0      	b.n	800c06c <_svfiprintf_r+0x194>
 800c08a:	ab03      	add	r3, sp, #12
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	462a      	mov	r2, r5
 800c090:	4b0f      	ldr	r3, [pc, #60]	; (800c0d0 <_svfiprintf_r+0x1f8>)
 800c092:	a904      	add	r1, sp, #16
 800c094:	4638      	mov	r0, r7
 800c096:	f3af 8000 	nop.w
 800c09a:	1c42      	adds	r2, r0, #1
 800c09c:	4606      	mov	r6, r0
 800c09e:	d1d6      	bne.n	800c04e <_svfiprintf_r+0x176>
 800c0a0:	89ab      	ldrh	r3, [r5, #12]
 800c0a2:	065b      	lsls	r3, r3, #25
 800c0a4:	f53f af2c 	bmi.w	800bf00 <_svfiprintf_r+0x28>
 800c0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0aa:	b01d      	add	sp, #116	; 0x74
 800c0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b0:	ab03      	add	r3, sp, #12
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	462a      	mov	r2, r5
 800c0b6:	4b06      	ldr	r3, [pc, #24]	; (800c0d0 <_svfiprintf_r+0x1f8>)
 800c0b8:	a904      	add	r1, sp, #16
 800c0ba:	4638      	mov	r0, r7
 800c0bc:	f7ff fa0a 	bl	800b4d4 <_printf_i>
 800c0c0:	e7eb      	b.n	800c09a <_svfiprintf_r+0x1c2>
 800c0c2:	bf00      	nop
 800c0c4:	0800cac0 	.word	0x0800cac0
 800c0c8:	0800caca 	.word	0x0800caca
 800c0cc:	00000000 	.word	0x00000000
 800c0d0:	0800be23 	.word	0x0800be23
 800c0d4:	0800cac6 	.word	0x0800cac6

0800c0d8 <_raise_r>:
 800c0d8:	291f      	cmp	r1, #31
 800c0da:	b538      	push	{r3, r4, r5, lr}
 800c0dc:	4604      	mov	r4, r0
 800c0de:	460d      	mov	r5, r1
 800c0e0:	d904      	bls.n	800c0ec <_raise_r+0x14>
 800c0e2:	2316      	movs	r3, #22
 800c0e4:	6003      	str	r3, [r0, #0]
 800c0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ea:	bd38      	pop	{r3, r4, r5, pc}
 800c0ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0ee:	b112      	cbz	r2, 800c0f6 <_raise_r+0x1e>
 800c0f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0f4:	b94b      	cbnz	r3, 800c10a <_raise_r+0x32>
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f000 f830 	bl	800c15c <_getpid_r>
 800c0fc:	462a      	mov	r2, r5
 800c0fe:	4601      	mov	r1, r0
 800c100:	4620      	mov	r0, r4
 800c102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c106:	f000 b817 	b.w	800c138 <_kill_r>
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d00a      	beq.n	800c124 <_raise_r+0x4c>
 800c10e:	1c59      	adds	r1, r3, #1
 800c110:	d103      	bne.n	800c11a <_raise_r+0x42>
 800c112:	2316      	movs	r3, #22
 800c114:	6003      	str	r3, [r0, #0]
 800c116:	2001      	movs	r0, #1
 800c118:	e7e7      	b.n	800c0ea <_raise_r+0x12>
 800c11a:	2400      	movs	r4, #0
 800c11c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c120:	4628      	mov	r0, r5
 800c122:	4798      	blx	r3
 800c124:	2000      	movs	r0, #0
 800c126:	e7e0      	b.n	800c0ea <_raise_r+0x12>

0800c128 <raise>:
 800c128:	4b02      	ldr	r3, [pc, #8]	; (800c134 <raise+0xc>)
 800c12a:	4601      	mov	r1, r0
 800c12c:	6818      	ldr	r0, [r3, #0]
 800c12e:	f7ff bfd3 	b.w	800c0d8 <_raise_r>
 800c132:	bf00      	nop
 800c134:	20000040 	.word	0x20000040

0800c138 <_kill_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d07      	ldr	r5, [pc, #28]	; (800c158 <_kill_r+0x20>)
 800c13c:	2300      	movs	r3, #0
 800c13e:	4604      	mov	r4, r0
 800c140:	4608      	mov	r0, r1
 800c142:	4611      	mov	r1, r2
 800c144:	602b      	str	r3, [r5, #0]
 800c146:	f7f4 fc4e 	bl	80009e6 <_kill>
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	d102      	bne.n	800c154 <_kill_r+0x1c>
 800c14e:	682b      	ldr	r3, [r5, #0]
 800c150:	b103      	cbz	r3, 800c154 <_kill_r+0x1c>
 800c152:	6023      	str	r3, [r4, #0]
 800c154:	bd38      	pop	{r3, r4, r5, pc}
 800c156:	bf00      	nop
 800c158:	200007b0 	.word	0x200007b0

0800c15c <_getpid_r>:
 800c15c:	f7f4 bc3b 	b.w	80009d6 <_getpid>

0800c160 <__sread>:
 800c160:	b510      	push	{r4, lr}
 800c162:	460c      	mov	r4, r1
 800c164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c168:	f000 f89c 	bl	800c2a4 <_read_r>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	bfab      	itete	ge
 800c170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c172:	89a3      	ldrhlt	r3, [r4, #12]
 800c174:	181b      	addge	r3, r3, r0
 800c176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c17a:	bfac      	ite	ge
 800c17c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c17e:	81a3      	strhlt	r3, [r4, #12]
 800c180:	bd10      	pop	{r4, pc}

0800c182 <__swrite>:
 800c182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c186:	461f      	mov	r7, r3
 800c188:	898b      	ldrh	r3, [r1, #12]
 800c18a:	05db      	lsls	r3, r3, #23
 800c18c:	4605      	mov	r5, r0
 800c18e:	460c      	mov	r4, r1
 800c190:	4616      	mov	r6, r2
 800c192:	d505      	bpl.n	800c1a0 <__swrite+0x1e>
 800c194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c198:	2302      	movs	r3, #2
 800c19a:	2200      	movs	r2, #0
 800c19c:	f000 f868 	bl	800c270 <_lseek_r>
 800c1a0:	89a3      	ldrh	r3, [r4, #12]
 800c1a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1aa:	81a3      	strh	r3, [r4, #12]
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	463b      	mov	r3, r7
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b6:	f000 b817 	b.w	800c1e8 <_write_r>

0800c1ba <__sseek>:
 800c1ba:	b510      	push	{r4, lr}
 800c1bc:	460c      	mov	r4, r1
 800c1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c2:	f000 f855 	bl	800c270 <_lseek_r>
 800c1c6:	1c43      	adds	r3, r0, #1
 800c1c8:	89a3      	ldrh	r3, [r4, #12]
 800c1ca:	bf15      	itete	ne
 800c1cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1d6:	81a3      	strheq	r3, [r4, #12]
 800c1d8:	bf18      	it	ne
 800c1da:	81a3      	strhne	r3, [r4, #12]
 800c1dc:	bd10      	pop	{r4, pc}

0800c1de <__sclose>:
 800c1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e2:	f000 b813 	b.w	800c20c <_close_r>
	...

0800c1e8 <_write_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d07      	ldr	r5, [pc, #28]	; (800c208 <_write_r+0x20>)
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	4608      	mov	r0, r1
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	602a      	str	r2, [r5, #0]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	f7f4 fc2c 	bl	8000a54 <_write>
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d102      	bne.n	800c206 <_write_r+0x1e>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	b103      	cbz	r3, 800c206 <_write_r+0x1e>
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	200007b0 	.word	0x200007b0

0800c20c <_close_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4d06      	ldr	r5, [pc, #24]	; (800c228 <_close_r+0x1c>)
 800c210:	2300      	movs	r3, #0
 800c212:	4604      	mov	r4, r0
 800c214:	4608      	mov	r0, r1
 800c216:	602b      	str	r3, [r5, #0]
 800c218:	f7f4 fc38 	bl	8000a8c <_close>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d102      	bne.n	800c226 <_close_r+0x1a>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b103      	cbz	r3, 800c226 <_close_r+0x1a>
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	200007b0 	.word	0x200007b0

0800c22c <_fstat_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d07      	ldr	r5, [pc, #28]	; (800c24c <_fstat_r+0x20>)
 800c230:	2300      	movs	r3, #0
 800c232:	4604      	mov	r4, r0
 800c234:	4608      	mov	r0, r1
 800c236:	4611      	mov	r1, r2
 800c238:	602b      	str	r3, [r5, #0]
 800c23a:	f7f4 fc33 	bl	8000aa4 <_fstat>
 800c23e:	1c43      	adds	r3, r0, #1
 800c240:	d102      	bne.n	800c248 <_fstat_r+0x1c>
 800c242:	682b      	ldr	r3, [r5, #0]
 800c244:	b103      	cbz	r3, 800c248 <_fstat_r+0x1c>
 800c246:	6023      	str	r3, [r4, #0]
 800c248:	bd38      	pop	{r3, r4, r5, pc}
 800c24a:	bf00      	nop
 800c24c:	200007b0 	.word	0x200007b0

0800c250 <_isatty_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4d06      	ldr	r5, [pc, #24]	; (800c26c <_isatty_r+0x1c>)
 800c254:	2300      	movs	r3, #0
 800c256:	4604      	mov	r4, r0
 800c258:	4608      	mov	r0, r1
 800c25a:	602b      	str	r3, [r5, #0]
 800c25c:	f7f4 fc32 	bl	8000ac4 <_isatty>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d102      	bne.n	800c26a <_isatty_r+0x1a>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	b103      	cbz	r3, 800c26a <_isatty_r+0x1a>
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	bd38      	pop	{r3, r4, r5, pc}
 800c26c:	200007b0 	.word	0x200007b0

0800c270 <_lseek_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4d07      	ldr	r5, [pc, #28]	; (800c290 <_lseek_r+0x20>)
 800c274:	4604      	mov	r4, r0
 800c276:	4608      	mov	r0, r1
 800c278:	4611      	mov	r1, r2
 800c27a:	2200      	movs	r2, #0
 800c27c:	602a      	str	r2, [r5, #0]
 800c27e:	461a      	mov	r2, r3
 800c280:	f7f4 fc2b 	bl	8000ada <_lseek>
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	d102      	bne.n	800c28e <_lseek_r+0x1e>
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	b103      	cbz	r3, 800c28e <_lseek_r+0x1e>
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	bd38      	pop	{r3, r4, r5, pc}
 800c290:	200007b0 	.word	0x200007b0

0800c294 <_malloc_usable_size_r>:
 800c294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c298:	1f18      	subs	r0, r3, #4
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	bfbc      	itt	lt
 800c29e:	580b      	ldrlt	r3, [r1, r0]
 800c2a0:	18c0      	addlt	r0, r0, r3
 800c2a2:	4770      	bx	lr

0800c2a4 <_read_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d07      	ldr	r5, [pc, #28]	; (800c2c4 <_read_r+0x20>)
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	4608      	mov	r0, r1
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	602a      	str	r2, [r5, #0]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f7f4 fbb1 	bl	8000a1a <_read>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d102      	bne.n	800c2c2 <_read_r+0x1e>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b103      	cbz	r3, 800c2c2 <_read_r+0x1e>
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	200007b0 	.word	0x200007b0

0800c2c8 <_init>:
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ca:	bf00      	nop
 800c2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ce:	bc08      	pop	{r3}
 800c2d0:	469e      	mov	lr, r3
 800c2d2:	4770      	bx	lr

0800c2d4 <_fini>:
 800c2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d6:	bf00      	nop
 800c2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2da:	bc08      	pop	{r3}
 800c2dc:	469e      	mov	lr, r3
 800c2de:	4770      	bx	lr
