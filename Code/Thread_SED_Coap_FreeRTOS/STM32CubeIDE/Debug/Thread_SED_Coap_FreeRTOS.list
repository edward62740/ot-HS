
Thread_SED_Coap_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e00c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800e14c  0800e14c  0001e14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e890  0800e890  0001e890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e894  0800e894  0001e894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000008  0800e898  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 SYSTEM_DRIVER_CONTEXT 00000011  20000034  0800e8c4  00020034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000627c  20000048  0800e8d5  00020048  2**2
                  ALLOC
  8 ._user_heap_stack 00001404  200062c4  0800e8d5  000262c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 11 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 12 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 13 .debug_line   0003cffb  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000416a2  00000000  00000000  0005d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007f57  00000000  00000000  0009e712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003738  00000000  00000000  000a6670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00115760  00000000  00000000  000a9da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00003410  00000000  00000000  001bf508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00030eee  00000000  00000000  001c2918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f3806  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e76c  00000000  00000000  001f3858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000048 	.word	0x20000048
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e134 	.word	0x0800e134

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000004c 	.word	0x2000004c
 800017c:	0800e134 	.word	0x0800e134

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	3c01      	subs	r4, #1
 80002d0:	bf28      	it	cs
 80002d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d6:	d2e9      	bcs.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_d2ulz>:
 8000a40:	b5d0      	push	{r4, r6, r7, lr}
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__aeabi_d2ulz+0x34>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	4606      	mov	r6, r0
 8000a48:	460f      	mov	r7, r1
 8000a4a:	f7ff fd5f 	bl	800050c <__aeabi_dmul>
 8000a4e:	f000 f815 	bl	8000a7c <__aeabi_d2uiz>
 8000a52:	4604      	mov	r4, r0
 8000a54:	f7ff fce0 	bl	8000418 <__aeabi_ui2d>
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <__aeabi_d2ulz+0x38>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f7ff fd56 	bl	800050c <__aeabi_dmul>
 8000a60:	4602      	mov	r2, r0
 8000a62:	460b      	mov	r3, r1
 8000a64:	4630      	mov	r0, r6
 8000a66:	4639      	mov	r1, r7
 8000a68:	f7ff fb98 	bl	800019c <__aeabi_dsub>
 8000a6c:	f000 f806 	bl	8000a7c <__aeabi_d2uiz>
 8000a70:	4621      	mov	r1, r4
 8000a72:	bdd0      	pop	{r4, r6, r7, pc}
 8000a74:	3df00000 	.word	0x3df00000
 8000a78:	41f00000 	.word	0x41f00000

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000abe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490e      	ldr	r1, [pc, #56]	; (8000afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0b      	ldr	r4, [pc, #44]	; (8000b08 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae6:	f003 fadd 	bl	80040a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000aea:	f00d fae9 	bl	800e0c0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000aee:	f002 fd41 	bl	8003574 <main>

08000af2 <LoopForever>:

LoopForever:
  b LoopForever
 8000af2:	e7fe      	b.n	8000af2 <LoopForever>
  ldr   r0, =_estack
 8000af4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000af8:	20000008 	.word	0x20000008
  ldr r1, =_edata
 8000afc:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000b00:	0800e898 	.word	0x0800e898
  ldr r2, =_sbss
 8000b04:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000b08:	200062c4 	.word	0x200062c4

08000b0c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_IRQHandler>

08000b0e <otCoapSendRequest>:
static inline otError otCoapSendRequest(otInstance *          aInstance,
                                        otMessage *           aMessage,
                                        const otMessageInfo * aMessageInfo,
                                        otCoapResponseHandler aHandler,
                                        void *                aContext)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af02      	add	r7, sp, #8
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	603b      	str	r3, [r7, #0]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendRequestWithParameters(aInstance, aMessage, aMessageInfo, aHandler, aContext, NULL);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f00b fb41 	bl	800c1b2 <otCoapSendRequestWithParameters>
 8000b30:	4603      	mov	r3, r0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_THREAD_INIT_1 */
  /* Do not allow stop mode before Thread is initialized */
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000b42:	2101      	movs	r1, #1
 8000b44:	2002      	movs	r0, #2
 8000b46:	f00d f967 	bl	800de18 <UTIL_LPM_SetStopMode>
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8000b4a:	f000 fa17 	bl	8000f7c <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <APP_THREAD_Init+0x8c>)
 8000b50:	f000 fc80 	bl	8001454 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000b54:	2101      	movs	r1, #1
 8000b56:	2002      	movs	r0, #2
 8000b58:	f00d f98e 	bl	800de78 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8000b5c:	f000 fd66 	bl	800162c <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8000b60:	f000 fd5c 	bl	800161c <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000b64:	f00c fbcc 	bl	800d300 <SHCI_C2_THREAD_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */
  /**
   * Create timer to handle COAP request sending
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &sedCoapTimerID, hw_ts_Repeated, APP_THREAD_CoapTimingElapsed);
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <APP_THREAD_Init+0x90>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4917      	ldr	r1, [pc, #92]	; (8000bd0 <APP_THREAD_Init+0x94>)
 8000b72:	2000      	movs	r0, #0
 8000b74:	f002 fa88 	bl	8003088 <HW_TS_Create>

  /**
   * Create timer to change Thread Mode to SED
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &setThreadModeTimerID, hw_ts_SingleShot, APP_THREAD_SetThreadMode);
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <APP_THREAD_Init+0x98>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4916      	ldr	r1, [pc, #88]	; (8000bd8 <APP_THREAD_Init+0x9c>)
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f002 fa82 	bl	8003088 <HW_TS_Create>
  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8000b84:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <APP_THREAD_Init+0xa0>)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4815      	ldr	r0, [pc, #84]	; (8000be0 <APP_THREAD_Init+0xa4>)
 8000b8a:	f007 fad9 	bl	8008140 <osThreadNew>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <APP_THREAD_Init+0xa8>)
 8000b92:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */
  OsTaskSendCoapMsgId = osThreadNew(APP_THREAD_FreeRTOSSendCoapMsgTask, NULL,&ThreadSendCoapMsgProcess_attr);
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <APP_THREAD_Init+0xac>)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4814      	ldr	r0, [pc, #80]	; (8000bec <APP_THREAD_Init+0xb0>)
 8000b9a:	f007 fad1 	bl	8008140 <osThreadNew>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <APP_THREAD_Init+0xb4>)
 8000ba2:	6013      	str	r3, [r2, #0]
  OsTaskSetSedModeId = osThreadNew(APP_THREAD_FreeRTOSSetModeTask, NULL,&ThreadSetSedModeProcess_attr);
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <APP_THREAD_Init+0xb8>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <APP_THREAD_Init+0xbc>)
 8000baa:	f007 fac9 	bl	8008140 <osThreadNew>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <APP_THREAD_Init+0xc0>)
 8000bb2:	6013      	str	r3, [r2, #0]
  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8000bb4:	f000 f8dc 	bl	8000d70 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */
  /* Allow stop mode after Thread initialization*/
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f00d f92c 	bl	800de18 <UTIL_LPM_SetStopMode>
  /* USER CODE END APP_THREAD_INIT_2 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200300e8 	.word	0x200300e8
 8000bcc:	08001419 	.word	0x08001419
 8000bd0:	200000c0 	.word	0x200000c0
 8000bd4:	0800143d 	.word	0x0800143d
 8000bd8:	200000c1 	.word	0x200000c1
 8000bdc:	0800e71c 	.word	0x0800e71c
 8000be0:	08001041 	.word	0x08001041
 8000be4:	20000078 	.word	0x20000078
 8000be8:	0800e740 	.word	0x0800e740
 8000bec:	08001075 	.word	0x08001075
 8000bf0:	200000b8 	.word	0x200000b8
 8000bf4:	0800e764 	.word	0x0800e764
 8000bf8:	0800105b 	.word	0x0800105b
 8000bfc:	200000bc 	.word	0x200000bc

08000c00 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b14      	cmp	r3, #20
 8000c0e:	f200 8082 	bhi.w	8000d16 <APP_THREAD_Error+0x116>
 8000c12:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <APP_THREAD_Error+0x18>)
 8000c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c18:	08000c6d 	.word	0x08000c6d
 8000c1c:	08000c77 	.word	0x08000c77
 8000c20:	08000c81 	.word	0x08000c81
 8000c24:	08000c8b 	.word	0x08000c8b
 8000c28:	08000c95 	.word	0x08000c95
 8000c2c:	08000c9f 	.word	0x08000c9f
 8000c30:	08000ca9 	.word	0x08000ca9
 8000c34:	08000cb3 	.word	0x08000cb3
 8000c38:	08000cc7 	.word	0x08000cc7
 8000c3c:	08000cd1 	.word	0x08000cd1
 8000c40:	08000cdb 	.word	0x08000cdb
 8000c44:	08000ce5 	.word	0x08000ce5
 8000c48:	08000cef 	.word	0x08000cef
 8000c4c:	08000cf9 	.word	0x08000cf9
 8000c50:	08000d17 	.word	0x08000d17
 8000c54:	08000d17 	.word	0x08000d17
 8000c58:	08000d03 	.word	0x08000d03
 8000c5c:	08000d0d 	.word	0x08000d0d
 8000c60:	08000d17 	.word	0x08000d17
 8000c64:	08000d17 	.word	0x08000d17
 8000c68:	08000cbd 	.word	0x08000cbd
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8000c6c:	6839      	ldr	r1, [r7, #0]
 8000c6e:	482e      	ldr	r0, [pc, #184]	; (8000d28 <APP_THREAD_Error+0x128>)
 8000c70:	f000 f96a 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000c74:	e054      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8000c76:	6839      	ldr	r1, [r7, #0]
 8000c78:	482c      	ldr	r0, [pc, #176]	; (8000d2c <APP_THREAD_Error+0x12c>)
 8000c7a:	f000 f965 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000c7e:	e04f      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8000c80:	6839      	ldr	r1, [r7, #0]
 8000c82:	482b      	ldr	r0, [pc, #172]	; (8000d30 <APP_THREAD_Error+0x130>)
 8000c84:	f000 f960 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000c88:	e04a      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8000c8a:	6839      	ldr	r1, [r7, #0]
 8000c8c:	4829      	ldr	r0, [pc, #164]	; (8000d34 <APP_THREAD_Error+0x134>)
 8000c8e:	f000 f95b 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000c92:	e045      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8000c94:	6839      	ldr	r1, [r7, #0]
 8000c96:	4828      	ldr	r0, [pc, #160]	; (8000d38 <APP_THREAD_Error+0x138>)
 8000c98:	f000 f956 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000c9c:	e040      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	4826      	ldr	r0, [pc, #152]	; (8000d3c <APP_THREAD_Error+0x13c>)
 8000ca2:	f000 f951 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000ca6:	e03b      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8000ca8:	6839      	ldr	r1, [r7, #0]
 8000caa:	4825      	ldr	r0, [pc, #148]	; (8000d40 <APP_THREAD_Error+0x140>)
 8000cac:	f000 f94c 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000cb0:	e036      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_SET_NETWORK_KEY :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ",ErrCode);
 8000cb2:	6839      	ldr	r1, [r7, #0]
 8000cb4:	4823      	ldr	r0, [pc, #140]	; (8000d44 <APP_THREAD_Error+0x144>)
 8000cb6:	f000 f947 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000cba:	e031      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	4822      	ldr	r0, [pc, #136]	; (8000d48 <APP_THREAD_Error+0x148>)
 8000cc0:	f000 f942 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000cc4:	e02c      	b.n	8000d20 <APP_THREAD_Error+0x120>
  /* USER CODE BEGIN APP_THREAD_Error_2 */
  case ERR_THREAD_COAP_START :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ",ErrCode);
 8000cc6:	6839      	ldr	r1, [r7, #0]
 8000cc8:	4820      	ldr	r0, [pc, #128]	; (8000d4c <APP_THREAD_Error+0x14c>)
 8000cca:	f000 f93d 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000cce:	e027      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_COAP_ADD_RESSOURCE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",ErrCode);
 8000cd0:	6839      	ldr	r1, [r7, #0]
 8000cd2:	481f      	ldr	r0, [pc, #124]	; (8000d50 <APP_THREAD_Error+0x150>)
 8000cd4:	f000 f938 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000cd8:	e022      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_MESSAGE_READ :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ",ErrCode);
 8000cda:	6839      	ldr	r1, [r7, #0]
 8000cdc:	481d      	ldr	r0, [pc, #116]	; (8000d54 <APP_THREAD_Error+0x154>)
 8000cde:	f000 f933 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000ce2:	e01d      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_COAP_SEND_RESPONSE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",ErrCode);
 8000ce4:	6839      	ldr	r1, [r7, #0]
 8000ce6:	481c      	ldr	r0, [pc, #112]	; (8000d58 <APP_THREAD_Error+0x158>)
 8000ce8:	f000 f92e 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000cec:	e018      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_COAP_APPEND :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ",ErrCode);
 8000cee:	6839      	ldr	r1, [r7, #0]
 8000cf0:	481a      	ldr	r0, [pc, #104]	; (8000d5c <APP_THREAD_Error+0x15c>)
 8000cf2:	f000 f929 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000cf6:	e013      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_THREAD_COAP_SEND_REQUEST :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ",ErrCode);
 8000cf8:	6839      	ldr	r1, [r7, #0]
 8000cfa:	4819      	ldr	r0, [pc, #100]	; (8000d60 <APP_THREAD_Error+0x160>)
 8000cfc:	f000 f924 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000d00:	e00e      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_TIMER_INIT :
    APP_THREAD_TraceError("ERROR : ERR_TIMER_INIT ",ErrCode);
 8000d02:	6839      	ldr	r1, [r7, #0]
 8000d04:	4817      	ldr	r0, [pc, #92]	; (8000d64 <APP_THREAD_Error+0x164>)
 8000d06:	f000 f91f 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000d0a:	e009      	b.n	8000d20 <APP_THREAD_Error+0x120>
  case ERR_TIMER_START :
    APP_THREAD_TraceError("ERROR : ERR_TIMER_START ",ErrCode);
 8000d0c:	6839      	ldr	r1, [r7, #0]
 8000d0e:	4816      	ldr	r0, [pc, #88]	; (8000d68 <APP_THREAD_Error+0x168>)
 8000d10:	f000 f91a 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000d14:	e004      	b.n	8000d20 <APP_THREAD_Error+0x120>
  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8000d16:	2100      	movs	r1, #0
 8000d18:	4814      	ldr	r0, [pc, #80]	; (8000d6c <APP_THREAD_Error+0x16c>)
 8000d1a:	f000 f915 	bl	8000f48 <APP_THREAD_TraceError>
    break;
 8000d1e:	bf00      	nop
  }
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	0800e1c8 	.word	0x0800e1c8
 8000d2c:	0800e1ec 	.word	0x0800e1ec
 8000d30:	0800e210 	.word	0x0800e210
 8000d34:	0800e230 	.word	0x0800e230
 8000d38:	0800e250 	.word	0x0800e250
 8000d3c:	0800e270 	.word	0x0800e270
 8000d40:	0800e28c 	.word	0x0800e28c
 8000d44:	0800e2b8 	.word	0x0800e2b8
 8000d48:	0800e2dc 	.word	0x0800e2dc
 8000d4c:	0800e300 	.word	0x0800e300
 8000d50:	0800e320 	.word	0x0800e320
 8000d54:	0800e348 	.word	0x0800e348
 8000d58:	0800e36c 	.word	0x0800e36c
 8000d5c:	0800e394 	.word	0x0800e394
 8000d60:	0800e3b4 	.word	0x0800e3b4
 8000d64:	0800e3dc 	.word	0x0800e3dc
 8000d68:	0800e3f4 	.word	0x0800e3f4
 8000d6c:	0800e410 	.word	0x0800e410

08000d70 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
  otError error;
  otNetworkKey networkKey = {{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF}};
 8000d76:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <APP_THREAD_DeviceConfig+0x110>)
 8000d78:	1d3c      	adds	r4, r7, #4
 8000d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  error = otInstanceErasePersistentInfo(NULL);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f00b fb33 	bl	800c3ec <otInstanceErasePersistentInfo>
 8000d86:	4603      	mov	r3, r0
 8000d88:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d004      	beq.n	8000d9a <APP_THREAD_DeviceConfig+0x2a>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	4619      	mov	r1, r3
 8000d94:	2006      	movs	r0, #6
 8000d96:	f7ff ff33 	bl	8000c00 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f00b fac9 	bl	800c332 <otInstanceFinalize>
  otInstanceInitSingle();
 8000da0:	f00b faa0 	bl	800c2e4 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8000da4:	2200      	movs	r2, #0
 8000da6:	4937      	ldr	r1, [pc, #220]	; (8000e84 <APP_THREAD_DeviceConfig+0x114>)
 8000da8:	2000      	movs	r0, #0
 8000daa:	f00b fae9 	bl	800c380 <otSetStateChangedCallback>
 8000dae:	4603      	mov	r3, r0
 8000db0:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000db2:	7dfb      	ldrb	r3, [r7, #23]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d004      	beq.n	8000dc2 <APP_THREAD_DeviceConfig+0x52>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff ff1f 	bl	8000c00 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8000dc2:	210c      	movs	r1, #12
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f00b fb9c 	bl	800c502 <otLinkSetChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d004      	beq.n	8000dde <APP_THREAD_DeviceConfig+0x6e>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff ff11 	bl	8000c00 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8000dde:	f242 2122 	movw	r1, #8738	; 0x2222
 8000de2:	2000      	movs	r0, #0
 8000de4:	f00b fbbd 	bl	800c562 <otLinkSetPanId>
 8000de8:	4603      	mov	r3, r0
 8000dea:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <APP_THREAD_DeviceConfig+0x8c>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8000df2:	7dfb      	ldrb	r3, [r7, #23]
 8000df4:	4619      	mov	r1, r3
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff ff02 	bl	8000c00 <APP_THREAD_Error>
  }
  error = otThreadSetNetworkKey(NULL, &networkKey);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	2000      	movs	r0, #0
 8000e02:	f00c fd1a 	bl	800d83a <otThreadSetNetworkKey>
 8000e06:	4603      	mov	r3, r0
 8000e08:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d004      	beq.n	8000e1a <APP_THREAD_DeviceConfig+0xaa>
  {
    APP_THREAD_Error(ERR_THREAD_SET_NETWORK_KEY,error);
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
 8000e12:	4619      	mov	r1, r3
 8000e14:	2007      	movs	r0, #7
 8000e16:	f7ff fef3 	bl	8000c00 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f00b fb0e 	bl	800c43e <otIp6SetEnabled>
 8000e22:	4603      	mov	r3, r0
 8000e24:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <APP_THREAD_DeviceConfig+0xc6>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	2004      	movs	r0, #4
 8000e32:	f7ff fee5 	bl	8000c00 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8000e36:	2101      	movs	r1, #1
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f00c fc8d 	bl	800d758 <otThreadSetEnabled>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d004      	beq.n	8000e52 <APP_THREAD_DeviceConfig+0xe2>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	2005      	movs	r0, #5
 8000e4e:	f7ff fed7 	bl	8000c00 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  /* Start the COAP server */
  error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8000e52:	f241 6133 	movw	r1, #5683	; 0x1633
 8000e56:	2000      	movs	r0, #0
 8000e58:	f00b f9e8 	bl	800c22c <otCoapStart>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d004      	beq.n	8000e70 <APP_THREAD_DeviceConfig+0x100>
  {
    APP_THREAD_Error(ERR_THREAD_COAP_START,error);
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2008      	movs	r0, #8
 8000e6c:	f7ff fec8 	bl	8000c00 <APP_THREAD_Error>
  }
  /* Add COAP resources */
  otCoapAddResource(NULL, &OT_Ressource);
 8000e70:	4905      	ldr	r1, [pc, #20]	; (8000e88 <APP_THREAD_DeviceConfig+0x118>)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f00b fa0a 	bl	800c28c <otCoapAddResource>

  /* USER CODE END DEVICECONFIG */
}
 8000e78:	bf00      	nop
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	0800e420 	.word	0x0800e420
 8000e84:	08000e8d 	.word	0x08000e8d
 8000e88:	20000008 	.word	0x20000008

08000e8c <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */
  
  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d04b      	beq.n	8000f38 <APP_THREAD_StateNotif+0xac>
  {
    switch (otThreadGetDeviceRole(NULL))
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f00c fcf9 	bl	800d898 <otThreadGetDeviceRole>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d83e      	bhi.n	8000f2a <APP_THREAD_StateNotif+0x9e>
 8000eac:	a201      	add	r2, pc, #4	; (adr r2, 8000eb4 <APP_THREAD_StateNotif+0x28>)
 8000eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb2:	bf00      	nop
 8000eb4:	08000ec9 	.word	0x08000ec9
 8000eb8:	08000ed7 	.word	0x08000ed7
 8000ebc:	08000ee5 	.word	0x08000ee5
 8000ec0:	08000f01 	.word	0x08000f01
 8000ec4:	08000f1d 	.word	0x08000f1d
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
      BSP_LED_Off(LED2);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f003 f8b7 	bl	800403c <BSP_LED_Off>
      BSP_LED_Off(LED3);
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f003 f8b4 	bl	800403c <BSP_LED_Off>
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 8000ed4:	e031      	b.n	8000f3a <APP_THREAD_StateNotif+0xae>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
      BSP_LED_Off(LED2);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f003 f8b0 	bl	800403c <BSP_LED_Off>
      BSP_LED_Off(LED3);
 8000edc:	2002      	movs	r0, #2
 8000ede:	f003 f8ad 	bl	800403c <BSP_LED_Off>
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 8000ee2:	e02a      	b.n	8000f3a <APP_THREAD_StateNotif+0xae>
    case OT_DEVICE_ROLE_CHILD:
      /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
      BSP_LED_Off(LED2);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f003 f8a9 	bl	800403c <BSP_LED_Off>
      BSP_LED_On(LED3);
 8000eea:	2002      	movs	r0, #2
 8000eec:	f003 f88c 	bl	8004008 <BSP_LED_On>
      /* Set the mode sleepy end device */
      /* Start the timer */
      HW_TS_Start(setThreadModeTimerID, (uint32_t)THREAD_CHANGE_MODE_TIMEOUT);
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <APP_THREAD_StateNotif+0xb8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	f640 0101 	movw	r1, #2049	; 0x801
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 f9c3 	bl	8003284 <HW_TS_Start>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 8000efe:	e01c      	b.n	8000f3a <APP_THREAD_StateNotif+0xae>
    case OT_DEVICE_ROLE_ROUTER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_ROUTER */
      BSP_LED_Off(LED2);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f003 f89b 	bl	800403c <BSP_LED_Off>
      BSP_LED_On(LED3);
 8000f06:	2002      	movs	r0, #2
 8000f08:	f003 f87e 	bl	8004008 <BSP_LED_On>
      /* Set the mode sleepy end device */
      /* Start the timer */
      HW_TS_Start(setThreadModeTimerID, (uint32_t)THREAD_CHANGE_MODE_TIMEOUT);
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <APP_THREAD_StateNotif+0xb8>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	f640 0101 	movw	r1, #2049	; 0x801
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 f9b5 	bl	8003284 <HW_TS_Start>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8000f1a:	e00e      	b.n	8000f3a <APP_THREAD_StateNotif+0xae>
    case OT_DEVICE_ROLE_LEADER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_LEADER */
      BSP_LED_On(LED2);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f003 f873 	bl	8004008 <BSP_LED_On>
      BSP_LED_Off(LED3);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f003 f88a 	bl	800403c <BSP_LED_Off>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 8000f28:	e007      	b.n	8000f3a <APP_THREAD_StateNotif+0xae>
    default:
      /* USER CODE BEGIN DEFAULT */
      BSP_LED_Off(LED2);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f003 f886 	bl	800403c <BSP_LED_Off>
      BSP_LED_Off(LED3);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f003 f883 	bl	800403c <BSP_LED_Off>
      /* USER CODE END DEFAULT */
      break;
 8000f36:	e000      	b.n	8000f3a <APP_THREAD_StateNotif+0xae>
    }
  }
 8000f38:	bf00      	nop
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000c1 	.word	0x200000c1

08000f48 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <APP_THREAD_TraceError+0x30>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f003 f843 	bl	8003fe8 <logApplication>
  while(1U == 1U)
  {
    /* Note : Can be replace by HAL_Delay with timer to toggle LEDs */
    BSP_LED_On(LED1);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f003 f850 	bl	8004008 <BSP_LED_On>
    BSP_LED_On(LED2);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f003 f84d 	bl	8004008 <BSP_LED_On>
    BSP_LED_On(LED3);
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f003 f84a 	bl	8004008 <BSP_LED_On>
    BSP_LED_On(LED1);
 8000f74:	e7f5      	b.n	8000f62 <APP_THREAD_TraceError+0x1a>
 8000f76:	bf00      	nop
 8000f78:	0800e430 	.word	0x0800e430

08000f7c <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f00c fa04 	bl	800d394 <SHCI_GetWirelessFwInfo>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d004      	beq.n	8000f9c <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8000f92:	2101      	movs	r1, #1
 8000f94:	2014      	movs	r0, #20
 8000f96:	f7ff fe33 	bl	8000c00 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8000f9a:	e040      	b.n	800101e <APP_THREAD_CheckWirelessFirmwareInfo+0xa2>
    APP_DBG("**********************************************************");
 8000f9c:	4a22      	ldr	r2, [pc, #136]	; (8001028 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f003 f821 	bl	8003fe8 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8000fa8:	2101      	movs	r1, #1
 8000faa:	2000      	movs	r0, #0
 8000fac:	f003 f81c 	bl	8003fe8 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	785b      	ldrb	r3, [r3, #1]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	789b      	ldrb	r3, [r3, #2]
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	9200      	str	r2, [sp, #0]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f003 f80c 	bl	8003fe8 <logApplication>
    switch(p_wireless_info->StackType)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	7a5b      	ldrb	r3, [r3, #9]
 8000fd4:	2b50      	cmp	r3, #80	; 0x50
 8000fd6:	d012      	beq.n	8000ffe <APP_THREAD_CheckWirelessFirmwareInfo+0x82>
 8000fd8:	2b50      	cmp	r3, #80	; 0x50
 8000fda:	dc16      	bgt.n	800100a <APP_THREAD_CheckWirelessFirmwareInfo+0x8e>
 8000fdc:	2b10      	cmp	r3, #16
 8000fde:	d002      	beq.n	8000fe6 <APP_THREAD_CheckWirelessFirmwareInfo+0x6a>
 8000fe0:	2b11      	cmp	r3, #17
 8000fe2:	d006      	beq.n	8000ff2 <APP_THREAD_CheckWirelessFirmwareInfo+0x76>
 8000fe4:	e011      	b.n	800100a <APP_THREAD_CheckWirelessFirmwareInfo+0x8e>
      APP_DBG("FW Type : Thread FTD");
 8000fe6:	4a13      	ldr	r2, [pc, #76]	; (8001034 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	2000      	movs	r0, #0
 8000fec:	f002 fffc 	bl	8003fe8 <logApplication>
      break;
 8000ff0:	e010      	b.n	8001014 <APP_THREAD_CheckWirelessFirmwareInfo+0x98>
      APP_DBG("FW Type : Thread MTD");
 8000ff2:	4a11      	ldr	r2, [pc, #68]	; (8001038 <APP_THREAD_CheckWirelessFirmwareInfo+0xbc>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f002 fff6 	bl	8003fe8 <logApplication>
      break;
 8000ffc:	e00a      	b.n	8001014 <APP_THREAD_CheckWirelessFirmwareInfo+0x98>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <APP_THREAD_CheckWirelessFirmwareInfo+0xc0>)
 8001000:	2101      	movs	r1, #1
 8001002:	2000      	movs	r0, #0
 8001004:	f002 fff0 	bl	8003fe8 <logApplication>
      break;
 8001008:	e004      	b.n	8001014 <APP_THREAD_CheckWirelessFirmwareInfo+0x98>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800100a:	2101      	movs	r1, #1
 800100c:	2014      	movs	r0, #20
 800100e:	f7ff fdf7 	bl	8000c00 <APP_THREAD_Error>
      break;
 8001012:	bf00      	nop
    APP_DBG("**********************************************************");
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8001016:	2101      	movs	r1, #1
 8001018:	2000      	movs	r0, #0
 800101a:	f002 ffe5 	bl	8003fe8 <logApplication>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	0800e454 	.word	0x0800e454
 800102c:	0800e490 	.word	0x0800e490
 8001030:	0800e4ac 	.word	0x0800e4ac
 8001034:	0800e4c4 	.word	0x0800e4c4
 8001038:	0800e4dc 	.word	0x0800e4dc
 800103c:	0800e4f4 	.word	0x0800e4f4

08001040 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	2101      	movs	r1, #1
 800104e:	2001      	movs	r0, #1
 8001050:	f007 f956 	bl	8008300 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8001054:	f000 fb34 	bl	80016c0 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8001058:	e7f6      	b.n	8001048 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

0800105a <APP_THREAD_FreeRTOSSetModeTask>:
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
static void APP_THREAD_FreeRTOSSetModeTask(void *argument)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  UNUSED(argument);
  for(;;)
  {
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8001062:	f04f 32ff 	mov.w	r2, #4294967295
 8001066:	2101      	movs	r1, #1
 8001068:	2001      	movs	r0, #1
 800106a:	f007 f949 	bl	8008300 <osThreadFlagsWait>
    APP_THREAD_SetSleepyEndDeviceMode();
 800106e:	f000 f8df 	bl	8001230 <APP_THREAD_SetSleepyEndDeviceMode>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8001072:	e7f6      	b.n	8001062 <APP_THREAD_FreeRTOSSetModeTask+0x8>

08001074 <APP_THREAD_FreeRTOSSendCoapMsgTask>:
  }
}

static void APP_THREAD_FreeRTOSSendCoapMsgTask(void *argument)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  UNUSED(argument);
  for(;;)
  {
    osThreadFlagsWait(4,osFlagsWaitAll,osWaitForever);
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	2101      	movs	r1, #1
 8001082:	2004      	movs	r0, #4
 8001084:	f007 f93c 	bl	8008300 <osThreadFlagsWait>
    APP_THREAD_SendCoapMsg();
 8001088:	f000 f92e 	bl	80012e8 <APP_THREAD_SendCoapMsg>
    osThreadFlagsWait(4,osFlagsWaitAll,osWaitForever);
 800108c:	e7f6      	b.n	800107c <APP_THREAD_FreeRTOSSendCoapMsgTask+0x8>
	...

08001090 <APP_THREAD_CoapSendRequest>:
    const otIp6Address* aPeerAddress,
    uint8_t* aPayload,
    uint16_t Size,
    otCoapResponseHandler aHandler,
    void* aContext)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af02      	add	r7, sp, #8
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	72fb      	strb	r3, [r7, #11]
 800109e:	4613      	mov	r3, r2
 80010a0:	72bb      	strb	r3, [r7, #10]
  otError error = OT_ERROR_NONE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	75fb      	strb	r3, [r7, #23]

  do{
    pOT_Message = otCoapNewMessage(NULL, NULL);
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f00a ff63 	bl	800bf74 <otCoapNewMessage>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a56      	ldr	r2, [pc, #344]	; (800120c <APP_THREAD_CoapSendRequest+0x17c>)
 80010b2:	6013      	str	r3, [r2, #0]
    if (pOT_Message == NULL)
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <APP_THREAD_CoapSendRequest+0x17c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d105      	bne.n	80010c8 <APP_THREAD_CoapSendRequest+0x38>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_NEW_MSG,error);
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	4619      	mov	r1, r3
 80010c0:	2012      	movs	r0, #18
 80010c2:	f7ff fd9d 	bl	8000c00 <APP_THREAD_Error>
      break;
 80010c6:	e08c      	b.n	80011e2 <APP_THREAD_CoapSendRequest+0x152>
    }

    otCoapMessageInit(pOT_Message, aCoapType, aCoapCode);
 80010c8:	4b50      	ldr	r3, [pc, #320]	; (800120c <APP_THREAD_CoapSendRequest+0x17c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	7aba      	ldrb	r2, [r7, #10]
 80010ce:	7af9      	ldrb	r1, [r7, #11]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00a ff7d 	bl	800bfd0 <otCoapMessageInit>
    otCoapMessageAppendUriPathOptions(pOT_Message, aCoapRessource->mUriPath);
 80010d6:	4b4d      	ldr	r3, [pc, #308]	; (800120c <APP_THREAD_CoapSendRequest+0x17c>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4619      	mov	r1, r3
 80010e0:	4610      	mov	r0, r2
 80010e2:	f00a ffaa 	bl	800c03a <otCoapMessageAppendUriPathOptions>
    otCoapMessageSetPayloadMarker(pOT_Message);
 80010e6:	4b49      	ldr	r3, [pc, #292]	; (800120c <APP_THREAD_CoapSendRequest+0x17c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00a ffd7 	bl	800c09e <otCoapMessageSetPayloadMarker>

    if((aPayload != NULL) && (Size > 0))
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d014      	beq.n	8001120 <APP_THREAD_CoapSendRequest+0x90>
 80010f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d011      	beq.n	8001120 <APP_THREAD_CoapSendRequest+0x90>
    {
      error = otMessageAppend(pOT_Message, aPayload, Size);
 80010fc:	4b43      	ldr	r3, [pc, #268]	; (800120c <APP_THREAD_CoapSendRequest+0x17c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001104:	4618      	mov	r0, r3
 8001106:	f00b fae8 	bl	800c6da <otMessageAppend>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
      if (error != OT_ERROR_NONE)
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00a      	beq.n	800112a <APP_THREAD_CoapSendRequest+0x9a>
      {
        APP_THREAD_Error(ERR_THREAD_COAP_APPEND,error);
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	4619      	mov	r1, r3
 8001118:	200c      	movs	r0, #12
 800111a:	f7ff fd71 	bl	8000c00 <APP_THREAD_Error>
        break;
 800111e:	e060      	b.n	80011e2 <APP_THREAD_CoapSendRequest+0x152>
      }
    }
    else
    {
      APP_DBG("APP_THREAD_CoapSendRequest: No payload passed");
 8001120:	4a3b      	ldr	r2, [pc, #236]	; (8001210 <APP_THREAD_CoapSendRequest+0x180>)
 8001122:	2101      	movs	r1, #1
 8001124:	2000      	movs	r0, #0
 8001126:	f002 ff5f 	bl	8003fe8 <logApplication>
    }

    memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 800112a:	222c      	movs	r2, #44	; 0x2c
 800112c:	2100      	movs	r1, #0
 800112e:	4839      	ldr	r0, [pc, #228]	; (8001214 <APP_THREAD_CoapSendRequest+0x184>)
 8001130:	f00c fff8 	bl	800e124 <memset>
    OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8001134:	4b37      	ldr	r3, [pc, #220]	; (8001214 <APP_THREAD_CoapSendRequest+0x184>)
 8001136:	f241 6233 	movw	r2, #5683	; 0x1633
 800113a:	845a      	strh	r2, [r3, #34]	; 0x22

    if((aPeerAddress == NULL) && (aStringAddress != NULL))
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10d      	bne.n	800115e <APP_THREAD_CoapSendRequest+0xce>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00a      	beq.n	800115e <APP_THREAD_CoapSendRequest+0xce>
    {
      APP_DBG("Use String Address : %s ", aStringAddress);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a33      	ldr	r2, [pc, #204]	; (8001218 <APP_THREAD_CoapSendRequest+0x188>)
 800114c:	2101      	movs	r1, #1
 800114e:	2000      	movs	r0, #0
 8001150:	f002 ff4a 	bl	8003fe8 <logApplication>
      otIp6AddressFromString(aStringAddress, &OT_MessageInfo.mPeerAddr);
 8001154:	4931      	ldr	r1, [pc, #196]	; (800121c <APP_THREAD_CoapSendRequest+0x18c>)
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f00b f9a1 	bl	800c49e <otIp6AddressFromString>
 800115c:	e01b      	b.n	8001196 <APP_THREAD_CoapSendRequest+0x106>
    }
    else
    if (aPeerAddress != NULL)
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00f      	beq.n	8001184 <APP_THREAD_CoapSendRequest+0xf4>
    {
      APP_DBG("Use Peer Address");
 8001164:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <APP_THREAD_CoapSendRequest+0x190>)
 8001166:	2101      	movs	r1, #1
 8001168:	2000      	movs	r0, #0
 800116a:	f002 ff3d 	bl	8003fe8 <logApplication>
      memcpy(&OT_MessageInfo.mPeerAddr, aPeerAddress, sizeof(OT_MessageInfo.mPeerAddr));
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <APP_THREAD_CoapSendRequest+0x184>)
 8001170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001172:	f103 0410 	add.w	r4, r3, #16
 8001176:	4613      	mov	r3, r2
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	6859      	ldr	r1, [r3, #4]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001182:	e008      	b.n	8001196 <APP_THREAD_CoapSendRequest+0x106>
    }
    else
    {
      APP_DBG("ERROR: Address string and Peer Address not defined");
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <APP_THREAD_CoapSendRequest+0x194>)
 8001186:	2101      	movs	r1, #1
 8001188:	2000      	movs	r0, #0
 800118a:	f002 ff2d 	bl	8003fe8 <logApplication>
      APP_THREAD_Error(ERR_THREAD_COAP_ADDRESS_NOT_DEFINED, 0);
 800118e:	2100      	movs	r1, #0
 8001190:	2013      	movs	r0, #19
 8001192:	f7ff fd35 	bl	8000c00 <APP_THREAD_Error>
    }

    if(aCoapType == OT_COAP_TYPE_NON_CONFIRMABLE)
 8001196:	7afb      	ldrb	r3, [r7, #11]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d10f      	bne.n	80011bc <APP_THREAD_CoapSendRequest+0x12c>
    {
      APP_DBG("aCoapType == OT_COAP_TYPE_NON_CONFIRMABLE");
 800119c:	4a22      	ldr	r2, [pc, #136]	; (8001228 <APP_THREAD_CoapSendRequest+0x198>)
 800119e:	2101      	movs	r1, #1
 80011a0:	2000      	movs	r0, #0
 80011a2:	f002 ff21 	bl	8003fe8 <logApplication>
      error = otCoapSendRequest(NULL,
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <APP_THREAD_CoapSendRequest+0x17c>)
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	2300      	movs	r3, #0
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2300      	movs	r3, #0
 80011b0:	4a18      	ldr	r2, [pc, #96]	; (8001214 <APP_THREAD_CoapSendRequest+0x184>)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff fcab 	bl	8000b0e <otCoapSendRequest>
 80011b8:	4603      	mov	r3, r0
 80011ba:	75fb      	strb	r3, [r7, #23]
          pOT_Message,
          &OT_MessageInfo,
          NULL,
          NULL);
    }
    if(aCoapType == OT_COAP_TYPE_CONFIRMABLE)
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10f      	bne.n	80011e2 <APP_THREAD_CoapSendRequest+0x152>
    {
      APP_DBG("aCoapType == OT_COAP_TYPE_CONFIRMABLE");
 80011c2:	4a1a      	ldr	r2, [pc, #104]	; (800122c <APP_THREAD_CoapSendRequest+0x19c>)
 80011c4:	2101      	movs	r1, #1
 80011c6:	2000      	movs	r0, #0
 80011c8:	f002 ff0e 	bl	8003fe8 <logApplication>
      error = otCoapSendRequest(NULL,
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <APP_THREAD_CoapSendRequest+0x17c>)
 80011ce:	6819      	ldr	r1, [r3, #0]
 80011d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <APP_THREAD_CoapSendRequest+0x184>)
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fc98 	bl	8000b0e <otCoapSendRequest>
 80011de:	4603      	mov	r3, r0
 80011e0:	75fb      	strb	r3, [r7, #23]
          &OT_MessageInfo,
          aHandler,
          aContext);
    }
  }while(false);
  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00d      	beq.n	8001204 <APP_THREAD_CoapSendRequest+0x174>
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <APP_THREAD_CoapSendRequest+0x17c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d009      	beq.n	8001204 <APP_THREAD_CoapSendRequest+0x174>
  {
    otMessageFree(pOT_Message);
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <APP_THREAD_CoapSendRequest+0x17c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00b fa13 	bl	800c620 <otMessageFree>
    APP_THREAD_Error(ERR_THREAD_COAP_SEND_REQUEST,error);
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	4619      	mov	r1, r3
 80011fe:	200d      	movs	r0, #13
 8001200:	f7ff fcfe 	bl	8000c00 <APP_THREAD_Error>
  }
}
 8001204:	bf00      	nop
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	200000ac 	.word	0x200000ac
 8001210:	0800e520 	.word	0x0800e520
 8001214:	2000007c 	.word	0x2000007c
 8001218:	0800e550 	.word	0x0800e550
 800121c:	2000008c 	.word	0x2000008c
 8001220:	0800e56c 	.word	0x0800e56c
 8001224:	0800e580 	.word	0x0800e580
 8001228:	0800e5b4 	.word	0x0800e5b4
 800122c:	0800e5e0 	.word	0x0800e5e0

08001230 <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
static void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  otError   error = OT_ERROR_NONE;
 8001236:	2300      	movs	r3, #0
 8001238:	71fb      	strb	r3, [r7, #7]

  /* Set the pool period to 5 sec. It means that when the device will enter
   * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
   * This message will act as keep alive message.
   */
  otLinkSetPollPeriod(NULL, THREAD_LINK_POLL_PERIOD_MS);
 800123a:	f241 3188 	movw	r1, #5000	; 0x1388
 800123e:	2000      	movs	r0, #0
 8001240:	f00b f9bf 	bl	800c5c2 <otLinkSetPollPeriod>

  /* Set the sleepy end device mode */
  OT_LinkMode.mRxOnWhenIdle = 0;
 8001244:	4a25      	ldr	r2, [pc, #148]	; (80012dc <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 8001246:	7813      	ldrb	r3, [r2, #0]
 8001248:	f36f 0300 	bfc	r3, #0, #1
 800124c:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mDeviceType = 0;
 800124e:	4a23      	ldr	r2, [pc, #140]	; (80012dc <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 8001250:	7813      	ldrb	r3, [r2, #0]
 8001252:	f36f 0341 	bfc	r3, #1, #1
 8001256:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mNetworkData = 1U;
 8001258:	4a20      	ldr	r2, [pc, #128]	; (80012dc <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 800125a:	7813      	ldrb	r3, [r2, #0]
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	7013      	strb	r3, [r2, #0]

  error = otThreadSetLinkMode(NULL,OT_LinkMode);
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <APP_THREAD_SetSleepyEndDeviceMode+0xac>)
 8001264:	7819      	ldrb	r1, [r3, #0]
 8001266:	2000      	movs	r0, #0
 8001268:	f00c faa6 	bl	800d7b8 <otThreadSetLinkMode>
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d004      	beq.n	8001280 <APP_THREAD_SetSleepyEndDeviceMode+0x50>
    APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	4619      	mov	r1, r3
 800127a:	200f      	movs	r0, #15
 800127c:	f7ff fcc0 	bl	8000c00 <APP_THREAD_Error>
   * to modify its mode to MTD.
   * As a result, you need to first detach from the network before switching from FTD to MTD at runtime,
   * then reattach.
   *
   */
  if (sleepyEndDeviceFlag == FALSE)
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <APP_THREAD_SetSleepyEndDeviceMode+0xb0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d11e      	bne.n	80012c6 <APP_THREAD_SetSleepyEndDeviceMode+0x96>
  {
    error = otThreadSetEnabled(NULL, false);
 8001288:	2100      	movs	r1, #0
 800128a:	2000      	movs	r0, #0
 800128c:	f00c fa64 	bl	800d758 <otThreadSetEnabled>
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <APP_THREAD_SetSleepyEndDeviceMode+0x74>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4619      	mov	r1, r3
 800129e:	200f      	movs	r0, #15
 80012a0:	f7ff fcae 	bl	8000c00 <APP_THREAD_Error>
    error = otThreadSetEnabled(NULL, true);
 80012a4:	2101      	movs	r1, #1
 80012a6:	2000      	movs	r0, #0
 80012a8:	f00c fa56 	bl	800d758 <otThreadSetEnabled>
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <APP_THREAD_SetSleepyEndDeviceMode+0x90>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4619      	mov	r1, r3
 80012ba:	200f      	movs	r0, #15
 80012bc:	f7ff fca0 	bl	8000c00 <APP_THREAD_Error>
    sleepyEndDeviceFlag = TRUE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <APP_THREAD_SetSleepyEndDeviceMode+0xb0>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Start the timer */
  HW_TS_Start(sedCoapTimerID, (uint32_t)COAP_SEND_TIMEOUT);
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <APP_THREAD_SetSleepyEndDeviceMode+0xb4>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	f640 0101 	movw	r1, #2049	; 0x801
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 ffd8 	bl	8003284 <HW_TS_Start>

}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200000b0 	.word	0x200000b0
 80012e0:	200000b4 	.word	0x200000b4
 80012e4:	200000c0 	.word	0x200000c0

080012e8 <APP_THREAD_SendCoapMsg>:
 * @brief Process associated to the sending of a COAP request.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  APP_THREAD_SendCoapMulticastRequest(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f000 f845 	bl	800137c <APP_THREAD_SendCoapMulticastRequest>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <APP_THREAD_CoapRequestHandler>:
  * @retval None
  */
static void APP_THREAD_CoapRequestHandler(void                * pContext,
                                          otMessage           * pMessage,
                                          const otMessageInfo * pMessageInfo)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  do
  {
    if (otCoapMessageGetType(pMessage) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8001304:	68b8      	ldr	r0, [r7, #8]
 8001306:	f00a fef8 	bl	800c0fa <otCoapMessageGetType>
 800130a:	4603      	mov	r3, r0
 800130c:	2b01      	cmp	r3, #1
 800130e:	d128      	bne.n	8001362 <APP_THREAD_CoapRequestHandler+0x6a>
    {
      break;
    }

    if (otCoapMessageGetCode(pMessage) != OT_COAP_CODE_PUT)
 8001310:	68b8      	ldr	r0, [r7, #8]
 8001312:	f00a ff20 	bl	800c156 <otCoapMessageGetCode>
 8001316:	4603      	mov	r3, r0
 8001318:	2b03      	cmp	r3, #3
 800131a:	d124      	bne.n	8001366 <APP_THREAD_CoapRequestHandler+0x6e>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f00b f9ac 	bl	800c67a <otMessageGetOffset>
 8001322:	4603      	mov	r3, r0
 8001324:	4619      	mov	r1, r3
 8001326:	2301      	movs	r3, #1
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <APP_THREAD_CoapRequestHandler+0x78>)
 800132a:	68b8      	ldr	r0, [r7, #8]
 800132c:	f00b fa0e 	bl	800c74c <otMessageRead>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d003      	beq.n	800133e <APP_THREAD_CoapRequestHandler+0x46>
    {
      APP_THREAD_Error(ERR_THREAD_MESSAGE_READ, 0);
 8001336:	2100      	movs	r1, #0
 8001338:	200a      	movs	r0, #10
 800133a:	f7ff fc61 	bl	8000c00 <APP_THREAD_Error>
    }

    if (OT_ReceivedCommand == 1U)
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <APP_THREAD_CoapRequestHandler+0x78>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d110      	bne.n	8001368 <APP_THREAD_CoapRequestHandler+0x70>
    {
      BSP_LED_Toggle(LED1);
 8001346:	2000      	movs	r0, #0
 8001348:	f002 fe92 	bl	8004070 <BSP_LED_Toggle>
      APP_DBG("**** Recept COAP nb **** %d ",DebugRxCoapCpt++);
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <APP_THREAD_CoapRequestHandler+0x7c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <APP_THREAD_CoapRequestHandler+0x7c>)
 8001354:	600a      	str	r2, [r1, #0]
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <APP_THREAD_CoapRequestHandler+0x80>)
 8001358:	2101      	movs	r1, #1
 800135a:	2000      	movs	r0, #0
 800135c:	f002 fe44 	bl	8003fe8 <logApplication>
    }

  } while (false);
}
 8001360:	e002      	b.n	8001368 <APP_THREAD_CoapRequestHandler+0x70>
      break;
 8001362:	bf00      	nop
 8001364:	e000      	b.n	8001368 <APP_THREAD_CoapRequestHandler+0x70>
      break;
 8001366:	bf00      	nop
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200000a9 	.word	0x200000a9
 8001374:	200000c4 	.word	0x200000c4
 8001378:	0800e608 	.word	0x0800e608

0800137c <APP_THREAD_SendCoapMulticastRequest>:
  *        on the Thread network
  * @param command : Command associated to the COAP request.
  * @retval None
  */
static void APP_THREAD_SendCoapMulticastRequest(uint8_t command)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af06      	add	r7, sp, #24
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  otError error = OT_ERROR_NONE;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]

  OT_Command = command;
 800138a:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <APP_THREAD_SendCoapMulticastRequest+0x84>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	7013      	strb	r3, [r2, #0]
   * send the command and put back the IP 802_15_4 in sleep mode when possible.
   * If the application send too much ot_cmd commands sequentially, the IP 802_15_4
   * will wake up and sleep at a non reasonable speed. It is why it is advised
   * to control when the IP 802_15_4 radio is allowed to enter in low power.
   */
  SHCI_C2_RADIO_AllowLowPower(THREAD_IP,FALSE);
 8001390:	2100      	movs	r1, #0
 8001392:	2001      	movs	r0, #1
 8001394:	f00b ffe0 	bl	800d358 <SHCI_C2_RADIO_AllowLowPower>

  /* Send the COAP request */
  APP_THREAD_CoapSendRequest(&OT_Ressource,
 8001398:	2300      	movs	r3, #0
 800139a:	9304      	str	r3, [sp, #16]
 800139c:	2300      	movs	r3, #0
 800139e:	9303      	str	r3, [sp, #12]
 80013a0:	2301      	movs	r3, #1
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <APP_THREAD_SendCoapMulticastRequest+0x84>)
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	2300      	movs	r3, #0
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <APP_THREAD_SendCoapMulticastRequest+0x88>)
 80013ae:	2203      	movs	r2, #3
 80013b0:	2101      	movs	r1, #1
 80013b2:	4815      	ldr	r0, [pc, #84]	; (8001408 <APP_THREAD_SendCoapMulticastRequest+0x8c>)
 80013b4:	f7ff fe6c 	bl	8001090 <APP_THREAD_CoapSendRequest>
      &OT_Command,
      sizeof(OT_Command),
      NULL,
      NULL);

  APP_DBG("*** Send COAP nb **** %d",DebugTxCoapCpt++);
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <APP_THREAD_SendCoapMulticastRequest+0x90>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	4913      	ldr	r1, [pc, #76]	; (800140c <APP_THREAD_SendCoapMulticastRequest+0x90>)
 80013c0:	600a      	str	r2, [r1, #0]
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <APP_THREAD_SendCoapMulticastRequest+0x94>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	2000      	movs	r0, #0
 80013c8:	f002 fe0e 	bl	8003fe8 <logApplication>

  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00d      	beq.n	80013ee <APP_THREAD_SendCoapMulticastRequest+0x72>
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <APP_THREAD_SendCoapMulticastRequest+0x98>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <APP_THREAD_SendCoapMulticastRequest+0x72>
  {
    otMessageFree(pOT_Message);
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <APP_THREAD_SendCoapMulticastRequest+0x98>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f00b f91e 	bl	800c620 <otMessageFree>
    APP_THREAD_Error(ERR_THREAD_COAP_SEND_REQUEST,error);
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	4619      	mov	r1, r3
 80013e8:	200d      	movs	r0, #13
 80013ea:	f7ff fc09 	bl	8000c00 <APP_THREAD_Error>
  }

  /* Allow the 800_15_4 IP to enter in low power mode */
  SHCI_C2_RADIO_AllowLowPower(THREAD_IP,TRUE);
 80013ee:	2101      	movs	r1, #1
 80013f0:	2001      	movs	r0, #1
 80013f2:	f00b ffb1 	bl	800d358 <SHCI_C2_RADIO_AllowLowPower>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200000a8 	.word	0x200000a8
 8001404:	0800e628 	.word	0x0800e628
 8001408:	20000008 	.word	0x20000008
 800140c:	200000c8 	.word	0x200000c8
 8001410:	0800e630 	.word	0x0800e630
 8001414:	200000ac 	.word	0x200000ac

08001418 <APP_THREAD_CoapTimingElapsed>:

static void APP_THREAD_CoapTimingElapsed( void )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /*
  APP_DBG("TIMER COAP EXPIRED");
  BSP_LED_Toggle(LED1);
  */
  {
    if (sleepyEndDeviceFlag == TRUE)
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <APP_THREAD_CoapTimingElapsed+0x1c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <APP_THREAD_CoapTimingElapsed+0x18>
    {
        osThreadFlagsSet(OsTaskSendCoapMsgId,4);
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <APP_THREAD_CoapTimingElapsed+0x20>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2104      	movs	r1, #4
 800142a:	4618      	mov	r0, r3
 800142c:	f006 ff1a 	bl	8008264 <osThreadFlagsSet>
    }
  }
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200000b4 	.word	0x200000b4
 8001438:	200000b8 	.word	0x200000b8

0800143c <APP_THREAD_SetThreadMode>:

static void APP_THREAD_SetThreadMode( void )
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  osThreadFlagsSet(OsTaskSetSedModeId,1);
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <APP_THREAD_SetThreadMode+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	4618      	mov	r0, r3
 8001448:	f006 ff0c 	bl	8008264 <osThreadFlagsSet>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000bc 	.word	0x200000bc

08001454 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000068 	.word	0x20000068

08001474 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	330c      	adds	r3, #12
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	20000068 	.word	0x20000068

0800148c <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	330b      	adds	r3, #11
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	20000068 	.word	0x20000068

080014a4 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	330b      	adds	r3, #11
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	2000006c 	.word	0x2000006c

080014bc <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  ot_StatusNot(ot_TL_CmdBusy);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f000 f884 	bl	80015d0 <ot_StatusNot>

  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <Ot_Cmd_Transfer_Common+0x50>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014d2:	725a      	strb	r2, [r3, #9]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f042 0202 	orr.w	r2, r2, #2
 80014da:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <Ot_Cmd_Transfer_Common+0x50>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	330c      	adds	r3, #12
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	3302      	adds	r3, #2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <Ot_Cmd_Transfer_Common+0x50>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 80014f4:	f00c fb12 	bl	800db1c <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80014f8:	f000 f838 	bl	800156c <Wait_Getting_Ack_From_M0>

  ot_StatusNot(ot_TL_CmdAvailable);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f000 f867 	bl	80015d0 <ot_StatusNot>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000068 	.word	0x20000068

08001510 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  Ot_Cmd_Transfer_Common();
 8001514:	f7ff ffd2 	bl	80014bc <Ot_Cmd_Transfer_Common>
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8001524:	f000 f834 	bl	8001590 <Receive_Ack_From_M0>

  /* Does not allow OpenThread M0 to M4 notification */
  g_ot_notification_allowed = 0U;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <TL_OT_CmdEvtReceived+0x1c>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000d0 	.word	0x200000d0

0800153c <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <TL_THREAD_NotReceived+0x1c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800154a:	f000 f82d 	bl	80015a8 <Receive_Notification_From_M0>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000006c 	.word	0x2000006c

0800155c <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8001570:	bf00      	nop
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <Wait_Getting_Ack_From_M0+0x20>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0fb      	beq.n	8001572 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <Wait_Getting_Ack_From_M0+0x20>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000074 	.word	0x20000074

08001590 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <Receive_Ack_From_M0+0x14>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	20000074 	.word	0x20000074

080015a8 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <Receive_Notification_From_M0+0x20>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <Receive_Notification_From_M0+0x20>)
 80015b4:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <Receive_Notification_From_M0+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	4618      	mov	r0, r3
 80015be:	f006 fe51 	bl	8008264 <osThreadFlagsSet>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000070 	.word	0x20000070
 80015cc:	20000078 	.word	0x20000078

080015d0 <ot_StatusNot>:

static void ot_StatusNot( ot_TL_CmdStatus_t status )
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <ot_StatusNot+0x16>
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d008      	beq.n	80015f6 <ot_StatusNot+0x26>
    case ot_TL_CmdAvailable:
      osMutexRelease( MtxOtCmdId );
      break;

    default:
      break;
 80015e4:	e00d      	b.n	8001602 <ot_StatusNot+0x32>
      osMutexAcquire( MtxOtCmdId, osWaitForever );
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <ot_StatusNot+0x3c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f04f 31ff 	mov.w	r1, #4294967295
 80015ee:	4618      	mov	r0, r3
 80015f0:	f006 ff8d 	bl	800850e <osMutexAcquire>
      break;
 80015f4:	e005      	b.n	8001602 <ot_StatusNot+0x32>
      osMutexRelease( MtxOtCmdId );
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <ot_StatusNot+0x3c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f006 ffd2 	bl	80085a4 <osMutexRelease>
      break;
 8001600:	bf00      	nop
  }
  return;
 8001602:	bf00      	nop
}
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000064 	.word	0x20000064

08001610 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8001614:	f00c fa9e 	bl	800db54 <TL_THREAD_CliSendAck>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  MX_LPUART1_UART_Init();
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001632:	4a09      	ldr	r2, [pc, #36]	; (8001658 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8001634:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001638:	4a08      	ldr	r2, [pc, #32]	; (800165c <APP_THREAD_TL_THREAD_INIT+0x30>)
 800163a:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <APP_THREAD_TL_THREAD_INIT+0x34>)
 8001640:	605a      	str	r2, [r3, #4]
  ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*)&ThreadCliNotBuffer;
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <APP_THREAD_TL_THREAD_INIT+0x38>)
 8001646:	60da      	str	r2, [r3, #12]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800164a:	f00c fa47 	bl	800dadc <TL_THREAD_Init>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20030028 	.word	0x20030028
 8001658:	200300e8 	.word	0x200300e8
 800165c:	200301f4 	.word	0x200301f4
 8001660:	20030300 	.word	0x20030300
 8001664:	2003040c 	.word	0x2003040c

08001668 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	7adb      	ldrb	r3, [r3, #11]
 8001678:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	330c      	adds	r3, #12
 800167e:	490b      	ldr	r1, [pc, #44]	; (80016ac <TL_THREAD_CliNotReceived+0x44>)
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fd7d 	bl	8000180 <strcmp>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f103 010c 	add.w	r1, r3, #12
 8001692:	7afb      	ldrb	r3, [r7, #11]
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <TL_THREAD_CliNotReceived+0x48>)
 8001698:	2002      	movs	r0, #2
 800169a:	f001 febb 	bl	8003414 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 800169e:	e001      	b.n	80016a4 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 80016a0:	f7ff ffb6 	bl	8001610 <Send_CLI_Ack_For_OT>
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	0800e64c 	.word	0x0800e64c
 80016b0:	080016b5 	.word	0x080016b5

080016b4 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 80016b8:	f7ff ffaa 	bl	8001610 <Send_CLI_Ack_For_OT>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00d      	beq.n	80016e8 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d904      	bls.n	80016de <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80016d4:	2100      	movs	r1, #0
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fa92 	bl	8000c00 <APP_THREAD_Error>
 80016dc:	e001      	b.n	80016e2 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 80016de:	f00b f875 	bl	800c7cc <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 80016e2:	4b02      	ldr	r3, [pc, #8]	; (80016ec <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
  }
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000070 	.word	0x20000070

080016f0 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <LL_PWR_EnableBootC2+0x1c>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <LL_PWR_EnableBootC2+0x1c>)
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	58000400 	.word	0x58000400

08001710 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800171a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800171e:	4905      	ldr	r1, [pc, #20]	; (8001734 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4313      	orrs	r3, r2
 8001724:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	58000800 	.word	0x58000800

08001738 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	4904      	ldr	r1, [pc, #16]	; (8001758 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4313      	orrs	r3, r2
 800174a:	620b      	str	r3, [r1, #32]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	58000800 	.word	0x58000800

0800175c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800176a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001780:	68fb      	ldr	r3, [r7, #12]
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800179e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80017aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ae:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	601a      	str	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	605a      	str	r2, [r3, #4]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	605a      	str	r2, [r3, #4]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	43db      	mvns	r3, r3
 8001862:	401a      	ands	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	605a      	str	r2, [r3, #4]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	605a      	str	r2, [r3, #4]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	609a      	str	r2, [r3, #8]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	041a      	lsls	r2, r3, #16
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	609a      	str	r2, [r3, #8]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4013      	ands	r3, r2
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d101      	bne.n	80018ec <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69da      	ldr	r2, [r3, #28]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4013      	ands	r3, r2
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d101      	bne.n	8001916 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001928:	2102      	movs	r1, #2
 800192a:	482a      	ldr	r0, [pc, #168]	; (80019d4 <HW_IPCC_Rx_Handler+0xb0>)
 800192c:	f7ff ffe5 	bl	80018fa <LL_C2_IPCC_IsActiveFlag_CHx>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HW_IPCC_Rx_Handler+0x26>
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HW_IPCC_Rx_Handler+0xb0>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	43db      	mvns	r3, r3
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001944:	f000 f8f8 	bl	8001b38 <HW_IPCC_SYS_EvtHandler>
 8001948:	e041      	b.n	80019ce <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800194a:	2104      	movs	r1, #4
 800194c:	4821      	ldr	r0, [pc, #132]	; (80019d4 <HW_IPCC_Rx_Handler+0xb0>)
 800194e:	f7ff ffd4 	bl	80018fa <LL_C2_IPCC_IsActiveFlag_CHx>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <HW_IPCC_Rx_Handler+0x48>
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HW_IPCC_Rx_Handler+0xb0>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	43db      	mvns	r3, r3
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8001966:	f000 f937 	bl	8001bd8 <HW_IPCC_THREAD_NotEvtHandler>
 800196a:	e030      	b.n	80019ce <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 800196c:	2110      	movs	r1, #16
 800196e:	4819      	ldr	r0, [pc, #100]	; (80019d4 <HW_IPCC_Rx_Handler+0xb0>)
 8001970:	f7ff ffc3 	bl	80018fa <LL_C2_IPCC_IsActiveFlag_CHx>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HW_IPCC_Rx_Handler+0x6a>
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <HW_IPCC_Rx_Handler+0xb0>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	43db      	mvns	r3, r3
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8001988:	f000 f932 	bl	8001bf0 <HW_IPCC_THREAD_CliNotEvtHandler>
 800198c:	e01f      	b.n	80019ce <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800198e:	2101      	movs	r1, #1
 8001990:	4810      	ldr	r0, [pc, #64]	; (80019d4 <HW_IPCC_Rx_Handler+0xb0>)
 8001992:	f7ff ffb2 	bl	80018fa <LL_C2_IPCC_IsActiveFlag_CHx>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HW_IPCC_Rx_Handler+0x8a>
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HW_IPCC_Rx_Handler+0xb0>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 80019a8:	f000 f88a 	bl	8001ac0 <HW_IPCC_BLE_EvtHandler>
 80019ac:	e00f      	b.n	80019ce <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80019ae:	2108      	movs	r1, #8
 80019b0:	4808      	ldr	r0, [pc, #32]	; (80019d4 <HW_IPCC_Rx_Handler+0xb0>)
 80019b2:	f7ff ffa2 	bl	80018fa <LL_C2_IPCC_IsActiveFlag_CHx>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d009      	beq.n	80019d0 <HW_IPCC_Rx_Handler+0xac>
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HW_IPCC_Rx_Handler+0xb0>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 80019ca:	f000 f95d 	bl	8001c88 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
}
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	58000c00 	.word	0x58000c00

080019d8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80019dc:	2102      	movs	r1, #2
 80019de:	4822      	ldr	r0, [pc, #136]	; (8001a68 <HW_IPCC_Tx_Handler+0x90>)
 80019e0:	f7ff ff76 	bl	80018d0 <LL_C1_IPCC_IsActiveFlag_CHx>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HW_IPCC_Tx_Handler+0x26>
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HW_IPCC_Tx_Handler+0x90>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80019f8:	f000 f892 	bl	8001b20 <HW_IPCC_SYS_CmdEvtHandler>
 80019fc:	e031      	b.n	8001a62 <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 80019fe:	2104      	movs	r1, #4
 8001a00:	4819      	ldr	r0, [pc, #100]	; (8001a68 <HW_IPCC_Tx_Handler+0x90>)
 8001a02:	f7ff ff65 	bl	80018d0 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HW_IPCC_Tx_Handler+0x48>
 8001a0c:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HW_IPCC_Tx_Handler+0x90>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8001a1a:	f000 f8d1 	bl	8001bc0 <HW_IPCC_OT_CmdEvtHandler>
 8001a1e:	e020      	b.n	8001a62 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001a20:	2108      	movs	r1, #8
 8001a22:	4811      	ldr	r0, [pc, #68]	; (8001a68 <HW_IPCC_Tx_Handler+0x90>)
 8001a24:	f7ff ff54 	bl	80018d0 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HW_IPCC_Tx_Handler+0x6a>
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HW_IPCC_Tx_Handler+0x90>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001a3c:	f000 f906 	bl	8001c4c <HW_IPCC_MM_FreeBufHandler>
 8001a40:	e00f      	b.n	8001a62 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001a42:	2120      	movs	r1, #32
 8001a44:	4808      	ldr	r0, [pc, #32]	; (8001a68 <HW_IPCC_Tx_Handler+0x90>)
 8001a46:	f7ff ff43 	bl	80018d0 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HW_IPCC_Tx_Handler+0x8c>
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HW_IPCC_Tx_Handler+0x90>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001a5e:	f000 f83b 	bl	8001ad8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
}
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	58000c00 	.word	0x58000c00

08001a6c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001a70:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a74:	f7ff fe8b 	bl	800178e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001a78:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a7c:	f7ff fe5c 	bl	8001738 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001a80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a84:	f7ff fe44 	bl	8001710 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001a88:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001a8a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001a8c:	f7ff fe30 	bl	80016f0 <LL_PWR_EnableBootC2>

  return;
 8001a90:	bf00      	nop
}
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001a98:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a9c:	f7ff fe5e 	bl	800175c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001aa0:	4806      	ldr	r0, [pc, #24]	; (8001abc <HW_IPCC_Init+0x28>)
 8001aa2:	f7ff fea0 	bl	80017e6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <HW_IPCC_Init+0x28>)
 8001aa8:	f7ff fe8d 	bl	80017c6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001aac:	202c      	movs	r0, #44	; 0x2c
 8001aae:	f002 fd26 	bl	80044fe <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001ab2:	202d      	movs	r0, #45	; 0x2d
 8001ab4:	f002 fd23 	bl	80044fe <HAL_NVIC_EnableIRQ>

  return;
 8001ab8:	bf00      	nop
}
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	58000c00 	.word	0x58000c00

08001ac0 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001ac4:	f00b ff52 	bl	800d96c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001acc:	f7ff fee3 	bl	8001896 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001ad0:	bf00      	nop
}
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	58000c00 	.word	0x58000c00

08001ad8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001adc:	2120      	movs	r1, #32
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001ae0:	f7ff fea4 	bl	800182c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001ae4:	f00b ff72 	bl	800d9cc <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001ae8:	bf00      	nop
}
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	58000c00 	.word	0x58000c00

08001af0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001af4:	2102      	movs	r1, #2
 8001af6:	4802      	ldr	r0, [pc, #8]	; (8001b00 <HW_IPCC_SYS_Init+0x10>)
 8001af8:	f7ff feaa 	bl	8001850 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001afc:	bf00      	nop
}
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	58000c00 	.word	0x58000c00

08001b04 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4804      	ldr	r0, [pc, #16]	; (8001b1c <HW_IPCC_SYS_SendCmd+0x18>)
 8001b0c:	f7ff fed1 	bl	80018b2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001b10:	2102      	movs	r1, #2
 8001b12:	4802      	ldr	r0, [pc, #8]	; (8001b1c <HW_IPCC_SYS_SendCmd+0x18>)
 8001b14:	f7ff fe77 	bl	8001806 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001b18:	bf00      	nop
}
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	58000c00 	.word	0x58000c00

08001b20 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001b24:	2102      	movs	r1, #2
 8001b26:	4803      	ldr	r0, [pc, #12]	; (8001b34 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001b28:	f7ff fe80 	bl	800182c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001b2c:	f00b ff9e 	bl	800da6c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001b30:	bf00      	nop
}
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	58000c00 	.word	0x58000c00

08001b38 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001b3c:	f00b ffac 	bl	800da98 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001b40:	2102      	movs	r1, #2
 8001b42:	4802      	ldr	r0, [pc, #8]	; (8001b4c <HW_IPCC_SYS_EvtHandler+0x14>)
 8001b44:	f7ff fea7 	bl	8001896 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001b48:	bf00      	nop
}
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	58000c00 	.word	0x58000c00

08001b50 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001b54:	2104      	movs	r1, #4
 8001b56:	4804      	ldr	r0, [pc, #16]	; (8001b68 <HW_IPCC_THREAD_Init+0x18>)
 8001b58:	f7ff fe7a 	bl	8001850 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001b5c:	2110      	movs	r1, #16
 8001b5e:	4802      	ldr	r0, [pc, #8]	; (8001b68 <HW_IPCC_THREAD_Init+0x18>)
 8001b60:	f7ff fe76 	bl	8001850 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001b64:	bf00      	nop
}
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	58000c00 	.word	0x58000c00

08001b6c <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001b70:	2104      	movs	r1, #4
 8001b72:	4804      	ldr	r0, [pc, #16]	; (8001b84 <HW_IPCC_OT_SendCmd+0x18>)
 8001b74:	f7ff fe9d 	bl	80018b2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001b78:	2104      	movs	r1, #4
 8001b7a:	4802      	ldr	r0, [pc, #8]	; (8001b84 <HW_IPCC_OT_SendCmd+0x18>)
 8001b7c:	f7ff fe43 	bl	8001806 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001b80:	bf00      	nop
}
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	58000c00 	.word	0x58000c00

08001b88 <HW_IPCC_THREAD_SendAck>:

  return;
}

void HW_IPCC_THREAD_SendAck( void )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <HW_IPCC_THREAD_SendAck+0x18>)
 8001b90:	f7ff fe81 	bl	8001896 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001b94:	2104      	movs	r1, #4
 8001b96:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <HW_IPCC_THREAD_SendAck+0x18>)
 8001b98:	f7ff fe5a 	bl	8001850 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001b9c:	bf00      	nop
}
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	58000c00 	.word	0x58000c00

08001ba4 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001ba8:	2110      	movs	r1, #16
 8001baa:	4804      	ldr	r0, [pc, #16]	; (8001bbc <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001bac:	f7ff fe73 	bl	8001896 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001bb0:	2110      	movs	r1, #16
 8001bb2:	4802      	ldr	r0, [pc, #8]	; (8001bbc <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001bb4:	f7ff fe4c 	bl	8001850 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001bb8:	bf00      	nop
}
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	58000c00 	.word	0x58000c00

08001bc0 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8001bc8:	f7ff fe30 	bl	800182c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8001bcc:	f00b ffd0 	bl	800db70 <HW_IPCC_OT_CmdEvtNot>

  return;
 8001bd0:	bf00      	nop
}
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	58000c00 	.word	0x58000c00

08001bd8 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001bdc:	2104      	movs	r1, #4
 8001bde:	4803      	ldr	r0, [pc, #12]	; (8001bec <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8001be0:	f7ff fe48 	bl	8001874 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8001be4:	f00b ffd0 	bl	800db88 <HW_IPCC_THREAD_EvtNot>

  return;
 8001be8:	bf00      	nop
}
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	58000c00 	.word	0x58000c00

08001bf0 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	4803      	ldr	r0, [pc, #12]	; (8001c04 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8001bf8:	f7ff fe3c 	bl	8001874 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8001bfc:	f00b ffd0 	bl	800dba0 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8001c00:	bf00      	nop
}
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	58000c00 	.word	0x58000c00

08001c08 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001c10:	2108      	movs	r1, #8
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001c14:	f7ff fe5c 	bl	80018d0 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001c24:	2108      	movs	r1, #8
 8001c26:	4807      	ldr	r0, [pc, #28]	; (8001c44 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001c28:	f7ff fded 	bl	8001806 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001c2c:	e006      	b.n	8001c3c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001c32:	2108      	movs	r1, #8
 8001c34:	4803      	ldr	r0, [pc, #12]	; (8001c44 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001c36:	f7ff fe3c 	bl	80018b2 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001c3a:	bf00      	nop
}
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	58000c00 	.word	0x58000c00
 8001c48:	200000cc 	.word	0x200000cc

08001c4c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001c50:	2108      	movs	r1, #8
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001c54:	f7ff fdea 	bl	800182c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001c5e:	2108      	movs	r1, #8
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001c62:	f7ff fe26 	bl	80018b2 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001c66:	bf00      	nop
}
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	58000c00 	.word	0x58000c00
 8001c70:	200000cc 	.word	0x200000cc

08001c74 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4802      	ldr	r0, [pc, #8]	; (8001c84 <HW_IPCC_TRACES_Init+0x10>)
 8001c7c:	f7ff fde8 	bl	8001850 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001c80:	bf00      	nop
}
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	58000c00 	.word	0x58000c00

08001c88 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001c8c:	f00c f81a 	bl	800dcc4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001c90:	2108      	movs	r1, #8
 8001c92:	4802      	ldr	r0, [pc, #8]	; (8001c9c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001c94:	f7ff fdff 	bl	8001896 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001c98:	bf00      	nop
}
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	58000c00 	.word	0x58000c00

08001ca0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <LL_C2_PWR_SetPowerMode+0x28>)
 8001caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cae:	f023 0207 	bic.w	r2, r3, #7
 8001cb2:	4905      	ldr	r1, [pc, #20]	; (8001cc8 <LL_C2_PWR_SetPowerMode+0x28>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	58000400 	.word	0x58000400

08001ccc <LL_EXTI_EnableIT_32_63>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <LL_EXTI_EnableIT_32_63+0x24>)
 8001cd6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001cda:	4905      	ldr	r1, [pc, #20]	; (8001cf0 <LL_EXTI_EnableIT_32_63+0x24>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	58000800 	.word	0x58000800

08001cf4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001d02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d0e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	cafecafe 	.word	0xcafecafe

08001d30 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001db0:	d101      	bne.n	8001db6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dd6:	d101      	bne.n	8001ddc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_AHB2_GRP1_EnableClock>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_AHB2_GRP1_DisableClock>:
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8001e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e30:	4013      	ands	r3, r2
 8001e32:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_AHB3_GRP1_EnableClock>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4013      	ands	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e64:	68fb      	ldr	r3, [r7, #12]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	605a      	str	r2, [r3, #4]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	605a      	str	r2, [r3, #4]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_C2_IPCC_DisableTransmitChannel>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	615a      	str	r2, [r3, #20]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_C2_IPCC_DisableReceiveChannel>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	615a      	str	r2, [r3, #20]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_C1_IPCC_ClearFlag_CHx>:
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	609a      	str	r2, [r3, #8]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_C2_IPCC_ClearFlag_CHx>:
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	619a      	str	r2, [r3, #24]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	22ff      	movs	r2, #255	; 0xff
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	22ca      	movs	r2, #202	; 0xca
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2253      	movs	r2, #83	; 0x53
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 0207 	bic.w	r2, r3, #7
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	609a      	str	r2, [r3, #8]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <MX_APPE_Config+0x18>)
 8001f9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fa2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001fa4:	f000 f868 	bl	8002078 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001fa8:	f000 f8a8 	bl	80020fc <Config_HSE>

  return;
 8001fac:	bf00      	nop
}
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	58004000 	.word	0x58004000

08001fb4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001fb8:	f000 f8b4 	bl	8002124 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001fbc:	f000 f8cc 	bl	8002158 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001fc0:	490a      	ldr	r1, [pc, #40]	; (8001fec <MX_APPE_Init+0x38>)
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f000 ff86 	bl	8002ed4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8001fc8:	f000 f820 	bl	800200c <Init_Debug>

  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f00b ff22 	bl	800de18 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f00b ff4e 	bl	800de78 <UTIL_LPM_SetOffMode>
  Led_Init();
 8001fdc:	f000 f99b 	bl	8002316 <Led_Init>
  Button_Init();
 8001fe0:	f000 f9a0 	bl	8002324 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001fe4:	f000 f8c6 	bl	8002174 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001fe8:	bf00      	nop
}
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200003b8 	.word	0x200003b8

08001ff0 <Init_Smps>:

void Init_Smps(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001ff4:	bf00      	nop
}
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <Init_Exti>:

void Init_Exti(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8002002:	2050      	movs	r0, #80	; 0x50
 8002004:	f7ff fe62 	bl	8001ccc <LL_EXTI_EnableIT_32_63>

  return;
 8002008:	bf00      	nop
}
 800200a:	bd80      	pop	{r7, pc}

0800200c <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else

  GPIO_InitTypeDef gpio_config = {0};
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 8002024:	2303      	movs	r3, #3
 8002026:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 8002028:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800202c:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2001      	movs	r0, #1
 8002030:	f7ff feda 	bl	8001de8 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	4619      	mov	r1, r3
 8002038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203c:	f002 fcc6 	bl	80049cc <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002040:	2001      	movs	r0, #1
 8002042:	f7ff feea 	bl	8001e1a <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 8002046:	2318      	movs	r3, #24
 8002048:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	2002      	movs	r0, #2
 800204c:	f7ff fecc 	bl	8001de8 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4619      	mov	r1, r3
 8002054:	4807      	ldr	r0, [pc, #28]	; (8002074 <Init_Debug+0x68>)
 8002056:	f002 fcb9 	bl	80049cc <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800205a:	2002      	movs	r0, #2
 800205c:	f7ff fedd 	bl	8001e1a <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 8002060:	f002 f8f2 	bl	8004248 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002064:	f002 f8f6 	bl	8004254 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002068:	f002 f8fa 	bl	8004260 <HAL_DBGMCU_DisableDBGStandbyMode>

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 800206c:	bf00      	nop
}
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	48000400 	.word	0x48000400

08002078 <Reset_Device>:
static void Reset_Device(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 800207c:	f000 f804 	bl	8002088 <Reset_BackupDomain>

  Reset_IPCC();
 8002080:	f000 f81a 	bl	80020b8 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8002084:	bf00      	nop
}
 8002086:	bd80      	pop	{r7, pc}

08002088 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800208c:	f7ff fe86 	bl	8001d9c <LL_RCC_IsActiveFlag_PINRST>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00d      	beq.n	80020b2 <Reset_BackupDomain+0x2a>
 8002096:	f7ff fe94 	bl	8001dc2 <LL_RCC_IsActiveFlag_SFTRST>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d108      	bne.n	80020b2 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80020a0:	f002 fee0 	bl	8004e64 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80020a4:	f002 fede 	bl	8004e64 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80020a8:	f7ff fe56 	bl	8001d58 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80020ac:	f7ff fe65 	bl	8001d7a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
}
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80020bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80020c0:	f7ff febe 	bl	8001e40 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80020c4:	213f      	movs	r1, #63	; 0x3f
 80020c6:	480c      	ldr	r0, [pc, #48]	; (80020f8 <Reset_IPCC+0x40>)
 80020c8:	f7ff ff19 	bl	8001efe <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80020cc:	213f      	movs	r1, #63	; 0x3f
 80020ce:	480a      	ldr	r0, [pc, #40]	; (80020f8 <Reset_IPCC+0x40>)
 80020d0:	f7ff ff23 	bl	8001f1a <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80020d4:	213f      	movs	r1, #63	; 0x3f
 80020d6:	4808      	ldr	r0, [pc, #32]	; (80020f8 <Reset_IPCC+0x40>)
 80020d8:	f7ff fecb 	bl	8001e72 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80020dc:	213f      	movs	r1, #63	; 0x3f
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <Reset_IPCC+0x40>)
 80020e0:	f7ff feea 	bl	8001eb8 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80020e4:	213f      	movs	r1, #63	; 0x3f
 80020e6:	4804      	ldr	r0, [pc, #16]	; (80020f8 <Reset_IPCC+0x40>)
 80020e8:	f7ff fed5 	bl	8001e96 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80020ec:	213f      	movs	r1, #63	; 0x3f
 80020ee:	4802      	ldr	r0, [pc, #8]	; (80020f8 <Reset_IPCC+0x40>)
 80020f0:	f7ff fef4 	bl	8001edc <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80020f4:	bf00      	nop
}
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	58000c00 	.word	0x58000c00

080020fc <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002102:	2000      	movs	r0, #0
 8002104:	f00b fe4e 	bl	800dda4 <OTP_Read>
 8002108:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	799b      	ldrb	r3, [r3, #6]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fded 	bl	8001cf4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800211a:	bf00      	nop
 800211c:	bf00      	nop
}
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <System_Init>:

static void System_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  Init_Smps();
 8002128:	f7ff ff62 	bl	8001ff0 <Init_Smps>

  Init_Exti();
 800212c:	f7ff ff67 	bl	8001ffe <Init_Exti>

  Init_Rtc();
 8002130:	f000 f802 	bl	8002138 <Init_Rtc>

  return;
 8002134:	bf00      	nop
}
 8002136:	bd80      	pop	{r7, pc}

08002138 <Init_Rtc>:

static void Init_Rtc(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800213c:	4805      	ldr	r0, [pc, #20]	; (8002154 <Init_Rtc+0x1c>)
 800213e:	f7ff ff07 	bl	8001f50 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002142:	2100      	movs	r1, #0
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <Init_Rtc+0x1c>)
 8002146:	f7ff ff13 	bl	8001f70 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800214a:	4802      	ldr	r0, [pc, #8]	; (8002154 <Init_Rtc+0x1c>)
 800214c:	f7ff fef3 	bl	8001f36 <LL_RTC_EnableWriteProtection>

  return;
 8002150:	bf00      	nop
}
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40002800 	.word	0x40002800

08002158 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800215c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002160:	f7ff fde6 	bl	8001d30 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002164:	f00b fe46 	bl	800ddf4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002168:	2004      	movs	r0, #4
 800216a:	f7ff fd99 	bl	8001ca0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800216e:	bf00      	nop
}
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800217a:	f00b fbbd 	bl	800d8f8 <TL_Init>

  MtxShciId = osMutexNew(NULL);
 800217e:	2000      	movs	r0, #0
 8002180:	f006 f93f 	bl	8008402 <osMutexNew>
 8002184:	4603      	mov	r3, r0
 8002186:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <appe_Tl_Init+0x70>)
 8002188:	6013      	str	r3, [r2, #0]
  SemShciId = osSemaphoreNew(1, 0, NULL); /*< Create the semaphore and make it busy at initialization */
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2001      	movs	r0, #1
 8002190:	f006 fa45 	bl	800861e <osSemaphoreNew>
 8002194:	4603      	mov	r3, r0
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <appe_Tl_Init+0x74>)
 8002198:	6013      	str	r3, [r2, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800219a:	4a14      	ldr	r2, [pc, #80]	; (80021ec <appe_Tl_Init+0x78>)
 800219c:	2100      	movs	r1, #0
 800219e:	4814      	ldr	r0, [pc, #80]	; (80021f0 <appe_Tl_Init+0x7c>)
 80021a0:	f005 ffce 	bl	8008140 <osThreadNew>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <appe_Tl_Init+0x80>)
 80021a8:	6013      	str	r3, [r2, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <appe_Tl_Init+0x84>)
 80021ac:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <appe_Tl_Init+0x88>)
 80021b0:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80021b2:	463b      	mov	r3, r7
 80021b4:	4619      	mov	r1, r3
 80021b6:	4812      	ldr	r0, [pc, #72]	; (8002200 <appe_Tl_Init+0x8c>)
 80021b8:	f00b f99a 	bl	800d4f0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <appe_Tl_Init+0x90>)
 80021c2:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80021c4:	4b10      	ldr	r3, [pc, #64]	; (8002208 <appe_Tl_Init+0x94>)
 80021c6:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80021c8:	f240 533c 	movw	r3, #1340	; 0x53c
 80021cc:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	4618      	mov	r0, r3
 80021d4:	f00b fcf0 	bl	800dbb8 <TL_MM_Init>

  TL_Enable();
 80021d8:	f00b fb87 	bl	800d8ea <TL_Enable>

  return;
 80021dc:	bf00      	nop
}
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200000d4 	.word	0x200000d4
 80021e8:	200000d8 	.word	0x200000d8
 80021ec:	0800e788 	.word	0x0800e788
 80021f0:	080022fd 	.word	0x080022fd
 80021f4:	200000dc 	.word	0x200000dc
 80021f8:	20030a54 	.word	0x20030a54
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	0800224d 	.word	0x0800224d
 8002204:	20030b60 	.word	0x20030b60
 8002208:	20030518 	.word	0x20030518

0800220c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <APPE_SysStatusNot+0x16>
 800221c:	2b01      	cmp	r3, #1
 800221e:	d008      	beq.n	8002232 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease(MtxShciId);
      break;

    default:
      break;
 8002220:	e00d      	b.n	800223e <APPE_SysStatusNot+0x32>
      osMutexAcquire(MtxShciId, osWaitForever);
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <APPE_SysStatusNot+0x3c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f04f 31ff 	mov.w	r1, #4294967295
 800222a:	4618      	mov	r0, r3
 800222c:	f006 f96f 	bl	800850e <osMutexAcquire>
      break;
 8002230:	e005      	b.n	800223e <APPE_SysStatusNot+0x32>
      osMutexRelease(MtxShciId);
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <APPE_SysStatusNot+0x3c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f006 f9b4 	bl	80085a4 <osMutexRelease>
      break;
 800223c:	bf00      	nop
  }
  return;
 800223e:	bf00      	nop
}
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200000d4 	.word	0x200000d4

0800224c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	330b      	adds	r3, #11
 800225a:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8002266:	d004      	beq.n	8002272 <APPE_SysUserEvtRx+0x26>
 8002268:	f249 2201 	movw	r2, #37377	; 0x9201
 800226c:	4293      	cmp	r3, r2
 800226e:	d003      	beq.n	8002278 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8002270:	e008      	b.n	8002284 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8002272:	f000 f833 	bl	80022dc <APPE_SysEvtReadyProcessing>
         break;
 8002276:	e005      	b.n	8002284 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	789b      	ldrb	r3, [r3, #2]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f805 	bl	800228c <APPE_SysEvtError>
         break;
 8002282:	bf00      	nop
  }
  return;
 8002284:	bf00      	nop
}
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2b7d      	cmp	r3, #125	; 0x7d
 800229a:	d002      	beq.n	80022a2 <APPE_SysEvtError+0x16>
 800229c:	2b7e      	cmp	r3, #126	; 0x7e
 800229e:	d006      	beq.n	80022ae <APPE_SysEvtError+0x22>
 80022a0:	e00b      	b.n	80022ba <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <APPE_SysEvtError+0x44>)
 80022a4:	2101      	movs	r1, #1
 80022a6:	2000      	movs	r0, #0
 80022a8:	f001 fe9e 	bl	8003fe8 <logApplication>
       break;
 80022ac:	e00c      	b.n	80022c8 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <APPE_SysEvtError+0x48>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	2000      	movs	r0, #0
 80022b4:	f001 fe98 	bl	8003fe8 <logApplication>
       break;
 80022b8:	e006      	b.n	80022c8 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <APPE_SysEvtError+0x4c>)
 80022be:	2101      	movs	r1, #1
 80022c0:	2000      	movs	r0, #0
 80022c2:	f001 fe91 	bl	8003fe8 <logApplication>
       break;
 80022c6:	bf00      	nop
  }
  return;
 80022c8:	bf00      	nop
}
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	0800e668 	.word	0x0800e668
 80022d4:	0800e68c 	.word	0x0800e68c
 80022d8:	0800e6ac 	.word	0x0800e6ac

080022dc <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 80022e0:	f00b fcde 	bl	800dca0 <TL_TRACES_Init>

  APP_THREAD_Init();
 80022e4:	f7fe fc2a 	bl	8000b3c <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80022e8:	2100      	movs	r1, #0
 80022ea:	2001      	movs	r0, #1
 80022ec:	f00b fd94 	bl	800de18 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80022f0:	2100      	movs	r1, #0
 80022f2:	2001      	movs	r0, #1
 80022f4:	f00b fdc0 	bl	800de78 <UTIL_LPM_SetOffMode>
  return;
 80022f8:	bf00      	nop
}
 80022fa:	bd80      	pop	{r7, pc}

080022fc <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002304:	f04f 32ff 	mov.w	r2, #4294967295
 8002308:	2100      	movs	r1, #0
 800230a:	2001      	movs	r0, #1
 800230c:	f005 fff8 	bl	8008300 <osThreadFlagsWait>
     shci_user_evt_proc();
 8002310:	f00b f90a 	bl	800d528 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002314:	e7f6      	b.n	8002304 <ShciUserEvtProcess+0x8>

08002316 <Led_Init>:
    }
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  
  BSP_LED_Init(LED_RED);

#endif
  
  return;
 800231a:	bf00      	nop
}
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <Button_Init>:

static void Button_Init( void )
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
#endif
  
  return;
 8002328:	bf00      	nop
}
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <shci_notify_asynch_evt>:
    __WFI();
  }
}

void shci_notify_asynch_evt(void* pdata)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <shci_notify_asynch_evt+0x1c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2101      	movs	r1, #1
 8002342:	4618      	mov	r0, r3
 8002344:	f005 ff8e 	bl	8008264 <osThreadFlagsSet>
  return;
 8002348:	bf00      	nop
}
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200000dc 	.word	0x200000dc

08002354 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease(SemShciId);
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <shci_cmd_resp_release+0x1c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f006 fa37 	bl	80087d4 <osSemaphoreRelease>
  return;
 8002366:	bf00      	nop
}
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200000d8 	.word	0x200000d8

08002374 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire(SemShciId, osWaitForever);
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <shci_cmd_resp_wait+0x20>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	4618      	mov	r0, r3
 8002386:	f006 f9d3 	bl	8008730 <osSemaphoreAcquire>
  return;
 800238a:	bf00      	nop
}
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200000d8 	.word	0x200000d8

08002398 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f00b fc45 	bl	800dc30 <TL_MM_EvtDone>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <vPortSuppressTicksAndSleep+0x94>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a21      	ldr	r2, [pc, #132]	; (8002444 <vPortSuppressTicksAndSleep+0x94>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c4:	b672      	cpsid	i
}
 80023c6:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023c8:	f3bf 8f4f 	dsb	sy
}
 80023cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023ce:	f3bf 8f6f 	isb	sy
}
 80023d2:	bf00      	nop
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80023d4:	f008 fdb6 	bl	800af44 <eTaskConfirmSleepModeStatus>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d107      	bne.n	80023ee <vPortSuppressTicksAndSleep+0x3e>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <vPortSuppressTicksAndSleep+0x94>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a18      	ldr	r2, [pc, #96]	; (8002444 <vPortSuppressTicksAndSleep+0x94>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023ea:	b662      	cpsie	i
}
 80023ec:	e025      	b.n	800243a <vPortSuppressTicksAndSleep+0x8a>
                call above. */
    __enable_irq();
  }
  else
  {
    if (xExpectedIdleTime != (~0))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d005      	beq.n	8002402 <vPortSuppressTicksAndSleep+0x52>
    {
      /* Remove one tick to wake up before the event occurs */
      xExpectedIdleTime--;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
      /* Start the low power timer */
      LpTimerStart( xExpectedIdleTime );
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f86b 	bl	80024d8 <LpTimerStart>
    }

    /* Enter low power mode */
    LpEnter( );
 8002402:	f000 f8bd 	bl	8002580 <LpEnter>

    if (xExpectedIdleTime != (~0))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d005      	beq.n	800241a <vPortSuppressTicksAndSleep+0x6a>
      /**
       * Get the number of FreeRTOS ticks that has been suppressed
       * In the current implementation, this shall be kept in critical section
       * so that the timer server return the correct elapsed time
       */
      ulCompleteTickPeriods = LpGetElapsedTime( );
 800240e:	f000 f8bf 	bl	8002590 <LpGetElapsedTime>
 8002412:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f008 fadb 	bl	800a9d0 <vTaskStepTick>
    }

    /* Restart SysTick */
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <vPortSuppressTicksAndSleep+0x98>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <vPortSuppressTicksAndSleep+0x94>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <vPortSuppressTicksAndSleep+0x94>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <vPortSuppressTicksAndSleep+0x9c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <vPortSuppressTicksAndSleep+0xa0>)
 8002432:	3b01      	subs	r3, #1
 8002434:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002436:	b662      	cpsie	i
}
 8002438:	bf00      	nop

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010
 8002448:	e000e018 	.word	0xe000e018
 800244c:	200000e0 	.word	0x200000e0
 8002450:	e000e014 	.word	0xe000e014

08002454 <vPortSetupTimerInterrupt>:
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
#if ( CFG_LPM_SUPPORTED != 0)
void vPortSetupTimerInterrupt( void )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  LpTimerInit( );
 8002458:	f000 f828 	bl	80024ac <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <vPortSetupTimerInterrupt+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <vPortSetupTimerInterrupt+0x44>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	099b      	lsrs	r3, r3, #6
 8002468:	4a0c      	ldr	r2, [pc, #48]	; (800249c <vPortSetupTimerInterrupt+0x48>)
 800246a:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <vPortSetupTimerInterrupt+0x4c>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <vPortSetupTimerInterrupt+0x50>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <vPortSetupTimerInterrupt+0x40>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a06      	ldr	r2, [pc, #24]	; (8002498 <vPortSetupTimerInterrupt+0x44>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <vPortSetupTimerInterrupt+0x54>)
 8002486:	3b01      	subs	r3, #1
 8002488:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <vPortSetupTimerInterrupt+0x4c>)
 800248c:	2207      	movs	r2, #7
 800248e:	601a      	str	r2, [r3, #0]
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000024 	.word	0x20000024
 8002498:	10624dd3 	.word	0x10624dd3
 800249c:	200000e0 	.word	0x200000e0
 80024a0:	e000e010 	.word	0xe000e010
 80024a4:	e000e018 	.word	0xe000e018
 80024a8:	e000e014 	.word	0xe000e014

080024ac <LpTimerInit>:
 * @param  None
 * @retval None
 */
#if ( CFG_LPM_SUPPORTED != 0)
static void LpTimerInit( void )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <LpTimerInit+0x14>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	4903      	ldr	r1, [pc, #12]	; (80024c4 <LpTimerInit+0x18>)
 80024b6:	2000      	movs	r0, #0
 80024b8:	f000 fde6 	bl	8003088 <HW_TS_Create>

  return;
 80024bc:	bf00      	nop
}
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	080024c9 	.word	0x080024c9
 80024c4:	200000e8 	.word	0x200000e8

080024c8 <LpTimerCb>:
 * @param  None
 * @retval None
 */
#if ( CFG_LPM_SUPPORTED != 0)
static void LpTimerCb( void )
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 80024cc:	bf00      	nop
}
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <LpTimerStart>:
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
#if ( CFG_LPM_SUPPORTED != 0)
static void LpTimerStart( uint32_t time_to_sleep )
{
 80024d8:	b5b0      	push	{r4, r5, r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint64_t time;

  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if (time_to_sleep > (ULLONG_MAX / 1e12)) /* Prevent overflow in else statement */
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4823      	ldr	r0, [pc, #140]	; (8002570 <LpTimerStart+0x98>)
 80024e4:	4281      	cmp	r1, r0
 80024e6:	d905      	bls.n	80024f4 <LpTimerStart+0x1c>
  {
    time = 0xFFFF0000; /* Maximum value equal to 24 days */
 80024e8:	4a22      	ldr	r2, [pc, #136]	; (8002574 <LpTimerStart+0x9c>)
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80024f2:	e026      	b.n	8002542 <LpTimerStart+0x6a>
  }
  else
  {
    /* The result always fits in uint32_t and is always less than 0xFFFF0000 */
    time = time_to_sleep * 1000000000000ULL;
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	2000      	movs	r0, #0
 80024f8:	460c      	mov	r4, r1
 80024fa:	4605      	mov	r5, r0
 80024fc:	491e      	ldr	r1, [pc, #120]	; (8002578 <LpTimerStart+0xa0>)
 80024fe:	fb01 f005 	mul.w	r0, r1, r5
 8002502:	21e8      	movs	r1, #232	; 0xe8
 8002504:	fb04 f101 	mul.w	r1, r4, r1
 8002508:	4401      	add	r1, r0
 800250a:	481b      	ldr	r0, [pc, #108]	; (8002578 <LpTimerStart+0xa0>)
 800250c:	fba4 2300 	umull	r2, r3, r4, r0
 8002510:	4419      	add	r1, r3
 8002512:	460b      	mov	r3, r1
 8002514:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002518:	e9c7 2302 	strd	r2, r3, [r7, #8]
    time = (uint64_t)( time /  ( CFG_TS_TICK_VAL_PS * configTICK_RATE_HZ ));
 800251c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002520:	f7fd ffbe 	bl	80004a0 <__aeabi_ul2d>
 8002524:	a310      	add	r3, pc, #64	; (adr r3, 8002568 <LpTimerStart+0x90>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f919 	bl	8000760 <__aeabi_ddiv>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f7fe fa83 	bl	8000a40 <__aeabi_d2ulz>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, (uint32_t)time);
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <LpTimerStart+0xa4>)
 8002544:	791b      	ldrb	r3, [r3, #4]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fe9a 	bl	8003284 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 8002550:	f000 ff1e 	bl	8003390 <HW_TS_RTC_ReadLeftTicksToCount>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <LpTimerStart+0xa4>)
 800255a:	601a      	str	r2, [r3, #0]

  return;
 800255c:	bf00      	nop
}
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bdb0      	pop	{r4, r5, r7, pc}
 8002564:	f3af 8000 	nop.w
 8002568:	26b10000 	.word	0x26b10000
 800256c:	425c6bf5 	.word	0x425c6bf5
 8002570:	01197998 	.word	0x01197998
 8002574:	ffff0000 	.word	0xffff0000
 8002578:	d4a51000 	.word	0xd4a51000
 800257c:	200000e4 	.word	0x200000e4

08002580 <LpEnter>:
 * @param  None
 * @retval None
 */
#if ( CFG_LPM_SUPPORTED != 0)
static void LpEnter( void )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8002584:	f00b fca8 	bl	800ded8 <UTIL_LPM_EnterLowPower>
#endif
  return;
 8002588:	bf00      	nop
}
 800258a:	bd80      	pop	{r7, pc}
 800258c:	0000      	movs	r0, r0
	...

08002590 <LpGetElapsedTime>:
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
#if ( CFG_LPM_SUPPORTED != 0)
static uint32_t LpGetElapsedTime( void )
{
 8002590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
  uint64_t val_ticks, time_ps;
  uint32_t LpTimeLeftOnExit;

  LpTimeLeftOnExit = HW_TS_RTC_ReadLeftTicksToCount();
 8002598:	f000 fefa 	bl	8003390 <HW_TS_RTC_ReadLeftTicksToCount>
 800259c:	4603      	mov	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]
  /* This cannot overflow. Max result is ~ 1.6e13 */
  time_ps = (uint64_t)((CFG_TS_TICK_VAL_PS) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - LpTimeLeftOnExit));
 80025a0:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <LpGetElapsedTime+0x118>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ff35 	bl	8000418 <__aeabi_ui2d>
 80025ae:	a338      	add	r3, pc, #224	; (adr r3, 8002690 <LpGetElapsedTime+0x100>)
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	f7fd ffaa 	bl	800050c <__aeabi_dmul>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f7fe fa3e 	bl	8000a40 <__aeabi_d2ulz>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	e9c7 2300 	strd	r2, r3, [r7]
   *    Advancing RTOS clock by 1 FreeRTOS tick doesn't hurt in this case.
   * b) vPortSuppressTicksAndSleep(xExpectedIdleTime) was called with xExpectedIdleTime = 2 which is minimum value defined by configEXPECTED_IDLE_TIME_BEFORE_SLEEP.
   *    The xExpectedIdleTime is decremented by one RTOS tick to wake-up in advance.
   *    Ex: RTOS tick is 1ms, the timer Server wakes the MCU in ~977 us. RTOS clock should be advanced by 1 ms.
   * */
  if(time_ps <= (1e12 / configTICK_RATE_HZ)) /* time_ps < RTOS tick */
 80025cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025d0:	f7fd ff66 	bl	80004a0 <__aeabi_ul2d>
 80025d4:	a330      	add	r3, pc, #192	; (adr r3, 8002698 <LpGetElapsedTime+0x108>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fe fa13 	bl	8000a04 <__aeabi_dcmple>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <LpGetElapsedTime+0x62>
  {
    val_ticks = 1;
 80025e4:	f04f 0201 	mov.w	r2, #1
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80025f0:	e041      	b.n	8002676 <LpGetElapsedTime+0xe6>
  }
  else
  {
    /* Convert pS time into OS ticks */
    val_ticks = time_ps * configTICK_RATE_HZ; /* This cannot overflow. Max result is ~ 1.6e16 */
 80025f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	f04f 0a00 	mov.w	sl, #0
 80025fe:	f04f 0b00 	mov.w	fp, #0
 8002602:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002606:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800260a:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800260e:	4652      	mov	r2, sl
 8002610:	465b      	mov	r3, fp
 8002612:	1a14      	subs	r4, r2, r0
 8002614:	eb63 0501 	sbc.w	r5, r3, r1
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	00ab      	lsls	r3, r5, #2
 8002622:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002626:	00a2      	lsls	r2, r4, #2
 8002628:	4614      	mov	r4, r2
 800262a:	461d      	mov	r5, r3
 800262c:	eb14 0800 	adds.w	r8, r4, r0
 8002630:	eb45 0901 	adc.w	r9, r5, r1
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002640:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002644:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002648:	4690      	mov	r8, r2
 800264a:	4699      	mov	r9, r3
 800264c:	e9c7 8904 	strd	r8, r9, [r7, #16]
    val_ticks = (uint64_t)(val_ticks / (1e12)); /* The result always fits in uint32_t */
 8002650:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002654:	f7fd ff24 	bl	80004a0 <__aeabi_ul2d>
 8002658:	a311      	add	r3, pc, #68	; (adr r3, 80026a0 <LpGetElapsedTime+0x110>)
 800265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265e:	f7fe f87f 	bl	8000760 <__aeabi_ddiv>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f7fe f9e9 	bl	8000a40 <__aeabi_d2ulz>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	e9c7 2304 	strd	r2, r3, [r7, #16]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <LpGetElapsedTime+0x118>)
 8002678:	791b      	ldrb	r3, [r3, #4]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fd7e 	bl	800317c <HW_TS_Stop>

  return (uint32_t)val_ticks;
 8002680:	693b      	ldr	r3, [r7, #16]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268c:	f3af 8000 	nop.w
 8002690:	a2800000 	.word	0xa2800000
 8002694:	41bd1a94 	.word	0x41bd1a94
 8002698:	00000000 	.word	0x00000000
 800269c:	41cdcd65 	.word	0x41cdcd65
 80026a0:	a2000000 	.word	0xa2000000
 80026a4:	426d1a94 	.word	0x426d1a94
 80026a8:	200000e4 	.word	0x200000e4

080026ac <LL_EXTI_EnableIT_0_31>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <LL_EXTI_EnableIT_0_31+0x24>)
 80026b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80026ba:	4905      	ldr	r1, [pc, #20]	; (80026d0 <LL_EXTI_EnableIT_0_31+0x24>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	58000800 	.word	0x58000800

080026d4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	58000800 	.word	0x58000800

080026f8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <ReadRtcSsrValue+0x3c>)
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	b29b      	uxth	r3, r3
 8002704:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <ReadRtcSsrValue+0x3c>)
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	b29b      	uxth	r3, r3
 800270c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800270e:	e005      	b.n	800271c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <ReadRtcSsrValue+0x3c>)
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	b29b      	uxth	r3, r3
 800271a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d1f5      	bne.n	8002710 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002724:	683b      	ldr	r3, [r7, #0]
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40002800 	.word	0x40002800

08002738 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	460a      	mov	r2, r1
 8002742:	71fb      	strb	r3, [r7, #7]
 8002744:	4613      	mov	r3, r2
 8002746:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002748:	79ba      	ldrb	r2, [r7, #6]
 800274a:	491d      	ldr	r1, [pc, #116]	; (80027c0 <LinkTimerAfter+0x88>)
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	3315      	adds	r3, #21
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b06      	cmp	r3, #6
 8002760:	d009      	beq.n	8002776 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	4916      	ldr	r1, [pc, #88]	; (80027c0 <LinkTimerAfter+0x88>)
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	3314      	adds	r3, #20
 8002772:	79fa      	ldrb	r2, [r7, #7]
 8002774:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002776:	79fa      	ldrb	r2, [r7, #7]
 8002778:	4911      	ldr	r1, [pc, #68]	; (80027c0 <LinkTimerAfter+0x88>)
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	3315      	adds	r3, #21
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	490c      	ldr	r1, [pc, #48]	; (80027c0 <LinkTimerAfter+0x88>)
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	3314      	adds	r3, #20
 800279a:	79ba      	ldrb	r2, [r7, #6]
 800279c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800279e:	79ba      	ldrb	r2, [r7, #6]
 80027a0:	4907      	ldr	r1, [pc, #28]	; (80027c0 <LinkTimerAfter+0x88>)
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	440b      	add	r3, r1
 80027ac:	3315      	adds	r3, #21
 80027ae:	79fa      	ldrb	r2, [r7, #7]
 80027b0:	701a      	strb	r2, [r3, #0]

  return;
 80027b2:	bf00      	nop
}
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	200000ec 	.word	0x200000ec

080027c4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	460a      	mov	r2, r1
 80027ce:	71fb      	strb	r3, [r7, #7]
 80027d0:	4613      	mov	r3, r2
 80027d2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <LinkTimerBefore+0xb8>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	79ba      	ldrb	r2, [r7, #6]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d032      	beq.n	8002846 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80027e0:	79ba      	ldrb	r2, [r7, #6]
 80027e2:	4927      	ldr	r1, [pc, #156]	; (8002880 <LinkTimerBefore+0xbc>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	3314      	adds	r3, #20
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	4922      	ldr	r1, [pc, #136]	; (8002880 <LinkTimerBefore+0xbc>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	440b      	add	r3, r1
 8002802:	3315      	adds	r3, #21
 8002804:	79fa      	ldrb	r2, [r7, #7]
 8002806:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002808:	79fa      	ldrb	r2, [r7, #7]
 800280a:	491d      	ldr	r1, [pc, #116]	; (8002880 <LinkTimerBefore+0xbc>)
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	3315      	adds	r3, #21
 8002818:	79ba      	ldrb	r2, [r7, #6]
 800281a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800281c:	79fa      	ldrb	r2, [r7, #7]
 800281e:	4918      	ldr	r1, [pc, #96]	; (8002880 <LinkTimerBefore+0xbc>)
 8002820:	4613      	mov	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	3314      	adds	r3, #20
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002830:	79ba      	ldrb	r2, [r7, #6]
 8002832:	4913      	ldr	r1, [pc, #76]	; (8002880 <LinkTimerBefore+0xbc>)
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	3314      	adds	r3, #20
 8002840:	79fa      	ldrb	r2, [r7, #7]
 8002842:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002844:	e014      	b.n	8002870 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002846:	79fa      	ldrb	r2, [r7, #7]
 8002848:	490d      	ldr	r1, [pc, #52]	; (8002880 <LinkTimerBefore+0xbc>)
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	3315      	adds	r3, #21
 8002856:	79ba      	ldrb	r2, [r7, #6]
 8002858:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800285a:	79ba      	ldrb	r2, [r7, #6]
 800285c:	4908      	ldr	r1, [pc, #32]	; (8002880 <LinkTimerBefore+0xbc>)
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	3314      	adds	r3, #20
 800286a:	79fa      	ldrb	r2, [r7, #7]
 800286c:	701a      	strb	r2, [r3, #0]
  return;
 800286e:	bf00      	nop
}
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	2000017c 	.word	0x2000017c
 8002880:	200000ec 	.word	0x200000ec

08002884 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800288e:	4b4e      	ldr	r3, [pc, #312]	; (80029c8 <linkTimer+0x144>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b06      	cmp	r3, #6
 8002896:	d118      	bne.n	80028ca <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002898:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <linkTimer+0x144>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <linkTimer+0x148>)
 80028a0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80028a2:	4a49      	ldr	r2, [pc, #292]	; (80029c8 <linkTimer+0x144>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80028a8:	79fa      	ldrb	r2, [r7, #7]
 80028aa:	4949      	ldr	r1, [pc, #292]	; (80029d0 <linkTimer+0x14c>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	3315      	adds	r3, #21
 80028b8:	2206      	movs	r2, #6
 80028ba:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80028bc:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <linkTimer+0x150>)
 80028be:	f04f 32ff 	mov.w	r2, #4294967295
 80028c2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	81fb      	strh	r3, [r7, #14]
 80028c8:	e078      	b.n	80029bc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80028ca:	f000 f909 	bl	8002ae0 <ReturnTimeElapsed>
 80028ce:	4603      	mov	r3, r0
 80028d0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80028d2:	79fa      	ldrb	r2, [r7, #7]
 80028d4:	493e      	ldr	r1, [pc, #248]	; (80029d0 <linkTimer+0x14c>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	3308      	adds	r3, #8
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	89fb      	ldrh	r3, [r7, #14]
 80028e6:	79fa      	ldrb	r2, [r7, #7]
 80028e8:	4419      	add	r1, r3
 80028ea:	4839      	ldr	r0, [pc, #228]	; (80029d0 <linkTimer+0x14c>)
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4403      	add	r3, r0
 80028f6:	3308      	adds	r3, #8
 80028f8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80028fa:	79fa      	ldrb	r2, [r7, #7]
 80028fc:	4934      	ldr	r1, [pc, #208]	; (80029d0 <linkTimer+0x14c>)
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	3308      	adds	r3, #8
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800290e:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <linkTimer+0x144>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	4a2e      	ldr	r2, [pc, #184]	; (80029d0 <linkTimer+0x14c>)
 8002918:	460b      	mov	r3, r1
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	440b      	add	r3, r1
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	3308      	adds	r3, #8
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	429a      	cmp	r2, r3
 800292a:	d337      	bcc.n	800299c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <linkTimer+0x144>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002932:	7b7a      	ldrb	r2, [r7, #13]
 8002934:	4926      	ldr	r1, [pc, #152]	; (80029d0 <linkTimer+0x14c>)
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	3315      	adds	r3, #21
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002946:	e013      	b.n	8002970 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002948:	7b7a      	ldrb	r2, [r7, #13]
 800294a:	4921      	ldr	r1, [pc, #132]	; (80029d0 <linkTimer+0x14c>)
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	440b      	add	r3, r1
 8002956:	3315      	adds	r3, #21
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800295c:	7b7a      	ldrb	r2, [r7, #13]
 800295e:	491c      	ldr	r1, [pc, #112]	; (80029d0 <linkTimer+0x14c>)
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	3315      	adds	r3, #21
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002970:	7b3b      	ldrb	r3, [r7, #12]
 8002972:	2b06      	cmp	r3, #6
 8002974:	d00b      	beq.n	800298e <linkTimer+0x10a>
 8002976:	7b3a      	ldrb	r2, [r7, #12]
 8002978:	4915      	ldr	r1, [pc, #84]	; (80029d0 <linkTimer+0x14c>)
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	3308      	adds	r3, #8
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	d2dc      	bcs.n	8002948 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800298e:	7b7a      	ldrb	r2, [r7, #13]
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fecf 	bl	8002738 <LinkTimerAfter>
 800299a:	e00f      	b.n	80029bc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <linkTimer+0x144>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff0c 	bl	80027c4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <linkTimer+0x144>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <linkTimer+0x148>)
 80029b4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80029b6:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <linkTimer+0x144>)
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80029bc:	89fb      	ldrh	r3, [r7, #14]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000017c 	.word	0x2000017c
 80029cc:	2000017d 	.word	0x2000017d
 80029d0:	200000ec 	.word	0x200000ec
 80029d4:	20000180 	.word	0x20000180

080029d8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	460a      	mov	r2, r1
 80029e2:	71fb      	strb	r3, [r7, #7]
 80029e4:	4613      	mov	r3, r2
 80029e6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80029e8:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <UnlinkTimer+0xf8>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	79fa      	ldrb	r2, [r7, #7]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d111      	bne.n	8002a18 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80029f4:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <UnlinkTimer+0xf8>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <UnlinkTimer+0xfc>)
 80029fc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80029fe:	79fa      	ldrb	r2, [r7, #7]
 8002a00:	4935      	ldr	r1, [pc, #212]	; (8002ad8 <UnlinkTimer+0x100>)
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3315      	adds	r3, #21
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <UnlinkTimer+0xf8>)
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e03e      	b.n	8002a96 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002a18:	79fa      	ldrb	r2, [r7, #7]
 8002a1a:	492f      	ldr	r1, [pc, #188]	; (8002ad8 <UnlinkTimer+0x100>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	3314      	adds	r3, #20
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002a2c:	79fa      	ldrb	r2, [r7, #7]
 8002a2e:	492a      	ldr	r1, [pc, #168]	; (8002ad8 <UnlinkTimer+0x100>)
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	3315      	adds	r3, #21
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002a40:	79f9      	ldrb	r1, [r7, #7]
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	4824      	ldr	r0, [pc, #144]	; (8002ad8 <UnlinkTimer+0x100>)
 8002a46:	460b      	mov	r3, r1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	440b      	add	r3, r1
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4403      	add	r3, r0
 8002a50:	3315      	adds	r3, #21
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b2d8      	uxtb	r0, r3
 8002a56:	4920      	ldr	r1, [pc, #128]	; (8002ad8 <UnlinkTimer+0x100>)
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	3315      	adds	r3, #21
 8002a64:	4602      	mov	r2, r0
 8002a66:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002a68:	7bbb      	ldrb	r3, [r7, #14]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d013      	beq.n	8002a96 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002a6e:	79f9      	ldrb	r1, [r7, #7]
 8002a70:	7bba      	ldrb	r2, [r7, #14]
 8002a72:	4819      	ldr	r0, [pc, #100]	; (8002ad8 <UnlinkTimer+0x100>)
 8002a74:	460b      	mov	r3, r1
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	440b      	add	r3, r1
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4403      	add	r3, r0
 8002a7e:	3314      	adds	r3, #20
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b2d8      	uxtb	r0, r3
 8002a84:	4914      	ldr	r1, [pc, #80]	; (8002ad8 <UnlinkTimer+0x100>)
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	440b      	add	r3, r1
 8002a90:	3314      	adds	r3, #20
 8002a92:	4602      	mov	r2, r0
 8002a94:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002a96:	79fa      	ldrb	r2, [r7, #7]
 8002a98:	490f      	ldr	r1, [pc, #60]	; (8002ad8 <UnlinkTimer+0x100>)
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	440b      	add	r3, r1
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <UnlinkTimer+0xf8>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b06      	cmp	r3, #6
 8002ab2:	d107      	bne.n	8002ac4 <UnlinkTimer+0xec>
 8002ab4:	79bb      	ldrb	r3, [r7, #6]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d104      	bne.n	8002ac4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <UnlinkTimer+0x104>)
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  return;
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
}
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	2000017c 	.word	0x2000017c
 8002ad4:	2000017d 	.word	0x2000017d
 8002ad8:	200000ec 	.word	0x200000ec
 8002adc:	20000180 	.word	0x20000180

08002ae0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <ReturnTimeElapsed+0x70>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d026      	beq.n	8002b3e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002af0:	f7ff fe02 	bl	80026f8 <ReadRtcSsrValue>
 8002af4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <ReturnTimeElapsed+0x70>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d805      	bhi.n	8002b0c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <ReturnTimeElapsed+0x70>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	e00a      	b.n	8002b22 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <ReturnTimeElapsed+0x74>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002b18:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <ReturnTimeElapsed+0x70>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <ReturnTimeElapsed+0x78>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <ReturnTimeElapsed+0x7c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	40d3      	lsrs	r3, r2
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	e001      	b.n	8002b42 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	b29b      	uxth	r3, r3
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000180 	.word	0x20000180
 8002b54:	20000188 	.word	0x20000188
 8002b58:	20000186 	.word	0x20000186
 8002b5c:	20000185 	.word	0x20000185

08002b60 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d108      	bne.n	8002b82 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002b70:	f7ff fdc2 	bl	80026f8 <ReadRtcSsrValue>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <RestartWakeupCounter+0x9c>)
 8002b78:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	f001 fcdf 	bl	800453e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002b80:	e039      	b.n	8002bf6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d803      	bhi.n	8002b90 <RestartWakeupCounter+0x30>
 8002b88:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <RestartWakeupCounter+0xa0>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d002      	beq.n	8002b96 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002b96:	bf00      	nop
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <RestartWakeupCounter+0xa4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f8      	beq.n	8002b98 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <RestartWakeupCounter+0xa4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <RestartWakeupCounter+0xa4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002bb6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <RestartWakeupCounter+0xa8>)
 8002bba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002bbe:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f001 fcca 	bl	800455a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <RestartWakeupCounter+0xac>)
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	88fa      	ldrh	r2, [r7, #6]
 8002bd0:	490e      	ldr	r1, [pc, #56]	; (8002c0c <RestartWakeupCounter+0xac>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002bd6:	f7ff fd8f 	bl	80026f8 <ReadRtcSsrValue>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <RestartWakeupCounter+0x9c>)
 8002bde:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <RestartWakeupCounter+0xa4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <RestartWakeupCounter+0xa4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bee:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002bf0:	f3af 8000 	nop.w
  return ;
 8002bf4:	bf00      	nop
}
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000180 	.word	0x20000180
 8002c00:	20000185 	.word	0x20000185
 8002c04:	200003b8 	.word	0x200003b8
 8002c08:	58000800 	.word	0x58000800
 8002c0c:	40002800 	.word	0x40002800

08002c10 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002c16:	4b45      	ldr	r3, [pc, #276]	; (8002d2c <RescheduleTimerList+0x11c>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c22:	d107      	bne.n	8002c34 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002c24:	bf00      	nop
 8002c26:	4b42      	ldr	r3, [pc, #264]	; (8002d30 <RescheduleTimerList+0x120>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f8      	bne.n	8002c26 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002c34:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <RescheduleTimerList+0x120>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <RescheduleTimerList+0x120>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c42:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002c44:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <RescheduleTimerList+0x124>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	493a      	ldr	r1, [pc, #232]	; (8002d38 <RescheduleTimerList+0x128>)
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	440b      	add	r3, r1
 8002c58:	3308      	adds	r3, #8
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002c5e:	f7ff ff3f 	bl	8002ae0 <ReturnTimeElapsed>
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d205      	bcs.n	8002c7a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002c72:	4b32      	ldr	r3, [pc, #200]	; (8002d3c <RescheduleTimerList+0x12c>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	e04d      	b.n	8002d16 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	4a30      	ldr	r2, [pc, #192]	; (8002d40 <RescheduleTimerList+0x130>)
 8002c7e:	8812      	ldrh	r2, [r2, #0]
 8002c80:	b292      	uxth	r2, r2
 8002c82:	4413      	add	r3, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d906      	bls.n	8002c9a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <RescheduleTimerList+0x130>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002c92:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <RescheduleTimerList+0x12c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e03d      	b.n	8002d16 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002ca4:	4b25      	ldr	r3, [pc, #148]	; (8002d3c <RescheduleTimerList+0x12c>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002caa:	e034      	b.n	8002d16 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	4922      	ldr	r1, [pc, #136]	; (8002d38 <RescheduleTimerList+0x128>)
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	3308      	adds	r3, #8
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d20a      	bcs.n	8002cda <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	491c      	ldr	r1, [pc, #112]	; (8002d38 <RescheduleTimerList+0x128>)
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e013      	b.n	8002d02 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	4916      	ldr	r1, [pc, #88]	; (8002d38 <RescheduleTimerList+0x128>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3308      	adds	r3, #8
 8002cea:	6819      	ldr	r1, [r3, #0]
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	1ac9      	subs	r1, r1, r3
 8002cf2:	4811      	ldr	r0, [pc, #68]	; (8002d38 <RescheduleTimerList+0x128>)
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4403      	add	r3, r0
 8002cfe:	3308      	adds	r3, #8
 8002d00:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	490c      	ldr	r1, [pc, #48]	; (8002d38 <RescheduleTimerList+0x128>)
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	3315      	adds	r3, #21
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	2b06      	cmp	r3, #6
 8002d1a:	d1c7      	bne.n	8002cac <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002d1c:	89bb      	ldrh	r3, [r7, #12]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff1e 	bl	8002b60 <RestartWakeupCounter>

  return ;
 8002d24:	bf00      	nop
}
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40002800 	.word	0x40002800
 8002d30:	200003b8 	.word	0x200003b8
 8002d34:	2000017c 	.word	0x2000017c
 8002d38:	200000ec 	.word	0x200000ec
 8002d3c:	20000184 	.word	0x20000184
 8002d40:	2000018a 	.word	0x2000018a

08002d44 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4e:	617b      	str	r3, [r7, #20]
  return(result);
 8002d50:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002d54:	b672      	cpsid	i
}
 8002d56:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	22ca      	movs	r2, #202	; 0xca
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
 8002d60:	4b57      	ldr	r3, [pc, #348]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2253      	movs	r2, #83	; 0x53
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	4b54      	ldr	r3, [pc, #336]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d76:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002d78:	4b52      	ldr	r3, [pc, #328]	; (8002ec4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002d80:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d84:	4950      	ldr	r1, [pc, #320]	; (8002ec8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	330c      	adds	r3, #12
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d16e      	bne.n	8002e78 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002d9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d9e:	494a      	ldr	r1, [pc, #296]	; (8002ec8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002dae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002db2:	4945      	ldr	r1, [pc, #276]	; (8002ec8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3310      	adds	r3, #16
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002dc4:	4b41      	ldr	r3, [pc, #260]	; (8002ecc <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d04c      	beq.n	8002e68 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002dce:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002dd2:	493d      	ldr	r1, [pc, #244]	; (8002ec8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	330d      	adds	r3, #13
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d124      	bne.n	8002e32 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fdf2 	bl	80029d8 <UnlinkTimer>
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002e00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002e04:	4930      	ldr	r1, [pc, #192]	; (8002ec8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	3304      	adds	r3, #4
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fa32 	bl	8003284 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	22ca      	movs	r2, #202	; 0xca
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2253      	movs	r2, #83	; 0x53
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24
 8002e30:	e012      	b.n	8002e58 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f383 8810 	msr	PRIMASK, r3
}
 8002e3c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f99a 	bl	800317c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	22ca      	movs	r2, #202	; 0xca
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2253      	movs	r2, #83	; 0x53
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002e58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	69b8      	ldr	r0, [r7, #24]
 8002e62:	f000 fac9 	bl	80033f8 <HW_TS_RTC_Int_AppNot>
 8002e66:	e022      	b.n	8002eae <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002e68:	f7ff fed2 	bl	8002c10 <RescheduleTimerList>
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	e01a      	b.n	8002eae <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002e78:	bf00      	nop
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f8      	beq.n	8002e7a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e98:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002e9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f383 8810 	msr	PRIMASK, r3
}
 8002eac:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	22ff      	movs	r2, #255	; 0xff
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002eb6:	bf00      	nop
}
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200003b8 	.word	0x200003b8
 8002ec4:	2000017c 	.word	0x2000017c
 8002ec8:	200000ec 	.word	0x200000ec
 8002ecc:	20000184 	.word	0x20000184
 8002ed0:	58000800 	.word	0x58000800

08002ed4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	6039      	str	r1, [r7, #0]
 8002ede:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002ee0:	4b5e      	ldr	r3, [pc, #376]	; (800305c <HW_TS_Init+0x188>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	22ca      	movs	r2, #202	; 0xca
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ee8:	4b5c      	ldr	r3, [pc, #368]	; (800305c <HW_TS_Init+0x188>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2253      	movs	r2, #83	; 0x53
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002ef0:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <HW_TS_Init+0x18c>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a5a      	ldr	r2, [pc, #360]	; (8003060 <HW_TS_Init+0x18c>)
 8002ef6:	f043 0320 	orr.w	r3, r3, #32
 8002efa:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002efc:	4b58      	ldr	r3, [pc, #352]	; (8003060 <HW_TS_Init+0x18c>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f1c3 0304 	rsb	r3, r3, #4
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	4b55      	ldr	r3, [pc, #340]	; (8003064 <HW_TS_Init+0x190>)
 8002f10:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HW_TS_Init+0x18c>)
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f1a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002f1e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	fa92 f2a2 	rbit	r2, r2
 8002f26:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	2a00      	cmp	r2, #0
 8002f30:	d101      	bne.n	8002f36 <HW_TS_Init+0x62>
  {
    return 32U;
 8002f32:	2220      	movs	r2, #32
 8002f34:	e003      	b.n	8002f3e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	fab2 f282 	clz	r2, r2
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	40d3      	lsrs	r3, r2
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	3301      	adds	r3, #1
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4b48      	ldr	r3, [pc, #288]	; (8003068 <HW_TS_Init+0x194>)
 8002f48:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002f4a:	4b45      	ldr	r3, [pc, #276]	; (8003060 <HW_TS_Init+0x18c>)
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	4b44      	ldr	r3, [pc, #272]	; (800306c <HW_TS_Init+0x198>)
 8002f5c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002f5e:	4b43      	ldr	r3, [pc, #268]	; (800306c <HW_TS_Init+0x198>)
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	4a40      	ldr	r2, [pc, #256]	; (8003068 <HW_TS_Init+0x194>)
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f70:	4a3c      	ldr	r2, [pc, #240]	; (8003064 <HW_TS_Init+0x190>)
 8002f72:	7812      	ldrb	r2, [r2, #0]
 8002f74:	40d3      	lsrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d904      	bls.n	8002f8c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HW_TS_Init+0x19c>)
 8002f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f88:	801a      	strh	r2, [r3, #0]
 8002f8a:	e003      	b.n	8002f94 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	4b37      	ldr	r3, [pc, #220]	; (8003070 <HW_TS_Init+0x19c>)
 8002f92:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002f94:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f98:	f7ff fb9c 	bl	80026d4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002f9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002fa0:	f7ff fb84 	bl	80026ac <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d13d      	bne.n	8003026 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002faa:	4b32      	ldr	r3, [pc, #200]	; (8003074 <HW_TS_Init+0x1a0>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002fb0:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HW_TS_Init+0x1a4>)
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	e00c      	b.n	8002fd8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002fbe:	7ffa      	ldrb	r2, [r7, #31]
 8002fc0:	492e      	ldr	r1, [pc, #184]	; (800307c <HW_TS_Init+0x1a8>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	440b      	add	r3, r1
 8002fcc:	330c      	adds	r3, #12
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002fd2:	7ffb      	ldrb	r3, [r7, #31]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	7ffb      	ldrb	r3, [r7, #31]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d9ef      	bls.n	8002fbe <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002fde:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HW_TS_Init+0x1ac>)
 8002fe0:	2206      	movs	r2, #6
 8002fe2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HW_TS_Init+0x188>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HW_TS_Init+0x188>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HW_TS_Init+0x188>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	4b17      	ldr	r3, [pc, #92]	; (800305c <HW_TS_Init+0x188>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003004:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003006:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HW_TS_Init+0x1b0>)
 8003008:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800300c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800300e:	2003      	movs	r0, #3
 8003010:	f001 faa3 	bl	800455a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HW_TS_Init+0x188>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <HW_TS_Init+0x188>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	e009      	b.n	800303a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <HW_TS_Init+0x188>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003034:	2003      	movs	r0, #3
 8003036:	f001 fa82 	bl	800453e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <HW_TS_Init+0x188>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	22ff      	movs	r2, #255	; 0xff
 8003040:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003042:	2200      	movs	r2, #0
 8003044:	2106      	movs	r1, #6
 8003046:	2003      	movs	r0, #3
 8003048:	f001 fa3f 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800304c:	2003      	movs	r0, #3
 800304e:	f001 fa56 	bl	80044fe <HAL_NVIC_EnableIRQ>

  return;
 8003052:	bf00      	nop
}
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200003b8 	.word	0x200003b8
 8003060:	40002800 	.word	0x40002800
 8003064:	20000185 	.word	0x20000185
 8003068:	20000186 	.word	0x20000186
 800306c:	20000188 	.word	0x20000188
 8003070:	2000018a 	.word	0x2000018a
 8003074:	20000184 	.word	0x20000184
 8003078:	20000180 	.word	0x20000180
 800307c:	200000ec 	.word	0x200000ec
 8003080:	2000017c 	.word	0x2000017c
 8003084:	58000800 	.word	0x58000800

08003088 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003088:	b480      	push	{r7}
 800308a:	b08b      	sub	sp, #44	; 0x2c
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309e:	f3ef 8310 	mrs	r3, PRIMASK
 80030a2:	61fb      	str	r3, [r7, #28]
  return(result);
 80030a4:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80030a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80030a8:	b672      	cpsid	i
}
 80030aa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80030ac:	e004      	b.n	80030b8 <HW_TS_Create+0x30>
  {
    loop++;
 80030ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030b2:	3301      	adds	r3, #1
 80030b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80030b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030bc:	2b05      	cmp	r3, #5
 80030be:	d80c      	bhi.n	80030da <HW_TS_Create+0x52>
 80030c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030c4:	492c      	ldr	r1, [pc, #176]	; (8003178 <HW_TS_Create+0xf0>)
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	330c      	adds	r3, #12
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e9      	bne.n	80030ae <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d038      	beq.n	8003154 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80030e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030e6:	4924      	ldr	r1, [pc, #144]	; (8003178 <HW_TS_Create+0xf0>)
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	330c      	adds	r3, #12
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f383 8810 	msr	PRIMASK, r3
}
 8003102:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003104:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003108:	491b      	ldr	r1, [pc, #108]	; (8003178 <HW_TS_Create+0xf0>)
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	440b      	add	r3, r1
 8003114:	3310      	adds	r3, #16
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800311a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800311e:	4916      	ldr	r1, [pc, #88]	; (8003178 <HW_TS_Create+0xf0>)
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	330d      	adds	r3, #13
 800312c:	79fa      	ldrb	r2, [r7, #7]
 800312e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8003130:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003134:	4910      	ldr	r1, [pc, #64]	; (8003178 <HW_TS_Create+0xf0>)
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800314a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800314c:	2300      	movs	r3, #0
 800314e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003152:	e008      	b.n	8003166 <HW_TS_Create+0xde>
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f383 8810 	msr	PRIMASK, r3
}
 800315e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800316a:	4618      	mov	r0, r3
 800316c:	372c      	adds	r7, #44	; 0x2c
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	200000ec 	.word	0x200000ec

0800317c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003186:	f3ef 8310 	mrs	r3, PRIMASK
 800318a:	60fb      	str	r3, [r7, #12]
  return(result);
 800318c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800318e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003190:	b672      	cpsid	i
}
 8003192:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003194:	2003      	movs	r0, #3
 8003196:	f001 f9c0 	bl	800451a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800319a:	4b34      	ldr	r3, [pc, #208]	; (800326c <HW_TS_Stop+0xf0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	22ca      	movs	r2, #202	; 0xca
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24
 80031a2:	4b32      	ldr	r3, [pc, #200]	; (800326c <HW_TS_Stop+0xf0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2253      	movs	r2, #83	; 0x53
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80031aa:	79fa      	ldrb	r2, [r7, #7]
 80031ac:	4930      	ldr	r1, [pc, #192]	; (8003270 <HW_TS_Stop+0xf4>)
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	330c      	adds	r3, #12
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d142      	bne.n	8003248 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fc06 	bl	80029d8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80031cc:	4b29      	ldr	r3, [pc, #164]	; (8003274 <HW_TS_Stop+0xf8>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031d2:	7cfb      	ldrb	r3, [r7, #19]
 80031d4:	2b06      	cmp	r3, #6
 80031d6:	d12f      	bne.n	8003238 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HW_TS_Stop+0xfc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e4:	d107      	bne.n	80031f6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80031e6:	bf00      	nop
 80031e8:	4b20      	ldr	r3, [pc, #128]	; (800326c <HW_TS_Stop+0xf0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f8      	bne.n	80031e8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HW_TS_Stop+0xf0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HW_TS_Stop+0xf0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003204:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003206:	bf00      	nop
 8003208:	4b18      	ldr	r3, [pc, #96]	; (800326c <HW_TS_Stop+0xf0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f8      	beq.n	8003208 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <HW_TS_Stop+0xf0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <HW_TS_Stop+0xf0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003226:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <HW_TS_Stop+0x100>)
 800322a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800322e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003230:	2003      	movs	r0, #3
 8003232:	f001 f992 	bl	800455a <HAL_NVIC_ClearPendingIRQ>
 8003236:	e007      	b.n	8003248 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HW_TS_Stop+0x104>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	7cfa      	ldrb	r2, [r7, #19]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003244:	f7ff fce4 	bl	8002c10 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <HW_TS_Stop+0xf0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	22ff      	movs	r2, #255	; 0xff
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003250:	2003      	movs	r0, #3
 8003252:	f001 f954 	bl	80044fe <HAL_NVIC_EnableIRQ>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003262:	bf00      	nop
}
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200003b8 	.word	0x200003b8
 8003270:	200000ec 	.word	0x200000ec
 8003274:	2000017c 	.word	0x2000017c
 8003278:	40002800 	.word	0x40002800
 800327c:	58000800 	.word	0x58000800
 8003280:	2000017d 	.word	0x2000017d

08003284 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003290:	79fa      	ldrb	r2, [r7, #7]
 8003292:	493b      	ldr	r1, [pc, #236]	; (8003380 <HW_TS_Start+0xfc>)
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	440b      	add	r3, r1
 800329e:	330c      	adds	r3, #12
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d103      	bne.n	80032b0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff66 	bl	800317c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b0:	f3ef 8310 	mrs	r3, PRIMASK
 80032b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80032b6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80032b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80032ba:	b672      	cpsid	i
}
 80032bc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80032be:	2003      	movs	r0, #3
 80032c0:	f001 f92b 	bl	800451a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80032c4:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <HW_TS_Start+0x100>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	22ca      	movs	r2, #202	; 0xca
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24
 80032cc:	4b2d      	ldr	r3, [pc, #180]	; (8003384 <HW_TS_Start+0x100>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2253      	movs	r2, #83	; 0x53
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80032d4:	79fa      	ldrb	r2, [r7, #7]
 80032d6:	492a      	ldr	r1, [pc, #168]	; (8003380 <HW_TS_Start+0xfc>)
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	440b      	add	r3, r1
 80032e2:	330c      	adds	r3, #12
 80032e4:	2202      	movs	r2, #2
 80032e6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80032e8:	79fa      	ldrb	r2, [r7, #7]
 80032ea:	4925      	ldr	r1, [pc, #148]	; (8003380 <HW_TS_Start+0xfc>)
 80032ec:	4613      	mov	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	3308      	adds	r3, #8
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80032fc:	79fa      	ldrb	r2, [r7, #7]
 80032fe:	4920      	ldr	r1, [pc, #128]	; (8003380 <HW_TS_Start+0xfc>)
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	3304      	adds	r3, #4
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fab6 	bl	8002884 <linkTimer>
 8003318:	4603      	mov	r3, r0
 800331a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HW_TS_Start+0x104>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HW_TS_Start+0x108>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	7c7a      	ldrb	r2, [r7, #17]
 800332a:	429a      	cmp	r2, r3
 800332c:	d002      	beq.n	8003334 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800332e:	f7ff fc6f 	bl	8002c10 <RescheduleTimerList>
 8003332:	e013      	b.n	800335c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003334:	79fa      	ldrb	r2, [r7, #7]
 8003336:	4912      	ldr	r1, [pc, #72]	; (8003380 <HW_TS_Start+0xfc>)
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	3308      	adds	r3, #8
 8003344:	6819      	ldr	r1, [r3, #0]
 8003346:	8a7b      	ldrh	r3, [r7, #18]
 8003348:	79fa      	ldrb	r2, [r7, #7]
 800334a:	1ac9      	subs	r1, r1, r3
 800334c:	480c      	ldr	r0, [pc, #48]	; (8003380 <HW_TS_Start+0xfc>)
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4403      	add	r3, r0
 8003358:	3308      	adds	r3, #8
 800335a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800335c:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HW_TS_Start+0x100>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	22ff      	movs	r2, #255	; 0xff
 8003362:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003364:	2003      	movs	r0, #3
 8003366:	f001 f8ca 	bl	80044fe <HAL_NVIC_EnableIRQ>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f383 8810 	msr	PRIMASK, r3
}
 8003374:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003376:	bf00      	nop
}
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	200000ec 	.word	0x200000ec
 8003384:	200003b8 	.word	0x200003b8
 8003388:	2000017c 	.word	0x2000017c
 800338c:	2000017d 	.word	0x2000017d

08003390 <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003396:	f3ef 8310 	mrs	r3, PRIMASK
 800339a:	60bb      	str	r3, [r7, #8]
  return(result);
 800339c:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800339e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
}
 80033a2:	bf00      	nop
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HW_TS_RTC_ReadLeftTicksToCount+0x64>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b0:	d112      	bne.n	80033d8 <HW_TS_RTC_ReadLeftTicksToCount+0x48>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HW_TS_RTC_ReadLeftTicksToCount+0x64>)
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 80033b8:	f7ff fb92 	bl	8002ae0 <ReturnTimeElapsed>
 80033bc:	4603      	mov	r3, r0
 80033be:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 80033c0:	89fa      	ldrh	r2, [r7, #14]
 80033c2:	89bb      	ldrh	r3, [r7, #12]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d904      	bls.n	80033d2 <HW_TS_RTC_ReadLeftTicksToCount+0x42>
    {
      return_value = auro_reload_value - elapsed_time_value;
 80033c8:	89fa      	ldrh	r2, [r7, #14]
 80033ca:	89bb      	ldrh	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	82fb      	strh	r3, [r7, #22]
 80033d0:	e005      	b.n	80033de <HW_TS_RTC_ReadLeftTicksToCount+0x4e>
    }
    else
    {
      return_value = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	82fb      	strh	r3, [r7, #22]
 80033d6:	e002      	b.n	80033de <HW_TS_RTC_ReadLeftTicksToCount+0x4e>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 80033d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033dc:	82fb      	strh	r3, [r7, #22]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f383 8810 	msr	PRIMASK, r3
}
 80033e8:	bf00      	nop
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 80033ea:	8afb      	ldrh	r3, [r7, #22]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40002800 	.word	0x40002800

080033f8 <HW_TS_RTC_Int_AppNot>:

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	460b      	mov	r3, r1
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4798      	blx	r3

  return;
 800340a:	bf00      	nop
}
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HW_UART_Transmit_IT>:

    return;
}

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	4603      	mov	r3, r0
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	4613      	mov	r3, r2
 8003424:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HW_UART_Transmit_IT+0x1e>
 800342c:	2b02      	cmp	r3, #2
 800342e:	d00d      	beq.n	800344c <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8003430:	e019      	b.n	8003466 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 8003432:	4a0f      	ldr	r2, [pc, #60]	; (8003470 <HW_UART_Transmit_IT+0x5c>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <HW_UART_Transmit_IT+0x60>)
 800343a:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <HW_UART_Transmit_IT+0x64>)
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	89bb      	ldrh	r3, [r7, #12]
 8003440:	461a      	mov	r2, r3
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	480b      	ldr	r0, [pc, #44]	; (8003474 <HW_UART_Transmit_IT+0x60>)
 8003446:	f003 ffb7 	bl	80073b8 <HAL_UART_Transmit_IT>
            break;
 800344a:	e00c      	b.n	8003466 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 800344c:	4a0b      	ldr	r2, [pc, #44]	; (800347c <HW_UART_Transmit_IT+0x68>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HW_UART_Transmit_IT+0x6c>)
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <HW_UART_Transmit_IT+0x70>)
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	89bb      	ldrh	r3, [r7, #12]
 800345a:	461a      	mov	r2, r3
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	4808      	ldr	r0, [pc, #32]	; (8003480 <HW_UART_Transmit_IT+0x6c>)
 8003460:	f003 ffaa 	bl	80073b8 <HAL_UART_Transmit_IT>
            break;
 8003464:	bf00      	nop
    }

    return;
 8003466:	bf00      	nop
}
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	2000018c 	.word	0x2000018c
 8003474:	20000264 	.word	0x20000264
 8003478:	40013800 	.word	0x40013800
 800347c:	20000190 	.word	0x20000190
 8003480:	200001d0 	.word	0x200001d0
 8003484:	40008000 	.word	0x40008000

08003488 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_UART_TxCpltCallback+0x4c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00a      	beq.n	80034b0 <HAL_UART_TxCpltCallback+0x28>
 800349a:	4a0f      	ldr	r2, [pc, #60]	; (80034d8 <HAL_UART_TxCpltCallback+0x50>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d10f      	bne.n	80034c0 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80034a0:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <HAL_UART_TxCpltCallback+0x54>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <HAL_UART_TxCpltCallback+0x54>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4798      	blx	r3
            }
            break;
 80034ae:	e009      	b.n	80034c4 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_UART_TxCpltCallback+0x58>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_UART_TxCpltCallback+0x58>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4798      	blx	r3
            }
            break;
 80034be:	e003      	b.n	80034c8 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 80034c0:	bf00      	nop
 80034c2:	e002      	b.n	80034ca <HAL_UART_TxCpltCallback+0x42>
            break;
 80034c4:	bf00      	nop
 80034c6:	e000      	b.n	80034ca <HAL_UART_TxCpltCallback+0x42>
            break;
 80034c8:	bf00      	nop
    }

    return;
 80034ca:	bf00      	nop
}
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40008000 	.word	0x40008000
 80034d8:	40013800 	.word	0x40013800
 80034dc:	2000018c 	.word	0x2000018c
 80034e0:	20000190 	.word	0x20000190

080034e4 <LL_RCC_LSE_SetDriveCapability>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80034ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f4:	f023 0218 	bic.w	r2, r3, #24
 80034f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <LL_AHB1_GRP1_EnableClock>:
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800351c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800351e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4313      	orrs	r3, r2
 8003526:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003534:	68fb      	ldr	r3, [r7, #12]
}
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <LL_AHB2_GRP1_EnableClock>:
{
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800354a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4313      	orrs	r3, r2
 8003558:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4013      	ands	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003566:	68fb      	ldr	r3, [r7, #12]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003578:	f000 fe1a 	bl	80041b0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800357c:	f7fe fd0c 	bl	8001f98 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003580:	f000 f822 	bl	80035c8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003584:	f000 f87c 	bl	8003680 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003588:	f000 f89a 	bl	80036c0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800358c:	f000 f902 	bl	8003794 <MX_GPIO_Init>
  MX_DMA_Init();
 8003590:	f000 f8e6 	bl	8003760 <MX_DMA_Init>
  MX_RF_Init();
 8003594:	f000 f8a8 	bl	80036e8 <MX_RF_Init>
  MX_RTC_Init();
 8003598:	f000 f8ae 	bl	80036f8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800359c:	f004 fd86 	bl	80080ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80035a0:	4a06      	ldr	r2, [pc, #24]	; (80035bc <main+0x48>)
 80035a2:	2100      	movs	r1, #0
 80035a4:	4806      	ldr	r0, [pc, #24]	; (80035c0 <main+0x4c>)
 80035a6:	f004 fdcb 	bl	8008140 <osThreadNew>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4a05      	ldr	r2, [pc, #20]	; (80035c4 <main+0x50>)
 80035ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80035b0:	f7fe fd00 	bl	8001fb4 <MX_APPE_Init>

  /* Start scheduler */
  osKernelStart();
 80035b4:	f004 fd9e 	bl	80080f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <main+0x44>
 80035ba:	bf00      	nop
 80035bc:	0800e7ac 	.word	0x0800e7ac
 80035c0:	080037af 	.word	0x080037af
 80035c4:	200003dc 	.word	0x200003dc

080035c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b09a      	sub	sp, #104	; 0x68
 80035cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ce:	f107 0320 	add.w	r3, r7, #32
 80035d2:	2248      	movs	r2, #72	; 0x48
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f00a fda4 	bl	800e124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	609a      	str	r2, [r3, #8]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	611a      	str	r2, [r3, #16]
 80035ea:	615a      	str	r2, [r3, #20]
 80035ec:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80035ee:	f001 fc39 	bl	8004e64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80035f2:	2000      	movs	r0, #0
 80035f4:	f7ff ff76 	bl	80034e4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035f8:	4b20      	ldr	r3, [pc, #128]	; (800367c <SystemClock_Config+0xb4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003600:	4a1e      	ldr	r2, [pc, #120]	; (800367c <SystemClock_Config+0xb4>)
 8003602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <SystemClock_Config+0xb4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003614:	2307      	movs	r3, #7
 8003616:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800361e:	2301      	movs	r3, #1
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003628:	2340      	movs	r3, #64	; 0x40
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800362c:	2300      	movs	r3, #0
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003630:	f107 0320 	add.w	r3, r7, #32
 8003634:	4618      	mov	r0, r3
 8003636:	f002 f835 	bl	80056a4 <HAL_RCC_OscConfig>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003640:	f000 f8d2 	bl	80037e8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003644:	236f      	movs	r3, #111	; 0x6f
 8003646:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003648:	2302      	movs	r3, #2
 800364a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	2101      	movs	r1, #1
 8003664:	4618      	mov	r0, r3
 8003666:	f002 fb91 	bl	8005d8c <HAL_RCC_ClockConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003670:	f000 f8ba 	bl	80037e8 <Error_Handler>
  }
}
 8003674:	bf00      	nop
 8003676:	3768      	adds	r7, #104	; 0x68
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	58000400 	.word	0x58000400

08003680 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b094      	sub	sp, #80	; 0x50
 8003684:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003686:	463b      	mov	r3, r7
 8003688:	2250      	movs	r2, #80	; 0x50
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f00a fd49 	bl	800e124 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003692:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003696:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800369c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800369e:	2302      	movs	r3, #2
 80036a0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036a6:	463b      	mov	r3, r7
 80036a8:	4618      	mov	r0, r3
 80036aa:	f002 ffc8 	bl	800663e <HAL_RCCEx_PeriphCLKConfig>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80036b4:	f000 f898 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80036b8:	bf00      	nop
 80036ba:	3750      	adds	r7, #80	; 0x50
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <MX_IPCC_Init+0x20>)
 80036c6:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <MX_IPCC_Init+0x24>)
 80036c8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80036ca:	4805      	ldr	r0, [pc, #20]	; (80036e0 <MX_IPCC_Init+0x20>)
 80036cc:	f001 fb44 	bl	8004d58 <HAL_IPCC_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80036d6:	f000 f887 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000194 	.word	0x20000194
 80036e4:	58000c00 	.word	0x58000c00

080036e8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036fc:	4b16      	ldr	r3, [pc, #88]	; (8003758 <MX_RTC_Init+0x60>)
 80036fe:	4a17      	ldr	r2, [pc, #92]	; (800375c <MX_RTC_Init+0x64>)
 8003700:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <MX_RTC_Init+0x60>)
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <MX_RTC_Init+0x60>)
 800370a:	220f      	movs	r2, #15
 800370c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <MX_RTC_Init+0x60>)
 8003710:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003714:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003716:	4b10      	ldr	r3, [pc, #64]	; (8003758 <MX_RTC_Init+0x60>)
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <MX_RTC_Init+0x60>)
 800371e:	2200      	movs	r2, #0
 8003720:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <MX_RTC_Init+0x60>)
 8003724:	2200      	movs	r2, #0
 8003726:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <MX_RTC_Init+0x60>)
 800372a:	2200      	movs	r2, #0
 800372c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800372e:	480a      	ldr	r0, [pc, #40]	; (8003758 <MX_RTC_Init+0x60>)
 8003730:	f003 fa0c 	bl	8006b4c <HAL_RTC_Init>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800373a:	f000 f855 	bl	80037e8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	4805      	ldr	r0, [pc, #20]	; (8003758 <MX_RTC_Init+0x60>)
 8003744:	f003 fb02 	bl	8006d4c <HAL_RTCEx_SetWakeUpTimer_IT>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800374e:	f000 f84b 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	200003b8 	.word	0x200003b8
 800375c:	40002800 	.word	0x40002800

08003760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003764:	2004      	movs	r0, #4
 8003766:	f7ff fed3 	bl	8003510 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800376a:	2001      	movs	r0, #1
 800376c:	f7ff fed0 	bl	8003510 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2105      	movs	r1, #5
 8003774:	200b      	movs	r0, #11
 8003776:	f000 fea8 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800377a:	200b      	movs	r0, #11
 800377c:	f000 febf 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003780:	2200      	movs	r2, #0
 8003782:	2105      	movs	r1, #5
 8003784:	200c      	movs	r0, #12
 8003786:	f000 fea0 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800378a:	200c      	movs	r0, #12
 800378c:	f000 feb7 	bl	80044fe <HAL_NVIC_EnableIRQ>

}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}

08003794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003798:	2004      	movs	r0, #4
 800379a:	f7ff fed2 	bl	8003542 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800379e:	2001      	movs	r0, #1
 80037a0:	f7ff fecf 	bl	8003542 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a4:	2002      	movs	r0, #2
 80037a6:	f7ff fecc 	bl	8003542 <LL_AHB2_GRP1_EnableClock>

}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}

080037ae <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80037b6:	f04f 32ff 	mov.w	r2, #4294967295
 80037ba:	2101      	movs	r1, #1
 80037bc:	2001      	movs	r0, #1
 80037be:	f004 fd9f 	bl	8008300 <osThreadFlagsWait>
 80037c2:	e7f8      	b.n	80037b6 <StartDefaultTask+0x8>

080037c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80037d6:	f000 fd0b 	bl	80041f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40014800 	.word	0x40014800

080037e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <LL_PWR_SetPowerMode>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <LL_PWR_SetPowerMode+0x24>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 0207 	bic.w	r2, r3, #7
 8003808:	4904      	ldr	r1, [pc, #16]	; (800381c <LL_PWR_SetPowerMode+0x24>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4313      	orrs	r3, r2
 800380e:	600b      	str	r3, [r1, #0]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	58000400 	.word	0x58000400

08003820 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <LL_PWR_ClearFlag_WU+0x14>)
 8003826:	221f      	movs	r2, #31
 8003828:	619a      	str	r2, [r3, #24]
}
 800382a:	bf00      	nop
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	58000400 	.word	0x58000400

08003838 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <LL_PWR_IsActiveFlag_C2SB+0x24>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	d101      	bne.n	8003850 <LL_PWR_IsActiveFlag_C2SB+0x18>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	58000400 	.word	0x58000400

08003860 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800386e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003872:	d101      	bne.n	8003878 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	58000400 	.word	0x58000400

08003888 <LL_RCC_HSE_Enable>:
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800388c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_RCC_HSE_IsReady>:
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80038aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038b8:	d101      	bne.n	80038be <LL_RCC_HSE_IsReady+0x18>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <LL_RCC_HSE_IsReady+0x1a>
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <LL_RCC_HSI_Enable>:
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80038ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038dc:	6013      	str	r3, [r2, #0]
}
 80038de:	bf00      	nop
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_RCC_HSI_IsReady>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80038ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fa:	d101      	bne.n	8003900 <LL_RCC_HSI_IsReady+0x18>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <LL_RCC_HSI_IsReady+0x1a>
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <LL_RCC_SetSysClkSource>:
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_RCC_GetSysClkSource>:
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
}
 8003942:	4618      	mov	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_RCC_SetSMPSClockSource>:
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f023 0203 	bic.w	r2, r3, #3
 800395e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4313      	orrs	r3, r2
 8003966:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <LL_LPM_EnableSleep+0x1c>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	4a04      	ldr	r2, [pc, #16]	; (8003990 <LL_LPM_EnableSleep+0x1c>)
 800397e:	f023 0304 	bic.w	r3, r3, #4
 8003982:	6113      	str	r3, [r2, #16]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <LL_LPM_EnableDeepSleep+0x1c>)
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <LL_LPM_EnableDeepSleep+0x1c>)
 800399e:	f043 0304 	orr.w	r3, r3, #4
 80039a2:	6113      	str	r3, [r2, #16]
}
 80039a4:	bf00      	nop
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	3220      	adds	r2, #32
 80039c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c8:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <LL_HSEM_1StepLock+0x2c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d001      	beq.n	80039d2 <LL_HSEM_1StepLock+0x1e>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <LL_HSEM_1StepLock+0x20>
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	80000400 	.word	0x80000400

080039e4 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8003a0e:	f000 fa39 	bl	8003e84 <HAL_SuspendTick>

  EnterLowPower();
 8003a12:	f000 f835 	bl	8003a80 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8003a16:	f7ff ff03 	bl	8003820 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8003a1a:	2003      	movs	r0, #3
 8003a1c:	f7ff feec 	bl	80037f8 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8003a20:	f7ff ffb8 	bl	8003994 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8003a24:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8003a26:	bf00      	nop
}
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 8003a2e:	f000 fa3b 	bl	8003ea8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8003a32:	bf00      	nop
}
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8003a3a:	f000 fa23 	bl	8003e84 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8003a3e:	f000 f81f 	bl	8003a80 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 8003a42:	2002      	movs	r0, #2
 8003a44:	f7ff fed8 	bl	80037f8 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8003a48:	f7ff ffa4 	bl	8003994 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8003a4c:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8003a4e:	bf00      	nop
}
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8003a56:	f000 f84f 	bl	8003af8 <ExitLowPower>

  HAL_ResumeTick();
 8003a5a:	f000 fa25 	bl	8003ea8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8003a5e:	bf00      	nop
}
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8003a66:	f000 fa0d 	bl	8003e84 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8003a6a:	f7ff ff83 	bl	8003974 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8003a6e:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8003a70:	bf00      	nop
}
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8003a78:	f000 fa16 	bl	8003ea8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8003a7c:	bf00      	nop
}
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8003a84:	bf00      	nop
 8003a86:	2103      	movs	r1, #3
 8003a88:	4819      	ldr	r0, [pc, #100]	; (8003af0 <EnterLowPower+0x70>)
 8003a8a:	f7ff ff93 	bl	80039b4 <LL_HSEM_1StepLock>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f8      	bne.n	8003a86 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8003a94:	2104      	movs	r1, #4
 8003a96:	4816      	ldr	r0, [pc, #88]	; (8003af0 <EnterLowPower+0x70>)
 8003a98:	f7ff ff8c 	bl	80039b4 <LL_HSEM_1StepLock>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d117      	bne.n	8003ad2 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8003aa2:	f7ff fedd 	bl	8003860 <LL_PWR_IsActiveFlag_C2DS>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <EnterLowPower+0x36>
 8003aac:	f7ff fec4 	bl	8003838 <LL_PWR_IsActiveFlag_C2SB>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d015      	beq.n	8003ae2 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2104      	movs	r1, #4
 8003aba:	480d      	ldr	r0, [pc, #52]	; (8003af0 <EnterLowPower+0x70>)
 8003abc:	f7ff ff92 	bl	80039e4 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8003ac0:	f000 f852 	bl	8003b68 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <EnterLowPower+0x74>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <EnterLowPower+0x74>)
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e007      	b.n	8003ae2 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8003ad2:	f000 f849 	bl	8003b68 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003ad6:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <EnterLowPower+0x74>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a06      	ldr	r2, [pc, #24]	; (8003af4 <EnterLowPower+0x74>)
 8003adc:	f023 0307 	bic.w	r3, r3, #7
 8003ae0:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2103      	movs	r1, #3
 8003ae6:	4802      	ldr	r0, [pc, #8]	; (8003af0 <EnterLowPower+0x70>)
 8003ae8:	f7ff ff7c 	bl	80039e4 <LL_HSEM_ReleaseLock>

  return;
 8003aec:	bf00      	nop
}
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	58001400 	.word	0x58001400
 8003af4:	58004000 	.word	0x58004000

08003af8 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8003afc:	2200      	movs	r2, #0
 8003afe:	2104      	movs	r1, #4
 8003b00:	4817      	ldr	r0, [pc, #92]	; (8003b60 <ExitLowPower+0x68>)
 8003b02:	f7ff ff6f 	bl	80039e4 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8003b06:	bf00      	nop
 8003b08:	2103      	movs	r1, #3
 8003b0a:	4815      	ldr	r0, [pc, #84]	; (8003b60 <ExitLowPower+0x68>)
 8003b0c:	f7ff ff52 	bl	80039b4 <LL_HSEM_1StepLock>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f8      	bne.n	8003b08 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003b16:	f7ff ff0d 	bl	8003934 <LL_RCC_GetSysClkSource>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d118      	bne.n	8003b52 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 8003b20:	f7ff feb2 	bl	8003888 <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <ExitLowPower+0x6c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 0307 	bic.w	r3, r3, #7
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <ExitLowPower+0x6c>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 8003b34:	bf00      	nop
 8003b36:	f7ff feb6 	bl	80038a6 <LL_RCC_HSE_IsReady>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0fa      	beq.n	8003b36 <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8003b40:	2002      	movs	r0, #2
 8003b42:	f7ff fee3 	bl	800390c <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8003b46:	bf00      	nop
 8003b48:	f7ff fef4 	bl	8003934 <LL_RCC_GetSysClkSource>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d1fa      	bne.n	8003b48 <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2103      	movs	r1, #3
 8003b56:	4802      	ldr	r0, [pc, #8]	; (8003b60 <ExitLowPower+0x68>)
 8003b58:	f7ff ff44 	bl	80039e4 <LL_HSEM_ReleaseLock>

  return;
 8003b5c:	bf00      	nop
}
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	58001400 	.word	0x58001400
 8003b64:	58004000 	.word	0x58004000

08003b68 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8003b6c:	f7ff fead 	bl	80038ca <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8003b70:	bf00      	nop
 8003b72:	f7ff feb9 	bl	80038e8 <LL_RCC_HSI_IsReady>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0fa      	beq.n	8003b72 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f7ff fec5 	bl	800390c <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8003b82:	2000      	movs	r0, #0
 8003b84:	f7ff fee2 	bl	800394c <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8003b88:	bf00      	nop
 8003b8a:	f7ff fed3 	bl	8003934 <LL_RCC_GetSysClkSource>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d1fa      	bne.n	8003b8a <Switch_On_HSI+0x22>
  return;
 8003b94:	bf00      	nop
}
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <LL_RCC_SetRTCClockSource>:
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_RCC_EnableRTC>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_AHB3_GRP1_EnableClock>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4013      	ands	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <LL_APB1_GRP1_EnableClock>:
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003c4e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003c52:	f7ff ffc8 	bl	8003be6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	210f      	movs	r1, #15
 8003c5a:	f06f 0001 	mvn.w	r0, #1
 8003c5e:	f000 fc34 	bl	80044ca <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 5, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2105      	movs	r1, #5
 8003c66:	2001      	movs	r0, #1
 8003c68:	f000 fc2f 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f000 fc46 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2105      	movs	r1, #5
 8003c76:	2004      	movs	r0, #4
 8003c78:	f000 fc27 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003c7c:	2004      	movs	r0, #4
 8003c7e:	f000 fc3e 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003c82:	2200      	movs	r2, #0
 8003c84:	2105      	movs	r1, #5
 8003c86:	2005      	movs	r0, #5
 8003c88:	f000 fc1f 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003c8c:	2005      	movs	r0, #5
 8003c8e:	f000 fc36 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 5, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2105      	movs	r1, #5
 8003c96:	2015      	movs	r0, #21
 8003c98:	f000 fc17 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8003c9c:	2015      	movs	r0, #21
 8003c9e:	f000 fc2e 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 5, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2105      	movs	r1, #5
 8003ca6:	202b      	movs	r0, #43	; 0x2b
 8003ca8:	f000 fc0f 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8003cac:	202b      	movs	r0, #43	; 0x2b
 8003cae:	f000 fc26 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2105      	movs	r1, #5
 8003cb6:	202e      	movs	r0, #46	; 0x2e
 8003cb8:	f000 fc07 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003cbc:	202e      	movs	r0, #46	; 0x2e
 8003cbe:	f000 fc1e 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2105      	movs	r1, #5
 8003cc6:	2036      	movs	r0, #54	; 0x36
 8003cc8:	f000 fbff 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003ccc:	2036      	movs	r0, #54	; 0x36
 8003cce:	f000 fc16 	bl	80044fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	210f      	movs	r1, #15
 8003cd6:	202c      	movs	r0, #44	; 0x2c
 8003cd8:	f000 fbf7 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	210f      	movs	r1, #15
 8003ce0:	202d      	movs	r0, #45	; 0x2d
 8003ce2:	f000 fbf2 	bl	80044ca <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8003ce6:	bf00      	nop
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a0d      	ldr	r2, [pc, #52]	; (8003d30 <HAL_IPCC_MspInit+0x44>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d113      	bne.n	8003d26 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003cfe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003d02:	f7ff ff70 	bl	8003be6 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 5, 0);
 8003d06:	2200      	movs	r2, #0
 8003d08:	2105      	movs	r1, #5
 8003d0a:	202c      	movs	r0, #44	; 0x2c
 8003d0c:	f000 fbdd 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003d10:	202c      	movs	r0, #44	; 0x2c
 8003d12:	f000 fbf4 	bl	80044fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 5, 0);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2105      	movs	r1, #5
 8003d1a:	202d      	movs	r0, #45	; 0x2d
 8003d1c:	f000 fbd5 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003d20:	202d      	movs	r0, #45	; 0x2d
 8003d22:	f000 fbec 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	58000c00 	.word	0x58000c00

08003d34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b096      	sub	sp, #88	; 0x58
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d3c:	f107 0308 	add.w	r3, r7, #8
 8003d40:	2250      	movs	r2, #80	; 0x50
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f00a f9ed 	bl	800e124 <memset>
  if(hrtc->Instance==RTC)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <HAL_RTC_MspInit+0x80>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d12b      	bne.n	8003dac <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003d54:	f001 f886 	bl	8004e64 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8003d58:	f001 f884 	bl	8004e64 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 8003d5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d60:	f7ff ff1a 	bl	8003b98 <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d68:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d6e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d70:	f107 0308 	add.w	r3, r7, #8
 8003d74:	4618      	mov	r0, r3
 8003d76:	f002 fc62 	bl	800663e <HAL_RCCEx_PeriphCLKConfig>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8003d80:	f7ff fd32 	bl	80037e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d84:	f7ff ff1e 	bl	8003bc4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003d88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d8c:	f7ff ff44 	bl	8003c18 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8003d90:	2200      	movs	r2, #0
 8003d92:	2105      	movs	r1, #5
 8003d94:	2003      	movs	r0, #3
 8003d96:	f000 fb98 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003d9a:	2003      	movs	r0, #3
 8003d9c:	f000 fbaf 	bl	80044fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <HAL_RTC_MspInit+0x80>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a03      	ldr	r2, [pc, #12]	; (8003db4 <HAL_RTC_MspInit+0x80>)
 8003da6:	f023 0307 	bic.w	r3, r3, #7
 8003daa:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003dac:	bf00      	nop
 8003dae:	3758      	adds	r7, #88	; 0x58
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40002800 	.word	0x40002800

08003db8 <LL_APB2_GRP1_EnableClock>:
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
}
 8003dde:	bf00      	nop
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08c      	sub	sp, #48	; 0x30
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	201a      	movs	r0, #26
 8003e02:	f000 fb62 	bl	80044ca <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003e06:	201a      	movs	r0, #26
 8003e08:	f000 fb79 	bl	80044fe <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003e0c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003e10:	f7ff ffd2 	bl	8003db8 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e14:	f107 0208 	add.w	r2, r7, #8
 8003e18:	f107 030c 	add.w	r3, r7, #12
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f002 f98a 	bl	8006138 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003e24:	f002 f972 	bl	800610c <HAL_RCC_GetPCLK2Freq>
 8003e28:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <HAL_InitTick+0x8c>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	0c9b      	lsrs	r3, r3, #18
 8003e34:	3b01      	subs	r3, #1
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003e38:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HAL_InitTick+0x90>)
 8003e3a:	4a11      	ldr	r2, [pc, #68]	; (8003e80 <HAL_InitTick+0x94>)
 8003e3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <HAL_InitTick+0x90>)
 8003e40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e44:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003e46:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <HAL_InitTick+0x90>)
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_InitTick+0x90>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_InitTick+0x90>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8003e58:	4808      	ldr	r0, [pc, #32]	; (8003e7c <HAL_InitTick+0x90>)
 8003e5a:	f003 f833 	bl	8006ec4 <HAL_TIM_Base_Init>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8003e64:	4805      	ldr	r0, [pc, #20]	; (8003e7c <HAL_InitTick+0x90>)
 8003e66:	f003 f88f 	bl	8006f88 <HAL_TIM_Base_Start_IT>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	e000      	b.n	8003e70 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3730      	adds	r7, #48	; 0x30
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	431bde83 	.word	0x431bde83
 8003e7c:	200003e0 	.word	0x200003e0
 8003e80:	40014800 	.word	0x40014800

08003e84 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM17 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  /* Disable TIM17 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim17, TIM_IT_UPDATE);
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_SuspendTick+0x20>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_SuspendTick+0x20>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	60da      	str	r2, [r3, #12]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	200003e0 	.word	0x200003e0

08003ea8 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM17 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* Enable TIM17 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_ResumeTick+0x20>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_ResumeTick+0x20>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	60da      	str	r2, [r3, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	200003e0 	.word	0x200003e0

08003ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ede:	e7fe      	b.n	8003ede <HardFault_Handler+0x4>

08003ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <MemManage_Handler+0x4>

08003ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eea:	e7fe      	b.n	8003eea <BusFault_Handler+0x4>

08003eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <UsageFault_Handler+0x4>

08003ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003f04:	f001 f814 	bl	8004f30 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003f08:	bf00      	nop
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003f10:	f7fe ff18 	bl	8002d44 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003f14:	bf00      	nop
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003f1c:	f000 fc98 	bl	8004850 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003f20:	bf00      	nop
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003f38:	4802      	ldr	r0, [pc, #8]	; (8003f44 <DMA1_Channel1_IRQHandler+0x10>)
 8003f3a:	f000 fbda 	bl	80046f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	200002f8 	.word	0x200002f8

08003f48 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003f4c:	4802      	ldr	r0, [pc, #8]	; (8003f58 <DMA1_Channel2_IRQHandler+0x10>)
 8003f4e:	f000 fbd0 	bl	80046f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20000358 	.word	0x20000358

08003f5c <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003f72:	f003 f857 	bl	8007024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200003e0 	.word	0x200003e0

08003f80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f84:	4802      	ldr	r0, [pc, #8]	; (8003f90 <USART1_IRQHandler+0x10>)
 8003f86:	f003 faab 	bl	80074e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000264 	.word	0x20000264

08003f94 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003f98:	4802      	ldr	r0, [pc, #8]	; (8003fa4 <LPUART1_IRQHandler+0x10>)
 8003f9a:	f003 faa1 	bl	80074e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200001d0 	.word	0x200001d0

08003fa8 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003fba:	f7fd fcb3 	bl	8001924 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003fc6:	f7fd fd07 	bl	80019d8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003fd2:	f000 fe9d 	bl	8004d10 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003fde:	bf00      	nop
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8003fe8:	b40c      	push	{r2, r3}
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	460a      	mov	r2, r1
 8003ff4:	71fb      	strb	r3, [r7, #7]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	b002      	add	sp, #8
 8004006:	4770      	bx	lr

08004008 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	4a07      	ldr	r2, [pc, #28]	; (8004034 <BSP_LED_On+0x2c>)
 8004016:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	4a06      	ldr	r2, [pc, #24]	; (8004038 <BSP_LED_On+0x30>)
 800401e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004022:	2201      	movs	r2, #1
 8004024:	4619      	mov	r1, r3
 8004026:	f000 fe41 	bl	8004cac <HAL_GPIO_WritePin>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000018 	.word	0x20000018
 8004038:	0800e7e8 	.word	0x0800e7e8

0800403c <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	4a07      	ldr	r2, [pc, #28]	; (8004068 <BSP_LED_Off+0x2c>)
 800404a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	4a06      	ldr	r2, [pc, #24]	; (800406c <BSP_LED_Off+0x30>)
 8004052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004056:	2200      	movs	r2, #0
 8004058:	4619      	mov	r1, r3
 800405a:	f000 fe27 	bl	8004cac <HAL_GPIO_WritePin>
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000018 	.word	0x20000018
 800406c:	0800e7e8 	.word	0x0800e7e8

08004070 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	4a07      	ldr	r2, [pc, #28]	; (800409c <BSP_LED_Toggle+0x2c>)
 800407e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	4906      	ldr	r1, [pc, #24]	; (80040a0 <BSP_LED_Toggle+0x30>)
 8004086:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f000 fe25 	bl	8004cdc <HAL_GPIO_TogglePin>
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000018 	.word	0x20000018
 80040a0:	0800e7e8 	.word	0x0800e7e8

080040a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80040a8:	4b26      	ldr	r3, [pc, #152]	; (8004144 <SystemInit+0xa0>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80040ae:	4b25      	ldr	r3, [pc, #148]	; (8004144 <SystemInit+0xa0>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	4a23      	ldr	r2, [pc, #140]	; (8004144 <SystemInit+0xa0>)
 80040b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80040be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80040d6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80040d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e2:	4b19      	ldr	r3, [pc, #100]	; (8004148 <SystemInit+0xa4>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80040e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f4:	f023 0305 	bic.w	r3, r3, #5
 80040f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80040fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004114:	4a0d      	ldr	r2, [pc, #52]	; (800414c <SystemInit+0xa8>)
 8004116:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411c:	4a0b      	ldr	r2, [pc, #44]	; (800414c <SystemInit+0xa8>)
 800411e:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000ed00 	.word	0xe000ed00
 8004148:	faf6fefb 	.word	0xfaf6fefb
 800414c:	22041000 	.word	0x22041000

08004150 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a04      	ldr	r2, [pc, #16]	; (800416c <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800415a:	f023 0301 	bic.w	r3, r3, #1
 800415e:	6053      	str	r3, [r2, #4]
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	e0042000 	.word	0xe0042000

08004170 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a04      	ldr	r2, [pc, #16]	; (800418c <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 800417a:	f023 0302 	bic.w	r3, r3, #2
 800417e:	6053      	str	r3, [r2, #4]
}
 8004180:	bf00      	nop
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	e0042000 	.word	0xe0042000

08004190 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800419a:	f023 0304 	bic.w	r3, r3, #4
 800419e:	6053      	str	r3, [r2, #4]
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e0042000 	.word	0xe0042000

080041b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <HAL_Init+0x3c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a0b      	ldr	r2, [pc, #44]	; (80041ec <HAL_Init+0x3c>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c6:	2003      	movs	r0, #3
 80041c8:	f000 f974 	bl	80044b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041cc:	200f      	movs	r0, #15
 80041ce:	f7ff fe0d 	bl	8003dec <HAL_InitTick>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	71fb      	strb	r3, [r7, #7]
 80041dc:	e001      	b.n	80041e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041de:	f7ff fd34 	bl	8003c4a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041e2:	79fb      	ldrb	r3, [r7, #7]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	58004000 	.word	0x58004000

080041f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_IncTick+0x20>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_IncTick+0x24>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4413      	add	r3, r2
 8004200:	4a04      	ldr	r2, [pc, #16]	; (8004214 <HAL_IncTick+0x24>)
 8004202:	6013      	str	r3, [r2, #0]
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	2000002c 	.word	0x2000002c
 8004214:	2000042c 	.word	0x2000042c

08004218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return uwTick;
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_GetTick+0x14>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	2000042c 	.word	0x2000042c

08004230 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_GetTickPrio+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000028 	.word	0x20000028

08004248 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 800424c:	f7ff ff80 	bl	8004150 <LL_DBGMCU_DisableDBGSleepMode>
}
 8004250:	bf00      	nop
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8004258:	f7ff ff8a 	bl	8004170 <LL_DBGMCU_DisableDBGStopMode>
}
 800425c:	bf00      	nop
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8004264:	f7ff ff94 	bl	8004190 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8004268:	bf00      	nop
 800426a:	bd80      	pop	{r7, pc}

0800426c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <__NVIC_SetPriorityGrouping+0x44>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004288:	4013      	ands	r3, r2
 800428a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800429e:	4a04      	ldr	r2, [pc, #16]	; (80042b0 <__NVIC_SetPriorityGrouping+0x44>)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	60d3      	str	r3, [r2, #12]
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	e000ed00 	.word	0xe000ed00

080042b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b8:	4b04      	ldr	r3, [pc, #16]	; (80042cc <__NVIC_GetPriorityGrouping+0x18>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	f003 0307 	and.w	r3, r3, #7
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	db0b      	blt.n	80042fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	f003 021f 	and.w	r2, r3, #31
 80042e8:	4907      	ldr	r1, [pc, #28]	; (8004308 <__NVIC_EnableIRQ+0x38>)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2001      	movs	r0, #1
 80042f2:	fa00 f202 	lsl.w	r2, r0, r2
 80042f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	e000e100 	.word	0xe000e100

0800430c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	2b00      	cmp	r3, #0
 800431c:	db12      	blt.n	8004344 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	f003 021f 	and.w	r2, r3, #31
 8004324:	490a      	ldr	r1, [pc, #40]	; (8004350 <__NVIC_DisableIRQ+0x44>)
 8004326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2001      	movs	r0, #1
 800432e:	fa00 f202 	lsl.w	r2, r0, r2
 8004332:	3320      	adds	r3, #32
 8004334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004338:	f3bf 8f4f 	dsb	sy
}
 800433c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800433e:	f3bf 8f6f 	isb	sy
}
 8004342:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000e100 	.word	0xe000e100

08004354 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	2b00      	cmp	r3, #0
 8004364:	db0c      	blt.n	8004380 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	4907      	ldr	r1, [pc, #28]	; (800438c <__NVIC_SetPendingIRQ+0x38>)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2001      	movs	r0, #1
 8004376:	fa00 f202 	lsl.w	r2, r0, r2
 800437a:	3340      	adds	r3, #64	; 0x40
 800437c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	e000e100 	.word	0xe000e100

08004390 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	db0c      	blt.n	80043bc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	f003 021f 	and.w	r2, r3, #31
 80043a8:	4907      	ldr	r1, [pc, #28]	; (80043c8 <__NVIC_ClearPendingIRQ+0x38>)
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	2001      	movs	r0, #1
 80043b2:	fa00 f202 	lsl.w	r2, r0, r2
 80043b6:	3360      	adds	r3, #96	; 0x60
 80043b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	e000e100 	.word	0xe000e100

080043cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	6039      	str	r1, [r7, #0]
 80043d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	db0a      	blt.n	80043f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	490c      	ldr	r1, [pc, #48]	; (8004418 <__NVIC_SetPriority+0x4c>)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	0112      	lsls	r2, r2, #4
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	440b      	add	r3, r1
 80043f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043f4:	e00a      	b.n	800440c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4908      	ldr	r1, [pc, #32]	; (800441c <__NVIC_SetPriority+0x50>)
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	3b04      	subs	r3, #4
 8004404:	0112      	lsls	r2, r2, #4
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	440b      	add	r3, r1
 800440a:	761a      	strb	r2, [r3, #24]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	e000e100 	.word	0xe000e100
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	; 0x24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f1c3 0307 	rsb	r3, r3, #7
 800443a:	2b04      	cmp	r3, #4
 800443c:	bf28      	it	cs
 800443e:	2304      	movcs	r3, #4
 8004440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3304      	adds	r3, #4
 8004446:	2b06      	cmp	r3, #6
 8004448:	d902      	bls.n	8004450 <NVIC_EncodePriority+0x30>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3b03      	subs	r3, #3
 800444e:	e000      	b.n	8004452 <NVIC_EncodePriority+0x32>
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004454:	f04f 32ff 	mov.w	r2, #4294967295
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43da      	mvns	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	401a      	ands	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004468:	f04f 31ff 	mov.w	r1, #4294967295
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	fa01 f303 	lsl.w	r3, r1, r3
 8004472:	43d9      	mvns	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004478:	4313      	orrs	r3, r2
         );
}
 800447a:	4618      	mov	r0, r3
 800447c:	3724      	adds	r7, #36	; 0x24
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800448c:	f3bf 8f4f 	dsb	sy
}
 8004490:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <__NVIC_SystemReset+0x24>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800449a:	4904      	ldr	r1, [pc, #16]	; (80044ac <__NVIC_SystemReset+0x24>)
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <__NVIC_SystemReset+0x28>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80044a2:	f3bf 8f4f 	dsb	sy
}
 80044a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80044a8:	bf00      	nop
 80044aa:	e7fd      	b.n	80044a8 <__NVIC_SystemReset+0x20>
 80044ac:	e000ed00 	.word	0xe000ed00
 80044b0:	05fa0004 	.word	0x05fa0004

080044b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff fed5 	bl	800426c <__NVIC_SetPriorityGrouping>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b086      	sub	sp, #24
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044d8:	f7ff feec 	bl	80042b4 <__NVIC_GetPriorityGrouping>
 80044dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	6978      	ldr	r0, [r7, #20]
 80044e4:	f7ff ff9c 	bl	8004420 <NVIC_EncodePriority>
 80044e8:	4602      	mov	r2, r0
 80044ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ee:	4611      	mov	r1, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ff6b 	bl	80043cc <__NVIC_SetPriority>
}
 80044f6:	bf00      	nop
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fedf 	bl	80042d0 <__NVIC_EnableIRQ>
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	4603      	mov	r3, r0
 8004522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff feef 	bl	800430c <__NVIC_DisableIRQ>
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800453a:	f7ff ffa5 	bl	8004488 <__NVIC_SystemReset>

0800453e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	4603      	mov	r3, r0
 8004546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff ff01 	bl	8004354 <__NVIC_SetPendingIRQ>
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	4603      	mov	r3, r0
 8004562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff11 	bl	8004390 <__NVIC_ClearPendingIRQ>
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e04f      	b.n	8004628 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d008      	beq.n	80045a6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2204      	movs	r2, #4
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e040      	b.n	8004628 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 020e 	bic.w	r2, r2, #14
 80045b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f003 021c 	and.w	r2, r3, #28
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	2101      	movs	r1, #1
 80045e4:	fa01 f202 	lsl.w	r2, r1, r2
 80045e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00c      	beq.n	8004616 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800460a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004614:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d005      	beq.n	8004658 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2204      	movs	r2, #4
 8004650:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	e047      	b.n	80046e8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 020e 	bic.w	r2, r2, #14
 8004666:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0201 	bic.w	r2, r2, #1
 8004676:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004686:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468c:	f003 021c 	and.w	r2, r3, #28
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	2101      	movs	r1, #1
 8004696:	fa01 f202 	lsl.w	r2, r1, r2
 800469a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	4798      	blx	r3
    }
  }
  return status;
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f003 031c 	and.w	r3, r3, #28
 8004712:	2204      	movs	r2, #4
 8004714:	409a      	lsls	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d026      	beq.n	800476c <HAL_DMA_IRQHandler+0x7a>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d021      	beq.n	800476c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d107      	bne.n	8004746 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0204 	bic.w	r2, r2, #4
 8004744:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	f003 021c 	and.w	r2, r3, #28
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	2104      	movs	r1, #4
 8004754:	fa01 f202 	lsl.w	r2, r1, r2
 8004758:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	2b00      	cmp	r3, #0
 8004760:	d071      	beq.n	8004846 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800476a:	e06c      	b.n	8004846 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	f003 031c 	and.w	r3, r3, #28
 8004774:	2202      	movs	r2, #2
 8004776:	409a      	lsls	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d02e      	beq.n	80047de <HAL_DMA_IRQHandler+0xec>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d029      	beq.n	80047de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10b      	bne.n	80047b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 020a 	bic.w	r2, r2, #10
 80047a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b4:	f003 021c 	and.w	r2, r3, #28
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	2102      	movs	r1, #2
 80047be:	fa01 f202 	lsl.w	r2, r1, r2
 80047c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d038      	beq.n	8004846 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80047dc:	e033      	b.n	8004846 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	f003 031c 	and.w	r3, r3, #28
 80047e6:	2208      	movs	r2, #8
 80047e8:	409a      	lsls	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d02a      	beq.n	8004848 <HAL_DMA_IRQHandler+0x156>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d025      	beq.n	8004848 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 020e 	bic.w	r2, r2, #14
 800480a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	f003 021c 	and.w	r2, r3, #28
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	2101      	movs	r1, #1
 800481a:	fa01 f202 	lsl.w	r2, r1, r2
 800481e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483a:	2b00      	cmp	r3, #0
 800483c:	d004      	beq.n	8004848 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004846:	bf00      	nop
 8004848:	bf00      	nop
}
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800485c:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_FLASH_IRQHandler+0x114>)
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004864:	4013      	ands	r3, r2
 8004866:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8004868:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <HAL_FLASH_IRQHandler+0x114>)
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	43db      	mvns	r3, r3
 8004872:	493c      	ldr	r1, [pc, #240]	; (8004964 <HAL_FLASH_IRQHandler+0x114>)
 8004874:	4013      	ands	r3, r2
 8004876:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 8004878:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_FLASH_IRQHandler+0x11c>)
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 8004884:	4b38      	ldr	r3, [pc, #224]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	e008      	b.n	800489e <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 800488c:	4b36      	ldr	r3, [pc, #216]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 8004898:	4b33      	ldr	r3, [pc, #204]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d022      	beq.n	80048ea <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80048a4:	4b30      	ldr	r3, [pc, #192]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	4a2e      	ldr	r2, [pc, #184]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 80048ae:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_FLASH_IRQHandler+0x7a>
 80048ba:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <HAL_FLASH_IRQHandler+0x114>)
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80048c4:	4927      	ldr	r1, [pc, #156]	; (8004964 <HAL_FLASH_IRQHandler+0x114>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	618b      	str	r3, [r1, #24]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <HAL_FLASH_IRQHandler+0x8e>
 80048d4:	4a23      	ldr	r2, [pc, #140]	; (8004964 <HAL_FLASH_IRQHandler+0x114>)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80048dc:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80048de:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f84d 	bl	8004984 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80048ea:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <HAL_FLASH_IRQHandler+0x114>)
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d124      	bne.n	8004940 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80048f6:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <HAL_FLASH_IRQHandler+0x114>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 80048fc:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d117      	bne.n	8004934 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004904:	4b18      	ldr	r3, [pc, #96]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	3b01      	subs	r3, #1
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 800490c:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 800490e:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 8004916:	4b14      	ldr	r3, [pc, #80]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	3301      	adds	r3, #1
 800491c:	4a12      	ldr	r2, [pc, #72]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 800491e:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 8004920:	4b11      	ldr	r3, [pc, #68]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 f837 	bl	8004998 <FLASH_PageErase>
 800492a:	e006      	b.n	800493a <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 800492e:	2200      	movs	r2, #0
 8004930:	609a      	str	r2, [r3, #8]
 8004932:	e002      	b.n	800493a <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004934:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f818 	bl	8004970 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8004940:	4b09      	ldr	r3, [pc, #36]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d108      	bne.n	800495a <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_FLASH_IRQHandler+0x114>)
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	4a05      	ldr	r2, [pc, #20]	; (8004964 <HAL_FLASH_IRQHandler+0x114>)
 800494e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004952:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <HAL_FLASH_IRQHandler+0x118>)
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
  }
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	58004000 	.word	0x58004000
 8004968:	20000430 	.word	0x20000430
 800496c:	00040001 	.word	0x00040001

08004970 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <FLASH_PageErase+0x30>)
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4313      	orrs	r3, r2
 80049ae:	4a06      	ldr	r2, [pc, #24]	; (80049c8 <FLASH_PageErase+0x30>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	6153      	str	r3, [r2, #20]
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	58004000 	.word	0x58004000

080049cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049da:	e14c      	b.n	8004c76 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	2101      	movs	r1, #1
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	4013      	ands	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 813e 	beq.w	8004c70 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d005      	beq.n	8004a0c <HAL_GPIO_Init+0x40>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d130      	bne.n	8004a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	2203      	movs	r2, #3
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4013      	ands	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a42:	2201      	movs	r2, #1
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	f003 0201 	and.w	r2, r3, #1
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d017      	beq.n	8004aaa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	2203      	movs	r2, #3
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d123      	bne.n	8004afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	08da      	lsrs	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3208      	adds	r2, #8
 8004abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	220f      	movs	r2, #15
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	08da      	lsrs	r2, r3, #3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3208      	adds	r2, #8
 8004af8:	6939      	ldr	r1, [r7, #16]
 8004afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	2203      	movs	r2, #3
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4013      	ands	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 0203 	and.w	r2, r3, #3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8098 	beq.w	8004c70 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b40:	4a54      	ldr	r2, [pc, #336]	; (8004c94 <HAL_GPIO_Init+0x2c8>)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	3302      	adds	r3, #2
 8004b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	220f      	movs	r2, #15
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4013      	ands	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b6a:	d019      	beq.n	8004ba0 <HAL_GPIO_Init+0x1d4>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a4a      	ldr	r2, [pc, #296]	; (8004c98 <HAL_GPIO_Init+0x2cc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d013      	beq.n	8004b9c <HAL_GPIO_Init+0x1d0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a49      	ldr	r2, [pc, #292]	; (8004c9c <HAL_GPIO_Init+0x2d0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00d      	beq.n	8004b98 <HAL_GPIO_Init+0x1cc>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a48      	ldr	r2, [pc, #288]	; (8004ca0 <HAL_GPIO_Init+0x2d4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <HAL_GPIO_Init+0x1c8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a47      	ldr	r2, [pc, #284]	; (8004ca4 <HAL_GPIO_Init+0x2d8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d101      	bne.n	8004b90 <HAL_GPIO_Init+0x1c4>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	e008      	b.n	8004ba2 <HAL_GPIO_Init+0x1d6>
 8004b90:	2307      	movs	r3, #7
 8004b92:	e006      	b.n	8004ba2 <HAL_GPIO_Init+0x1d6>
 8004b94:	2303      	movs	r3, #3
 8004b96:	e004      	b.n	8004ba2 <HAL_GPIO_Init+0x1d6>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e002      	b.n	8004ba2 <HAL_GPIO_Init+0x1d6>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <HAL_GPIO_Init+0x1d6>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	f002 0203 	and.w	r2, r2, #3
 8004ba8:	0092      	lsls	r2, r2, #2
 8004baa:	4093      	lsls	r3, r2
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bb2:	4938      	ldr	r1, [pc, #224]	; (8004c94 <HAL_GPIO_Init+0x2c8>)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	3302      	adds	r3, #2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bc0:	4b39      	ldr	r3, [pc, #228]	; (8004ca8 <HAL_GPIO_Init+0x2dc>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004be4:	4a30      	ldr	r2, [pc, #192]	; (8004ca8 <HAL_GPIO_Init+0x2dc>)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bea:	4b2f      	ldr	r3, [pc, #188]	; (8004ca8 <HAL_GPIO_Init+0x2dc>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c0e:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <HAL_GPIO_Init+0x2dc>)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c14:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <HAL_GPIO_Init+0x2dc>)
 8004c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4013      	ands	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ca8 <HAL_GPIO_Init+0x2dc>)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004c42:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <HAL_GPIO_Init+0x2dc>)
 8004c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4013      	ands	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c68:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <HAL_GPIO_Init+0x2dc>)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	3301      	adds	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f47f aeab 	bne.w	80049dc <HAL_GPIO_Init+0x10>
  }
}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40010000 	.word	0x40010000
 8004c98:	48000400 	.word	0x48000400
 8004c9c:	48000800 	.word	0x48000800
 8004ca0:	48000c00 	.word	0x48000c00
 8004ca4:	48001000 	.word	0x48001000
 8004ca8:	58000800 	.word	0x58000800

08004cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cbc:	787b      	ldrb	r3, [r7, #1]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004cc8:	e002      	b.n	8004cd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cca:	887a      	ldrh	r2, [r7, #2]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cee:	887a      	ldrh	r2, [r7, #2]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	041a      	lsls	r2, r3, #16
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	43d9      	mvns	r1, r3
 8004cfa:	887b      	ldrh	r3, [r7, #2]
 8004cfc:	400b      	ands	r3, r1
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	619a      	str	r2, [r3, #24]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <HAL_HSEM_IRQHandler+0x30>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004d1c:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <HAL_HSEM_IRQHandler+0x30>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	4906      	ldr	r1, [pc, #24]	; (8004d40 <HAL_HSEM_IRQHandler+0x30>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004d2a:	4a05      	ldr	r2, [pc, #20]	; (8004d40 <HAL_HSEM_IRQHandler+0x30>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f807 	bl	8004d44 <HAL_HSEM_FreeCallback>
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	58001500 	.word	0x58001500

08004d44 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01e      	beq.n	8004da8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <HAL_IPCC_Init+0x60>)
 8004d6c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fe ffb6 	bl	8003cec <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004d80:	68b8      	ldr	r0, [r7, #8]
 8004d82:	f000 f85b 	bl	8004e3c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f82c 	bl	8004df0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004da6:	e001      	b.n	8004dac <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	58000c00 	.word	0x58000c00

08004dbc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	4613      	mov	r3, r2
 8004de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e00f      	b.n	8004e1e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	4a0b      	ldr	r2, [pc, #44]	; (8004e34 <IPCC_SetDefaultCallbacks+0x44>)
 8004e08:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3306      	adds	r3, #6
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <IPCC_SetDefaultCallbacks+0x48>)
 8004e16:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b05      	cmp	r3, #5
 8004e22:	d9ec      	bls.n	8004dfe <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	08004dbd 	.word	0x08004dbd
 8004e38:	08004dd7 	.word	0x08004dd7

08004e3c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004e50:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	223f      	movs	r2, #63	; 0x3f
 8004e56:	609a      	str	r2, [r3, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a04      	ldr	r2, [pc, #16]	; (8004e80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e72:	6013      	str	r3, [r2, #0]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	58000400 	.word	0x58000400

08004e84 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <LL_EXTI_ReadFlag_0_31+0x1c>)
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4013      	ands	r3, r2
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	58000800 	.word	0x58000800

08004eb4 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <LL_EXTI_ReadFlag_32_63+0x1c>)
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4013      	ands	r3, r2
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	58000800 	.word	0x58000800

08004ed4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004edc:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	60d3      	str	r3, [r2, #12]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	58000800 	.word	0x58000800

08004ef4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004efc:	4a04      	ldr	r2, [pc, #16]	; (8004f10 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	58000800 	.word	0x58000800

08004f14 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f18:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <HAL_PWREx_GetVoltageRange+0x18>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	58000400 	.word	0x58000400

08004f30 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8004f34:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004f38:	f7ff ffac 	bl	8004e94 <LL_EXTI_ReadFlag_0_31>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004f42:	f7ff ff9f 	bl	8004e84 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004f46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004f4a:	f7ff ffc3 	bl	8004ed4 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 8004f4e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004f52:	f7ff ff9f 	bl	8004e94 <LL_EXTI_ReadFlag_0_31>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8004f5c:	f000 f811 	bl	8004f82 <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8004f60:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004f64:	f7ff ffb6 	bl	8004ed4 <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 8004f68:	2002      	movs	r0, #2
 8004f6a:	f7ff ffa3 	bl	8004eb4 <LL_EXTI_ReadFlag_32_63>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004f74:	f000 f80c 	bl	8004f90 <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8004f78:	2002      	movs	r0, #2
 8004f7a:	f7ff ffbb 	bl	8004ef4 <LL_EXTI_ClearFlag_32_63>
  }
}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8004f82:	b480      	push	{r7}
 8004f84:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8004f86:	bf00      	nop
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb0:	d101      	bne.n	8004fb6 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <LL_RCC_HSE_Enable>:
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd4:	6013      	str	r3, [r2, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <LL_RCC_HSE_Disable>:
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff2:	6013      	str	r3, [r2, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <LL_RCC_HSE_IsReady>:
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005010:	d101      	bne.n	8005016 <LL_RCC_HSE_IsReady+0x18>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <LL_RCC_HSE_IsReady+0x1a>
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <LL_RCC_HSI_Enable>:
{
 8005022:	b480      	push	{r7}
 8005024:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005034:	6013      	str	r3, [r2, #0]
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <LL_RCC_HSI_Disable>:
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005052:	6013      	str	r3, [r2, #0]
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <LL_RCC_HSI_IsReady>:
{
 800505e:	b480      	push	{r7}
 8005060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005070:	d101      	bne.n	8005076 <LL_RCC_HSI_IsReady+0x18>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <LL_RCC_HSI_IsReady+0x1a>
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800508a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	061b      	lsls	r3, r3, #24
 8005098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800509c:	4313      	orrs	r3, r2
 800509e:	604b      	str	r3, [r1, #4]
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <LL_RCC_HSI48_Enable>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80050b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80050c4:	bf00      	nop
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <LL_RCC_HSI48_Disable>:
{
 80050ce:	b480      	push	{r7}
 80050d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80050d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80050e6:	bf00      	nop
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <LL_RCC_HSI48_IsReady>:
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80050f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b02      	cmp	r3, #2
 8005102:	d101      	bne.n	8005108 <LL_RCC_HSI48_IsReady+0x18>
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <LL_RCC_HSI48_IsReady+0x1a>
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <LL_RCC_LSE_Enable>:
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <LL_RCC_LSE_Disable>:
{
 8005136:	b480      	push	{r7}
 8005138:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800513a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800514e:	bf00      	nop
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_RCC_LSE_EnableBypass>:
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800515c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005168:	f043 0304 	orr.w	r3, r3, #4
 800516c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <LL_RCC_LSE_DisableBypass>:
{
 800517a:	b480      	push	{r7}
 800517c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800518a:	f023 0304 	bic.w	r3, r3, #4
 800518e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005192:	bf00      	nop
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <LL_RCC_LSE_IsReady>:
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d101      	bne.n	80051b4 <LL_RCC_LSE_IsReady+0x18>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <LL_RCC_LSE_IsReady+0x1a>
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_RCC_LSI1_Enable>:
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <LL_RCC_LSI1_Disable>:
{
 80051e2:	b480      	push	{r7}
 80051e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80051fa:	bf00      	nop
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <LL_RCC_LSI1_IsReady>:
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d101      	bne.n	800521c <LL_RCC_LSI1_IsReady+0x18>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <LL_RCC_LSI1_IsReady+0x1a>
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <LL_RCC_LSI2_Enable>:
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005238:	f043 0304 	orr.w	r3, r3, #4
 800523c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005240:	bf00      	nop
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <LL_RCC_LSI2_Disable>:
{
 800524a:	b480      	push	{r7}
 800524c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800524e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800525a:	f023 0304 	bic.w	r3, r3, #4
 800525e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005262:	bf00      	nop
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <LL_RCC_LSI2_IsReady>:
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b08      	cmp	r3, #8
 800527e:	d101      	bne.n	8005284 <LL_RCC_LSI2_IsReady+0x18>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <LL_RCC_LSI2_IsReady+0x1a>
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <LL_RCC_LSI2_SetTrimming>:
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a0:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <LL_RCC_MSI_Enable>:
{
 80052be:	b480      	push	{r7}
 80052c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80052c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	6013      	str	r3, [r2, #0]
}
 80052d2:	bf00      	nop
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <LL_RCC_MSI_Disable>:
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	6013      	str	r3, [r2, #0]
}
 80052f0:	bf00      	nop
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_RCC_MSI_IsReady>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80052fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b02      	cmp	r3, #2
 800530a:	d101      	bne.n	8005310 <LL_RCC_MSI_IsReady+0x16>
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <LL_RCC_MSI_IsReady+0x18>
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <LL_RCC_MSI_SetRange>:
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800532e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <LL_RCC_MSI_GetRange>:
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005354:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2bb0      	cmp	r3, #176	; 0xb0
 800535a:	d901      	bls.n	8005360 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800535c:	23b0      	movs	r3, #176	; 0xb0
 800535e:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005360:	687b      	ldr	r3, [r7, #4]
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <LL_RCC_MSI_SetCalibTrimming>:
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005388:	4313      	orrs	r3, r2
 800538a:	604b      	str	r3, [r1, #4]
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <LL_RCC_SetSysClkSource>:
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80053a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 0203 	bic.w	r2, r3, #3
 80053aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	608b      	str	r3, [r1, #8]
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <LL_RCC_GetSysClkSource>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80053c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <LL_RCC_SetAHBPrescaler>:
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80053e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	608b      	str	r3, [r1, #8]
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <LL_RCC_SetAHB4Prescaler>:
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005438:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800543c:	f023 020f 	bic.w	r2, r3, #15
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <LL_RCC_SetAPB1Prescaler>:
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800546c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <LL_RCC_SetAPB2Prescaler>:
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <LL_RCC_GetAHBPrescaler>:
{
 80054aa:	b480      	push	{r7}
 80054ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80054ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <LL_C2_RCC_GetAHBPrescaler>:
{
 80054c2:	b480      	push	{r7}
 80054c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80054c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_RCC_GetAHB4Prescaler>:
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80054e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <LL_RCC_GetAPB1Prescaler>:
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80054fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005506:	4618      	mov	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <LL_RCC_GetAPB2Prescaler>:
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800551e:	4618      	mov	r0, r3
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <LL_RCC_PLL_Enable>:
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800552c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800553a:	6013      	str	r3, [r2, #0]
}
 800553c:	bf00      	nop
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <LL_RCC_PLL_Disable>:
{
 8005546:	b480      	push	{r7}
 8005548:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800554a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005558:	6013      	str	r3, [r2, #0]
}
 800555a:	bf00      	nop
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <LL_RCC_PLL_IsReady>:
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005576:	d101      	bne.n	800557c <LL_RCC_PLL_IsReady+0x18>
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <LL_RCC_PLL_IsReady+0x1a>
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <LL_RCC_PLL_GetN>:
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800558c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005598:	4618      	mov	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <LL_RCC_PLL_GetR>:
{
 80055a2:	b480      	push	{r7}
 80055a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80055a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <LL_RCC_PLL_GetDivider>:
{
 80055ba:	b480      	push	{r7}
 80055bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80055be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <LL_RCC_PLL_GetMainSource>:
{
 80055d2:	b480      	push	{r7}
 80055d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80055d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0303 	and.w	r3, r3, #3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <LL_RCC_IsActiveFlag_HPRE>:
{
 80055ea:	b480      	push	{r7}
 80055ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80055ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fc:	d101      	bne.n	8005602 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800560e:	b480      	push	{r7}
 8005610:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005616:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800561a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005622:	d101      	bne.n	8005628 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005648:	d101      	bne.n	800564e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800565a:	b480      	push	{r7}
 800565c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800565e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800566c:	d101      	bne.n	8005672 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800567e:	b480      	push	{r7}
 8005680:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800568c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005690:	d101      	bne.n	8005696 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
	...

080056a4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b08d      	sub	sp, #52	; 0x34
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e363      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 808d 	beq.w	80057de <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056c4:	f7ff fe7c 	bl	80053c0 <LL_RCC_GetSysClkSource>
 80056c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ca:	f7ff ff82 	bl	80055d2 <LL_RCC_PLL_GetMainSource>
 80056ce:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80056d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_RCC_OscConfig+0x3e>
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	2b0c      	cmp	r3, #12
 80056da:	d147      	bne.n	800576c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d144      	bne.n	800576c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e347      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80056f2:	f7ff fe27 	bl	8005344 <LL_RCC_MSI_GetRange>
 80056f6:	4603      	mov	r3, r0
 80056f8:	429c      	cmp	r4, r3
 80056fa:	d914      	bls.n	8005726 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fd4b 	bl	800619c <RCC_SetFlashLatencyFromMSIRange>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e336      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fe01 	bl	800531c <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fe25 	bl	800536e <LL_RCC_MSI_SetCalibTrimming>
 8005724:	e013      	b.n	800574e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fdf6 	bl	800531c <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fe1a 	bl	800536e <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fd2c 	bl	800619c <RCC_SetFlashLatencyFromMSIRange>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e317      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800574e:	f000 fcc9 	bl	80060e4 <HAL_RCC_GetHCLKFreq>
 8005752:	4603      	mov	r3, r0
 8005754:	4aa4      	ldr	r2, [pc, #656]	; (80059e8 <HAL_RCC_OscConfig+0x344>)
 8005756:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005758:	4ba4      	ldr	r3, [pc, #656]	; (80059ec <HAL_RCC_OscConfig+0x348>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fb45 	bl	8003dec <HAL_InitTick>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d039      	beq.n	80057dc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e308      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01e      	beq.n	80057b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005774:	f7ff fda3 	bl	80052be <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005778:	f7fe fd4e 	bl	8004218 <HAL_GetTick>
 800577c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005780:	f7fe fd4a 	bl	8004218 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e2f5      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005792:	f7ff fdb2 	bl	80052fa <LL_RCC_MSI_IsReady>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f1      	beq.n	8005780 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff fdbb 	bl	800531c <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fddf 	bl	800536e <LL_RCC_MSI_SetCalibTrimming>
 80057b0:	e015      	b.n	80057de <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057b2:	f7ff fd93 	bl	80052dc <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057b6:	f7fe fd2f 	bl	8004218 <HAL_GetTick>
 80057ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057be:	f7fe fd2b 	bl	8004218 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e2d6      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80057d0:	f7ff fd93 	bl	80052fa <LL_RCC_MSI_IsReady>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f1      	bne.n	80057be <HAL_RCC_OscConfig+0x11a>
 80057da:	e000      	b.n	80057de <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80057dc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d047      	beq.n	800587a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ea:	f7ff fde9 	bl	80053c0 <LL_RCC_GetSysClkSource>
 80057ee:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057f0:	f7ff feef 	bl	80055d2 <LL_RCC_PLL_GetMainSource>
 80057f4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d005      	beq.n	8005808 <HAL_RCC_OscConfig+0x164>
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d108      	bne.n	8005814 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d105      	bne.n	8005814 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d134      	bne.n	800587a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e2b4      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581c:	d102      	bne.n	8005824 <HAL_RCC_OscConfig+0x180>
 800581e:	f7ff fbd0 	bl	8004fc2 <LL_RCC_HSE_Enable>
 8005822:	e001      	b.n	8005828 <HAL_RCC_OscConfig+0x184>
 8005824:	f7ff fbdc 	bl	8004fe0 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d012      	beq.n	8005856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fe fcf2 	bl	8004218 <HAL_GetTick>
 8005834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005838:	f7fe fcee 	bl	8004218 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	; 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e299      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800584a:	f7ff fbd8 	bl	8004ffe <LL_RCC_HSE_IsReady>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f1      	beq.n	8005838 <HAL_RCC_OscConfig+0x194>
 8005854:	e011      	b.n	800587a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005856:	f7fe fcdf 	bl	8004218 <HAL_GetTick>
 800585a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800585e:	f7fe fcdb 	bl	8004218 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b64      	cmp	r3, #100	; 0x64
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e286      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005870:	f7ff fbc5 	bl	8004ffe <LL_RCC_HSE_IsReady>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f1      	bne.n	800585e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d04c      	beq.n	8005920 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005886:	f7ff fd9b 	bl	80053c0 <LL_RCC_GetSysClkSource>
 800588a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800588c:	f7ff fea1 	bl	80055d2 <LL_RCC_PLL_GetMainSource>
 8005890:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b04      	cmp	r3, #4
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_OscConfig+0x200>
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b0c      	cmp	r3, #12
 800589c:	d10e      	bne.n	80058bc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d10b      	bne.n	80058bc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e266      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff fbe4 	bl	8005082 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80058ba:	e031      	b.n	8005920 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d019      	beq.n	80058f8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058c4:	f7ff fbad 	bl	8005022 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fe fca6 	bl	8004218 <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058d0:	f7fe fca2 	bl	8004218 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e24d      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80058e2:	f7ff fbbc 	bl	800505e <LL_RCC_HSI_IsReady>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0f1      	beq.n	80058d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff fbc6 	bl	8005082 <LL_RCC_HSI_SetCalibTrimming>
 80058f6:	e013      	b.n	8005920 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058f8:	f7ff fba2 	bl	8005040 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fe fc8c 	bl	8004218 <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005904:	f7fe fc88 	bl	8004218 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e233      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005916:	f7ff fba2 	bl	800505e <LL_RCC_HSI_IsReady>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f1      	bne.n	8005904 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80a3 	beq.w	8005a80 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d076      	beq.n	8005a30 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b00      	cmp	r3, #0
 800594c:	d046      	beq.n	80059dc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800594e:	f7ff fc59 	bl	8005204 <LL_RCC_LSI1_IsReady>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d113      	bne.n	8005980 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005958:	f7ff fc32 	bl	80051c0 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800595c:	f7fe fc5c 	bl	8004218 <HAL_GetTick>
 8005960:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005964:	f7fe fc58 	bl	8004218 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e203      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005976:	f7ff fc45 	bl	8005204 <LL_RCC_LSI1_IsReady>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0f1      	beq.n	8005964 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005980:	f7ff fc52 	bl	8005228 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fe fc48 	bl	8004218 <HAL_GetTick>
 8005988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800598c:	f7fe fc44 	bl	8004218 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b03      	cmp	r3, #3
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e1ef      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800599e:	f7ff fc65 	bl	800526c <LL_RCC_LSI2_IsReady>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f1      	beq.n	800598c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fc6f 	bl	8005290 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80059b2:	f7ff fc16 	bl	80051e2 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b6:	f7fe fc2f 	bl	8004218 <HAL_GetTick>
 80059ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059be:	f7fe fc2b 	bl	8004218 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e1d6      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80059d0:	f7ff fc18 	bl	8005204 <LL_RCC_LSI1_IsReady>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f1      	bne.n	80059be <HAL_RCC_OscConfig+0x31a>
 80059da:	e051      	b.n	8005a80 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80059dc:	f7ff fbf0 	bl	80051c0 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fe fc1a 	bl	8004218 <HAL_GetTick>
 80059e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80059e6:	e00c      	b.n	8005a02 <HAL_RCC_OscConfig+0x35e>
 80059e8:	20000024 	.word	0x20000024
 80059ec:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059f0:	f7fe fc12 	bl	8004218 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e1bd      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005a02:	f7ff fbff 	bl	8005204 <LL_RCC_LSI1_IsReady>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0f1      	beq.n	80059f0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005a0c:	f7ff fc1d 	bl	800524a <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a12:	f7fe fc01 	bl	8004218 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e1ac      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005a24:	f7ff fc22 	bl	800526c <LL_RCC_LSI2_IsReady>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f1      	bne.n	8005a12 <HAL_RCC_OscConfig+0x36e>
 8005a2e:	e027      	b.n	8005a80 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005a30:	f7ff fc0b 	bl	800524a <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a34:	f7fe fbf0 	bl	8004218 <HAL_GetTick>
 8005a38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a3c:	f7fe fbec 	bl	8004218 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e197      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005a4e:	f7ff fc0d 	bl	800526c <LL_RCC_LSI2_IsReady>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f1      	bne.n	8005a3c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005a58:	f7ff fbc3 	bl	80051e2 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5c:	f7fe fbdc 	bl	8004218 <HAL_GetTick>
 8005a60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a64:	f7fe fbd8 	bl	8004218 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e183      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a76:	f7ff fbc5 	bl	8005204 <LL_RCC_LSI1_IsReady>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f1      	bne.n	8005a64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d05b      	beq.n	8005b44 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a8c:	4ba7      	ldr	r3, [pc, #668]	; (8005d2c <HAL_RCC_OscConfig+0x688>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d114      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a98:	f7ff f9e4 	bl	8004e64 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a9c:	f7fe fbbc 	bl	8004218 <HAL_GetTick>
 8005aa0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa4:	f7fe fbb8 	bl	8004218 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e163      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ab6:	4b9d      	ldr	r3, [pc, #628]	; (8005d2c <HAL_RCC_OscConfig+0x688>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0f0      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d102      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x42c>
 8005aca:	f7ff fb23 	bl	8005114 <LL_RCC_LSE_Enable>
 8005ace:	e00c      	b.n	8005aea <HAL_RCC_OscConfig+0x446>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b05      	cmp	r3, #5
 8005ad6:	d104      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x43e>
 8005ad8:	f7ff fb3e 	bl	8005158 <LL_RCC_LSE_EnableBypass>
 8005adc:	f7ff fb1a 	bl	8005114 <LL_RCC_LSE_Enable>
 8005ae0:	e003      	b.n	8005aea <HAL_RCC_OscConfig+0x446>
 8005ae2:	f7ff fb28 	bl	8005136 <LL_RCC_LSE_Disable>
 8005ae6:	f7ff fb48 	bl	800517a <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d014      	beq.n	8005b1c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af2:	f7fe fb91 	bl	8004218 <HAL_GetTick>
 8005af6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005af8:	e00a      	b.n	8005b10 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afa:	f7fe fb8d 	bl	8004218 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e136      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005b10:	f7ff fb44 	bl	800519c <LL_RCC_LSE_IsReady>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0ef      	beq.n	8005afa <HAL_RCC_OscConfig+0x456>
 8005b1a:	e013      	b.n	8005b44 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1c:	f7fe fb7c 	bl	8004218 <HAL_GetTick>
 8005b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b22:	e00a      	b.n	8005b3a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b24:	f7fe fb78 	bl	8004218 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e121      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b3a:	f7ff fb2f 	bl	800519c <LL_RCC_LSE_IsReady>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1ef      	bne.n	8005b24 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d02c      	beq.n	8005baa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d014      	beq.n	8005b82 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b58:	f7ff faa8 	bl	80050ac <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b5c:	f7fe fb5c 	bl	8004218 <HAL_GetTick>
 8005b60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b64:	f7fe fb58 	bl	8004218 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e103      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b76:	f7ff fabb 	bl	80050f0 <LL_RCC_HSI48_IsReady>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f1      	beq.n	8005b64 <HAL_RCC_OscConfig+0x4c0>
 8005b80:	e013      	b.n	8005baa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b82:	f7ff faa4 	bl	80050ce <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b86:	f7fe fb47 	bl	8004218 <HAL_GetTick>
 8005b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b8e:	f7fe fb43 	bl	8004218 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e0ee      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005ba0:	f7ff faa6 	bl	80050f0 <LL_RCC_HSI48_IsReady>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f1      	bne.n	8005b8e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 80e4 	beq.w	8005d7c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bb4:	f7ff fc04 	bl	80053c0 <LL_RCC_GetSysClkSource>
 8005bb8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	f040 80b4 	bne.w	8005d34 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f003 0203 	and.w	r2, r3, #3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d123      	bne.n	8005c22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d11c      	bne.n	8005c22 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d114      	bne.n	8005c22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d10d      	bne.n	8005c22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d106      	bne.n	8005c22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d05d      	beq.n	8005cde <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b0c      	cmp	r3, #12
 8005c26:	d058      	beq.n	8005cda <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e0a1      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c3a:	f7ff fc84 	bl	8005546 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c3e:	f7fe faeb 	bl	8004218 <HAL_GetTick>
 8005c42:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c46:	f7fe fae7 	bl	8004218 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e092      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1ef      	bne.n	8005c46 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	4b30      	ldr	r3, [pc, #192]	; (8005d30 <HAL_RCC_OscConfig+0x68c>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c78:	4311      	orrs	r1, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c7e:	0212      	lsls	r2, r2, #8
 8005c80:	4311      	orrs	r1, r2
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c86:	4311      	orrs	r1, r2
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c8c:	4311      	orrs	r1, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c92:	430a      	orrs	r2, r1
 8005c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c9c:	f7ff fc44 	bl	8005528 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cb0:	f7fe fab2 	bl	8004218 <HAL_GetTick>
 8005cb4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb8:	f7fe faae 	bl	8004218 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e059      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0ef      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cd8:	e050      	b.n	8005d7c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e04f      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d147      	bne.n	8005d7c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cec:	f7ff fc1c 	bl	8005528 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d00:	f7fe fa8a 	bl	8004218 <HAL_GetTick>
 8005d04:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d08:	f7fe fa86 	bl	8004218 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e031      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0ef      	beq.n	8005d08 <HAL_RCC_OscConfig+0x664>
 8005d28:	e028      	b.n	8005d7c <HAL_RCC_OscConfig+0x6d8>
 8005d2a:	bf00      	nop
 8005d2c:	58000400 	.word	0x58000400
 8005d30:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b0c      	cmp	r3, #12
 8005d38:	d01e      	beq.n	8005d78 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3a:	f7ff fc04 	bl	8005546 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3e:	f7fe fa6b 	bl	8004218 <HAL_GetTick>
 8005d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d46:	f7fe fa67 	bl	8004218 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e012      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1ef      	bne.n	8005d46 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCC_OscConfig+0x6e4>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	60cb      	str	r3, [r1, #12]
 8005d76:	e001      	b.n	8005d7c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3734      	adds	r7, #52	; 0x34
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd90      	pop	{r4, r7, pc}
 8005d86:	bf00      	nop
 8005d88:	eefefffc 	.word	0xeefefffc

08005d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e12d      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005da0:	4b98      	ldr	r3, [pc, #608]	; (8006004 <HAL_RCC_ClockConfig+0x278>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d91b      	bls.n	8005de6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dae:	4b95      	ldr	r3, [pc, #596]	; (8006004 <HAL_RCC_ClockConfig+0x278>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f023 0207 	bic.w	r2, r3, #7
 8005db6:	4993      	ldr	r1, [pc, #588]	; (8006004 <HAL_RCC_ClockConfig+0x278>)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dbe:	f7fe fa2b 	bl	8004218 <HAL_GetTick>
 8005dc2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005dc6:	f7fe fa27 	bl	8004218 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e111      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd8:	4b8a      	ldr	r3, [pc, #552]	; (8006004 <HAL_RCC_ClockConfig+0x278>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d1ef      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d016      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff faee 	bl	80053d8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005dfc:	f7fe fa0c 	bl	8004218 <HAL_GetTick>
 8005e00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e04:	f7fe fa08 	bl	8004218 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e0f2      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e16:	f7ff fbe8 	bl	80055ea <LL_RCC_IsActiveFlag_HPRE>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f1      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d016      	beq.n	8005e5a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fae5 	bl	8005400 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e36:	f7fe f9ef 	bl	8004218 <HAL_GetTick>
 8005e3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e3c:	e008      	b.n	8005e50 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e3e:	f7fe f9eb 	bl	8004218 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e0d5      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e50:	f7ff fbdd 	bl	800560e <LL_RCC_IsActiveFlag_C2HPRE>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0f1      	beq.n	8005e3e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d016      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff fade 	bl	800542c <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e70:	f7fe f9d2 	bl	8004218 <HAL_GetTick>
 8005e74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e78:	f7fe f9ce 	bl	8004218 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e0b8      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e8a:	f7ff fbd3 	bl	8005634 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0f1      	beq.n	8005e78 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d016      	beq.n	8005ece <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fad8 	bl	800545a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005eaa:	f7fe f9b5 	bl	8004218 <HAL_GetTick>
 8005eae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005eb2:	f7fe f9b1 	bl	8004218 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e09b      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ec4:	f7ff fbc9 	bl	800565a <LL_RCC_IsActiveFlag_PPRE1>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f1      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d017      	beq.n	8005f0a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff face 	bl	8005482 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ee6:	f7fe f997 	bl	8004218 <HAL_GetTick>
 8005eea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005eee:	f7fe f993 	bl	8004218 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e07d      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f00:	f7ff fbbd 	bl	800567e <LL_RCC_IsActiveFlag_PPRE2>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0f1      	beq.n	8005eee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d043      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d106      	bne.n	8005f2c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005f1e:	f7ff f86e 	bl	8004ffe <LL_RCC_HSE_IsReady>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d11e      	bne.n	8005f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e067      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d106      	bne.n	8005f42 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005f34:	f7ff fb16 	bl	8005564 <LL_RCC_PLL_IsReady>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d113      	bne.n	8005f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e05c      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005f4a:	f7ff f9d6 	bl	80052fa <LL_RCC_MSI_IsReady>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d108      	bne.n	8005f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e051      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005f58:	f7ff f881 	bl	800505e <LL_RCC_HSI_IsReady>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e04a      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff fa14 	bl	8005398 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f70:	f7fe f952 	bl	8004218 <HAL_GetTick>
 8005f74:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f76:	e00a      	b.n	8005f8e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f78:	f7fe f94e 	bl	8004218 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e036      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f8e:	f7ff fa17 	bl	80053c0 <LL_RCC_GetSysClkSource>
 8005f92:	4602      	mov	r2, r0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d1ec      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f9e:	4b19      	ldr	r3, [pc, #100]	; (8006004 <HAL_RCC_ClockConfig+0x278>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d21b      	bcs.n	8005fe4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fac:	4b15      	ldr	r3, [pc, #84]	; (8006004 <HAL_RCC_ClockConfig+0x278>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f023 0207 	bic.w	r2, r3, #7
 8005fb4:	4913      	ldr	r1, [pc, #76]	; (8006004 <HAL_RCC_ClockConfig+0x278>)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fbc:	f7fe f92c 	bl	8004218 <HAL_GetTick>
 8005fc0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005fc4:	f7fe f928 	bl	8004218 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e012      	b.n	8005ffc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <HAL_RCC_ClockConfig+0x278>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d1ef      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005fe4:	f000 f87e 	bl	80060e4 <HAL_RCC_GetHCLKFreq>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4a07      	ldr	r2, [pc, #28]	; (8006008 <HAL_RCC_ClockConfig+0x27c>)
 8005fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005fee:	f7fe f91f 	bl	8004230 <HAL_GetTickPrio>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fd fef9 	bl	8003dec <HAL_InitTick>
 8005ffa:	4603      	mov	r3, r0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	58004000 	.word	0x58004000
 8006008:	20000024 	.word	0x20000024

0800600c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800600c:	b590      	push	{r4, r7, lr}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006012:	f7ff f9d5 	bl	80053c0 <LL_RCC_GetSysClkSource>
 8006016:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800601e:	f7ff f991 	bl	8005344 <LL_RCC_MSI_GetRange>
 8006022:	4603      	mov	r3, r0
 8006024:	091b      	lsrs	r3, r3, #4
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	4a2b      	ldr	r2, [pc, #172]	; (80060d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800602c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	e04b      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b04      	cmp	r3, #4
 8006038:	d102      	bne.n	8006040 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800603a:	4b28      	ldr	r3, [pc, #160]	; (80060dc <HAL_RCC_GetSysClockFreq+0xd0>)
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e045      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b08      	cmp	r3, #8
 8006044:	d10a      	bne.n	800605c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006046:	f7fe ffaa 	bl	8004f9e <LL_RCC_HSE_IsEnabledDiv2>
 800604a:	4603      	mov	r3, r0
 800604c:	2b01      	cmp	r3, #1
 800604e:	d102      	bne.n	8006056 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006050:	4b22      	ldr	r3, [pc, #136]	; (80060dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	e03a      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006056:	4b22      	ldr	r3, [pc, #136]	; (80060e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	e037      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800605c:	f7ff fab9 	bl	80055d2 <LL_RCC_PLL_GetMainSource>
 8006060:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d003      	beq.n	8006070 <HAL_RCC_GetSysClockFreq+0x64>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b03      	cmp	r3, #3
 800606c:	d003      	beq.n	8006076 <HAL_RCC_GetSysClockFreq+0x6a>
 800606e:	e00d      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006070:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006072:	60bb      	str	r3, [r7, #8]
        break;
 8006074:	e015      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006076:	f7fe ff92 	bl	8004f9e <LL_RCC_HSE_IsEnabledDiv2>
 800607a:	4603      	mov	r3, r0
 800607c:	2b01      	cmp	r3, #1
 800607e:	d102      	bne.n	8006086 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006080:	4b16      	ldr	r3, [pc, #88]	; (80060dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006082:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006084:	e00d      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006086:	4b16      	ldr	r3, [pc, #88]	; (80060e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006088:	60bb      	str	r3, [r7, #8]
        break;
 800608a:	e00a      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800608c:	f7ff f95a 	bl	8005344 <LL_RCC_MSI_GetRange>
 8006090:	4603      	mov	r3, r0
 8006092:	091b      	lsrs	r3, r3, #4
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	4a0f      	ldr	r2, [pc, #60]	; (80060d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800609a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800609e:	60bb      	str	r3, [r7, #8]
        break;
 80060a0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80060a2:	f7ff fa71 	bl	8005588 <LL_RCC_PLL_GetN>
 80060a6:	4602      	mov	r2, r0
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	fb03 f402 	mul.w	r4, r3, r2
 80060ae:	f7ff fa84 	bl	80055ba <LL_RCC_PLL_GetDivider>
 80060b2:	4603      	mov	r3, r0
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	3301      	adds	r3, #1
 80060b8:	fbb4 f4f3 	udiv	r4, r4, r3
 80060bc:	f7ff fa71 	bl	80055a2 <LL_RCC_PLL_GetR>
 80060c0:	4603      	mov	r3, r0
 80060c2:	0f5b      	lsrs	r3, r3, #29
 80060c4:	3301      	adds	r3, #1
 80060c6:	fbb4 f3f3 	udiv	r3, r4, r3
 80060ca:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80060cc:	68fb      	ldr	r3, [r7, #12]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd90      	pop	{r4, r7, pc}
 80060d6:	bf00      	nop
 80060d8:	0800e850 	.word	0x0800e850
 80060dc:	00f42400 	.word	0x00f42400
 80060e0:	01e84800 	.word	0x01e84800

080060e4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060e4:	b598      	push	{r3, r4, r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80060e8:	f7ff ff90 	bl	800600c <HAL_RCC_GetSysClockFreq>
 80060ec:	4604      	mov	r4, r0
 80060ee:	f7ff f9dc 	bl	80054aa <LL_RCC_GetAHBPrescaler>
 80060f2:	4603      	mov	r3, r0
 80060f4:	091b      	lsrs	r3, r3, #4
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	4a03      	ldr	r2, [pc, #12]	; (8006108 <HAL_RCC_GetHCLKFreq+0x24>)
 80060fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006100:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006104:	4618      	mov	r0, r3
 8006106:	bd98      	pop	{r3, r4, r7, pc}
 8006108:	0800e7f0 	.word	0x0800e7f0

0800610c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800610c:	b598      	push	{r3, r4, r7, lr}
 800610e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006110:	f7ff ffe8 	bl	80060e4 <HAL_RCC_GetHCLKFreq>
 8006114:	4604      	mov	r4, r0
 8006116:	f7ff f9fb 	bl	8005510 <LL_RCC_GetAPB2Prescaler>
 800611a:	4603      	mov	r3, r0
 800611c:	0adb      	lsrs	r3, r3, #11
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	4a04      	ldr	r2, [pc, #16]	; (8006134 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006130:	4618      	mov	r0, r3
 8006132:	bd98      	pop	{r3, r4, r7, pc}
 8006134:	0800e830 	.word	0x0800e830

08006138 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	226f      	movs	r2, #111	; 0x6f
 8006146:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006148:	f7ff f93a 	bl	80053c0 <LL_RCC_GetSysClkSource>
 800614c:	4602      	mov	r2, r0
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8006152:	f7ff f9aa 	bl	80054aa <LL_RCC_GetAHBPrescaler>
 8006156:	4602      	mov	r2, r0
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800615c:	f7ff f9cc 	bl	80054f8 <LL_RCC_GetAPB1Prescaler>
 8006160:	4602      	mov	r2, r0
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8006166:	f7ff f9d3 	bl	8005510 <LL_RCC_GetAPB2Prescaler>
 800616a:	4602      	mov	r2, r0
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006170:	f7ff f9a7 	bl	80054c2 <LL_C2_RCC_GetAHBPrescaler>
 8006174:	4602      	mov	r2, r0
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800617a:	f7ff f9af 	bl	80054dc <LL_RCC_GetAHB4Prescaler>
 800617e:	4602      	mov	r2, r0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006184:	4b04      	ldr	r3, [pc, #16]	; (8006198 <HAL_RCC_GetClockConfig+0x60>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0207 	and.w	r2, r3, #7
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	601a      	str	r2, [r3, #0]
}
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	58004000 	.word	0x58004000

0800619c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2bb0      	cmp	r3, #176	; 0xb0
 80061a8:	d903      	bls.n	80061b2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80061aa:	4b15      	ldr	r3, [pc, #84]	; (8006200 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	e007      	b.n	80061c2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	091b      	lsrs	r3, r3, #4
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	4a11      	ldr	r2, [pc, #68]	; (8006200 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80061bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80061c2:	f7ff f98b 	bl	80054dc <LL_RCC_GetAHB4Prescaler>
 80061c6:	4603      	mov	r3, r0
 80061c8:	091b      	lsrs	r3, r3, #4
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	4a0d      	ldr	r2, [pc, #52]	; (8006204 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80061d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4a0a      	ldr	r2, [pc, #40]	; (8006208 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80061e0:	fba2 2303 	umull	r2, r3, r2, r3
 80061e4:	0c9c      	lsrs	r4, r3, #18
 80061e6:	f7fe fe95 	bl	8004f14 <HAL_PWREx_GetVoltageRange>
 80061ea:	4603      	mov	r3, r0
 80061ec:	4619      	mov	r1, r3
 80061ee:	4620      	mov	r0, r4
 80061f0:	f000 f80c 	bl	800620c <RCC_SetFlashLatency>
 80061f4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd90      	pop	{r4, r7, pc}
 80061fe:	bf00      	nop
 8006200:	0800e850 	.word	0x0800e850
 8006204:	0800e7f0 	.word	0x0800e7f0
 8006208:	431bde83 	.word	0x431bde83

0800620c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800620c:	b590      	push	{r4, r7, lr}
 800620e:	b093      	sub	sp, #76	; 0x4c
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006216:	4b37      	ldr	r3, [pc, #220]	; (80062f4 <RCC_SetFlashLatency+0xe8>)
 8006218:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800621c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800621e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006222:	4a35      	ldr	r2, [pc, #212]	; (80062f8 <RCC_SetFlashLatency+0xec>)
 8006224:	f107 031c 	add.w	r3, r7, #28
 8006228:	ca07      	ldmia	r2, {r0, r1, r2}
 800622a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800622e:	4b33      	ldr	r3, [pc, #204]	; (80062fc <RCC_SetFlashLatency+0xf0>)
 8006230:	f107 040c 	add.w	r4, r7, #12
 8006234:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006236:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800623a:	2300      	movs	r3, #0
 800623c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006244:	d11a      	bne.n	800627c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006246:	2300      	movs	r3, #0
 8006248:	643b      	str	r3, [r7, #64]	; 0x40
 800624a:	e013      	b.n	8006274 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800624c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	3348      	adds	r3, #72	; 0x48
 8006252:	443b      	add	r3, r7
 8006254:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d807      	bhi.n	800626e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800625e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	3348      	adds	r3, #72	; 0x48
 8006264:	443b      	add	r3, r7
 8006266:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800626a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800626c:	e020      	b.n	80062b0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800626e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006270:	3301      	adds	r3, #1
 8006272:	643b      	str	r3, [r7, #64]	; 0x40
 8006274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006276:	2b03      	cmp	r3, #3
 8006278:	d9e8      	bls.n	800624c <RCC_SetFlashLatency+0x40>
 800627a:	e019      	b.n	80062b0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800627c:	2300      	movs	r3, #0
 800627e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006280:	e013      	b.n	80062aa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	3348      	adds	r3, #72	; 0x48
 8006288:	443b      	add	r3, r7
 800628a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	429a      	cmp	r2, r3
 8006292:	d807      	bhi.n	80062a4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	3348      	adds	r3, #72	; 0x48
 800629a:	443b      	add	r3, r7
 800629c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80062a0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80062a2:	e005      	b.n	80062b0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80062a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a6:	3301      	adds	r3, #1
 80062a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d9e8      	bls.n	8006282 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80062b0:	4b13      	ldr	r3, [pc, #76]	; (8006300 <RCC_SetFlashLatency+0xf4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f023 0207 	bic.w	r2, r3, #7
 80062b8:	4911      	ldr	r1, [pc, #68]	; (8006300 <RCC_SetFlashLatency+0xf4>)
 80062ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062bc:	4313      	orrs	r3, r2
 80062be:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062c0:	f7fd ffaa 	bl	8004218 <HAL_GetTick>
 80062c4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80062c6:	e008      	b.n	80062da <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062c8:	f7fd ffa6 	bl	8004218 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e007      	b.n	80062ea <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80062da:	4b09      	ldr	r3, [pc, #36]	; (8006300 <RCC_SetFlashLatency+0xf4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d1ef      	bne.n	80062c8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	374c      	adds	r7, #76	; 0x4c
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd90      	pop	{r4, r7, pc}
 80062f2:	bf00      	nop
 80062f4:	0800e6d8 	.word	0x0800e6d8
 80062f8:	0800e6e8 	.word	0x0800e6e8
 80062fc:	0800e6f4 	.word	0x0800e6f4
 8006300:	58004000 	.word	0x58004000

08006304 <LL_RCC_LSE_IsEnabled>:
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <LL_RCC_LSE_IsEnabled+0x18>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <LL_RCC_LSE_IsEnabled+0x1a>
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <LL_RCC_LSE_IsReady>:
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800632c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b02      	cmp	r3, #2
 800633a:	d101      	bne.n	8006340 <LL_RCC_LSE_IsReady+0x18>
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <LL_RCC_LSE_IsReady+0x1a>
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_RCC_SetRFWKPClockSource>:
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800635c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <LL_RCC_SetSMPSClockSource>:
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	f023 0203 	bic.w	r2, r3, #3
 800638a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4313      	orrs	r3, r2
 8006392:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <LL_RCC_SetSMPSPrescaler>:
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80063a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <LL_RCC_SetUSARTClockSource>:
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80063d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	f023 0203 	bic.w	r2, r3, #3
 80063dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <LL_RCC_SetLPUARTClockSource>:
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80063fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006404:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <LL_RCC_SetI2CClockSource>:
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	091b      	lsrs	r3, r3, #4
 8006434:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006438:	43db      	mvns	r3, r3
 800643a:	401a      	ands	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <LL_RCC_SetLPTIMClockSource>:
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006466:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	0c1b      	lsrs	r3, r3, #16
 800646e:	041b      	lsls	r3, r3, #16
 8006470:	43db      	mvns	r3, r3
 8006472:	401a      	ands	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <LL_RCC_SetSAIClockSource>:
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <LL_RCC_SetRNGClockSource>:
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80064c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80064ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <LL_RCC_SetCLK48ClockSource>:
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80064ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <LL_RCC_SetUSBClockSource>:
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff ffe3 	bl	80064e6 <LL_RCC_SetCLK48ClockSource>
}
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <LL_RCC_SetADCClockSource>:
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800653c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <LL_RCC_SetRTCClockSource>:
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800655c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006568:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <LL_RCC_GetRTCClockSource>:
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006590:	4618      	mov	r0, r3
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <LL_RCC_ForceBackupDomainReset>:
{
 800659a:	b480      	push	{r7}
 800659c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800659e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80065b2:	bf00      	nop
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <LL_RCC_ReleaseBackupDomainReset>:
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80065c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <LL_RCC_PLLSAI1_Enable>:
{
 80065de:	b480      	push	{r7}
 80065e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80065e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065f0:	6013      	str	r3, [r2, #0]
}
 80065f2:	bf00      	nop
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <LL_RCC_PLLSAI1_Disable>:
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800660a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800660e:	6013      	str	r3, [r2, #0]
}
 8006610:	bf00      	nop
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <LL_RCC_PLLSAI1_IsReady>:
{
 800661a:	b480      	push	{r7}
 800661c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800661e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800662c:	d101      	bne.n	8006632 <LL_RCC_PLLSAI1_IsReady+0x18>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b088      	sub	sp, #32
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006646:	2300      	movs	r3, #0
 8006648:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800664a:	2300      	movs	r3, #0
 800664c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d034      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006662:	d021      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006664:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006668:	d81b      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800666a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800666e:	d01d      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006674:	d815      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800667a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800667e:	d110      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800668a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800668e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006690:	e00d      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3304      	adds	r3, #4
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f947 	bl	800692a <RCCEx_PLLSAI1_ConfigNP>
 800669c:	4603      	mov	r3, r0
 800669e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80066a0:	e005      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	77fb      	strb	r3, [r7, #31]
        break;
 80066a6:	e002      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80066a8:	bf00      	nop
 80066aa:	e000      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80066ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ae:	7ffb      	ldrb	r3, [r7, #31]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d105      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff fee8 	bl	800648e <LL_RCC_SetSAIClockSource>
 80066be:	e001      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	7ffb      	ldrb	r3, [r7, #31]
 80066c2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d046      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80066d0:	f7ff ff56 	bl	8006580 <LL_RCC_GetRTCClockSource>
 80066d4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d03c      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80066e0:	f7fe fbc0 	bl	8004e64 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d105      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff ff30 	bl	8006554 <LL_RCC_SetRTCClockSource>
 80066f4:	e02e      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80066f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006700:	f7ff ff4b 	bl	800659a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006704:	f7ff ff5a 	bl	80065bc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006720:	f7ff fdf0 	bl	8006304 <LL_RCC_LSE_IsEnabled>
 8006724:	4603      	mov	r3, r0
 8006726:	2b01      	cmp	r3, #1
 8006728:	d114      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800672a:	f7fd fd75 	bl	8004218 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006730:	e00b      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006732:	f7fd fd71 	bl	8004218 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006740:	4293      	cmp	r3, r2
 8006742:	d902      	bls.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	77fb      	strb	r3, [r7, #31]
              break;
 8006748:	e004      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800674a:	f7ff fded 	bl	8006328 <LL_RCC_LSE_IsReady>
 800674e:	4603      	mov	r3, r0
 8006750:	2b01      	cmp	r3, #1
 8006752:	d1ee      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006754:	7ffb      	ldrb	r3, [r7, #31]
 8006756:	77bb      	strb	r3, [r7, #30]
 8006758:	e001      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	7ffb      	ldrb	r3, [r7, #31]
 800675c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d004      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff fe2a 	bl	80063c8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fe35 	bl	80063f4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fe5d 	bl	800645a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fe52 	bl	800645a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d004      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fe2a 	bl	8006420 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fe1f 	bl	8006420 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d022      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fe8d 	bl	8006512 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006800:	d107      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800680c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006810:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006816:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800681a:	d10b      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	4618      	mov	r0, r3
 8006822:	f000 f8dd 	bl	80069e0 <RCCEx_PLLSAI1_ConfigNQ>
 8006826:	4603      	mov	r3, r0
 8006828:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800682a:	7ffb      	ldrb	r3, [r7, #31]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006830:	7ffb      	ldrb	r3, [r7, #31]
 8006832:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800683c:	2b00      	cmp	r3, #0
 800683e:	d02b      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006848:	d008      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006852:	d003      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	2b00      	cmp	r3, #0
 800685a:	d105      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fe2a 	bl	80064ba <LL_RCC_SetRNGClockSource>
 8006866:	e00a      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	2000      	movs	r0, #0
 8006874:	f7ff fe21 	bl	80064ba <LL_RCC_SetRNGClockSource>
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f7ff fe34 	bl	80064e6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006886:	d107      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006896:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d022      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fe3d 	bl	8006528 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b6:	d107      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068d0:	d10b      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3304      	adds	r3, #4
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 f8dd 	bl	8006a96 <RCCEx_PLLSAI1_ConfigNR>
 80068dc:	4603      	mov	r3, r0
 80068de:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80068e6:	7ffb      	ldrb	r3, [r7, #31]
 80068e8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff fd26 	bl	800634c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d009      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fd45 	bl	80063a0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fd2c 	bl	8006378 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006920:	7fbb      	ldrb	r3, [r7, #30]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006936:	f7ff fe61 	bl	80065fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800693a:	f7fd fc6d 	bl	8004218 <HAL_GetTick>
 800693e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006940:	e009      	b.n	8006956 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006942:	f7fd fc69 	bl	8004218 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d902      	bls.n	8006956 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	73fb      	strb	r3, [r7, #15]
      break;
 8006954:	e004      	b.n	8006960 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006956:	f7ff fe60 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1f0      	bne.n	8006942 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d137      	bne.n	80069d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800697a:	4313      	orrs	r3, r2
 800697c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800697e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006990:	4313      	orrs	r3, r2
 8006992:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006994:	f7ff fe23 	bl	80065de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006998:	f7fd fc3e 	bl	8004218 <HAL_GetTick>
 800699c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800699e:	e009      	b.n	80069b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069a0:	f7fd fc3a 	bl	8004218 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d902      	bls.n	80069b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	73fb      	strb	r3, [r7, #15]
        break;
 80069b2:	e004      	b.n	80069be <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069b4:	f7ff fe31 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d1f0      	bne.n	80069a0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d108      	bne.n	80069d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80069c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c8:	691a      	ldr	r2, [r3, #16]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069d2:	4313      	orrs	r3, r2
 80069d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80069ec:	f7ff fe06 	bl	80065fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069f0:	f7fd fc12 	bl	8004218 <HAL_GetTick>
 80069f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80069f6:	e009      	b.n	8006a0c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069f8:	f7fd fc0e 	bl	8004218 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d902      	bls.n	8006a0c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	73fb      	strb	r3, [r7, #15]
      break;
 8006a0a:	e004      	b.n	8006a16 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a0c:	f7ff fe05 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f0      	bne.n	80069f8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d137      	bne.n	8006a8c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a30:	4313      	orrs	r3, r2
 8006a32:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a46:	4313      	orrs	r3, r2
 8006a48:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006a4a:	f7ff fdc8 	bl	80065de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4e:	f7fd fbe3 	bl	8004218 <HAL_GetTick>
 8006a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a54:	e009      	b.n	8006a6a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a56:	f7fd fbdf 	bl	8004218 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d902      	bls.n	8006a6a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	73fb      	strb	r3, [r7, #15]
        break;
 8006a68:	e004      	b.n	8006a74 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a6a:	f7ff fdd6 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d1f0      	bne.n	8006a56 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d108      	bne.n	8006a8c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006aa2:	f7ff fdab 	bl	80065fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006aa6:	f7fd fbb7 	bl	8004218 <HAL_GetTick>
 8006aaa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006aac:	e009      	b.n	8006ac2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aae:	f7fd fbb3 	bl	8004218 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d902      	bls.n	8006ac2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac0:	e004      	b.n	8006acc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ac2:	f7ff fdaa 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f0      	bne.n	8006aae <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d137      	bne.n	8006b42 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006afc:	4313      	orrs	r3, r2
 8006afe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006b00:	f7ff fd6d 	bl	80065de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b04:	f7fd fb88 	bl	8004218 <HAL_GetTick>
 8006b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b0a:	e009      	b.n	8006b20 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b0c:	f7fd fb84 	bl	8004218 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d902      	bls.n	8006b20 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b1e:	e004      	b.n	8006b2a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b20:	f7ff fd7b 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d1f0      	bne.n	8006b0c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d108      	bne.n	8006b42 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e09f      	b.n	8006c9e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fd f8de 	bl	8003d34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006b80:	4b49      	ldr	r3, [pc, #292]	; (8006ca8 <HAL_RTC_Init+0x15c>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d07e      	beq.n	8006c8a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	22ca      	movs	r2, #202	; 0xca
 8006b92:	625a      	str	r2, [r3, #36]	; 0x24
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2253      	movs	r2, #83	; 0x53
 8006b9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f8ab 	bl	8006cf8 <RTC_EnterInitMode>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00a      	beq.n	8006bbe <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	22ff      	movs	r2, #255	; 0xff
 8006bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2204      	movs	r2, #4
 8006bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
 8006bbc:	e067      	b.n	8006c8e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6812      	ldr	r2, [r2, #0]
 8006bc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6899      	ldr	r1, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	68d2      	ldr	r2, [r2, #12]
 8006bf8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6919      	ldr	r1, [r3, #16]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	041a      	lsls	r2, r3, #16
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c1c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0203 	bic.w	r2, r2, #3
 8006c2c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d113      	bne.n	8006c7c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f829 	bl	8006cac <HAL_RTC_WaitForSynchro>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00d      	beq.n	8006c7c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	22ff      	movs	r2, #255	; 0xff
 8006c66:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e010      	b.n	8006c9e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	22ff      	movs	r2, #255	; 0xff
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]
 8006c88:	e001      	b.n	8006c8e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40002800 	.word	0x40002800

08006cac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006cc2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006cc4:	f7fd faa8 	bl	8004218 <HAL_GetTick>
 8006cc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006cca:	e009      	b.n	8006ce0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ccc:	f7fd faa4 	bl	8004218 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cda:	d901      	bls.n	8006ce0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e007      	b.n	8006cf0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0ee      	beq.n	8006ccc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d119      	bne.n	8006d42 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f04f 32ff 	mov.w	r2, #4294967295
 8006d16:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006d18:	f7fd fa7e 	bl	8004218 <HAL_GetTick>
 8006d1c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006d1e:	e009      	b.n	8006d34 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006d20:	f7fd fa7a 	bl	8004218 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d2e:	d901      	bls.n	8006d34 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e007      	b.n	8006d44 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0ee      	beq.n	8006d20 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006d62:	2302      	movs	r3, #2
 8006d64:	e0a8      	b.n	8006eb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	22ca      	movs	r2, #202	; 0xca
 8006d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2253      	movs	r2, #83	; 0x53
 8006d84:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d020      	beq.n	8006dd6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006d94:	f7fd fa40 	bl	8004218 <HAL_GetTick>
 8006d98:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006d9a:	e015      	b.n	8006dc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d9c:	f7fd fa3c 	bl	8004218 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006daa:	d90d      	bls.n	8006dc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	22ff      	movs	r2, #255	; 0xff
 8006db2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2203      	movs	r2, #3
 8006db8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e077      	b.n	8006eb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e2      	bne.n	8006d9c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006df6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006df8:	f7fd fa0e 	bl	8004218 <HAL_GetTick>
 8006dfc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006dfe:	e015      	b.n	8006e2c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e00:	f7fd fa0a 	bl	8004218 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e0e:	d90d      	bls.n	8006e2c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	22ff      	movs	r2, #255	; 0xff
 8006e16:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2203      	movs	r2, #3
 8006e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e045      	b.n	8006eb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0e2      	beq.n	8006e00 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0207 	bic.w	r2, r2, #7
 8006e50:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6899      	ldr	r1, [r3, #8]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006e62:	4b17      	ldr	r3, [pc, #92]	; (8006ec0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e68:	4a15      	ldr	r2, [pc, #84]	; (8006ec0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006e72:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a12      	ldr	r2, [pc, #72]	; (8006ec0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e7c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e8c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e9c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	22ff      	movs	r2, #255	; 0xff
 8006ea4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	58000800 	.word	0x58000800

08006ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e049      	b.n	8006f6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f841 	bl	8006f72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f000 f9d6 	bl	80072b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d001      	beq.n	8006fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e036      	b.n	800700e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a17      	ldr	r2, [pc, #92]	; (800701c <HAL_TIM_Base_Start_IT+0x94>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x44>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fca:	d115      	bne.n	8006ff8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	4b13      	ldr	r3, [pc, #76]	; (8007020 <HAL_TIM_Base_Start_IT+0x98>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b06      	cmp	r3, #6
 8006fdc:	d015      	beq.n	800700a <HAL_TIM_Base_Start_IT+0x82>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe4:	d011      	beq.n	800700a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0201 	orr.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff6:	e008      	b.n	800700a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0201 	orr.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	e000      	b.n	800700c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40012c00 	.word	0x40012c00
 8007020:	00010007 	.word	0x00010007

08007024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b02      	cmp	r3, #2
 8007038:	d122      	bne.n	8007080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b02      	cmp	r3, #2
 8007046:	d11b      	bne.n	8007080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0202 	mvn.w	r2, #2
 8007050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f905 	bl	8007276 <HAL_TIM_IC_CaptureCallback>
 800706c:	e005      	b.n	800707a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f8f7 	bl	8007262 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f908 	bl	800728a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b04      	cmp	r3, #4
 800708c:	d122      	bne.n	80070d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b04      	cmp	r3, #4
 800709a:	d11b      	bne.n	80070d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0204 	mvn.w	r2, #4
 80070a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2202      	movs	r2, #2
 80070aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f8db 	bl	8007276 <HAL_TIM_IC_CaptureCallback>
 80070c0:	e005      	b.n	80070ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8cd 	bl	8007262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f8de 	bl	800728a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b08      	cmp	r3, #8
 80070e0:	d122      	bne.n	8007128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d11b      	bne.n	8007128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0208 	mvn.w	r2, #8
 80070f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2204      	movs	r2, #4
 80070fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f8b1 	bl	8007276 <HAL_TIM_IC_CaptureCallback>
 8007114:	e005      	b.n	8007122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f8a3 	bl	8007262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f8b4 	bl	800728a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	2b10      	cmp	r3, #16
 8007134:	d122      	bne.n	800717c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f003 0310 	and.w	r3, r3, #16
 8007140:	2b10      	cmp	r3, #16
 8007142:	d11b      	bne.n	800717c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0210 	mvn.w	r2, #16
 800714c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2208      	movs	r2, #8
 8007152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f887 	bl	8007276 <HAL_TIM_IC_CaptureCallback>
 8007168:	e005      	b.n	8007176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f879 	bl	8007262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f88a 	bl	800728a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b01      	cmp	r3, #1
 8007188:	d10e      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b01      	cmp	r3, #1
 8007196:	d107      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f06f 0201 	mvn.w	r2, #1
 80071a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7fc fb0e 	bl	80037c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b2:	2b80      	cmp	r3, #128	; 0x80
 80071b4:	d10e      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c0:	2b80      	cmp	r3, #128	; 0x80
 80071c2:	d107      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f8de 	bl	8007390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e2:	d10e      	bne.n	8007202 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ee:	2b80      	cmp	r3, #128	; 0x80
 80071f0:	d107      	bne.n	8007202 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f8d1 	bl	80073a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	d10e      	bne.n	800722e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721a:	2b40      	cmp	r3, #64	; 0x40
 800721c:	d107      	bne.n	800722e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f838 	bl	800729e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b20      	cmp	r3, #32
 800723a:	d10e      	bne.n	800725a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b20      	cmp	r3, #32
 8007248:	d107      	bne.n	800725a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f06f 0220 	mvn.w	r2, #32
 8007252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f891 	bl	800737c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a2a      	ldr	r2, [pc, #168]	; (8007370 <TIM_Base_SetConfig+0xbc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d003      	beq.n	80072d4 <TIM_Base_SetConfig+0x20>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d2:	d108      	bne.n	80072e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a21      	ldr	r2, [pc, #132]	; (8007370 <TIM_Base_SetConfig+0xbc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d00b      	beq.n	8007306 <TIM_Base_SetConfig+0x52>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f4:	d007      	beq.n	8007306 <TIM_Base_SetConfig+0x52>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a1e      	ldr	r2, [pc, #120]	; (8007374 <TIM_Base_SetConfig+0xc0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d003      	beq.n	8007306 <TIM_Base_SetConfig+0x52>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a1d      	ldr	r2, [pc, #116]	; (8007378 <TIM_Base_SetConfig+0xc4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d108      	bne.n	8007318 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a0c      	ldr	r2, [pc, #48]	; (8007370 <TIM_Base_SetConfig+0xbc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d007      	beq.n	8007354 <TIM_Base_SetConfig+0xa0>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a0b      	ldr	r2, [pc, #44]	; (8007374 <TIM_Base_SetConfig+0xc0>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d003      	beq.n	8007354 <TIM_Base_SetConfig+0xa0>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a0a      	ldr	r2, [pc, #40]	; (8007378 <TIM_Base_SetConfig+0xc4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d103      	bne.n	800735c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	691a      	ldr	r2, [r3, #16]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	615a      	str	r2, [r3, #20]
}
 8007362:	bf00      	nop
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	40012c00 	.word	0x40012c00
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800

0800737c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b091      	sub	sp, #68	; 0x44
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	4613      	mov	r3, r2
 80073c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d178      	bne.n	80074c2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_UART_Transmit_IT+0x24>
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e071      	b.n	80074c4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	88fa      	ldrh	r2, [r7, #6]
 80073ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	88fa      	ldrh	r2, [r7, #6]
 80073f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2221      	movs	r2, #33	; 0x21
 8007408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007414:	d12a      	bne.n	800746c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741e:	d107      	bne.n	8007430 <HAL_UART_Transmit_IT+0x78>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d103      	bne.n	8007430 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4a29      	ldr	r2, [pc, #164]	; (80074d0 <HAL_UART_Transmit_IT+0x118>)
 800742c:	679a      	str	r2, [r3, #120]	; 0x78
 800742e:	e002      	b.n	8007436 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4a28      	ldr	r2, [pc, #160]	; (80074d4 <HAL_UART_Transmit_IT+0x11c>)
 8007434:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800744c:	63bb      	str	r3, [r7, #56]	; 0x38
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3308      	adds	r3, #8
 8007454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007456:	637a      	str	r2, [r7, #52]	; 0x34
 8007458:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800745c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e5      	bne.n	8007436 <HAL_UART_Transmit_IT+0x7e>
 800746a:	e028      	b.n	80074be <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007474:	d107      	bne.n	8007486 <HAL_UART_Transmit_IT+0xce>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d103      	bne.n	8007486 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4a15      	ldr	r2, [pc, #84]	; (80074d8 <HAL_UART_Transmit_IT+0x120>)
 8007482:	679a      	str	r2, [r3, #120]	; 0x78
 8007484:	e002      	b.n	800748c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4a14      	ldr	r2, [pc, #80]	; (80074dc <HAL_UART_Transmit_IT+0x124>)
 800748a:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	613b      	str	r3, [r7, #16]
   return(result);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074aa:	623b      	str	r3, [r7, #32]
 80074ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	69f9      	ldr	r1, [r7, #28]
 80074b0:	6a3a      	ldr	r2, [r7, #32]
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e6      	bne.n	800748c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	e000      	b.n	80074c4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80074c2:	2302      	movs	r3, #2
  }
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3744      	adds	r7, #68	; 0x44
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	08007ea7 	.word	0x08007ea7
 80074d4:	08007dc7 	.word	0x08007dc7
 80074d8:	08007d05 	.word	0x08007d05
 80074dc:	08007c4d 	.word	0x08007c4d

080074e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b0ba      	sub	sp, #232	; 0xe8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007506:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800750a:	f640 030f 	movw	r3, #2063	; 0x80f
 800750e:	4013      	ands	r3, r2
 8007510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d11b      	bne.n	8007554 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800751c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b00      	cmp	r3, #0
 8007526:	d015      	beq.n	8007554 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800752c:	f003 0320 	and.w	r3, r3, #32
 8007530:	2b00      	cmp	r3, #0
 8007532:	d105      	bne.n	8007540 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d009      	beq.n	8007554 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 82e3 	beq.w	8007b10 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	4798      	blx	r3
      }
      return;
 8007552:	e2dd      	b.n	8007b10 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8123 	beq.w	80077a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800755e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007562:	4b8d      	ldr	r3, [pc, #564]	; (8007798 <HAL_UART_IRQHandler+0x2b8>)
 8007564:	4013      	ands	r3, r2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800756a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800756e:	4b8b      	ldr	r3, [pc, #556]	; (800779c <HAL_UART_IRQHandler+0x2bc>)
 8007570:	4013      	ands	r3, r2
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 8116 	beq.w	80077a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d011      	beq.n	80075a8 <HAL_UART_IRQHandler+0xc8>
 8007584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2201      	movs	r2, #1
 8007596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759e:	f043 0201 	orr.w	r2, r3, #1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d011      	beq.n	80075d8 <HAL_UART_IRQHandler+0xf8>
 80075b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2202      	movs	r2, #2
 80075c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ce:	f043 0204 	orr.w	r2, r3, #4
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d011      	beq.n	8007608 <HAL_UART_IRQHandler+0x128>
 80075e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2204      	movs	r2, #4
 80075f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fe:	f043 0202 	orr.w	r2, r3, #2
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760c:	f003 0308 	and.w	r3, r3, #8
 8007610:	2b00      	cmp	r3, #0
 8007612:	d017      	beq.n	8007644 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d105      	bne.n	800762c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007620:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007624:	4b5c      	ldr	r3, [pc, #368]	; (8007798 <HAL_UART_IRQHandler+0x2b8>)
 8007626:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2208      	movs	r2, #8
 8007632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763a:	f043 0208 	orr.w	r2, r3, #8
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800764c:	2b00      	cmp	r3, #0
 800764e:	d012      	beq.n	8007676 <HAL_UART_IRQHandler+0x196>
 8007650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00c      	beq.n	8007676 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766c:	f043 0220 	orr.w	r2, r3, #32
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 8249 	beq.w	8007b14 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d013      	beq.n	80076b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800768e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d105      	bne.n	80076a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800769a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800769e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d005      	beq.n	80076da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d054      	beq.n	8007784 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa3a 	bl	8007b54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	d146      	bne.n	800777c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3308      	adds	r3, #8
 80076f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800771a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800771e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1d9      	bne.n	80076ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007740:	2b00      	cmp	r3, #0
 8007742:	d017      	beq.n	8007774 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800774a:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <HAL_UART_IRQHandler+0x2c0>)
 800774c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007754:	4618      	mov	r0, r3
 8007756:	f7fc ff6d 	bl	8004634 <HAL_DMA_Abort_IT>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d019      	beq.n	8007794 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800776e:	4610      	mov	r0, r2
 8007770:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007772:	e00f      	b.n	8007794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f9d7 	bl	8007b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777a:	e00b      	b.n	8007794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f9d3 	bl	8007b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007782:	e007      	b.n	8007794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f9cf 	bl	8007b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007792:	e1bf      	b.n	8007b14 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007794:	bf00      	nop
    return;
 8007796:	e1bd      	b.n	8007b14 <HAL_UART_IRQHandler+0x634>
 8007798:	10000001 	.word	0x10000001
 800779c:	04000120 	.word	0x04000120
 80077a0:	08007c21 	.word	0x08007c21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	f040 8153 	bne.w	8007a54 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b2:	f003 0310 	and.w	r3, r3, #16
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 814c 	beq.w	8007a54 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8145 	beq.w	8007a54 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2210      	movs	r2, #16
 80077d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077dc:	2b40      	cmp	r3, #64	; 0x40
 80077de:	f040 80bb 	bne.w	8007958 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 818f 	beq.w	8007b18 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007800:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007804:	429a      	cmp	r2, r3
 8007806:	f080 8187 	bcs.w	8007b18 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	f040 8087 	bne.w	8007936 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800783c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007856:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800785e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800786a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1da      	bne.n	8007828 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007896:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800789a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800789e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e1      	bne.n	8007872 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3308      	adds	r3, #8
 80078b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3308      	adds	r3, #8
 80078ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e3      	bne.n	80078ae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007904:	f023 0310 	bic.w	r3, r3, #16
 8007908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007916:	65bb      	str	r3, [r7, #88]	; 0x58
 8007918:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800791c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e4      	bne.n	80078f4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007930:	4618      	mov	r0, r3
 8007932:	f7fc fe20 	bl	8004576 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2202      	movs	r2, #2
 800793a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007948:	b29b      	uxth	r3, r3
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	b29b      	uxth	r3, r3
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f8f3 	bl	8007b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007956:	e0df      	b.n	8007b18 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007964:	b29b      	uxth	r3, r3
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007972:	b29b      	uxth	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 80d1 	beq.w	8007b1c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800797a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 80cc 	beq.w	8007b1c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007998:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079a6:	647b      	str	r3, [r7, #68]	; 0x44
 80079a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e4      	bne.n	8007984 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	623b      	str	r3, [r7, #32]
   return(result);
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d0:	f023 0301 	bic.w	r3, r3, #1
 80079d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079e2:	633a      	str	r2, [r7, #48]	; 0x30
 80079e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e1      	bne.n	80079ba <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0310 	bic.w	r3, r3, #16
 8007a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a2c:	61fb      	str	r3, [r7, #28]
 8007a2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	69b9      	ldr	r1, [r7, #24]
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	617b      	str	r3, [r7, #20]
   return(result);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e4      	bne.n	8007a0a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f875 	bl	8007b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a52:	e063      	b.n	8007b1c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00e      	beq.n	8007a7e <HAL_UART_IRQHandler+0x59e>
 8007a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d008      	beq.n	8007a7e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fab5 	bl	8007fe6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a7c:	e051      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d014      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d105      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d008      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d03a      	beq.n	8007b20 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
    }
    return;
 8007ab2:	e035      	b.n	8007b20 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d009      	beq.n	8007ad4 <HAL_UART_IRQHandler+0x5f4>
 8007ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fa5f 	bl	8007f90 <UART_EndTransmit_IT>
    return;
 8007ad2:	e026      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d009      	beq.n	8007af4 <HAL_UART_IRQHandler+0x614>
 8007ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fa8e 	bl	800800e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007af2:	e016      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d010      	beq.n	8007b22 <HAL_UART_IRQHandler+0x642>
 8007b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	da0c      	bge.n	8007b22 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fa76 	bl	8007ffa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b0e:	e008      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
      return;
 8007b10:	bf00      	nop
 8007b12:	e006      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
    return;
 8007b14:	bf00      	nop
 8007b16:	e004      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
      return;
 8007b18:	bf00      	nop
 8007b1a:	e002      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
      return;
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
    return;
 8007b20:	bf00      	nop
  }
}
 8007b22:	37e8      	adds	r7, #232	; 0xe8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b095      	sub	sp, #84	; 0x54
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b64:	e853 3f00 	ldrex	r3, [r3]
 8007b68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b82:	e841 2300 	strex	r3, r2, [r1]
 8007b86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1e6      	bne.n	8007b5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3308      	adds	r3, #8
 8007b94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ba4:	f023 0301 	bic.w	r3, r3, #1
 8007ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3308      	adds	r3, #8
 8007bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e3      	bne.n	8007b8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d118      	bne.n	8007c00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f023 0310 	bic.w	r3, r3, #16
 8007be2:	647b      	str	r3, [r7, #68]	; 0x44
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bec:	61bb      	str	r3, [r7, #24]
 8007bee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6979      	ldr	r1, [r7, #20]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e6      	bne.n	8007bce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c14:	bf00      	nop
 8007c16:	3754      	adds	r7, #84	; 0x54
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff ff72 	bl	8007b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c44:	bf00      	nop
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b08f      	sub	sp, #60	; 0x3c
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5a:	2b21      	cmp	r3, #33	; 0x21
 8007c5c:	d14c      	bne.n	8007cf8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d132      	bne.n	8007cd0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	461a      	mov	r2, r3
 8007c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c8a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e6      	bne.n	8007c6a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6979      	ldr	r1, [r7, #20]
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e6      	bne.n	8007c9c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007cce:	e013      	b.n	8007cf8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd4:	781a      	ldrb	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007cf8:	bf00      	nop
 8007cfa:	373c      	adds	r7, #60	; 0x3c
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b091      	sub	sp, #68	; 0x44
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d12:	2b21      	cmp	r3, #33	; 0x21
 8007d14:	d151      	bne.n	8007dba <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d132      	bne.n	8007d88 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	633b      	str	r3, [r7, #48]	; 0x30
 8007d42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e6      	bne.n	8007d22 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d72:	61fb      	str	r3, [r7, #28]
 8007d74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	69b9      	ldr	r1, [r7, #24]
 8007d78:	69fa      	ldr	r2, [r7, #28]
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e6      	bne.n	8007d54 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007d86:	e018      	b.n	8007dba <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d9c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da2:	1c9a      	adds	r2, r3, #2
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	3b01      	subs	r3, #1
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007dba:	bf00      	nop
 8007dbc:	3744      	adds	r7, #68	; 0x44
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b091      	sub	sp, #68	; 0x44
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd4:	2b21      	cmp	r3, #33	; 0x21
 8007dd6:	d160      	bne.n	8007e9a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007dde:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007de0:	e057      	b.n	8007e92 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d133      	bne.n	8007e56 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3308      	adds	r3, #8
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e04:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e0e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e5      	bne.n	8007dee <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e36:	637b      	str	r3, [r7, #52]	; 0x34
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	69b9      	ldr	r1, [r7, #24]
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e6      	bne.n	8007e22 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007e54:	e021      	b.n	8007e9a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d013      	beq.n	8007e8c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e68:	781a      	ldrb	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007e8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007e92:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1a4      	bne.n	8007de2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007e98:	e7ff      	b.n	8007e9a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007e9a:	bf00      	nop
 8007e9c:	3744      	adds	r7, #68	; 0x44
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b091      	sub	sp, #68	; 0x44
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb4:	2b21      	cmp	r3, #33	; 0x21
 8007eb6:	d165      	bne.n	8007f84 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ebe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007ec0:	e05c      	b.n	8007f7c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d133      	bne.n	8007f36 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3308      	adds	r3, #8
 8007eec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e5      	bne.n	8007ece <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	e853 3f00 	ldrex	r3, [r3]
 8007f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f16:	633b      	str	r3, [r7, #48]	; 0x30
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	6979      	ldr	r1, [r7, #20]
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e6      	bne.n	8007f02 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007f34:	e026      	b.n	8007f84 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d018      	beq.n	8007f76 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f48:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f58:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5e:	1c9a      	adds	r2, r3, #2
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007f76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007f7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d19f      	bne.n	8007ec2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007f82:	e7ff      	b.n	8007f84 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007f84:	bf00      	nop
 8007f86:	3744      	adds	r7, #68	; 0x44
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	61bb      	str	r3, [r7, #24]
 8007fb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6979      	ldr	r1, [r7, #20]
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e6      	bne.n	8007f98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7fb fa55 	bl	8003488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fde:	bf00      	nop
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
	...

08008024 <__NVIC_SetPriority>:
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	6039      	str	r1, [r7, #0]
 800802e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008034:	2b00      	cmp	r3, #0
 8008036:	db0a      	blt.n	800804e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	b2da      	uxtb	r2, r3
 800803c:	490c      	ldr	r1, [pc, #48]	; (8008070 <__NVIC_SetPriority+0x4c>)
 800803e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008042:	0112      	lsls	r2, r2, #4
 8008044:	b2d2      	uxtb	r2, r2
 8008046:	440b      	add	r3, r1
 8008048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800804c:	e00a      	b.n	8008064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	b2da      	uxtb	r2, r3
 8008052:	4908      	ldr	r1, [pc, #32]	; (8008074 <__NVIC_SetPriority+0x50>)
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	3b04      	subs	r3, #4
 800805c:	0112      	lsls	r2, r2, #4
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	440b      	add	r3, r1
 8008062:	761a      	strb	r2, [r3, #24]
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	e000e100 	.word	0xe000e100
 8008074:	e000ed00 	.word	0xe000ed00

08008078 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <SysTick_Handler+0x1c>)
 800807e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008080:	f003 f85c 	bl	800b13c <xTaskGetSchedulerState>
 8008084:	4603      	mov	r3, r0
 8008086:	2b01      	cmp	r3, #1
 8008088:	d001      	beq.n	800808e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800808a:	f001 f875 	bl	8009178 <xPortSysTickHandler>
  }
}
 800808e:	bf00      	nop
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	e000e010 	.word	0xe000e010

08008098 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800809c:	2100      	movs	r1, #0
 800809e:	f06f 0004 	mvn.w	r0, #4
 80080a2:	f7ff ffbf 	bl	8008024 <__NVIC_SetPriority>
#endif
}
 80080a6:	bf00      	nop
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080b2:	f3ef 8305 	mrs	r3, IPSR
 80080b6:	603b      	str	r3, [r7, #0]
  return(result);
 80080b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80080be:	f06f 0305 	mvn.w	r3, #5
 80080c2:	607b      	str	r3, [r7, #4]
 80080c4:	e00c      	b.n	80080e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80080c6:	4b0a      	ldr	r3, [pc, #40]	; (80080f0 <osKernelInitialize+0x44>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d105      	bne.n	80080da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80080ce:	4b08      	ldr	r3, [pc, #32]	; (80080f0 <osKernelInitialize+0x44>)
 80080d0:	2201      	movs	r2, #1
 80080d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	607b      	str	r3, [r7, #4]
 80080d8:	e002      	b.n	80080e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80080da:	f04f 33ff 	mov.w	r3, #4294967295
 80080de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080e0:	687b      	ldr	r3, [r7, #4]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20000448 	.word	0x20000448

080080f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080fa:	f3ef 8305 	mrs	r3, IPSR
 80080fe:	603b      	str	r3, [r7, #0]
  return(result);
 8008100:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008106:	f06f 0305 	mvn.w	r3, #5
 800810a:	607b      	str	r3, [r7, #4]
 800810c:	e010      	b.n	8008130 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800810e:	4b0b      	ldr	r3, [pc, #44]	; (800813c <osKernelStart+0x48>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d109      	bne.n	800812a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008116:	f7ff ffbf 	bl	8008098 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800811a:	4b08      	ldr	r3, [pc, #32]	; (800813c <osKernelStart+0x48>)
 800811c:	2202      	movs	r2, #2
 800811e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008120:	f002 fafc 	bl	800a71c <vTaskStartScheduler>
      stat = osOK;
 8008124:	2300      	movs	r3, #0
 8008126:	607b      	str	r3, [r7, #4]
 8008128:	e002      	b.n	8008130 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800812a:	f04f 33ff 	mov.w	r3, #4294967295
 800812e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008130:	687b      	ldr	r3, [r7, #4]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000448 	.word	0x20000448

08008140 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008140:	b580      	push	{r7, lr}
 8008142:	b08e      	sub	sp, #56	; 0x38
 8008144:	af04      	add	r7, sp, #16
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800814c:	2300      	movs	r3, #0
 800814e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008150:	f3ef 8305 	mrs	r3, IPSR
 8008154:	617b      	str	r3, [r7, #20]
  return(result);
 8008156:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008158:	2b00      	cmp	r3, #0
 800815a:	d17e      	bne.n	800825a <osThreadNew+0x11a>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d07b      	beq.n	800825a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008162:	2380      	movs	r3, #128	; 0x80
 8008164:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008166:	2318      	movs	r3, #24
 8008168:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800816e:	f04f 33ff 	mov.w	r3, #4294967295
 8008172:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d045      	beq.n	8008206 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <osThreadNew+0x48>
        name = attr->name;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d008      	beq.n	80081ae <osThreadNew+0x6e>
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	2b38      	cmp	r3, #56	; 0x38
 80081a0:	d805      	bhi.n	80081ae <osThreadNew+0x6e>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <osThreadNew+0x72>
        return (NULL);
 80081ae:	2300      	movs	r3, #0
 80081b0:	e054      	b.n	800825c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	089b      	lsrs	r3, r3, #2
 80081c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00e      	beq.n	80081e8 <osThreadNew+0xa8>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	2b5b      	cmp	r3, #91	; 0x5b
 80081d0:	d90a      	bls.n	80081e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d006      	beq.n	80081e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <osThreadNew+0xa8>
        mem = 1;
 80081e2:	2301      	movs	r3, #1
 80081e4:	61bb      	str	r3, [r7, #24]
 80081e6:	e010      	b.n	800820a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10c      	bne.n	800820a <osThreadNew+0xca>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d108      	bne.n	800820a <osThreadNew+0xca>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <osThreadNew+0xca>
          mem = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	61bb      	str	r3, [r7, #24]
 8008204:	e001      	b.n	800820a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d110      	bne.n	8008232 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008218:	9202      	str	r2, [sp, #8]
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	6a3a      	ldr	r2, [r7, #32]
 8008224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f002 f8d6 	bl	800a3d8 <xTaskCreateStatic>
 800822c:	4603      	mov	r3, r0
 800822e:	613b      	str	r3, [r7, #16]
 8008230:	e013      	b.n	800825a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d110      	bne.n	800825a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	b29a      	uxth	r2, r3
 800823c:	f107 0310 	add.w	r3, r7, #16
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f002 f921 	bl	800a492 <xTaskCreate>
 8008250:	4603      	mov	r3, r0
 8008252:	2b01      	cmp	r3, #1
 8008254:	d001      	beq.n	800825a <osThreadNew+0x11a>
            hTask = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800825a:	693b      	ldr	r3, [r7, #16]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3728      	adds	r7, #40	; 0x28
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af02      	add	r7, sp, #8
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <osThreadFlagsSet+0x1a>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	da03      	bge.n	8008286 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800827e:	f06f 0303 	mvn.w	r3, #3
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	e035      	b.n	80082f2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8008286:	f04f 33ff 	mov.w	r3, #4294967295
 800828a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800828c:	f3ef 8305 	mrs	r3, IPSR
 8008290:	613b      	str	r3, [r7, #16]
  return(result);
 8008292:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01f      	beq.n	80082d8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8008298:	2300      	movs	r3, #0
 800829a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800829c:	f107 0308 	add.w	r3, r7, #8
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	2300      	movs	r3, #0
 80082a4:	2201      	movs	r2, #1
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6978      	ldr	r0, [r7, #20]
 80082aa:	f003 f9e5 	bl	800b678 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80082ae:	f107 030c 	add.w	r3, r7, #12
 80082b2:	2200      	movs	r2, #0
 80082b4:	9200      	str	r2, [sp, #0]
 80082b6:	2200      	movs	r2, #0
 80082b8:	2100      	movs	r1, #0
 80082ba:	6978      	ldr	r0, [r7, #20]
 80082bc:	f003 f9dc 	bl	800b678 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d015      	beq.n	80082f2 <osThreadFlagsSet+0x8e>
 80082c6:	4b0d      	ldr	r3, [pc, #52]	; (80082fc <osThreadFlagsSet+0x98>)
 80082c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	e00c      	b.n	80082f2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80082d8:	2300      	movs	r3, #0
 80082da:	2201      	movs	r2, #1
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6978      	ldr	r0, [r7, #20]
 80082e0:	f003 f910 	bl	800b504 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80082e4:	f107 030c 	add.w	r3, r7, #12
 80082e8:	2200      	movs	r2, #0
 80082ea:	2100      	movs	r1, #0
 80082ec:	6978      	ldr	r0, [r7, #20]
 80082ee:	f003 f909 	bl	800b504 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80082f2:	68fb      	ldr	r3, [r7, #12]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	e000ed04 	.word	0xe000ed04

08008300 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008300:	b580      	push	{r7, lr}
 8008302:	b08c      	sub	sp, #48	; 0x30
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800830c:	f3ef 8305 	mrs	r3, IPSR
 8008310:	617b      	str	r3, [r7, #20]
  return(result);
 8008312:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008318:	f06f 0305 	mvn.w	r3, #5
 800831c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800831e:	e06b      	b.n	80083f8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b00      	cmp	r3, #0
 8008324:	da03      	bge.n	800832e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8008326:	f06f 0303 	mvn.w	r3, #3
 800832a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800832c:	e064      	b.n	80083f8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28
 800833c:	e001      	b.n	8008342 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800834a:	f002 fb31 	bl	800a9b0 <xTaskGetTickCount>
 800834e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008350:	f107 0210 	add.w	r2, r7, #16
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008358:	2000      	movs	r0, #0
 800835a:	f003 f879 	bl	800b450 <xTaskNotifyWait>
 800835e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d137      	bne.n	80083d6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8008366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4013      	ands	r3, r2
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008372:	4313      	orrs	r3, r2
 8008374:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00c      	beq.n	800839a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	4013      	ands	r3, r2
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	429a      	cmp	r2, r3
 800838a:	d032      	beq.n	80083f2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10f      	bne.n	80083b2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008392:	f06f 0302 	mvn.w	r3, #2
 8008396:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008398:	e02e      	b.n	80083f8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	4013      	ands	r3, r2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d128      	bne.n	80083f6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d103      	bne.n	80083b2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80083aa:	f06f 0302 	mvn.w	r3, #2
 80083ae:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80083b0:	e022      	b.n	80083f8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80083b2:	f002 fafd 	bl	800a9b0 <xTaskGetTickCount>
 80083b6:	4602      	mov	r2, r0
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d902      	bls.n	80083cc <osThreadFlagsWait+0xcc>
          tout  = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	627b      	str	r3, [r7, #36]	; 0x24
 80083ca:	e00e      	b.n	80083ea <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80083cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
 80083d4:	e009      	b.n	80083ea <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d103      	bne.n	80083e4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80083dc:	f06f 0302 	mvn.w	r3, #2
 80083e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083e2:	e002      	b.n	80083ea <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80083e4:	f06f 0301 	mvn.w	r3, #1
 80083e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1af      	bne.n	8008350 <osThreadFlagsWait+0x50>
 80083f0:	e002      	b.n	80083f8 <osThreadFlagsWait+0xf8>
            break;
 80083f2:	bf00      	nop
 80083f4:	e000      	b.n	80083f8 <osThreadFlagsWait+0xf8>
            break;
 80083f6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80083f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3730      	adds	r7, #48	; 0x30
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008402:	b580      	push	{r7, lr}
 8008404:	b088      	sub	sp, #32
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800840e:	f3ef 8305 	mrs	r3, IPSR
 8008412:	60bb      	str	r3, [r7, #8]
  return(result);
 8008414:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008416:	2b00      	cmp	r3, #0
 8008418:	d174      	bne.n	8008504 <osMutexNew+0x102>
    if (attr != NULL) {
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	61bb      	str	r3, [r7, #24]
 8008426:	e001      	b.n	800842c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <osMutexNew+0x3a>
      rmtx = 1U;
 8008436:	2301      	movs	r3, #1
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	e001      	b.n	8008440 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	f003 0308 	and.w	r3, r3, #8
 8008446:	2b00      	cmp	r3, #0
 8008448:	d15c      	bne.n	8008504 <osMutexNew+0x102>
      mem = -1;
 800844a:	f04f 33ff 	mov.w	r3, #4294967295
 800844e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d015      	beq.n	8008482 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d006      	beq.n	800846c <osMutexNew+0x6a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	2b4f      	cmp	r3, #79	; 0x4f
 8008464:	d902      	bls.n	800846c <osMutexNew+0x6a>
          mem = 1;
 8008466:	2301      	movs	r3, #1
 8008468:	613b      	str	r3, [r7, #16]
 800846a:	e00c      	b.n	8008486 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d108      	bne.n	8008486 <osMutexNew+0x84>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <osMutexNew+0x84>
            mem = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	613b      	str	r3, [r7, #16]
 8008480:	e001      	b.n	8008486 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d112      	bne.n	80084b2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	4619      	mov	r1, r3
 8008498:	2004      	movs	r0, #4
 800849a:	f001 f848 	bl	800952e <xQueueCreateMutexStatic>
 800849e:	61f8      	str	r0, [r7, #28]
 80084a0:	e016      	b.n	80084d0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	4619      	mov	r1, r3
 80084a8:	2001      	movs	r0, #1
 80084aa:	f001 f840 	bl	800952e <xQueueCreateMutexStatic>
 80084ae:	61f8      	str	r0, [r7, #28]
 80084b0:	e00e      	b.n	80084d0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10b      	bne.n	80084d0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80084be:	2004      	movs	r0, #4
 80084c0:	f001 f81d 	bl	80094fe <xQueueCreateMutex>
 80084c4:	61f8      	str	r0, [r7, #28]
 80084c6:	e003      	b.n	80084d0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80084c8:	2001      	movs	r0, #1
 80084ca:	f001 f818 	bl	80094fe <xQueueCreateMutex>
 80084ce:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00c      	beq.n	80084f0 <osMutexNew+0xee>
        if (attr != NULL) {
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <osMutexNew+0xe2>
          name = attr->name;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e001      	b.n	80084e8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80084e8:	68f9      	ldr	r1, [r7, #12]
 80084ea:	69f8      	ldr	r0, [r7, #28]
 80084ec:	f001 feec 	bl	800a2c8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d006      	beq.n	8008504 <osMutexNew+0x102>
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	f043 0301 	orr.w	r3, r3, #1
 8008502:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008504:	69fb      	ldr	r3, [r7, #28]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3720      	adds	r7, #32
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800850e:	b580      	push	{r7, lr}
 8008510:	b086      	sub	sp, #24
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f023 0301 	bic.w	r3, r3, #1
 800851e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008528:	2300      	movs	r3, #0
 800852a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800852c:	f3ef 8305 	mrs	r3, IPSR
 8008530:	60bb      	str	r3, [r7, #8]
  return(result);
 8008532:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008538:	f06f 0305 	mvn.w	r3, #5
 800853c:	617b      	str	r3, [r7, #20]
 800853e:	e02c      	b.n	800859a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d103      	bne.n	800854e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008546:	f06f 0303 	mvn.w	r3, #3
 800854a:	617b      	str	r3, [r7, #20]
 800854c:	e025      	b.n	800859a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d011      	beq.n	8008578 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6938      	ldr	r0, [r7, #16]
 8008558:	f001 f838 	bl	80095cc <xQueueTakeMutexRecursive>
 800855c:	4603      	mov	r3, r0
 800855e:	2b01      	cmp	r3, #1
 8008560:	d01b      	beq.n	800859a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008568:	f06f 0301 	mvn.w	r3, #1
 800856c:	617b      	str	r3, [r7, #20]
 800856e:	e014      	b.n	800859a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008570:	f06f 0302 	mvn.w	r3, #2
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	e010      	b.n	800859a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6938      	ldr	r0, [r7, #16]
 800857c:	f001 fbcc 	bl	8009d18 <xQueueSemaphoreTake>
 8008580:	4603      	mov	r3, r0
 8008582:	2b01      	cmp	r3, #1
 8008584:	d009      	beq.n	800859a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800858c:	f06f 0301 	mvn.w	r3, #1
 8008590:	617b      	str	r3, [r7, #20]
 8008592:	e002      	b.n	800859a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008594:	f06f 0302 	mvn.w	r3, #2
 8008598:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800859a:	697b      	ldr	r3, [r7, #20]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f023 0301 	bic.w	r3, r3, #1
 80085b2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80085bc:	2300      	movs	r3, #0
 80085be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085c0:	f3ef 8305 	mrs	r3, IPSR
 80085c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80085c6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80085cc:	f06f 0305 	mvn.w	r3, #5
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	e01f      	b.n	8008614 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d103      	bne.n	80085e2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80085da:	f06f 0303 	mvn.w	r3, #3
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	e018      	b.n	8008614 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d009      	beq.n	80085fc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80085e8:	6938      	ldr	r0, [r7, #16]
 80085ea:	f000 ffbb 	bl	8009564 <xQueueGiveMutexRecursive>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d00f      	beq.n	8008614 <osMutexRelease+0x70>
        stat = osErrorResource;
 80085f4:	f06f 0302 	mvn.w	r3, #2
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	e00b      	b.n	8008614 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80085fc:	2300      	movs	r3, #0
 80085fe:	2200      	movs	r2, #0
 8008600:	2100      	movs	r1, #0
 8008602:	6938      	ldr	r0, [r7, #16]
 8008604:	f001 f882 	bl	800970c <xQueueGenericSend>
 8008608:	4603      	mov	r3, r0
 800860a:	2b01      	cmp	r3, #1
 800860c:	d002      	beq.n	8008614 <osMutexRelease+0x70>
        stat = osErrorResource;
 800860e:	f06f 0302 	mvn.w	r3, #2
 8008612:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008614:	697b      	ldr	r3, [r7, #20]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800861e:	b580      	push	{r7, lr}
 8008620:	b08a      	sub	sp, #40	; 0x28
 8008622:	af02      	add	r7, sp, #8
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800862a:	2300      	movs	r3, #0
 800862c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800862e:	f3ef 8305 	mrs	r3, IPSR
 8008632:	613b      	str	r3, [r7, #16]
  return(result);
 8008634:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008636:	2b00      	cmp	r3, #0
 8008638:	d175      	bne.n	8008726 <osSemaphoreNew+0x108>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d072      	beq.n	8008726 <osSemaphoreNew+0x108>
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	429a      	cmp	r2, r3
 8008646:	d86e      	bhi.n	8008726 <osSemaphoreNew+0x108>
    mem = -1;
 8008648:	f04f 33ff 	mov.w	r3, #4294967295
 800864c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d015      	beq.n	8008680 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d006      	beq.n	800866a <osSemaphoreNew+0x4c>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	2b4f      	cmp	r3, #79	; 0x4f
 8008662:	d902      	bls.n	800866a <osSemaphoreNew+0x4c>
        mem = 1;
 8008664:	2301      	movs	r3, #1
 8008666:	61bb      	str	r3, [r7, #24]
 8008668:	e00c      	b.n	8008684 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d108      	bne.n	8008684 <osSemaphoreNew+0x66>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <osSemaphoreNew+0x66>
          mem = 0;
 800867a:	2300      	movs	r3, #0
 800867c:	61bb      	str	r3, [r7, #24]
 800867e:	e001      	b.n	8008684 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008680:	2300      	movs	r3, #0
 8008682:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868a:	d04c      	beq.n	8008726 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d128      	bne.n	80086e4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d10a      	bne.n	80086ae <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	2203      	movs	r2, #3
 800869e:	9200      	str	r2, [sp, #0]
 80086a0:	2200      	movs	r2, #0
 80086a2:	2100      	movs	r1, #0
 80086a4:	2001      	movs	r0, #1
 80086a6:	f000 fe3b 	bl	8009320 <xQueueGenericCreateStatic>
 80086aa:	61f8      	str	r0, [r7, #28]
 80086ac:	e005      	b.n	80086ba <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80086ae:	2203      	movs	r2, #3
 80086b0:	2100      	movs	r1, #0
 80086b2:	2001      	movs	r0, #1
 80086b4:	f000 feac 	bl	8009410 <xQueueGenericCreate>
 80086b8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d022      	beq.n	8008706 <osSemaphoreNew+0xe8>
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d01f      	beq.n	8008706 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80086c6:	2300      	movs	r3, #0
 80086c8:	2200      	movs	r2, #0
 80086ca:	2100      	movs	r1, #0
 80086cc:	69f8      	ldr	r0, [r7, #28]
 80086ce:	f001 f81d 	bl	800970c <xQueueGenericSend>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d016      	beq.n	8008706 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80086d8:	69f8      	ldr	r0, [r7, #28]
 80086da:	f001 fca9 	bl	800a030 <vQueueDelete>
            hSemaphore = NULL;
 80086de:	2300      	movs	r3, #0
 80086e0:	61fb      	str	r3, [r7, #28]
 80086e2:	e010      	b.n	8008706 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d108      	bne.n	80086fc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	461a      	mov	r2, r3
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 ffa0 	bl	8009638 <xQueueCreateCountingSemaphoreStatic>
 80086f8:	61f8      	str	r0, [r7, #28]
 80086fa:	e004      	b.n	8008706 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 ffd1 	bl	80096a6 <xQueueCreateCountingSemaphore>
 8008704:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00c      	beq.n	8008726 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <osSemaphoreNew+0xfc>
          name = attr->name;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	e001      	b.n	800871e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800871a:	2300      	movs	r3, #0
 800871c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800871e:	6979      	ldr	r1, [r7, #20]
 8008720:	69f8      	ldr	r0, [r7, #28]
 8008722:	f001 fdd1 	bl	800a2c8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008726:	69fb      	ldr	r3, [r7, #28]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3720      	adds	r7, #32
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800873e:	2300      	movs	r3, #0
 8008740:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d103      	bne.n	8008750 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008748:	f06f 0303 	mvn.w	r3, #3
 800874c:	617b      	str	r3, [r7, #20]
 800874e:	e039      	b.n	80087c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008750:	f3ef 8305 	mrs	r3, IPSR
 8008754:	60fb      	str	r3, [r7, #12]
  return(result);
 8008756:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008758:	2b00      	cmp	r3, #0
 800875a:	d022      	beq.n	80087a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008762:	f06f 0303 	mvn.w	r3, #3
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	e02c      	b.n	80087c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800876a:	2300      	movs	r3, #0
 800876c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800876e:	f107 0308 	add.w	r3, r7, #8
 8008772:	461a      	mov	r2, r3
 8008774:	2100      	movs	r1, #0
 8008776:	6938      	ldr	r0, [r7, #16]
 8008778:	f001 fbda 	bl	8009f30 <xQueueReceiveFromISR>
 800877c:	4603      	mov	r3, r0
 800877e:	2b01      	cmp	r3, #1
 8008780:	d003      	beq.n	800878a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008782:	f06f 0302 	mvn.w	r3, #2
 8008786:	617b      	str	r3, [r7, #20]
 8008788:	e01c      	b.n	80087c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d019      	beq.n	80087c4 <osSemaphoreAcquire+0x94>
 8008790:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <osSemaphoreAcquire+0xa0>)
 8008792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	e010      	b.n	80087c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6938      	ldr	r0, [r7, #16]
 80087a6:	f001 fab7 	bl	8009d18 <xQueueSemaphoreTake>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d009      	beq.n	80087c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80087b6:	f06f 0301 	mvn.w	r3, #1
 80087ba:	617b      	str	r3, [r7, #20]
 80087bc:	e002      	b.n	80087c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80087be:	f06f 0302 	mvn.w	r3, #2
 80087c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80087c4:	697b      	ldr	r3, [r7, #20]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	e000ed04 	.word	0xe000ed04

080087d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d103      	bne.n	80087f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80087ea:	f06f 0303 	mvn.w	r3, #3
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e02c      	b.n	800884c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087f2:	f3ef 8305 	mrs	r3, IPSR
 80087f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80087f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d01a      	beq.n	8008834 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80087fe:	2300      	movs	r3, #0
 8008800:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008802:	f107 0308 	add.w	r3, r7, #8
 8008806:	4619      	mov	r1, r3
 8008808:	6938      	ldr	r0, [r7, #16]
 800880a:	f001 f918 	bl	8009a3e <xQueueGiveFromISR>
 800880e:	4603      	mov	r3, r0
 8008810:	2b01      	cmp	r3, #1
 8008812:	d003      	beq.n	800881c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008814:	f06f 0302 	mvn.w	r3, #2
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	e017      	b.n	800884c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d014      	beq.n	800884c <osSemaphoreRelease+0x78>
 8008822:	4b0d      	ldr	r3, [pc, #52]	; (8008858 <osSemaphoreRelease+0x84>)
 8008824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	e00b      	b.n	800884c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008834:	2300      	movs	r3, #0
 8008836:	2200      	movs	r2, #0
 8008838:	2100      	movs	r1, #0
 800883a:	6938      	ldr	r0, [r7, #16]
 800883c:	f000 ff66 	bl	800970c <xQueueGenericSend>
 8008840:	4603      	mov	r3, r0
 8008842:	2b01      	cmp	r3, #1
 8008844:	d002      	beq.n	800884c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008846:	f06f 0302 	mvn.w	r3, #2
 800884a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800884c:	697b      	ldr	r3, [r7, #20]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4a07      	ldr	r2, [pc, #28]	; (8008888 <vApplicationGetIdleTaskMemory+0x2c>)
 800886c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	4a06      	ldr	r2, [pc, #24]	; (800888c <vApplicationGetIdleTaskMemory+0x30>)
 8008872:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2280      	movs	r2, #128	; 0x80
 8008878:	601a      	str	r2, [r3, #0]
}
 800887a:	bf00      	nop
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	2000044c 	.word	0x2000044c
 800888c:	200004a8 	.word	0x200004a8

08008890 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4a07      	ldr	r2, [pc, #28]	; (80088bc <vApplicationGetTimerTaskMemory+0x2c>)
 80088a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	4a06      	ldr	r2, [pc, #24]	; (80088c0 <vApplicationGetTimerTaskMemory+0x30>)
 80088a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088ae:	601a      	str	r2, [r3, #0]
}
 80088b0:	bf00      	nop
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	200006a8 	.word	0x200006a8
 80088c0:	20000704 	.word	0x20000704

080088c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08a      	sub	sp, #40	; 0x28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088cc:	2300      	movs	r3, #0
 80088ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088d0:	f001 ff8a 	bl	800a7e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088d4:	4b5b      	ldr	r3, [pc, #364]	; (8008a44 <pvPortMalloc+0x180>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088dc:	f000 f920 	bl	8008b20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088e0:	4b59      	ldr	r3, [pc, #356]	; (8008a48 <pvPortMalloc+0x184>)
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4013      	ands	r3, r2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f040 8093 	bne.w	8008a14 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d01d      	beq.n	8008930 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80088f4:	2208      	movs	r2, #8
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4413      	add	r3, r2
 80088fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	2b00      	cmp	r3, #0
 8008904:	d014      	beq.n	8008930 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f023 0307 	bic.w	r3, r3, #7
 800890c:	3308      	adds	r3, #8
 800890e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d06e      	beq.n	8008a14 <pvPortMalloc+0x150>
 8008936:	4b45      	ldr	r3, [pc, #276]	; (8008a4c <pvPortMalloc+0x188>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	429a      	cmp	r2, r3
 800893e:	d869      	bhi.n	8008a14 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008940:	4b43      	ldr	r3, [pc, #268]	; (8008a50 <pvPortMalloc+0x18c>)
 8008942:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008944:	4b42      	ldr	r3, [pc, #264]	; (8008a50 <pvPortMalloc+0x18c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800894a:	e004      	b.n	8008956 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	429a      	cmp	r2, r3
 800895e:	d903      	bls.n	8008968 <pvPortMalloc+0xa4>
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1f1      	bne.n	800894c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008968:	4b36      	ldr	r3, [pc, #216]	; (8008a44 <pvPortMalloc+0x180>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800896e:	429a      	cmp	r2, r3
 8008970:	d050      	beq.n	8008a14 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2208      	movs	r2, #8
 8008978:	4413      	add	r3, r2
 800897a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	1ad2      	subs	r2, r2, r3
 800898c:	2308      	movs	r3, #8
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	429a      	cmp	r2, r3
 8008992:	d91f      	bls.n	80089d4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4413      	add	r3, r2
 800899a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00a      	beq.n	80089bc <pvPortMalloc+0xf8>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	613b      	str	r3, [r7, #16]
}
 80089b8:	bf00      	nop
 80089ba:	e7fe      	b.n	80089ba <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	1ad2      	subs	r2, r2, r3
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089ce:	69b8      	ldr	r0, [r7, #24]
 80089d0:	f000 f908 	bl	8008be4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089d4:	4b1d      	ldr	r3, [pc, #116]	; (8008a4c <pvPortMalloc+0x188>)
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	4a1b      	ldr	r2, [pc, #108]	; (8008a4c <pvPortMalloc+0x188>)
 80089e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089e2:	4b1a      	ldr	r3, [pc, #104]	; (8008a4c <pvPortMalloc+0x188>)
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	4b1b      	ldr	r3, [pc, #108]	; (8008a54 <pvPortMalloc+0x190>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d203      	bcs.n	80089f6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089ee:	4b17      	ldr	r3, [pc, #92]	; (8008a4c <pvPortMalloc+0x188>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a18      	ldr	r2, [pc, #96]	; (8008a54 <pvPortMalloc+0x190>)
 80089f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	4b13      	ldr	r3, [pc, #76]	; (8008a48 <pvPortMalloc+0x184>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	431a      	orrs	r2, r3
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a0a:	4b13      	ldr	r3, [pc, #76]	; (8008a58 <pvPortMalloc+0x194>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	4a11      	ldr	r2, [pc, #68]	; (8008a58 <pvPortMalloc+0x194>)
 8008a12:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a14:	f001 ff2e 	bl	800a874 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00a      	beq.n	8008a38 <pvPortMalloc+0x174>
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	60fb      	str	r3, [r7, #12]
}
 8008a34:	bf00      	nop
 8008a36:	e7fe      	b.n	8008a36 <pvPortMalloc+0x172>
	return pvReturn;
 8008a38:	69fb      	ldr	r3, [r7, #28]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3728      	adds	r7, #40	; 0x28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20005b0c 	.word	0x20005b0c
 8008a48:	20005b20 	.word	0x20005b20
 8008a4c:	20005b10 	.word	0x20005b10
 8008a50:	20005b04 	.word	0x20005b04
 8008a54:	20005b14 	.word	0x20005b14
 8008a58:	20005b18 	.word	0x20005b18

08008a5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d04d      	beq.n	8008b0a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a6e:	2308      	movs	r3, #8
 8008a70:	425b      	negs	r3, r3
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4413      	add	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	4b24      	ldr	r3, [pc, #144]	; (8008b14 <vPortFree+0xb8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4013      	ands	r3, r2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10a      	bne.n	8008aa0 <vPortFree+0x44>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	60fb      	str	r3, [r7, #12]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <vPortFree+0x62>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	60bb      	str	r3, [r7, #8]
}
 8008aba:	bf00      	nop
 8008abc:	e7fe      	b.n	8008abc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	4b14      	ldr	r3, [pc, #80]	; (8008b14 <vPortFree+0xb8>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d01e      	beq.n	8008b0a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d11a      	bne.n	8008b0a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	4b0e      	ldr	r3, [pc, #56]	; (8008b14 <vPortFree+0xb8>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	43db      	mvns	r3, r3
 8008ade:	401a      	ands	r2, r3
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ae4:	f001 fe80 	bl	800a7e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <vPortFree+0xbc>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4413      	add	r3, r2
 8008af2:	4a09      	ldr	r2, [pc, #36]	; (8008b18 <vPortFree+0xbc>)
 8008af4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008af6:	6938      	ldr	r0, [r7, #16]
 8008af8:	f000 f874 	bl	8008be4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008afc:	4b07      	ldr	r3, [pc, #28]	; (8008b1c <vPortFree+0xc0>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3301      	adds	r3, #1
 8008b02:	4a06      	ldr	r2, [pc, #24]	; (8008b1c <vPortFree+0xc0>)
 8008b04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b06:	f001 feb5 	bl	800a874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b0a:	bf00      	nop
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20005b20 	.word	0x20005b20
 8008b18:	20005b10 	.word	0x20005b10
 8008b1c:	20005b1c 	.word	0x20005b1c

08008b20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b26:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8008b2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b2c:	4b27      	ldr	r3, [pc, #156]	; (8008bcc <prvHeapInit+0xac>)
 8008b2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f003 0307 	and.w	r3, r3, #7
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00c      	beq.n	8008b54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3307      	adds	r3, #7
 8008b3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0307 	bic.w	r3, r3, #7
 8008b46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	4a1f      	ldr	r2, [pc, #124]	; (8008bcc <prvHeapInit+0xac>)
 8008b50:	4413      	add	r3, r2
 8008b52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b58:	4a1d      	ldr	r2, [pc, #116]	; (8008bd0 <prvHeapInit+0xb0>)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b5e:	4b1c      	ldr	r3, [pc, #112]	; (8008bd0 <prvHeapInit+0xb0>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	4413      	add	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b6c:	2208      	movs	r2, #8
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	1a9b      	subs	r3, r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0307 	bic.w	r3, r3, #7
 8008b7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4a15      	ldr	r2, [pc, #84]	; (8008bd4 <prvHeapInit+0xb4>)
 8008b80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b82:	4b14      	ldr	r3, [pc, #80]	; (8008bd4 <prvHeapInit+0xb4>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2200      	movs	r2, #0
 8008b88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b8a:	4b12      	ldr	r3, [pc, #72]	; (8008bd4 <prvHeapInit+0xb4>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	1ad2      	subs	r2, r2, r3
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ba0:	4b0c      	ldr	r3, [pc, #48]	; (8008bd4 <prvHeapInit+0xb4>)
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	4a0a      	ldr	r2, [pc, #40]	; (8008bd8 <prvHeapInit+0xb8>)
 8008bae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	4a09      	ldr	r2, [pc, #36]	; (8008bdc <prvHeapInit+0xbc>)
 8008bb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bb8:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <prvHeapInit+0xc0>)
 8008bba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bbe:	601a      	str	r2, [r3, #0]
}
 8008bc0:	bf00      	nop
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	20000b04 	.word	0x20000b04
 8008bd0:	20005b04 	.word	0x20005b04
 8008bd4:	20005b0c 	.word	0x20005b0c
 8008bd8:	20005b14 	.word	0x20005b14
 8008bdc:	20005b10 	.word	0x20005b10
 8008be0:	20005b20 	.word	0x20005b20

08008be4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bec:	4b28      	ldr	r3, [pc, #160]	; (8008c90 <prvInsertBlockIntoFreeList+0xac>)
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	e002      	b.n	8008bf8 <prvInsertBlockIntoFreeList+0x14>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d8f7      	bhi.n	8008bf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d108      	bne.n	8008c26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	441a      	add	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	441a      	add	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d118      	bne.n	8008c6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	4b15      	ldr	r3, [pc, #84]	; (8008c94 <prvInsertBlockIntoFreeList+0xb0>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d00d      	beq.n	8008c62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	441a      	add	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	e008      	b.n	8008c74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c62:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <prvInsertBlockIntoFreeList+0xb0>)
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e003      	b.n	8008c74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d002      	beq.n	8008c82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c82:	bf00      	nop
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	20005b04 	.word	0x20005b04
 8008c94:	20005b0c 	.word	0x20005b0c

08008c98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f103 0208 	add.w	r2, r3, #8
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f103 0208 	add.w	r2, r3, #8
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f103 0208 	add.w	r2, r3, #8
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b085      	sub	sp, #20
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	1c5a      	adds	r2, r3, #1
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	601a      	str	r2, [r3, #0]
}
 8008d2e:	bf00      	nop
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d50:	d103      	bne.n	8008d5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	e00c      	b.n	8008d74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	e002      	b.n	8008d68 <vListInsert+0x2e>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d2f6      	bcs.n	8008d62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	601a      	str	r2, [r3, #0]
}
 8008da0:	bf00      	nop
 8008da2:	3714      	adds	r7, #20
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6892      	ldr	r2, [r2, #8]
 8008dc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	6852      	ldr	r2, [r2, #4]
 8008dcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d103      	bne.n	8008de0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	1e5a      	subs	r2, r3, #1
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3b04      	subs	r3, #4
 8008e10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f023 0201 	bic.w	r2, r3, #1
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3b04      	subs	r3, #4
 8008e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e30:	4a0c      	ldr	r2, [pc, #48]	; (8008e64 <pxPortInitialiseStack+0x64>)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3b14      	subs	r3, #20
 8008e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3b04      	subs	r3, #4
 8008e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f06f 0202 	mvn.w	r2, #2
 8008e4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3b20      	subs	r3, #32
 8008e54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e56:	68fb      	ldr	r3, [r7, #12]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	08008e69 	.word	0x08008e69

08008e68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e72:	4b12      	ldr	r3, [pc, #72]	; (8008ebc <prvTaskExitError+0x54>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7a:	d00a      	beq.n	8008e92 <prvTaskExitError+0x2a>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	60fb      	str	r3, [r7, #12]
}
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <prvTaskExitError+0x28>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	60bb      	str	r3, [r7, #8]
}
 8008ea4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ea6:	bf00      	nop
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0fc      	beq.n	8008ea8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	20000030 	.word	0x20000030

08008ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <pxCurrentTCBConst2>)
 8008ec2:	6819      	ldr	r1, [r3, #0]
 8008ec4:	6808      	ldr	r0, [r1, #0]
 8008ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eca:	f380 8809 	msr	PSP, r0
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f04f 0000 	mov.w	r0, #0
 8008ed6:	f380 8811 	msr	BASEPRI, r0
 8008eda:	4770      	bx	lr
 8008edc:	f3af 8000 	nop.w

08008ee0 <pxCurrentTCBConst2>:
 8008ee0:	20005b6c 	.word	0x20005b6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop

08008ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ee8:	4808      	ldr	r0, [pc, #32]	; (8008f0c <prvPortStartFirstTask+0x24>)
 8008eea:	6800      	ldr	r0, [r0, #0]
 8008eec:	6800      	ldr	r0, [r0, #0]
 8008eee:	f380 8808 	msr	MSP, r0
 8008ef2:	f04f 0000 	mov.w	r0, #0
 8008ef6:	f380 8814 	msr	CONTROL, r0
 8008efa:	b662      	cpsie	i
 8008efc:	b661      	cpsie	f
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	df00      	svc	0
 8008f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f0a:	bf00      	nop
 8008f0c:	e000ed08 	.word	0xe000ed08

08008f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f16:	4b46      	ldr	r3, [pc, #280]	; (8009030 <xPortStartScheduler+0x120>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a46      	ldr	r2, [pc, #280]	; (8009034 <xPortStartScheduler+0x124>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d10a      	bne.n	8008f36 <xPortStartScheduler+0x26>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	613b      	str	r3, [r7, #16]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f36:	4b3e      	ldr	r3, [pc, #248]	; (8009030 <xPortStartScheduler+0x120>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a3f      	ldr	r2, [pc, #252]	; (8009038 <xPortStartScheduler+0x128>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d10a      	bne.n	8008f56 <xPortStartScheduler+0x46>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	60fb      	str	r3, [r7, #12]
}
 8008f52:	bf00      	nop
 8008f54:	e7fe      	b.n	8008f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f56:	4b39      	ldr	r3, [pc, #228]	; (800903c <xPortStartScheduler+0x12c>)
 8008f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	22ff      	movs	r2, #255	; 0xff
 8008f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	4b31      	ldr	r3, [pc, #196]	; (8009040 <xPortStartScheduler+0x130>)
 8008f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f7e:	4b31      	ldr	r3, [pc, #196]	; (8009044 <xPortStartScheduler+0x134>)
 8008f80:	2207      	movs	r2, #7
 8008f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f84:	e009      	b.n	8008f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f86:	4b2f      	ldr	r3, [pc, #188]	; (8009044 <xPortStartScheduler+0x134>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	4a2d      	ldr	r2, [pc, #180]	; (8009044 <xPortStartScheduler+0x134>)
 8008f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa2:	2b80      	cmp	r3, #128	; 0x80
 8008fa4:	d0ef      	beq.n	8008f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fa6:	4b27      	ldr	r3, [pc, #156]	; (8009044 <xPortStartScheduler+0x134>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f1c3 0307 	rsb	r3, r3, #7
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d00a      	beq.n	8008fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	60bb      	str	r3, [r7, #8]
}
 8008fc4:	bf00      	nop
 8008fc6:	e7fe      	b.n	8008fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fc8:	4b1e      	ldr	r3, [pc, #120]	; (8009044 <xPortStartScheduler+0x134>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	021b      	lsls	r3, r3, #8
 8008fce:	4a1d      	ldr	r2, [pc, #116]	; (8009044 <xPortStartScheduler+0x134>)
 8008fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fd2:	4b1c      	ldr	r3, [pc, #112]	; (8009044 <xPortStartScheduler+0x134>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fda:	4a1a      	ldr	r2, [pc, #104]	; (8009044 <xPortStartScheduler+0x134>)
 8008fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fe6:	4b18      	ldr	r3, [pc, #96]	; (8009048 <xPortStartScheduler+0x138>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a17      	ldr	r2, [pc, #92]	; (8009048 <xPortStartScheduler+0x138>)
 8008fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ff2:	4b15      	ldr	r3, [pc, #84]	; (8009048 <xPortStartScheduler+0x138>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a14      	ldr	r2, [pc, #80]	; (8009048 <xPortStartScheduler+0x138>)
 8008ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ffe:	f7f9 fa29 	bl	8002454 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009002:	4b12      	ldr	r3, [pc, #72]	; (800904c <xPortStartScheduler+0x13c>)
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009008:	f000 f8d8 	bl	80091bc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800900c:	4b10      	ldr	r3, [pc, #64]	; (8009050 <xPortStartScheduler+0x140>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a0f      	ldr	r2, [pc, #60]	; (8009050 <xPortStartScheduler+0x140>)
 8009012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009018:	f7ff ff66 	bl	8008ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800901c:	f001 fdba 	bl	800ab94 <vTaskSwitchContext>
	prvTaskExitError();
 8009020:	f7ff ff22 	bl	8008e68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	e000ed00 	.word	0xe000ed00
 8009034:	410fc271 	.word	0x410fc271
 8009038:	410fc270 	.word	0x410fc270
 800903c:	e000e400 	.word	0xe000e400
 8009040:	20005b24 	.word	0x20005b24
 8009044:	20005b28 	.word	0x20005b28
 8009048:	e000ed20 	.word	0xe000ed20
 800904c:	20000030 	.word	0x20000030
 8009050:	e000ef34 	.word	0xe000ef34

08009054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	607b      	str	r3, [r7, #4]
}
 800906c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800906e:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <vPortEnterCritical+0x58>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3301      	adds	r3, #1
 8009074:	4a0d      	ldr	r2, [pc, #52]	; (80090ac <vPortEnterCritical+0x58>)
 8009076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009078:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <vPortEnterCritical+0x58>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d10f      	bne.n	80090a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009080:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <vPortEnterCritical+0x5c>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	603b      	str	r3, [r7, #0]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <vPortEnterCritical+0x4a>
	}
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	20000030 	.word	0x20000030
 80090b0:	e000ed04 	.word	0xe000ed04

080090b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090ba:	4b12      	ldr	r3, [pc, #72]	; (8009104 <vPortExitCritical+0x50>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10a      	bne.n	80090d8 <vPortExitCritical+0x24>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	607b      	str	r3, [r7, #4]
}
 80090d4:	bf00      	nop
 80090d6:	e7fe      	b.n	80090d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090d8:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <vPortExitCritical+0x50>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3b01      	subs	r3, #1
 80090de:	4a09      	ldr	r2, [pc, #36]	; (8009104 <vPortExitCritical+0x50>)
 80090e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090e2:	4b08      	ldr	r3, [pc, #32]	; (8009104 <vPortExitCritical+0x50>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d105      	bne.n	80090f6 <vPortExitCritical+0x42>
 80090ea:	2300      	movs	r3, #0
 80090ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090f6:	bf00      	nop
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20000030 	.word	0x20000030
	...

08009110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009110:	f3ef 8009 	mrs	r0, PSP
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	4b15      	ldr	r3, [pc, #84]	; (8009170 <pxCurrentTCBConst>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	f01e 0f10 	tst.w	lr, #16
 8009120:	bf08      	it	eq
 8009122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912a:	6010      	str	r0, [r2, #0]
 800912c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009134:	f380 8811 	msr	BASEPRI, r0
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f001 fd28 	bl	800ab94 <vTaskSwitchContext>
 8009144:	f04f 0000 	mov.w	r0, #0
 8009148:	f380 8811 	msr	BASEPRI, r0
 800914c:	bc09      	pop	{r0, r3}
 800914e:	6819      	ldr	r1, [r3, #0]
 8009150:	6808      	ldr	r0, [r1, #0]
 8009152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009156:	f01e 0f10 	tst.w	lr, #16
 800915a:	bf08      	it	eq
 800915c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009160:	f380 8809 	msr	PSP, r0
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	f3af 8000 	nop.w

08009170 <pxCurrentTCBConst>:
 8009170:	20005b6c 	.word	0x20005b6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop

08009178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	607b      	str	r3, [r7, #4]
}
 8009190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009192:	f001 fc45 	bl	800aa20 <xTaskIncrementTick>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800919c:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <xPortSysTickHandler+0x40>)
 800919e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	2300      	movs	r3, #0
 80091a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	f383 8811 	msr	BASEPRI, r3
}
 80091ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091bc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091cc <vPortEnableVFP+0x10>
 80091c0:	6801      	ldr	r1, [r0, #0]
 80091c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091c6:	6001      	str	r1, [r0, #0]
 80091c8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091ca:	bf00      	nop
 80091cc:	e000ed88 	.word	0xe000ed88

080091d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091d6:	f3ef 8305 	mrs	r3, IPSR
 80091da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b0f      	cmp	r3, #15
 80091e0:	d914      	bls.n	800920c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091e2:	4a17      	ldr	r2, [pc, #92]	; (8009240 <vPortValidateInterruptPriority+0x70>)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091ec:	4b15      	ldr	r3, [pc, #84]	; (8009244 <vPortValidateInterruptPriority+0x74>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	7afa      	ldrb	r2, [r7, #11]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d20a      	bcs.n	800920c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	607b      	str	r3, [r7, #4]
}
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800920c:	4b0e      	ldr	r3, [pc, #56]	; (8009248 <vPortValidateInterruptPriority+0x78>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009214:	4b0d      	ldr	r3, [pc, #52]	; (800924c <vPortValidateInterruptPriority+0x7c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	429a      	cmp	r2, r3
 800921a:	d90a      	bls.n	8009232 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	603b      	str	r3, [r7, #0]
}
 800922e:	bf00      	nop
 8009230:	e7fe      	b.n	8009230 <vPortValidateInterruptPriority+0x60>
	}
 8009232:	bf00      	nop
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	e000e3f0 	.word	0xe000e3f0
 8009244:	20005b24 	.word	0x20005b24
 8009248:	e000ed0c 	.word	0xe000ed0c
 800924c:	20005b28 	.word	0x20005b28

08009250 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10a      	bne.n	800927a <xQueueGenericReset+0x2a>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	60bb      	str	r3, [r7, #8]
}
 8009276:	bf00      	nop
 8009278:	e7fe      	b.n	8009278 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800927a:	f7ff feeb 	bl	8009054 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009286:	68f9      	ldr	r1, [r7, #12]
 8009288:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800928a:	fb01 f303 	mul.w	r3, r1, r3
 800928e:	441a      	add	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092aa:	3b01      	subs	r3, #1
 80092ac:	68f9      	ldr	r1, [r7, #12]
 80092ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092b0:	fb01 f303 	mul.w	r3, r1, r3
 80092b4:	441a      	add	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	22ff      	movs	r2, #255	; 0xff
 80092be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	22ff      	movs	r2, #255	; 0xff
 80092c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d114      	bne.n	80092fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d01a      	beq.n	800930e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	3310      	adds	r3, #16
 80092dc:	4618      	mov	r0, r3
 80092de:	f001 fd07 	bl	800acf0 <xTaskRemoveFromEventList>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d012      	beq.n	800930e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80092e8:	4b0c      	ldr	r3, [pc, #48]	; (800931c <xQueueGenericReset+0xcc>)
 80092ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	e009      	b.n	800930e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3310      	adds	r3, #16
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff fcca 	bl	8008c98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3324      	adds	r3, #36	; 0x24
 8009308:	4618      	mov	r0, r3
 800930a:	f7ff fcc5 	bl	8008c98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800930e:	f7ff fed1 	bl	80090b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009312:	2301      	movs	r3, #1
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	e000ed04 	.word	0xe000ed04

08009320 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009320:	b580      	push	{r7, lr}
 8009322:	b08e      	sub	sp, #56	; 0x38
 8009324:	af02      	add	r7, sp, #8
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10a      	bne.n	800934a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009346:	bf00      	nop
 8009348:	e7fe      	b.n	8009348 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10a      	bne.n	8009366 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009362:	bf00      	nop
 8009364:	e7fe      	b.n	8009364 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <xQueueGenericCreateStatic+0x52>
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <xQueueGenericCreateStatic+0x56>
 8009372:	2301      	movs	r3, #1
 8009374:	e000      	b.n	8009378 <xQueueGenericCreateStatic+0x58>
 8009376:	2300      	movs	r3, #0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10a      	bne.n	8009392 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	623b      	str	r3, [r7, #32]
}
 800938e:	bf00      	nop
 8009390:	e7fe      	b.n	8009390 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d102      	bne.n	800939e <xQueueGenericCreateStatic+0x7e>
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <xQueueGenericCreateStatic+0x82>
 800939e:	2301      	movs	r3, #1
 80093a0:	e000      	b.n	80093a4 <xQueueGenericCreateStatic+0x84>
 80093a2:	2300      	movs	r3, #0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80093a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ac:	f383 8811 	msr	BASEPRI, r3
 80093b0:	f3bf 8f6f 	isb	sy
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	61fb      	str	r3, [r7, #28]
}
 80093ba:	bf00      	nop
 80093bc:	e7fe      	b.n	80093bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093be:	2350      	movs	r3, #80	; 0x50
 80093c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2b50      	cmp	r3, #80	; 0x50
 80093c6:	d00a      	beq.n	80093de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	61bb      	str	r3, [r7, #24]
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80093de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80093e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00d      	beq.n	8009406 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80093f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	4613      	mov	r3, r2
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 f83f 	bl	8009484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009408:	4618      	mov	r0, r3
 800940a:	3730      	adds	r7, #48	; 0x30
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009410:	b580      	push	{r7, lr}
 8009412:	b08a      	sub	sp, #40	; 0x28
 8009414:	af02      	add	r7, sp, #8
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	4613      	mov	r3, r2
 800941c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	613b      	str	r3, [r7, #16]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	fb02 f303 	mul.w	r3, r2, r3
 8009442:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	3350      	adds	r3, #80	; 0x50
 8009448:	4618      	mov	r0, r3
 800944a:	f7ff fa3b 	bl	80088c4 <pvPortMalloc>
 800944e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d011      	beq.n	800947a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	3350      	adds	r3, #80	; 0x50
 800945e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009468:	79fa      	ldrb	r2, [r7, #7]
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	4613      	mov	r3, r2
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	68b9      	ldr	r1, [r7, #8]
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 f805 	bl	8009484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800947a:	69bb      	ldr	r3, [r7, #24]
	}
 800947c:	4618      	mov	r0, r3
 800947e:	3720      	adds	r7, #32
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d103      	bne.n	80094a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e002      	b.n	80094a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094b2:	2101      	movs	r1, #1
 80094b4:	69b8      	ldr	r0, [r7, #24]
 80094b6:	f7ff fecb 	bl	8009250 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094c2:	bf00      	nop
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00e      	beq.n	80094f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80094ea:	2300      	movs	r3, #0
 80094ec:	2200      	movs	r2, #0
 80094ee:	2100      	movs	r1, #0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f90b 	bl	800970c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b086      	sub	sp, #24
 8009502:	af00      	add	r7, sp, #0
 8009504:	4603      	mov	r3, r0
 8009506:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009508:	2301      	movs	r3, #1
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	2300      	movs	r3, #0
 800950e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009510:	79fb      	ldrb	r3, [r7, #7]
 8009512:	461a      	mov	r2, r3
 8009514:	6939      	ldr	r1, [r7, #16]
 8009516:	6978      	ldr	r0, [r7, #20]
 8009518:	f7ff ff7a 	bl	8009410 <xQueueGenericCreate>
 800951c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f7ff ffd3 	bl	80094ca <prvInitialiseMutex>

		return xNewQueue;
 8009524:	68fb      	ldr	r3, [r7, #12]
	}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800952e:	b580      	push	{r7, lr}
 8009530:	b088      	sub	sp, #32
 8009532:	af02      	add	r7, sp, #8
 8009534:	4603      	mov	r3, r0
 8009536:	6039      	str	r1, [r7, #0]
 8009538:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800953a:	2301      	movs	r3, #1
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2200      	movs	r2, #0
 800954a:	6939      	ldr	r1, [r7, #16]
 800954c:	6978      	ldr	r0, [r7, #20]
 800954e:	f7ff fee7 	bl	8009320 <xQueueGenericCreateStatic>
 8009552:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f7ff ffb8 	bl	80094ca <prvInitialiseMutex>

		return xNewQueue;
 800955a:	68fb      	ldr	r3, [r7, #12]
	}
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009564:	b590      	push	{r4, r7, lr}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10a      	bne.n	800958c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	60fb      	str	r3, [r7, #12]
}
 8009588:	bf00      	nop
 800958a:	e7fe      	b.n	800958a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	689c      	ldr	r4, [r3, #8]
 8009590:	f001 fdc4 	bl	800b11c <xTaskGetCurrentTaskHandle>
 8009594:	4603      	mov	r3, r0
 8009596:	429c      	cmp	r4, r3
 8009598:	d111      	bne.n	80095be <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	1e5a      	subs	r2, r3, #1
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d105      	bne.n	80095b8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80095ac:	2300      	movs	r3, #0
 80095ae:	2200      	movs	r2, #0
 80095b0:	2100      	movs	r1, #0
 80095b2:	6938      	ldr	r0, [r7, #16]
 80095b4:	f000 f8aa 	bl	800970c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80095b8:	2301      	movs	r3, #1
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	e001      	b.n	80095c2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80095be:	2300      	movs	r3, #0
 80095c0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80095c2:	697b      	ldr	r3, [r7, #20]
	}
 80095c4:	4618      	mov	r0, r3
 80095c6:	371c      	adds	r7, #28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd90      	pop	{r4, r7, pc}

080095cc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80095cc:	b590      	push	{r4, r7, lr}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10a      	bne.n	80095f6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	60fb      	str	r3, [r7, #12]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	689c      	ldr	r4, [r3, #8]
 80095fa:	f001 fd8f 	bl	800b11c <xTaskGetCurrentTaskHandle>
 80095fe:	4603      	mov	r3, r0
 8009600:	429c      	cmp	r4, r3
 8009602:	d107      	bne.n	8009614 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	1c5a      	adds	r2, r3, #1
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800960e:	2301      	movs	r3, #1
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	e00c      	b.n	800962e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6938      	ldr	r0, [r7, #16]
 8009618:	f000 fb7e 	bl	8009d18 <xQueueSemaphoreTake>
 800961c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d004      	beq.n	800962e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800962e:	697b      	ldr	r3, [r7, #20]
	}
 8009630:	4618      	mov	r0, r3
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	bd90      	pop	{r4, r7, pc}

08009638 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08a      	sub	sp, #40	; 0x28
 800963c:	af02      	add	r7, sp, #8
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10a      	bne.n	8009660 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	61bb      	str	r3, [r7, #24]
}
 800965c:	bf00      	nop
 800965e:	e7fe      	b.n	800965e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	429a      	cmp	r2, r3
 8009666:	d90a      	bls.n	800967e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	617b      	str	r3, [r7, #20]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800967e:	2302      	movs	r3, #2
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	2100      	movs	r1, #0
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7ff fe49 	bl	8009320 <xQueueGenericCreateStatic>
 800968e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800969c:	69fb      	ldr	r3, [r7, #28]
	}
 800969e:	4618      	mov	r0, r3
 80096a0:	3720      	adds	r7, #32
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b086      	sub	sp, #24
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10a      	bne.n	80096cc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	613b      	str	r3, [r7, #16]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d90a      	bls.n	80096ea <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	60fb      	str	r3, [r7, #12]
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80096ea:	2202      	movs	r2, #2
 80096ec:	2100      	movs	r1, #0
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff fe8e 	bl	8009410 <xQueueGenericCreate>
 80096f4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009702:	697b      	ldr	r3, [r7, #20]
	}
 8009704:	4618      	mov	r0, r3
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08e      	sub	sp, #56	; 0x38
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800971a:	2300      	movs	r3, #0
 800971c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <xQueueGenericSend+0x32>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d103      	bne.n	800974c <xQueueGenericSend+0x40>
 8009744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <xQueueGenericSend+0x44>
 800974c:	2301      	movs	r3, #1
 800974e:	e000      	b.n	8009752 <xQueueGenericSend+0x46>
 8009750:	2300      	movs	r3, #0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10a      	bne.n	800976c <xQueueGenericSend+0x60>
	__asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009768:	bf00      	nop
 800976a:	e7fe      	b.n	800976a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2b02      	cmp	r3, #2
 8009770:	d103      	bne.n	800977a <xQueueGenericSend+0x6e>
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009776:	2b01      	cmp	r3, #1
 8009778:	d101      	bne.n	800977e <xQueueGenericSend+0x72>
 800977a:	2301      	movs	r3, #1
 800977c:	e000      	b.n	8009780 <xQueueGenericSend+0x74>
 800977e:	2300      	movs	r3, #0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <xQueueGenericSend+0x8e>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	623b      	str	r3, [r7, #32]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800979a:	f001 fccf 	bl	800b13c <xTaskGetSchedulerState>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d102      	bne.n	80097aa <xQueueGenericSend+0x9e>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <xQueueGenericSend+0xa2>
 80097aa:	2301      	movs	r3, #1
 80097ac:	e000      	b.n	80097b0 <xQueueGenericSend+0xa4>
 80097ae:	2300      	movs	r3, #0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <xQueueGenericSend+0xbe>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	61fb      	str	r3, [r7, #28]
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097ca:	f7ff fc43 	bl	8009054 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d302      	bcc.n	80097e0 <xQueueGenericSend+0xd4>
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d129      	bne.n	8009834 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	68b9      	ldr	r1, [r7, #8]
 80097e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097e6:	f000 fc5e 	bl	800a0a6 <prvCopyDataToQueue>
 80097ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d010      	beq.n	8009816 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	3324      	adds	r3, #36	; 0x24
 80097f8:	4618      	mov	r0, r3
 80097fa:	f001 fa79 	bl	800acf0 <xTaskRemoveFromEventList>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d013      	beq.n	800982c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009804:	4b3f      	ldr	r3, [pc, #252]	; (8009904 <xQueueGenericSend+0x1f8>)
 8009806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	e00a      	b.n	800982c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d007      	beq.n	800982c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800981c:	4b39      	ldr	r3, [pc, #228]	; (8009904 <xQueueGenericSend+0x1f8>)
 800981e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800982c:	f7ff fc42 	bl	80090b4 <vPortExitCritical>
				return pdPASS;
 8009830:	2301      	movs	r3, #1
 8009832:	e063      	b.n	80098fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d103      	bne.n	8009842 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800983a:	f7ff fc3b 	bl	80090b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800983e:	2300      	movs	r3, #0
 8009840:	e05c      	b.n	80098fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009844:	2b00      	cmp	r3, #0
 8009846:	d106      	bne.n	8009856 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009848:	f107 0314 	add.w	r3, r7, #20
 800984c:	4618      	mov	r0, r3
 800984e:	f001 fab5 	bl	800adbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009852:	2301      	movs	r3, #1
 8009854:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009856:	f7ff fc2d 	bl	80090b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800985a:	f000 ffc5 	bl	800a7e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800985e:	f7ff fbf9 	bl	8009054 <vPortEnterCritical>
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009868:	b25b      	sxtb	r3, r3
 800986a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986e:	d103      	bne.n	8009878 <xQueueGenericSend+0x16c>
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800987e:	b25b      	sxtb	r3, r3
 8009880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009884:	d103      	bne.n	800988e <xQueueGenericSend+0x182>
 8009886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800988e:	f7ff fc11 	bl	80090b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009892:	1d3a      	adds	r2, r7, #4
 8009894:	f107 0314 	add.w	r3, r7, #20
 8009898:	4611      	mov	r1, r2
 800989a:	4618      	mov	r0, r3
 800989c:	f001 faa4 	bl	800ade8 <xTaskCheckForTimeOut>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d124      	bne.n	80098f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098a8:	f000 fcf5 	bl	800a296 <prvIsQueueFull>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d018      	beq.n	80098e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b4:	3310      	adds	r3, #16
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	4611      	mov	r1, r2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f001 f9c8 	bl	800ac50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098c2:	f000 fc80 	bl	800a1c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098c6:	f000 ffd5 	bl	800a874 <xTaskResumeAll>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f47f af7c 	bne.w	80097ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80098d2:	4b0c      	ldr	r3, [pc, #48]	; (8009904 <xQueueGenericSend+0x1f8>)
 80098d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d8:	601a      	str	r2, [r3, #0]
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	e772      	b.n	80097ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80098e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098e6:	f000 fc6e 	bl	800a1c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098ea:	f000 ffc3 	bl	800a874 <xTaskResumeAll>
 80098ee:	e76c      	b.n	80097ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80098f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098f2:	f000 fc68 	bl	800a1c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098f6:	f000 ffbd 	bl	800a874 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3738      	adds	r7, #56	; 0x38
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	e000ed04 	.word	0xe000ed04

08009908 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b090      	sub	sp, #64	; 0x40
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
 8009914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10a      	bne.n	8009936 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d103      	bne.n	8009944 <xQueueGenericSendFromISR+0x3c>
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <xQueueGenericSendFromISR+0x40>
 8009944:	2301      	movs	r3, #1
 8009946:	e000      	b.n	800994a <xQueueGenericSendFromISR+0x42>
 8009948:	2300      	movs	r3, #0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	2b02      	cmp	r3, #2
 8009968:	d103      	bne.n	8009972 <xQueueGenericSendFromISR+0x6a>
 800996a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	2b01      	cmp	r3, #1
 8009970:	d101      	bne.n	8009976 <xQueueGenericSendFromISR+0x6e>
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <xQueueGenericSendFromISR+0x70>
 8009976:	2300      	movs	r3, #0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	623b      	str	r3, [r7, #32]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009992:	f7ff fc1d 	bl	80091d0 <vPortValidateInterruptPriority>
	__asm volatile
 8009996:	f3ef 8211 	mrs	r2, BASEPRI
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	61fa      	str	r2, [r7, #28]
 80099ac:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80099ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d302      	bcc.n	80099c4 <xQueueGenericSendFromISR+0xbc>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d12f      	bne.n	8009a24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	68b9      	ldr	r1, [r7, #8]
 80099d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099da:	f000 fb64 	bl	800a0a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80099e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e6:	d112      	bne.n	8009a0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d016      	beq.n	8009a1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f2:	3324      	adds	r3, #36	; 0x24
 80099f4:	4618      	mov	r0, r3
 80099f6:	f001 f97b 	bl	800acf0 <xTaskRemoveFromEventList>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00e      	beq.n	8009a1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00b      	beq.n	8009a1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	e007      	b.n	8009a1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a12:	3301      	adds	r3, #1
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	b25a      	sxtb	r2, r3
 8009a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009a22:	e001      	b.n	8009a28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	f383 8811 	msr	BASEPRI, r3
}
 8009a32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3740      	adds	r7, #64	; 0x40
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b08e      	sub	sp, #56	; 0x38
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	623b      	str	r3, [r7, #32]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00a      	beq.n	8009a86 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	61fb      	str	r3, [r7, #28]
}
 8009a82:	bf00      	nop
 8009a84:	e7fe      	b.n	8009a84 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d103      	bne.n	8009a96 <xQueueGiveFromISR+0x58>
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <xQueueGiveFromISR+0x5c>
 8009a96:	2301      	movs	r3, #1
 8009a98:	e000      	b.n	8009a9c <xQueueGiveFromISR+0x5e>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10a      	bne.n	8009ab6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	61bb      	str	r3, [r7, #24]
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ab6:	f7ff fb8b 	bl	80091d0 <vPortValidateInterruptPriority>
	__asm volatile
 8009aba:	f3ef 8211 	mrs	r2, BASEPRI
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	617a      	str	r2, [r7, #20]
 8009ad0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009ad2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ada:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d22b      	bcs.n	8009b3e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009af8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b00:	d112      	bne.n	8009b28 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d016      	beq.n	8009b38 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	3324      	adds	r3, #36	; 0x24
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f001 f8ee 	bl	800acf0 <xTaskRemoveFromEventList>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00e      	beq.n	8009b38 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00b      	beq.n	8009b38 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2201      	movs	r2, #1
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	e007      	b.n	8009b38 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	b25a      	sxtb	r2, r3
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b3c:	e001      	b.n	8009b42 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	637b      	str	r3, [r7, #52]	; 0x34
 8009b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f383 8811 	msr	BASEPRI, r3
}
 8009b4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3738      	adds	r7, #56	; 0x38
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08c      	sub	sp, #48	; 0x30
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b64:	2300      	movs	r3, #0
 8009b66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10a      	bne.n	8009b88 <xQueueReceive+0x30>
	__asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	623b      	str	r3, [r7, #32]
}
 8009b84:	bf00      	nop
 8009b86:	e7fe      	b.n	8009b86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d103      	bne.n	8009b96 <xQueueReceive+0x3e>
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <xQueueReceive+0x42>
 8009b96:	2301      	movs	r3, #1
 8009b98:	e000      	b.n	8009b9c <xQueueReceive+0x44>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10a      	bne.n	8009bb6 <xQueueReceive+0x5e>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	61fb      	str	r3, [r7, #28]
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bb6:	f001 fac1 	bl	800b13c <xTaskGetSchedulerState>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d102      	bne.n	8009bc6 <xQueueReceive+0x6e>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <xQueueReceive+0x72>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e000      	b.n	8009bcc <xQueueReceive+0x74>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10a      	bne.n	8009be6 <xQueueReceive+0x8e>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	61bb      	str	r3, [r7, #24]
}
 8009be2:	bf00      	nop
 8009be4:	e7fe      	b.n	8009be4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009be6:	f7ff fa35 	bl	8009054 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d01f      	beq.n	8009c36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bf6:	68b9      	ldr	r1, [r7, #8]
 8009bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bfa:	f000 fabe 	bl	800a17a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c00:	1e5a      	subs	r2, r3, #1
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00f      	beq.n	8009c2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	3310      	adds	r3, #16
 8009c12:	4618      	mov	r0, r3
 8009c14:	f001 f86c 	bl	800acf0 <xTaskRemoveFromEventList>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d007      	beq.n	8009c2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c1e:	4b3d      	ldr	r3, [pc, #244]	; (8009d14 <xQueueReceive+0x1bc>)
 8009c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c2e:	f7ff fa41 	bl	80090b4 <vPortExitCritical>
				return pdPASS;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e069      	b.n	8009d0a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d103      	bne.n	8009c44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c3c:	f7ff fa3a 	bl	80090b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c40:	2300      	movs	r3, #0
 8009c42:	e062      	b.n	8009d0a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d106      	bne.n	8009c58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c4a:	f107 0310 	add.w	r3, r7, #16
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f001 f8b4 	bl	800adbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c54:	2301      	movs	r3, #1
 8009c56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c58:	f7ff fa2c 	bl	80090b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c5c:	f000 fdc4 	bl	800a7e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c60:	f7ff f9f8 	bl	8009054 <vPortEnterCritical>
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c6a:	b25b      	sxtb	r3, r3
 8009c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c70:	d103      	bne.n	8009c7a <xQueueReceive+0x122>
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c80:	b25b      	sxtb	r3, r3
 8009c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c86:	d103      	bne.n	8009c90 <xQueueReceive+0x138>
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c90:	f7ff fa10 	bl	80090b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c94:	1d3a      	adds	r2, r7, #4
 8009c96:	f107 0310 	add.w	r3, r7, #16
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f001 f8a3 	bl	800ade8 <xTaskCheckForTimeOut>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d123      	bne.n	8009cf0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009caa:	f000 fade 	bl	800a26a <prvIsQueueEmpty>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d017      	beq.n	8009ce4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	3324      	adds	r3, #36	; 0x24
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	4611      	mov	r1, r2
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 ffc7 	bl	800ac50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc4:	f000 fa7f 	bl	800a1c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009cc8:	f000 fdd4 	bl	800a874 <xTaskResumeAll>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d189      	bne.n	8009be6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009cd2:	4b10      	ldr	r3, [pc, #64]	; (8009d14 <xQueueReceive+0x1bc>)
 8009cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd8:	601a      	str	r2, [r3, #0]
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	e780      	b.n	8009be6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce6:	f000 fa6e 	bl	800a1c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cea:	f000 fdc3 	bl	800a874 <xTaskResumeAll>
 8009cee:	e77a      	b.n	8009be6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cf2:	f000 fa68 	bl	800a1c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cf6:	f000 fdbd 	bl	800a874 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cfc:	f000 fab5 	bl	800a26a <prvIsQueueEmpty>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f43f af6f 	beq.w	8009be6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3730      	adds	r7, #48	; 0x30
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	e000ed04 	.word	0xe000ed04

08009d18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08e      	sub	sp, #56	; 0x38
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d22:	2300      	movs	r3, #0
 8009d24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	623b      	str	r3, [r7, #32]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	61fb      	str	r3, [r7, #28]
}
 8009d64:	bf00      	nop
 8009d66:	e7fe      	b.n	8009d66 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d68:	f001 f9e8 	bl	800b13c <xTaskGetSchedulerState>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d102      	bne.n	8009d78 <xQueueSemaphoreTake+0x60>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <xQueueSemaphoreTake+0x64>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e000      	b.n	8009d7e <xQueueSemaphoreTake+0x66>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10a      	bne.n	8009d98 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	61bb      	str	r3, [r7, #24]
}
 8009d94:	bf00      	nop
 8009d96:	e7fe      	b.n	8009d96 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d98:	f7ff f95c 	bl	8009054 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d024      	beq.n	8009df2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	1e5a      	subs	r2, r3, #1
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d104      	bne.n	8009dc2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009db8:	f001 fb36 	bl	800b428 <pvTaskIncrementMutexHeldCount>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00f      	beq.n	8009dea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dcc:	3310      	adds	r3, #16
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 ff8e 	bl	800acf0 <xTaskRemoveFromEventList>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d007      	beq.n	8009dea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009dda:	4b54      	ldr	r3, [pc, #336]	; (8009f2c <xQueueSemaphoreTake+0x214>)
 8009ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009dea:	f7ff f963 	bl	80090b4 <vPortExitCritical>
				return pdPASS;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e097      	b.n	8009f22 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d111      	bne.n	8009e1c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	617b      	str	r3, [r7, #20]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009e14:	f7ff f94e 	bl	80090b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	e082      	b.n	8009f22 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d106      	bne.n	8009e30 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e22:	f107 030c 	add.w	r3, r7, #12
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 ffc8 	bl	800adbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e30:	f7ff f940 	bl	80090b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e34:	f000 fcd8 	bl	800a7e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e38:	f7ff f90c 	bl	8009054 <vPortEnterCritical>
 8009e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e42:	b25b      	sxtb	r3, r3
 8009e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e48:	d103      	bne.n	8009e52 <xQueueSemaphoreTake+0x13a>
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e58:	b25b      	sxtb	r3, r3
 8009e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5e:	d103      	bne.n	8009e68 <xQueueSemaphoreTake+0x150>
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e68:	f7ff f924 	bl	80090b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e6c:	463a      	mov	r2, r7
 8009e6e:	f107 030c 	add.w	r3, r7, #12
 8009e72:	4611      	mov	r1, r2
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 ffb7 	bl	800ade8 <xTaskCheckForTimeOut>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d132      	bne.n	8009ee6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e82:	f000 f9f2 	bl	800a26a <prvIsQueueEmpty>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d026      	beq.n	8009eda <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d109      	bne.n	8009ea8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009e94:	f7ff f8de 	bl	8009054 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 f96b 	bl	800b178 <xTaskPriorityInherit>
 8009ea2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009ea4:	f7ff f906 	bl	80090b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eaa:	3324      	adds	r3, #36	; 0x24
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	4611      	mov	r1, r2
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 fecd 	bl	800ac50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009eb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eb8:	f000 f985 	bl	800a1c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ebc:	f000 fcda 	bl	800a874 <xTaskResumeAll>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f47f af68 	bne.w	8009d98 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009ec8:	4b18      	ldr	r3, [pc, #96]	; (8009f2c <xQueueSemaphoreTake+0x214>)
 8009eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	e75e      	b.n	8009d98 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009eda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009edc:	f000 f973 	bl	800a1c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ee0:	f000 fcc8 	bl	800a874 <xTaskResumeAll>
 8009ee4:	e758      	b.n	8009d98 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009ee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ee8:	f000 f96d 	bl	800a1c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009eec:	f000 fcc2 	bl	800a874 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ef0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ef2:	f000 f9ba 	bl	800a26a <prvIsQueueEmpty>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f43f af4d 	beq.w	8009d98 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00d      	beq.n	8009f20 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009f04:	f7ff f8a6 	bl	8009054 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f0a:	f000 f8b4 	bl	800a076 <prvGetDisinheritPriorityAfterTimeout>
 8009f0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f16:	4618      	mov	r0, r3
 8009f18:	f001 fa04 	bl	800b324 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009f1c:	f7ff f8ca 	bl	80090b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3738      	adds	r7, #56	; 0x38
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	e000ed04 	.word	0xe000ed04

08009f30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08e      	sub	sp, #56	; 0x38
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	623b      	str	r3, [r7, #32]
}
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d103      	bne.n	8009f6a <xQueueReceiveFromISR+0x3a>
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <xQueueReceiveFromISR+0x3e>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e000      	b.n	8009f70 <xQueueReceiveFromISR+0x40>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	61fb      	str	r3, [r7, #28]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f8a:	f7ff f921 	bl	80091d0 <vPortValidateInterruptPriority>
	__asm volatile
 8009f8e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	61ba      	str	r2, [r7, #24]
 8009fa4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009fa6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d02f      	beq.n	800a016 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009fc0:	68b9      	ldr	r1, [r7, #8]
 8009fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fc4:	f000 f8d9 	bl	800a17a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	1e5a      	subs	r2, r3, #1
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009fd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd8:	d112      	bne.n	800a000 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d016      	beq.n	800a010 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	3310      	adds	r3, #16
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 fe82 	bl	800acf0 <xTaskRemoveFromEventList>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00e      	beq.n	800a010 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00b      	beq.n	800a010 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	601a      	str	r2, [r3, #0]
 8009ffe:	e007      	b.n	800a010 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a004:	3301      	adds	r3, #1
 800a006:	b2db      	uxtb	r3, r3
 800a008:	b25a      	sxtb	r2, r3
 800a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a010:	2301      	movs	r3, #1
 800a012:	637b      	str	r3, [r7, #52]	; 0x34
 800a014:	e001      	b.n	800a01a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a016:	2300      	movs	r3, #0
 800a018:	637b      	str	r3, [r7, #52]	; 0x34
 800a01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	f383 8811 	msr	BASEPRI, r3
}
 800a024:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3738      	adds	r7, #56	; 0x38
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10a      	bne.n	800a058 <vQueueDelete+0x28>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	60bb      	str	r3, [r7, #8]
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 f95f 	bl	800a31c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a064:	2b00      	cmp	r3, #0
 800a066:	d102      	bne.n	800a06e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7fe fcf7 	bl	8008a5c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a06e:	bf00      	nop
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a076:	b480      	push	{r7}
 800a078:	b085      	sub	sp, #20
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a082:	2b00      	cmp	r3, #0
 800a084:	d006      	beq.n	800a094 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	e001      	b.n	800a098 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a094:	2300      	movs	r3, #0
 800a096:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a098:	68fb      	ldr	r3, [r7, #12]
	}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b086      	sub	sp, #24
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	60b9      	str	r1, [r7, #8]
 800a0b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10d      	bne.n	800a0e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d14d      	bne.n	800a168 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 f8b9 	bl	800b248 <xTaskPriorityDisinherit>
 800a0d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	609a      	str	r2, [r3, #8]
 800a0de:	e043      	b.n	800a168 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d119      	bne.n	800a11a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6858      	ldr	r0, [r3, #4]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	68b9      	ldr	r1, [r7, #8]
 800a0f2:	f004 f809 	bl	800e108 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fe:	441a      	add	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d32b      	bcc.n	800a168 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	605a      	str	r2, [r3, #4]
 800a118:	e026      	b.n	800a168 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	68d8      	ldr	r0, [r3, #12]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a122:	461a      	mov	r2, r3
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	f003 ffef 	bl	800e108 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	68da      	ldr	r2, [r3, #12]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a132:	425b      	negs	r3, r3
 800a134:	441a      	add	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	68da      	ldr	r2, [r3, #12]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	429a      	cmp	r2, r3
 800a144:	d207      	bcs.n	800a156 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	689a      	ldr	r2, [r3, #8]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14e:	425b      	negs	r3, r3
 800a150:	441a      	add	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d105      	bne.n	800a168 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d002      	beq.n	800a168 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	3b01      	subs	r3, #1
 800a166:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a170:	697b      	ldr	r3, [r7, #20]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d018      	beq.n	800a1be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	68da      	ldr	r2, [r3, #12]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a194:	441a      	add	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68da      	ldr	r2, [r3, #12]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d303      	bcc.n	800a1ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68d9      	ldr	r1, [r3, #12]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6838      	ldr	r0, [r7, #0]
 800a1ba:	f003 ffa5 	bl	800e108 <memcpy>
	}
}
 800a1be:	bf00      	nop
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a1ce:	f7fe ff41 	bl	8009054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a1da:	e011      	b.n	800a200 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d012      	beq.n	800a20a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3324      	adds	r3, #36	; 0x24
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 fd81 	bl	800acf0 <xTaskRemoveFromEventList>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a1f4:	f000 fe5a 	bl	800aeac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a204:	2b00      	cmp	r3, #0
 800a206:	dce9      	bgt.n	800a1dc <prvUnlockQueue+0x16>
 800a208:	e000      	b.n	800a20c <prvUnlockQueue+0x46>
					break;
 800a20a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	22ff      	movs	r2, #255	; 0xff
 800a210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a214:	f7fe ff4e 	bl	80090b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a218:	f7fe ff1c 	bl	8009054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a222:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a224:	e011      	b.n	800a24a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d012      	beq.n	800a254 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3310      	adds	r3, #16
 800a232:	4618      	mov	r0, r3
 800a234:	f000 fd5c 	bl	800acf0 <xTaskRemoveFromEventList>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a23e:	f000 fe35 	bl	800aeac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a242:	7bbb      	ldrb	r3, [r7, #14]
 800a244:	3b01      	subs	r3, #1
 800a246:	b2db      	uxtb	r3, r3
 800a248:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a24a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	dce9      	bgt.n	800a226 <prvUnlockQueue+0x60>
 800a252:	e000      	b.n	800a256 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a254:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	22ff      	movs	r2, #255	; 0xff
 800a25a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a25e:	f7fe ff29 	bl	80090b4 <vPortExitCritical>
}
 800a262:	bf00      	nop
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b084      	sub	sp, #16
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a272:	f7fe feef 	bl	8009054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d102      	bne.n	800a284 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a27e:	2301      	movs	r3, #1
 800a280:	60fb      	str	r3, [r7, #12]
 800a282:	e001      	b.n	800a288 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a284:	2300      	movs	r3, #0
 800a286:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a288:	f7fe ff14 	bl	80090b4 <vPortExitCritical>

	return xReturn;
 800a28c:	68fb      	ldr	r3, [r7, #12]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b084      	sub	sp, #16
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a29e:	f7fe fed9 	bl	8009054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d102      	bne.n	800a2b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	60fb      	str	r3, [r7, #12]
 800a2b2:	e001      	b.n	800a2b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2b8:	f7fe fefc 	bl	80090b4 <vPortExitCritical>

	return xReturn;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	e014      	b.n	800a302 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a2d8:	4a0f      	ldr	r2, [pc, #60]	; (800a318 <vQueueAddToRegistry+0x50>)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10b      	bne.n	800a2fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a2e4:	490c      	ldr	r1, [pc, #48]	; (800a318 <vQueueAddToRegistry+0x50>)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a2ee:	4a0a      	ldr	r2, [pc, #40]	; (800a318 <vQueueAddToRegistry+0x50>)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	4413      	add	r3, r2
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a2fa:	e006      	b.n	800a30a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	3301      	adds	r3, #1
 800a300:	60fb      	str	r3, [r7, #12]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2b07      	cmp	r3, #7
 800a306:	d9e7      	bls.n	800a2d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a308:	bf00      	nop
 800a30a:	bf00      	nop
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	20005b2c 	.word	0x20005b2c

0800a31c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a324:	2300      	movs	r3, #0
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	e016      	b.n	800a358 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a32a:	4a10      	ldr	r2, [pc, #64]	; (800a36c <vQueueUnregisterQueue+0x50>)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	4413      	add	r3, r2
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	429a      	cmp	r2, r3
 800a338:	d10b      	bne.n	800a352 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a33a:	4a0c      	ldr	r2, [pc, #48]	; (800a36c <vQueueUnregisterQueue+0x50>)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2100      	movs	r1, #0
 800a340:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a344:	4a09      	ldr	r2, [pc, #36]	; (800a36c <vQueueUnregisterQueue+0x50>)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	00db      	lsls	r3, r3, #3
 800a34a:	4413      	add	r3, r2
 800a34c:	2200      	movs	r2, #0
 800a34e:	605a      	str	r2, [r3, #4]
				break;
 800a350:	e006      	b.n	800a360 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	3301      	adds	r3, #1
 800a356:	60fb      	str	r3, [r7, #12]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b07      	cmp	r3, #7
 800a35c:	d9e5      	bls.n	800a32a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a35e:	bf00      	nop
 800a360:	bf00      	nop
 800a362:	3714      	adds	r7, #20
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	20005b2c 	.word	0x20005b2c

0800a370 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a380:	f7fe fe68 	bl	8009054 <vPortEnterCritical>
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a38a:	b25b      	sxtb	r3, r3
 800a38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a390:	d103      	bne.n	800a39a <vQueueWaitForMessageRestricted+0x2a>
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3a0:	b25b      	sxtb	r3, r3
 800a3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a6:	d103      	bne.n	800a3b0 <vQueueWaitForMessageRestricted+0x40>
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3b0:	f7fe fe80 	bl	80090b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d106      	bne.n	800a3ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	3324      	adds	r3, #36	; 0x24
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	68b9      	ldr	r1, [r7, #8]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 fc67 	bl	800ac98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a3ca:	6978      	ldr	r0, [r7, #20]
 800a3cc:	f7ff fefb 	bl	800a1c6 <prvUnlockQueue>
	}
 800a3d0:	bf00      	nop
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b08e      	sub	sp, #56	; 0x38
 800a3dc:	af04      	add	r7, sp, #16
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	623b      	str	r3, [r7, #32]
}
 800a3fe:	bf00      	nop
 800a400:	e7fe      	b.n	800a400 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10a      	bne.n	800a41e <xTaskCreateStatic+0x46>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	61fb      	str	r3, [r7, #28]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a41e:	235c      	movs	r3, #92	; 0x5c
 800a420:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2b5c      	cmp	r3, #92	; 0x5c
 800a426:	d00a      	beq.n	800a43e <xTaskCreateStatic+0x66>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	61bb      	str	r3, [r7, #24]
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a43e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a442:	2b00      	cmp	r3, #0
 800a444:	d01e      	beq.n	800a484 <xTaskCreateStatic+0xac>
 800a446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d01b      	beq.n	800a484 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a454:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	2202      	movs	r2, #2
 800a45a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a45e:	2300      	movs	r3, #0
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a464:	9302      	str	r3, [sp, #8]
 800a466:	f107 0314 	add.w	r3, r7, #20
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	68b9      	ldr	r1, [r7, #8]
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f000 f850 	bl	800a51c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a47c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a47e:	f000 f8dd 	bl	800a63c <prvAddNewTaskToReadyList>
 800a482:	e001      	b.n	800a488 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a484:	2300      	movs	r3, #0
 800a486:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a488:	697b      	ldr	r3, [r7, #20]
	}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3728      	adds	r7, #40	; 0x28
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a492:	b580      	push	{r7, lr}
 800a494:	b08c      	sub	sp, #48	; 0x30
 800a496:	af04      	add	r7, sp, #16
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	60b9      	str	r1, [r7, #8]
 800a49c:	603b      	str	r3, [r7, #0]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4a2:	88fb      	ldrh	r3, [r7, #6]
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fe fa0c 	bl	80088c4 <pvPortMalloc>
 800a4ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00e      	beq.n	800a4d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4b4:	205c      	movs	r0, #92	; 0x5c
 800a4b6:	f7fe fa05 	bl	80088c4 <pvPortMalloc>
 800a4ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	631a      	str	r2, [r3, #48]	; 0x30
 800a4c8:	e005      	b.n	800a4d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4ca:	6978      	ldr	r0, [r7, #20]
 800a4cc:	f7fe fac6 	bl	8008a5c <vPortFree>
 800a4d0:	e001      	b.n	800a4d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d017      	beq.n	800a50c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a4e4:	88fa      	ldrh	r2, [r7, #6]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9303      	str	r3, [sp, #12]
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	9302      	str	r3, [sp, #8]
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	9301      	str	r3, [sp, #4]
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 f80e 	bl	800a51c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a500:	69f8      	ldr	r0, [r7, #28]
 800a502:	f000 f89b 	bl	800a63c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a506:	2301      	movs	r3, #1
 800a508:	61bb      	str	r3, [r7, #24]
 800a50a:	e002      	b.n	800a512 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a50c:	f04f 33ff 	mov.w	r3, #4294967295
 800a510:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a512:	69bb      	ldr	r3, [r7, #24]
	}
 800a514:	4618      	mov	r0, r3
 800a516:	3720      	adds	r7, #32
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
 800a528:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	461a      	mov	r2, r3
 800a534:	21a5      	movs	r1, #165	; 0xa5
 800a536:	f003 fdf5 	bl	800e124 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a544:	3b01      	subs	r3, #1
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	f023 0307 	bic.w	r3, r3, #7
 800a552:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	617b      	str	r3, [r7, #20]
}
 800a570:	bf00      	nop
 800a572:	e7fe      	b.n	800a572 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d01f      	beq.n	800a5ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a57a:	2300      	movs	r3, #0
 800a57c:	61fb      	str	r3, [r7, #28]
 800a57e:	e012      	b.n	800a5a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	4413      	add	r3, r2
 800a586:	7819      	ldrb	r1, [r3, #0]
 800a588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	4413      	add	r3, r2
 800a58e:	3334      	adds	r3, #52	; 0x34
 800a590:	460a      	mov	r2, r1
 800a592:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	4413      	add	r3, r2
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d006      	beq.n	800a5ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	61fb      	str	r3, [r7, #28]
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	2b0f      	cmp	r3, #15
 800a5aa:	d9e9      	bls.n	800a580 <prvInitialiseNewTask+0x64>
 800a5ac:	e000      	b.n	800a5b0 <prvInitialiseNewTask+0x94>
			{
				break;
 800a5ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5b8:	e003      	b.n	800a5c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c4:	2b37      	cmp	r3, #55	; 0x37
 800a5c6:	d901      	bls.n	800a5cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5c8:	2337      	movs	r3, #55	; 0x37
 800a5ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5da:	2200      	movs	r2, #0
 800a5dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe fb78 	bl	8008cd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ea:	3318      	adds	r3, #24
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe fb73 	bl	8008cd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a600:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a606:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	2200      	movs	r2, #0
 800a60c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	2200      	movs	r2, #0
 800a612:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	68f9      	ldr	r1, [r7, #12]
 800a61a:	69b8      	ldr	r0, [r7, #24]
 800a61c:	f7fe fbf0 	bl	8008e00 <pxPortInitialiseStack>
 800a620:	4602      	mov	r2, r0
 800a622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a624:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a632:	bf00      	nop
 800a634:	3720      	adds	r7, #32
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
	...

0800a63c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a644:	f7fe fd06 	bl	8009054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a648:	4b2d      	ldr	r3, [pc, #180]	; (800a700 <prvAddNewTaskToReadyList+0xc4>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3301      	adds	r3, #1
 800a64e:	4a2c      	ldr	r2, [pc, #176]	; (800a700 <prvAddNewTaskToReadyList+0xc4>)
 800a650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a652:	4b2c      	ldr	r3, [pc, #176]	; (800a704 <prvAddNewTaskToReadyList+0xc8>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d109      	bne.n	800a66e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a65a:	4a2a      	ldr	r2, [pc, #168]	; (800a704 <prvAddNewTaskToReadyList+0xc8>)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a660:	4b27      	ldr	r3, [pc, #156]	; (800a700 <prvAddNewTaskToReadyList+0xc4>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d110      	bne.n	800a68a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a668:	f000 fc9a 	bl	800afa0 <prvInitialiseTaskLists>
 800a66c:	e00d      	b.n	800a68a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a66e:	4b26      	ldr	r3, [pc, #152]	; (800a708 <prvAddNewTaskToReadyList+0xcc>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d109      	bne.n	800a68a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a676:	4b23      	ldr	r3, [pc, #140]	; (800a704 <prvAddNewTaskToReadyList+0xc8>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a680:	429a      	cmp	r2, r3
 800a682:	d802      	bhi.n	800a68a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a684:	4a1f      	ldr	r2, [pc, #124]	; (800a704 <prvAddNewTaskToReadyList+0xc8>)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a68a:	4b20      	ldr	r3, [pc, #128]	; (800a70c <prvAddNewTaskToReadyList+0xd0>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3301      	adds	r3, #1
 800a690:	4a1e      	ldr	r2, [pc, #120]	; (800a70c <prvAddNewTaskToReadyList+0xd0>)
 800a692:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a694:	4b1d      	ldr	r3, [pc, #116]	; (800a70c <prvAddNewTaskToReadyList+0xd0>)
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a0:	4b1b      	ldr	r3, [pc, #108]	; (800a710 <prvAddNewTaskToReadyList+0xd4>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d903      	bls.n	800a6b0 <prvAddNewTaskToReadyList+0x74>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ac:	4a18      	ldr	r2, [pc, #96]	; (800a710 <prvAddNewTaskToReadyList+0xd4>)
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4a15      	ldr	r2, [pc, #84]	; (800a714 <prvAddNewTaskToReadyList+0xd8>)
 800a6be:	441a      	add	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	f7fe fb13 	bl	8008cf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a6cc:	f7fe fcf2 	bl	80090b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a6d0:	4b0d      	ldr	r3, [pc, #52]	; (800a708 <prvAddNewTaskToReadyList+0xcc>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00e      	beq.n	800a6f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a6d8:	4b0a      	ldr	r3, [pc, #40]	; (800a704 <prvAddNewTaskToReadyList+0xc8>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d207      	bcs.n	800a6f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a6e6:	4b0c      	ldr	r3, [pc, #48]	; (800a718 <prvAddNewTaskToReadyList+0xdc>)
 800a6e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20006040 	.word	0x20006040
 800a704:	20005b6c 	.word	0x20005b6c
 800a708:	2000604c 	.word	0x2000604c
 800a70c:	2000605c 	.word	0x2000605c
 800a710:	20006048 	.word	0x20006048
 800a714:	20005b70 	.word	0x20005b70
 800a718:	e000ed04 	.word	0xe000ed04

0800a71c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b08a      	sub	sp, #40	; 0x28
 800a720:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a722:	2300      	movs	r3, #0
 800a724:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a726:	2300      	movs	r3, #0
 800a728:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a72a:	463a      	mov	r2, r7
 800a72c:	1d39      	adds	r1, r7, #4
 800a72e:	f107 0308 	add.w	r3, r7, #8
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe f892 	bl	800885c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	9202      	str	r2, [sp, #8]
 800a740:	9301      	str	r3, [sp, #4]
 800a742:	2300      	movs	r3, #0
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	2300      	movs	r3, #0
 800a748:	460a      	mov	r2, r1
 800a74a:	4921      	ldr	r1, [pc, #132]	; (800a7d0 <vTaskStartScheduler+0xb4>)
 800a74c:	4821      	ldr	r0, [pc, #132]	; (800a7d4 <vTaskStartScheduler+0xb8>)
 800a74e:	f7ff fe43 	bl	800a3d8 <xTaskCreateStatic>
 800a752:	4603      	mov	r3, r0
 800a754:	4a20      	ldr	r2, [pc, #128]	; (800a7d8 <vTaskStartScheduler+0xbc>)
 800a756:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a758:	4b1f      	ldr	r3, [pc, #124]	; (800a7d8 <vTaskStartScheduler+0xbc>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a760:	2301      	movs	r3, #1
 800a762:	617b      	str	r3, [r7, #20]
 800a764:	e001      	b.n	800a76a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a766:	2300      	movs	r3, #0
 800a768:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d102      	bne.n	800a776 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a770:	f001 f8b2 	bl	800b8d8 <xTimerCreateTimerTask>
 800a774:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d116      	bne.n	800a7aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	613b      	str	r3, [r7, #16]
}
 800a78e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a790:	4b12      	ldr	r3, [pc, #72]	; (800a7dc <vTaskStartScheduler+0xc0>)
 800a792:	f04f 32ff 	mov.w	r2, #4294967295
 800a796:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a798:	4b11      	ldr	r3, [pc, #68]	; (800a7e0 <vTaskStartScheduler+0xc4>)
 800a79a:	2201      	movs	r2, #1
 800a79c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a79e:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <vTaskStartScheduler+0xc8>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a7a4:	f7fe fbb4 	bl	8008f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a7a8:	e00e      	b.n	800a7c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b0:	d10a      	bne.n	800a7c8 <vTaskStartScheduler+0xac>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	60fb      	str	r3, [r7, #12]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <vTaskStartScheduler+0xaa>
}
 800a7c8:	bf00      	nop
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	0800e704 	.word	0x0800e704
 800a7d4:	0800aec5 	.word	0x0800aec5
 800a7d8:	20006064 	.word	0x20006064
 800a7dc:	20006060 	.word	0x20006060
 800a7e0:	2000604c 	.word	0x2000604c
 800a7e4:	20006044 	.word	0x20006044

0800a7e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a7ec:	4b04      	ldr	r3, [pc, #16]	; (800a800 <vTaskSuspendAll+0x18>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	4a03      	ldr	r2, [pc, #12]	; (800a800 <vTaskSuspendAll+0x18>)
 800a7f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a7f6:	bf00      	nop
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	20006068 	.word	0x20006068

0800a804 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800a80e:	4b14      	ldr	r3, [pc, #80]	; (800a860 <prvGetExpectedIdleTime+0x5c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800a816:	2301      	movs	r3, #1
 800a818:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800a81a:	4b12      	ldr	r3, [pc, #72]	; (800a864 <prvGetExpectedIdleTime+0x60>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	607b      	str	r3, [r7, #4]
 800a828:	e012      	b.n	800a850 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800a82a:	4b0f      	ldr	r3, [pc, #60]	; (800a868 <prvGetExpectedIdleTime+0x64>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d902      	bls.n	800a838 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800a832:	2300      	movs	r3, #0
 800a834:	607b      	str	r3, [r7, #4]
 800a836:	e00b      	b.n	800a850 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d002      	beq.n	800a844 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	607b      	str	r3, [r7, #4]
 800a842:	e005      	b.n	800a850 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800a844:	4b09      	ldr	r3, [pc, #36]	; (800a86c <prvGetExpectedIdleTime+0x68>)
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	4b09      	ldr	r3, [pc, #36]	; (800a870 <prvGetExpectedIdleTime+0x6c>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800a850:	687b      	ldr	r3, [r7, #4]
	}
 800a852:	4618      	mov	r0, r3
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	20006048 	.word	0x20006048
 800a864:	20005b6c 	.word	0x20005b6c
 800a868:	20005b70 	.word	0x20005b70
 800a86c:	20006060 	.word	0x20006060
 800a870:	20006044 	.word	0x20006044

0800a874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a87a:	2300      	movs	r3, #0
 800a87c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a87e:	2300      	movs	r3, #0
 800a880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a882:	4b42      	ldr	r3, [pc, #264]	; (800a98c <xTaskResumeAll+0x118>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10a      	bne.n	800a8a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	603b      	str	r3, [r7, #0]
}
 800a89c:	bf00      	nop
 800a89e:	e7fe      	b.n	800a89e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a8a0:	f7fe fbd8 	bl	8009054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a8a4:	4b39      	ldr	r3, [pc, #228]	; (800a98c <xTaskResumeAll+0x118>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	4a38      	ldr	r2, [pc, #224]	; (800a98c <xTaskResumeAll+0x118>)
 800a8ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ae:	4b37      	ldr	r3, [pc, #220]	; (800a98c <xTaskResumeAll+0x118>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d162      	bne.n	800a97c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a8b6:	4b36      	ldr	r3, [pc, #216]	; (800a990 <xTaskResumeAll+0x11c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d05e      	beq.n	800a97c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8be:	e02f      	b.n	800a920 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8c0:	4b34      	ldr	r3, [pc, #208]	; (800a994 <xTaskResumeAll+0x120>)
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	3318      	adds	r3, #24
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fe fa6d 	bl	8008dac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fe fa68 	bl	8008dac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e0:	4b2d      	ldr	r3, [pc, #180]	; (800a998 <xTaskResumeAll+0x124>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d903      	bls.n	800a8f0 <xTaskResumeAll+0x7c>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ec:	4a2a      	ldr	r2, [pc, #168]	; (800a998 <xTaskResumeAll+0x124>)
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4a27      	ldr	r2, [pc, #156]	; (800a99c <xTaskResumeAll+0x128>)
 800a8fe:	441a      	add	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	3304      	adds	r3, #4
 800a904:	4619      	mov	r1, r3
 800a906:	4610      	mov	r0, r2
 800a908:	f7fe f9f3 	bl	8008cf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a910:	4b23      	ldr	r3, [pc, #140]	; (800a9a0 <xTaskResumeAll+0x12c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a916:	429a      	cmp	r2, r3
 800a918:	d302      	bcc.n	800a920 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a91a:	4b22      	ldr	r3, [pc, #136]	; (800a9a4 <xTaskResumeAll+0x130>)
 800a91c:	2201      	movs	r2, #1
 800a91e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a920:	4b1c      	ldr	r3, [pc, #112]	; (800a994 <xTaskResumeAll+0x120>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1cb      	bne.n	800a8c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a92e:	f000 fbd5 	bl	800b0dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a932:	4b1d      	ldr	r3, [pc, #116]	; (800a9a8 <xTaskResumeAll+0x134>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d010      	beq.n	800a960 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a93e:	f000 f86f 	bl	800aa20 <xTaskIncrementTick>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a948:	4b16      	ldr	r3, [pc, #88]	; (800a9a4 <xTaskResumeAll+0x130>)
 800a94a:	2201      	movs	r2, #1
 800a94c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	3b01      	subs	r3, #1
 800a952:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1f1      	bne.n	800a93e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a95a:	4b13      	ldr	r3, [pc, #76]	; (800a9a8 <xTaskResumeAll+0x134>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a960:	4b10      	ldr	r3, [pc, #64]	; (800a9a4 <xTaskResumeAll+0x130>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d009      	beq.n	800a97c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a968:	2301      	movs	r3, #1
 800a96a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a96c:	4b0f      	ldr	r3, [pc, #60]	; (800a9ac <xTaskResumeAll+0x138>)
 800a96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a97c:	f7fe fb9a 	bl	80090b4 <vPortExitCritical>

	return xAlreadyYielded;
 800a980:	68bb      	ldr	r3, [r7, #8]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	20006068 	.word	0x20006068
 800a990:	20006040 	.word	0x20006040
 800a994:	20006000 	.word	0x20006000
 800a998:	20006048 	.word	0x20006048
 800a99c:	20005b70 	.word	0x20005b70
 800a9a0:	20005b6c 	.word	0x20005b6c
 800a9a4:	20006054 	.word	0x20006054
 800a9a8:	20006050 	.word	0x20006050
 800a9ac:	e000ed04 	.word	0xe000ed04

0800a9b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a9b6:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <xTaskGetTickCount+0x1c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a9bc:	687b      	ldr	r3, [r7, #4]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	20006044 	.word	0x20006044

0800a9d0 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800a9d8:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <vTaskStepTick+0x48>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	441a      	add	r2, r3
 800a9e0:	4b0e      	ldr	r3, [pc, #56]	; (800aa1c <vTaskStepTick+0x4c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d90a      	bls.n	800a9fe <vTaskStepTick+0x2e>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	60fb      	str	r3, [r7, #12]
}
 800a9fa:	bf00      	nop
 800a9fc:	e7fe      	b.n	800a9fc <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800a9fe:	4b06      	ldr	r3, [pc, #24]	; (800aa18 <vTaskStepTick+0x48>)
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4413      	add	r3, r2
 800aa06:	4a04      	ldr	r2, [pc, #16]	; (800aa18 <vTaskStepTick+0x48>)
 800aa08:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800aa0a:	bf00      	nop
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	20006044 	.word	0x20006044
 800aa1c:	20006060 	.word	0x20006060

0800aa20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa26:	2300      	movs	r3, #0
 800aa28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa2a:	4b4f      	ldr	r3, [pc, #316]	; (800ab68 <xTaskIncrementTick+0x148>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f040 808f 	bne.w	800ab52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa34:	4b4d      	ldr	r3, [pc, #308]	; (800ab6c <xTaskIncrementTick+0x14c>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa3c:	4a4b      	ldr	r2, [pc, #300]	; (800ab6c <xTaskIncrementTick+0x14c>)
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d120      	bne.n	800aa8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa48:	4b49      	ldr	r3, [pc, #292]	; (800ab70 <xTaskIncrementTick+0x150>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00a      	beq.n	800aa68 <xTaskIncrementTick+0x48>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	603b      	str	r3, [r7, #0]
}
 800aa64:	bf00      	nop
 800aa66:	e7fe      	b.n	800aa66 <xTaskIncrementTick+0x46>
 800aa68:	4b41      	ldr	r3, [pc, #260]	; (800ab70 <xTaskIncrementTick+0x150>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	4b41      	ldr	r3, [pc, #260]	; (800ab74 <xTaskIncrementTick+0x154>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a3f      	ldr	r2, [pc, #252]	; (800ab70 <xTaskIncrementTick+0x150>)
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	4a3f      	ldr	r2, [pc, #252]	; (800ab74 <xTaskIncrementTick+0x154>)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6013      	str	r3, [r2, #0]
 800aa7c:	4b3e      	ldr	r3, [pc, #248]	; (800ab78 <xTaskIncrementTick+0x158>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	3301      	adds	r3, #1
 800aa82:	4a3d      	ldr	r2, [pc, #244]	; (800ab78 <xTaskIncrementTick+0x158>)
 800aa84:	6013      	str	r3, [r2, #0]
 800aa86:	f000 fb29 	bl	800b0dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa8a:	4b3c      	ldr	r3, [pc, #240]	; (800ab7c <xTaskIncrementTick+0x15c>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d349      	bcc.n	800ab28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa94:	4b36      	ldr	r3, [pc, #216]	; (800ab70 <xTaskIncrementTick+0x150>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d104      	bne.n	800aaa8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa9e:	4b37      	ldr	r3, [pc, #220]	; (800ab7c <xTaskIncrementTick+0x15c>)
 800aaa0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa4:	601a      	str	r2, [r3, #0]
					break;
 800aaa6:	e03f      	b.n	800ab28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaa8:	4b31      	ldr	r3, [pc, #196]	; (800ab70 <xTaskIncrementTick+0x150>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d203      	bcs.n	800aac8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aac0:	4a2e      	ldr	r2, [pc, #184]	; (800ab7c <xTaskIncrementTick+0x15c>)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aac6:	e02f      	b.n	800ab28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	3304      	adds	r3, #4
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe f96d 	bl	8008dac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d004      	beq.n	800aae4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	3318      	adds	r3, #24
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fe f964 	bl	8008dac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae8:	4b25      	ldr	r3, [pc, #148]	; (800ab80 <xTaskIncrementTick+0x160>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d903      	bls.n	800aaf8 <xTaskIncrementTick+0xd8>
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf4:	4a22      	ldr	r2, [pc, #136]	; (800ab80 <xTaskIncrementTick+0x160>)
 800aaf6:	6013      	str	r3, [r2, #0]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafc:	4613      	mov	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4413      	add	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4a1f      	ldr	r2, [pc, #124]	; (800ab84 <xTaskIncrementTick+0x164>)
 800ab06:	441a      	add	r2, r3
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4610      	mov	r0, r2
 800ab10:	f7fe f8ef 	bl	8008cf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab18:	4b1b      	ldr	r3, [pc, #108]	; (800ab88 <xTaskIncrementTick+0x168>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d3b8      	bcc.n	800aa94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab22:	2301      	movs	r3, #1
 800ab24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab26:	e7b5      	b.n	800aa94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab28:	4b17      	ldr	r3, [pc, #92]	; (800ab88 <xTaskIncrementTick+0x168>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2e:	4915      	ldr	r1, [pc, #84]	; (800ab84 <xTaskIncrementTick+0x164>)
 800ab30:	4613      	mov	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	440b      	add	r3, r1
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d901      	bls.n	800ab44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab40:	2301      	movs	r3, #1
 800ab42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab44:	4b11      	ldr	r3, [pc, #68]	; (800ab8c <xTaskIncrementTick+0x16c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d007      	beq.n	800ab5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	617b      	str	r3, [r7, #20]
 800ab50:	e004      	b.n	800ab5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab52:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <xTaskIncrementTick+0x170>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3301      	adds	r3, #1
 800ab58:	4a0d      	ldr	r2, [pc, #52]	; (800ab90 <xTaskIncrementTick+0x170>)
 800ab5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab5c:	697b      	ldr	r3, [r7, #20]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	20006068 	.word	0x20006068
 800ab6c:	20006044 	.word	0x20006044
 800ab70:	20005ff8 	.word	0x20005ff8
 800ab74:	20005ffc 	.word	0x20005ffc
 800ab78:	20006058 	.word	0x20006058
 800ab7c:	20006060 	.word	0x20006060
 800ab80:	20006048 	.word	0x20006048
 800ab84:	20005b70 	.word	0x20005b70
 800ab88:	20005b6c 	.word	0x20005b6c
 800ab8c:	20006054 	.word	0x20006054
 800ab90:	20006050 	.word	0x20006050

0800ab94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab9a:	4b28      	ldr	r3, [pc, #160]	; (800ac3c <vTaskSwitchContext+0xa8>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aba2:	4b27      	ldr	r3, [pc, #156]	; (800ac40 <vTaskSwitchContext+0xac>)
 800aba4:	2201      	movs	r2, #1
 800aba6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aba8:	e041      	b.n	800ac2e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800abaa:	4b25      	ldr	r3, [pc, #148]	; (800ac40 <vTaskSwitchContext+0xac>)
 800abac:	2200      	movs	r2, #0
 800abae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb0:	4b24      	ldr	r3, [pc, #144]	; (800ac44 <vTaskSwitchContext+0xb0>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	60fb      	str	r3, [r7, #12]
 800abb6:	e010      	b.n	800abda <vTaskSwitchContext+0x46>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10a      	bne.n	800abd4 <vTaskSwitchContext+0x40>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	607b      	str	r3, [r7, #4]
}
 800abd0:	bf00      	nop
 800abd2:	e7fe      	b.n	800abd2 <vTaskSwitchContext+0x3e>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	3b01      	subs	r3, #1
 800abd8:	60fb      	str	r3, [r7, #12]
 800abda:	491b      	ldr	r1, [pc, #108]	; (800ac48 <vTaskSwitchContext+0xb4>)
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	4613      	mov	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	440b      	add	r3, r1
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0e4      	beq.n	800abb8 <vTaskSwitchContext+0x24>
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4a13      	ldr	r2, [pc, #76]	; (800ac48 <vTaskSwitchContext+0xb4>)
 800abfa:	4413      	add	r3, r2
 800abfc:	60bb      	str	r3, [r7, #8]
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	605a      	str	r2, [r3, #4]
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	3308      	adds	r3, #8
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d104      	bne.n	800ac1e <vTaskSwitchContext+0x8a>
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	605a      	str	r2, [r3, #4]
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	4a09      	ldr	r2, [pc, #36]	; (800ac4c <vTaskSwitchContext+0xb8>)
 800ac26:	6013      	str	r3, [r2, #0]
 800ac28:	4a06      	ldr	r2, [pc, #24]	; (800ac44 <vTaskSwitchContext+0xb0>)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6013      	str	r3, [r2, #0]
}
 800ac2e:	bf00      	nop
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	20006068 	.word	0x20006068
 800ac40:	20006054 	.word	0x20006054
 800ac44:	20006048 	.word	0x20006048
 800ac48:	20005b70 	.word	0x20005b70
 800ac4c:	20005b6c 	.word	0x20005b6c

0800ac50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10a      	bne.n	800ac76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	60fb      	str	r3, [r7, #12]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac76:	4b07      	ldr	r3, [pc, #28]	; (800ac94 <vTaskPlaceOnEventList+0x44>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3318      	adds	r3, #24
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7fe f85b 	bl	8008d3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac84:	2101      	movs	r1, #1
 800ac86:	6838      	ldr	r0, [r7, #0]
 800ac88:	f000 fdd2 	bl	800b830 <prvAddCurrentTaskToDelayedList>
}
 800ac8c:	bf00      	nop
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	20005b6c 	.word	0x20005b6c

0800ac98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10a      	bne.n	800acc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	617b      	str	r3, [r7, #20]
}
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acc0:	4b0a      	ldr	r3, [pc, #40]	; (800acec <vTaskPlaceOnEventListRestricted+0x54>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3318      	adds	r3, #24
 800acc6:	4619      	mov	r1, r3
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7fe f812 	bl	8008cf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d002      	beq.n	800acda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800acd4:	f04f 33ff 	mov.w	r3, #4294967295
 800acd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800acda:	6879      	ldr	r1, [r7, #4]
 800acdc:	68b8      	ldr	r0, [r7, #8]
 800acde:	f000 fda7 	bl	800b830 <prvAddCurrentTaskToDelayedList>
	}
 800ace2:	bf00      	nop
 800ace4:	3718      	adds	r7, #24
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	20005b6c 	.word	0x20005b6c

0800acf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10a      	bne.n	800ad1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60fb      	str	r3, [r7, #12]
}
 800ad18:	bf00      	nop
 800ad1a:	e7fe      	b.n	800ad1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	3318      	adds	r3, #24
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe f843 	bl	8008dac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad26:	4b1f      	ldr	r3, [pc, #124]	; (800ada4 <xTaskRemoveFromEventList+0xb4>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d11f      	bne.n	800ad6e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	3304      	adds	r3, #4
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fe f83a 	bl	8008dac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3c:	4b1a      	ldr	r3, [pc, #104]	; (800ada8 <xTaskRemoveFromEventList+0xb8>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d903      	bls.n	800ad4c <xTaskRemoveFromEventList+0x5c>
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad48:	4a17      	ldr	r2, [pc, #92]	; (800ada8 <xTaskRemoveFromEventList+0xb8>)
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad50:	4613      	mov	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4413      	add	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4a14      	ldr	r2, [pc, #80]	; (800adac <xTaskRemoveFromEventList+0xbc>)
 800ad5a:	441a      	add	r2, r3
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	4619      	mov	r1, r3
 800ad62:	4610      	mov	r0, r2
 800ad64:	f7fd ffc5 	bl	8008cf2 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800ad68:	f000 f9b8 	bl	800b0dc <prvResetNextTaskUnblockTime>
 800ad6c:	e005      	b.n	800ad7a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	3318      	adds	r3, #24
 800ad72:	4619      	mov	r1, r3
 800ad74:	480e      	ldr	r0, [pc, #56]	; (800adb0 <xTaskRemoveFromEventList+0xc0>)
 800ad76:	f7fd ffbc 	bl	8008cf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7e:	4b0d      	ldr	r3, [pc, #52]	; (800adb4 <xTaskRemoveFromEventList+0xc4>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d905      	bls.n	800ad94 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad8c:	4b0a      	ldr	r3, [pc, #40]	; (800adb8 <xTaskRemoveFromEventList+0xc8>)
 800ad8e:	2201      	movs	r2, #1
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	e001      	b.n	800ad98 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ad94:	2300      	movs	r3, #0
 800ad96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad98:	697b      	ldr	r3, [r7, #20]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20006068 	.word	0x20006068
 800ada8:	20006048 	.word	0x20006048
 800adac:	20005b70 	.word	0x20005b70
 800adb0:	20006000 	.word	0x20006000
 800adb4:	20005b6c 	.word	0x20005b6c
 800adb8:	20006054 	.word	0x20006054

0800adbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adc4:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <vTaskInternalSetTimeOutState+0x24>)
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800adcc:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <vTaskInternalSetTimeOutState+0x28>)
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	605a      	str	r2, [r3, #4]
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	20006058 	.word	0x20006058
 800ade4:	20006044 	.word	0x20006044

0800ade8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10a      	bne.n	800ae0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800adf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfc:	f383 8811 	msr	BASEPRI, r3
 800ae00:	f3bf 8f6f 	isb	sy
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	613b      	str	r3, [r7, #16]
}
 800ae0a:	bf00      	nop
 800ae0c:	e7fe      	b.n	800ae0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10a      	bne.n	800ae2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	60fb      	str	r3, [r7, #12]
}
 800ae26:	bf00      	nop
 800ae28:	e7fe      	b.n	800ae28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae2a:	f7fe f913 	bl	8009054 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae2e:	4b1d      	ldr	r3, [pc, #116]	; (800aea4 <xTaskCheckForTimeOut+0xbc>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	69ba      	ldr	r2, [r7, #24]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae46:	d102      	bne.n	800ae4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	61fb      	str	r3, [r7, #28]
 800ae4c:	e023      	b.n	800ae96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	4b15      	ldr	r3, [pc, #84]	; (800aea8 <xTaskCheckForTimeOut+0xc0>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d007      	beq.n	800ae6a <xTaskCheckForTimeOut+0x82>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	69ba      	ldr	r2, [r7, #24]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d302      	bcc.n	800ae6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae64:	2301      	movs	r3, #1
 800ae66:	61fb      	str	r3, [r7, #28]
 800ae68:	e015      	b.n	800ae96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d20b      	bcs.n	800ae8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	1ad2      	subs	r2, r2, r3
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff ff9b 	bl	800adbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae86:	2300      	movs	r3, #0
 800ae88:	61fb      	str	r3, [r7, #28]
 800ae8a:	e004      	b.n	800ae96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae92:	2301      	movs	r3, #1
 800ae94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae96:	f7fe f90d 	bl	80090b4 <vPortExitCritical>

	return xReturn;
 800ae9a:	69fb      	ldr	r3, [r7, #28]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3720      	adds	r7, #32
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	20006044 	.word	0x20006044
 800aea8:	20006058 	.word	0x20006058

0800aeac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aeac:	b480      	push	{r7}
 800aeae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aeb0:	4b03      	ldr	r3, [pc, #12]	; (800aec0 <vTaskMissedYield+0x14>)
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	601a      	str	r2, [r3, #0]
}
 800aeb6:	bf00      	nop
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	20006054 	.word	0x20006054

0800aec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aecc:	f000 f8a8 	bl	800b020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aed0:	4b18      	ldr	r3, [pc, #96]	; (800af34 <prvIdleTask+0x70>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d907      	bls.n	800aee8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800aed8:	4b17      	ldr	r3, [pc, #92]	; (800af38 <prvIdleTask+0x74>)
 800aeda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aede:	601a      	str	r2, [r3, #0]
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800aee8:	f7ff fc8c 	bl	800a804 <prvGetExpectedIdleTime>
 800aeec:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d9eb      	bls.n	800aecc <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800aef4:	f7ff fc78 	bl	800a7e8 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800aef8:	4b10      	ldr	r3, [pc, #64]	; (800af3c <prvIdleTask+0x78>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	4b10      	ldr	r3, [pc, #64]	; (800af40 <prvIdleTask+0x7c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	429a      	cmp	r2, r3
 800af02:	d20a      	bcs.n	800af1a <prvIdleTask+0x56>
	__asm volatile
 800af04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	60bb      	str	r3, [r7, #8]
}
 800af16:	bf00      	nop
 800af18:	e7fe      	b.n	800af18 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800af1a:	f7ff fc73 	bl	800a804 <prvGetExpectedIdleTime>
 800af1e:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d902      	bls.n	800af2c <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f7f7 fa42 	bl	80023b0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800af2c:	f7ff fca2 	bl	800a874 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800af30:	e7cc      	b.n	800aecc <prvIdleTask+0x8>
 800af32:	bf00      	nop
 800af34:	20005b70 	.word	0x20005b70
 800af38:	e000ed04 	.word	0xe000ed04
 800af3c:	20006060 	.word	0x20006060
 800af40:	20006044 	.word	0x20006044

0800af44 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800af4a:	2301      	movs	r3, #1
 800af4c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800af4e:	2301      	movs	r3, #1
 800af50:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800af52:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <eTaskConfirmSleepModeStatus+0x4c>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800af5a:	2300      	movs	r3, #0
 800af5c:	71fb      	strb	r3, [r7, #7]
 800af5e:	e010      	b.n	800af82 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800af60:	4b0c      	ldr	r3, [pc, #48]	; (800af94 <eTaskConfirmSleepModeStatus+0x50>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800af68:	2300      	movs	r3, #0
 800af6a:	71fb      	strb	r3, [r7, #7]
 800af6c:	e009      	b.n	800af82 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800af6e:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <eTaskConfirmSleepModeStatus+0x54>)
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	4b0a      	ldr	r3, [pc, #40]	; (800af9c <eTaskConfirmSleepModeStatus+0x58>)
 800af74:	6819      	ldr	r1, [r3, #0]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	1acb      	subs	r3, r1, r3
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d101      	bne.n	800af82 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800af7e:	2302      	movs	r3, #2
 800af80:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800af82:	79fb      	ldrb	r3, [r7, #7]
	}
 800af84:	4618      	mov	r0, r3
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	20006000 	.word	0x20006000
 800af94:	20006054 	.word	0x20006054
 800af98:	2000602c 	.word	0x2000602c
 800af9c:	20006040 	.word	0x20006040

0800afa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afa6:	2300      	movs	r3, #0
 800afa8:	607b      	str	r3, [r7, #4]
 800afaa:	e00c      	b.n	800afc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4a12      	ldr	r2, [pc, #72]	; (800b000 <prvInitialiseTaskLists+0x60>)
 800afb8:	4413      	add	r3, r2
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fd fe6c 	bl	8008c98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	3301      	adds	r3, #1
 800afc4:	607b      	str	r3, [r7, #4]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b37      	cmp	r3, #55	; 0x37
 800afca:	d9ef      	bls.n	800afac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afcc:	480d      	ldr	r0, [pc, #52]	; (800b004 <prvInitialiseTaskLists+0x64>)
 800afce:	f7fd fe63 	bl	8008c98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afd2:	480d      	ldr	r0, [pc, #52]	; (800b008 <prvInitialiseTaskLists+0x68>)
 800afd4:	f7fd fe60 	bl	8008c98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afd8:	480c      	ldr	r0, [pc, #48]	; (800b00c <prvInitialiseTaskLists+0x6c>)
 800afda:	f7fd fe5d 	bl	8008c98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afde:	480c      	ldr	r0, [pc, #48]	; (800b010 <prvInitialiseTaskLists+0x70>)
 800afe0:	f7fd fe5a 	bl	8008c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afe4:	480b      	ldr	r0, [pc, #44]	; (800b014 <prvInitialiseTaskLists+0x74>)
 800afe6:	f7fd fe57 	bl	8008c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afea:	4b0b      	ldr	r3, [pc, #44]	; (800b018 <prvInitialiseTaskLists+0x78>)
 800afec:	4a05      	ldr	r2, [pc, #20]	; (800b004 <prvInitialiseTaskLists+0x64>)
 800afee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aff0:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <prvInitialiseTaskLists+0x7c>)
 800aff2:	4a05      	ldr	r2, [pc, #20]	; (800b008 <prvInitialiseTaskLists+0x68>)
 800aff4:	601a      	str	r2, [r3, #0]
}
 800aff6:	bf00      	nop
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	20005b70 	.word	0x20005b70
 800b004:	20005fd0 	.word	0x20005fd0
 800b008:	20005fe4 	.word	0x20005fe4
 800b00c:	20006000 	.word	0x20006000
 800b010:	20006014 	.word	0x20006014
 800b014:	2000602c 	.word	0x2000602c
 800b018:	20005ff8 	.word	0x20005ff8
 800b01c:	20005ffc 	.word	0x20005ffc

0800b020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b026:	e019      	b.n	800b05c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b028:	f7fe f814 	bl	8009054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b02c:	4b10      	ldr	r3, [pc, #64]	; (800b070 <prvCheckTasksWaitingTermination+0x50>)
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3304      	adds	r3, #4
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fd feb7 	bl	8008dac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b03e:	4b0d      	ldr	r3, [pc, #52]	; (800b074 <prvCheckTasksWaitingTermination+0x54>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3b01      	subs	r3, #1
 800b044:	4a0b      	ldr	r2, [pc, #44]	; (800b074 <prvCheckTasksWaitingTermination+0x54>)
 800b046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b048:	4b0b      	ldr	r3, [pc, #44]	; (800b078 <prvCheckTasksWaitingTermination+0x58>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	4a0a      	ldr	r2, [pc, #40]	; (800b078 <prvCheckTasksWaitingTermination+0x58>)
 800b050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b052:	f7fe f82f 	bl	80090b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f810 	bl	800b07c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b05c:	4b06      	ldr	r3, [pc, #24]	; (800b078 <prvCheckTasksWaitingTermination+0x58>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1e1      	bne.n	800b028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b064:	bf00      	nop
 800b066:	bf00      	nop
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20006014 	.word	0x20006014
 800b074:	20006040 	.word	0x20006040
 800b078:	20006028 	.word	0x20006028

0800b07c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d108      	bne.n	800b0a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b092:	4618      	mov	r0, r3
 800b094:	f7fd fce2 	bl	8008a5c <vPortFree>
				vPortFree( pxTCB );
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f7fd fcdf 	bl	8008a5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b09e:	e018      	b.n	800b0d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d103      	bne.n	800b0b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7fd fcd6 	bl	8008a5c <vPortFree>
	}
 800b0b0:	e00f      	b.n	800b0d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d00a      	beq.n	800b0d2 <prvDeleteTCB+0x56>
	__asm volatile
 800b0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c0:	f383 8811 	msr	BASEPRI, r3
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	60fb      	str	r3, [r7, #12]
}
 800b0ce:	bf00      	nop
 800b0d0:	e7fe      	b.n	800b0d0 <prvDeleteTCB+0x54>
	}
 800b0d2:	bf00      	nop
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
	...

0800b0dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0e2:	4b0c      	ldr	r3, [pc, #48]	; (800b114 <prvResetNextTaskUnblockTime+0x38>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d104      	bne.n	800b0f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	; (800b118 <prvResetNextTaskUnblockTime+0x3c>)
 800b0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0f4:	e008      	b.n	800b108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0f6:	4b07      	ldr	r3, [pc, #28]	; (800b114 <prvResetNextTaskUnblockTime+0x38>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	4a04      	ldr	r2, [pc, #16]	; (800b118 <prvResetNextTaskUnblockTime+0x3c>)
 800b106:	6013      	str	r3, [r2, #0]
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr
 800b114:	20005ff8 	.word	0x20005ff8
 800b118:	20006060 	.word	0x20006060

0800b11c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b122:	4b05      	ldr	r3, [pc, #20]	; (800b138 <xTaskGetCurrentTaskHandle+0x1c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b128:	687b      	ldr	r3, [r7, #4]
	}
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	20005b6c 	.word	0x20005b6c

0800b13c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b142:	4b0b      	ldr	r3, [pc, #44]	; (800b170 <xTaskGetSchedulerState+0x34>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d102      	bne.n	800b150 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b14a:	2301      	movs	r3, #1
 800b14c:	607b      	str	r3, [r7, #4]
 800b14e:	e008      	b.n	800b162 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b150:	4b08      	ldr	r3, [pc, #32]	; (800b174 <xTaskGetSchedulerState+0x38>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d102      	bne.n	800b15e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b158:	2302      	movs	r3, #2
 800b15a:	607b      	str	r3, [r7, #4]
 800b15c:	e001      	b.n	800b162 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b15e:	2300      	movs	r3, #0
 800b160:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b162:	687b      	ldr	r3, [r7, #4]
	}
 800b164:	4618      	mov	r0, r3
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	2000604c 	.word	0x2000604c
 800b174:	20006068 	.word	0x20006068

0800b178 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b184:	2300      	movs	r3, #0
 800b186:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d051      	beq.n	800b232 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b192:	4b2a      	ldr	r3, [pc, #168]	; (800b23c <xTaskPriorityInherit+0xc4>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b198:	429a      	cmp	r2, r3
 800b19a:	d241      	bcs.n	800b220 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	db06      	blt.n	800b1b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1a4:	4b25      	ldr	r3, [pc, #148]	; (800b23c <xTaskPriorityInherit+0xc4>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	6959      	ldr	r1, [r3, #20]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4a1f      	ldr	r2, [pc, #124]	; (800b240 <xTaskPriorityInherit+0xc8>)
 800b1c4:	4413      	add	r3, r2
 800b1c6:	4299      	cmp	r1, r3
 800b1c8:	d122      	bne.n	800b210 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fd fdec 	bl	8008dac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1d4:	4b19      	ldr	r3, [pc, #100]	; (800b23c <xTaskPriorityInherit+0xc4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e2:	4b18      	ldr	r3, [pc, #96]	; (800b244 <xTaskPriorityInherit+0xcc>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d903      	bls.n	800b1f2 <xTaskPriorityInherit+0x7a>
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ee:	4a15      	ldr	r2, [pc, #84]	; (800b244 <xTaskPriorityInherit+0xcc>)
 800b1f0:	6013      	str	r3, [r2, #0]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4a10      	ldr	r2, [pc, #64]	; (800b240 <xTaskPriorityInherit+0xc8>)
 800b200:	441a      	add	r2, r3
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	3304      	adds	r3, #4
 800b206:	4619      	mov	r1, r3
 800b208:	4610      	mov	r0, r2
 800b20a:	f7fd fd72 	bl	8008cf2 <vListInsertEnd>
 800b20e:	e004      	b.n	800b21a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b210:	4b0a      	ldr	r3, [pc, #40]	; (800b23c <xTaskPriorityInherit+0xc4>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b21a:	2301      	movs	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	e008      	b.n	800b232 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b224:	4b05      	ldr	r3, [pc, #20]	; (800b23c <xTaskPriorityInherit+0xc4>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d201      	bcs.n	800b232 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b22e:	2301      	movs	r3, #1
 800b230:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b232:	68fb      	ldr	r3, [r7, #12]
	}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	20005b6c 	.word	0x20005b6c
 800b240:	20005b70 	.word	0x20005b70
 800b244:	20006048 	.word	0x20006048

0800b248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b254:	2300      	movs	r3, #0
 800b256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d056      	beq.n	800b30c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b25e:	4b2e      	ldr	r3, [pc, #184]	; (800b318 <xTaskPriorityDisinherit+0xd0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	429a      	cmp	r2, r3
 800b266:	d00a      	beq.n	800b27e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	60fb      	str	r3, [r7, #12]
}
 800b27a:	bf00      	nop
 800b27c:	e7fe      	b.n	800b27c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10a      	bne.n	800b29c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28a:	f383 8811 	msr	BASEPRI, r3
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	60bb      	str	r3, [r7, #8]
}
 800b298:	bf00      	nop
 800b29a:	e7fe      	b.n	800b29a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a0:	1e5a      	subs	r2, r3, #1
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d02c      	beq.n	800b30c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d128      	bne.n	800b30c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fd fd74 	bl	8008dac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2dc:	4b0f      	ldr	r3, [pc, #60]	; (800b31c <xTaskPriorityDisinherit+0xd4>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d903      	bls.n	800b2ec <xTaskPriorityDisinherit+0xa4>
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e8:	4a0c      	ldr	r2, [pc, #48]	; (800b31c <xTaskPriorityDisinherit+0xd4>)
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	4413      	add	r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4a09      	ldr	r2, [pc, #36]	; (800b320 <xTaskPriorityDisinherit+0xd8>)
 800b2fa:	441a      	add	r2, r3
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	3304      	adds	r3, #4
 800b300:	4619      	mov	r1, r3
 800b302:	4610      	mov	r0, r2
 800b304:	f7fd fcf5 	bl	8008cf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b308:	2301      	movs	r3, #1
 800b30a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b30c:	697b      	ldr	r3, [r7, #20]
	}
 800b30e:	4618      	mov	r0, r3
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	20005b6c 	.word	0x20005b6c
 800b31c:	20006048 	.word	0x20006048
 800b320:	20005b70 	.word	0x20005b70

0800b324 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b324:	b580      	push	{r7, lr}
 800b326:	b088      	sub	sp, #32
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b332:	2301      	movs	r3, #1
 800b334:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d06a      	beq.n	800b412 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10a      	bne.n	800b35a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	60fb      	str	r3, [r7, #12]
}
 800b356:	bf00      	nop
 800b358:	e7fe      	b.n	800b358 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d902      	bls.n	800b36a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	61fb      	str	r3, [r7, #28]
 800b368:	e002      	b.n	800b370 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b36e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b374:	69fa      	ldr	r2, [r7, #28]
 800b376:	429a      	cmp	r2, r3
 800b378:	d04b      	beq.n	800b412 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	429a      	cmp	r2, r3
 800b382:	d146      	bne.n	800b412 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b384:	4b25      	ldr	r3, [pc, #148]	; (800b41c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	69ba      	ldr	r2, [r7, #24]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d10a      	bne.n	800b3a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	60bb      	str	r3, [r7, #8]
}
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	69fa      	ldr	r2, [r7, #28]
 800b3ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	db04      	blt.n	800b3c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	6959      	ldr	r1, [r3, #20]
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4413      	add	r3, r2
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	4a13      	ldr	r2, [pc, #76]	; (800b420 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b3d2:	4413      	add	r3, r2
 800b3d4:	4299      	cmp	r1, r3
 800b3d6:	d11c      	bne.n	800b412 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7fd fce5 	bl	8008dac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e6:	4b0f      	ldr	r3, [pc, #60]	; (800b424 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d903      	bls.n	800b3f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f2:	4a0c      	ldr	r2, [pc, #48]	; (800b424 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4a07      	ldr	r2, [pc, #28]	; (800b420 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b404:	441a      	add	r2, r3
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	3304      	adds	r3, #4
 800b40a:	4619      	mov	r1, r3
 800b40c:	4610      	mov	r0, r2
 800b40e:	f7fd fc70 	bl	8008cf2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b412:	bf00      	nop
 800b414:	3720      	adds	r7, #32
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	20005b6c 	.word	0x20005b6c
 800b420:	20005b70 	.word	0x20005b70
 800b424:	20006048 	.word	0x20006048

0800b428 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b428:	b480      	push	{r7}
 800b42a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b42c:	4b07      	ldr	r3, [pc, #28]	; (800b44c <pvTaskIncrementMutexHeldCount+0x24>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d004      	beq.n	800b43e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b434:	4b05      	ldr	r3, [pc, #20]	; (800b44c <pvTaskIncrementMutexHeldCount+0x24>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b43a:	3201      	adds	r2, #1
 800b43c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b43e:	4b03      	ldr	r3, [pc, #12]	; (800b44c <pvTaskIncrementMutexHeldCount+0x24>)
 800b440:	681b      	ldr	r3, [r3, #0]
	}
 800b442:	4618      	mov	r0, r3
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	20005b6c 	.word	0x20005b6c

0800b450 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
 800b45c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b45e:	f7fd fdf9 	bl	8009054 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b462:	4b26      	ldr	r3, [pc, #152]	; (800b4fc <xTaskNotifyWait+0xac>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d01a      	beq.n	800b4a6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b470:	4b22      	ldr	r3, [pc, #136]	; (800b4fc <xTaskNotifyWait+0xac>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	43d2      	mvns	r2, r2
 800b47a:	400a      	ands	r2, r1
 800b47c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b47e:	4b1f      	ldr	r3, [pc, #124]	; (800b4fc <xTaskNotifyWait+0xac>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00b      	beq.n	800b4a6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b48e:	2101      	movs	r1, #1
 800b490:	6838      	ldr	r0, [r7, #0]
 800b492:	f000 f9cd 	bl	800b830 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b496:	4b1a      	ldr	r3, [pc, #104]	; (800b500 <xTaskNotifyWait+0xb0>)
 800b498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b49c:	601a      	str	r2, [r3, #0]
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b4a6:	f7fd fe05 	bl	80090b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b4aa:	f7fd fdd3 	bl	8009054 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d004      	beq.n	800b4be <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b4b4:	4b11      	ldr	r3, [pc, #68]	; (800b4fc <xTaskNotifyWait+0xac>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b4be:	4b0f      	ldr	r3, [pc, #60]	; (800b4fc <xTaskNotifyWait+0xac>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d002      	beq.n	800b4d2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	617b      	str	r3, [r7, #20]
 800b4d0:	e008      	b.n	800b4e4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b4d2:	4b0a      	ldr	r3, [pc, #40]	; (800b4fc <xTaskNotifyWait+0xac>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	43d2      	mvns	r2, r2
 800b4dc:	400a      	ands	r2, r1
 800b4de:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4e4:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <xTaskNotifyWait+0xac>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b4ee:	f7fd fde1 	bl	80090b4 <vPortExitCritical>

		return xReturn;
 800b4f2:	697b      	ldr	r3, [r7, #20]
	}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3718      	adds	r7, #24
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	20005b6c 	.word	0x20005b6c
 800b500:	e000ed04 	.word	0xe000ed04

0800b504 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b504:	b580      	push	{r7, lr}
 800b506:	b08a      	sub	sp, #40	; 0x28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	603b      	str	r3, [r7, #0]
 800b510:	4613      	mov	r3, r2
 800b512:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b514:	2301      	movs	r3, #1
 800b516:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10a      	bne.n	800b534 <xTaskGenericNotify+0x30>
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	61bb      	str	r3, [r7, #24]
}
 800b530:	bf00      	nop
 800b532:	e7fe      	b.n	800b532 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b538:	f7fd fd8c 	bl	8009054 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b54a:	6a3b      	ldr	r3, [r7, #32]
 800b54c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b550:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	2202      	movs	r2, #2
 800b556:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	2b04      	cmp	r3, #4
 800b55e:	d828      	bhi.n	800b5b2 <xTaskGenericNotify+0xae>
 800b560:	a201      	add	r2, pc, #4	; (adr r2, 800b568 <xTaskGenericNotify+0x64>)
 800b562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b566:	bf00      	nop
 800b568:	0800b5d3 	.word	0x0800b5d3
 800b56c:	0800b57d 	.word	0x0800b57d
 800b570:	0800b58b 	.word	0x0800b58b
 800b574:	0800b597 	.word	0x0800b597
 800b578:	0800b59f 	.word	0x0800b59f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b57c:	6a3b      	ldr	r3, [r7, #32]
 800b57e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	431a      	orrs	r2, r3
 800b584:	6a3b      	ldr	r3, [r7, #32]
 800b586:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b588:	e026      	b.n	800b5d8 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	6a3b      	ldr	r3, [r7, #32]
 800b592:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b594:	e020      	b.n	800b5d8 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b59c:	e01c      	b.n	800b5d8 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b59e:	7ffb      	ldrb	r3, [r7, #31]
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d003      	beq.n	800b5ac <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b5aa:	e015      	b.n	800b5d8 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b5b0:	e012      	b.n	800b5d8 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b5b2:	6a3b      	ldr	r3, [r7, #32]
 800b5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ba:	d00c      	beq.n	800b5d6 <xTaskGenericNotify+0xd2>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	617b      	str	r3, [r7, #20]
}
 800b5ce:	bf00      	nop
 800b5d0:	e7fe      	b.n	800b5d0 <xTaskGenericNotify+0xcc>
					break;
 800b5d2:	bf00      	nop
 800b5d4:	e000      	b.n	800b5d8 <xTaskGenericNotify+0xd4>

					break;
 800b5d6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b5d8:	7ffb      	ldrb	r3, [r7, #31]
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d13c      	bne.n	800b658 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5de:	6a3b      	ldr	r3, [r7, #32]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fd fbe2 	bl	8008dac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ec:	4b1e      	ldr	r3, [pc, #120]	; (800b668 <xTaskGenericNotify+0x164>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d903      	bls.n	800b5fc <xTaskGenericNotify+0xf8>
 800b5f4:	6a3b      	ldr	r3, [r7, #32]
 800b5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f8:	4a1b      	ldr	r2, [pc, #108]	; (800b668 <xTaskGenericNotify+0x164>)
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	6a3b      	ldr	r3, [r7, #32]
 800b5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b600:	4613      	mov	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	4413      	add	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	4a18      	ldr	r2, [pc, #96]	; (800b66c <xTaskGenericNotify+0x168>)
 800b60a:	441a      	add	r2, r3
 800b60c:	6a3b      	ldr	r3, [r7, #32]
 800b60e:	3304      	adds	r3, #4
 800b610:	4619      	mov	r1, r3
 800b612:	4610      	mov	r0, r2
 800b614:	f7fd fb6d 	bl	8008cf2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b618:	6a3b      	ldr	r3, [r7, #32]
 800b61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00a      	beq.n	800b636 <xTaskGenericNotify+0x132>
	__asm volatile
 800b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	613b      	str	r3, [r7, #16]
}
 800b632:	bf00      	nop
 800b634:	e7fe      	b.n	800b634 <xTaskGenericNotify+0x130>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800b636:	f7ff fd51 	bl	800b0dc <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b63a:	6a3b      	ldr	r3, [r7, #32]
 800b63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63e:	4b0c      	ldr	r3, [pc, #48]	; (800b670 <xTaskGenericNotify+0x16c>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b644:	429a      	cmp	r2, r3
 800b646:	d907      	bls.n	800b658 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b648:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <xTaskGenericNotify+0x170>)
 800b64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b658:	f7fd fd2c 	bl	80090b4 <vPortExitCritical>

		return xReturn;
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b65e:	4618      	mov	r0, r3
 800b660:	3728      	adds	r7, #40	; 0x28
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	20006048 	.word	0x20006048
 800b66c:	20005b70 	.word	0x20005b70
 800b670:	20005b6c 	.word	0x20005b6c
 800b674:	e000ed04 	.word	0xe000ed04

0800b678 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08e      	sub	sp, #56	; 0x38
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	603b      	str	r3, [r7, #0]
 800b684:	4613      	mov	r3, r2
 800b686:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b688:	2301      	movs	r3, #1
 800b68a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10a      	bne.n	800b6a8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6a4:	bf00      	nop
 800b6a6:	e7fe      	b.n	800b6a6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6a8:	f7fd fd92 	bl	80091d0 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b6b0:	f3ef 8211 	mrs	r2, BASEPRI
 800b6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	623a      	str	r2, [r7, #32]
 800b6c6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b6c8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d003      	beq.n	800b6da <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b6e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b6ec:	79fb      	ldrb	r3, [r7, #7]
 800b6ee:	2b04      	cmp	r3, #4
 800b6f0:	d828      	bhi.n	800b744 <xTaskGenericNotifyFromISR+0xcc>
 800b6f2:	a201      	add	r2, pc, #4	; (adr r2, 800b6f8 <xTaskGenericNotifyFromISR+0x80>)
 800b6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f8:	0800b765 	.word	0x0800b765
 800b6fc:	0800b70d 	.word	0x0800b70d
 800b700:	0800b71b 	.word	0x0800b71b
 800b704:	0800b727 	.word	0x0800b727
 800b708:	0800b72f 	.word	0x0800b72f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	431a      	orrs	r2, r3
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b718:	e027      	b.n	800b76a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b71e:	1c5a      	adds	r2, r3, #1
 800b720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b722:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b724:	e021      	b.n	800b76a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b72c:	e01d      	b.n	800b76a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b72e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b732:	2b02      	cmp	r3, #2
 800b734:	d003      	beq.n	800b73e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b73c:	e015      	b.n	800b76a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800b73e:	2300      	movs	r3, #0
 800b740:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b742:	e012      	b.n	800b76a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74c:	d00c      	beq.n	800b768 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	61bb      	str	r3, [r7, #24]
}
 800b760:	bf00      	nop
 800b762:	e7fe      	b.n	800b762 <xTaskGenericNotifyFromISR+0xea>
					break;
 800b764:	bf00      	nop
 800b766:	e000      	b.n	800b76a <xTaskGenericNotifyFromISR+0xf2>
					break;
 800b768:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b76a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d146      	bne.n	800b800 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00a      	beq.n	800b790 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	617b      	str	r3, [r7, #20]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b790:	4b21      	ldr	r3, [pc, #132]	; (800b818 <xTaskGenericNotifyFromISR+0x1a0>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d11d      	bne.n	800b7d4 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	3304      	adds	r3, #4
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fd fb05 	bl	8008dac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a6:	4b1d      	ldr	r3, [pc, #116]	; (800b81c <xTaskGenericNotifyFromISR+0x1a4>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d903      	bls.n	800b7b6 <xTaskGenericNotifyFromISR+0x13e>
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b2:	4a1a      	ldr	r2, [pc, #104]	; (800b81c <xTaskGenericNotifyFromISR+0x1a4>)
 800b7b4:	6013      	str	r3, [r2, #0]
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	4413      	add	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4a17      	ldr	r2, [pc, #92]	; (800b820 <xTaskGenericNotifyFromISR+0x1a8>)
 800b7c4:	441a      	add	r2, r3
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	4610      	mov	r0, r2
 800b7ce:	f7fd fa90 	bl	8008cf2 <vListInsertEnd>
 800b7d2:	e005      	b.n	800b7e0 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d6:	3318      	adds	r3, #24
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4812      	ldr	r0, [pc, #72]	; (800b824 <xTaskGenericNotifyFromISR+0x1ac>)
 800b7dc:	f7fd fa89 	bl	8008cf2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e4:	4b10      	ldr	r3, [pc, #64]	; (800b828 <xTaskGenericNotifyFromISR+0x1b0>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d908      	bls.n	800b800 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d002      	beq.n	800b7fa <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b7fa:	4b0c      	ldr	r3, [pc, #48]	; (800b82c <xTaskGenericNotifyFromISR+0x1b4>)
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	601a      	str	r2, [r3, #0]
 800b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b802:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	f383 8811 	msr	BASEPRI, r3
}
 800b80a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b80e:	4618      	mov	r0, r3
 800b810:	3738      	adds	r7, #56	; 0x38
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20006068 	.word	0x20006068
 800b81c:	20006048 	.word	0x20006048
 800b820:	20005b70 	.word	0x20005b70
 800b824:	20006000 	.word	0x20006000
 800b828:	20005b6c 	.word	0x20005b6c
 800b82c:	20006054 	.word	0x20006054

0800b830 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b83a:	4b21      	ldr	r3, [pc, #132]	; (800b8c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b840:	4b20      	ldr	r3, [pc, #128]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3304      	adds	r3, #4
 800b846:	4618      	mov	r0, r3
 800b848:	f7fd fab0 	bl	8008dac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b852:	d10a      	bne.n	800b86a <prvAddCurrentTaskToDelayedList+0x3a>
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d007      	beq.n	800b86a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b85a:	4b1a      	ldr	r3, [pc, #104]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	3304      	adds	r3, #4
 800b860:	4619      	mov	r1, r3
 800b862:	4819      	ldr	r0, [pc, #100]	; (800b8c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b864:	f7fd fa45 	bl	8008cf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b868:	e026      	b.n	800b8b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4413      	add	r3, r2
 800b870:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b872:	4b14      	ldr	r3, [pc, #80]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d209      	bcs.n	800b896 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b882:	4b12      	ldr	r3, [pc, #72]	; (800b8cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	4b0f      	ldr	r3, [pc, #60]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3304      	adds	r3, #4
 800b88c:	4619      	mov	r1, r3
 800b88e:	4610      	mov	r0, r2
 800b890:	f7fd fa53 	bl	8008d3a <vListInsert>
}
 800b894:	e010      	b.n	800b8b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b896:	4b0e      	ldr	r3, [pc, #56]	; (800b8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	4b0a      	ldr	r3, [pc, #40]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	f7fd fa49 	bl	8008d3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8a8:	4b0a      	ldr	r3, [pc, #40]	; (800b8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d202      	bcs.n	800b8b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8b2:	4a08      	ldr	r2, [pc, #32]	; (800b8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	6013      	str	r3, [r2, #0]
}
 800b8b8:	bf00      	nop
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	20006044 	.word	0x20006044
 800b8c4:	20005b6c 	.word	0x20005b6c
 800b8c8:	2000602c 	.word	0x2000602c
 800b8cc:	20005ffc 	.word	0x20005ffc
 800b8d0:	20005ff8 	.word	0x20005ff8
 800b8d4:	20006060 	.word	0x20006060

0800b8d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08a      	sub	sp, #40	; 0x28
 800b8dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8e2:	f000 fb07 	bl	800bef4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8e6:	4b1c      	ldr	r3, [pc, #112]	; (800b958 <xTimerCreateTimerTask+0x80>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d021      	beq.n	800b932 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b8f6:	1d3a      	adds	r2, r7, #4
 800b8f8:	f107 0108 	add.w	r1, r7, #8
 800b8fc:	f107 030c 	add.w	r3, r7, #12
 800b900:	4618      	mov	r0, r3
 800b902:	f7fc ffc5 	bl	8008890 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b906:	6879      	ldr	r1, [r7, #4]
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	9202      	str	r2, [sp, #8]
 800b90e:	9301      	str	r3, [sp, #4]
 800b910:	2302      	movs	r3, #2
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	2300      	movs	r3, #0
 800b916:	460a      	mov	r2, r1
 800b918:	4910      	ldr	r1, [pc, #64]	; (800b95c <xTimerCreateTimerTask+0x84>)
 800b91a:	4811      	ldr	r0, [pc, #68]	; (800b960 <xTimerCreateTimerTask+0x88>)
 800b91c:	f7fe fd5c 	bl	800a3d8 <xTaskCreateStatic>
 800b920:	4603      	mov	r3, r0
 800b922:	4a10      	ldr	r2, [pc, #64]	; (800b964 <xTimerCreateTimerTask+0x8c>)
 800b924:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b926:	4b0f      	ldr	r3, [pc, #60]	; (800b964 <xTimerCreateTimerTask+0x8c>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b92e:	2301      	movs	r3, #1
 800b930:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10a      	bne.n	800b94e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	613b      	str	r3, [r7, #16]
}
 800b94a:	bf00      	nop
 800b94c:	e7fe      	b.n	800b94c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b94e:	697b      	ldr	r3, [r7, #20]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3718      	adds	r7, #24
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	2000609c 	.word	0x2000609c
 800b95c:	0800e70c 	.word	0x0800e70c
 800b960:	0800ba9d 	.word	0x0800ba9d
 800b964:	200060a0 	.word	0x200060a0

0800b968 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b08a      	sub	sp, #40	; 0x28
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
 800b974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b976:	2300      	movs	r3, #0
 800b978:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10a      	bne.n	800b996 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	623b      	str	r3, [r7, #32]
}
 800b992:	bf00      	nop
 800b994:	e7fe      	b.n	800b994 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b996:	4b1a      	ldr	r3, [pc, #104]	; (800ba00 <xTimerGenericCommand+0x98>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d02a      	beq.n	800b9f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b05      	cmp	r3, #5
 800b9ae:	dc18      	bgt.n	800b9e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9b0:	f7ff fbc4 	bl	800b13c <xTaskGetSchedulerState>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d109      	bne.n	800b9ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9ba:	4b11      	ldr	r3, [pc, #68]	; (800ba00 <xTimerGenericCommand+0x98>)
 800b9bc:	6818      	ldr	r0, [r3, #0]
 800b9be:	f107 0110 	add.w	r1, r7, #16
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9c6:	f7fd fea1 	bl	800970c <xQueueGenericSend>
 800b9ca:	6278      	str	r0, [r7, #36]	; 0x24
 800b9cc:	e012      	b.n	800b9f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <xTimerGenericCommand+0x98>)
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f107 0110 	add.w	r1, r7, #16
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f7fd fe97 	bl	800970c <xQueueGenericSend>
 800b9de:	6278      	str	r0, [r7, #36]	; 0x24
 800b9e0:	e008      	b.n	800b9f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b9e2:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <xTimerGenericCommand+0x98>)
 800b9e4:	6818      	ldr	r0, [r3, #0]
 800b9e6:	f107 0110 	add.w	r1, r7, #16
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	f7fd ff8b 	bl	8009908 <xQueueGenericSendFromISR>
 800b9f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3728      	adds	r7, #40	; 0x28
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	2000609c 	.word	0x2000609c

0800ba04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af02      	add	r7, sp, #8
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba0e:	4b22      	ldr	r3, [pc, #136]	; (800ba98 <prvProcessExpiredTimer+0x94>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fd f9c5 	bl	8008dac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba28:	f003 0304 	and.w	r3, r3, #4
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d022      	beq.n	800ba76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	699a      	ldr	r2, [r3, #24]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	18d1      	adds	r1, r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	6978      	ldr	r0, [r7, #20]
 800ba3e:	f000 f8d1 	bl	800bbe4 <prvInsertTimerInActiveList>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01f      	beq.n	800ba88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba48:	2300      	movs	r3, #0
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	2100      	movs	r1, #0
 800ba52:	6978      	ldr	r0, [r7, #20]
 800ba54:	f7ff ff88 	bl	800b968 <xTimerGenericCommand>
 800ba58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d113      	bne.n	800ba88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	60fb      	str	r3, [r7, #12]
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba7c:	f023 0301 	bic.w	r3, r3, #1
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	6a1b      	ldr	r3, [r3, #32]
 800ba8c:	6978      	ldr	r0, [r7, #20]
 800ba8e:	4798      	blx	r3
}
 800ba90:	bf00      	nop
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	20006094 	.word	0x20006094

0800ba9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800baa4:	f107 0308 	add.w	r3, r7, #8
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 f857 	bl	800bb5c <prvGetNextExpireTime>
 800baae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	4619      	mov	r1, r3
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 f803 	bl	800bac0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800baba:	f000 f8d5 	bl	800bc68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800babe:	e7f1      	b.n	800baa4 <prvTimerTask+0x8>

0800bac0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800baca:	f7fe fe8d 	bl	800a7e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bace:	f107 0308 	add.w	r3, r7, #8
 800bad2:	4618      	mov	r0, r3
 800bad4:	f000 f866 	bl	800bba4 <prvSampleTimeNow>
 800bad8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d130      	bne.n	800bb42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10a      	bne.n	800bafc <prvProcessTimerOrBlockTask+0x3c>
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	429a      	cmp	r2, r3
 800baec:	d806      	bhi.n	800bafc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800baee:	f7fe fec1 	bl	800a874 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800baf2:	68f9      	ldr	r1, [r7, #12]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7ff ff85 	bl	800ba04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bafa:	e024      	b.n	800bb46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d008      	beq.n	800bb14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb02:	4b13      	ldr	r3, [pc, #76]	; (800bb50 <prvProcessTimerOrBlockTask+0x90>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <prvProcessTimerOrBlockTask+0x50>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e000      	b.n	800bb12 <prvProcessTimerOrBlockTask+0x52>
 800bb10:	2300      	movs	r3, #0
 800bb12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb14:	4b0f      	ldr	r3, [pc, #60]	; (800bb54 <prvProcessTimerOrBlockTask+0x94>)
 800bb16:	6818      	ldr	r0, [r3, #0]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	4619      	mov	r1, r3
 800bb22:	f7fe fc25 	bl	800a370 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb26:	f7fe fea5 	bl	800a874 <xTaskResumeAll>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10a      	bne.n	800bb46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb30:	4b09      	ldr	r3, [pc, #36]	; (800bb58 <prvProcessTimerOrBlockTask+0x98>)
 800bb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb36:	601a      	str	r2, [r3, #0]
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	f3bf 8f6f 	isb	sy
}
 800bb40:	e001      	b.n	800bb46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb42:	f7fe fe97 	bl	800a874 <xTaskResumeAll>
}
 800bb46:	bf00      	nop
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	20006098 	.word	0x20006098
 800bb54:	2000609c 	.word	0x2000609c
 800bb58:	e000ed04 	.word	0xe000ed04

0800bb5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb64:	4b0e      	ldr	r3, [pc, #56]	; (800bba0 <prvGetNextExpireTime+0x44>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d101      	bne.n	800bb72 <prvGetNextExpireTime+0x16>
 800bb6e:	2201      	movs	r2, #1
 800bb70:	e000      	b.n	800bb74 <prvGetNextExpireTime+0x18>
 800bb72:	2200      	movs	r2, #0
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d105      	bne.n	800bb8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb80:	4b07      	ldr	r3, [pc, #28]	; (800bba0 <prvGetNextExpireTime+0x44>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	60fb      	str	r3, [r7, #12]
 800bb8a:	e001      	b.n	800bb90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb90:	68fb      	ldr	r3, [r7, #12]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	20006094 	.word	0x20006094

0800bba4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbac:	f7fe ff00 	bl	800a9b0 <xTaskGetTickCount>
 800bbb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbb2:	4b0b      	ldr	r3, [pc, #44]	; (800bbe0 <prvSampleTimeNow+0x3c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d205      	bcs.n	800bbc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbbc:	f000 f936 	bl	800be2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	e002      	b.n	800bbce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bbce:	4a04      	ldr	r2, [pc, #16]	; (800bbe0 <prvSampleTimeNow+0x3c>)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	200060a4 	.word	0x200060a4

0800bbe4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
 800bbf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d812      	bhi.n	800bc30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d302      	bcc.n	800bc1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	617b      	str	r3, [r7, #20]
 800bc1c:	e01b      	b.n	800bc56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc1e:	4b10      	ldr	r3, [pc, #64]	; (800bc60 <prvInsertTimerInActiveList+0x7c>)
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	3304      	adds	r3, #4
 800bc26:	4619      	mov	r1, r3
 800bc28:	4610      	mov	r0, r2
 800bc2a:	f7fd f886 	bl	8008d3a <vListInsert>
 800bc2e:	e012      	b.n	800bc56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d206      	bcs.n	800bc46 <prvInsertTimerInActiveList+0x62>
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d302      	bcc.n	800bc46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc40:	2301      	movs	r3, #1
 800bc42:	617b      	str	r3, [r7, #20]
 800bc44:	e007      	b.n	800bc56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc46:	4b07      	ldr	r3, [pc, #28]	; (800bc64 <prvInsertTimerInActiveList+0x80>)
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	4619      	mov	r1, r3
 800bc50:	4610      	mov	r0, r2
 800bc52:	f7fd f872 	bl	8008d3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc56:	697b      	ldr	r3, [r7, #20]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	20006098 	.word	0x20006098
 800bc64:	20006094 	.word	0x20006094

0800bc68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b08e      	sub	sp, #56	; 0x38
 800bc6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc6e:	e0ca      	b.n	800be06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	da18      	bge.n	800bca8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc76:	1d3b      	adds	r3, r7, #4
 800bc78:	3304      	adds	r3, #4
 800bc7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10a      	bne.n	800bc98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	61fb      	str	r3, [r7, #28]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc9e:	6850      	ldr	r0, [r2, #4]
 800bca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bca2:	6892      	ldr	r2, [r2, #8]
 800bca4:	4611      	mov	r1, r2
 800bca6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f2c0 80aa 	blt.w	800be04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d004      	beq.n	800bcc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fd f873 	bl	8008dac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcc6:	463b      	mov	r3, r7
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7ff ff6b 	bl	800bba4 <prvSampleTimeNow>
 800bcce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b09      	cmp	r3, #9
 800bcd4:	f200 8097 	bhi.w	800be06 <prvProcessReceivedCommands+0x19e>
 800bcd8:	a201      	add	r2, pc, #4	; (adr r2, 800bce0 <prvProcessReceivedCommands+0x78>)
 800bcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcde:	bf00      	nop
 800bce0:	0800bd09 	.word	0x0800bd09
 800bce4:	0800bd09 	.word	0x0800bd09
 800bce8:	0800bd09 	.word	0x0800bd09
 800bcec:	0800bd7d 	.word	0x0800bd7d
 800bcf0:	0800bd91 	.word	0x0800bd91
 800bcf4:	0800bddb 	.word	0x0800bddb
 800bcf8:	0800bd09 	.word	0x0800bd09
 800bcfc:	0800bd09 	.word	0x0800bd09
 800bd00:	0800bd7d 	.word	0x0800bd7d
 800bd04:	0800bd91 	.word	0x0800bd91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd0e:	f043 0301 	orr.w	r3, r3, #1
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	18d1      	adds	r1, r2, r3
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd28:	f7ff ff5c 	bl	800bbe4 <prvInsertTimerInActiveList>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d069      	beq.n	800be06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	6a1b      	ldr	r3, [r3, #32]
 800bd36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd40:	f003 0304 	and.w	r3, r3, #4
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d05e      	beq.n	800be06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd48:	68ba      	ldr	r2, [r7, #8]
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	441a      	add	r2, r3
 800bd50:	2300      	movs	r3, #0
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	2300      	movs	r3, #0
 800bd56:	2100      	movs	r1, #0
 800bd58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd5a:	f7ff fe05 	bl	800b968 <xTimerGenericCommand>
 800bd5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd60:	6a3b      	ldr	r3, [r7, #32]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d14f      	bne.n	800be06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	61bb      	str	r3, [r7, #24]
}
 800bd78:	bf00      	nop
 800bd7a:	e7fe      	b.n	800bd7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd82:	f023 0301 	bic.w	r3, r3, #1
 800bd86:	b2da      	uxtb	r2, r3
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd8e:	e03a      	b.n	800be06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd96:	f043 0301 	orr.w	r3, r3, #1
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10a      	bne.n	800bdc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	617b      	str	r3, [r7, #20]
}
 800bdc2:	bf00      	nop
 800bdc4:	e7fe      	b.n	800bdc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	699a      	ldr	r2, [r3, #24]
 800bdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdcc:	18d1      	adds	r1, r2, r3
 800bdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdd4:	f7ff ff06 	bl	800bbe4 <prvInsertTimerInActiveList>
					break;
 800bdd8:	e015      	b.n	800be06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bde0:	f003 0302 	and.w	r3, r3, #2
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d103      	bne.n	800bdf0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bde8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdea:	f7fc fe37 	bl	8008a5c <vPortFree>
 800bdee:	e00a      	b.n	800be06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdf6:	f023 0301 	bic.w	r3, r3, #1
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be02:	e000      	b.n	800be06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800be04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be06:	4b08      	ldr	r3, [pc, #32]	; (800be28 <prvProcessReceivedCommands+0x1c0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	1d39      	adds	r1, r7, #4
 800be0c:	2200      	movs	r2, #0
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fd fea2 	bl	8009b58 <xQueueReceive>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	f47f af2a 	bne.w	800bc70 <prvProcessReceivedCommands+0x8>
	}
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	3730      	adds	r7, #48	; 0x30
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	2000609c 	.word	0x2000609c

0800be2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be32:	e048      	b.n	800bec6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be34:	4b2d      	ldr	r3, [pc, #180]	; (800beec <prvSwitchTimerLists+0xc0>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be3e:	4b2b      	ldr	r3, [pc, #172]	; (800beec <prvSwitchTimerLists+0xc0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	3304      	adds	r3, #4
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fc ffad 	bl	8008dac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be60:	f003 0304 	and.w	r3, r3, #4
 800be64:	2b00      	cmp	r3, #0
 800be66:	d02e      	beq.n	800bec6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	4413      	add	r3, r2
 800be70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	429a      	cmp	r2, r3
 800be78:	d90e      	bls.n	800be98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be86:	4b19      	ldr	r3, [pc, #100]	; (800beec <prvSwitchTimerLists+0xc0>)
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3304      	adds	r3, #4
 800be8e:	4619      	mov	r1, r3
 800be90:	4610      	mov	r0, r2
 800be92:	f7fc ff52 	bl	8008d3a <vListInsert>
 800be96:	e016      	b.n	800bec6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be98:	2300      	movs	r3, #0
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	2300      	movs	r3, #0
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	2100      	movs	r1, #0
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f7ff fd60 	bl	800b968 <xTimerGenericCommand>
 800bea8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10a      	bne.n	800bec6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	603b      	str	r3, [r7, #0]
}
 800bec2:	bf00      	nop
 800bec4:	e7fe      	b.n	800bec4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bec6:	4b09      	ldr	r3, [pc, #36]	; (800beec <prvSwitchTimerLists+0xc0>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1b1      	bne.n	800be34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bed0:	4b06      	ldr	r3, [pc, #24]	; (800beec <prvSwitchTimerLists+0xc0>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bed6:	4b06      	ldr	r3, [pc, #24]	; (800bef0 <prvSwitchTimerLists+0xc4>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a04      	ldr	r2, [pc, #16]	; (800beec <prvSwitchTimerLists+0xc0>)
 800bedc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bede:	4a04      	ldr	r2, [pc, #16]	; (800bef0 <prvSwitchTimerLists+0xc4>)
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	6013      	str	r3, [r2, #0]
}
 800bee4:	bf00      	nop
 800bee6:	3718      	adds	r7, #24
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	20006094 	.word	0x20006094
 800bef0:	20006098 	.word	0x20006098

0800bef4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800befa:	f7fd f8ab 	bl	8009054 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800befe:	4b15      	ldr	r3, [pc, #84]	; (800bf54 <prvCheckForValidListAndQueue+0x60>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d120      	bne.n	800bf48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf06:	4814      	ldr	r0, [pc, #80]	; (800bf58 <prvCheckForValidListAndQueue+0x64>)
 800bf08:	f7fc fec6 	bl	8008c98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf0c:	4813      	ldr	r0, [pc, #76]	; (800bf5c <prvCheckForValidListAndQueue+0x68>)
 800bf0e:	f7fc fec3 	bl	8008c98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf12:	4b13      	ldr	r3, [pc, #76]	; (800bf60 <prvCheckForValidListAndQueue+0x6c>)
 800bf14:	4a10      	ldr	r2, [pc, #64]	; (800bf58 <prvCheckForValidListAndQueue+0x64>)
 800bf16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf18:	4b12      	ldr	r3, [pc, #72]	; (800bf64 <prvCheckForValidListAndQueue+0x70>)
 800bf1a:	4a10      	ldr	r2, [pc, #64]	; (800bf5c <prvCheckForValidListAndQueue+0x68>)
 800bf1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf1e:	2300      	movs	r3, #0
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	4b11      	ldr	r3, [pc, #68]	; (800bf68 <prvCheckForValidListAndQueue+0x74>)
 800bf24:	4a11      	ldr	r2, [pc, #68]	; (800bf6c <prvCheckForValidListAndQueue+0x78>)
 800bf26:	2110      	movs	r1, #16
 800bf28:	200a      	movs	r0, #10
 800bf2a:	f7fd f9f9 	bl	8009320 <xQueueGenericCreateStatic>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	4a08      	ldr	r2, [pc, #32]	; (800bf54 <prvCheckForValidListAndQueue+0x60>)
 800bf32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf34:	4b07      	ldr	r3, [pc, #28]	; (800bf54 <prvCheckForValidListAndQueue+0x60>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d005      	beq.n	800bf48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf3c:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <prvCheckForValidListAndQueue+0x60>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	490b      	ldr	r1, [pc, #44]	; (800bf70 <prvCheckForValidListAndQueue+0x7c>)
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe f9c0 	bl	800a2c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf48:	f7fd f8b4 	bl	80090b4 <vPortExitCritical>
}
 800bf4c:	bf00      	nop
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	2000609c 	.word	0x2000609c
 800bf58:	2000606c 	.word	0x2000606c
 800bf5c:	20006080 	.word	0x20006080
 800bf60:	20006094 	.word	0x20006094
 800bf64:	20006098 	.word	0x20006098
 800bf68:	20006148 	.word	0x20006148
 800bf6c:	200060a8 	.word	0x200060a8
 800bf70:	0800e714 	.word	0x0800e714

0800bf74 <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800bf7e:	f7f5 faed 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bf82:	f7f5 fa77 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800bf86:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f062 0208 	orn	r2, r2, #8
 800bf90:	701a      	strb	r2, [r3, #0]
 800bf92:	2200      	movs	r2, #0
 800bf94:	705a      	strb	r2, [r3, #1]
 800bf96:	2200      	movs	r2, #0
 800bf98:	709a      	strb	r2, [r3, #2]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f042 0201 	orr.w	r2, r2, #1
 800bfa6:	711a      	strb	r2, [r3, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	715a      	strb	r2, [r3, #5]
 800bfac:	2200      	movs	r2, #0
 800bfae:	719a      	strb	r2, [r3, #6]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800bfba:	f7f5 faa9 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bfbe:	f7f5 fa65 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800bfc2:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	689b      	ldr	r3, [r3, #8]

}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <otCoapMessageInit>:

void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	70fb      	strb	r3, [r7, #3]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	70bb      	strb	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800bfe0:	f7f5 fabc 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bfe4:	f7f5 fa46 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800bfe8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f062 0228 	orn	r2, r2, #40	; 0x28
 800bff2:	701a      	strb	r2, [r3, #0]
 800bff4:	2200      	movs	r2, #0
 800bff6:	705a      	strb	r2, [r3, #1]
 800bff8:	2200      	movs	r2, #0
 800bffa:	709a      	strb	r2, [r3, #2]
 800bffc:	2200      	movs	r2, #0
 800bffe:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	f042 0203 	orr.w	r2, r2, #3
 800c008:	711a      	strb	r2, [r3, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	715a      	strb	r2, [r3, #5]
 800c00e:	2200      	movs	r2, #0
 800c010:	719a      	strb	r2, [r3, #6]
 800c012:	2200      	movs	r2, #0
 800c014:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aType;
 800c01c:	78fa      	ldrb	r2, [r7, #3]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aCode;
 800c022:	78ba      	ldrb	r2, [r7, #2]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800c028:	f7f5 fa72 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c02c:	f7f5 fa2e 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c030:	60f8      	str	r0, [r7, #12]
}
 800c032:	bf00      	nop
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <otCoapMessageAppendUriPathOptions>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b084      	sub	sp, #16
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c044:	f7f5 fa8a 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c048:	f7f5 fa14 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c04c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_APPEND_URI_PATH_OPTIONS;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2200      	movs	r2, #0
 800c052:	f062 0220 	orn	r2, r2, #32
 800c056:	701a      	strb	r2, [r3, #0]
 800c058:	2200      	movs	r2, #0
 800c05a:	705a      	strb	r2, [r3, #1]
 800c05c:	2200      	movs	r2, #0
 800c05e:	709a      	strb	r2, [r3, #2]
 800c060:	2200      	movs	r2, #0
 800c062:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2200      	movs	r2, #0
 800c068:	f042 0202 	orr.w	r2, r2, #2
 800c06c:	711a      	strb	r2, [r3, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	715a      	strb	r2, [r3, #5]
 800c072:	2200      	movs	r2, #0
 800c074:	719a      	strb	r2, [r3, #6]
 800c076:	2200      	movs	r2, #0
 800c078:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aUriPath;
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800c086:	f7f5 fa43 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c08a:	f7f5 f9ff 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c08e:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	b2db      	uxtb	r3, r3
}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b084      	sub	sp, #16
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800c0a6:	f7f5 fa59 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c0aa:	f7f5 f9e3 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c0ae:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f062 0219 	orn	r2, r2, #25
 800c0b8:	701a      	strb	r2, [r3, #0]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	705a      	strb	r2, [r3, #1]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	709a      	strb	r2, [r3, #2]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f042 0201 	orr.w	r2, r2, #1
 800c0ce:	711a      	strb	r2, [r3, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	715a      	strb	r2, [r3, #5]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	719a      	strb	r2, [r3, #6]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c0e2:	f7f5 fa15 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c0e6:	f7f5 f9d1 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c0ea:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	b2db      	uxtb	r3, r3
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <otCoapMessageGetType>:

otCoapType otCoapMessageGetType(const otMessage *aMessage)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800c102:	f7f5 fa2b 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c106:	f7f5 f9b5 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c10a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TYPE;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	f062 0218 	orn	r2, r2, #24
 800c114:	701a      	strb	r2, [r3, #0]
 800c116:	2200      	movs	r2, #0
 800c118:	705a      	strb	r2, [r3, #1]
 800c11a:	2200      	movs	r2, #0
 800c11c:	709a      	strb	r2, [r3, #2]
 800c11e:	2200      	movs	r2, #0
 800c120:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f042 0201 	orr.w	r2, r2, #1
 800c12a:	711a      	strb	r2, [r3, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	715a      	strb	r2, [r3, #5]
 800c130:	2200      	movs	r2, #0
 800c132:	719a      	strb	r2, [r3, #6]
 800c134:	2200      	movs	r2, #0
 800c136:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c13e:	f7f5 f9e7 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c142:	f7f5 f9a3 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c146:	60f8      	str	r0, [r7, #12]
  return (otCoapType)p_ot_req->Data[0];
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	b2db      	uxtb	r3, r3
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <otCoapMessageGetCode>:

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b084      	sub	sp, #16
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800c15e:	f7f5 f9fd 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c162:	f7f5 f987 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c166:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f062 0217 	orn	r2, r2, #23
 800c170:	701a      	strb	r2, [r3, #0]
 800c172:	2200      	movs	r2, #0
 800c174:	705a      	strb	r2, [r3, #1]
 800c176:	2200      	movs	r2, #0
 800c178:	709a      	strb	r2, [r3, #2]
 800c17a:	2200      	movs	r2, #0
 800c17c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2200      	movs	r2, #0
 800c182:	f042 0201 	orr.w	r2, r2, #1
 800c186:	711a      	strb	r2, [r3, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	715a      	strb	r2, [r3, #5]
 800c18c:	2200      	movs	r2, #0
 800c18e:	719a      	strb	r2, [r3, #6]
 800c190:	2200      	movs	r2, #0
 800c192:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c19a:	f7f5 f9b9 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c19e:	f7f5 f975 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c1a2:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	b2db      	uxtb	r3, r3
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <otCoapSendRequestWithParameters>:
                                        otMessage *               aMessage,
                                        const otMessageInfo *     aMessageInfo,
                                        otCoapResponseHandler     aHandler,
                                        void *                    aContext,
                                        const otCoapTxParameters *aTxParameters)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b086      	sub	sp, #24
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	60f8      	str	r0, [r7, #12]
 800c1ba:	60b9      	str	r1, [r7, #8]
 800c1bc:	607a      	str	r2, [r7, #4]
 800c1be:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 800c1c0:	f7f5 f9cc 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c1c4:	f7f5 f956 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c1c8:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST_WITH_PARAMETERS;
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f062 0209 	orn	r2, r2, #9
 800c1d2:	701a      	strb	r2, [r3, #0]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	705a      	strb	r2, [r3, #1]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	709a      	strb	r2, [r3, #2]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=5;
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f042 0205 	orr.w	r2, r2, #5
 800c1e8:	711a      	strb	r2, [r3, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	715a      	strb	r2, [r3, #5]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	719a      	strb	r2, [r3, #6]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aHandler;
 800c202:	683a      	ldr	r2, [r7, #0]
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aContext;
 800c208:	6a3a      	ldr	r2, [r7, #32]
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	615a      	str	r2, [r3, #20]
  p_ot_req->Data[4] = (uint32_t) aTxParameters;
 800c20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	619a      	str	r2, [r3, #24]

  Ot_Cmd_Transfer();
 800c214:	f7f5 f97c 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c218:	f7f5 f938 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c21c:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	b2db      	uxtb	r3, r3
}
 800c224:	4618      	mov	r0, r3
 800c226:	3718      	adds	r7, #24
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	460b      	mov	r3, r1
 800c236:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800c238:	f7f5 f990 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c23c:	f7f5 f91a 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c240:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2200      	movs	r2, #0
 800c246:	f062 0207 	orn	r2, r2, #7
 800c24a:	701a      	strb	r2, [r3, #0]
 800c24c:	2200      	movs	r2, #0
 800c24e:	705a      	strb	r2, [r3, #1]
 800c250:	2200      	movs	r2, #0
 800c252:	709a      	strb	r2, [r3, #2]
 800c254:	2200      	movs	r2, #0
 800c256:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f042 0201 	orr.w	r2, r2, #1
 800c260:	711a      	strb	r2, [r3, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	715a      	strb	r2, [r3, #5]
 800c266:	2200      	movs	r2, #0
 800c268:	719a      	strb	r2, [r3, #6]
 800c26a:	2200      	movs	r2, #0
 800c26c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 800c26e:	887a      	ldrh	r2, [r7, #2]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c274:	f7f5 f94c 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c278:	f7f5 f908 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c27c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	b2db      	uxtb	r3, r3
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c296:	f7f5 f961 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c29a:	f7f5 f8eb 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c29e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f062 0203 	orn	r2, r2, #3
 800c2a8:	701a      	strb	r2, [r3, #0]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	705a      	strb	r2, [r3, #1]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	709a      	strb	r2, [r3, #2]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f042 0201 	orr.w	r2, r2, #1
 800c2be:	711a      	strb	r2, [r3, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	715a      	strb	r2, [r3, #5]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	719a      	strb	r2, [r3, #6]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 800c2cc:	683a      	ldr	r2, [r7, #0]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c2d2:	f7f5 f91d 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c2d6:	f7f5 f8d9 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c2da:	60f8      	str	r0, [r7, #12]
}
 800c2dc:	bf00      	nop
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 800c2ea:	f7f5 f937 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c2ee:	f7f5 f8c1 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c2f2:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f062 0235 	orn	r2, r2, #53	; 0x35
 800c2fc:	701a      	strb	r2, [r3, #0]
 800c2fe:	2200      	movs	r2, #0
 800c300:	705a      	strb	r2, [r3, #1]
 800c302:	2200      	movs	r2, #0
 800c304:	709a      	strb	r2, [r3, #2]
 800c306:	2200      	movs	r2, #0
 800c308:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	711a      	strb	r2, [r3, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	715a      	strb	r2, [r3, #5]
 800c314:	2200      	movs	r2, #0
 800c316:	719a      	strb	r2, [r3, #6]
 800c318:	2200      	movs	r2, #0
 800c31a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800c31c:	f7f5 f8f8 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c320:	f7f5 f8b4 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c324:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	689b      	ldr	r3, [r3, #8]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <otInstanceFinalize>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800c33a:	f7f5 f90f 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c33e:	f7f5 f899 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c342:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	f062 0233 	orn	r2, r2, #51	; 0x33
 800c34c:	701a      	strb	r2, [r3, #0]
 800c34e:	2200      	movs	r2, #0
 800c350:	705a      	strb	r2, [r3, #1]
 800c352:	2200      	movs	r2, #0
 800c354:	709a      	strb	r2, [r3, #2]
 800c356:	2200      	movs	r2, #0
 800c358:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2200      	movs	r2, #0
 800c35e:	711a      	strb	r2, [r3, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	715a      	strb	r2, [r3, #5]
 800c364:	2200      	movs	r2, #0
 800c366:	719a      	strb	r2, [r3, #6]
 800c368:	2200      	movs	r2, #0
 800c36a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800c36c:	f7f5 f8d0 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c370:	f7f5 f88c 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c374:	60f8      	str	r0, [r7, #12]
}
 800c376:	bf00      	nop
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
	...

0800c380 <otSetStateChangedCallback>:
#endif

#if OPENTHREAD_MTD || OPENTHREAD_FTD
otError otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
    void *aContext)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 800c38c:	f7f5 f8e6 	bl	800155c <Pre_OtCmdProcessing>
  /* Store the callback function */
  otStateChangedCb = aCallback;
 800c390:	4a15      	ldr	r2, [pc, #84]	; (800c3e8 <otSetStateChangedCallback+0x68>)
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	6013      	str	r3, [r2, #0]
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c396:	f7f5 f86d 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c39a:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f062 0232 	orn	r2, r2, #50	; 0x32
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	705a      	strb	r2, [r3, #1]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	709a      	strb	r2, [r3, #2]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f042 0201 	orr.w	r2, r2, #1
 800c3ba:	711a      	strb	r2, [r3, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	715a      	strb	r2, [r3, #5]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	719a      	strb	r2, [r3, #6]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aContext;
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c3ce:	f7f5 f89f 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c3d2:	f7f5 f85b 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c3d6:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	b2db      	uxtb	r3, r3
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3718      	adds	r7, #24
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20006198 	.word	0x20006198

0800c3ec <otInstanceErasePersistentInfo>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800c3f4:	f7f5 f8b2 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c3f8:	f7f5 f83c 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c3fc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2200      	movs	r2, #0
 800c402:	f062 022c 	orn	r2, r2, #44	; 0x2c
 800c406:	701a      	strb	r2, [r3, #0]
 800c408:	2200      	movs	r2, #0
 800c40a:	705a      	strb	r2, [r3, #1]
 800c40c:	2200      	movs	r2, #0
 800c40e:	709a      	strb	r2, [r3, #2]
 800c410:	2200      	movs	r2, #0
 800c412:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2200      	movs	r2, #0
 800c418:	711a      	strb	r2, [r3, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	715a      	strb	r2, [r3, #5]
 800c41e:	2200      	movs	r2, #0
 800c420:	719a      	strb	r2, [r3, #6]
 800c422:	2200      	movs	r2, #0
 800c424:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800c426:	f7f5 f873 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c42a:	f7f5 f82f 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c42e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	b2db      	uxtb	r3, r3
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b084      	sub	sp, #16
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	460b      	mov	r3, r1
 800c448:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800c44a:	f7f5 f887 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c44e:	f7f5 f811 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c452:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800c45c:	701a      	strb	r2, [r3, #0]
 800c45e:	2200      	movs	r2, #0
 800c460:	705a      	strb	r2, [r3, #1]
 800c462:	2200      	movs	r2, #0
 800c464:	709a      	strb	r2, [r3, #2]
 800c466:	2200      	movs	r2, #0
 800c468:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f042 0201 	orr.w	r2, r2, #1
 800c472:	711a      	strb	r2, [r3, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	715a      	strb	r2, [r3, #5]
 800c478:	2200      	movs	r2, #0
 800c47a:	719a      	strb	r2, [r3, #6]
 800c47c:	2200      	movs	r2, #0
 800c47e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800c480:	78fa      	ldrb	r2, [r7, #3]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c486:	f7f5 f843 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c48a:	f7f4 ffff 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c48e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	b2db      	uxtb	r3, r3
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

otError otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b084      	sub	sp, #16
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c4a8:	f7f5 f858 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c4ac:	f7f4 ffe2 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c4b0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800c4ba:	701a      	strb	r2, [r3, #0]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	705a      	strb	r2, [r3, #1]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	709a      	strb	r2, [r3, #2]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f042 0202 	orr.w	r2, r2, #2
 800c4d0:	711a      	strb	r2, [r3, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	715a      	strb	r2, [r3, #5]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	719a      	strb	r2, [r3, #6]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800c4ea:	f7f5 f811 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c4ee:	f7f4 ffcd 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c4f2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	b2db      	uxtb	r3, r3
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

otError otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b084      	sub	sp, #16
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	460b      	mov	r3, r1
 800c50c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800c50e:	f7f5 f825 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c512:	f7f4 ffaf 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c516:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f042 0207 	orr.w	r2, r2, #7
 800c520:	701a      	strb	r2, [r3, #0]
 800c522:	2200      	movs	r2, #0
 800c524:	705a      	strb	r2, [r3, #1]
 800c526:	2200      	movs	r2, #0
 800c528:	709a      	strb	r2, [r3, #2]
 800c52a:	2200      	movs	r2, #0
 800c52c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2200      	movs	r2, #0
 800c532:	f042 0201 	orr.w	r2, r2, #1
 800c536:	711a      	strb	r2, [r3, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	715a      	strb	r2, [r3, #5]
 800c53c:	2200      	movs	r2, #0
 800c53e:	719a      	strb	r2, [r3, #6]
 800c540:	2200      	movs	r2, #0
 800c542:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800c544:	78fa      	ldrb	r2, [r7, #3]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c54a:	f7f4 ffe1 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c54e:	f7f4 ff9d 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c552:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	b2db      	uxtb	r3, r3
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

otError otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b084      	sub	sp, #16
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
 800c56a:	460b      	mov	r3, r1
 800c56c:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800c56e:	f7f4 fff5 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c572:	f7f4 ff7f 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c576:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f042 020e 	orr.w	r2, r2, #14
 800c580:	701a      	strb	r2, [r3, #0]
 800c582:	2200      	movs	r2, #0
 800c584:	705a      	strb	r2, [r3, #1]
 800c586:	2200      	movs	r2, #0
 800c588:	709a      	strb	r2, [r3, #2]
 800c58a:	2200      	movs	r2, #0
 800c58c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2200      	movs	r2, #0
 800c592:	f042 0201 	orr.w	r2, r2, #1
 800c596:	711a      	strb	r2, [r3, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	715a      	strb	r2, [r3, #5]
 800c59c:	2200      	movs	r2, #0
 800c59e:	719a      	strb	r2, [r3, #6]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800c5a4:	887a      	ldrh	r2, [r7, #2]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c5aa:	f7f4 ffb1 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c5ae:	f7f4 ff6d 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c5b2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	b2db      	uxtb	r3, r3
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b084      	sub	sp, #16
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c5cc:	f7f4 ffc6 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c5d0:	f7f4 ff50 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c5d4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f042 0210 	orr.w	r2, r2, #16
 800c5de:	701a      	strb	r2, [r3, #0]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	705a      	strb	r2, [r3, #1]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	709a      	strb	r2, [r3, #2]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f042 0201 	orr.w	r2, r2, #1
 800c5f4:	711a      	strb	r2, [r3, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	715a      	strb	r2, [r3, #5]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	719a      	strb	r2, [r3, #6]
 800c5fe:	2200      	movs	r2, #0
 800c600:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c608:	f7f4 ff82 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c60c:	f7f4 ff3e 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c610:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	b2db      	uxtb	r3, r3
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800c628:	f7f4 ff98 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c62c:	f7f4 ff22 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c630:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2200      	movs	r2, #0
 800c636:	f042 0216 	orr.w	r2, r2, #22
 800c63a:	701a      	strb	r2, [r3, #0]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f042 0201 	orr.w	r2, r2, #1
 800c642:	705a      	strb	r2, [r3, #1]
 800c644:	2200      	movs	r2, #0
 800c646:	709a      	strb	r2, [r3, #2]
 800c648:	2200      	movs	r2, #0
 800c64a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f042 0201 	orr.w	r2, r2, #1
 800c654:	711a      	strb	r2, [r3, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	715a      	strb	r2, [r3, #5]
 800c65a:	2200      	movs	r2, #0
 800c65c:	719a      	strb	r2, [r3, #6]
 800c65e:	2200      	movs	r2, #0
 800c660:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c668:	f7f4 ff52 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c66c:	f7f4 ff0e 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c670:	60f8      	str	r0, [r7, #12]
}
 800c672:	bf00      	nop
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b084      	sub	sp, #16
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800c682:	f7f4 ff6b 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c686:	f7f4 fef5 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c68a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	f042 0219 	orr.w	r2, r2, #25
 800c694:	701a      	strb	r2, [r3, #0]
 800c696:	2200      	movs	r2, #0
 800c698:	f042 0201 	orr.w	r2, r2, #1
 800c69c:	705a      	strb	r2, [r3, #1]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	709a      	strb	r2, [r3, #2]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f042 0201 	orr.w	r2, r2, #1
 800c6ae:	711a      	strb	r2, [r3, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	715a      	strb	r2, [r3, #5]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	719a      	strb	r2, [r3, #6]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c6c2:	f7f4 ff25 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c6c6:	f7f4 fee1 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c6ca:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	b29b      	uxth	r3, r3
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <otMessageAppend>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b086      	sub	sp, #24
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	60f8      	str	r0, [r7, #12]
 800c6e2:	60b9      	str	r1, [r7, #8]
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	80fb      	strh	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800c6e8:	f7f4 ff38 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c6ec:	f7f4 fec2 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c6f0:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f042 021e 	orr.w	r2, r2, #30
 800c6fa:	701a      	strb	r2, [r3, #0]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f042 0201 	orr.w	r2, r2, #1
 800c702:	705a      	strb	r2, [r3, #1]
 800c704:	2200      	movs	r2, #0
 800c706:	709a      	strb	r2, [r3, #2]
 800c708:	2200      	movs	r2, #0
 800c70a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	2200      	movs	r2, #0
 800c710:	f042 0203 	orr.w	r2, r2, #3
 800c714:	711a      	strb	r2, [r3, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	715a      	strb	r2, [r3, #5]
 800c71a:	2200      	movs	r2, #0
 800c71c:	719a      	strb	r2, [r3, #6]
 800c71e:	2200      	movs	r2, #0
 800c720:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aBuf;
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aLength;
 800c72e:	88fa      	ldrh	r2, [r7, #6]
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800c734:	f7f4 feec 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c738:	f7f4 fea8 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c73c:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	b2db      	uxtb	r3, r3
}
 800c744:	4618      	mov	r0, r3
 800c746:	3718      	adds	r7, #24
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	607a      	str	r2, [r7, #4]
 800c756:	461a      	mov	r2, r3
 800c758:	460b      	mov	r3, r1
 800c75a:	817b      	strh	r3, [r7, #10]
 800c75c:	4613      	mov	r3, r2
 800c75e:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 800c760:	f7f4 fefc 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c764:	f7f4 fe86 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800c768:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f042 021f 	orr.w	r2, r2, #31
 800c772:	701a      	strb	r2, [r3, #0]
 800c774:	2200      	movs	r2, #0
 800c776:	f042 0201 	orr.w	r2, r2, #1
 800c77a:	705a      	strb	r2, [r3, #1]
 800c77c:	2200      	movs	r2, #0
 800c77e:	709a      	strb	r2, [r3, #2]
 800c780:	2200      	movs	r2, #0
 800c782:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2200      	movs	r2, #0
 800c788:	f042 0204 	orr.w	r2, r2, #4
 800c78c:	711a      	strb	r2, [r3, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	715a      	strb	r2, [r3, #5]
 800c792:	2200      	movs	r2, #0
 800c794:	719a      	strb	r2, [r3, #6]
 800c796:	2200      	movs	r2, #0
 800c798:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 800c7a0:	897a      	ldrh	r2, [r7, #10]
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 800c7ac:	893a      	ldrh	r2, [r7, #8]
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800c7b2:	f7f4 fead 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c7b6:	f7f4 fe69 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c7ba:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	b29b      	uxth	r3, r3
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3718      	adds	r7, #24
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
	...

0800c7cc <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800c7cc:	b5b0      	push	{r4, r5, r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800c7d6:	f7f4 fe65 	bl	80014a4 <THREAD_Get_NotificationPayloadBuffer>
 800c7da:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	2b48      	cmp	r3, #72	; 0x48
 800c7e4:	f200 850a 	bhi.w	800d1fc <OpenThread_CallBack_Processing+0xa30>
 800c7e8:	a201      	add	r2, pc, #4	; (adr r2, 800c7f0 <OpenThread_CallBack_Processing+0x24>)
 800c7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ee:	bf00      	nop
 800c7f0:	0800cb2b 	.word	0x0800cb2b
 800c7f4:	0800cbc5 	.word	0x0800cbc5
 800c7f8:	0800cc1d 	.word	0x0800cc1d
 800c7fc:	0800ccc9 	.word	0x0800ccc9
 800c800:	0800ccd5 	.word	0x0800ccd5
 800c804:	0800ccf3 	.word	0x0800ccf3
 800c808:	0800d1fd 	.word	0x0800d1fd
 800c80c:	0800cd1d 	.word	0x0800cd1d
 800c810:	0800cd37 	.word	0x0800cd37
 800c814:	0800cd6b 	.word	0x0800cd6b
 800c818:	0800cd89 	.word	0x0800cd89
 800c81c:	0800cda7 	.word	0x0800cda7
 800c820:	0800d1fd 	.word	0x0800d1fd
 800c824:	0800d1fd 	.word	0x0800d1fd
 800c828:	0800cdd1 	.word	0x0800cdd1
 800c82c:	0800cdf7 	.word	0x0800cdf7
 800c830:	0800ce59 	.word	0x0800ce59
 800c834:	0800ce77 	.word	0x0800ce77
 800c838:	0800d1fd 	.word	0x0800d1fd
 800c83c:	0800ce9f 	.word	0x0800ce9f
 800c840:	0800cec7 	.word	0x0800cec7
 800c844:	0800d1fd 	.word	0x0800d1fd
 800c848:	0800cee5 	.word	0x0800cee5
 800c84c:	0800cf09 	.word	0x0800cf09
 800c850:	0800cf33 	.word	0x0800cf33
 800c854:	0800c981 	.word	0x0800c981
 800c858:	0800c9a5 	.word	0x0800c9a5
 800c85c:	0800c9c9 	.word	0x0800c9c9
 800c860:	0800c9f3 	.word	0x0800c9f3
 800c864:	0800d1fd 	.word	0x0800d1fd
 800c868:	0800cf53 	.word	0x0800cf53
 800c86c:	0800d1fd 	.word	0x0800d1fd
 800c870:	0800d1fd 	.word	0x0800d1fd
 800c874:	0800d1fd 	.word	0x0800d1fd
 800c878:	0800d1fd 	.word	0x0800d1fd
 800c87c:	0800d1fd 	.word	0x0800d1fd
 800c880:	0800cbfb 	.word	0x0800cbfb
 800c884:	0800cc5b 	.word	0x0800cc5b
 800c888:	0800cc81 	.word	0x0800cc81
 800c88c:	0800cca7 	.word	0x0800cca7
 800c890:	0800cf75 	.word	0x0800cf75
 800c894:	0800cfb3 	.word	0x0800cfb3
 800c898:	0800cfcb 	.word	0x0800cfcb
 800c89c:	0800cb47 	.word	0x0800cb47
 800c8a0:	0800cb65 	.word	0x0800cb65
 800c8a4:	0800d1fd 	.word	0x0800d1fd
 800c8a8:	0800ca1b 	.word	0x0800ca1b
 800c8ac:	0800ca39 	.word	0x0800ca39
 800c8b0:	0800ca57 	.word	0x0800ca57
 800c8b4:	0800ca75 	.word	0x0800ca75
 800c8b8:	0800ca97 	.word	0x0800ca97
 800c8bc:	0800cab9 	.word	0x0800cab9
 800c8c0:	0800d1fd 	.word	0x0800d1fd
 800c8c4:	0800d1fd 	.word	0x0800d1fd
 800c8c8:	0800c915 	.word	0x0800c915
 800c8cc:	0800c939 	.word	0x0800c939
 800c8d0:	0800c95d 	.word	0x0800c95d
 800c8d4:	0800d1fd 	.word	0x0800d1fd
 800c8d8:	0800d1fd 	.word	0x0800d1fd
 800c8dc:	0800cadb 	.word	0x0800cadb
 800c8e0:	0800caf9 	.word	0x0800caf9
 800c8e4:	0800d1fd 	.word	0x0800d1fd
 800c8e8:	0800d1fd 	.word	0x0800d1fd
 800c8ec:	0800d1fd 	.word	0x0800d1fd
 800c8f0:	0800cff9 	.word	0x0800cff9
 800c8f4:	0800d017 	.word	0x0800d017
 800c8f8:	0800d035 	.word	0x0800d035
 800c8fc:	0800d06b 	.word	0x0800d06b
 800c900:	0800d0dd 	.word	0x0800d0dd
 800c904:	0800d121 	.word	0x0800d121
 800c908:	0800d18b 	.word	0x0800d18b
 800c90c:	0800d1c9 	.word	0x0800d1c9
 800c910:	0800d155 	.word	0x0800d155
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 800c914:	4b99      	ldr	r3, [pc, #612]	; (800cb7c <OpenThread_CallBack_Processing+0x3b0>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f000 8472 	beq.w	800d202 <OpenThread_CallBack_Processing+0xa36>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800c91e:	4b97      	ldr	r3, [pc, #604]	; (800cb7c <OpenThread_CallBack_Processing+0x3b0>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	6892      	ldr	r2, [r2, #8]
 800c926:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800c92c:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 800c92e:	683a      	ldr	r2, [r7, #0]
 800c930:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800c932:	4798      	blx	r3
    }
    break;
 800c934:	f000 bc65 	b.w	800d202 <OpenThread_CallBack_Processing+0xa36>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 800c938:	4b91      	ldr	r3, [pc, #580]	; (800cb80 <OpenThread_CallBack_Processing+0x3b4>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 8462 	beq.w	800d206 <OpenThread_CallBack_Processing+0xa3a>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800c942:	4b8f      	ldr	r3, [pc, #572]	; (800cb80 <OpenThread_CallBack_Processing+0x3b4>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	683a      	ldr	r2, [r7, #0]
 800c948:	6892      	ldr	r2, [r2, #8]
 800c94a:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 800c94c:	683a      	ldr	r2, [r7, #0]
 800c94e:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800c950:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800c956:	4798      	blx	r3
    }
    break;
 800c958:	f000 bc55 	b.w	800d206 <OpenThread_CallBack_Processing+0xa3a>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 800c95c:	4b89      	ldr	r3, [pc, #548]	; (800cb84 <OpenThread_CallBack_Processing+0x3b8>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	f000 8452 	beq.w	800d20a <OpenThread_CallBack_Processing+0xa3e>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800c966:	4b87      	ldr	r3, [pc, #540]	; (800cb84 <OpenThread_CallBack_Processing+0x3b8>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	6892      	ldr	r2, [r2, #8]
 800c96e:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800c974:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800c976:	683a      	ldr	r2, [r7, #0]
 800c978:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800c97a:	4798      	blx	r3
    }
    break;
 800c97c:	f000 bc45 	b.w	800d20a <OpenThread_CallBack_Processing+0xa3e>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 800c980:	4b81      	ldr	r3, [pc, #516]	; (800cb88 <OpenThread_CallBack_Processing+0x3bc>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 8442 	beq.w	800d20e <OpenThread_CallBack_Processing+0xa42>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800c98a:	4b7f      	ldr	r3, [pc, #508]	; (800cb88 <OpenThread_CallBack_Processing+0x3bc>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	683a      	ldr	r2, [r7, #0]
 800c990:	6892      	ldr	r2, [r2, #8]
 800c992:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800c994:	683a      	ldr	r2, [r7, #0]
 800c996:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800c998:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800c99a:	683a      	ldr	r2, [r7, #0]
 800c99c:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800c99e:	4798      	blx	r3
    }
    break;
 800c9a0:	f000 bc35 	b.w	800d20e <OpenThread_CallBack_Processing+0xa42>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 800c9a4:	4b79      	ldr	r3, [pc, #484]	; (800cb8c <OpenThread_CallBack_Processing+0x3c0>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 8432 	beq.w	800d212 <OpenThread_CallBack_Processing+0xa46>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800c9ae:	4b77      	ldr	r3, [pc, #476]	; (800cb8c <OpenThread_CallBack_Processing+0x3c0>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	683a      	ldr	r2, [r7, #0]
 800c9b4:	6892      	ldr	r2, [r2, #8]
 800c9b6:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800c9bc:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800c9be:	683a      	ldr	r2, [r7, #0]
 800c9c0:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800c9c2:	4798      	blx	r3
    }
    break;
 800c9c4:	f000 bc25 	b.w	800d212 <OpenThread_CallBack_Processing+0xa46>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 800c9c8:	4b71      	ldr	r3, [pc, #452]	; (800cb90 <OpenThread_CallBack_Processing+0x3c4>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f000 8422 	beq.w	800d216 <OpenThread_CallBack_Processing+0xa4a>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800c9d2:	4b6f      	ldr	r3, [pc, #444]	; (800cb90 <OpenThread_CallBack_Processing+0x3c4>)
 800c9d4:	681c      	ldr	r4, [r3, #0]
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800c9e0:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800c9e6:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800c9ec:	47a0      	blx	r4
    }
    break;
 800c9ee:	f000 bc12 	b.w	800d216 <OpenThread_CallBack_Processing+0xa4a>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 800c9f2:	4b68      	ldr	r3, [pc, #416]	; (800cb94 <OpenThread_CallBack_Processing+0x3c8>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f000 840f 	beq.w	800d21a <OpenThread_CallBack_Processing+0xa4e>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800c9fc:	4b65      	ldr	r3, [pc, #404]	; (800cb94 <OpenThread_CallBack_Processing+0x3c8>)
 800c9fe:	681c      	ldr	r4, [r3, #0]
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800ca0a:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800ca10:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800ca16:	47a0      	blx	r4
    }
    break;
 800ca18:	e3ff      	b.n	800d21a <OpenThread_CallBack_Processing+0xa4e>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 800ca1a:	4b5f      	ldr	r3, [pc, #380]	; (800cb98 <OpenThread_CallBack_Processing+0x3cc>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f000 83fd 	beq.w	800d21e <OpenThread_CallBack_Processing+0xa52>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800ca24:	4b5c      	ldr	r3, [pc, #368]	; (800cb98 <OpenThread_CallBack_Processing+0x3cc>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	683a      	ldr	r2, [r7, #0]
 800ca2a:	6892      	ldr	r2, [r2, #8]
 800ca2c:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800ca32:	4611      	mov	r1, r2
 800ca34:	4798      	blx	r3
    }
    break;
 800ca36:	e3f2      	b.n	800d21e <OpenThread_CallBack_Processing+0xa52>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 800ca38:	4b58      	ldr	r3, [pc, #352]	; (800cb9c <OpenThread_CallBack_Processing+0x3d0>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 83f0 	beq.w	800d222 <OpenThread_CallBack_Processing+0xa56>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800ca42:	4b56      	ldr	r3, [pc, #344]	; (800cb9c <OpenThread_CallBack_Processing+0x3d0>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	6892      	ldr	r2, [r2, #8]
 800ca4a:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800ca4c:	683a      	ldr	r2, [r7, #0]
 800ca4e:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800ca50:	4611      	mov	r1, r2
 800ca52:	4798      	blx	r3
    }
    break;
 800ca54:	e3e5      	b.n	800d222 <OpenThread_CallBack_Processing+0xa56>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 800ca56:	4b52      	ldr	r3, [pc, #328]	; (800cba0 <OpenThread_CallBack_Processing+0x3d4>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f000 83e3 	beq.w	800d226 <OpenThread_CallBack_Processing+0xa5a>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800ca60:	4b4f      	ldr	r3, [pc, #316]	; (800cba0 <OpenThread_CallBack_Processing+0x3d4>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	6892      	ldr	r2, [r2, #8]
 800ca68:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800ca6a:	683a      	ldr	r2, [r7, #0]
 800ca6c:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800ca6e:	4611      	mov	r1, r2
 800ca70:	4798      	blx	r3
    }
    break;
 800ca72:	e3d8      	b.n	800d226 <OpenThread_CallBack_Processing+0xa5a>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 800ca74:	4b4b      	ldr	r3, [pc, #300]	; (800cba4 <OpenThread_CallBack_Processing+0x3d8>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f000 83d6 	beq.w	800d22a <OpenThread_CallBack_Processing+0xa5e>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 800ca7e:	4b49      	ldr	r3, [pc, #292]	; (800cba4 <OpenThread_CallBack_Processing+0x3d8>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	6892      	ldr	r2, [r2, #8]
 800ca86:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 800ca88:	683a      	ldr	r2, [r7, #0]
 800ca8a:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800ca8c:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800ca8e:	683a      	ldr	r2, [r7, #0]
 800ca90:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800ca92:	4798      	blx	r3
    }
    break;
 800ca94:	e3c9      	b.n	800d22a <OpenThread_CallBack_Processing+0xa5e>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 800ca96:	4b44      	ldr	r3, [pc, #272]	; (800cba8 <OpenThread_CallBack_Processing+0x3dc>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 83c7 	beq.w	800d22e <OpenThread_CallBack_Processing+0xa62>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 800caa0:	4b41      	ldr	r3, [pc, #260]	; (800cba8 <OpenThread_CallBack_Processing+0x3dc>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	683a      	ldr	r2, [r7, #0]
 800caa6:	6892      	ldr	r2, [r2, #8]
 800caa8:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 800caae:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800cab0:	683a      	ldr	r2, [r7, #0]
 800cab2:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 800cab4:	4798      	blx	r3
    }
    break;
 800cab6:	e3ba      	b.n	800d22e <OpenThread_CallBack_Processing+0xa62>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 800cab8:	4b3b      	ldr	r3, [pc, #236]	; (800cba8 <OpenThread_CallBack_Processing+0x3dc>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f000 83b8 	beq.w	800d232 <OpenThread_CallBack_Processing+0xa66>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 800cac2:	4b3a      	ldr	r3, [pc, #232]	; (800cbac <OpenThread_CallBack_Processing+0x3e0>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	6892      	ldr	r2, [r2, #8]
 800caca:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 800cacc:	683a      	ldr	r2, [r7, #0]
 800cace:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 800cad0:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800cad2:	683a      	ldr	r2, [r7, #0]
 800cad4:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 800cad6:	4798      	blx	r3
    }
    break;
 800cad8:	e3ab      	b.n	800d232 <OpenThread_CallBack_Processing+0xa66>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 800cada:	4b35      	ldr	r3, [pc, #212]	; (800cbb0 <OpenThread_CallBack_Processing+0x3e4>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f000 83a9 	beq.w	800d236 <OpenThread_CallBack_Processing+0xa6a>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800cae4:	4b32      	ldr	r3, [pc, #200]	; (800cbb0 <OpenThread_CallBack_Processing+0x3e4>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	6892      	ldr	r2, [r2, #8]
 800caec:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800caf2:	4611      	mov	r1, r2
 800caf4:	4798      	blx	r3
    }
    break;
 800caf6:	e39e      	b.n	800d236 <OpenThread_CallBack_Processing+0xa6a>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 800caf8:	4b2e      	ldr	r3, [pc, #184]	; (800cbb4 <OpenThread_CallBack_Processing+0x3e8>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 839c 	beq.w	800d23a <OpenThread_CallBack_Processing+0xa6e>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 800cb02:	4b2c      	ldr	r3, [pc, #176]	; (800cbb4 <OpenThread_CallBack_Processing+0x3e8>)
 800cb04:	681c      	ldr	r4, [r3, #0]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 800cb10:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 800cb16:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 800cb1c:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	462b      	mov	r3, r5
 800cb26:	47a0      	blx	r4
    }
    break;
 800cb28:	e387      	b.n	800d23a <OpenThread_CallBack_Processing+0xa6e>
          (void *) p_notification->Data[3]);
    }
    break;
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 800cb2a:	4b23      	ldr	r3, [pc, #140]	; (800cbb8 <OpenThread_CallBack_Processing+0x3ec>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f000 8385 	beq.w	800d23e <OpenThread_CallBack_Processing+0xa72>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800cb34:	4b20      	ldr	r3, [pc, #128]	; (800cbb8 <OpenThread_CallBack_Processing+0x3ec>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	683a      	ldr	r2, [r7, #0]
 800cb3a:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 800cb3c:	683a      	ldr	r2, [r7, #0]
 800cb3e:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800cb40:	4611      	mov	r1, r2
 800cb42:	4798      	blx	r3
    }
    break;
 800cb44:	e37b      	b.n	800d23e <OpenThread_CallBack_Processing+0xa72>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 800cb46:	4b1d      	ldr	r3, [pc, #116]	; (800cbbc <OpenThread_CallBack_Processing+0x3f0>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f000 8379 	beq.w	800d242 <OpenThread_CallBack_Processing+0xa76>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800cb50:	4b1a      	ldr	r3, [pc, #104]	; (800cbbc <OpenThread_CallBack_Processing+0x3f0>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	683a      	ldr	r2, [r7, #0]
 800cb56:	6892      	ldr	r2, [r2, #8]
 800cb58:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800cb5e:	4611      	mov	r1, r2
 800cb60:	4798      	blx	r3
    }
    break;
 800cb62:	e36e      	b.n	800d242 <OpenThread_CallBack_Processing+0xa76>
  case MSG_M0TOM4_THREAD_DETACH_GRACEFULLY_CB:
    if (otDetachGracefullyCb != NULL)
 800cb64:	4b16      	ldr	r3, [pc, #88]	; (800cbc0 <OpenThread_CallBack_Processing+0x3f4>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 836c 	beq.w	800d246 <OpenThread_CallBack_Processing+0xa7a>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 800cb6e:	4b14      	ldr	r3, [pc, #80]	; (800cbc0 <OpenThread_CallBack_Processing+0x3f4>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	683a      	ldr	r2, [r7, #0]
 800cb74:	6892      	ldr	r2, [r2, #8]
 800cb76:	4610      	mov	r0, r2
 800cb78:	4798      	blx	r3
    }
    break;
 800cb7a:	e364      	b.n	800d246 <OpenThread_CallBack_Processing+0xa7a>
 800cb7c:	20006224 	.word	0x20006224
 800cb80:	2000622c 	.word	0x2000622c
 800cb84:	20006228 	.word	0x20006228
 800cb88:	200061c0 	.word	0x200061c0
 800cb8c:	200061bc 	.word	0x200061bc
 800cb90:	200061c4 	.word	0x200061c4
 800cb94:	200061b8 	.word	0x200061b8
 800cb98:	20006230 	.word	0x20006230
 800cb9c:	20006234 	.word	0x20006234
 800cba0:	20006238 	.word	0x20006238
 800cba4:	20006240 	.word	0x20006240
 800cba8:	2000623c 	.word	0x2000623c
 800cbac:	20006244 	.word	0x20006244
 800cbb0:	2000624c 	.word	0x2000624c
 800cbb4:	20006248 	.word	0x20006248
 800cbb8:	20006198 	.word	0x20006198
 800cbbc:	200061c8 	.word	0x200061c8
 800cbc0:	200061cc 	.word	0x200061cc
          (void *) p_notification->Data[1]);
    }
    break;
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	4b93      	ldr	r3, [pc, #588]	; (800ce18 <OpenThread_CallBack_Processing+0x64c>)
 800cbcc:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 800cbce:	4b92      	ldr	r3, [pc, #584]	; (800ce18 <OpenThread_CallBack_Processing+0x64c>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	4a91      	ldr	r2, [pc, #580]	; (800ce1c <OpenThread_CallBack_Processing+0x650>)
 800cbd6:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 800cbd8:	4b90      	ldr	r3, [pc, #576]	; (800ce1c <OpenThread_CallBack_Processing+0x650>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 8334 	beq.w	800d24a <OpenThread_CallBack_Processing+0xa7e>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800cbe2:	4b8e      	ldr	r3, [pc, #568]	; (800ce1c <OpenThread_CallBack_Processing+0x650>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a8c      	ldr	r2, [pc, #560]	; (800ce18 <OpenThread_CallBack_Processing+0x64c>)
 800cbe8:	6812      	ldr	r2, [r2, #0]
 800cbea:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800cbf0:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800cbf2:	683a      	ldr	r2, [r7, #0]
 800cbf4:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800cbf6:	4798      	blx	r3
    }
    break;
 800cbf8:	e327      	b.n	800d24a <OpenThread_CallBack_Processing+0xa7e>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 800cbfa:	4b89      	ldr	r3, [pc, #548]	; (800ce20 <OpenThread_CallBack_Processing+0x654>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f000 8325 	beq.w	800d24e <OpenThread_CallBack_Processing+0xa82>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800cc04:	4b86      	ldr	r3, [pc, #536]	; (800ce20 <OpenThread_CallBack_Processing+0x654>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	6892      	ldr	r2, [r2, #8]
 800cc0c:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800cc12:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800cc14:	683a      	ldr	r2, [r7, #0]
 800cc16:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800cc18:	4798      	blx	r3
    }
    break;
 800cc1a:	e318      	b.n	800d24e <OpenThread_CallBack_Processing+0xa82>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	461a      	mov	r2, r3
 800cc22:	4b80      	ldr	r3, [pc, #512]	; (800ce24 <OpenThread_CallBack_Processing+0x658>)
 800cc24:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800cc26:	4b7f      	ldr	r3, [pc, #508]	; (800ce24 <OpenThread_CallBack_Processing+0x658>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	4a7e      	ldr	r2, [pc, #504]	; (800ce28 <OpenThread_CallBack_Processing+0x65c>)
 800cc2e:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 800cc30:	4b7d      	ldr	r3, [pc, #500]	; (800ce28 <OpenThread_CallBack_Processing+0x65c>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f000 830c 	beq.w	800d252 <OpenThread_CallBack_Processing+0xa86>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800cc3a:	4b7b      	ldr	r3, [pc, #492]	; (800ce28 <OpenThread_CallBack_Processing+0x65c>)
 800cc3c:	681c      	ldr	r4, [r3, #0]
 800cc3e:	4b79      	ldr	r3, [pc, #484]	; (800ce24 <OpenThread_CallBack_Processing+0x658>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800cc48:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800cc4e:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	47a0      	blx	r4
    }
    break;
 800cc58:	e2fb      	b.n	800d252 <OpenThread_CallBack_Processing+0xa86>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800cc5a:	4b74      	ldr	r3, [pc, #464]	; (800ce2c <OpenThread_CallBack_Processing+0x660>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f000 82f9 	beq.w	800d256 <OpenThread_CallBack_Processing+0xa8a>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800cc64:	4b71      	ldr	r3, [pc, #452]	; (800ce2c <OpenThread_CallBack_Processing+0x660>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	683a      	ldr	r2, [r7, #0]
 800cc6a:	6892      	ldr	r2, [r2, #8]
 800cc6c:	2a00      	cmp	r2, #0
 800cc6e:	bf14      	ite	ne
 800cc70:	2201      	movne	r2, #1
 800cc72:	2200      	moveq	r2, #0
 800cc74:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	4798      	blx	r3
    }
    break;
 800cc7e:	e2ea      	b.n	800d256 <OpenThread_CallBack_Processing+0xa8a>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800cc80:	4b6a      	ldr	r3, [pc, #424]	; (800ce2c <OpenThread_CallBack_Processing+0x660>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f000 82e8 	beq.w	800d25a <OpenThread_CallBack_Processing+0xa8e>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800cc8a:	4b68      	ldr	r3, [pc, #416]	; (800ce2c <OpenThread_CallBack_Processing+0x660>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	6892      	ldr	r2, [r2, #8]
 800cc92:	2a00      	cmp	r2, #0
 800cc94:	bf14      	ite	ne
 800cc96:	2201      	movne	r2, #1
 800cc98:	2200      	moveq	r2, #0
 800cc9a:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800cca0:	4611      	mov	r1, r2
 800cca2:	4798      	blx	r3
    }
    break;
 800cca4:	e2d9      	b.n	800d25a <OpenThread_CallBack_Processing+0xa8e>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 800cca6:	4b62      	ldr	r3, [pc, #392]	; (800ce30 <OpenThread_CallBack_Processing+0x664>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f000 82d7 	beq.w	800d25e <OpenThread_CallBack_Processing+0xa92>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800ccb0:	4b5f      	ldr	r3, [pc, #380]	; (800ce30 <OpenThread_CallBack_Processing+0x664>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	683a      	ldr	r2, [r7, #0]
 800ccb6:	6892      	ldr	r2, [r2, #8]
 800ccb8:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800ccba:	683a      	ldr	r2, [r7, #0]
 800ccbc:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800ccbe:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800ccc0:	683a      	ldr	r2, [r7, #0]
 800ccc2:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800ccc4:	4798      	blx	r3
    }
    break;
 800ccc6:	e2ca      	b.n	800d25e <OpenThread_CallBack_Processing+0xa92>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 800ccc8:	2001      	movs	r0, #1
 800ccca:	f000 fb2c 	bl	800d326 <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 800ccce:	f7f7 fc32 	bl	8004536 <HAL_NVIC_SystemReset>
    break;
 800ccd2:	e2ff      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 800ccd4:	4b57      	ldr	r3, [pc, #348]	; (800ce34 <OpenThread_CallBack_Processing+0x668>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f000 82c2 	beq.w	800d262 <OpenThread_CallBack_Processing+0xa96>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800ccde:	4b55      	ldr	r3, [pc, #340]	; (800ce34 <OpenThread_CallBack_Processing+0x668>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	683a      	ldr	r2, [r7, #0]
 800cce4:	6892      	ldr	r2, [r2, #8]
 800cce6:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800cce8:	683a      	ldr	r2, [r7, #0]
 800ccea:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800ccec:	4611      	mov	r1, r2
 800ccee:	4798      	blx	r3
    }
    break;
 800ccf0:	e2b7      	b.n	800d262 <OpenThread_CallBack_Processing+0xa96>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 800ccf2:	4b51      	ldr	r3, [pc, #324]	; (800ce38 <OpenThread_CallBack_Processing+0x66c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f000 82b5 	beq.w	800d266 <OpenThread_CallBack_Processing+0xa9a>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800ccfc:	4b4e      	ldr	r3, [pc, #312]	; (800ce38 <OpenThread_CallBack_Processing+0x66c>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	6892      	ldr	r2, [r2, #8]
 800cd04:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 800cd06:	683a      	ldr	r2, [r7, #0]
 800cd08:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800cd0a:	2a00      	cmp	r2, #0
 800cd0c:	bf14      	ite	ne
 800cd0e:	2201      	movne	r2, #1
 800cd10:	2200      	moveq	r2, #0
 800cd12:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800cd14:	683a      	ldr	r2, [r7, #0]
 800cd16:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800cd18:	4798      	blx	r3
    }
    break;
 800cd1a:	e2a4      	b.n	800d266 <OpenThread_CallBack_Processing+0xa9a>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 800cd1c:	4b47      	ldr	r3, [pc, #284]	; (800ce3c <OpenThread_CallBack_Processing+0x670>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f000 82a2 	beq.w	800d26a <OpenThread_CallBack_Processing+0xa9e>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 800cd26:	4b45      	ldr	r3, [pc, #276]	; (800ce3c <OpenThread_CallBack_Processing+0x670>)
 800cd28:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 800cd2a:	683a      	ldr	r2, [r7, #0]
 800cd2c:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 800cd2e:	4611      	mov	r1, r2
 800cd30:	2000      	movs	r0, #0
 800cd32:	4798      	blx	r3
    }
    break;
 800cd34:	e299      	b.n	800d26a <OpenThread_CallBack_Processing+0xa9e>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 800cd36:	4b42      	ldr	r3, [pc, #264]	; (800ce40 <OpenThread_CallBack_Processing+0x674>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 8297 	beq.w	800d26e <OpenThread_CallBack_Processing+0xaa2>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800cd40:	4b3f      	ldr	r3, [pc, #252]	; (800ce40 <OpenThread_CallBack_Processing+0x674>)
 800cd42:	681c      	ldr	r4, [r3, #0]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800cd4e:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800cd54:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800cd5a:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	462b      	mov	r3, r5
 800cd66:	47a0      	blx	r4
    }
    break;
 800cd68:	e281      	b.n	800d26e <OpenThread_CallBack_Processing+0xaa2>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 800cd6a:	4b36      	ldr	r3, [pc, #216]	; (800ce44 <OpenThread_CallBack_Processing+0x678>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f000 827f 	beq.w	800d272 <OpenThread_CallBack_Processing+0xaa6>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800cd74:	4b33      	ldr	r3, [pc, #204]	; (800ce44 <OpenThread_CallBack_Processing+0x678>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	6892      	ldr	r2, [r2, #8]
 800cd7c:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800cd82:	4611      	mov	r1, r2
 800cd84:	4798      	blx	r3
    }
    break;
 800cd86:	e274      	b.n	800d272 <OpenThread_CallBack_Processing+0xaa6>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 800cd88:	4b2f      	ldr	r3, [pc, #188]	; (800ce48 <OpenThread_CallBack_Processing+0x67c>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f000 8272 	beq.w	800d276 <OpenThread_CallBack_Processing+0xaaa>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800cd92:	4b2d      	ldr	r3, [pc, #180]	; (800ce48 <OpenThread_CallBack_Processing+0x67c>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	6892      	ldr	r2, [r2, #8]
 800cd9a:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800cd9c:	683a      	ldr	r2, [r7, #0]
 800cd9e:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800cda0:	4611      	mov	r1, r2
 800cda2:	4798      	blx	r3
    }
    break;
 800cda4:	e267      	b.n	800d276 <OpenThread_CallBack_Processing+0xaaa>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 800cda6:	4b29      	ldr	r3, [pc, #164]	; (800ce4c <OpenThread_CallBack_Processing+0x680>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 8265 	beq.w	800d27a <OpenThread_CallBack_Processing+0xaae>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800cdb0:	4b26      	ldr	r3, [pc, #152]	; (800ce4c <OpenThread_CallBack_Processing+0x680>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	683a      	ldr	r2, [r7, #0]
 800cdb6:	6892      	ldr	r2, [r2, #8]
 800cdb8:	4610      	mov	r0, r2
          p_notification->Data[1],
 800cdba:	683a      	ldr	r2, [r7, #0]
 800cdbc:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800cdbe:	2a00      	cmp	r2, #0
 800cdc0:	bf14      	ite	ne
 800cdc2:	2201      	movne	r2, #1
 800cdc4:	2200      	moveq	r2, #0
 800cdc6:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 800cdc8:	683a      	ldr	r2, [r7, #0]
 800cdca:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800cdcc:	4798      	blx	r3
    }
    break;
 800cdce:	e254      	b.n	800d27a <OpenThread_CallBack_Processing+0xaae>
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
    }
    break;
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 800cdd0:	4b1f      	ldr	r3, [pc, #124]	; (800ce50 <OpenThread_CallBack_Processing+0x684>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 8252 	beq.w	800d27e <OpenThread_CallBack_Processing+0xab2>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800cdda:	4b1d      	ldr	r3, [pc, #116]	; (800ce50 <OpenThread_CallBack_Processing+0x684>)
 800cddc:	681c      	ldr	r4, [r3, #0]
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800cde6:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800cdec:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800cdf2:	47a0      	blx	r4
    }
    break;
 800cdf4:	e243      	b.n	800d27e <OpenThread_CallBack_Processing+0xab2>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 800cdf6:	4b17      	ldr	r3, [pc, #92]	; (800ce54 <OpenThread_CallBack_Processing+0x688>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f000 8241 	beq.w	800d282 <OpenThread_CallBack_Processing+0xab6>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800ce00:	4b14      	ldr	r3, [pc, #80]	; (800ce54 <OpenThread_CallBack_Processing+0x688>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	6892      	ldr	r2, [r2, #8]
 800ce08:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 800ce0a:	683a      	ldr	r2, [r7, #0]
 800ce0c:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800ce12:	4798      	blx	r3
    }
    break;
 800ce14:	e235      	b.n	800d282 <OpenThread_CallBack_Processing+0xab6>
 800ce16:	bf00      	nop
 800ce18:	2000620c 	.word	0x2000620c
 800ce1c:	20006200 	.word	0x20006200
 800ce20:	20006204 	.word	0x20006204
 800ce24:	20006210 	.word	0x20006210
 800ce28:	20006208 	.word	0x20006208
 800ce2c:	20006218 	.word	0x20006218
 800ce30:	20006214 	.word	0x20006214
 800ce34:	200061a0 	.word	0x200061a0
 800ce38:	200061a4 	.word	0x200061a4
 800ce3c:	2000619c 	.word	0x2000619c
 800ce40:	200061a8 	.word	0x200061a8
 800ce44:	200061ac 	.word	0x200061ac
 800ce48:	200061b0 	.word	0x200061b0
 800ce4c:	200061b4 	.word	0x200061b4
 800ce50:	200061d8 	.word	0x200061d8
 800ce54:	200061dc 	.word	0x200061dc
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 800ce58:	4b8f      	ldr	r3, [pc, #572]	; (800d098 <OpenThread_CallBack_Processing+0x8cc>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f000 8212 	beq.w	800d286 <OpenThread_CallBack_Processing+0xaba>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800ce62:	4b8d      	ldr	r3, [pc, #564]	; (800d098 <OpenThread_CallBack_Processing+0x8cc>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	683a      	ldr	r2, [r7, #0]
 800ce68:	6892      	ldr	r2, [r2, #8]
 800ce6a:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800ce6c:	683a      	ldr	r2, [r7, #0]
 800ce6e:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800ce70:	4611      	mov	r1, r2
 800ce72:	4798      	blx	r3
    }
    break;
 800ce74:	e207      	b.n	800d286 <OpenThread_CallBack_Processing+0xaba>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 800ce76:	4b89      	ldr	r3, [pc, #548]	; (800d09c <OpenThread_CallBack_Processing+0x8d0>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	f000 8205 	beq.w	800d28a <OpenThread_CallBack_Processing+0xabe>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800ce80:	4b86      	ldr	r3, [pc, #536]	; (800d09c <OpenThread_CallBack_Processing+0x8d0>)
 800ce82:	681c      	ldr	r4, [r3, #0]
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800ce8e:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800ce94:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800ce9a:	47a0      	blx	r4
    }
    break;
 800ce9c:	e1f5      	b.n	800d28a <OpenThread_CallBack_Processing+0xabe>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 800ce9e:	4b80      	ldr	r3, [pc, #512]	; (800d0a0 <OpenThread_CallBack_Processing+0x8d4>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 81f3 	beq.w	800d28e <OpenThread_CallBack_Processing+0xac2>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800cea8:	4b7d      	ldr	r3, [pc, #500]	; (800d0a0 <OpenThread_CallBack_Processing+0x8d4>)
 800ceaa:	681c      	ldr	r4, [r3, #0]
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800ceb6:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800cebc:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800cec2:	47a0      	blx	r4
    }
    break;
 800cec4:	e1e3      	b.n	800d28e <OpenThread_CallBack_Processing+0xac2>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 800cec6:	4b77      	ldr	r3, [pc, #476]	; (800d0a4 <OpenThread_CallBack_Processing+0x8d8>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f000 81e1 	beq.w	800d292 <OpenThread_CallBack_Processing+0xac6>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800ced0:	4b74      	ldr	r3, [pc, #464]	; (800d0a4 <OpenThread_CallBack_Processing+0x8d8>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	6892      	ldr	r2, [r2, #8]
 800ced8:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 800cede:	4611      	mov	r1, r2
 800cee0:	4798      	blx	r3
    }
    break;
 800cee2:	e1d6      	b.n	800d292 <OpenThread_CallBack_Processing+0xac6>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 800cee4:	4b70      	ldr	r3, [pc, #448]	; (800d0a8 <OpenThread_CallBack_Processing+0x8dc>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 81d4 	beq.w	800d296 <OpenThread_CallBack_Processing+0xaca>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800ceee:	4b6e      	ldr	r3, [pc, #440]	; (800d0a8 <OpenThread_CallBack_Processing+0x8dc>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	6892      	ldr	r2, [r2, #8]
 800cef6:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 800cef8:	683a      	ldr	r2, [r7, #0]
 800cefa:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800cefc:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800cf02:	b2d2      	uxtb	r2, r2
 800cf04:	4798      	blx	r3
    }
    break;
 800cf06:	e1c6      	b.n	800d296 <OpenThread_CallBack_Processing+0xaca>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 800cf08:	4b68      	ldr	r3, [pc, #416]	; (800d0ac <OpenThread_CallBack_Processing+0x8e0>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 81c4 	beq.w	800d29a <OpenThread_CallBack_Processing+0xace>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800cf12:	4b66      	ldr	r3, [pc, #408]	; (800d0ac <OpenThread_CallBack_Processing+0x8e0>)
 800cf14:	681c      	ldr	r4, [r3, #0]
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800cf20:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800cf26:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	47a0      	blx	r4
    }
    break;
 800cf30:	e1b3      	b.n	800d29a <OpenThread_CallBack_Processing+0xace>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 800cf32:	4b5f      	ldr	r3, [pc, #380]	; (800d0b0 <OpenThread_CallBack_Processing+0x8e4>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f000 81b1 	beq.w	800d29e <OpenThread_CallBack_Processing+0xad2>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800cf3c:	4b5c      	ldr	r3, [pc, #368]	; (800d0b0 <OpenThread_CallBack_Processing+0x8e4>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	6892      	ldr	r2, [r2, #8]
 800cf44:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 800cf46:	683a      	ldr	r2, [r7, #0]
 800cf48:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800cf4a:	b252      	sxtb	r2, r2
 800cf4c:	4611      	mov	r1, r2
 800cf4e:	4798      	blx	r3
    }
    break;
 800cf50:	e1a5      	b.n	800d29e <OpenThread_CallBack_Processing+0xad2>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 800cf52:	4b58      	ldr	r3, [pc, #352]	; (800d0b4 <OpenThread_CallBack_Processing+0x8e8>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f000 81a3 	beq.w	800d2a2 <OpenThread_CallBack_Processing+0xad6>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 800cf5c:	4b55      	ldr	r3, [pc, #340]	; (800d0b4 <OpenThread_CallBack_Processing+0x8e8>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	6892      	ldr	r2, [r2, #8]
 800cf64:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800cf6a:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 800cf6c:	683a      	ldr	r2, [r7, #0]
 800cf6e:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800cf70:	4798      	blx	r3
    }
    break;
 800cf72:	e196      	b.n	800d2a2 <OpenThread_CallBack_Processing+0xad6>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	4b4f      	ldr	r3, [pc, #316]	; (800d0b8 <OpenThread_CallBack_Processing+0x8ec>)
 800cf7c:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 800cf7e:	4b4e      	ldr	r3, [pc, #312]	; (800d0b8 <OpenThread_CallBack_Processing+0x8ec>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	4a4d      	ldr	r2, [pc, #308]	; (800d0bc <OpenThread_CallBack_Processing+0x8f0>)
 800cf86:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 800cf88:	4b4c      	ldr	r3, [pc, #304]	; (800d0bc <OpenThread_CallBack_Processing+0x8f0>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f000 818a 	beq.w	800d2a6 <OpenThread_CallBack_Processing+0xada>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800cf92:	4b4a      	ldr	r3, [pc, #296]	; (800d0bc <OpenThread_CallBack_Processing+0x8f0>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a48      	ldr	r2, [pc, #288]	; (800d0b8 <OpenThread_CallBack_Processing+0x8ec>)
 800cf98:	6812      	ldr	r2, [r2, #0]
 800cf9a:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800cfa0:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 800cfa2:	683a      	ldr	r2, [r7, #0]
 800cfa4:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800cfa6:	4798      	blx	r3
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	461a      	mov	r2, r3
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	609a      	str	r2, [r3, #8]
      }
      break;
 800cfb0:	e179      	b.n	800d2a6 <OpenThread_CallBack_Processing+0xada>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 800cfb2:	4b43      	ldr	r3, [pc, #268]	; (800d0c0 <OpenThread_CallBack_Processing+0x8f4>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	f000 8177 	beq.w	800d2aa <OpenThread_CallBack_Processing+0xade>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 800cfbc:	4b40      	ldr	r3, [pc, #256]	; (800d0c0 <OpenThread_CallBack_Processing+0x8f4>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	6892      	ldr	r2, [r2, #8]
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	4798      	blx	r3
    }
    break;
 800cfc8:	e16f      	b.n	800d2aa <OpenThread_CallBack_Processing+0xade>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 800cfca:	4b3e      	ldr	r3, [pc, #248]	; (800d0c4 <OpenThread_CallBack_Processing+0x8f8>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f000 816d 	beq.w	800d2ae <OpenThread_CallBack_Processing+0xae2>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800cfd4:	4b3b      	ldr	r3, [pc, #236]	; (800d0c4 <OpenThread_CallBack_Processing+0x8f8>)
 800cfd6:	6819      	ldr	r1, [r3, #0]
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	461c      	mov	r4, r3
 800cfe6:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	4622      	mov	r2, r4
 800cff2:	462b      	mov	r3, r5
 800cff4:	4788      	blx	r1
    }
    break;
 800cff6:	e15a      	b.n	800d2ae <OpenThread_CallBack_Processing+0xae2>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 800cff8:	4b33      	ldr	r3, [pc, #204]	; (800d0c8 <OpenThread_CallBack_Processing+0x8fc>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f000 8158 	beq.w	800d2b2 <OpenThread_CallBack_Processing+0xae6>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800d002:	4b31      	ldr	r3, [pc, #196]	; (800d0c8 <OpenThread_CallBack_Processing+0x8fc>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	6892      	ldr	r2, [r2, #8]
 800d00a:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800d00c:	683a      	ldr	r2, [r7, #0]
 800d00e:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800d010:	4611      	mov	r1, r2
 800d012:	4798      	blx	r3
    }
    break;
 800d014:	e14d      	b.n	800d2b2 <OpenThread_CallBack_Processing+0xae6>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 800d016:	4b2d      	ldr	r3, [pc, #180]	; (800d0cc <OpenThread_CallBack_Processing+0x900>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f000 814b 	beq.w	800d2b6 <OpenThread_CallBack_Processing+0xaea>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800d020:	4b2a      	ldr	r3, [pc, #168]	; (800d0cc <OpenThread_CallBack_Processing+0x900>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	6892      	ldr	r2, [r2, #8]
 800d028:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800d02e:	4611      	mov	r1, r2
 800d030:	4798      	blx	r3
    }
    break;
 800d032:	e140      	b.n	800d2b6 <OpenThread_CallBack_Processing+0xaea>
//      otTcpBytesAckedCb((otTcpEndpoint *) p_notification->Data[0],
//          (size_t) p_notification->Data[1]);
//    }
//    break;
  case MSG_M0TOM4_TCP_DISCONNECTED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d03c:	4a24      	ldr	r2, [pc, #144]	; (800d0d0 <OpenThread_CallBack_Processing+0x904>)
 800d03e:	6013      	str	r3, [r2, #0]

    otTcpDisconnectedCb = mySTTcpEndpointHandlerContext->mDisconnectedCallback;
 800d040:	4b23      	ldr	r3, [pc, #140]	; (800d0d0 <OpenThread_CallBack_Processing+0x904>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	4a23      	ldr	r2, [pc, #140]	; (800d0d4 <OpenThread_CallBack_Processing+0x908>)
 800d048:	6013      	str	r3, [r2, #0]

    if (otTcpDisconnectedCb != NULL)
 800d04a:	4b22      	ldr	r3, [pc, #136]	; (800d0d4 <OpenThread_CallBack_Processing+0x908>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f000 8133 	beq.w	800d2ba <OpenThread_CallBack_Processing+0xaee>
    {
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800d054:	4b1f      	ldr	r3, [pc, #124]	; (800d0d4 <OpenThread_CallBack_Processing+0x908>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	683a      	ldr	r2, [r7, #0]
 800d05a:	6892      	ldr	r2, [r2, #8]
 800d05c:	4610      	mov	r0, r2
          (otTcpDisconnectedReason) p_notification->Data[1]);
 800d05e:	683a      	ldr	r2, [r7, #0]
 800d060:	68d2      	ldr	r2, [r2, #12]
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800d062:	b2d2      	uxtb	r2, r2
 800d064:	4611      	mov	r1, r2
 800d066:	4798      	blx	r3
    }
    break;
 800d068:	e127      	b.n	800d2ba <OpenThread_CallBack_Processing+0xaee>
  case MSG_M0TOM4_TCP_ESTABLISHED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d072:	4a17      	ldr	r2, [pc, #92]	; (800d0d0 <OpenThread_CallBack_Processing+0x904>)
 800d074:	6013      	str	r3, [r2, #0]

    otTcpEstablishedCb = mySTTcpEndpointHandlerContext->mEstablishedCallback;
 800d076:	4b16      	ldr	r3, [pc, #88]	; (800d0d0 <OpenThread_CallBack_Processing+0x904>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	4a16      	ldr	r2, [pc, #88]	; (800d0d8 <OpenThread_CallBack_Processing+0x90c>)
 800d07e:	6013      	str	r3, [r2, #0]

    if (otTcpEstablishedCb != NULL)
 800d080:	4b15      	ldr	r3, [pc, #84]	; (800d0d8 <OpenThread_CallBack_Processing+0x90c>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 811a 	beq.w	800d2be <OpenThread_CallBack_Processing+0xaf2>
    {
      otTcpEstablishedCb((otTcpEndpoint *) p_notification->Data[0]);
 800d08a:	4b13      	ldr	r3, [pc, #76]	; (800d0d8 <OpenThread_CallBack_Processing+0x90c>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	6892      	ldr	r2, [r2, #8]
 800d092:	4610      	mov	r0, r2
 800d094:	4798      	blx	r3
    }
    break;
 800d096:	e112      	b.n	800d2be <OpenThread_CallBack_Processing+0xaf2>
 800d098:	200061d0 	.word	0x200061d0
 800d09c:	200061d4 	.word	0x200061d4
 800d0a0:	200061e0 	.word	0x200061e0
 800d0a4:	200061e4 	.word	0x200061e4
 800d0a8:	200061e8 	.word	0x200061e8
 800d0ac:	200061ec 	.word	0x200061ec
 800d0b0:	200061f0 	.word	0x200061f0
 800d0b4:	200061f4 	.word	0x200061f4
 800d0b8:	200061fc 	.word	0x200061fc
 800d0bc:	200061f8 	.word	0x200061f8
 800d0c0:	2000621c 	.word	0x2000621c
 800d0c4:	20006220 	.word	0x20006220
 800d0c8:	20006250 	.word	0x20006250
 800d0cc:	20006254 	.word	0x20006254
 800d0d0:	20006258 	.word	0x20006258
 800d0d4:	20006260 	.word	0x20006260
 800d0d8:	20006264 	.word	0x20006264
  case MSG_M0TOM4_TCP_RECEIVE_AVAILABLE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	689b      	ldr	r3, [r3, #8]
 800d0e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d0e4:	4a7f      	ldr	r2, [pc, #508]	; (800d2e4 <OpenThread_CallBack_Processing+0xb18>)
 800d0e6:	6013      	str	r3, [r2, #0]

    otTcpReceiveAvailableCb = mySTTcpEndpointHandlerContext->mReceiveAvailableCallback;
 800d0e8:	4b7e      	ldr	r3, [pc, #504]	; (800d2e4 <OpenThread_CallBack_Processing+0xb18>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	4a7e      	ldr	r2, [pc, #504]	; (800d2e8 <OpenThread_CallBack_Processing+0xb1c>)
 800d0f0:	6013      	str	r3, [r2, #0]

    if (otTcpReceiveAvailableCb != NULL)
 800d0f2:	4b7d      	ldr	r3, [pc, #500]	; (800d2e8 <OpenThread_CallBack_Processing+0xb1c>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f000 80e3 	beq.w	800d2c2 <OpenThread_CallBack_Processing+0xaf6>
    {
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800d0fc:	4b7a      	ldr	r3, [pc, #488]	; (800d2e8 <OpenThread_CallBack_Processing+0xb1c>)
 800d0fe:	681c      	ldr	r4, [r3, #0]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	4618      	mov	r0, r3
          (size_t) p_notification->Data[1],
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	68d9      	ldr	r1, [r3, #12]
          (bool) p_notification->Data[2],
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	691b      	ldr	r3, [r3, #16]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800d10e:	2b00      	cmp	r3, #0
 800d110:	bf14      	ite	ne
 800d112:	2301      	movne	r3, #1
 800d114:	2300      	moveq	r3, #0
 800d116:	b2da      	uxtb	r2, r3
          (size_t) p_notification->Data[3]);
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	695b      	ldr	r3, [r3, #20]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800d11c:	47a0      	blx	r4
    }
    break;
 800d11e:	e0d0      	b.n	800d2c2 <OpenThread_CallBack_Processing+0xaf6>
  case MSG_M0TOM4_TCP_SEND_DONE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d128:	4a6e      	ldr	r2, [pc, #440]	; (800d2e4 <OpenThread_CallBack_Processing+0xb18>)
 800d12a:	6013      	str	r3, [r2, #0]

    otTcpSendDoneCb = mySTTcpEndpointHandlerContext->mSendDoneCallback;
 800d12c:	4b6d      	ldr	r3, [pc, #436]	; (800d2e4 <OpenThread_CallBack_Processing+0xb18>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	4a6e      	ldr	r2, [pc, #440]	; (800d2ec <OpenThread_CallBack_Processing+0xb20>)
 800d134:	6013      	str	r3, [r2, #0]

    if (otTcpSendDoneCb != NULL)
 800d136:	4b6d      	ldr	r3, [pc, #436]	; (800d2ec <OpenThread_CallBack_Processing+0xb20>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f000 80c3 	beq.w	800d2c6 <OpenThread_CallBack_Processing+0xafa>
    {
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800d140:	4b6a      	ldr	r3, [pc, #424]	; (800d2ec <OpenThread_CallBack_Processing+0xb20>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	6892      	ldr	r2, [r2, #8]
 800d148:	4610      	mov	r0, r2
          (otLinkedBuffer *) p_notification->Data[1]);
 800d14a:	683a      	ldr	r2, [r7, #0]
 800d14c:	68d2      	ldr	r2, [r2, #12]
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800d14e:	4611      	mov	r1, r2
 800d150:	4798      	blx	r3
    }
    break;
 800d152:	e0b8      	b.n	800d2c6 <OpenThread_CallBack_Processing+0xafa>
//    {
//      otTcpSendReadyCb((otTcpEndpoint *) p_notification->Data[0]);
//    }
//    break;
  case MSG_M0TOM4_TCP_FORWARD_PROGRESS_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d15c:	4a61      	ldr	r2, [pc, #388]	; (800d2e4 <OpenThread_CallBack_Processing+0xb18>)
 800d15e:	6013      	str	r3, [r2, #0]

    mForwardProgressCallback = mySTTcpEndpointHandlerContext->mForwardProgressCallback;
 800d160:	4b60      	ldr	r3, [pc, #384]	; (800d2e4 <OpenThread_CallBack_Processing+0xb18>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	4a62      	ldr	r2, [pc, #392]	; (800d2f0 <OpenThread_CallBack_Processing+0xb24>)
 800d168:	6013      	str	r3, [r2, #0]

    if (mForwardProgressCallback != NULL)
 800d16a:	4b61      	ldr	r3, [pc, #388]	; (800d2f0 <OpenThread_CallBack_Processing+0xb24>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 80ab 	beq.w	800d2ca <OpenThread_CallBack_Processing+0xafe>
    {
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800d174:	4b5e      	ldr	r3, [pc, #376]	; (800d2f0 <OpenThread_CallBack_Processing+0xb24>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	683a      	ldr	r2, [r7, #0]
 800d17a:	6892      	ldr	r2, [r2, #8]
 800d17c:	4610      	mov	r0, r2
          (size_t) p_notification->Data[1],
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	68d1      	ldr	r1, [r2, #12]
          (size_t) p_notification->Data[2]);
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	6912      	ldr	r2, [r2, #16]
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800d186:	4798      	blx	r3
    }
    break;
 800d188:	e09f      	b.n	800d2ca <OpenThread_CallBack_Processing+0xafe>
  case MSG_M0TOM4_TCP_ACCEPT_READY_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	6a1b      	ldr	r3, [r3, #32]
 800d190:	4a58      	ldr	r2, [pc, #352]	; (800d2f4 <OpenThread_CallBack_Processing+0xb28>)
 800d192:	6013      	str	r3, [r2, #0]

    otTcpAcceptReadyCb = mySTTcpListenerHandlerContext->mAcceptReadyCallback;
 800d194:	4b57      	ldr	r3, [pc, #348]	; (800d2f4 <OpenThread_CallBack_Processing+0xb28>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	4a57      	ldr	r2, [pc, #348]	; (800d2f8 <OpenThread_CallBack_Processing+0xb2c>)
 800d19c:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptReadyCb != NULL)
 800d19e:	4b56      	ldr	r3, [pc, #344]	; (800d2f8 <OpenThread_CallBack_Processing+0xb2c>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f000 8093 	beq.w	800d2ce <OpenThread_CallBack_Processing+0xb02>
    {
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800d1a8:	4b53      	ldr	r3, [pc, #332]	; (800d2f8 <OpenThread_CallBack_Processing+0xb2c>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	683a      	ldr	r2, [r7, #0]
 800d1ae:	6892      	ldr	r2, [r2, #8]
 800d1b0:	4610      	mov	r0, r2
          (const otSockAddr *) p_notification->Data[1],
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	68d2      	ldr	r2, [r2, #12]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800d1b6:	4611      	mov	r1, r2
          (otTcpEndpoint **) p_notification->Data[2]);
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	6912      	ldr	r2, [r2, #16]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800d1bc:	4798      	blx	r3
 800d1be:	4603      	mov	r3, r0
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	609a      	str	r2, [r3, #8]
    }
    break;
 800d1c6:	e082      	b.n	800d2ce <OpenThread_CallBack_Processing+0xb02>
  case MSG_M0TOM4_TCP_ACCEPT_DONE_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	4a49      	ldr	r2, [pc, #292]	; (800d2f4 <OpenThread_CallBack_Processing+0xb28>)
 800d1d0:	6013      	str	r3, [r2, #0]

    otTcpAcceptDoneCb = mySTTcpListenerHandlerContext->mAcceptDoneCallback;
 800d1d2:	4b48      	ldr	r3, [pc, #288]	; (800d2f4 <OpenThread_CallBack_Processing+0xb28>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	4a48      	ldr	r2, [pc, #288]	; (800d2fc <OpenThread_CallBack_Processing+0xb30>)
 800d1da:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptDoneCb != NULL)
 800d1dc:	4b47      	ldr	r3, [pc, #284]	; (800d2fc <OpenThread_CallBack_Processing+0xb30>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d076      	beq.n	800d2d2 <OpenThread_CallBack_Processing+0xb06>
    {
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800d1e4:	4b45      	ldr	r3, [pc, #276]	; (800d2fc <OpenThread_CallBack_Processing+0xb30>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	683a      	ldr	r2, [r7, #0]
 800d1ea:	6892      	ldr	r2, [r2, #8]
 800d1ec:	4610      	mov	r0, r2
          (otTcpEndpoint *) p_notification->Data[1],
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	68d2      	ldr	r2, [r2, #12]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800d1f2:	4611      	mov	r1, r2
          (const otSockAddr *) p_notification->Data[2]);
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	6912      	ldr	r2, [r2, #16]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800d1f8:	4798      	blx	r3
    }
    break;
 800d1fa:	e06a      	b.n	800d2d2 <OpenThread_CallBack_Processing+0xb06>
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	71fb      	strb	r3, [r7, #7]
    break;
 800d200:	e068      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d202:	bf00      	nop
 800d204:	e066      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d206:	bf00      	nop
 800d208:	e064      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d20a:	bf00      	nop
 800d20c:	e062      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d20e:	bf00      	nop
 800d210:	e060      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d212:	bf00      	nop
 800d214:	e05e      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d216:	bf00      	nop
 800d218:	e05c      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d21a:	bf00      	nop
 800d21c:	e05a      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d21e:	bf00      	nop
 800d220:	e058      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d222:	bf00      	nop
 800d224:	e056      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d226:	bf00      	nop
 800d228:	e054      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d22a:	bf00      	nop
 800d22c:	e052      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d22e:	bf00      	nop
 800d230:	e050      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d232:	bf00      	nop
 800d234:	e04e      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d236:	bf00      	nop
 800d238:	e04c      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d23a:	bf00      	nop
 800d23c:	e04a      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d23e:	bf00      	nop
 800d240:	e048      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d242:	bf00      	nop
 800d244:	e046      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d246:	bf00      	nop
 800d248:	e044      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d24a:	bf00      	nop
 800d24c:	e042      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d24e:	bf00      	nop
 800d250:	e040      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d252:	bf00      	nop
 800d254:	e03e      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d256:	bf00      	nop
 800d258:	e03c      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d25a:	bf00      	nop
 800d25c:	e03a      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d25e:	bf00      	nop
 800d260:	e038      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d262:	bf00      	nop
 800d264:	e036      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d266:	bf00      	nop
 800d268:	e034      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d26a:	bf00      	nop
 800d26c:	e032      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d26e:	bf00      	nop
 800d270:	e030      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d272:	bf00      	nop
 800d274:	e02e      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d276:	bf00      	nop
 800d278:	e02c      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d27a:	bf00      	nop
 800d27c:	e02a      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d27e:	bf00      	nop
 800d280:	e028      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d282:	bf00      	nop
 800d284:	e026      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d286:	bf00      	nop
 800d288:	e024      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d28a:	bf00      	nop
 800d28c:	e022      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d28e:	bf00      	nop
 800d290:	e020      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d292:	bf00      	nop
 800d294:	e01e      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d296:	bf00      	nop
 800d298:	e01c      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d29a:	bf00      	nop
 800d29c:	e01a      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d29e:	bf00      	nop
 800d2a0:	e018      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2a2:	bf00      	nop
 800d2a4:	e016      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
      break;
 800d2a6:	bf00      	nop
 800d2a8:	e014      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2aa:	bf00      	nop
 800d2ac:	e012      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2ae:	bf00      	nop
 800d2b0:	e010      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2b2:	bf00      	nop
 800d2b4:	e00e      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2b6:	bf00      	nop
 800d2b8:	e00c      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2ba:	bf00      	nop
 800d2bc:	e00a      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2be:	bf00      	nop
 800d2c0:	e008      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2c2:	bf00      	nop
 800d2c4:	e006      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2c6:	bf00      	nop
 800d2c8:	e004      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2ca:	bf00      	nop
 800d2cc:	e002      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2ce:	bf00      	nop
 800d2d0:	e000      	b.n	800d2d4 <OpenThread_CallBack_Processing+0xb08>
    break;
 800d2d2:	bf00      	nop
  }

  TL_THREAD_SendAck();
 800d2d4:	f000 fc30 	bl	800db38 <TL_THREAD_SendAck>
  return status;
 800d2d8:	79fb      	ldrb	r3, [r7, #7]

}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bdb0      	pop	{r4, r5, r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	20006258 	.word	0x20006258
 800d2e8:	20006268 	.word	0x20006268
 800d2ec:	2000626c 	.word	0x2000626c
 800d2f0:	20006278 	.word	0x20006278
 800d2f4:	2000625c 	.word	0x2000625c
 800d2f8:	20006270 	.word	0x20006270
 800d2fc:	20006274 	.word	0x20006274

0800d300 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d306:	1d3b      	adds	r3, r7, #4
 800d308:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	2200      	movs	r2, #0
 800d30e:	2100      	movs	r1, #0
 800d310:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800d314:	f000 f956 	bl	800d5c4 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	330b      	adds	r3, #11
 800d31c:	78db      	ldrb	r3, [r3, #3]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b088      	sub	sp, #32
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	4603      	mov	r3, r0
 800d32e:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d330:	f107 030c 	add.w	r3, r7, #12
 800d334:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800d336:	79fb      	ldrb	r3, [r7, #7]
 800d338:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800d33a:	f107 020c 	add.w	r2, r7, #12
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	2101      	movs	r1, #1
 800d342:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800d346:	f000 f93d 	bl	800d5c4 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	330b      	adds	r3, #11
 800d34e:	78db      	ldrb	r3, [r3, #3]
}
 800d350:	4618      	mov	r0, r3
 800d352:	3720      	adds	r7, #32
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b088      	sub	sp, #32
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	4603      	mov	r3, r0
 800d360:	460a      	mov	r2, r1
 800d362:	71fb      	strb	r3, [r7, #7]
 800d364:	4613      	mov	r3, r2
 800d366:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d368:	f107 030c 	add.w	r3, r7, #12
 800d36c:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800d36e:	79fb      	ldrb	r3, [r7, #7]
 800d370:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 800d372:	79bb      	ldrb	r3, [r7, #6]
 800d374:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 800d376:	f107 020c 	add.w	r2, r7, #12
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	2102      	movs	r1, #2
 800d37e:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 800d382:	f000 f91f 	bl	800d5c4 <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	330b      	adds	r3, #11
 800d38a:	78db      	ldrb	r3, [r3, #3]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3720      	adds	r7, #32
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800d394:	b480      	push	{r7}
 800d396:	b08b      	sub	sp, #44	; 0x2c
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800d39c:	2300      	movs	r3, #0
 800d39e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800d3bc:	4b4a      	ldr	r3, [pc, #296]	; (800d4e8 <SHCI_GetWirelessFwInfo+0x154>)
 800d3be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d3c4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d3ce:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a44      	ldr	r2, [pc, #272]	; (800d4ec <SHCI_GetWirelessFwInfo+0x158>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d10f      	bne.n	800d400 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	69db      	ldr	r3, [r3, #28]
 800d3f0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	691b      	ldr	r3, [r3, #16]
 800d3fc:	617b      	str	r3, [r7, #20]
 800d3fe:	e01a      	b.n	800d436 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d408:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800d40c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	691b      	ldr	r3, [r3, #16]
 800d414:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	695b      	ldr	r3, [r3, #20]
 800d41c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	699b      	ldr	r3, [r3, #24]
 800d424:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	0e1b      	lsrs	r3, r3, #24
 800d43a:	b2da      	uxtb	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d442:	0c1b      	lsrs	r3, r3, #16
 800d444:	b2da      	uxtb	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800d44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44c:	0a1b      	lsrs	r3, r3, #8
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800d454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d456:	091b      	lsrs	r3, r3, #4
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	f003 030f 	and.w	r3, r3, #15
 800d45e:	b2da      	uxtb	r2, r3
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	b2db      	uxtb	r3, r3
 800d468:	f003 030f 	and.w	r3, r3, #15
 800d46c:	b2da      	uxtb	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	0e1b      	lsrs	r3, r3, #24
 800d476:	b2da      	uxtb	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800d47c:	6a3b      	ldr	r3, [r7, #32]
 800d47e:	0c1b      	lsrs	r3, r3, #16
 800d480:	b2da      	uxtb	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800d486:	6a3b      	ldr	r3, [r7, #32]
 800d488:	0a1b      	lsrs	r3, r3, #8
 800d48a:	b2da      	uxtb	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800d490:	6a3b      	ldr	r3, [r7, #32]
 800d492:	b2da      	uxtb	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	b2da      	uxtb	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	0e1b      	lsrs	r3, r3, #24
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	0c1b      	lsrs	r3, r3, #16
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	0a1b      	lsrs	r3, r3, #8
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	0e1b      	lsrs	r3, r3, #24
 800d4c2:	b2da      	uxtb	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	0c1b      	lsrs	r3, r3, #16
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	372c      	adds	r7, #44	; 0x2c
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr
 800d4e8:	58004000 	.word	0x58004000
 800d4ec:	a94656b9 	.word	0xa94656b9

0800d4f0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	4a08      	ldr	r2, [pc, #32]	; (800d520 <shci_init+0x30>)
 800d500:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800d502:	4a08      	ldr	r2, [pc, #32]	; (800d524 <shci_init+0x34>)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800d508:	4806      	ldr	r0, [pc, #24]	; (800d524 <shci_init+0x34>)
 800d50a:	f000 f911 	bl	800d730 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4618      	mov	r0, r3
 800d514:	f000 f894 	bl	800d640 <TlInit>

  return;
 800d518:	bf00      	nop
}
 800d51a:	3708      	adds	r7, #8
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	2000629c 	.word	0x2000629c
 800d524:	2000627c 	.word	0x2000627c

0800d528 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d52e:	4822      	ldr	r0, [pc, #136]	; (800d5b8 <shci_user_evt_proc+0x90>)
 800d530:	f000 fd18 	bl	800df64 <LST_is_empty>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d12b      	bne.n	800d592 <shci_user_evt_proc+0x6a>
 800d53a:	4b20      	ldr	r3, [pc, #128]	; (800d5bc <shci_user_evt_proc+0x94>)
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d027      	beq.n	800d592 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d542:	f107 030c 	add.w	r3, r7, #12
 800d546:	4619      	mov	r1, r3
 800d548:	481b      	ldr	r0, [pc, #108]	; (800d5b8 <shci_user_evt_proc+0x90>)
 800d54a:	f000 fd9a 	bl	800e082 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800d54e:	4b1c      	ldr	r3, [pc, #112]	; (800d5c0 <shci_user_evt_proc+0x98>)
 800d550:	69db      	ldr	r3, [r3, #28]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00c      	beq.n	800d570 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800d55a:	2301      	movs	r3, #1
 800d55c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d55e:	4b18      	ldr	r3, [pc, #96]	; (800d5c0 <shci_user_evt_proc+0x98>)
 800d560:	69db      	ldr	r3, [r3, #28]
 800d562:	1d3a      	adds	r2, r7, #4
 800d564:	4610      	mov	r0, r2
 800d566:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800d568:	793a      	ldrb	r2, [r7, #4]
 800d56a:	4b14      	ldr	r3, [pc, #80]	; (800d5bc <shci_user_evt_proc+0x94>)
 800d56c:	701a      	strb	r2, [r3, #0]
 800d56e:	e002      	b.n	800d576 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d570:	4b12      	ldr	r3, [pc, #72]	; (800d5bc <shci_user_evt_proc+0x94>)
 800d572:	2201      	movs	r2, #1
 800d574:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800d576:	4b11      	ldr	r3, [pc, #68]	; (800d5bc <shci_user_evt_proc+0x94>)
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d004      	beq.n	800d588 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	4618      	mov	r0, r3
 800d582:	f000 fb55 	bl	800dc30 <TL_MM_EvtDone>
 800d586:	e004      	b.n	800d592 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	4619      	mov	r1, r3
 800d58c:	480a      	ldr	r0, [pc, #40]	; (800d5b8 <shci_user_evt_proc+0x90>)
 800d58e:	f000 fd0b 	bl	800dfa8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d592:	4809      	ldr	r0, [pc, #36]	; (800d5b8 <shci_user_evt_proc+0x90>)
 800d594:	f000 fce6 	bl	800df64 <LST_is_empty>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d107      	bne.n	800d5ae <shci_user_evt_proc+0x86>
 800d59e:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <shci_user_evt_proc+0x94>)
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d003      	beq.n	800d5ae <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800d5a6:	4804      	ldr	r0, [pc, #16]	; (800d5b8 <shci_user_evt_proc+0x90>)
 800d5a8:	f7f4 fec4 	bl	8002334 <shci_notify_asynch_evt>
  }


  return;
 800d5ac:	bf00      	nop
 800d5ae:	bf00      	nop
}
 800d5b0:	3710      	adds	r7, #16
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	20000034 	.word	0x20000034
 800d5bc:	20000044 	.word	0x20000044
 800d5c0:	2000627c 	.word	0x2000627c

0800d5c4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60ba      	str	r2, [r7, #8]
 800d5cc:	607b      	str	r3, [r7, #4]
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	81fb      	strh	r3, [r7, #14]
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	f000 f864 	bl	800d6a4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800d5dc:	4b16      	ldr	r3, [pc, #88]	; (800d638 <shci_send+0x74>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	89fa      	ldrh	r2, [r7, #14]
 800d5e2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800d5e6:	4b14      	ldr	r3, [pc, #80]	; (800d638 <shci_send+0x74>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	7b7a      	ldrb	r2, [r7, #13]
 800d5ec:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d5ee:	4b12      	ldr	r3, [pc, #72]	; (800d638 <shci_send+0x74>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	330c      	adds	r3, #12
 800d5f4:	7b7a      	ldrb	r2, [r7, #13]
 800d5f6:	68b9      	ldr	r1, [r7, #8]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f000 fd85 	bl	800e108 <memcpy>

  shciContext.io.Send(0,0);
 800d5fe:	4b0f      	ldr	r3, [pc, #60]	; (800d63c <shci_send+0x78>)
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	2100      	movs	r1, #0
 800d604:	2000      	movs	r0, #0
 800d606:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800d608:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d60c:	f7f4 feb2 	bl	8002374 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f103 0008 	add.w	r0, r3, #8
 800d616:	4b08      	ldr	r3, [pc, #32]	; (800d638 <shci_send+0x74>)
 800d618:	6819      	ldr	r1, [r3, #0]
 800d61a:	4b07      	ldr	r3, [pc, #28]	; (800d638 <shci_send+0x74>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	789b      	ldrb	r3, [r3, #2]
 800d620:	3303      	adds	r3, #3
 800d622:	461a      	mov	r2, r3
 800d624:	f000 fd70 	bl	800e108 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d628:	2001      	movs	r0, #1
 800d62a:	f000 f83b 	bl	800d6a4 <Cmd_SetStatus>

  return;
 800d62e:	bf00      	nop
}
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	20000040 	.word	0x20000040
 800d63c:	2000627c 	.word	0x2000627c

0800d640 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800d648:	4a10      	ldr	r2, [pc, #64]	; (800d68c <TlInit+0x4c>)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800d64e:	4810      	ldr	r0, [pc, #64]	; (800d690 <TlInit+0x50>)
 800d650:	f000 fc78 	bl	800df44 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d654:	2001      	movs	r0, #1
 800d656:	f000 f825 	bl	800d6a4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d65a:	4b0e      	ldr	r3, [pc, #56]	; (800d694 <TlInit+0x54>)
 800d65c:	2201      	movs	r2, #1
 800d65e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800d660:	4b0d      	ldr	r3, [pc, #52]	; (800d698 <TlInit+0x58>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00c      	beq.n	800d682 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800d66c:	4b0b      	ldr	r3, [pc, #44]	; (800d69c <TlInit+0x5c>)
 800d66e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800d670:	4b0b      	ldr	r3, [pc, #44]	; (800d6a0 <TlInit+0x60>)
 800d672:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800d674:	4b08      	ldr	r3, [pc, #32]	; (800d698 <TlInit+0x58>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f107 020c 	add.w	r2, r7, #12
 800d67c:	4610      	mov	r0, r2
 800d67e:	4798      	blx	r3
  }

  return;
 800d680:	bf00      	nop
 800d682:	bf00      	nop
}
 800d684:	3718      	adds	r7, #24
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	20000040 	.word	0x20000040
 800d690:	20000034 	.word	0x20000034
 800d694:	20000044 	.word	0x20000044
 800d698:	2000627c 	.word	0x2000627c
 800d69c:	0800d6f5 	.word	0x0800d6f5
 800d6a0:	0800d70d 	.word	0x0800d70d

0800d6a4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800d6ae:	79fb      	ldrb	r3, [r7, #7]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10b      	bne.n	800d6cc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800d6b4:	4b0d      	ldr	r3, [pc, #52]	; (800d6ec <Cmd_SetStatus+0x48>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d003      	beq.n	800d6c4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800d6bc:	4b0b      	ldr	r3, [pc, #44]	; (800d6ec <Cmd_SetStatus+0x48>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2000      	movs	r0, #0
 800d6c2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800d6c4:	4b0a      	ldr	r3, [pc, #40]	; (800d6f0 <Cmd_SetStatus+0x4c>)
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800d6ca:	e00b      	b.n	800d6e4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800d6cc:	4b08      	ldr	r3, [pc, #32]	; (800d6f0 <Cmd_SetStatus+0x4c>)
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800d6d2:	4b06      	ldr	r3, [pc, #24]	; (800d6ec <Cmd_SetStatus+0x48>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d004      	beq.n	800d6e4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800d6da:	4b04      	ldr	r3, [pc, #16]	; (800d6ec <Cmd_SetStatus+0x48>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2001      	movs	r0, #1
 800d6e0:	4798      	blx	r3
  return;
 800d6e2:	bf00      	nop
 800d6e4:	bf00      	nop
}
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	2000629c 	.word	0x2000629c
 800d6f0:	2000003c 	.word	0x2000003c

0800d6f4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	f7f4 fe29 	bl	8002354 <shci_cmd_resp_release>

  return;
 800d702:	bf00      	nop
}
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
	...

0800d70c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800d714:	6879      	ldr	r1, [r7, #4]
 800d716:	4805      	ldr	r0, [pc, #20]	; (800d72c <TlUserEvtReceived+0x20>)
 800d718:	f000 fc6c 	bl	800dff4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d71c:	4803      	ldr	r0, [pc, #12]	; (800d72c <TlUserEvtReceived+0x20>)
 800d71e:	f7f4 fe09 	bl	8002334 <shci_notify_asynch_evt>

  return;
 800d722:	bf00      	nop
}
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	20000034 	.word	0x20000034

0800d730 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4a05      	ldr	r2, [pc, #20]	; (800d750 <shci_register_io_bus+0x20>)
 800d73c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4a04      	ldr	r2, [pc, #16]	; (800d754 <shci_register_io_bus+0x24>)
 800d742:	611a      	str	r2, [r3, #16]

  return;
 800d744:	bf00      	nop
}
 800d746:	370c      	adds	r7, #12
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr
 800d750:	0800d9e1 	.word	0x0800d9e1
 800d754:	0800da35 	.word	0x0800da35

0800d758 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800d764:	f7f3 fefa 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d768:	f7f3 fe84 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800d76c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2200      	movs	r2, #0
 800d772:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800d776:	701a      	strb	r2, [r3, #0]
 800d778:	2200      	movs	r2, #0
 800d77a:	705a      	strb	r2, [r3, #1]
 800d77c:	2200      	movs	r2, #0
 800d77e:	709a      	strb	r2, [r3, #2]
 800d780:	2200      	movs	r2, #0
 800d782:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2200      	movs	r2, #0
 800d788:	f042 0201 	orr.w	r2, r2, #1
 800d78c:	711a      	strb	r2, [r3, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	715a      	strb	r2, [r3, #5]
 800d792:	2200      	movs	r2, #0
 800d794:	719a      	strb	r2, [r3, #6]
 800d796:	2200      	movs	r2, #0
 800d798:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800d79a:	78fa      	ldrb	r2, [r7, #3]
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d7a0:	f7f3 feb6 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d7a4:	f7f3 fe72 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800d7a8:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	b2db      	uxtb	r3, r3
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d7c2:	f7f3 fecb 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d7c6:	f7f3 fe55 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800d7ca:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 800d7d4:	701a      	strb	r2, [r3, #0]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	705a      	strb	r2, [r3, #1]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	709a      	strb	r2, [r3, #2]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f042 0203 	orr.w	r2, r2, #3
 800d7ea:	711a      	strb	r2, [r3, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	715a      	strb	r2, [r3, #5]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	719a      	strb	r2, [r3, #6]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 800d7f8:	783b      	ldrb	r3, [r7, #0]
 800d7fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	461a      	mov	r2, r3
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 800d806:	783b      	ldrb	r3, [r7, #0]
 800d808:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	461a      	mov	r2, r3
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 800d814:	783b      	ldrb	r3, [r7, #0]
 800d816:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	461a      	mov	r2, r3
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800d822:	f7f3 fe75 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d826:	f7f3 fe31 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800d82a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	b2db      	uxtb	r3, r3
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <otThreadSetNetworkKey>:
  return (otNetworkKeyRef)p_ot_req->Data[0];
}
#endif

otError otThreadSetNetworkKey(otInstance *aInstance, const otNetworkKey *aKey)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b084      	sub	sp, #16
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d844:	f7f3 fe8a 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d848:	f7f3 fe14 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800d84c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_KEY;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	f042 026f 	orr.w	r2, r2, #111	; 0x6f
 800d856:	701a      	strb	r2, [r3, #0]
 800d858:	2200      	movs	r2, #0
 800d85a:	705a      	strb	r2, [r3, #1]
 800d85c:	2200      	movs	r2, #0
 800d85e:	709a      	strb	r2, [r3, #2]
 800d860:	2200      	movs	r2, #0
 800d862:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2200      	movs	r2, #0
 800d868:	f042 0201 	orr.w	r2, r2, #1
 800d86c:	711a      	strb	r2, [r3, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	715a      	strb	r2, [r3, #5]
 800d872:	2200      	movs	r2, #0
 800d874:	719a      	strb	r2, [r3, #6]
 800d876:	2200      	movs	r2, #0
 800d878:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d880:	f7f3 fe46 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d884:	f7f3 fe02 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800d888:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	b2db      	uxtb	r3, r3
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d8a0:	f7f3 fe5c 	bl	800155c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d8a4:	f7f3 fde6 	bl	8001474 <THREAD_Get_OTCmdPayloadBuffer>
 800d8a8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f062 0279 	orn	r2, r2, #121	; 0x79
 800d8b2:	701a      	strb	r2, [r3, #0]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	705a      	strb	r2, [r3, #1]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	709a      	strb	r2, [r3, #2]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	711a      	strb	r2, [r3, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	715a      	strb	r2, [r3, #5]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	719a      	strb	r2, [r3, #6]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d8d2:	f7f3 fe1d 	bl	8001510 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d8d6:	f7f3 fdd9 	bl	800148c <THREAD_Get_OTCmdRspPayloadBuffer>
 800d8da:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	b2db      	uxtb	r3, r3
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}

0800d8ea <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800d8ee:	f7f4 f8bd 	bl	8001a6c <HW_IPCC_Enable>

  return;
 800d8f2:	bf00      	nop
}
 800d8f4:	bd80      	pop	{r7, pc}
	...

0800d8f8 <TL_Init>:


void TL_Init( void )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800d8fc:	4b10      	ldr	r3, [pc, #64]	; (800d940 <TL_Init+0x48>)
 800d8fe:	4a11      	ldr	r2, [pc, #68]	; (800d944 <TL_Init+0x4c>)
 800d900:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800d902:	4b0f      	ldr	r3, [pc, #60]	; (800d940 <TL_Init+0x48>)
 800d904:	4a10      	ldr	r2, [pc, #64]	; (800d948 <TL_Init+0x50>)
 800d906:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800d908:	4b0d      	ldr	r3, [pc, #52]	; (800d940 <TL_Init+0x48>)
 800d90a:	4a10      	ldr	r2, [pc, #64]	; (800d94c <TL_Init+0x54>)
 800d90c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800d90e:	4b0c      	ldr	r3, [pc, #48]	; (800d940 <TL_Init+0x48>)
 800d910:	4a0f      	ldr	r2, [pc, #60]	; (800d950 <TL_Init+0x58>)
 800d912:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800d914:	4b0a      	ldr	r3, [pc, #40]	; (800d940 <TL_Init+0x48>)
 800d916:	4a0f      	ldr	r2, [pc, #60]	; (800d954 <TL_Init+0x5c>)
 800d918:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800d91a:	4b09      	ldr	r3, [pc, #36]	; (800d940 <TL_Init+0x48>)
 800d91c:	4a0e      	ldr	r2, [pc, #56]	; (800d958 <TL_Init+0x60>)
 800d91e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800d920:	4b07      	ldr	r3, [pc, #28]	; (800d940 <TL_Init+0x48>)
 800d922:	4a0e      	ldr	r2, [pc, #56]	; (800d95c <TL_Init+0x64>)
 800d924:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800d926:	4b06      	ldr	r3, [pc, #24]	; (800d940 <TL_Init+0x48>)
 800d928:	4a0d      	ldr	r2, [pc, #52]	; (800d960 <TL_Init+0x68>)
 800d92a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800d92c:	4b04      	ldr	r3, [pc, #16]	; (800d940 <TL_Init+0x48>)
 800d92e:	4a0d      	ldr	r2, [pc, #52]	; (800d964 <TL_Init+0x6c>)
 800d930:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800d932:	4b03      	ldr	r3, [pc, #12]	; (800d940 <TL_Init+0x48>)
 800d934:	4a0c      	ldr	r2, [pc, #48]	; (800d968 <TL_Init+0x70>)
 800d936:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800d938:	f7f4 f8ac 	bl	8001a94 <HW_IPCC_Init>

  return;
 800d93c:	bf00      	nop
}
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	20030000 	.word	0x20030000
 800d944:	20030038 	.word	0x20030038
 800d948:	20030058 	.word	0x20030058
 800d94c:	20030068 	.word	0x20030068
 800d950:	20030078 	.word	0x20030078
 800d954:	20030080 	.word	0x20030080
 800d958:	20030088 	.word	0x20030088
 800d95c:	20030090 	.word	0x20030090
 800d960:	200300ac 	.word	0x200300ac
 800d964:	200300b0 	.word	0x200300b0
 800d968:	200300bc 	.word	0x200300bc

0800d96c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800d972:	e01c      	b.n	800d9ae <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800d974:	1d3b      	adds	r3, r7, #4
 800d976:	4619      	mov	r1, r3
 800d978:	4812      	ldr	r0, [pc, #72]	; (800d9c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800d97a:	f000 fb82 	bl	800e082 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	7a5b      	ldrb	r3, [r3, #9]
 800d982:	2b0f      	cmp	r3, #15
 800d984:	d003      	beq.n	800d98e <HW_IPCC_BLE_RxEvtNot+0x22>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	7a5b      	ldrb	r3, [r3, #9]
 800d98a:	2b0e      	cmp	r3, #14
 800d98c:	d105      	bne.n	800d99a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4619      	mov	r1, r3
 800d992:	2002      	movs	r0, #2
 800d994:	f000 f9b0 	bl	800dcf8 <OutputDbgTrace>
 800d998:	e004      	b.n	800d9a4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	4619      	mov	r1, r3
 800d99e:	2003      	movs	r0, #3
 800d9a0:	f000 f9aa 	bl	800dcf8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800d9a4:	4b08      	ldr	r3, [pc, #32]	; (800d9c8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	4610      	mov	r0, r2
 800d9ac:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d9ae:	4805      	ldr	r0, [pc, #20]	; (800d9c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800d9b0:	f000 fad8 	bl	800df64 <LST_is_empty>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d0dc      	beq.n	800d974 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800d9ba:	bf00      	nop
}
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	200300d8 	.word	0x200300d8
 800d9c8:	200062a8 	.word	0x200062a8

0800d9cc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800d9d0:	4b02      	ldr	r3, [pc, #8]	; (800d9dc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4798      	blx	r3

  return;
 800d9d6:	bf00      	nop
}
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	200062ac 	.word	0x200062ac

0800d9e0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800d9ec:	480d      	ldr	r0, [pc, #52]	; (800da24 <TL_SYS_Init+0x44>)
 800d9ee:	f000 faa9 	bl	800df44 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800d9f2:	4b0d      	ldr	r3, [pc, #52]	; (800da28 <TL_SYS_Init+0x48>)
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	689a      	ldr	r2, [r3, #8]
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	4a08      	ldr	r2, [pc, #32]	; (800da24 <TL_SYS_Init+0x44>)
 800da04:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800da06:	f7f4 f873 	bl	8001af0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4a07      	ldr	r2, [pc, #28]	; (800da2c <TL_SYS_Init+0x4c>)
 800da10:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	4a06      	ldr	r2, [pc, #24]	; (800da30 <TL_SYS_Init+0x50>)
 800da18:	6013      	str	r3, [r2, #0]

  return 0;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	200300e0 	.word	0x200300e0
 800da28:	20030000 	.word	0x20030000
 800da2c:	200062b0 	.word	0x200062b0
 800da30:	200062b4 	.word	0x200062b4

0800da34 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	460b      	mov	r3, r1
 800da3e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800da40:	4b09      	ldr	r3, [pc, #36]	; (800da68 <TL_SYS_SendCmd+0x34>)
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2210      	movs	r2, #16
 800da48:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800da4a:	4b07      	ldr	r3, [pc, #28]	; (800da68 <TL_SYS_SendCmd+0x34>)
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4619      	mov	r1, r3
 800da52:	2004      	movs	r0, #4
 800da54:	f000 f950 	bl	800dcf8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800da58:	f7f4 f854 	bl	8001b04 <HW_IPCC_SYS_SendCmd>

  return 0;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	20030000 	.word	0x20030000

0800da6c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800da70:	4b07      	ldr	r3, [pc, #28]	; (800da90 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4619      	mov	r1, r3
 800da78:	2005      	movs	r0, #5
 800da7a:	f000 f93d 	bl	800dcf8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800da7e:	4b05      	ldr	r3, [pc, #20]	; (800da94 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a03      	ldr	r2, [pc, #12]	; (800da90 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800da84:	68d2      	ldr	r2, [r2, #12]
 800da86:	6812      	ldr	r2, [r2, #0]
 800da88:	4610      	mov	r0, r2
 800da8a:	4798      	blx	r3

  return;
 800da8c:	bf00      	nop
}
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	20030000 	.word	0x20030000
 800da94:	200062b0 	.word	0x200062b0

0800da98 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800da9e:	e00e      	b.n	800dabe <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800daa0:	1d3b      	adds	r3, r7, #4
 800daa2:	4619      	mov	r1, r3
 800daa4:	480b      	ldr	r0, [pc, #44]	; (800dad4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800daa6:	f000 faec 	bl	800e082 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4619      	mov	r1, r3
 800daae:	2006      	movs	r0, #6
 800dab0:	f000 f922 	bl	800dcf8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800dab4:	4b08      	ldr	r3, [pc, #32]	; (800dad8 <HW_IPCC_SYS_EvtNot+0x40>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	4610      	mov	r0, r2
 800dabc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800dabe:	4805      	ldr	r0, [pc, #20]	; (800dad4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800dac0:	f000 fa50 	bl	800df64 <LST_is_empty>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d0ea      	beq.n	800daa0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800daca:	bf00      	nop
}
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	200300e0 	.word	0x200300e0
 800dad8:	200062b4 	.word	0x200062b4

0800dadc <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800dae4:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <TL_THREAD_Init+0x3c>)
 800dae6:	689b      	ldr	r3, [r3, #8]
 800dae8:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	689a      	ldr	r2, [r3, #8]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	68da      	ldr	r2, [r3, #12]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800db0a:	f7f4 f821 	bl	8001b50 <HW_IPCC_THREAD_Init>

  return;
 800db0e:	bf00      	nop
}
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	20030000 	.word	0x20030000

0800db1c <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800db20:	4b04      	ldr	r3, [pc, #16]	; (800db34 <TL_OT_SendCmd+0x18>)
 800db22:	689b      	ldr	r3, [r3, #8]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	2208      	movs	r2, #8
 800db28:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800db2a:	f7f4 f81f 	bl	8001b6c <HW_IPCC_OT_SendCmd>

  return;
 800db2e:	bf00      	nop
}
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	20030000 	.word	0x20030000

0800db38 <TL_THREAD_SendAck>:

  return;
}

void TL_THREAD_SendAck ( void )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800db3c:	4b04      	ldr	r3, [pc, #16]	; (800db50 <TL_THREAD_SendAck+0x18>)
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	220d      	movs	r2, #13
 800db44:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800db46:	f7f4 f81f 	bl	8001b88 <HW_IPCC_THREAD_SendAck>

  return;
 800db4a:	bf00      	nop
}
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	20030000 	.word	0x20030000

0800db54 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800db54:	b580      	push	{r7, lr}
 800db56:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800db58:	4b04      	ldr	r3, [pc, #16]	; (800db6c <TL_THREAD_CliSendAck+0x18>)
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	220d      	movs	r2, #13
 800db60:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800db62:	f7f4 f81f 	bl	8001ba4 <HW_IPCC_THREAD_CliSendAck>

  return;
 800db66:	bf00      	nop
}
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	20030000 	.word	0x20030000

0800db70 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800db74:	4b03      	ldr	r3, [pc, #12]	; (800db84 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	4618      	mov	r0, r3
 800db7c:	f7f3 fcce 	bl	800151c <TL_OT_CmdEvtReceived>

  return;
 800db80:	bf00      	nop
}
 800db82:	bd80      	pop	{r7, pc}
 800db84:	20030000 	.word	0x20030000

0800db88 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800db8c:	4b03      	ldr	r3, [pc, #12]	; (800db9c <HW_IPCC_THREAD_EvtNot+0x14>)
 800db8e:	689b      	ldr	r3, [r3, #8]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4618      	mov	r0, r3
 800db94:	f7f3 fcd2 	bl	800153c <TL_THREAD_NotReceived>

  return;
 800db98:	bf00      	nop
}
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	20030000 	.word	0x20030000

0800dba0 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800dba4:	4b03      	ldr	r3, [pc, #12]	; (800dbb4 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800dba6:	689b      	ldr	r3, [r3, #8]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7f3 fd5c 	bl	8001668 <TL_THREAD_CliNotReceived>

  return;
 800dbb0:	bf00      	nop
}
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	20030000 	.word	0x20030000

0800dbb8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800dbc0:	4817      	ldr	r0, [pc, #92]	; (800dc20 <TL_MM_Init+0x68>)
 800dbc2:	f000 f9bf 	bl	800df44 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800dbc6:	4817      	ldr	r0, [pc, #92]	; (800dc24 <TL_MM_Init+0x6c>)
 800dbc8:	f000 f9bc 	bl	800df44 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800dbcc:	4b16      	ldr	r3, [pc, #88]	; (800dc28 <TL_MM_Init+0x70>)
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	4a16      	ldr	r2, [pc, #88]	; (800dc2c <TL_MM_Init+0x74>)
 800dbd2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800dbd4:	4b15      	ldr	r3, [pc, #84]	; (800dc2c <TL_MM_Init+0x74>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	6892      	ldr	r2, [r2, #8]
 800dbdc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800dbde:	4b13      	ldr	r3, [pc, #76]	; (800dc2c <TL_MM_Init+0x74>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	68d2      	ldr	r2, [r2, #12]
 800dbe6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800dbe8:	4b10      	ldr	r3, [pc, #64]	; (800dc2c <TL_MM_Init+0x74>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a0c      	ldr	r2, [pc, #48]	; (800dc20 <TL_MM_Init+0x68>)
 800dbee:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800dbf0:	4b0e      	ldr	r3, [pc, #56]	; (800dc2c <TL_MM_Init+0x74>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	6812      	ldr	r2, [r2, #0]
 800dbf8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800dbfa:	4b0c      	ldr	r3, [pc, #48]	; (800dc2c <TL_MM_Init+0x74>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	6852      	ldr	r2, [r2, #4]
 800dc02:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800dc04:	4b09      	ldr	r3, [pc, #36]	; (800dc2c <TL_MM_Init+0x74>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	6912      	ldr	r2, [r2, #16]
 800dc0c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800dc0e:	4b07      	ldr	r3, [pc, #28]	; (800dc2c <TL_MM_Init+0x74>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	6952      	ldr	r2, [r2, #20]
 800dc16:	619a      	str	r2, [r3, #24]

  return;
 800dc18:	bf00      	nop
}
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	200300c8 	.word	0x200300c8
 800dc24:	200062a0 	.word	0x200062a0
 800dc28:	20030000 	.word	0x20030000
 800dc2c:	200062b8 	.word	0x200062b8

0800dc30 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800dc38:	6879      	ldr	r1, [r7, #4]
 800dc3a:	4807      	ldr	r0, [pc, #28]	; (800dc58 <TL_MM_EvtDone+0x28>)
 800dc3c:	f000 f9da 	bl	800dff4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800dc40:	6879      	ldr	r1, [r7, #4]
 800dc42:	2000      	movs	r0, #0
 800dc44:	f000 f858 	bl	800dcf8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800dc48:	4804      	ldr	r0, [pc, #16]	; (800dc5c <TL_MM_EvtDone+0x2c>)
 800dc4a:	f7f3 ffdd 	bl	8001c08 <HW_IPCC_MM_SendFreeBuf>

  return;
 800dc4e:	bf00      	nop
}
 800dc50:	3708      	adds	r7, #8
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	200062a0 	.word	0x200062a0
 800dc5c:	0800dc61 	.word	0x0800dc61

0800dc60 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800dc66:	e00c      	b.n	800dc82 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800dc68:	1d3b      	adds	r3, r7, #4
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	480a      	ldr	r0, [pc, #40]	; (800dc98 <SendFreeBuf+0x38>)
 800dc6e:	f000 fa08 	bl	800e082 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800dc72:	4b0a      	ldr	r3, [pc, #40]	; (800dc9c <SendFreeBuf+0x3c>)
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	687a      	ldr	r2, [r7, #4]
 800dc7a:	4611      	mov	r1, r2
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f000 f9b9 	bl	800dff4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800dc82:	4805      	ldr	r0, [pc, #20]	; (800dc98 <SendFreeBuf+0x38>)
 800dc84:	f000 f96e 	bl	800df64 <LST_is_empty>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d0ec      	beq.n	800dc68 <SendFreeBuf+0x8>
  }

  return;
 800dc8e:	bf00      	nop
}
 800dc90:	3708      	adds	r7, #8
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	200062a0 	.word	0x200062a0
 800dc9c:	20030000 	.word	0x20030000

0800dca0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800dca4:	4805      	ldr	r0, [pc, #20]	; (800dcbc <TL_TRACES_Init+0x1c>)
 800dca6:	f000 f94d 	bl	800df44 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800dcaa:	4b05      	ldr	r3, [pc, #20]	; (800dcc0 <TL_TRACES_Init+0x20>)
 800dcac:	695b      	ldr	r3, [r3, #20]
 800dcae:	4a03      	ldr	r2, [pc, #12]	; (800dcbc <TL_TRACES_Init+0x1c>)
 800dcb0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800dcb2:	f7f3 ffdf 	bl	8001c74 <HW_IPCC_TRACES_Init>

  return;
 800dcb6:	bf00      	nop
}
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	200300d0 	.word	0x200300d0
 800dcc0:	20030000 	.word	0x20030000

0800dcc4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800dcca:	e008      	b.n	800dcde <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800dccc:	1d3b      	adds	r3, r7, #4
 800dcce:	4619      	mov	r1, r3
 800dcd0:	4808      	ldr	r0, [pc, #32]	; (800dcf4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800dcd2:	f000 f9d6 	bl	800e082 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7f4 fb5d 	bl	8002398 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800dcde:	4805      	ldr	r0, [pc, #20]	; (800dcf4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800dce0:	f000 f940 	bl	800df64 <LST_is_empty>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d0f0      	beq.n	800dccc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800dcea:	bf00      	nop
}
 800dcec:	3708      	adds	r7, #8
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	200300d0 	.word	0x200300d0

0800dcf8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b085      	sub	sp, #20
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	6039      	str	r1, [r7, #0]
 800dd02:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800dd04:	79fb      	ldrb	r3, [r7, #7]
 800dd06:	2b06      	cmp	r3, #6
 800dd08:	d845      	bhi.n	800dd96 <OutputDbgTrace+0x9e>
 800dd0a:	a201      	add	r2, pc, #4	; (adr r2, 800dd10 <OutputDbgTrace+0x18>)
 800dd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd10:	0800dd2d 	.word	0x0800dd2d
 800dd14:	0800dd51 	.word	0x0800dd51
 800dd18:	0800dd57 	.word	0x0800dd57
 800dd1c:	0800dd6b 	.word	0x0800dd6b
 800dd20:	0800dd77 	.word	0x0800dd77
 800dd24:	0800dd7d 	.word	0x0800dd7d
 800dd28:	0800dd8b 	.word	0x0800dd8b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	7a5b      	ldrb	r3, [r3, #9]
 800dd34:	2bff      	cmp	r3, #255	; 0xff
 800dd36:	d005      	beq.n	800dd44 <OutputDbgTrace+0x4c>
 800dd38:	2bff      	cmp	r3, #255	; 0xff
 800dd3a:	dc05      	bgt.n	800dd48 <OutputDbgTrace+0x50>
 800dd3c:	2b0e      	cmp	r3, #14
 800dd3e:	d005      	beq.n	800dd4c <OutputDbgTrace+0x54>
 800dd40:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800dd42:	e001      	b.n	800dd48 <OutputDbgTrace+0x50>
          break;
 800dd44:	bf00      	nop
 800dd46:	e027      	b.n	800dd98 <OutputDbgTrace+0xa0>
          break;
 800dd48:	bf00      	nop
 800dd4a:	e025      	b.n	800dd98 <OutputDbgTrace+0xa0>
          break;
 800dd4c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800dd4e:	e023      	b.n	800dd98 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800dd54:	e020      	b.n	800dd98 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	7a5b      	ldrb	r3, [r3, #9]
 800dd5e:	2b0e      	cmp	r3, #14
 800dd60:	d001      	beq.n	800dd66 <OutputDbgTrace+0x6e>
 800dd62:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800dd64:	e000      	b.n	800dd68 <OutputDbgTrace+0x70>
          break;
 800dd66:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800dd68:	e016      	b.n	800dd98 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	7a5b      	ldrb	r3, [r3, #9]
 800dd72:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800dd74:	e010      	b.n	800dd98 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800dd7a:	e00d      	b.n	800dd98 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	7a5b      	ldrb	r3, [r3, #9]
 800dd84:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800dd86:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800dd88:	e006      	b.n	800dd98 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	7a5b      	ldrb	r3, [r3, #9]
 800dd92:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800dd94:	e000      	b.n	800dd98 <OutputDbgTrace+0xa0>

    default:
      break;
 800dd96:	bf00      	nop
  }

  return;
 800dd98:	bf00      	nop
}
 800dd9a:	3714      	adds	r7, #20
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ddae:	4b0f      	ldr	r3, [pc, #60]	; (800ddec <OTP_Read+0x48>)
 800ddb0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ddb2:	e002      	b.n	800ddba <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	3b08      	subs	r3, #8
 800ddb8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	3307      	adds	r3, #7
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	79fa      	ldrb	r2, [r7, #7]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d003      	beq.n	800ddce <OTP_Read+0x2a>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	4a09      	ldr	r2, [pc, #36]	; (800ddf0 <OTP_Read+0x4c>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d1f2      	bne.n	800ddb4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	3307      	adds	r3, #7
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	79fa      	ldrb	r2, [r7, #7]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d001      	beq.n	800ddde <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ddda:	2300      	movs	r3, #0
 800dddc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ddde:	68fb      	ldr	r3, [r7, #12]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3714      	adds	r7, #20
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr
 800ddec:	1fff73f8 	.word	0x1fff73f8
 800ddf0:	1fff7000 	.word	0x1fff7000

0800ddf4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ddf8:	4b05      	ldr	r3, [pc, #20]	; (800de10 <UTIL_LPM_Init+0x1c>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ddfe:	4b05      	ldr	r3, [pc, #20]	; (800de14 <UTIL_LPM_Init+0x20>)
 800de00:	2200      	movs	r2, #0
 800de02:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800de04:	bf00      	nop
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	200062bc 	.word	0x200062bc
 800de14:	200062c0 	.word	0x200062c0

0800de18 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800de18:	b480      	push	{r7}
 800de1a:	b087      	sub	sp, #28
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	460b      	mov	r3, r1
 800de22:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de24:	f3ef 8310 	mrs	r3, PRIMASK
 800de28:	613b      	str	r3, [r7, #16]
  return(result);
 800de2a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800de2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800de2e:	b672      	cpsid	i
}
 800de30:	bf00      	nop
  
  switch( state )
 800de32:	78fb      	ldrb	r3, [r7, #3]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d008      	beq.n	800de4a <UTIL_LPM_SetStopMode+0x32>
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d10e      	bne.n	800de5a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800de3c:	4b0d      	ldr	r3, [pc, #52]	; (800de74 <UTIL_LPM_SetStopMode+0x5c>)
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4313      	orrs	r3, r2
 800de44:	4a0b      	ldr	r2, [pc, #44]	; (800de74 <UTIL_LPM_SetStopMode+0x5c>)
 800de46:	6013      	str	r3, [r2, #0]
      break;
 800de48:	e008      	b.n	800de5c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	43da      	mvns	r2, r3
 800de4e:	4b09      	ldr	r3, [pc, #36]	; (800de74 <UTIL_LPM_SetStopMode+0x5c>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	4013      	ands	r3, r2
 800de54:	4a07      	ldr	r2, [pc, #28]	; (800de74 <UTIL_LPM_SetStopMode+0x5c>)
 800de56:	6013      	str	r3, [r2, #0]
      break;
 800de58:	e000      	b.n	800de5c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800de5a:	bf00      	nop
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f383 8810 	msr	PRIMASK, r3
}
 800de66:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800de68:	bf00      	nop
 800de6a:	371c      	adds	r7, #28
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr
 800de74:	200062bc 	.word	0x200062bc

0800de78 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800de78:	b480      	push	{r7}
 800de7a:	b087      	sub	sp, #28
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	460b      	mov	r3, r1
 800de82:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de84:	f3ef 8310 	mrs	r3, PRIMASK
 800de88:	613b      	str	r3, [r7, #16]
  return(result);
 800de8a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800de8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800de8e:	b672      	cpsid	i
}
 800de90:	bf00      	nop
  
  switch(state)
 800de92:	78fb      	ldrb	r3, [r7, #3]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d008      	beq.n	800deaa <UTIL_LPM_SetOffMode+0x32>
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d10e      	bne.n	800deba <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800de9c:	4b0d      	ldr	r3, [pc, #52]	; (800ded4 <UTIL_LPM_SetOffMode+0x5c>)
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	4a0b      	ldr	r2, [pc, #44]	; (800ded4 <UTIL_LPM_SetOffMode+0x5c>)
 800dea6:	6013      	str	r3, [r2, #0]
      break;
 800dea8:	e008      	b.n	800debc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	43da      	mvns	r2, r3
 800deae:	4b09      	ldr	r3, [pc, #36]	; (800ded4 <UTIL_LPM_SetOffMode+0x5c>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4013      	ands	r3, r2
 800deb4:	4a07      	ldr	r2, [pc, #28]	; (800ded4 <UTIL_LPM_SetOffMode+0x5c>)
 800deb6:	6013      	str	r3, [r2, #0]
      break;
 800deb8:	e000      	b.n	800debc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800deba:	bf00      	nop
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f383 8810 	msr	PRIMASK, r3
}
 800dec6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800dec8:	bf00      	nop
 800deca:	371c      	adds	r7, #28
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr
 800ded4:	200062c0 	.word	0x200062c0

0800ded8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dede:	f3ef 8310 	mrs	r3, PRIMASK
 800dee2:	60bb      	str	r3, [r7, #8]
  return(result);
 800dee4:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800dee6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800dee8:	b672      	cpsid	i
}
 800deea:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800deec:	4b12      	ldr	r3, [pc, #72]	; (800df38 <UTIL_LPM_EnterLowPower+0x60>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d006      	beq.n	800df02 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800def4:	4b11      	ldr	r3, [pc, #68]	; (800df3c <UTIL_LPM_EnterLowPower+0x64>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800defa:	4b10      	ldr	r3, [pc, #64]	; (800df3c <UTIL_LPM_EnterLowPower+0x64>)
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	4798      	blx	r3
 800df00:	e010      	b.n	800df24 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800df02:	4b0f      	ldr	r3, [pc, #60]	; (800df40 <UTIL_LPM_EnterLowPower+0x68>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d006      	beq.n	800df18 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800df0a:	4b0c      	ldr	r3, [pc, #48]	; (800df3c <UTIL_LPM_EnterLowPower+0x64>)
 800df0c:	689b      	ldr	r3, [r3, #8]
 800df0e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800df10:	4b0a      	ldr	r3, [pc, #40]	; (800df3c <UTIL_LPM_EnterLowPower+0x64>)
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	4798      	blx	r3
 800df16:	e005      	b.n	800df24 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800df18:	4b08      	ldr	r3, [pc, #32]	; (800df3c <UTIL_LPM_EnterLowPower+0x64>)
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800df1e:	4b07      	ldr	r3, [pc, #28]	; (800df3c <UTIL_LPM_EnterLowPower+0x64>)
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	4798      	blx	r3
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f383 8810 	msr	PRIMASK, r3
}
 800df2e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800df30:	bf00      	nop
 800df32:	3710      	adds	r7, #16
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	200062bc 	.word	0x200062bc
 800df3c:	0800e7d0 	.word	0x0800e7d0
 800df40:	200062c0 	.word	0x200062c0

0800df44 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	605a      	str	r2, [r3, #4]
}
 800df58:	bf00      	nop
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800df64:	b480      	push	{r7}
 800df66:	b087      	sub	sp, #28
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df6c:	f3ef 8310 	mrs	r3, PRIMASK
 800df70:	60fb      	str	r3, [r7, #12]
  return(result);
 800df72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800df74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800df76:	b672      	cpsid	i
}
 800df78:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	687a      	ldr	r2, [r7, #4]
 800df80:	429a      	cmp	r2, r3
 800df82:	d102      	bne.n	800df8a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800df84:	2301      	movs	r3, #1
 800df86:	75fb      	strb	r3, [r7, #23]
 800df88:	e001      	b.n	800df8e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800df8a:	2300      	movs	r3, #0
 800df8c:	75fb      	strb	r3, [r7, #23]
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	f383 8810 	msr	PRIMASK, r3
}
 800df98:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800df9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	371c      	adds	r7, #28
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b087      	sub	sp, #28
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfb2:	f3ef 8310 	mrs	r3, PRIMASK
 800dfb6:	60fb      	str	r3, [r7, #12]
  return(result);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dfba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dfbc:	b672      	cpsid	i
}
 800dfbe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	683a      	ldr	r2, [r7, #0]
 800dfd2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	683a      	ldr	r2, [r7, #0]
 800dfda:	605a      	str	r2, [r3, #4]
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	f383 8810 	msr	PRIMASK, r3
}
 800dfe6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dfe8:	bf00      	nop
 800dfea:	371c      	adds	r7, #28
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b087      	sub	sp, #28
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dffe:	f3ef 8310 	mrs	r3, PRIMASK
 800e002:	60fb      	str	r3, [r7, #12]
  return(result);
 800e004:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e006:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e008:	b672      	cpsid	i
}
 800e00a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	685a      	ldr	r2, [r3, #4]
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	683a      	ldr	r2, [r7, #0]
 800e01e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	683a      	ldr	r2, [r7, #0]
 800e026:	601a      	str	r2, [r3, #0]
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	f383 8810 	msr	PRIMASK, r3
}
 800e032:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e034:	bf00      	nop
 800e036:	371c      	adds	r7, #28
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e040:	b480      	push	{r7}
 800e042:	b087      	sub	sp, #28
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e048:	f3ef 8310 	mrs	r3, PRIMASK
 800e04c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e04e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e050:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e052:	b672      	cpsid	i
}
 800e054:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	6812      	ldr	r2, [r2, #0]
 800e05e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	6852      	ldr	r2, [r2, #4]
 800e068:	605a      	str	r2, [r3, #4]
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	f383 8810 	msr	PRIMASK, r3
}
 800e074:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e076:	bf00      	nop
 800e078:	371c      	adds	r7, #28
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b086      	sub	sp, #24
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e08c:	f3ef 8310 	mrs	r3, PRIMASK
 800e090:	60fb      	str	r3, [r7, #12]
  return(result);
 800e092:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e094:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e096:	b672      	cpsid	i
}
 800e098:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7ff ffca 	bl	800e040 <LST_remove_node>
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	f383 8810 	msr	PRIMASK, r3
}
 800e0b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e0b8:	bf00      	nop
 800e0ba:	3718      	adds	r7, #24
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <__libc_init_array>:
 800e0c0:	b570      	push	{r4, r5, r6, lr}
 800e0c2:	4d0d      	ldr	r5, [pc, #52]	; (800e0f8 <__libc_init_array+0x38>)
 800e0c4:	4c0d      	ldr	r4, [pc, #52]	; (800e0fc <__libc_init_array+0x3c>)
 800e0c6:	1b64      	subs	r4, r4, r5
 800e0c8:	10a4      	asrs	r4, r4, #2
 800e0ca:	2600      	movs	r6, #0
 800e0cc:	42a6      	cmp	r6, r4
 800e0ce:	d109      	bne.n	800e0e4 <__libc_init_array+0x24>
 800e0d0:	4d0b      	ldr	r5, [pc, #44]	; (800e100 <__libc_init_array+0x40>)
 800e0d2:	4c0c      	ldr	r4, [pc, #48]	; (800e104 <__libc_init_array+0x44>)
 800e0d4:	f000 f82e 	bl	800e134 <_init>
 800e0d8:	1b64      	subs	r4, r4, r5
 800e0da:	10a4      	asrs	r4, r4, #2
 800e0dc:	2600      	movs	r6, #0
 800e0de:	42a6      	cmp	r6, r4
 800e0e0:	d105      	bne.n	800e0ee <__libc_init_array+0x2e>
 800e0e2:	bd70      	pop	{r4, r5, r6, pc}
 800e0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0e8:	4798      	blx	r3
 800e0ea:	3601      	adds	r6, #1
 800e0ec:	e7ee      	b.n	800e0cc <__libc_init_array+0xc>
 800e0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0f2:	4798      	blx	r3
 800e0f4:	3601      	adds	r6, #1
 800e0f6:	e7f2      	b.n	800e0de <__libc_init_array+0x1e>
 800e0f8:	0800e890 	.word	0x0800e890
 800e0fc:	0800e890 	.word	0x0800e890
 800e100:	0800e890 	.word	0x0800e890
 800e104:	0800e894 	.word	0x0800e894

0800e108 <memcpy>:
 800e108:	440a      	add	r2, r1
 800e10a:	4291      	cmp	r1, r2
 800e10c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e110:	d100      	bne.n	800e114 <memcpy+0xc>
 800e112:	4770      	bx	lr
 800e114:	b510      	push	{r4, lr}
 800e116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e11a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e11e:	4291      	cmp	r1, r2
 800e120:	d1f9      	bne.n	800e116 <memcpy+0xe>
 800e122:	bd10      	pop	{r4, pc}

0800e124 <memset>:
 800e124:	4402      	add	r2, r0
 800e126:	4603      	mov	r3, r0
 800e128:	4293      	cmp	r3, r2
 800e12a:	d100      	bne.n	800e12e <memset+0xa>
 800e12c:	4770      	bx	lr
 800e12e:	f803 1b01 	strb.w	r1, [r3], #1
 800e132:	e7f9      	b.n	800e128 <memset+0x4>

0800e134 <_init>:
 800e134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e136:	bf00      	nop
 800e138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e13a:	bc08      	pop	{r3}
 800e13c:	469e      	mov	lr, r3
 800e13e:	4770      	bx	lr

0800e140 <_fini>:
 800e140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e142:	bf00      	nop
 800e144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e146:	bc08      	pop	{r3}
 800e148:	469e      	mov	lr, r3
 800e14a:	4770      	bx	lr
