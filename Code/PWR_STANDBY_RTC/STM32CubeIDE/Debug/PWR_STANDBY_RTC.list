
PWR_STANDBY_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d5c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000008  08002f54  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000048  20000020  08002f6c  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000068  08002f6c  00020068  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000ccc8  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0000c2c1  00000000  00000000  0002cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000204a  00000000  00000000  00038fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001130  00000000  00000000  0003b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000d45ff  00000000  00000000  0003c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001048  00000000  00000000  00110758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00020ca5  00000000  00000000  001117a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00132445  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004640  00000000  00000000  00132498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	08002e80 	.word	0x08002e80

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	08002e80 	.word	0x08002e80

0800017c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800017c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800017e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000180:	3304      	adds	r3, #4

08000182 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000182:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000184:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000186:	d3f9      	bcc.n	800017c <CopyDataInit>
  bx lr
 8000188:	4770      	bx	lr

0800018a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800018a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800018c:	3004      	adds	r0, #4

0800018e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800018e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000190:	d3fb      	bcc.n	800018a <FillZerobss>
  bx lr
 8000192:	4770      	bx	lr

08000194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000194:	480c      	ldr	r0, [pc, #48]	; (80001c8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000196:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000198:	f000 fa9a 	bl	80006d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800019c:	480b      	ldr	r0, [pc, #44]	; (80001cc <LoopForever+0x8>)
 800019e:	490c      	ldr	r1, [pc, #48]	; (80001d0 <LoopForever+0xc>)
 80001a0:	4a0c      	ldr	r2, [pc, #48]	; (80001d4 <LoopForever+0x10>)
 80001a2:	2300      	movs	r3, #0
 80001a4:	f7ff ffed 	bl	8000182 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80001a8:	480b      	ldr	r0, [pc, #44]	; (80001d8 <LoopForever+0x14>)
 80001aa:	490c      	ldr	r1, [pc, #48]	; (80001dc <LoopForever+0x18>)
 80001ac:	2300      	movs	r3, #0
 80001ae:	f7ff ffee 	bl	800018e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001b2:	480b      	ldr	r0, [pc, #44]	; (80001e0 <LoopForever+0x1c>)
 80001b4:	490b      	ldr	r1, [pc, #44]	; (80001e4 <LoopForever+0x20>)
 80001b6:	2300      	movs	r3, #0
 80001b8:	f7ff ffe9 	bl	800018e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001bc:	f002 fe34 	bl	8002e28 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001c0:	f000 f852 	bl	8000268 <main>

080001c4 <LoopForever>:

LoopForever:
  b LoopForever
 80001c4:	e7fe      	b.n	80001c4 <LoopForever>
 80001c6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80001c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08002f54 	.word	0x08002f54
  INIT_BSS _sbss, _ebss
 80001d8:	20000020 	.word	0x20000020
 80001dc:	20000068 	.word	0x20000068
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001e0:	20030000 	.word	0x20030000
 80001e4:	20030000 	.word	0x20030000

080001e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001e8:	e7fe      	b.n	80001e8 <ADC1_IRQHandler>
	...

080001ec <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <LL_C2_PWR_SetPowerMode+0x28>)
 80001f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001fa:	f023 0207 	bic.w	r2, r3, #7
 80001fe:	4905      	ldr	r1, [pc, #20]	; (8000214 <LL_C2_PWR_SetPowerMode+0x28>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4313      	orrs	r3, r2
 8000204:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	58000400 	.word	0x58000400

08000218 <LL_PWR_IsActiveFlag_C1SB>:
  * @brief  Get system standby flag for CPU1
  * @rmtoll EXTSCR       C1SBF         LL_PWR_IsActiveFlag_C1SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C1SB(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1SBF) == (PWR_EXTSCR_C1SBF)) ? 1UL : 0UL);
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <LL_PWR_IsActiveFlag_C1SB+0x24>)
 800021e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800022a:	d101      	bne.n	8000230 <LL_PWR_IsActiveFlag_C1SB+0x18>
 800022c:	2301      	movs	r3, #1
 800022e:	e000      	b.n	8000232 <LL_PWR_IsActiveFlag_C1SB+0x1a>
 8000230:	2300      	movs	r3, #0
}
 8000232:	4618      	mov	r0, r3
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	58000400 	.word	0x58000400

08000240 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8000246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800024a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800024e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000252:	d101      	bne.n	8000258 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8000254:	2301      	movs	r3, #1
 8000256:	e000      	b.n	800025a <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8000258:	2300      	movs	r3, #0
}
 800025a:	4618      	mov	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	58000400 	.word	0x58000400

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fa86 	bl	800077c <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f848 	bl	8000304 <SystemClock_Config>
  /* Note: On STM32WB, both CPU1 and CPU2 must be in low-power mode
           to set the entire System in low-power mode, corresponding to
           the deepest low-power mode possible.
           For example, CPU1 in Standby mode and CPU2 in Shutdown mode 
           will make system enter in Standby mode. */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000274:	2004      	movs	r0, #4
 8000276:	f7ff ffb9 	bl	80001ec <LL_C2_PWR_SetPowerMode>

  /* Configure LED2, LED3 */
  BSP_LED_Init(LED2);
 800027a:	2001      	movs	r0, #1
 800027c:	f000 f9ba 	bl	80005f4 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000280:	2002      	movs	r0, #2
 8000282:	f000 f9b7 	bl	80005f4 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 8000286:	f000 f89f 	bl	80003c8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* Check if the system was resumed from StandBy mode */
  /* Note: On STM32WB, both CPU1 and CPU2 must be in standby mode to set the entire system in standby mode */
  if(   (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800028a:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <main+0x94>)
 800028c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00e      	beq.n	80002b6 <main+0x4e>
     && (__HAL_PWR_GET_FLAG(PWR_FLAG_C2SB) != RESET)
 8000298:	4b18      	ldr	r3, [pc, #96]	; (80002fc <main+0x94>)
 800029a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800029e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d007      	beq.n	80002b6 <main+0x4e>
    )
  {
    /* Clear Standby flag */
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); 
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <main+0x94>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_C2SB);
 80002ae:	4b13      	ldr	r3, [pc, #76]	; (80002fc <main+0x94>)
 80002b0:	2202      	movs	r2, #2
 80002b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }
  
  /* Insert 5 seconds delay */
  HAL_Delay(5000);
 80002b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80002ba:	f000 fae5 	bl	8000888 <HAL_Delay>
    - Clear all related wakeup flags, 
    - Re-enable all used wakeup sources,
    - Enter the Standby mode.
  */
  /* Disable all used wakeup sources*/
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80002be:	4810      	ldr	r0, [pc, #64]	; (8000300 <main+0x98>)
 80002c0:	f002 fd24 	bl	8002d0c <HAL_RTCEx_DeactivateWakeUpTimer>
  
  /* Clear all related wakeup flags */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <main+0x94>)
 80002c6:	221f      	movs	r2, #31
 80002c8:	619a      	str	r2, [r3, #24]
    To configure the wake up timer to 33s the WakeUpCounter is set to 0xFFFF:
    Wakeup Time Base = 16 /(~32 kHz RC) = ~0.5 ms
    Wakeup Time = 0.5 ms  * WakeUpCounter
    Therefore, with wake-up counter =  0xFFFF  = 65,535 
       Wakeup Time =  0.5 ms *  65,535 = ~ 33 sec. */
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80002ca:	2200      	movs	r2, #0
 80002cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <main+0x98>)
 80002d2:	f002 fc5f 	bl	8002b94 <HAL_RTCEx_SetWakeUpTimer_IT>
  /*         In case of system is resumed from low-power mode standby         */
  /*         or shutdown, configuration of PWR parameters related to CPU2 are */
  /*         retained and must not be modified (This check is required in     */
  /*         case of RF stack started afterwards and not to overwritte its    */
  /*         low-power configuration).                                        */
  if(   (LL_PWR_IsActiveFlag_C1SB() == 0)
 80002d6:	f7ff ff9f 	bl	8000218 <LL_PWR_IsActiveFlag_C1SB>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d004      	beq.n	80002ea <main+0x82>
     || (LL_PWR_IsActiveFlag_C2SB() == 0)
 80002e0:	f7ff ffae 	bl	8000240 <LL_PWR_IsActiveFlag_C2SB>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d102      	bne.n	80002f0 <main+0x88>
    )
  {
    /* Set the lowest low-power mode for CPU2: shutdown mode */
    LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80002ea:	2004      	movs	r0, #4
 80002ec:	f7ff ff7e 	bl	80001ec <LL_C2_PWR_SetPowerMode>
  }

  /* Enter the Standby mode */
  HAL_PWR_EnterSTANDBYMode();
 80002f0:	f000 fdb6 	bl	8000e60 <HAL_PWR_EnterSTANDBYMode>
  
  /* Program should never reach this point (program restart when exiting from standby mode) */
  Error_Handler(); 
 80002f4:	f000 f8a6 	bl	8000444 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <main+0x90>
 80002fa:	bf00      	nop
 80002fc:	58000400 	.word	0x58000400
 8000300:	2000003c 	.word	0x2000003c

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b09a      	sub	sp, #104	; 0x68
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0320 	add.w	r3, r7, #32
 800030e:	2248      	movs	r2, #72	; 0x48
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f002 fdac 	bl	8002e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]
 8000326:	615a      	str	r2, [r3, #20]
 8000328:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800032a:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <SystemClock_Config+0xc0>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000332:	4a24      	ldr	r2, [pc, #144]	; (80003c4 <SystemClock_Config+0xc0>)
 8000334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000338:	6013      	str	r3, [r2, #0]
 800033a:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <SystemClock_Config+0xc0>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000342:	603b      	str	r3, [r7, #0]
 8000344:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000346:	2320      	movs	r3, #32
 8000348:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800034e:	2300      	movs	r3, #0
 8000350:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000352:	2360      	movs	r3, #96	; 0x60
 8000354:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000356:	2302      	movs	r3, #2
 8000358:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800035a:	2301      	movs	r3, #1
 800035c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000362:	2320      	movs	r3, #32
 8000364:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000366:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800036a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800036c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000370:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000372:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000376:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0320 	add.w	r3, r7, #32
 800037c:	4618      	mov	r0, r3
 800037e:	f001 f8fb 	bl	8001578 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000388:	f000 f85c 	bl	8000444 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800038c:	236f      	movs	r3, #111	; 0x6f
 800038e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000390:	2303      	movs	r3, #3
 8000392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2103      	movs	r1, #3
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 fc57 	bl	8001c60 <HAL_RCC_ClockConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80003b8:	f000 f844 	bl	8000444 <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3768      	adds	r7, #104	; 0x68
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	58000400 	.word	0x58000400

080003c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <MX_RTC_Init+0x48>)
 80003ce:	4a11      	ldr	r2, [pc, #68]	; (8000414 <MX_RTC_Init+0x4c>)
 80003d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_RTC_Init+0x48>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <MX_RTC_Init+0x48>)
 80003da:	227f      	movs	r2, #127	; 0x7f
 80003dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_RTC_Init+0x48>)
 80003e0:	22f9      	movs	r2, #249	; 0xf9
 80003e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <MX_RTC_Init+0x48>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_RTC_Init+0x48>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <MX_RTC_Init+0x48>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_RTC_Init+0x48>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_RTC_Init+0x48>)
 80003fe:	f002 fac9 	bl	8002994 <HAL_RTC_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000408:	f000 f81c 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000003c 	.word	0x2000003c
 8000414:	40002800 	.word	0x40002800

08000418 <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

  if (TimingDelay != 0)
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <HAL_SYSTICK_Callback+0x28>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d005      	beq.n	8000430 <HAL_SYSTICK_Callback+0x18>
  {
    TimingDelay--;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HAL_SYSTICK_Callback+0x28>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	4a05      	ldr	r2, [pc, #20]	; (8000440 <HAL_SYSTICK_Callback+0x28>)
 800042c:	6013      	str	r3, [r2, #0]
  {
    /* Toggle LED2 */
    BSP_LED_Toggle(LED2);
    TimingDelay = LED_TOGGLE_DELAY;
  }
}
 800042e:	e005      	b.n	800043c <HAL_SYSTICK_Callback+0x24>
    BSP_LED_Toggle(LED2);
 8000430:	2001      	movs	r0, #1
 8000432:	f000 f933 	bl	800069c <BSP_LED_Toggle>
    TimingDelay = LED_TOGGLE_DELAY;
 8000436:	4b02      	ldr	r3, [pc, #8]	; (8000440 <HAL_SYSTICK_Callback+0x28>)
 8000438:	2264      	movs	r2, #100	; 0x64
 800043a:	601a      	str	r2, [r3, #0]
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000060 	.word	0x20000060

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Turn on the LED3 */
  BSP_LED_On(LED3);
 8000448:	2002      	movs	r0, #2
 800044a:	f000 f90d 	bl	8000668 <BSP_LED_On>
 /* User can add his own implementation to report the HAL error return state */
  while(1) 
 800044e:	e7fe      	b.n	800044e <Error_Handler+0xa>

08000450 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800045c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000472:	b480      	push	{r7}
 8000474:	b085      	sub	sp, #20
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800047a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800047e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4313      	orrs	r3, r2
 8000488:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800048a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4013      	ands	r3, r2
 8000494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
	...

080004b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b0a8      	sub	sp, #160	; 0xa0
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a21      	ldr	r2, [pc, #132]	; (8000548 <HAL_RTC_MspInit+0x94>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d13b      	bne.n	800053e <HAL_RTC_MspInit+0x8a>
  /* Intermediate configuration in case of system resume from standby mode:   */
  /* RTC clock source disable before modifying its configuration afterwards.  */
  /* Note: In case of user application requires RTC clock to be uninterrupted,*/
  /*       an additional mechanism must be implemented in function of wake-up */
  /*       status from standby mode.                                          */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80004c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004ca:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_NONE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 ffd5 	bl	8002486 <HAL_RCCEx_PeriphCLKConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d000      	beq.n	80004e4 <HAL_RTC_MspInit+0x30>
  {
    while(1);
 80004e2:	e7fe      	b.n	80004e2 <HAL_RTC_MspInit+0x2e>
  }

  /*## Configure the RTC clock source ######################################*/
  /* Enable LSI Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI1;
 80004e4:	2308      	movs	r3, #8
 80004e6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ec:	2305      	movs	r3, #5
 80004ee:	61fb      	str	r3, [r7, #28]
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f0:	f107 0308 	add.w	r3, r7, #8
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 f83f 	bl	8001578 <HAL_RCC_OscConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d000      	beq.n	8000502 <HAL_RTC_MspInit+0x4e>
  {
    while(1);
 8000500:	e7fe      	b.n	8000500 <HAL_RTC_MspInit+0x4c>
  }

  /* Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000506:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000510:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000514:	4618      	mov	r0, r3
 8000516:	f001 ffb6 	bl	8002486 <HAL_RCCEx_PeriphCLKConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d000      	beq.n	8000522 <HAL_RTC_MspInit+0x6e>
  {
    while(1);
 8000520:	e7fe      	b.n	8000520 <HAL_RTC_MspInit+0x6c>
  }

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000522:	f7ff ff95 	bl	8000450 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000526:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800052a:	f7ff ffa2 	bl	8000472 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  /*## Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0x0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	2003      	movs	r0, #3
 8000534:	f000 faa7 	bl	8000a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 fabe 	bl	8000aba <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800053e:	bf00      	nop
 8000540:	37a0      	adds	r7, #160	; 0xa0
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40002800 	.word	0x40002800

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <MemManage_Handler+0x4>

08000566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler+0x4>

08000572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a0:	f000 f946 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80005a4:	f000 faa3 	bl	8000aee <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <RTC_WKUP_IRQHandler+0x10>)
 80005b2:	f002 fc09 	bl	8002dc8 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	2000003c 	.word	0x2000003c

080005c0 <LL_AHB2_GRP1_EnableClock>:
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4013      	ands	r3, r2
 80005e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005e4:	68fb      	ldr	r3, [r7, #12]
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
	...

080005f4 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800060e:	2004      	movs	r0, #4
 8000610:	f7ff ffd6 	bl	80005c0 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <BSP_LED_Init+0x6c>)
 8000618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000626:	2302      	movs	r3, #2
 8000628:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <BSP_LED_Init+0x70>)
 800062e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000632:	f107 020c 	add.w	r2, r7, #12
 8000636:	4611      	mov	r1, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fa5f 	bl	8000afc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4a08      	ldr	r2, [pc, #32]	; (8000664 <BSP_LED_Init+0x70>)
 8000642:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	4a05      	ldr	r2, [pc, #20]	; (8000660 <BSP_LED_Init+0x6c>)
 800064a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064e:	2200      	movs	r2, #0
 8000650:	4619      	mov	r1, r3
 8000652:	f000 fbc3 	bl	8000ddc <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	08002ec4 	.word	0x08002ec4
 8000664:	20000008 	.word	0x20000008

08000668 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <BSP_LED_On+0x2c>)
 8000676:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <BSP_LED_On+0x30>)
 800067e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000682:	2201      	movs	r2, #1
 8000684:	4619      	mov	r1, r3
 8000686:	f000 fba9 	bl	8000ddc <HAL_GPIO_WritePin>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000008 	.word	0x20000008
 8000698:	08002ec4 	.word	0x08002ec4

0800069c <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <BSP_LED_Toggle+0x2c>)
 80006aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	4906      	ldr	r1, [pc, #24]	; (80006cc <BSP_LED_Toggle+0x30>)
 80006b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006b6:	4619      	mov	r1, r3
 80006b8:	4610      	mov	r0, r2
 80006ba:	f000 fba7 	bl	8000e0c <HAL_GPIO_TogglePin>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000008 	.word	0x20000008
 80006cc:	08002ec4 	.word	0x08002ec4

080006d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <SystemInit+0xa0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemInit+0xa0>)
 80006dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e0:	4a23      	ldr	r2, [pc, #140]	; (8000770 <SystemInit+0xa0>)
 80006e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80006ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80006fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006fe:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000702:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <SystemInit+0xa4>)
 8000710:	4013      	ands	r3, r2
 8000712:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800071c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000720:	f023 0305 	bic.w	r3, r3, #5
 8000724:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800072c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800073c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <SystemInit+0xa8>)
 8000742:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000748:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <SystemInit+0xa8>)
 800074a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800075a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800075c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	faf6fefb 	.word	0xfaf6fefb
 8000778:	22041000 	.word	0x22041000

0800077c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_Init+0x3c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <HAL_Init+0x3c>)
 800078c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000790:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000792:	2003      	movs	r0, #3
 8000794:	f000 f96c 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000798:	2000      	movs	r0, #0
 800079a:	f000 f80f 	bl	80007bc <HAL_InitTick>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	71fb      	strb	r3, [r7, #7]
 80007a8:	e001      	b.n	80007ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007aa:	f7ff fe7b 	bl	80004a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007ae:	79fb      	ldrb	r3, [r7, #7]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58004000 	.word	0x58004000

080007bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <HAL_InitTick+0x6c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d024      	beq.n	800081a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007d0:	f001 fbf4 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 80007d4:	4602      	mov	r2, r0
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_InitTick+0x6c>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f974 	bl	8000ad6 <HAL_SYSTICK_Config>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d10f      	bne.n	8000814 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b0f      	cmp	r3, #15
 80007f8:	d809      	bhi.n	800080e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fa:	2200      	movs	r2, #0
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000802:	f000 f940 	bl	8000a86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000806:	4a09      	ldr	r2, [pc, #36]	; (800082c <HAL_InitTick+0x70>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	e007      	b.n	800081e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	73fb      	strb	r3, [r7, #15]
 8000812:	e004      	b.n	800081e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e001      	b.n	800081e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800081e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000001c 	.word	0x2000001c
 800082c:	20000018 	.word	0x20000018

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x20>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x24>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_IncTick+0x24>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	2000001c 	.word	0x2000001c
 8000854:	20000064 	.word	0x20000064

08000858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_GetTick+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000064 	.word	0x20000064

08000870 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <HAL_GetTickPrio+0x14>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000018 	.word	0x20000018

08000888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000890:	f7ff ffe2 	bl	8000858 <HAL_GetTick>
 8000894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a0:	d005      	beq.n	80008ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_Delay+0x44>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ae:	bf00      	nop
 80008b0:	f7ff ffd2 	bl	8000858 <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d8f7      	bhi.n	80008b0 <HAL_Delay+0x28>
  {
  }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000001c 	.word	0x2000001c

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <__NVIC_EnableIRQ+0x38>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	; (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f7ff ff8e 	bl	8000970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff29 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff40 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff90 	bl	80009c4 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5f 	bl	8000970 <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff33 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffa4 	bl	8000a2c <SysTick_Config>
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000af2:	f7ff fc91 	bl	8000418 <HAL_SYSTICK_Callback>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0a:	e14c      	b.n	8000da6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	2101      	movs	r1, #1
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 813e 	beq.w	8000da0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d005      	beq.n	8000b3c <HAL_GPIO_Init+0x40>
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d130      	bne.n	8000b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2203      	movs	r2, #3
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b72:	2201      	movs	r2, #1
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	091b      	lsrs	r3, r3, #4
 8000b88:	f003 0201 	and.w	r2, r3, #1
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d017      	beq.n	8000bda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d123      	bne.n	8000c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	08da      	lsrs	r2, r3, #3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3208      	adds	r2, #8
 8000bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	691a      	ldr	r2, [r3, #16]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 0307 	and.w	r3, r3, #7
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	6939      	ldr	r1, [r7, #16]
 8000c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0203 	and.w	r2, r3, #3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 8098 	beq.w	8000da0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c70:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <HAL_GPIO_Init+0x2c8>)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	3302      	adds	r3, #2
 8000c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	220f      	movs	r2, #15
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c9a:	d019      	beq.n	8000cd0 <HAL_GPIO_Init+0x1d4>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a4a      	ldr	r2, [pc, #296]	; (8000dc8 <HAL_GPIO_Init+0x2cc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d013      	beq.n	8000ccc <HAL_GPIO_Init+0x1d0>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a49      	ldr	r2, [pc, #292]	; (8000dcc <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d00d      	beq.n	8000cc8 <HAL_GPIO_Init+0x1cc>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a48      	ldr	r2, [pc, #288]	; (8000dd0 <HAL_GPIO_Init+0x2d4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d007      	beq.n	8000cc4 <HAL_GPIO_Init+0x1c8>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a47      	ldr	r2, [pc, #284]	; (8000dd4 <HAL_GPIO_Init+0x2d8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d101      	bne.n	8000cc0 <HAL_GPIO_Init+0x1c4>
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	e008      	b.n	8000cd2 <HAL_GPIO_Init+0x1d6>
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	e006      	b.n	8000cd2 <HAL_GPIO_Init+0x1d6>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e004      	b.n	8000cd2 <HAL_GPIO_Init+0x1d6>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e002      	b.n	8000cd2 <HAL_GPIO_Init+0x1d6>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <HAL_GPIO_Init+0x1d6>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	f002 0203 	and.w	r2, r2, #3
 8000cd8:	0092      	lsls	r2, r2, #2
 8000cda:	4093      	lsls	r3, r2
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ce2:	4938      	ldr	r1, [pc, #224]	; (8000dc4 <HAL_GPIO_Init+0x2c8>)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cf0:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d14:	4a30      	ldr	r2, [pc, #192]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d3e:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	fa22 f303 	lsr.w	r3, r2, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f47f aeab 	bne.w	8000b0c <HAL_GPIO_Init+0x10>
  }
}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	48000c00 	.word	0x48000c00
 8000dd4:	48001000 	.word	0x48001000
 8000dd8:	58000800 	.word	0x58000800

08000ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
 8000de8:	4613      	mov	r3, r2
 8000dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dec:	787b      	ldrb	r3, [r7, #1]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000df2:	887a      	ldrh	r2, [r7, #2]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000df8:	e002      	b.n	8000e00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dfa:	887a      	ldrh	r2, [r7, #2]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e1e:	887a      	ldrh	r2, [r7, #2]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4013      	ands	r3, r2
 8000e24:	041a      	lsls	r2, r3, #16
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43d9      	mvns	r1, r3
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	619a      	str	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	58000400 	.word	0x58000400

08000e60 <HAL_PWR_EnterSTANDBYMode>:
  * @note  According to system power policy, system entering in Standby mode
  *        is depending on other CPU power mode.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_PWR_EnterSTANDBYMode+0x38>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f023 0307 	bic.w	r3, r3, #7
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_PWR_EnterSTANDBYMode+0x38>)
 8000e6e:	f043 0303 	orr.w	r3, r3, #3
 8000e72:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_PWR_EnterSTANDBYMode+0x3c>)
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_PWR_EnterSTANDBYMode+0x3c>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6113      	str	r3, [r2, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif

  /* Request Wait For Interrupt */
  __WFI();
 8000e80:	bf30      	wfi

  /* Following code is executed after wake up if system did not go to STANDBY
     mode according to system power policy */

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_PWR_EnterSTANDBYMode+0x3c>)
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <HAL_PWR_EnterSTANDBYMode+0x3c>)
 8000e88:	f023 0304 	bic.w	r3, r3, #4
 8000e8c:	6113      	str	r3, [r2, #16]
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	58000400 	.word	0x58000400
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	58000400 	.word	0x58000400

08000ebc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000ece:	d101      	bne.n	8000ed4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_RCC_HSE_Enable>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <LL_RCC_HSE_Disable>:
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_RCC_HSE_IsReady>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f2e:	d101      	bne.n	8000f34 <LL_RCC_HSE_IsReady+0x18>
 8000f30:	2301      	movs	r3, #1
 8000f32:	e000      	b.n	8000f36 <LL_RCC_HSE_IsReady+0x1a>
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_RCC_HSI_Enable>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_RCC_HSI_Disable>:
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f70:	6013      	str	r3, [r2, #0]
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_RCC_HSI_IsReady>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8e:	d101      	bne.n	8000f94 <LL_RCC_HSI_IsReady+0x18>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <LL_RCC_HSI_IsReady+0x1a>
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	061b      	lsls	r3, r3, #24
 8000fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	604b      	str	r3, [r1, #4]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <LL_RCC_HSI48_Enable>:
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_RCC_HSI48_Disable>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ffc:	f023 0301 	bic.w	r3, r3, #1
 8001000:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_RCC_HSI48_IsReady>:
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b02      	cmp	r3, #2
 8001020:	d101      	bne.n	8001026 <LL_RCC_HSI48_IsReady+0x18>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <LL_RCC_HSI48_IsReady+0x1a>
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_RCC_LSE_Enable>:
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800103e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_RCC_LSE_Disable>:
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_RCC_LSE_EnableBypass>:
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800107a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_RCC_LSE_DisableBypass>:
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010a8:	f023 0304 	bic.w	r3, r3, #4
 80010ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_RCC_LSE_IsReady>:
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80010be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d101      	bne.n	80010d2 <LL_RCC_LSE_IsReady+0x18>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <LL_RCC_LSE_IsReady+0x1a>
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_RCC_LSI1_Enable>:
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_RCC_LSI1_Disable>:
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <LL_RCC_LSI1_IsReady>:
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b02      	cmp	r3, #2
 8001134:	d101      	bne.n	800113a <LL_RCC_LSI1_IsReady+0x18>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <LL_RCC_LSI1_IsReady+0x1a>
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_RCC_LSI2_Enable>:
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_RCC_LSI2_Disable>:
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_RCC_LSI2_IsReady>:
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800118e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b08      	cmp	r3, #8
 800119c:	d101      	bne.n	80011a2 <LL_RCC_LSI2_IsReady+0x18>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <LL_RCC_LSI2_IsReady+0x1a>
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_RCC_LSI2_SetTrimming>:
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80011b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ca:	4313      	orrs	r3, r2
 80011cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_RCC_MSI_Enable>:
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80011e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_RCC_MSI_Disable>:
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80011fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_RCC_MSI_IsReady>:
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800121c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b02      	cmp	r3, #2
 8001228:	d101      	bne.n	800122e <LL_RCC_MSI_IsReady+0x16>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_RCC_MSI_IsReady+0x18>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_RCC_MSI_SetRange>:
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_RCC_MSI_GetRange>:
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001272:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2bb0      	cmp	r3, #176	; 0xb0
 8001278:	d901      	bls.n	800127e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800127a:	23b0      	movs	r3, #176	; 0xb0
 800127c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800127e:	687b      	ldr	r3, [r7, #4]
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_RCC_MSI_SetCalibTrimming>:
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_RCC_SetSysClkSource>:
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 0203 	bic.w	r2, r3, #3
 80012c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	608b      	str	r3, [r1, #8]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_RCC_GetSysClkSource>:
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 030c 	and.w	r3, r3, #12
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <LL_RCC_SetAHBPrescaler>:
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4313      	orrs	r3, r2
 8001310:	608b      	str	r3, [r1, #8]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_C2_RCC_SetAHBPrescaler>:
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800132e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4313      	orrs	r3, r2
 800133a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_RCC_SetAHB4Prescaler>:
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001356:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800135a:	f023 020f 	bic.w	r2, r3, #15
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001366:	4313      	orrs	r3, r2
 8001368:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_RCC_SetAPB1Prescaler>:
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800138a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4313      	orrs	r3, r2
 8001392:	608b      	str	r3, [r1, #8]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_RCC_SetAPB2Prescaler>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	608b      	str	r3, [r1, #8]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_RCC_GetAHBPrescaler>:
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80013cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_RCC_GetAHB4Prescaler>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80013e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800140a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800141e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001428:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800142c:	6013      	str	r3, [r2, #0]
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800144a:	d101      	bne.n	8001450 <LL_RCC_PLL_IsReady+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_RCC_PLL_IsReady+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800147a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80014aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f003 0303 	and.w	r3, r3, #3
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80014c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d0:	d101      	bne.n	80014d6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80014e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014f6:	d101      	bne.n	80014fc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001510:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d101      	bne.n	8001522 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001540:	d101      	bne.n	8001546 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001560:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001564:	d101      	bne.n	800156a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b08d      	sub	sp, #52	; 0x34
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e363      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 808d 	beq.w	80016b2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001598:	f7ff fea1 	bl	80012de <LL_RCC_GetSysClkSource>
 800159c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800159e:	f7ff ff82 	bl	80014a6 <LL_RCC_PLL_GetMainSource>
 80015a2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3e>
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	d147      	bne.n	8001640 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d144      	bne.n	8001640 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e347      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80015c6:	f7ff fe4c 	bl	8001262 <LL_RCC_MSI_GetRange>
 80015ca:	4603      	mov	r3, r0
 80015cc:	429c      	cmp	r4, r3
 80015ce:	d914      	bls.n	80015fa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fd05 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e336      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fe26 	bl	800123a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe4a 	bl	800128c <LL_RCC_MSI_SetCalibTrimming>
 80015f8:	e013      	b.n	8001622 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fe1b 	bl	800123a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fe3f 	bl	800128c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fce6 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e317      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001622:	f000 fccb 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001626:	4603      	mov	r3, r0
 8001628:	4aa4      	ldr	r2, [pc, #656]	; (80018bc <HAL_RCC_OscConfig+0x344>)
 800162a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800162c:	4ba4      	ldr	r3, [pc, #656]	; (80018c0 <HAL_RCC_OscConfig+0x348>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff f8c3 	bl	80007bc <HAL_InitTick>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d039      	beq.n	80016b0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e308      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01e      	beq.n	8001686 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001648:	f7ff fdc8 	bl	80011dc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800164c:	f7ff f904 	bl	8000858 <HAL_GetTick>
 8001650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001654:	f7ff f900 	bl	8000858 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e2f5      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001666:	f7ff fdd7 	bl	8001218 <LL_RCC_MSI_IsReady>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f1      	beq.n	8001654 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fde0 	bl	800123a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fe04 	bl	800128c <LL_RCC_MSI_SetCalibTrimming>
 8001684:	e015      	b.n	80016b2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001686:	f7ff fdb8 	bl	80011fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800168a:	f7ff f8e5 	bl	8000858 <HAL_GetTick>
 800168e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001692:	f7ff f8e1 	bl	8000858 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e2d6      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80016a4:	f7ff fdb8 	bl	8001218 <LL_RCC_MSI_IsReady>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f1      	bne.n	8001692 <HAL_RCC_OscConfig+0x11a>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80016b0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d047      	beq.n	800174e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016be:	f7ff fe0e 	bl	80012de <LL_RCC_GetSysClkSource>
 80016c2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c4:	f7ff feef 	bl	80014a6 <LL_RCC_PLL_GetMainSource>
 80016c8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_OscConfig+0x164>
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	2b0c      	cmp	r3, #12
 80016d4:	d108      	bne.n	80016e8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d105      	bne.n	80016e8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d134      	bne.n	800174e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e2b4      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f0:	d102      	bne.n	80016f8 <HAL_RCC_OscConfig+0x180>
 80016f2:	f7ff fbf5 	bl	8000ee0 <LL_RCC_HSE_Enable>
 80016f6:	e001      	b.n	80016fc <HAL_RCC_OscConfig+0x184>
 80016f8:	f7ff fc01 	bl	8000efe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d012      	beq.n	800172a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff f8a8 	bl	8000858 <HAL_GetTick>
 8001708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff f8a4 	bl	8000858 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e299      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800171e:	f7ff fbfd 	bl	8000f1c <LL_RCC_HSE_IsReady>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f1      	beq.n	800170c <HAL_RCC_OscConfig+0x194>
 8001728:	e011      	b.n	800174e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff f895 	bl	8000858 <HAL_GetTick>
 800172e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001732:	f7ff f891 	bl	8000858 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e286      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001744:	f7ff fbea 	bl	8000f1c <LL_RCC_HSE_IsReady>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f1      	bne.n	8001732 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d04c      	beq.n	80017f4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175a:	f7ff fdc0 	bl	80012de <LL_RCC_GetSysClkSource>
 800175e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001760:	f7ff fea1 	bl	80014a6 <LL_RCC_PLL_GetMainSource>
 8001764:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b04      	cmp	r3, #4
 800176a:	d005      	beq.n	8001778 <HAL_RCC_OscConfig+0x200>
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b0c      	cmp	r3, #12
 8001770:	d10e      	bne.n	8001790 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d10b      	bne.n	8001790 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e266      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fc09 	bl	8000fa0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800178e:	e031      	b.n	80017f4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d019      	beq.n	80017cc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001798:	f7ff fbd2 	bl	8000f40 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff f85c 	bl	8000858 <HAL_GetTick>
 80017a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff f858 	bl	8000858 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e24d      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80017b6:	f7ff fbe1 	bl	8000f7c <LL_RCC_HSI_IsReady>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f1      	beq.n	80017a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fbeb 	bl	8000fa0 <LL_RCC_HSI_SetCalibTrimming>
 80017ca:	e013      	b.n	80017f4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017cc:	f7ff fbc7 	bl	8000f5e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff f842 	bl	8000858 <HAL_GetTick>
 80017d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d8:	f7ff f83e 	bl	8000858 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e233      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80017ea:	f7ff fbc7 	bl	8000f7c <LL_RCC_HSI_IsReady>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f1      	bne.n	80017d8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a3 	beq.w	8001954 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d076      	beq.n	8001904 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	2b00      	cmp	r3, #0
 8001820:	d046      	beq.n	80018b0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001822:	f7ff fc7e 	bl	8001122 <LL_RCC_LSI1_IsReady>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d113      	bne.n	8001854 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800182c:	f7ff fc57 	bl	80010de <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001830:	f7ff f812 	bl	8000858 <HAL_GetTick>
 8001834:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001838:	f7ff f80e 	bl	8000858 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e203      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800184a:	f7ff fc6a 	bl	8001122 <LL_RCC_LSI1_IsReady>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f1      	beq.n	8001838 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001854:	f7ff fc77 	bl	8001146 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7fe fffe 	bl	8000858 <HAL_GetTick>
 800185c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001860:	f7fe fffa 	bl	8000858 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b03      	cmp	r3, #3
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e1ef      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001872:	f7ff fc8a 	bl	800118a <LL_RCC_LSI2_IsReady>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f1      	beq.n	8001860 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fc94 	bl	80011ae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001886:	f7ff fc3b 	bl	8001100 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f7fe ffe5 	bl	8000858 <HAL_GetTick>
 800188e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001892:	f7fe ffe1 	bl	8000858 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e1d6      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80018a4:	f7ff fc3d 	bl	8001122 <LL_RCC_LSI1_IsReady>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f1      	bne.n	8001892 <HAL_RCC_OscConfig+0x31a>
 80018ae:	e051      	b.n	8001954 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80018b0:	f7ff fc15 	bl	80010de <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7fe ffd0 	bl	8000858 <HAL_GetTick>
 80018b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80018ba:	e00c      	b.n	80018d6 <HAL_RCC_OscConfig+0x35e>
 80018bc:	20000014 	.word	0x20000014
 80018c0:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80018c4:	f7fe ffc8 	bl	8000858 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e1bd      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80018d6:	f7ff fc24 	bl	8001122 <LL_RCC_LSI1_IsReady>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f1      	beq.n	80018c4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80018e0:	f7ff fc42 	bl	8001168 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80018e6:	f7fe ffb7 	bl	8000858 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1ac      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80018f8:	f7ff fc47 	bl	800118a <LL_RCC_LSI2_IsReady>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f1      	bne.n	80018e6 <HAL_RCC_OscConfig+0x36e>
 8001902:	e027      	b.n	8001954 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001904:	f7ff fc30 	bl	8001168 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7fe ffa6 	bl	8000858 <HAL_GetTick>
 800190c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001910:	f7fe ffa2 	bl	8000858 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b03      	cmp	r3, #3
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e197      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001922:	f7ff fc32 	bl	800118a <LL_RCC_LSI2_IsReady>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f1      	bne.n	8001910 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800192c:	f7ff fbe8 	bl	8001100 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7fe ff92 	bl	8000858 <HAL_GetTick>
 8001934:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001938:	f7fe ff8e 	bl	8000858 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e183      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800194a:	f7ff fbea 	bl	8001122 <LL_RCC_LSI1_IsReady>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f1      	bne.n	8001938 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d05b      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001960:	4ba7      	ldr	r3, [pc, #668]	; (8001c00 <HAL_RCC_OscConfig+0x688>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d114      	bne.n	8001996 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800196c:	f7ff fa68 	bl	8000e40 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001970:	f7fe ff72 	bl	8000858 <HAL_GetTick>
 8001974:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001978:	f7fe ff6e 	bl	8000858 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e163      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198a:	4b9d      	ldr	r3, [pc, #628]	; (8001c00 <HAL_RCC_OscConfig+0x688>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d102      	bne.n	80019a4 <HAL_RCC_OscConfig+0x42c>
 800199e:	f7ff fb48 	bl	8001032 <LL_RCC_LSE_Enable>
 80019a2:	e00c      	b.n	80019be <HAL_RCC_OscConfig+0x446>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d104      	bne.n	80019b6 <HAL_RCC_OscConfig+0x43e>
 80019ac:	f7ff fb63 	bl	8001076 <LL_RCC_LSE_EnableBypass>
 80019b0:	f7ff fb3f 	bl	8001032 <LL_RCC_LSE_Enable>
 80019b4:	e003      	b.n	80019be <HAL_RCC_OscConfig+0x446>
 80019b6:	f7ff fb4d 	bl	8001054 <LL_RCC_LSE_Disable>
 80019ba:	f7ff fb6d 	bl	8001098 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d014      	beq.n	80019f0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c6:	f7fe ff47 	bl	8000858 <HAL_GetTick>
 80019ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7fe ff43 	bl	8000858 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e136      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80019e4:	f7ff fb69 	bl	80010ba <LL_RCC_LSE_IsReady>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0ef      	beq.n	80019ce <HAL_RCC_OscConfig+0x456>
 80019ee:	e013      	b.n	8001a18 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7fe ff32 	bl	8000858 <HAL_GetTick>
 80019f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7fe ff2e 	bl	8000858 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e121      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001a0e:	f7ff fb54 	bl	80010ba <LL_RCC_LSE_IsReady>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ef      	bne.n	80019f8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d02c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d014      	beq.n	8001a56 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a2c:	f7ff facd 	bl	8000fca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7fe ff12 	bl	8000858 <HAL_GetTick>
 8001a34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a38:	f7fe ff0e 	bl	8000858 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e103      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001a4a:	f7ff fae0 	bl	800100e <LL_RCC_HSI48_IsReady>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f1      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4c0>
 8001a54:	e013      	b.n	8001a7e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a56:	f7ff fac9 	bl	8000fec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7fe fefd 	bl	8000858 <HAL_GetTick>
 8001a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a62:	f7fe fef9 	bl	8000858 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0ee      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001a74:	f7ff facb 	bl	800100e <LL_RCC_HSI48_IsReady>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f1      	bne.n	8001a62 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80e4 	beq.w	8001c50 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a88:	f7ff fc29 	bl	80012de <LL_RCC_GetSysClkSource>
 8001a8c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	f040 80b4 	bne.w	8001c08 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0203 	and.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d123      	bne.n	8001af6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d11c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	0a1b      	lsrs	r3, r3, #8
 8001ac0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d114      	bne.n	8001af6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d10d      	bne.n	8001af6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d05d      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d058      	beq.n	8001bae <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0a1      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b0e:	f7ff fc84 	bl	800141a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b12:	f7fe fea1 	bl	8000858 <HAL_GetTick>
 8001b16:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7fe fe9d 	bl	8000858 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e092      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ef      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_RCC_OscConfig+0x68c>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b52:	0212      	lsls	r2, r2, #8
 8001b54:	4311      	orrs	r1, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b60:	4311      	orrs	r1, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b66:	430a      	orrs	r2, r1
 8001b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b70:	f7ff fc44 	bl	80013fc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b84:	f7fe fe68 	bl	8000858 <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7fe fe64 	bl	8000858 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e059      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ef      	beq.n	8001b8c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bac:	e050      	b.n	8001c50 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e04f      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d147      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bc0:	f7ff fc1c 	bl	80013fc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd4:	f7fe fe40 	bl	8000858 <HAL_GetTick>
 8001bd8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7fe fe3c 	bl	8000858 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e031      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0ef      	beq.n	8001bdc <HAL_RCC_OscConfig+0x664>
 8001bfc:	e028      	b.n	8001c50 <HAL_RCC_OscConfig+0x6d8>
 8001bfe:	bf00      	nop
 8001c00:	58000400 	.word	0x58000400
 8001c04:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d01e      	beq.n	8001c4c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	f7ff fc04 	bl	800141a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7fe fe21 	bl	8000858 <HAL_GetTick>
 8001c16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7fe fe1d 	bl	8000858 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e012      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ef      	bne.n	8001c1a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_OscConfig+0x6e4>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	60cb      	str	r3, [r1, #12]
 8001c4a:	e001      	b.n	8001c50 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3734      	adds	r7, #52	; 0x34
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	eefefffc 	.word	0xeefefffc

08001c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e12d      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b98      	ldr	r3, [pc, #608]	; (8001ed8 <HAL_RCC_ClockConfig+0x278>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d91b      	bls.n	8001cba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b95      	ldr	r3, [pc, #596]	; (8001ed8 <HAL_RCC_ClockConfig+0x278>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	4993      	ldr	r1, [pc, #588]	; (8001ed8 <HAL_RCC_ClockConfig+0x278>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c92:	f7fe fde1 	bl	8000858 <HAL_GetTick>
 8001c96:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c9a:	f7fe fddd 	bl	8000858 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e111      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cac:	4b8a      	ldr	r3, [pc, #552]	; (8001ed8 <HAL_RCC_ClockConfig+0x278>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d1ef      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d016      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fb13 	bl	80012f6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cd0:	f7fe fdc2 	bl	8000858 <HAL_GetTick>
 8001cd4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cd8:	f7fe fdbe 	bl	8000858 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0f2      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001cea:	f7ff fbe8 	bl	80014be <LL_RCC_IsActiveFlag_HPRE>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f1      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d016      	beq.n	8001d2e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fb0a 	bl	800131e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d0a:	f7fe fda5 	bl	8000858 <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d12:	f7fe fda1 	bl	8000858 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e0d5      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001d24:	f7ff fbdd 	bl	80014e2 <LL_RCC_IsActiveFlag_C2HPRE>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f1      	beq.n	8001d12 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d016      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fb03 	bl	800134a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d44:	f7fe fd88 	bl	8000858 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d4c:	f7fe fd84 	bl	8000858 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e0b8      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001d5e:	f7ff fbd3 	bl	8001508 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f1      	beq.n	8001d4c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d016      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fafd 	bl	8001378 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d7e:	f7fe fd6b 	bl	8000858 <HAL_GetTick>
 8001d82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d86:	f7fe fd67 	bl	8000858 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e09b      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001d98:	f7ff fbc9 	bl	800152e <LL_RCC_IsActiveFlag_PPRE1>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f1      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d017      	beq.n	8001dde <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff faf3 	bl	80013a0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001dba:	f7fe fd4d 	bl	8000858 <HAL_GetTick>
 8001dbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001dc2:	f7fe fd49 	bl	8000858 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e07d      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001dd4:	f7ff fbbd 	bl	8001552 <LL_RCC_IsActiveFlag_PPRE2>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f1      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d043      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001df2:	f7ff f893 	bl	8000f1c <LL_RCC_HSE_IsReady>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d11e      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e067      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001e08:	f7ff fb16 	bl	8001438 <LL_RCC_PLL_IsReady>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d113      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e05c      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001e1e:	f7ff f9fb 	bl	8001218 <LL_RCC_MSI_IsReady>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d108      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e051      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001e2c:	f7ff f8a6 	bl	8000f7c <LL_RCC_HSI_IsReady>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e04a      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fa39 	bl	80012b6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e44:	f7fe fd08 	bl	8000858 <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7fe fd04 	bl	8000858 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e036      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	f7ff fa3c 	bl	80012de <LL_RCC_GetSysClkSource>
 8001e66:	4602      	mov	r2, r0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d1ec      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_RCC_ClockConfig+0x278>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d21b      	bcs.n	8001eb8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_RCC_ClockConfig+0x278>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 0207 	bic.w	r2, r3, #7
 8001e88:	4913      	ldr	r1, [pc, #76]	; (8001ed8 <HAL_RCC_ClockConfig+0x278>)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e90:	f7fe fce2 	bl	8000858 <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e98:	f7fe fcde 	bl	8000858 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e012      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_ClockConfig+0x278>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d1ef      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001eb8:	f000 f880 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_RCC_ClockConfig+0x27c>)
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001ec2:	f7fe fcd5 	bl	8000870 <HAL_GetTickPrio>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fc77 	bl	80007bc <HAL_InitTick>
 8001ece:	4603      	mov	r3, r0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	58004000 	.word	0x58004000
 8001edc:	20000014 	.word	0x20000014

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee6:	f7ff f9fa 	bl	80012de <LL_RCC_GetSysClkSource>
 8001eea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10a      	bne.n	8001f08 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001ef2:	f7ff f9b6 	bl	8001262 <LL_RCC_MSI_GetRange>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e04b      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d102      	bne.n	8001f14 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f0e:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e045      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d10a      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f1a:	f7fe ffcf 	bl	8000ebc <LL_RCC_HSE_IsEnabledDiv2>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d102      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	e03a      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001f2a:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	e037      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001f30:	f7ff fab9 	bl	80014a6 <LL_RCC_PLL_GetMainSource>
 8001f34:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d003      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x64>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x6a>
 8001f42:	e00d      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f46:	60bb      	str	r3, [r7, #8]
        break;
 8001f48:	e015      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f4a:	f7fe ffb7 	bl	8000ebc <LL_RCC_HSE_IsEnabledDiv2>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d102      	bne.n	8001f5a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f56:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001f58:	e00d      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001f5c:	60bb      	str	r3, [r7, #8]
        break;
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001f60:	f7ff f97f 	bl	8001262 <LL_RCC_MSI_GetRange>
 8001f64:	4603      	mov	r3, r0
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	60bb      	str	r3, [r7, #8]
        break;
 8001f74:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001f76:	f7ff fa71 	bl	800145c <LL_RCC_PLL_GetN>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	fb03 f402 	mul.w	r4, r3, r2
 8001f82:	f7ff fa84 	bl	800148e <LL_RCC_PLL_GetDivider>
 8001f86:	4603      	mov	r3, r0
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	fbb4 f4f3 	udiv	r4, r4, r3
 8001f90:	f7ff fa71 	bl	8001476 <LL_RCC_PLL_GetR>
 8001f94:	4603      	mov	r3, r0
 8001f96:	0f5b      	lsrs	r3, r3, #29
 8001f98:	3301      	adds	r3, #1
 8001f9a:	fbb4 f3f3 	udiv	r3, r4, r3
 8001f9e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd90      	pop	{r4, r7, pc}
 8001faa:	bf00      	nop
 8001fac:	08002f0c 	.word	0x08002f0c
 8001fb0:	00f42400 	.word	0x00f42400
 8001fb4:	003d0900 	.word	0x003d0900
 8001fb8:	007a1200 	.word	0x007a1200

08001fbc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b598      	push	{r3, r4, r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001fc0:	f7ff ff8e 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	f7ff f9ff 	bl	80013c8 <LL_RCC_GetAHBPrescaler>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	4a03      	ldr	r2, [pc, #12]	; (8001fe0 <HAL_RCC_GetHCLKFreq+0x24>)
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd98      	pop	{r3, r4, r7, pc}
 8001fe0:	08002ecc 	.word	0x08002ecc

08001fe4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2bb0      	cmp	r3, #176	; 0xb0
 8001ff0:	d903      	bls.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e007      	b.n	800200a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	4a11      	ldr	r2, [pc, #68]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002008:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800200a:	f7ff f9e9 	bl	80013e0 <LL_RCC_GetAHB4Prescaler>
 800200e:	4603      	mov	r3, r0
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4a0d      	ldr	r2, [pc, #52]	; (800204c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002022:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	0c9c      	lsrs	r4, r3, #18
 800202e:	f7fe ff37 	bl	8000ea0 <HAL_PWREx_GetVoltageRange>
 8002032:	4603      	mov	r3, r0
 8002034:	4619      	mov	r1, r3
 8002036:	4620      	mov	r0, r4
 8002038:	f000 f80c 	bl	8002054 <RCC_SetFlashLatency>
 800203c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	bf00      	nop
 8002048:	08002f0c 	.word	0x08002f0c
 800204c:	08002ecc 	.word	0x08002ecc
 8002050:	431bde83 	.word	0x431bde83

08002054 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b093      	sub	sp, #76	; 0x4c
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800205e:	4b37      	ldr	r3, [pc, #220]	; (800213c <RCC_SetFlashLatency+0xe8>)
 8002060:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800206a:	4a35      	ldr	r2, [pc, #212]	; (8002140 <RCC_SetFlashLatency+0xec>)
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	ca07      	ldmia	r2, {r0, r1, r2}
 8002072:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002076:	4b33      	ldr	r3, [pc, #204]	; (8002144 <RCC_SetFlashLatency+0xf0>)
 8002078:	f107 040c 	add.w	r4, r7, #12
 800207c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800207e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002082:	2300      	movs	r3, #0
 8002084:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800208c:	d11a      	bne.n	80020c4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800208e:	2300      	movs	r3, #0
 8002090:	643b      	str	r3, [r7, #64]	; 0x40
 8002092:	e013      	b.n	80020bc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	3348      	adds	r3, #72	; 0x48
 800209a:	443b      	add	r3, r7
 800209c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d807      	bhi.n	80020b6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80020a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	3348      	adds	r3, #72	; 0x48
 80020ac:	443b      	add	r3, r7
 80020ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80020b2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80020b4:	e020      	b.n	80020f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80020b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b8:	3301      	adds	r3, #1
 80020ba:	643b      	str	r3, [r7, #64]	; 0x40
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d9e8      	bls.n	8002094 <RCC_SetFlashLatency+0x40>
 80020c2:	e019      	b.n	80020f8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c8:	e013      	b.n	80020f2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80020ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	3348      	adds	r3, #72	; 0x48
 80020d0:	443b      	add	r3, r7
 80020d2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d807      	bhi.n	80020ec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80020dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	3348      	adds	r3, #72	; 0x48
 80020e2:	443b      	add	r3, r7
 80020e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80020e8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80020ea:	e005      	b.n	80020f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80020ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ee:	3301      	adds	r3, #1
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d9e8      	bls.n	80020ca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <RCC_SetFlashLatency+0xf4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 0207 	bic.w	r2, r3, #7
 8002100:	4911      	ldr	r1, [pc, #68]	; (8002148 <RCC_SetFlashLatency+0xf4>)
 8002102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002108:	f7fe fba6 	bl	8000858 <HAL_GetTick>
 800210c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800210e:	e008      	b.n	8002122 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002110:	f7fe fba2 	bl	8000858 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e007      	b.n	8002132 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <RCC_SetFlashLatency+0xf4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800212c:	429a      	cmp	r2, r3
 800212e:	d1ef      	bne.n	8002110 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	374c      	adds	r7, #76	; 0x4c
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}
 800213a:	bf00      	nop
 800213c:	08002e98 	.word	0x08002e98
 8002140:	08002ea8 	.word	0x08002ea8
 8002144:	08002eb4 	.word	0x08002eb4
 8002148:	58004000 	.word	0x58004000

0800214c <LL_RCC_LSE_IsEnabled>:
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <LL_RCC_LSE_IsEnabled+0x18>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <LL_RCC_LSE_IsEnabled+0x1a>
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_RCC_LSE_IsReady>:
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b02      	cmp	r3, #2
 8002182:	d101      	bne.n	8002188 <LL_RCC_LSE_IsReady+0x18>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <LL_RCC_LSE_IsReady+0x1a>
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_RCC_SetRFWKPClockSource>:
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_RCC_SetSMPSClockSource>:
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4313      	orrs	r3, r2
 80021da:	624b      	str	r3, [r1, #36]	; 0x24
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_RCC_SetSMPSPrescaler>:
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4313      	orrs	r3, r2
 8002202:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_RCC_SetUSARTClockSource>:
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002220:	f023 0203 	bic.w	r2, r3, #3
 8002224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_RCC_SetLPUARTClockSource>:
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_RCC_SetI2CClockSource>:
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002274:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002280:	43db      	mvns	r3, r3
 8002282:	401a      	ands	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800228c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_RCC_SetLPTIMClockSource>:
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	43db      	mvns	r3, r3
 80022ba:	401a      	ands	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	041b      	lsls	r3, r3, #16
 80022c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_RCC_SetSAIClockSource>:
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80022de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_RCC_SetRNGClockSource>:
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_RCC_SetCLK48ClockSource>:
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_RCC_SetUSBClockSource>:
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffe3 	bl	800232e <LL_RCC_SetCLK48ClockSource>
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <LL_RCC_SetADCClockSource>:
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_RCC_SetRTCClockSource>:
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_RCC_GetRTCClockSource>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_RCC_ForceBackupDomainReset>:
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80023e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <LL_RCC_PLLSAI1_Enable>:
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800242a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002438:	6013      	str	r3, [r2, #0]
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_RCC_PLLSAI1_Disable>:
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002452:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <LL_RCC_PLLSAI1_IsReady>:
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002474:	d101      	bne.n	800247a <LL_RCC_PLLSAI1_IsReady+0x18>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b088      	sub	sp, #32
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800248e:	2300      	movs	r3, #0
 8002490:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002492:	2300      	movs	r3, #0
 8002494:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d034      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024aa:	d021      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80024ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024b0:	d81b      	bhi.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024b6:	d01d      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80024b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024bc:	d815      	bhi.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x54>
 80024c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c6:	d110      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80024c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80024d8:	e00d      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f947 	bl	8002772 <RCCEx_PLLSAI1_ConfigNP>
 80024e4:	4603      	mov	r3, r0
 80024e6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80024e8:	e005      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	77fb      	strb	r3, [r7, #31]
        break;
 80024ee:	e002      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80024f0:	bf00      	nop
 80024f2:	e000      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80024f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024f6:	7ffb      	ldrb	r3, [r7, #31]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fee8 	bl	80022d6 <LL_RCC_SetSAIClockSource>
 8002506:	e001      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002508:	7ffb      	ldrb	r3, [r7, #31]
 800250a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002514:	2b00      	cmp	r3, #0
 8002516:	d046      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002518:	f7ff ff56 	bl	80023c8 <LL_RCC_GetRTCClockSource>
 800251c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	429a      	cmp	r2, r3
 8002526:	d03c      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002528:	f7fe fc8a 	bl	8000e40 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff30 	bl	800239c <LL_RCC_SetRTCClockSource>
 800253c:	e02e      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800253e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002548:	f7ff ff4b 	bl	80023e2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800254c:	f7ff ff5a 	bl	8002404 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800255e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002568:	f7ff fdf0 	bl	800214c <LL_RCC_LSE_IsEnabled>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d114      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002572:	f7fe f971 	bl	8000858 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002578:	e00b      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe f96d 	bl	8000858 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d902      	bls.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	77fb      	strb	r3, [r7, #31]
              break;
 8002590:	e004      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002592:	f7ff fded 	bl	8002170 <LL_RCC_LSE_IsReady>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d1ee      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800259c:	7ffb      	ldrb	r3, [r7, #31]
 800259e:	77bb      	strb	r3, [r7, #30]
 80025a0:	e001      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a2:	7ffb      	ldrb	r3, [r7, #31]
 80025a4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fe2a 	bl	8002210 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fe35 	bl	800223c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d004      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fe5d 	bl	80022a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fe52 	bl	80022a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fe2a 	bl	8002268 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fe1f 	bl	8002268 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d022      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fe8d 	bl	800235a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002648:	d107      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002658:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002662:	d10b      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f8dd 	bl	8002828 <RCCEx_PLLSAI1_ConfigNQ>
 800266e:	4603      	mov	r3, r0
 8002670:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002672:	7ffb      	ldrb	r3, [r7, #31]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002678:	7ffb      	ldrb	r3, [r7, #31]
 800267a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002684:	2b00      	cmp	r3, #0
 8002686:	d02b      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002690:	d008      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800269a:	d003      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fe2a 	bl	8002302 <LL_RCC_SetRNGClockSource>
 80026ae:	e00a      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7ff fe21 	bl	8002302 <LL_RCC_SetRNGClockSource>
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7ff fe34 	bl	800232e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80026ce:	d107      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80026d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d022      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fe3d 	bl	8002370 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026fe:	d107      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002718:	d10b      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f8dd 	bl	80028de <RCCEx_PLLSAI1_ConfigNR>
 8002724:	4603      	mov	r3, r0
 8002726:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002728:	7ffb      	ldrb	r3, [r7, #31]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800272e:	7ffb      	ldrb	r3, [r7, #31]
 8002730:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fd26 	bl	8002194 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fd45 	bl	80021e8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fd2c 	bl	80021c0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002768:	7fbb      	ldrb	r3, [r7, #30]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3720      	adds	r7, #32
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800277e:	f7ff fe61 	bl	8002444 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002782:	f7fe f869 	bl	8000858 <HAL_GetTick>
 8002786:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002788:	e009      	b.n	800279e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800278a:	f7fe f865 	bl	8000858 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d902      	bls.n	800279e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	73fb      	strb	r3, [r7, #15]
      break;
 800279c:	e004      	b.n	80027a8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800279e:	f7ff fe60 	bl	8002462 <LL_RCC_PLLSAI1_IsReady>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d137      	bne.n	800281e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c2:	4313      	orrs	r3, r2
 80027c4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80027c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d8:	4313      	orrs	r3, r2
 80027da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80027dc:	f7ff fe23 	bl	8002426 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e0:	f7fe f83a 	bl	8000858 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80027e6:	e009      	b.n	80027fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027e8:	f7fe f836 	bl	8000858 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d902      	bls.n	80027fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	73fb      	strb	r3, [r7, #15]
        break;
 80027fa:	e004      	b.n	8002806 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80027fc:	f7ff fe31 	bl	8002462 <LL_RCC_PLLSAI1_IsReady>
 8002800:	4603      	mov	r3, r0
 8002802:	2b01      	cmp	r3, #1
 8002804:	d1f0      	bne.n	80027e8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d108      	bne.n	800281e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800281a:	4313      	orrs	r3, r2
 800281c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002834:	f7ff fe06 	bl	8002444 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002838:	f7fe f80e 	bl	8000858 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800283e:	e009      	b.n	8002854 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002840:	f7fe f80a 	bl	8000858 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d902      	bls.n	8002854 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	73fb      	strb	r3, [r7, #15]
      break;
 8002852:	e004      	b.n	800285e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002854:	f7ff fe05 	bl	8002462 <LL_RCC_PLLSAI1_IsReady>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d137      	bne.n	80028d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002878:	4313      	orrs	r3, r2
 800287a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288e:	4313      	orrs	r3, r2
 8002890:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002892:	f7ff fdc8 	bl	8002426 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002896:	f7fd ffdf 	bl	8000858 <HAL_GetTick>
 800289a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800289c:	e009      	b.n	80028b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800289e:	f7fd ffdb 	bl	8000858 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d902      	bls.n	80028b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	73fb      	strb	r3, [r7, #15]
        break;
 80028b0:	e004      	b.n	80028bc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80028b2:	f7ff fdd6 	bl	8002462 <LL_RCC_PLLSAI1_IsReady>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d1f0      	bne.n	800289e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d0:	4313      	orrs	r3, r2
 80028d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80028ea:	f7ff fdab 	bl	8002444 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80028ee:	f7fd ffb3 	bl	8000858 <HAL_GetTick>
 80028f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80028f4:	e009      	b.n	800290a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028f6:	f7fd ffaf 	bl	8000858 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d902      	bls.n	800290a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	73fb      	strb	r3, [r7, #15]
      break;
 8002908:	e004      	b.n	8002914 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800290a:	f7ff fdaa 	bl	8002462 <LL_RCC_PLLSAI1_IsReady>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d137      	bne.n	800298a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292e:	4313      	orrs	r3, r2
 8002930:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002944:	4313      	orrs	r3, r2
 8002946:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002948:	f7ff fd6d 	bl	8002426 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294c:	f7fd ff84 	bl	8000858 <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002952:	e009      	b.n	8002968 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002954:	f7fd ff80 	bl	8000858 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	73fb      	strb	r3, [r7, #15]
        break;
 8002966:	e004      	b.n	8002972 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002968:	f7ff fd7b 	bl	8002462 <LL_RCC_PLLSAI1_IsReady>
 800296c:	4603      	mov	r3, r0
 800296e:	2b01      	cmp	r3, #1
 8002970:	d1f0      	bne.n	8002954 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d108      	bne.n	800298a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002986:	4313      	orrs	r3, r2
 8002988:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e09f      	b.n	8002ae6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fd fd7a 	bl	80004b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80029c8:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_RTC_Init+0x15c>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d07e      	beq.n	8002ad2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	22ca      	movs	r2, #202	; 0xca
 80029da:	625a      	str	r2, [r3, #36]	; 0x24
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2253      	movs	r2, #83	; 0x53
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f8ab 	bl	8002b40 <RTC_EnterInitMode>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	22ff      	movs	r2, #255	; 0xff
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2204      	movs	r2, #4
 80029fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	e067      	b.n	8002ad6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a18:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68d2      	ldr	r2, [r2, #12]
 8002a40:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6919      	ldr	r1, [r3, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	041a      	lsls	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a64:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0203 	bic.w	r2, r2, #3
 8002a74:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d113      	bne.n	8002ac4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f829 	bl	8002af4 <HAL_RTC_WaitForSynchro>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00d      	beq.n	8002ac4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e010      	b.n	8002ae6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	e001      	b.n	8002ad6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d103      	bne.n	8002ae4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40002800 	.word	0x40002800

08002af4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b0a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002b0c:	f7fd fea4 	bl	8000858 <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b12:	e009      	b.n	8002b28 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b14:	f7fd fea0 	bl	8000858 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b22:	d901      	bls.n	8002b28 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e007      	b.n	8002b38 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0ee      	beq.n	8002b14 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d119      	bne.n	8002b8a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b60:	f7fd fe7a 	bl	8000858 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b66:	e009      	b.n	8002b7c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002b68:	f7fd fe76 	bl	8000858 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b76:	d901      	bls.n	8002b7c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e007      	b.n	8002b8c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ee      	beq.n	8002b68 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e0a8      	b.n	8002d00 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	22ca      	movs	r2, #202	; 0xca
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2253      	movs	r2, #83	; 0x53
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8002bdc:	f7fd fe3c 	bl	8000858 <HAL_GetTick>
 8002be0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002be2:	e015      	b.n	8002c10 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002be4:	f7fd fe38 	bl	8000858 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bf2:	d90d      	bls.n	8002c10 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2203      	movs	r2, #3
 8002c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e077      	b.n	8002d00 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e2      	bne.n	8002be4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c3e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002c40:	f7fd fe0a 	bl	8000858 <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002c46:	e015      	b.n	8002c74 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c48:	f7fd fe06 	bl	8000858 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c56:	d90d      	bls.n	8002c74 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	22ff      	movs	r2, #255	; 0xff
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2203      	movs	r2, #3
 8002c64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e045      	b.n	8002d00 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0e2      	beq.n	8002c48 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0207 	bic.w	r2, r2, #7
 8002c98:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8002cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb0:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8002cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8002cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cd4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ce4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	22ff      	movs	r2, #255	; 0xff
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	58000800 	.word	0x58000800

08002d0c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e04d      	b.n	8002dbe <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	22ca      	movs	r2, #202	; 0xca
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2253      	movs	r2, #83	; 0x53
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d50:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d60:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8002d62:	f7fd fd79 	bl	8000858 <HAL_GetTick>
 8002d66:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d68:	e015      	b.n	8002d96 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d6a:	f7fd fd75 	bl	8000858 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d78:	d90d      	bls.n	8002d96 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	22ff      	movs	r2, #255	; 0xff
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2203      	movs	r2, #3
 8002d86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e013      	b.n	8002dbe <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0e2      	beq.n	8002d6a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	22ff      	movs	r2, #255	; 0xff
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f818 	bl	8002e14 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002df4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002df8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	58000800 	.word	0x58000800

08002e14 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <__libc_init_array>:
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	4d0d      	ldr	r5, [pc, #52]	; (8002e60 <__libc_init_array+0x38>)
 8002e2c:	4c0d      	ldr	r4, [pc, #52]	; (8002e64 <__libc_init_array+0x3c>)
 8002e2e:	1b64      	subs	r4, r4, r5
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	2600      	movs	r6, #0
 8002e34:	42a6      	cmp	r6, r4
 8002e36:	d109      	bne.n	8002e4c <__libc_init_array+0x24>
 8002e38:	4d0b      	ldr	r5, [pc, #44]	; (8002e68 <__libc_init_array+0x40>)
 8002e3a:	4c0c      	ldr	r4, [pc, #48]	; (8002e6c <__libc_init_array+0x44>)
 8002e3c:	f000 f820 	bl	8002e80 <_init>
 8002e40:	1b64      	subs	r4, r4, r5
 8002e42:	10a4      	asrs	r4, r4, #2
 8002e44:	2600      	movs	r6, #0
 8002e46:	42a6      	cmp	r6, r4
 8002e48:	d105      	bne.n	8002e56 <__libc_init_array+0x2e>
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e50:	4798      	blx	r3
 8002e52:	3601      	adds	r6, #1
 8002e54:	e7ee      	b.n	8002e34 <__libc_init_array+0xc>
 8002e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e5a:	4798      	blx	r3
 8002e5c:	3601      	adds	r6, #1
 8002e5e:	e7f2      	b.n	8002e46 <__libc_init_array+0x1e>
 8002e60:	08002f4c 	.word	0x08002f4c
 8002e64:	08002f4c 	.word	0x08002f4c
 8002e68:	08002f4c 	.word	0x08002f4c
 8002e6c:	08002f50 	.word	0x08002f50

08002e70 <memset>:
 8002e70:	4402      	add	r2, r0
 8002e72:	4603      	mov	r3, r0
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d100      	bne.n	8002e7a <memset+0xa>
 8002e78:	4770      	bx	lr
 8002e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e7e:	e7f9      	b.n	8002e74 <memset+0x4>

08002e80 <_init>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	bf00      	nop
 8002e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e86:	bc08      	pop	{r3}
 8002e88:	469e      	mov	lr, r3
 8002e8a:	4770      	bx	lr

08002e8c <_fini>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr
