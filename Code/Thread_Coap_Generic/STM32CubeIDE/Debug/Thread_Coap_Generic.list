
Thread_Coap_Generic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec48  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba8  0800ed88  0800ed88  0001ed88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f930  0800f930  0001f930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f938  0800f938  0001f938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f93c  0800f93c  0001f93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000008  0800f940  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000094  0800f9cc  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001920  200000a8  0800f9dd  000200a8  2**2
                  ALLOC
  9 ._user_heap_stack 00002800  200019c8  0800f9dd  000219c8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 14 .debug_info   000376bd  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007504  00000000  00000000  00057792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002eb0  00000000  00000000  0005ec98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002b98  00000000  00000000  00061b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000328d1  00000000  00000000  000646e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003a371  00000000  00000000  00096fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001140f5  00000000  00000000  000d1322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001e5417  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c9a4  00000000  00000000  001e5468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a8 	.word	0x200000a8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ed70 	.word	0x0800ed70

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ac 	.word	0x200000ac
 800017c:	0800ed70 	.word	0x0800ed70

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8000560:	23ff      	movs	r3, #255	; 0xff
 8000562:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000564:	2300      	movs	r3, #0
 8000566:	81fb      	strh	r3, [r7, #14]
 8000568:	e021      	b.n	80005ae <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 800056a:	89fb      	ldrh	r3, [r7, #14]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4413      	add	r3, r2
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	7b7b      	ldrb	r3, [r7, #13]
 8000574:	4053      	eors	r3, r2
 8000576:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000578:	2308      	movs	r3, #8
 800057a:	733b      	strb	r3, [r7, #12]
 800057c:	e011      	b.n	80005a2 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800057e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000582:	2b00      	cmp	r3, #0
 8000584:	da07      	bge.n	8000596 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000586:	7b7b      	ldrb	r3, [r7, #13]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b25b      	sxtb	r3, r3
 800058c:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000590:	b25b      	sxtb	r3, r3
 8000592:	737b      	strb	r3, [r7, #13]
 8000594:	e002      	b.n	800059c <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000596:	7b7b      	ldrb	r3, [r7, #13]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800059c:	7b3b      	ldrb	r3, [r7, #12]
 800059e:	3b01      	subs	r3, #1
 80005a0:	733b      	strb	r3, [r7, #12]
 80005a2:	7b3b      	ldrb	r3, [r7, #12]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1ea      	bne.n	800057e <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80005a8:	89fb      	ldrh	r3, [r7, #14]
 80005aa:	3301      	adds	r3, #1
 80005ac:	81fb      	strh	r3, [r7, #14]
 80005ae:	89fa      	ldrh	r2, [r7, #14]
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d3d9      	bcc.n	800056a <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80005b6:	7b7b      	ldrb	r3, [r7, #13]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
 80005d0:	4613      	mov	r3, r2
 80005d2:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	4619      	mov	r1, r3
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ffbb 	bl	8000554 <sensirion_common_generate_crc>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	787b      	ldrb	r3, [r7, #1]
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d002      	beq.n	80005ee <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	e000      	b.n	80005f0 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <sensirion_i2c_read_words_as_bytes>:
    }
    return idx;
}

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	; 0x58
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	4613      	mov	r3, r2
 8000606:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000608:	88bb      	ldrh	r3, [r7, #4]
 800060a:	461a      	mov	r2, r3
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	4413      	add	r3, r2
 8000610:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800061a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f8a2 	bl	800076c <sensirion_i2c_read>
 8000628:	4603      	mov	r3, r0
 800062a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 800062e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000636:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800063a:	e047      	b.n	80006cc <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800063c:	2300      	movs	r3, #0
 800063e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000642:	2300      	movs	r3, #0
 8000644:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000648:	e039      	b.n	80006be <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800064a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800064e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000650:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8000652:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000656:	3302      	adds	r3, #2
 8000658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800065a:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	2102      	movs	r1, #2
 8000662:	f7ff ffaf 	bl	80005c4 <sensirion_common_check_crc>
 8000666:	4603      	mov	r3, r0
 8000668:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 800066c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000674:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000678:	e028      	b.n	80006cc <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 800067a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800067e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000680:	441a      	add	r2, r3
 8000682:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000686:	1c59      	adds	r1, r3, #1
 8000688:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 800068c:	4619      	mov	r1, r3
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	440b      	add	r3, r1
 8000692:	7812      	ldrb	r2, [r2, #0]
 8000694:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000696:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800069a:	3301      	adds	r3, #1
 800069c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800069e:	441a      	add	r2, r3
 80006a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80006a4:	1c59      	adds	r1, r3, #1
 80006a6:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80006aa:	4619      	mov	r1, r3
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	440b      	add	r3, r1
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80006b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80006b8:	3303      	adds	r3, #3
 80006ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80006be:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80006c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d3bf      	bcc.n	800064a <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3758      	adds	r7, #88	; 0x58
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80006e4:	88ba      	ldrh	r2, [r7, #4]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	6839      	ldr	r1, [r7, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff84 	bl	80005f8 <sensirion_i2c_read_words_as_bytes>
 80006f0:	4603      	mov	r3, r0
 80006f2:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 80006f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <sensirion_i2c_read_words+0x2e>
        return ret;
 80006fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000700:	e020      	b.n	8000744 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e017      	b.n	8000738 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	4413      	add	r3, r2
 8000710:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	b21a      	sxth	r2, r3
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	3301      	adds	r3, #1
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b219      	sxth	r1, r3
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	4413      	add	r3, r2
 800072e:	b28a      	uxth	r2, r1
 8000730:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	3301      	adds	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	b29b      	uxth	r3, r3
 800073c:	88ba      	ldrh	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d8e2      	bhi.n	8000708 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(I2C_HandleTypeDef* i2c_handle) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	i2c = i2c_handle;
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <sensirion_i2c_init+0x1c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	200000c4 	.word	0x200000c4

0800076c <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af02      	add	r7, sp, #8
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Receive(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <sensirion_i2c_read+0x34>)
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	b29b      	uxth	r3, r3
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	b299      	uxth	r1, r3
 8000788:	88bb      	ldrh	r3, [r7, #4]
 800078a:	2205      	movs	r2, #5
 800078c:	9200      	str	r2, [sp, #0]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	f004 ffec 	bl	800576c <HAL_I2C_Master_Receive>
 8000794:	4603      	mov	r3, r0
 8000796:	b25b      	sxtb	r3, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000c4 	.word	0x200000c4

080007a4 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Transmit(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <sensirion_i2c_write+0x34>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	b299      	uxth	r1, r3
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	2205      	movs	r2, #5
 80007c4:	9200      	str	r2, [sp, #0]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	f004 fedc 	bl	8005584 <HAL_I2C_Master_Transmit>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b25b      	sxtb	r3, r3
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000c4 	.word	0x200000c4

080007dc <sht4x_measure>:
        return ret;
    sensirion_sleep_usec(sht4x_cmd_measure_delay_us);
    return sht4x_read(temperature, humidity);
}

int16_t sht4x_measure(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    return sensirion_i2c_write(SHT4X_ADDRESS, &sht4x_cmd_measure, 1);
 80007e0:	2201      	movs	r2, #1
 80007e2:	4904      	ldr	r1, [pc, #16]	; (80007f4 <sht4x_measure+0x18>)
 80007e4:	2044      	movs	r0, #68	; 0x44
 80007e6:	f7ff ffdd 	bl	80007a4 <sensirion_i2c_write>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b21b      	sxth	r3, r3
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008

080007f8 <sht4x_read>:

int16_t sht4x_read(int32_t* temperature, int32_t* humidity) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHT4X_ADDRESS, words,
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2202      	movs	r2, #2
 8000808:	4619      	mov	r1, r3
 800080a:	2044      	movs	r0, #68	; 0x44
 800080c:	f7ff ff62 	bl	80006d4 <sensirion_i2c_read_words>
 8000810:	4603      	mov	r3, r0
 8000812:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 65535 - 45
     * Relative Humidity = 125 * (S_RH / 65535) - 6
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 8000814:	893b      	ldrh	r3, [r7, #8]
 8000816:	461a      	mov	r2, r3
 8000818:	f245 5373 	movw	r3, #21875	; 0x5573
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	135b      	asrs	r3, r3, #13
 8000822:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 8000826:	3bc8      	subs	r3, #200	; 0xc8
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	6013      	str	r3, [r2, #0]
    *humidity = ((15625 * (int32_t)words[1]) >> 13) - 6000;
 800082c:	897b      	ldrh	r3, [r7, #10]
 800082e:	461a      	mov	r2, r3
 8000830:	f643 5309 	movw	r3, #15625	; 0x3d09
 8000834:	fb02 f303 	mul.w	r3, r2, r3
 8000838:	135b      	asrs	r3, r3, #13
 800083a:	f5a3 53bb 	sub.w	r3, r3, #5984	; 0x1760
 800083e:	3b10      	subs	r3, #16
 8000840:	683a      	ldr	r2, [r7, #0]
 8000842:	6013      	str	r3, [r2, #0]

    return ret;
 8000844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <sht4x_enable_low_power_mode>:
    uint32_t serial;

    return sht4x_read_serial(&serial);
}

void sht4x_enable_low_power_mode(uint8_t enable_low_power_mode) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
    if (enable_low_power_mode) {
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d007      	beq.n	8000870 <sht4x_enable_low_power_mode+0x20>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_LPM;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <sht4x_enable_low_power_mode+0x3c>)
 8000862:	22e0      	movs	r2, #224	; 0xe0
 8000864:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_LPM_USEC;
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <sht4x_enable_low_power_mode+0x40>)
 8000868:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800086c:	801a      	strh	r2, [r3, #0]
    } else {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
    }
}
 800086e:	e006      	b.n	800087e <sht4x_enable_low_power_mode+0x2e>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <sht4x_enable_low_power_mode+0x3c>)
 8000872:	22fd      	movs	r2, #253	; 0xfd
 8000874:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <sht4x_enable_low_power_mode+0x40>)
 8000878:	f242 7210 	movw	r2, #10000	; 0x2710
 800087c:	801a      	strh	r2, [r3, #0]
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008
 8000890:	2000000a 	.word	0x2000000a

08000894 <platform_stts22h_init>:
#include <stm32wbxx_hal.h>
stmdev_ctx_t dev_ctx;
stmdev_ctx_t *ctx;

bool platform_stts22h_init(I2C_HandleTypeDef* i2c_handle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	  static uint8_t whoamI;
	  /* Initialize mems driver interface */

	  dev_ctx.write_reg = platform_write;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <platform_stts22h_init+0x3c>)
 800089e:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <platform_stts22h_init+0x40>)
 80008a0:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <platform_stts22h_init+0x3c>)
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <platform_stts22h_init+0x44>)
 80008a6:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &i2c_handle;
 80008a8:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <platform_stts22h_init+0x3c>)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	60d3      	str	r3, [r2, #12]
	  ctx = &dev_ctx;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <platform_stts22h_init+0x48>)
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <platform_stts22h_init+0x3c>)
 80008b2:	601a      	str	r2, [r3, #0]
	  /* Check device ID */
	  stts22h_dev_id_get(&whoamI);
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <platform_stts22h_init+0x4c>)
 80008b6:	f000 f966 	bl	8000b86 <stts22h_dev_id_get>

	  return (whoamI == STTS22H_ID ? true : false);
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <platform_stts22h_init+0x4c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2ba0      	cmp	r3, #160	; 0xa0
 80008c0:	bf0c      	ite	eq
 80008c2:	2301      	moveq	r3, #1
 80008c4:	2300      	movne	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000c8 	.word	0x200000c8
 80008d4:	080008e5 	.word	0x080008e5
 80008d8:	0800091b 	.word	0x0800091b
 80008dc:	200000d8 	.word	0x200000d8
 80008e0:	200000dc 	.word	0x200000dc

080008e4 <platform_write>:

int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	461a      	mov	r2, r3
 80008f0:	460b      	mov	r3, r1
 80008f2:	72fb      	strb	r3, [r7, #11]
 80008f4:	4613      	mov	r3, r2
 80008f6:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Receive(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 80008f8:	7afb      	ldrb	r3, [r7, #11]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	b299      	uxth	r1, r3
 8000900:	893b      	ldrh	r3, [r7, #8]
 8000902:	2205      	movs	r2, #5
 8000904:	9200      	str	r2, [sp, #0]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f004 ff2f 	bl	800576c <HAL_I2C_Master_Receive>
 800090e:	4603      	mov	r3, r0
 8000910:	b25b      	sxtb	r3, r3
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <platform_read>:


int32_t platform_read(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len) {
 800091a:	b580      	push	{r7, lr}
 800091c:	b086      	sub	sp, #24
 800091e:	af02      	add	r7, sp, #8
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	461a      	mov	r2, r3
 8000926:	460b      	mov	r3, r1
 8000928:	72fb      	strb	r3, [r7, #11]
 800092a:	4613      	mov	r3, r2
 800092c:	813b      	strh	r3, [r7, #8]
	return (int8_t)HAL_I2C_Master_Transmit(handle, (uint16_t)(Reg<<1), (uint8_t*)Bufp, len,5);
 800092e:	7afb      	ldrb	r3, [r7, #11]
 8000930:	b29b      	uxth	r3, r3
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b299      	uxth	r1, r3
 8000936:	893b      	ldrh	r3, [r7, #8]
 8000938:	2205      	movs	r2, #5
 800093a:	9200      	str	r2, [sp, #0]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f004 fe20 	bl	8005584 <HAL_I2C_Master_Transmit>
 8000944:	4603      	mov	r3, r0
 8000946:	b25b      	sxtb	r3, r3
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg( uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <stts22h_read_reg+0x30>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	685c      	ldr	r4, [r3, #4]
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <stts22h_read_reg+0x30>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68d8      	ldr	r0, [r3, #12]
 800096c:	88bb      	ldrh	r3, [r7, #4]
 800096e:	79f9      	ldrb	r1, [r7, #7]
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	47a0      	blx	r4
 8000974:	60f8      	str	r0, [r7, #12]

  return ret;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	200000d8 	.word	0x200000d8

08000984 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg( uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	80bb      	strh	r3, [r7, #4]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <stts22h_write_reg+0x30>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681c      	ldr	r4, [r3, #0]
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <stts22h_write_reg+0x30>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68d8      	ldr	r0, [r3, #12]
 80009a0:	88bb      	ldrh	r3, [r7, #4]
 80009a2:	79f9      	ldrb	r1, [r7, #7]
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	47a0      	blx	r4
 80009a8:	60f8      	str	r0, [r7, #12]

  return ret;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd90      	pop	{r4, r7, pc}
 80009b4:	200000d8 	.word	0x200000d8

080009b8 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(
                                   stts22h_odr_temp_t val)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2201      	movs	r2, #1
 80009c8:	4619      	mov	r1, r3
 80009ca:	2004      	movs	r0, #4
 80009cc:	f7ff ffc0 	bl	8000950 <stts22h_read_reg>
 80009d0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d107      	bne.n	80009e8 <stts22h_temp_data_rate_set+0x30>
  {
    ret = stts22h_read_reg(STTS22H_SOFTWARE_RESET,
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	2201      	movs	r2, #1
 80009de:	4619      	mov	r1, r3
 80009e0:	200c      	movs	r0, #12
 80009e2:	f7ff ffb5 	bl	8000950 <stts22h_read_reg>
 80009e6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d11d      	bne.n	8000a2a <stts22h_temp_data_rate_set+0x72>
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d11a      	bne.n	8000a2a <stts22h_temp_data_rate_set+0x72>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 80009f4:	7c3b      	ldrb	r3, [r7, #16]
 80009f6:	f043 0302 	orr.w	r3, r3, #2
 80009fa:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	2201      	movs	r2, #1
 8000a02:	4619      	mov	r1, r3
 8000a04:	200c      	movs	r0, #12
 8000a06:	f7ff ffbd 	bl	8000984 <stts22h_write_reg>
 8000a0a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10b      	bne.n	8000a2a <stts22h_temp_data_rate_set+0x72>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000a12:	7c3b      	ldrb	r3, [r7, #16]
 8000a14:	f36f 0341 	bfc	r3, #1, #1
 8000a18:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4619      	mov	r1, r3
 8000a22:	200c      	movs	r0, #12
 8000a24:	f7ff ffae 	bl	8000984 <stts22h_write_reg>
 8000a28:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d008      	beq.n	8000a42 <stts22h_temp_data_rate_set+0x8a>
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b12      	cmp	r3, #18
 8000a34:	d005      	beq.n	8000a42 <stts22h_temp_data_rate_set+0x8a>
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b22      	cmp	r3, #34	; 0x22
 8000a3a:	d002      	beq.n	8000a42 <stts22h_temp_data_rate_set+0x8a>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	2b32      	cmp	r3, #50	; 0x32
 8000a40:	d123      	bne.n	8000a8a <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000a42:	7b3b      	ldrb	r3, [r7, #12]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d11d      	bne.n	8000a8a <stts22h_temp_data_rate_set+0xd2>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d11a      	bne.n	8000a8a <stts22h_temp_data_rate_set+0xd2>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000a54:	7c3b      	ldrb	r3, [r7, #16]
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	2201      	movs	r2, #1
 8000a62:	4619      	mov	r1, r3
 8000a64:	200c      	movs	r0, #12
 8000a66:	f7ff ff8d 	bl	8000984 <stts22h_write_reg>
 8000a6a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10b      	bne.n	8000a8a <stts22h_temp_data_rate_set+0xd2>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000a72:	7c3b      	ldrb	r3, [r7, #16]
 8000a74:	f36f 0341 	bfc	r3, #1, #1
 8000a78:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4619      	mov	r1, r3
 8000a82:	200c      	movs	r0, #12
 8000a84:	f7ff ff7e 	bl	8000984 <stts22h_write_reg>
 8000a88:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d125      	bne.n	8000adc <stts22h_temp_data_rate_set+0x124>
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d122      	bne.n	8000adc <stts22h_temp_data_rate_set+0x124>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 8000a96:	7c3b      	ldrb	r3, [r7, #16]
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000a9e:	7c3b      	ldrb	r3, [r7, #16]
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa4:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4619      	mov	r1, r3
 8000aae:	200c      	movs	r0, #12
 8000ab0:	f7ff ff68 	bl	8000984 <stts22h_write_reg>
 8000ab4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10f      	bne.n	8000adc <stts22h_temp_data_rate_set+0x124>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8000abc:	7c3b      	ldrb	r3, [r7, #16]
 8000abe:	f36f 0341 	bfc	r3, #1, #1
 8000ac2:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 8000ac4:	7c3b      	ldrb	r3, [r7, #16]
 8000ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aca:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(STTS22H_SOFTWARE_RESET,
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	200c      	movs	r0, #12
 8000ad6:	f7ff ff55 	bl	8000984 <stts22h_write_reg>
 8000ada:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d12a      	bne.n	8000b38 <stts22h_temp_data_rate_set+0x180>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	7b3b      	ldrb	r3, [r7, #12]
 8000aec:	f362 0300 	bfi	r3, r2, #0, #1
 8000af0:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	085b      	lsrs	r3, r3, #1
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	7b3b      	ldrb	r3, [r7, #12]
 8000afe:	f362 0382 	bfi	r3, r2, #2, #1
 8000b02:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	089b      	lsrs	r3, r3, #2
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	7b3b      	ldrb	r3, [r7, #12]
 8000b10:	f362 13c7 	bfi	r3, r2, #7, #1
 8000b14:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	091b      	lsrs	r3, r3, #4
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	7b3b      	ldrb	r3, [r7, #12]
 8000b22:	f362 1305 	bfi	r3, r2, #4, #2
 8000b26:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4619      	mov	r1, r3
 8000b30:	2004      	movs	r0, #4
 8000b32:	f7ff ff27 	bl	8000984 <stts22h_write_reg>
 8000b36:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8000b38:	697b      	ldr	r3, [r7, #20]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get( int16_t *val)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b084      	sub	sp, #16
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_TEMP_L_OUT, buff, 2);
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	2202      	movs	r2, #2
 8000b50:	4619      	mov	r1, r3
 8000b52:	2006      	movs	r0, #6
 8000b54:	f7ff fefc 	bl	8000950 <stts22h_read_reg>
 8000b58:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8000b5a:	7a7b      	ldrb	r3, [r7, #9]
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	7a3b      	ldrb	r3, [r7, #8]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	801a      	strh	r2, [r3, #0]

  return ret;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get( uint8_t *buff)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  int32_t ret;

  ret = stts22h_read_reg(STTS22H_WHOAMI, buff, 1);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff fedc 	bl	8000950 <stts22h_read_reg>
 8000b98:	60f8      	str	r0, [r7, #12]

  return ret;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ba4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba8:	3304      	adds	r3, #4

08000baa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000baa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bac:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000bae:	d3f9      	bcc.n	8000ba4 <CopyDataInit>
  bx lr
 8000bb0:	4770      	bx	lr

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000bb2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000bb4:	3004      	adds	r0, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000bb6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>
  bx lr
 8000bba:	4770      	bx	lr

08000bbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000bbe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc0:	f003 fbd2 	bl	8004368 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <LoopForever+0x8>)
 8000bc6:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <LoopForever+0xc>)
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <LoopForever+0x10>)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f7ff ffed 	bl	8000baa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <LoopForever+0x14>)
 8000bd2:	490c      	ldr	r1, [pc, #48]	; (8000c04 <LoopForever+0x18>)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f7ff ffee 	bl	8000bb6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000bda:	480b      	ldr	r0, [pc, #44]	; (8000c08 <LoopForever+0x1c>)
 8000bdc:	490b      	ldr	r1, [pc, #44]	; (8000c0c <LoopForever+0x20>)
 8000bde:	2300      	movs	r3, #0
 8000be0:	f7ff ffe9 	bl	8000bb6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000be4:	f00c fec2 	bl	800d96c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000be8:	f002 fda8 	bl	800373c <main>

08000bec <LoopForever>:

LoopForever:
  b LoopForever
 8000bec:	e7fe      	b.n	8000bec <LoopForever>
 8000bee:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000bf0:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000094 	.word	0x20000094
 8000bfc:	0800f940 	.word	0x0800f940
  INIT_BSS _sbss, _ebss
 8000c00:	200000a8 	.word	0x200000a8
 8000c04:	200019c8 	.word	0x200019c8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c08:	200300e8 	.word	0x200300e8
 8000c0c:	20030c6a 	.word	0x20030c6a

08000c10 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_IRQHandler>

08000c12 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	60f8      	str	r0, [r7, #12]
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	e00a      	b.n	8000c3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c24:	f3af 8000 	nop.w
 8000c28:	4601      	mov	r1, r0
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1c5a      	adds	r2, r3, #1
 8000c2e:	60ba      	str	r2, [r7, #8]
 8000c30:	b2ca      	uxtb	r2, r1
 8000c32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3301      	adds	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	dbf0      	blt.n	8000c24 <_read+0x12>
  }

  return len;
 8000c42:	687b      	ldr	r3, [r7, #4]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c74:	605a      	str	r2, [r3, #4]
  return 0;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_isatty>:

int _isatty(int file)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c8c:	2301      	movs	r3, #1
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b085      	sub	sp, #20
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce4:	f00c fe3c 	bl	800d960 <__errno>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <_sbrk+0x64>)
 8000d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20024000 	.word	0x20024000
 8000d14:	00002000 	.word	0x00002000
 8000d18:	200000e0 	.word	0x200000e0
 8000d1c:	200019c8 	.word	0x200019c8

08000d20 <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	f009 fff2 	bl	800ad1c <otCoapSendResponseWithParameters>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <APP_THREAD_Init>:
const uint8_t device_type = 1;

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_THREAD_INIT_1 */

  /* USER CODE END APP_THREAD_INIT_1 */
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f00b fee1 	bl	800cb14 <UTIL_LPM_SetStopMode>
  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8000d52:	f000 fa1b 	bl	800118c <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000d56:	481d      	ldr	r0, [pc, #116]	; (8000dcc <APP_THREAD_Init+0x88>)
 8000d58:	f000 fc6c 	bl	8001634 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f00b ff08 	bl	800cb74 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8000d64:	f000 fd8c 	bl	8001880 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8000d68:	f000 fd72 	bl	8001850 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000d6c:	f00b f854 	bl	800be18 <SHCI_C2_THREAD_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
 8000d74:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <APP_THREAD_Init+0x8c>)
 8000d76:	2100      	movs	r1, #0
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f00c f827 	bl	800cdcc <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN INIT TASKS */
  APP_THREAD_SetSleepyEndDeviceMode();
 8000d7e:	f000 f8e7 	bl	8000f50 <APP_THREAD_SetSleepyEndDeviceMode>
  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 8000d82:	f000 f939 	bl	8000ff8 <APP_THREAD_DeviceConfig>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <APP_THREAD_Init+0x90>)
 8000d8c:	f004 faf2 	bl	8005374 <HAL_GPIO_WritePin>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &coapMessageTimerId, hw_ts_Repeated, APP_THREAD_SendCoapMsg);
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <APP_THREAD_Init+0x94>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	4911      	ldr	r1, [pc, #68]	; (8000ddc <APP_THREAD_Init+0x98>)
 8000d96:	2000      	movs	r0, #0
 8000d98:	f002 f9ae 	bl	80030f8 <HW_TS_Create>
  HW_TS_Start(coapMessageTimerId, coapMessageIntervalMs);
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <APP_THREAD_Init+0x98>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f642 0205 	movw	r2, #10245	; 0x2805
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 faa4 	bl	80032f4 <HW_TS_Start>
  //APP_THREAD_InitPayloadWrite();

  otLinkGetFactoryAssignedIeeeEui64(NULL, &eui64);
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <APP_THREAD_Init+0x9c>)
 8000dae:	2000      	movs	r0, #0
 8000db0:	f00a f8f7 	bl	800afa2 <otLinkGetFactoryAssignedIeeeEui64>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000db4:	2100      	movs	r1, #0
 8000db6:	2002      	movs	r0, #2
 8000db8:	f00b feac 	bl	800cb14 <UTIL_LPM_SetStopMode>

  /* Allow the 802_15_4 IP to enter in low power mode */
  SHCI_C2_RADIO_AllowLowPower(THREAD_IP,TRUE);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f00b f856 	bl	800be70 <SHCI_C2_RADIO_AllowLowPower>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200300e8 	.word	0x200300e8
 8000dd0:	08001915 	.word	0x08001915
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	080013f1 	.word	0x080013f1
 8000ddc:	200002fc 	.word	0x200002fc
 8000de0:	20000430 	.word	0x20000430

08000de4 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b16      	cmp	r3, #22
 8000df2:	f200 8081 	bhi.w	8000ef8 <APP_THREAD_Error+0x114>
 8000df6:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <APP_THREAD_Error+0x18>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000e59 	.word	0x08000e59
 8000e00:	08000e63 	.word	0x08000e63
 8000e04:	08000e6d 	.word	0x08000e6d
 8000e08:	08000e77 	.word	0x08000e77
 8000e0c:	08000e81 	.word	0x08000e81
 8000e10:	08000e8b 	.word	0x08000e8b
 8000e14:	08000e95 	.word	0x08000e95
 8000e18:	08000e9f 	.word	0x08000e9f
 8000e1c:	08000eb3 	.word	0x08000eb3
 8000e20:	08000ebd 	.word	0x08000ebd
 8000e24:	08000ec7 	.word	0x08000ec7
 8000e28:	08000ed1 	.word	0x08000ed1
 8000e2c:	08000ef9 	.word	0x08000ef9
 8000e30:	08000edb 	.word	0x08000edb
 8000e34:	08000ee5 	.word	0x08000ee5
 8000e38:	08000ef9 	.word	0x08000ef9
 8000e3c:	08000ef9 	.word	0x08000ef9
 8000e40:	08000ef9 	.word	0x08000ef9
 8000e44:	08000ef9 	.word	0x08000ef9
 8000e48:	08000ef9 	.word	0x08000ef9
 8000e4c:	08000eef 	.word	0x08000eef
 8000e50:	08000ef9 	.word	0x08000ef9
 8000e54:	08000ea9 	.word	0x08000ea9
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	482c      	ldr	r0, [pc, #176]	; (8000f0c <APP_THREAD_Error+0x128>)
 8000e5c:	f000 f982 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000e60:	e04f      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8000e62:	6839      	ldr	r1, [r7, #0]
 8000e64:	482a      	ldr	r0, [pc, #168]	; (8000f10 <APP_THREAD_Error+0x12c>)
 8000e66:	f000 f97d 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000e6a:	e04a      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	4829      	ldr	r0, [pc, #164]	; (8000f14 <APP_THREAD_Error+0x130>)
 8000e70:	f000 f978 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000e74:	e045      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8000e76:	6839      	ldr	r1, [r7, #0]
 8000e78:	4827      	ldr	r0, [pc, #156]	; (8000f18 <APP_THREAD_Error+0x134>)
 8000e7a:	f000 f973 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000e7e:	e040      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8000e80:	6839      	ldr	r1, [r7, #0]
 8000e82:	4826      	ldr	r0, [pc, #152]	; (8000f1c <APP_THREAD_Error+0x138>)
 8000e84:	f000 f96e 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000e88:	e03b      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8000e8a:	6839      	ldr	r1, [r7, #0]
 8000e8c:	4824      	ldr	r0, [pc, #144]	; (8000f20 <APP_THREAD_Error+0x13c>)
 8000e8e:	f000 f969 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000e92:	e036      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8000e94:	6839      	ldr	r1, [r7, #0]
 8000e96:	4823      	ldr	r0, [pc, #140]	; (8000f24 <APP_THREAD_Error+0x140>)
 8000e98:	f000 f964 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000e9c:	e031      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_NETWORK_KEY :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ",ErrCode);
 8000e9e:	6839      	ldr	r1, [r7, #0]
 8000ea0:	4821      	ldr	r0, [pc, #132]	; (8000f28 <APP_THREAD_Error+0x144>)
 8000ea2:	f000 f95f 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000ea6:	e02c      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8000ea8:	6839      	ldr	r1, [r7, #0]
 8000eaa:	4820      	ldr	r0, [pc, #128]	; (8000f2c <APP_THREAD_Error+0x148>)
 8000eac:	f000 f95a 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000eb0:	e027      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  /* USER CODE BEGIN APP_THREAD_Error_2 */
  case ERR_THREAD_COAP_START :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ",ErrCode);
 8000eb2:	6839      	ldr	r1, [r7, #0]
 8000eb4:	481e      	ldr	r0, [pc, #120]	; (8000f30 <APP_THREAD_Error+0x14c>)
 8000eb6:	f000 f955 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000eba:	e022      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_ADD_RESSOURCE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",ErrCode);
 8000ebc:	6839      	ldr	r1, [r7, #0]
 8000ebe:	481d      	ldr	r0, [pc, #116]	; (8000f34 <APP_THREAD_Error+0x150>)
 8000ec0:	f000 f950 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000ec4:	e01d      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MESSAGE_READ :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ",ErrCode);
 8000ec6:	6839      	ldr	r1, [r7, #0]
 8000ec8:	481b      	ldr	r0, [pc, #108]	; (8000f38 <APP_THREAD_Error+0x154>)
 8000eca:	f000 f94b 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000ece:	e018      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_RESPONSE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",ErrCode);
 8000ed0:	6839      	ldr	r1, [r7, #0]
 8000ed2:	481a      	ldr	r0, [pc, #104]	; (8000f3c <APP_THREAD_Error+0x158>)
 8000ed4:	f000 f946 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000ed8:	e013      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_APPEND :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ",ErrCode);
 8000eda:	6839      	ldr	r1, [r7, #0]
 8000edc:	4818      	ldr	r0, [pc, #96]	; (8000f40 <APP_THREAD_Error+0x15c>)
 8000ede:	f000 f941 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000ee2:	e00e      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_REQUEST :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ",ErrCode);
 8000ee4:	6839      	ldr	r1, [r7, #0]
 8000ee6:	4817      	ldr	r0, [pc, #92]	; (8000f44 <APP_THREAD_Error+0x160>)
 8000ee8:	f000 f93c 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000eec:	e009      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MSG_COMPARE_FAILED:
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",ErrCode);
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	4815      	ldr	r0, [pc, #84]	; (8000f48 <APP_THREAD_Error+0x164>)
 8000ef2:	f000 f937 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000ef6:	e004      	b.n	8000f02 <APP_THREAD_Error+0x11e>
  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <APP_THREAD_Error+0x168>)
 8000efc:	f000 f932 	bl	8001164 <APP_THREAD_TraceError>
    break;
 8000f00:	bf00      	nop
  }
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	0800ed94 	.word	0x0800ed94
 8000f10:	0800edb8 	.word	0x0800edb8
 8000f14:	0800eddc 	.word	0x0800eddc
 8000f18:	0800edfc 	.word	0x0800edfc
 8000f1c:	0800ee1c 	.word	0x0800ee1c
 8000f20:	0800ee3c 	.word	0x0800ee3c
 8000f24:	0800ee58 	.word	0x0800ee58
 8000f28:	0800ee84 	.word	0x0800ee84
 8000f2c:	0800eea8 	.word	0x0800eea8
 8000f30:	0800eecc 	.word	0x0800eecc
 8000f34:	0800eeec 	.word	0x0800eeec
 8000f38:	0800ef14 	.word	0x0800ef14
 8000f3c:	0800ef38 	.word	0x0800ef38
 8000f40:	0800ef60 	.word	0x0800ef60
 8000f44:	0800ef80 	.word	0x0800ef80
 8000f48:	0800efa8 	.word	0x0800efa8
 8000f4c:	0800efd0 	.word	0x0800efd0

08000f50 <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
  otError   error = OT_ERROR_NONE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]

  /* Set the pool period to 5 sec. It means that when the device will enter
   * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
   * This message will act as keep alive message.
   */
  otLinkSetPollPeriod(NULL, 2000);
 8000f5a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f00a f87b 	bl	800b05a <otLinkSetPollPeriod>

  /* Set the sleepy end device mode */
  OT_LinkMode.mRxOnWhenIdle = 0;
 8000f64:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000f66:	7813      	ldrb	r3, [r2, #0]
 8000f68:	f36f 0300 	bfc	r3, #0, #1
 8000f6c:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mDeviceType = 0;
 8000f6e:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000f70:	7813      	ldrb	r3, [r2, #0]
 8000f72:	f36f 0341 	bfc	r3, #1, #1
 8000f76:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mNetworkData = 1U;
 8000f78:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000f7a:	7813      	ldrb	r3, [r2, #0]
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	7013      	strb	r3, [r2, #0]

  error = otThreadSetLinkMode(NULL,OT_LinkMode);
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000f84:	7819      	ldrb	r1, [r3, #0]
 8000f86:	2000      	movs	r0, #0
 8000f88:	f00b f9a2 	bl	800c2d0 <otThreadSetLinkMode>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d004      	beq.n	8000fa0 <APP_THREAD_SetSleepyEndDeviceMode+0x50>
    APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2011      	movs	r0, #17
 8000f9c:	f7ff ff22 	bl	8000de4 <APP_THREAD_Error>
   * to modify its mode to MTD.
   * As a result, you need to first detach from the network before switching from FTD to MTD at runtime,
   * then reattach.
   *
   */
  if (sleepyEndDeviceFlag == FALSE)
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <APP_THREAD_SetSleepyEndDeviceMode+0xa4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d11e      	bne.n	8000fe6 <APP_THREAD_SetSleepyEndDeviceMode+0x96>
  {
    error = otThreadSetEnabled(NULL, false);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2000      	movs	r0, #0
 8000fac:	f00b f960 	bl	800c270 <otThreadSetEnabled>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <APP_THREAD_SetSleepyEndDeviceMode+0x74>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f7ff ff10 	bl	8000de4 <APP_THREAD_Error>
    error = otThreadSetEnabled(NULL, true);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f00b f952 	bl	800c270 <otThreadSetEnabled>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <APP_THREAD_SetSleepyEndDeviceMode+0x90>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2011      	movs	r0, #17
 8000fdc:	f7ff ff02 	bl	8000de4 <APP_THREAD_Error>
    sleepyEndDeviceFlag = TRUE;
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <APP_THREAD_SetSleepyEndDeviceMode+0xa4>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000e4 	.word	0x200000e4
 8000ff4:	200000e8 	.word	0x200000e8

08000ff8 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
  otError error;
  otNetworkKey networkKey = {{0xb3, 0x08, 0x8e, 0x0c, 0x4c, 0x97, 0x70, 0xa9,
 8000ffe:	4b42      	ldr	r3, [pc, #264]	; (8001108 <APP_THREAD_DeviceConfig+0x110>)
 8001000:	1d3c      	adds	r4, r7, #4
 8001002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          0xca, 0x86, 0x85, 0xab, 0x99, 0xda, 0xc9, 0x51}};

  error = otInstanceErasePersistentInfo(NULL);
 8001008:	2000      	movs	r0, #0
 800100a:	f009 ff41 	bl	800ae90 <otInstanceErasePersistentInfo>
 800100e:	4603      	mov	r3, r0
 8001010:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d004      	beq.n	8001022 <APP_THREAD_DeviceConfig+0x2a>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	4619      	mov	r1, r3
 800101c:	2006      	movs	r0, #6
 800101e:	f7ff fee1 	bl	8000de4 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8001022:	2000      	movs	r0, #0
 8001024:	f009 fed8 	bl	800add8 <otInstanceFinalize>
  otInstanceInitSingle();
 8001028:	f009 feaf 	bl	800ad8a <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800102c:	2200      	movs	r2, #0
 800102e:	4937      	ldr	r1, [pc, #220]	; (800110c <APP_THREAD_DeviceConfig+0x114>)
 8001030:	2000      	movs	r0, #0
 8001032:	f009 fef7 	bl	800ae24 <otSetStateChangedCallback>
 8001036:	4603      	mov	r3, r0
 8001038:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <APP_THREAD_DeviceConfig+0x52>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	4619      	mov	r1, r3
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff fecd 	bl	8000de4 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 800104a:	210e      	movs	r1, #14
 800104c:	2000      	movs	r0, #0
 800104e:	f009 ff78 	bl	800af42 <otLinkSetChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <APP_THREAD_DeviceConfig+0x6e>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	4619      	mov	r1, r3
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff febf 	bl	8000de4 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8001066:	f241 1111 	movw	r1, #4369	; 0x1111
 800106a:	2000      	movs	r0, #0
 800106c:	f009 ffc5 	bl	800affa <otLinkSetPanId>
 8001070:	4603      	mov	r3, r0
 8001072:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <APP_THREAD_DeviceConfig+0x8c>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	4619      	mov	r1, r3
 800107e:	2003      	movs	r0, #3
 8001080:	f7ff feb0 	bl	8000de4 <APP_THREAD_Error>
  }
  error = otThreadSetNetworkKey(NULL, &networkKey);
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4619      	mov	r1, r3
 8001088:	2000      	movs	r0, #0
 800108a:	f00b f962 	bl	800c352 <otThreadSetNetworkKey>
 800108e:	4603      	mov	r3, r0
 8001090:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <APP_THREAD_DeviceConfig+0xaa>
  {
    APP_THREAD_Error(ERR_THREAD_SET_NETWORK_KEY,error);
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	4619      	mov	r1, r3
 800109c:	2007      	movs	r0, #7
 800109e:	f7ff fea1 	bl	8000de4 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 80010a2:	2101      	movs	r1, #1
 80010a4:	2000      	movs	r0, #0
 80010a6:	f009 ff1c 	bl	800aee2 <otIp6SetEnabled>
 80010aa:	4603      	mov	r3, r0
 80010ac:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <APP_THREAD_DeviceConfig+0xc6>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	4619      	mov	r1, r3
 80010b8:	2004      	movs	r0, #4
 80010ba:	f7ff fe93 	bl	8000de4 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 80010be:	2101      	movs	r1, #1
 80010c0:	2000      	movs	r0, #0
 80010c2:	f00b f8d5 	bl	800c270 <otThreadSetEnabled>
 80010c6:	4603      	mov	r3, r0
 80010c8:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <APP_THREAD_DeviceConfig+0xe2>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	4619      	mov	r1, r3
 80010d4:	2005      	movs	r0, #5
 80010d6:	f7ff fe85 	bl	8000de4 <APP_THREAD_Error>
  }
  /* USER CODE BEGIN DEVICECONFIG */
  /* Start the COAP server */
  error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 80010da:	f241 6133 	movw	r1, #5683	; 0x1633
 80010de:	2000      	movs	r0, #0
 80010e0:	f009 fdc0 	bl	800ac64 <otCoapStart>
 80010e4:	4603      	mov	r3, r0
 80010e6:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d004      	beq.n	80010f8 <APP_THREAD_DeviceConfig+0x100>
  {
    APP_THREAD_Error(ERR_THREAD_COAP_START,error);
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	4619      	mov	r1, r3
 80010f2:	2008      	movs	r0, #8
 80010f4:	f7ff fe76 	bl	8000de4 <APP_THREAD_Error>
  }
  /* Add COAP resources */
  otCoapAddResource(NULL, &OT_Ressource);
 80010f8:	4905      	ldr	r1, [pc, #20]	; (8001110 <APP_THREAD_DeviceConfig+0x118>)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f009 fde2 	bl	800acc4 <otCoapAddResource>

  /* USER CODE END DEVICECONFIG */
}
 8001100:	bf00      	nop
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	0800efe0 	.word	0x0800efe0
 800110c:	08001115 	.word	0x08001115
 8001110:	2000000c 	.word	0x2000000c

08001114 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */
  
  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d016      	beq.n	8001156 <APP_THREAD_StateNotif+0x42>
  {
    switch (otThreadGetDeviceRole(NULL))
 8001128:	2000      	movs	r0, #0
 800112a:	f00b f941 	bl	800c3b0 <otThreadGetDeviceRole>
 800112e:	4603      	mov	r3, r0
 8001130:	2b04      	cmp	r3, #4
 8001132:	d812      	bhi.n	800115a <APP_THREAD_StateNotif+0x46>
 8001134:	a201      	add	r2, pc, #4	; (adr r2, 800113c <APP_THREAD_StateNotif+0x28>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	0800115b 	.word	0x0800115b
 8001140:	0800115b 	.word	0x0800115b
 8001144:	08001151 	.word	0x08001151
 8001148:	0800115b 	.word	0x0800115b
 800114c:	0800115b 	.word	0x0800115b
       /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */

       break;
    case OT_DEVICE_ROLE_CHILD:
       /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
    	APP_THREAD_SetSleepyEndDeviceMode();
 8001150:	f7ff fefe 	bl	8000f50 <APP_THREAD_SetSleepyEndDeviceMode>
       break;
 8001154:	e002      	b.n	800115c <APP_THREAD_StateNotif+0x48>
    default:
       /* USER CODE BEGIN DEFAULT */
       /* USER CODE END DEFAULT */
       break;
    }
  }
 8001156:	bf00      	nop
 8001158:	e000      	b.n	800115c <APP_THREAD_StateNotif+0x48>
       break;
 800115a:	bf00      	nop
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af02      	add	r7, sp, #8
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <APP_THREAD_TraceError+0x24>)
 8001176:	2101      	movs	r1, #1
 8001178:	2000      	movs	r0, #0
 800117a:	f003 f855 	bl	8004228 <logApplication>

  /* USER CODE END TRACE_ERROR */
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	0800eff0 	.word	0x0800eff0

0800118c <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f00a fe88 	bl	800beac <SHCI_GetWirelessFwInfo>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80011a2:	2101      	movs	r1, #1
 80011a4:	2016      	movs	r0, #22
 80011a6:	f7ff fe1d 	bl	8000de4 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 80011aa:	e07c      	b.n	80012a6 <APP_THREAD_CheckWirelessFirmwareInfo+0x11a>
    APP_DBG("*****************WIRELESS COPROCESSOR FW*******************");
 80011ac:	4a40      	ldr	r2, [pc, #256]	; (80012b0 <APP_THREAD_CheckWirelessFirmwareInfo+0x124>)
 80011ae:	2101      	movs	r1, #1
 80011b0:	2000      	movs	r0, #0
 80011b2:	f003 f839 	bl	8004228 <logApplication>
    APP_DBG("STACK VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	461a      	mov	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	789b      	ldrb	r3, [r3, #2]
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	9200      	str	r2, [sp, #0]
 80011ca:	460b      	mov	r3, r1
 80011cc:	4a39      	ldr	r2, [pc, #228]	; (80012b4 <APP_THREAD_CheckWirelessFirmwareInfo+0x128>)
 80011ce:	2101      	movs	r1, #1
 80011d0:	2000      	movs	r0, #0
 80011d2:	f003 f829 	bl	8004228 <logApplication>
    APP_DBG("Version release type: %d", p_wireless_info->VersionReleaseType);
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	791b      	ldrb	r3, [r3, #4]
 80011da:	4a37      	ldr	r2, [pc, #220]	; (80012b8 <APP_THREAD_CheckWirelessFirmwareInfo+0x12c>)
 80011dc:	2101      	movs	r1, #1
 80011de:	2000      	movs	r0, #0
 80011e0:	f003 f822 	bl	8004228 <logApplication>
    APP_DBG("Version branch type: %d", p_wireless_info->VersionBranch);
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	78db      	ldrb	r3, [r3, #3]
 80011e8:	4a34      	ldr	r2, [pc, #208]	; (80012bc <APP_THREAD_CheckWirelessFirmwareInfo+0x130>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	2000      	movs	r0, #0
 80011ee:	f003 f81b 	bl	8004228 <logApplication>
    APP_DBG("FUS VERSION ID = %d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	7a9b      	ldrb	r3, [r3, #10]
 80011f6:	4619      	mov	r1, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	7adb      	ldrb	r3, [r3, #11]
 80011fc:	461a      	mov	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	7b1b      	ldrb	r3, [r3, #12]
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	9200      	str	r2, [sp, #0]
 8001206:	460b      	mov	r3, r1
 8001208:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <APP_THREAD_CheckWirelessFirmwareInfo+0x134>)
 800120a:	2101      	movs	r1, #1
 800120c:	2000      	movs	r0, #0
 800120e:	f003 f80b 	bl	8004228 <logApplication>
    APP_DBG("Stack type: %d", p_wireless_info->StackType);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	7a5b      	ldrb	r3, [r3, #9]
 8001216:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <APP_THREAD_CheckWirelessFirmwareInfo+0x138>)
 8001218:	2101      	movs	r1, #1
 800121a:	2000      	movs	r0, #0
 800121c:	f003 f804 	bl	8004228 <logApplication>
    APP_DBG("MEMSIZE flash: %d", p_wireless_info->MemorySizeFlash);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	7a1b      	ldrb	r3, [r3, #8]
 8001224:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <APP_THREAD_CheckWirelessFirmwareInfo+0x13c>)
 8001226:	2101      	movs	r1, #1
 8001228:	2000      	movs	r0, #0
 800122a:	f002 fffd 	bl	8004228 <logApplication>
    APP_DBG("MEMSIZE sram1: %d", p_wireless_info->MemorySizeSram1);
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	79db      	ldrb	r3, [r3, #7]
 8001232:	4a26      	ldr	r2, [pc, #152]	; (80012cc <APP_THREAD_CheckWirelessFirmwareInfo+0x140>)
 8001234:	2101      	movs	r1, #1
 8001236:	2000      	movs	r0, #0
 8001238:	f002 fff6 	bl	8004228 <logApplication>
    APP_DBG("MEMSIZE sram2a: %d", p_wireless_info->MemorySizeSram2A);
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	799b      	ldrb	r3, [r3, #6]
 8001240:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <APP_THREAD_CheckWirelessFirmwareInfo+0x144>)
 8001242:	2101      	movs	r1, #1
 8001244:	2000      	movs	r0, #0
 8001246:	f002 ffef 	bl	8004228 <logApplication>
    APP_DBG("MEMSIZE sram2b: %d", p_wireless_info->MemorySizeSram2B);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	795b      	ldrb	r3, [r3, #5]
 800124e:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <APP_THREAD_CheckWirelessFirmwareInfo+0x148>)
 8001250:	2101      	movs	r1, #1
 8001252:	2000      	movs	r0, #0
 8001254:	f002 ffe8 	bl	8004228 <logApplication>
    switch(p_wireless_info->StackType)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	7a5b      	ldrb	r3, [r3, #9]
 800125c:	2b50      	cmp	r3, #80	; 0x50
 800125e:	d012      	beq.n	8001286 <APP_THREAD_CheckWirelessFirmwareInfo+0xfa>
 8001260:	2b50      	cmp	r3, #80	; 0x50
 8001262:	dc16      	bgt.n	8001292 <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
 8001264:	2b10      	cmp	r3, #16
 8001266:	d002      	beq.n	800126e <APP_THREAD_CheckWirelessFirmwareInfo+0xe2>
 8001268:	2b11      	cmp	r3, #17
 800126a:	d006      	beq.n	800127a <APP_THREAD_CheckWirelessFirmwareInfo+0xee>
 800126c:	e011      	b.n	8001292 <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
      APP_DBG("FW Type : Thread FTD");
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <APP_THREAD_CheckWirelessFirmwareInfo+0x14c>)
 8001270:	2101      	movs	r1, #1
 8001272:	2000      	movs	r0, #0
 8001274:	f002 ffd8 	bl	8004228 <logApplication>
      break;
 8001278:	e010      	b.n	800129c <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Thread MTD");
 800127a:	4a18      	ldr	r2, [pc, #96]	; (80012dc <APP_THREAD_CheckWirelessFirmwareInfo+0x150>)
 800127c:	2101      	movs	r1, #1
 800127e:	2000      	movs	r0, #0
 8001280:	f002 ffd2 	bl	8004228 <logApplication>
      break;
 8001284:	e00a      	b.n	800129c <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8001286:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <APP_THREAD_CheckWirelessFirmwareInfo+0x154>)
 8001288:	2101      	movs	r1, #1
 800128a:	2000      	movs	r0, #0
 800128c:	f002 ffcc 	bl	8004228 <logApplication>
      break;
 8001290:	e004      	b.n	800129c <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8001292:	2101      	movs	r1, #1
 8001294:	2016      	movs	r0, #22
 8001296:	f7ff fda5 	bl	8000de4 <APP_THREAD_Error>
      break;
 800129a:	bf00      	nop
    APP_DBG("**********************************************************");
 800129c:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <APP_THREAD_CheckWirelessFirmwareInfo+0x158>)
 800129e:	2101      	movs	r1, #1
 80012a0:	2000      	movs	r0, #0
 80012a2:	f002 ffc1 	bl	8004228 <logApplication>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	0800f014 	.word	0x0800f014
 80012b4:	0800f050 	.word	0x0800f050
 80012b8:	0800f06c 	.word	0x0800f06c
 80012bc:	0800f088 	.word	0x0800f088
 80012c0:	0800f0a0 	.word	0x0800f0a0
 80012c4:	0800f0bc 	.word	0x0800f0bc
 80012c8:	0800f0cc 	.word	0x0800f0cc
 80012cc:	0800f0e0 	.word	0x0800f0e0
 80012d0:	0800f0f4 	.word	0x0800f0f4
 80012d4:	0800f108 	.word	0x0800f108
 80012d8:	0800f11c 	.word	0x0800f11c
 80012dc:	0800f134 	.word	0x0800f134
 80012e0:	0800f14c 	.word	0x0800f14c
 80012e4:	0800f178 	.word	0x0800f178

080012e8 <APP_THREAD_CoapPermissionsRequestHandler>:
 * @retval None
 */
static void APP_THREAD_CoapPermissionsRequestHandler(void *pContext,
		otMessage *pMessage, const otMessageInfo *pMessageInfo)

{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]

  
  APP_DBG(" **********************************************************************************"
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <APP_THREAD_CoapPermissionsRequestHandler+0xf0>)
 80012f8:	2101      	movs	r1, #1
 80012fa:	2000      	movs	r0, #0
 80012fc:	f002 ff94 	bl	8004228 <logApplication>
		  "******************************************************************************"
		  "***********************************************************************",pContext);
  /* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
  //GPIO_PinOutSet(IP_LED_PORT, IP_LED_PIN);
  //printIPv6Addr(&aMessageInfo->mPeerAddr);
  brAddr = pMessageInfo->mPeerAddr;
 8001300:	4a36      	ldr	r2, [pc, #216]	; (80013dc <APP_THREAD_CoapPermissionsRequestHandler+0xf4>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4614      	mov	r4, r2
 8001306:	3310      	adds	r3, #16
 8001308:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  otError error = OT_ERROR_NONE;
 800130e:	2300      	movs	r3, #0
 8001310:	77fb      	strb	r3, [r7, #31]
  otMessage *responseMessage;
  otCoapCode responseCode = OT_COAP_CODE_CHANGED;
 8001312:	2344      	movs	r3, #68	; 0x44
 8001314:	77bb      	strb	r3, [r7, #30]
  otCoapCode messageCode = otCoapMessageGetCode(pMessage);
 8001316:	68b8      	ldr	r0, [r7, #8]
 8001318:	f009 fbae 	bl	800aa78 <otCoapMessageGetCode>
 800131c:	4603      	mov	r3, r0
 800131e:	777b      	strb	r3, [r7, #29]

  responseMessage = otCoapNewMessage((otInstance*) pContext, NULL);
 8001320:	2100      	movs	r1, #0
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f009 fa40 	bl	800a7a8 <otCoapNewMessage>
 8001328:	61b8      	str	r0, [r7, #24]

  otCoapMessageInitResponse(responseMessage, pMessage,
 800132a:	7fbb      	ldrb	r3, [r7, #30]
 800132c:	2202      	movs	r2, #2
 800132e:	68b9      	ldr	r1, [r7, #8]
 8001330:	69b8      	ldr	r0, [r7, #24]
 8001332:	f009 fa9c 	bl	800a86e <otCoapMessageInitResponse>
                            OT_COAP_TYPE_ACKNOWLEDGMENT, responseCode);
  otCoapMessageSetToken(responseMessage, otCoapMessageGetToken(pMessage),
 8001336:	68b8      	ldr	r0, [r7, #8]
 8001338:	f009 fc2a 	bl	800ab90 <otCoapMessageGetToken>
 800133c:	4604      	mov	r4, r0
 800133e:	68b8      	ldr	r0, [r7, #8]
 8001340:	f009 fbf8 	bl	800ab34 <otCoapMessageGetTokenLength>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4621      	mov	r1, r4
 800134a:	69b8      	ldr	r0, [r7, #24]
 800134c:	f009 facd 	bl	800a8ea <otCoapMessageSetToken>
                        otCoapMessageGetTokenLength(pMessage));
  otCoapMessageSetPayloadMarker(responseMessage);
 8001350:	69b8      	ldr	r0, [r7, #24]
 8001352:	f009 fb63 	bl	800aa1c <otCoapMessageSetPayloadMarker>


  uint16_t offset = otMessageGetOffset(pMessage);
 8001356:	68b8      	ldr	r0, [r7, #8]
 8001358:	f009 fedb 	bl	800b112 <otMessageGetOffset>
 800135c:	4603      	mov	r3, r0
 800135e:	82fb      	strh	r3, [r7, #22]
  otMessageRead(pMessage, offset, resource_name, sizeof(resource_name)-1);
 8001360:	8af9      	ldrh	r1, [r7, #22]
 8001362:	231f      	movs	r3, #31
 8001364:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <APP_THREAD_CoapPermissionsRequestHandler+0xf8>)
 8001366:	68b8      	ldr	r0, [r7, #8]
 8001368:	f009 ff3c 	bl	800b1e4 <otMessageRead>
  //otCliOutputFormat("Unique resource ID: %s\n", resource_name);

  if (OT_COAP_CODE_GET == messageCode)
 800136c:	7f7b      	ldrb	r3, [r7, #29]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d10e      	bne.n	8001390 <APP_THREAD_CoapPermissionsRequestHandler+0xa8>
  {

      error = otMessageAppend(responseMessage, "ack", 3);
 8001372:	2203      	movs	r2, #3
 8001374:	491b      	ldr	r1, [pc, #108]	; (80013e4 <APP_THREAD_CoapPermissionsRequestHandler+0xfc>)
 8001376:	69b8      	ldr	r0, [r7, #24]
 8001378:	f009 fefb 	bl	800b172 <otMessageAppend>
 800137c:	4603      	mov	r3, r0
 800137e:	77fb      	strb	r3, [r7, #31]
      error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	69b9      	ldr	r1, [r7, #24]
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f7ff fccb 	bl	8000d20 <otCoapSendResponse>
 800138a:	4603      	mov	r3, r0
 800138c:	77fb      	strb	r3, [r7, #31]
 800138e:	e011      	b.n	80013b4 <APP_THREAD_CoapPermissionsRequestHandler+0xcc>
                                 pMessageInfo);
  }
  else
  {
      error = otMessageAppend(responseMessage, "nack", 4);
 8001390:	2204      	movs	r2, #4
 8001392:	4915      	ldr	r1, [pc, #84]	; (80013e8 <APP_THREAD_CoapPermissionsRequestHandler+0x100>)
 8001394:	69b8      	ldr	r0, [r7, #24]
 8001396:	f009 feec 	bl	800b172 <otMessageAppend>
 800139a:	4603      	mov	r3, r0
 800139c:	77fb      	strb	r3, [r7, #31]
      otCoapMessageSetCode(responseMessage, OT_COAP_CODE_METHOD_NOT_ALLOWED);
 800139e:	2185      	movs	r1, #133	; 0x85
 80013a0:	69b8      	ldr	r0, [r7, #24]
 80013a2:	f009 fb97 	bl	800aad4 <otCoapMessageSetCode>
      error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	69b9      	ldr	r1, [r7, #24]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f7ff fcb8 	bl	8000d20 <otCoapSendResponse>
 80013b0:	4603      	mov	r3, r0
 80013b2:	77fb      	strb	r3, [r7, #31]
                                 pMessageInfo);
  }

  if (error != OT_ERROR_NONE && responseMessage != NULL)
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <APP_THREAD_CoapPermissionsRequestHandler+0xde>
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <APP_THREAD_CoapPermissionsRequestHandler+0xde>
  {
      otMessageFree(responseMessage);
 80013c0:	69b8      	ldr	r0, [r7, #24]
 80013c2:	f009 fe79 	bl	800b0b8 <otMessageFree>
  }


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2102      	movs	r1, #2
 80013ca:	4808      	ldr	r0, [pc, #32]	; (80013ec <APP_THREAD_CoapPermissionsRequestHandler+0x104>)
 80013cc:	f003 ffd2 	bl	8005374 <HAL_GPIO_WritePin>
}
 80013d0:	bf00      	nop
 80013d2:	3724      	adds	r7, #36	; 0x24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	0800f29c 	.word	0x0800f29c
 80013dc:	20000420 	.word	0x20000420
 80013e0:	20000400 	.word	0x20000400
 80013e4:	0800f470 	.word	0x0800f470
 80013e8:	0800f474 	.word	0x0800f474
 80013ec:	48000800 	.word	0x48000800

080013f0 <APP_THREAD_SendCoapMsg>:
/**
 * @brief Task associated to the push button.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(char *buf, bool require_ack) {
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b0a7      	sub	sp, #156	; 0x9c
 80013f4:	af0c      	add	r7, sp, #48	; 0x30
 80013f6:	6178      	str	r0, [r7, #20]
 80013f8:	460b      	mov	r3, r1
 80013fa:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2102      	movs	r1, #2
 8001400:	4880      	ldr	r0, [pc, #512]	; (8001604 <APP_THREAD_SendCoapMsg+0x214>)
 8001402:	f003 ffb7 	bl	8005374 <HAL_GPIO_WritePin>
	int8_t rssi;
	int16_t tmp_aux;
	otThreadGetParentLastRssi(NULL, &rssi);
 8001406:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800140a:	4619      	mov	r1, r3
 800140c:	2000      	movs	r0, #0
 800140e:	f00a fff8 	bl	800c402 <otThreadGetParentLastRssi>
	sht4x_read(&sensor_data.temp_main, &sensor_data.humidity);
 8001412:	497d      	ldr	r1, [pc, #500]	; (8001608 <APP_THREAD_SendCoapMsg+0x218>)
 8001414:	487d      	ldr	r0, [pc, #500]	; (800160c <APP_THREAD_SendCoapMsg+0x21c>)
 8001416:	f7ff f9ef 	bl	80007f8 <sht4x_read>
	stts22h_temperature_raw_get(&tmp_aux);
 800141a:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fb8f 	bl	8000b42 <stts22h_temperature_raw_get>
	sensor_data.temp_aux = tmp_aux;
 8001424:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8001428:	4b77      	ldr	r3, [pc, #476]	; (8001608 <APP_THREAD_SendCoapMsg+0x218>)
 800142a:	811a      	strh	r2, [r3, #8]
	int8_t ret = app_algo_proc(sensor_data, false);
 800142c:	4a76      	ldr	r2, [pc, #472]	; (8001608 <APP_THREAD_SendCoapMsg+0x218>)
 800142e:	2300      	movs	r3, #0
 8001430:	ca07      	ldmia	r2, {r0, r1, r2}
 8001432:	f000 fe5d 	bl	80020f0 <app_algo_proc>
 8001436:	4603      	mov	r3, r0
 8001438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if(ret == RES_HEAT) {APP_DBG("Heating");}
 800143c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <APP_THREAD_SendCoapMsg+0x60>
 8001444:	4a72      	ldr	r2, [pc, #456]	; (8001610 <APP_THREAD_SendCoapMsg+0x220>)
 8001446:	2101      	movs	r1, #1
 8001448:	2000      	movs	r0, #0
 800144a:	f002 feed 	bl	8004228 <logApplication>
 800144e:	e00e      	b.n	800146e <APP_THREAD_SendCoapMsg+0x7e>
	else if(ret == RES_NONE) {APP_DBG("Fsm normal");}
 8001450:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001454:	2b00      	cmp	r3, #0
 8001456:	d105      	bne.n	8001464 <APP_THREAD_SendCoapMsg+0x74>
 8001458:	4a6e      	ldr	r2, [pc, #440]	; (8001614 <APP_THREAD_SendCoapMsg+0x224>)
 800145a:	2101      	movs	r1, #1
 800145c:	2000      	movs	r0, #0
 800145e:	f002 fee3 	bl	8004228 <logApplication>
 8001462:	e004      	b.n	800146e <APP_THREAD_SendCoapMsg+0x7e>
	else {APP_DBG("Fsm abnormal");}
 8001464:	4a6c      	ldr	r2, [pc, #432]	; (8001618 <APP_THREAD_SendCoapMsg+0x228>)
 8001466:	2101      	movs	r1, #1
 8001468:	2000      	movs	r0, #0
 800146a:	f002 fedd 	bl	8004228 <logApplication>
	 * opt_buf (uint32_t): light levels in lux
	 * vdd_meas (uint32_t): supply voltage in mV
	 * rssi (int8_t): last rssi from parent
	 * appCoapSendTxCtr (uint32_t): total CoAP transmissions
	 */
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 800146e:	2301      	movs	r3, #1
 8001470:	469e      	mov	lr, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 8001472:	4b6a      	ldr	r3, [pc, #424]	; (800161c <APP_THREAD_SendCoapMsg+0x22c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 8001476:	4619      	mov	r1, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 8001478:	4b68      	ldr	r3, [pc, #416]	; (800161c <APP_THREAD_SendCoapMsg+0x22c>)
 800147a:	785b      	ldrb	r3, [r3, #1]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 800147c:	4618      	mov	r0, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 800147e:	4b67      	ldr	r3, [pc, #412]	; (800161c <APP_THREAD_SendCoapMsg+0x22c>)
 8001480:	789b      	ldrb	r3, [r3, #2]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 8001482:	461c      	mov	r4, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 8001484:	4b65      	ldr	r3, [pc, #404]	; (800161c <APP_THREAD_SendCoapMsg+0x22c>)
 8001486:	78db      	ldrb	r3, [r3, #3]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 8001488:	461d      	mov	r5, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <APP_THREAD_SendCoapMsg+0x22c>)
 800148c:	791b      	ldrb	r3, [r3, #4]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 800148e:	461e      	mov	r6, r3
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 8001490:	4b62      	ldr	r3, [pc, #392]	; (800161c <APP_THREAD_SendCoapMsg+0x22c>)
 8001492:	795b      	ldrb	r3, [r3, #5]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 8001494:	60fb      	str	r3, [r7, #12]
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 8001496:	4b61      	ldr	r3, [pc, #388]	; (800161c <APP_THREAD_SendCoapMsg+0x22c>)
 8001498:	799b      	ldrb	r3, [r3, #6]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 800149a:	60bb      	str	r3, [r7, #8]
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 800149c:	4b5f      	ldr	r3, [pc, #380]	; (800161c <APP_THREAD_SendCoapMsg+0x22c>)
 800149e:	79db      	ldrb	r3, [r3, #7]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b59      	ldr	r3, [pc, #356]	; (8001608 <APP_THREAD_SendCoapMsg+0x218>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a58      	ldr	r2, [pc, #352]	; (8001608 <APP_THREAD_SendCoapMsg+0x218>)
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	603a      	str	r2, [r7, #0]
 80014ac:	f997 c05c 	ldrsb.w	ip, [r7, #92]	; 0x5c
 80014b0:	4662      	mov	r2, ip
 80014b2:	920a      	str	r2, [sp, #40]	; 0x28
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	9209      	str	r2, [sp, #36]	; 0x24
 80014b8:	9308      	str	r3, [sp, #32]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	9207      	str	r2, [sp, #28]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	9206      	str	r2, [sp, #24]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	9305      	str	r3, [sp, #20]
 80014c6:	9604      	str	r6, [sp, #16]
 80014c8:	9503      	str	r5, [sp, #12]
 80014ca:	9402      	str	r4, [sp, #8]
 80014cc:	9001      	str	r0, [sp, #4]
 80014ce:	9100      	str	r1, [sp, #0]
 80014d0:	4673      	mov	r3, lr
 80014d2:	4a53      	ldr	r2, [pc, #332]	; (8001620 <APP_THREAD_SendCoapMsg+0x230>)
 80014d4:	21fe      	movs	r1, #254	; 0xfe
 80014d6:	4853      	ldr	r0, [pc, #332]	; (8001624 <APP_THREAD_SendCoapMsg+0x234>)
 80014d8:	f00c fba8 	bl	800dc2c <sniprintf>
			sensor_data.humidity, rssi);
	buf = tmp_tx_buf;
 80014dc:	4b51      	ldr	r3, [pc, #324]	; (8001624 <APP_THREAD_SendCoapMsg+0x234>)
 80014de:	617b      	str	r3, [r7, #20]
	APP_DBG("In appthread handler temp:%d hum:%d temp_aux:%d", sensor_data.temp_main, sensor_data.humidity, sensor_data.temp_aux);
 80014e0:	4b49      	ldr	r3, [pc, #292]	; (8001608 <APP_THREAD_SendCoapMsg+0x218>)
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4b48      	ldr	r3, [pc, #288]	; (8001608 <APP_THREAD_SendCoapMsg+0x218>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4947      	ldr	r1, [pc, #284]	; (8001608 <APP_THREAD_SendCoapMsg+0x218>)
 80014ea:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80014ee:	9101      	str	r1, [sp, #4]
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	4613      	mov	r3, r2
 80014f4:	4a4c      	ldr	r2, [pc, #304]	; (8001628 <APP_THREAD_SendCoapMsg+0x238>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	2000      	movs	r0, #0
 80014fa:	f002 fe95 	bl	8004228 <logApplication>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80014fe:	2101      	movs	r1, #1
 8001500:	4840      	ldr	r0, [pc, #256]	; (8001604 <APP_THREAD_SendCoapMsg+0x214>)
 8001502:	f003 ff4f 	bl	80053a4 <HAL_GPIO_TogglePin>
	otError error = OT_ERROR_NONE;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	otMessage *message = NULL;
 800150c:	2300      	movs	r3, #0
 800150e:	663b      	str	r3, [r7, #96]	; 0x60
	otMessageInfo messageInfo;
	uint16_t payloadLength = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	// Default parameters
	otCoapType coapType =
			require_ack ?
					OT_COAP_TYPE_CONFIRMABLE : OT_COAP_TYPE_NON_CONFIRMABLE;
 8001516:	7cfb      	ldrb	r3, [r7, #19]
 8001518:	f083 0301 	eor.w	r3, r3, #1
 800151c:	b2db      	uxtb	r3, r3
	otCoapType coapType =
 800151e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	otIp6Address coapDestinationIp = brAddr;
 8001522:	4b42      	ldr	r3, [pc, #264]	; (800162c <APP_THREAD_SendCoapMsg+0x23c>)
 8001524:	f107 041c 	add.w	r4, r7, #28
 8001528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	message = otCoapNewMessage(NULL, NULL);
 800152e:	2100      	movs	r1, #0
 8001530:	2000      	movs	r0, #0
 8001532:	f009 f939 	bl	800a7a8 <otCoapNewMessage>
 8001536:	6638      	str	r0, [r7, #96]	; 0x60

	otCoapMessageInit(message, coapType, OT_COAP_CODE_PUT);
 8001538:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800153c:	2203      	movs	r2, #3
 800153e:	4619      	mov	r1, r3
 8001540:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001542:	f009 f95f 	bl	800a804 <otCoapMessageInit>
	otCoapMessageGenerateToken(message, OT_COAP_DEFAULT_TOKEN_LENGTH);
 8001546:	2102      	movs	r1, #2
 8001548:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800154a:	f009 fa05 	bl	800a958 <otCoapMessageGenerateToken>
	error = otCoapMessageAppendUriPathOptions(message, resource_name);
 800154e:	4938      	ldr	r1, [pc, #224]	; (8001630 <APP_THREAD_SendCoapMsg+0x240>)
 8001550:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001552:	f009 fa31 	bl	800a9b8 <otCoapMessageAppendUriPathOptions>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

	payloadLength = strlen(buf);
 800155c:	6978      	ldr	r0, [r7, #20]
 800155e:	f7fe fe19 	bl	8000194 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	if (payloadLength > 0) {
 8001568:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <APP_THREAD_SendCoapMsg+0x18c>
		error = otCoapMessageSetPayloadMarker(message);
 8001570:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001572:	f009 fa53 	bl	800aa1c <otCoapMessageSetPayloadMarker>
 8001576:	4603      	mov	r3, r0
 8001578:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

	}

	// Embed content into message if given
	if (payloadLength > 0) {
 800157c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <APP_THREAD_SendCoapMsg+0x1a8>
		error = otMessageAppend(message, buf, payloadLength);
 8001584:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001588:	461a      	mov	r2, r3
 800158a:	6979      	ldr	r1, [r7, #20]
 800158c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800158e:	f009 fdf0 	bl	800b172 <otMessageAppend>
 8001592:	4603      	mov	r3, r0
 8001594:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	memset(&messageInfo, 0, sizeof(messageInfo));
 8001598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159c:	222c      	movs	r2, #44	; 0x2c
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00c fa1d 	bl	800d9e0 <memset>
	messageInfo.mPeerAddr = coapDestinationIp;
 80015a6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	messageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 80015b4:	f241 6333 	movw	r3, #5683	; 0x1633
 80015b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	error = otCoapSendRequestWithParameters(NULL, message, &messageInfo, NULL,
 80015bc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80015c0:	2300      	movs	r3, #0
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	2300      	movs	r3, #0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015cc:	2000      	movs	r0, #0
 80015ce:	f009 fb0c 	bl	800abea <otCoapSendRequestWithParameters>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			NULL,
			NULL);

	if ((error != OT_ERROR_NONE) && (message != NULL)) {
 80015d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <APP_THREAD_SendCoapMsg+0x1fc>
 80015e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <APP_THREAD_SendCoapMsg+0x1fc>
		otMessageFree(message);
 80015e6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80015e8:	f009 fd66 	bl	800b0b8 <otMessageFree>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2102      	movs	r1, #2
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <APP_THREAD_SendCoapMsg+0x214>)
 80015f2:	f003 febf 	bl	8005374 <HAL_GPIO_WritePin>
	sht4x_measure();
 80015f6:	f7ff f8f1 	bl	80007dc <sht4x_measure>
}
 80015fa:	bf00      	nop
 80015fc:	376c      	adds	r7, #108	; 0x6c
 80015fe:	46bd      	mov	sp, r7
 8001600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001602:	bf00      	nop
 8001604:	48000800 	.word	0x48000800
 8001608:	20000798 	.word	0x20000798
 800160c:	2000079c 	.word	0x2000079c
 8001610:	0800f54c 	.word	0x0800f54c
 8001614:	0800f554 	.word	0x0800f554
 8001618:	0800f560 	.word	0x0800f560
 800161c:	20000430 	.word	0x20000430
 8001620:	0800f570 	.word	0x0800f570
 8001624:	20000300 	.word	0x20000300
 8001628:	0800f590 	.word	0x0800f590
 800162c:	20000420 	.word	0x20000420
 8001630:	20000400 	.word	0x20000400

08001634 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	200002f0 	.word	0x200002f0

08001654 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	330c      	adds	r3, #12
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	200002f0 	.word	0x200002f0

0800166c <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	330b      	adds	r3, #11
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	200002f0 	.word	0x200002f0

08001684 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	330b      	adds	r3, #11
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	200002f4 	.word	0x200002f4

0800169c <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0

  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <Ot_Cmd_Transfer_Common+0x44>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016ac:	725a      	strb	r2, [r3, #9]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f042 0202 	orr.w	r2, r2, #2
 80016b4:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <Ot_Cmd_Transfer_Common+0x44>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	330c      	adds	r3, #12
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	3302      	adds	r3, #2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <Ot_Cmd_Transfer_Common+0x44>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 80016ce:	f00a ffdf 	bl	800c690 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80016d2:	f000 f834 	bl	800173e <Wait_Getting_Ack_From_M0>

}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200002f0 	.word	0x200002f0

080016e4 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  Ot_Cmd_Transfer_Common();
 80016e8:	f7ff ffd8 	bl	800169c <Ot_Cmd_Transfer_Common>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80016f8:	f000 f828 	bl	800174c <Receive_Ack_From_M0>

  /* Does not allow OpenThread M0 to M4 notification */
  g_ot_notification_allowed = 0U;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <TL_OT_CmdEvtReceived+0x1c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000448 	.word	0x20000448

08001710 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <TL_THREAD_NotReceived+0x1c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800171e:	f000 f81d 	bl	800175c <Receive_Notification_From_M0>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200002f4 	.word	0x200002f4

08001730 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8001734:	2004      	movs	r0, #4
 8001736:	f00b fbb7 	bl	800cea8 <UTIL_SEQ_WaitEvt>
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}

0800173e <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 8001742:	2002      	movs	r0, #2
 8001744:	f00b fbb0 	bl	800cea8 <UTIL_SEQ_WaitEvt>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8001750:	2002      	movs	r0, #2
 8001752:	f00b fb89 	bl	800ce68 <UTIL_SEQ_SetEvt>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <Receive_Notification_From_M0+0x1c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <Receive_Notification_From_M0+0x1c>)
 8001768:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4,CFG_SCH_PRIO_0);
 800176a:	2100      	movs	r1, #0
 800176c:	2001      	movs	r0, #1
 800176e:	f00b fb4f 	bl	800ce10 <UTIL_SEQ_SetTask>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200002f8 	.word	0x200002f8

0800177c <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <RxCpltCallback+0x4c>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d816      	bhi.n	80017b8 <RxCpltCallback+0x3c>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <RxCpltCallback+0x4c>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b29b      	uxth	r3, r3
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	b291      	uxth	r1, r2
 8001794:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <RxCpltCallback+0x4c>)
 8001796:	8011      	strh	r1, [r2, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <RxCpltCallback+0x50>)
 800179c:	7819      	ldrb	r1, [r3, #0]
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <RxCpltCallback+0x54>)
 80017a0:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <RxCpltCallback+0x50>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b0d      	cmp	r3, #13
 80017a8:	d106      	bne.n	80017b8 <RxCpltCallback+0x3c>
    {
      CptReceiveCmdFromUser = 1U;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <RxCpltCallback+0x58>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      UTIL_SEQ_SetTask(1U << CFG_TASK_SEND_CLI_TO_M0, CFG_SCH_PRIO_0);
 80017b0:	2100      	movs	r1, #0
 80017b2:	2002      	movs	r0, #2
 80017b4:	f00b fb2c 	bl	800ce10 <UTIL_SEQ_SetTask>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <RxCpltCallback+0x5c>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	4903      	ldr	r1, [pc, #12]	; (80017cc <RxCpltCallback+0x50>)
 80017be:	2002      	movs	r0, #2
 80017c0:	f001 fe2c 	bl	800341c <HW_UART_Receive_IT>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200002ec 	.word	0x200002ec
 80017cc:	200000ec 	.word	0x200000ec
 80017d0:	200001ec 	.word	0x200001ec
 80017d4:	200002ee 	.word	0x200002ee
 80017d8:	0800177d 	.word	0x0800177d

080017dc <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 80017e0:	22ff      	movs	r2, #255	; 0xff
 80017e2:	2100      	movs	r1, #0
 80017e4:	4812      	ldr	r0, [pc, #72]	; (8001830 <Send_CLI_To_M0+0x54>)
 80017e6:	f00c f8fb 	bl	800d9e0 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <Send_CLI_To_M0+0x58>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	4911      	ldr	r1, [pc, #68]	; (8001838 <Send_CLI_To_M0+0x5c>)
 80017f4:	480e      	ldr	r0, [pc, #56]	; (8001830 <Send_CLI_To_M0+0x54>)
 80017f6:	f00c f8e5 	bl	800d9c4 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <Send_CLI_To_M0+0x58>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <Send_CLI_To_M0+0x60>)
 8001804:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <Send_CLI_To_M0+0x60>)
 8001808:	2200      	movs	r2, #0
 800180a:	725a      	strb	r2, [r3, #9]
 800180c:	2200      	movs	r2, #0
 800180e:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <Send_CLI_To_M0+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <Send_CLI_To_M0+0x58>)
 8001818:	2200      	movs	r2, #0
 800181a:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 800181c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001820:	2100      	movs	r1, #0
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <Send_CLI_To_M0+0x5c>)
 8001824:	f00c f8dc 	bl	800d9e0 <memset>

  TL_CLI_SendCmd();
 8001828:	f00a ff40 	bl	800c6ac <TL_CLI_SendCmd>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2003030c 	.word	0x2003030c
 8001834:	200002ec 	.word	0x200002ec
 8001838:	200001ec 	.word	0x200001ec
 800183c:	20030300 	.word	0x20030300
 8001840:	200002ee 	.word	0x200002ee

08001844 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8001848:	f00a ff4c 	bl	800c6e4 <TL_THREAD_CliSendAck>

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SEND_CLI_TO_M0, UTIL_SEQ_RFU,Send_CLI_To_M0);
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <APP_THREAD_Init_UART_CLI+0x24>)
 8001856:	2100      	movs	r1, #0
 8001858:	2002      	movs	r0, #2
 800185a:	f00b fab7 	bl	800cdcc <UTIL_SEQ_RegTask>
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_LPUART1_UART_Init();
 800185e:	f002 f883 	bl	8003968 <MX_LPUART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <APP_THREAD_Init_UART_CLI+0x28>)
 8001864:	2201      	movs	r2, #1
 8001866:	4905      	ldr	r1, [pc, #20]	; (800187c <APP_THREAD_Init_UART_CLI+0x2c>)
 8001868:	2002      	movs	r0, #2
 800186a:	f001 fdd7 	bl	800341c <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	080017dd 	.word	0x080017dd
 8001878:	0800177d 	.word	0x0800177d
 800187c:	200000ec 	.word	0x200000ec

08001880 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8001888:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <APP_THREAD_TL_THREAD_INIT+0x30>)
 800188e:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <APP_THREAD_TL_THREAD_INIT+0x34>)
 8001894:	605a      	str	r2, [r3, #4]
  ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*)&ThreadCliNotBuffer;
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <APP_THREAD_TL_THREAD_INIT+0x38>)
 800189a:	60da      	str	r2, [r3, #12]

  TL_THREAD_Init( &ThreadConfigBuffer );
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800189e:	f00a fed7 	bl	800c650 <TL_THREAD_Init>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20030028 	.word	0x20030028
 80018ac:	200300e8 	.word	0x200300e8
 80018b0:	200301f4 	.word	0x200301f4
 80018b4:	20030300 	.word	0x20030300
 80018b8:	2003040c 	.word	0x2003040c

080018bc <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	7adb      	ldrb	r3, [r3, #11]
 80018cc:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	330c      	adds	r3, #12
 80018d2:	490b      	ldr	r1, [pc, #44]	; (8001900 <TL_THREAD_CliNotReceived+0x44>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fc53 	bl	8000180 <strcmp>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f103 010c 	add.w	r1, r3, #12
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <TL_THREAD_CliNotReceived+0x48>)
 80018ec:	2002      	movs	r0, #2
 80018ee:	f001 fdcf 	bl	8003490 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 80018f2:	e001      	b.n	80018f8 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 80018f4:	f7ff ffa6 	bl	8001844 <Send_CLI_Ack_For_OT>
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	0800f5d8 	.word	0x0800f5d8
 8001904:	08001909 	.word	0x08001909

08001908 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 800190c:	f7ff ff9a 	bl	8001844 <Send_CLI_Ack_For_OT>
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00d      	beq.n	800193c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d904      	bls.n	8001932 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8001928:	2100      	movs	r1, #0
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fa5a 	bl	8000de4 <APP_THREAD_Error>
 8001930:	e001      	b.n	8001936 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8001932:	f009 fc97 	bl	800b264 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8001936:	4b02      	ldr	r3, [pc, #8]	; (8001940 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
  }
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200002f8 	.word	0x200002f8

08001944 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <LL_PWR_EnableBootC2+0x1c>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <LL_PWR_EnableBootC2+0x1c>)
 800194e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	58000400 	.word	0x58000400

08001964 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800196e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001972:	4905      	ldr	r1, [pc, #20]	; (8001988 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4313      	orrs	r3, r2
 8001978:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	58000800 	.word	0x58000800

0800198c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001996:	6a1a      	ldr	r2, [r3, #32]
 8001998:	4904      	ldr	r1, [pc, #16]	; (80019ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4313      	orrs	r3, r2
 800199e:	620b      	str	r3, [r1, #32]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	58000800 	.word	0x58000800

080019b0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019d4:	68fb      	ldr	r3, [r7, #12]
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b085      	sub	sp, #20
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ee:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80019f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f043 0201 	orr.w	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	041b      	lsls	r3, r3, #16
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	605a      	str	r2, [r3, #4]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	605a      	str	r2, [r3, #4]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	605a      	str	r2, [r3, #4]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	605a      	str	r2, [r3, #4]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	609a      	str	r2, [r3, #8]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	041a      	lsls	r2, r3, #16
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	4013      	ands	r3, r2
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d101      	bne.n	8001b40 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69da      	ldr	r2, [r3, #28]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d101      	bne.n	8001b6a <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	482a      	ldr	r0, [pc, #168]	; (8001c28 <HW_IPCC_Rx_Handler+0xb0>)
 8001b80:	f7ff ffe5 	bl	8001b4e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <HW_IPCC_Rx_Handler+0x26>
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HW_IPCC_Rx_Handler+0xb0>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001b98:	f000 f8f8 	bl	8001d8c <HW_IPCC_SYS_EvtHandler>
 8001b9c:	e041      	b.n	8001c22 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	4821      	ldr	r0, [pc, #132]	; (8001c28 <HW_IPCC_Rx_Handler+0xb0>)
 8001ba2:	f7ff ffd4 	bl	8001b4e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d009      	beq.n	8001bc0 <HW_IPCC_Rx_Handler+0x48>
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HW_IPCC_Rx_Handler+0xb0>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8001bba:	f000 f941 	bl	8001e40 <HW_IPCC_THREAD_NotEvtHandler>
 8001bbe:	e030      	b.n	8001c22 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	4819      	ldr	r0, [pc, #100]	; (8001c28 <HW_IPCC_Rx_Handler+0xb0>)
 8001bc4:	f7ff ffc3 	bl	8001b4e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HW_IPCC_Rx_Handler+0x6a>
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HW_IPCC_Rx_Handler+0xb0>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8001bdc:	f000 f93c 	bl	8001e58 <HW_IPCC_THREAD_CliNotEvtHandler>
 8001be0:	e01f      	b.n	8001c22 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001be2:	2101      	movs	r1, #1
 8001be4:	4810      	ldr	r0, [pc, #64]	; (8001c28 <HW_IPCC_Rx_Handler+0xb0>)
 8001be6:	f7ff ffb2 	bl	8001b4e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HW_IPCC_Rx_Handler+0x8a>
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HW_IPCC_Rx_Handler+0xb0>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8001bfc:	f000 f88a 	bl	8001d14 <HW_IPCC_BLE_EvtHandler>
 8001c00:	e00f      	b.n	8001c22 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001c02:	2108      	movs	r1, #8
 8001c04:	4808      	ldr	r0, [pc, #32]	; (8001c28 <HW_IPCC_Rx_Handler+0xb0>)
 8001c06:	f7ff ffa2 	bl	8001b4e <LL_C2_IPCC_IsActiveFlag_CHx>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HW_IPCC_Rx_Handler+0xac>
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HW_IPCC_Rx_Handler+0xb0>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001c1e:	f000 f967 	bl	8001ef0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
}
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	58000c00 	.word	0x58000c00

08001c2c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001c30:	2102      	movs	r1, #2
 8001c32:	4822      	ldr	r0, [pc, #136]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c34:	f7ff ff76 	bl	8001b24 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HW_IPCC_Tx_Handler+0x26>
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001c4c:	f000 f892 	bl	8001d74 <HW_IPCC_SYS_CmdEvtHandler>
 8001c50:	e031      	b.n	8001cb6 <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8001c52:	2104      	movs	r1, #4
 8001c54:	4819      	ldr	r0, [pc, #100]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c56:	f7ff ff65 	bl	8001b24 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <HW_IPCC_Tx_Handler+0x48>
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8001c6e:	f000 f8db 	bl	8001e28 <HW_IPCC_OT_CmdEvtHandler>
 8001c72:	e020      	b.n	8001cb6 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001c74:	2108      	movs	r1, #8
 8001c76:	4811      	ldr	r0, [pc, #68]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c78:	f7ff ff54 	bl	8001b24 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HW_IPCC_Tx_Handler+0x6a>
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001c90:	f000 f910 	bl	8001eb4 <HW_IPCC_MM_FreeBufHandler>
 8001c94:	e00f      	b.n	8001cb6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001c96:	2120      	movs	r1, #32
 8001c98:	4808      	ldr	r0, [pc, #32]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c9a:	f7ff ff43 	bl	8001b24 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HW_IPCC_Tx_Handler+0x8c>
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001cb2:	f000 f83b 	bl	8001d2c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
}
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	58000c00 	.word	0x58000c00

08001cc0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001cc4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001cc8:	f7ff fe8b 	bl	80019e2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001ccc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cd0:	f7ff fe5c 	bl	800198c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001cd4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cd8:	f7ff fe44 	bl	8001964 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001cdc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001cde:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001ce0:	f7ff fe30 	bl	8001944 <LL_PWR_EnableBootC2>

  return;
 8001ce4:	bf00      	nop
}
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001cec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001cf0:	f7ff fe5e 	bl	80019b0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001cf4:	4806      	ldr	r0, [pc, #24]	; (8001d10 <HW_IPCC_Init+0x28>)
 8001cf6:	f7ff fea0 	bl	8001a3a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HW_IPCC_Init+0x28>)
 8001cfc:	f7ff fe8d 	bl	8001a1a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001d00:	202c      	movs	r0, #44	; 0x2c
 8001d02:	f002 fd8e 	bl	8004822 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001d06:	202d      	movs	r0, #45	; 0x2d
 8001d08:	f002 fd8b 	bl	8004822 <HAL_NVIC_EnableIRQ>

  return;
 8001d0c:	bf00      	nop
}
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	58000c00 	.word	0x58000c00

08001d14 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001d18:	f00a fbe2 	bl	800c4e0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4802      	ldr	r0, [pc, #8]	; (8001d28 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001d20:	f7ff fee3 	bl	8001aea <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001d24:	bf00      	nop
}
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	58000c00 	.word	0x58000c00

08001d2c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001d30:	2120      	movs	r1, #32
 8001d32:	4803      	ldr	r0, [pc, #12]	; (8001d40 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001d34:	f7ff fea4 	bl	8001a80 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001d38:	f00a fc02 	bl	800c540 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001d3c:	bf00      	nop
}
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	58000c00 	.word	0x58000c00

08001d44 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001d48:	2102      	movs	r1, #2
 8001d4a:	4802      	ldr	r0, [pc, #8]	; (8001d54 <HW_IPCC_SYS_Init+0x10>)
 8001d4c:	f7ff feaa 	bl	8001aa4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001d50:	bf00      	nop
}
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	58000c00 	.word	0x58000c00

08001d58 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	4804      	ldr	r0, [pc, #16]	; (8001d70 <HW_IPCC_SYS_SendCmd+0x18>)
 8001d60:	f7ff fed1 	bl	8001b06 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001d64:	2102      	movs	r1, #2
 8001d66:	4802      	ldr	r0, [pc, #8]	; (8001d70 <HW_IPCC_SYS_SendCmd+0x18>)
 8001d68:	f7ff fe77 	bl	8001a5a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001d6c:	bf00      	nop
}
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	58000c00 	.word	0x58000c00

08001d74 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4803      	ldr	r0, [pc, #12]	; (8001d88 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001d7c:	f7ff fe80 	bl	8001a80 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001d80:	f00a fc2e 	bl	800c5e0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001d84:	bf00      	nop
}
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	58000c00 	.word	0x58000c00

08001d8c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001d90:	f00a fc3c 	bl	800c60c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001d94:	2102      	movs	r1, #2
 8001d96:	4802      	ldr	r0, [pc, #8]	; (8001da0 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001d98:	f7ff fea7 	bl	8001aea <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001d9c:	bf00      	nop
}
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	58000c00 	.word	0x58000c00

08001da4 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001da8:	2104      	movs	r1, #4
 8001daa:	4804      	ldr	r0, [pc, #16]	; (8001dbc <HW_IPCC_THREAD_Init+0x18>)
 8001dac:	f7ff fe7a 	bl	8001aa4 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001db0:	2110      	movs	r1, #16
 8001db2:	4802      	ldr	r0, [pc, #8]	; (8001dbc <HW_IPCC_THREAD_Init+0x18>)
 8001db4:	f7ff fe76 	bl	8001aa4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001db8:	bf00      	nop
}
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	58000c00 	.word	0x58000c00

08001dc0 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <HW_IPCC_OT_SendCmd+0x18>)
 8001dc8:	f7ff fe9d 	bl	8001b06 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001dcc:	2104      	movs	r1, #4
 8001dce:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <HW_IPCC_OT_SendCmd+0x18>)
 8001dd0:	f7ff fe43 	bl	8001a5a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001dd4:	bf00      	nop
}
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	58000c00 	.word	0x58000c00

08001ddc <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8001de0:	2110      	movs	r1, #16
 8001de2:	4802      	ldr	r0, [pc, #8]	; (8001dec <HW_IPCC_CLI_SendCmd+0x10>)
 8001de4:	f7ff fe8f 	bl	8001b06 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001de8:	bf00      	nop
}
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	58000c00 	.word	0x58000c00

08001df0 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001df4:	2104      	movs	r1, #4
 8001df6:	4804      	ldr	r0, [pc, #16]	; (8001e08 <HW_IPCC_THREAD_SendAck+0x18>)
 8001df8:	f7ff fe77 	bl	8001aea <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	4802      	ldr	r0, [pc, #8]	; (8001e08 <HW_IPCC_THREAD_SendAck+0x18>)
 8001e00:	f7ff fe50 	bl	8001aa4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001e04:	bf00      	nop
}
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	58000c00 	.word	0x58000c00

08001e0c <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001e10:	2110      	movs	r1, #16
 8001e12:	4804      	ldr	r0, [pc, #16]	; (8001e24 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001e14:	f7ff fe69 	bl	8001aea <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001e18:	2110      	movs	r1, #16
 8001e1a:	4802      	ldr	r0, [pc, #8]	; (8001e24 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001e1c:	f7ff fe42 	bl	8001aa4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001e20:	bf00      	nop
}
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	58000c00 	.word	0x58000c00

08001e28 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8001e30:	f7ff fe26 	bl	8001a80 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8001e34:	f00a fc64 	bl	800c700 <HW_IPCC_OT_CmdEvtNot>

  return;
 8001e38:	bf00      	nop
}
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	58000c00 	.word	0x58000c00

08001e40 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001e44:	2104      	movs	r1, #4
 8001e46:	4803      	ldr	r0, [pc, #12]	; (8001e54 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8001e48:	f7ff fe3e 	bl	8001ac8 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8001e4c:	f00a fc64 	bl	800c718 <HW_IPCC_THREAD_EvtNot>

  return;
 8001e50:	bf00      	nop
}
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	58000c00 	.word	0x58000c00

08001e58 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001e5c:	2110      	movs	r1, #16
 8001e5e:	4803      	ldr	r0, [pc, #12]	; (8001e6c <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8001e60:	f7ff fe32 	bl	8001ac8 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8001e64:	f00a fc64 	bl	800c730 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8001e68:	bf00      	nop
}
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	58000c00 	.word	0x58000c00

08001e70 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001e78:	2108      	movs	r1, #8
 8001e7a:	480c      	ldr	r0, [pc, #48]	; (8001eac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001e7c:	f7ff fe52 	bl	8001b24 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e8c:	2108      	movs	r1, #8
 8001e8e:	4807      	ldr	r0, [pc, #28]	; (8001eac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001e90:	f7ff fde3 	bl	8001a5a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001e94:	e006      	b.n	8001ea4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e9a:	2108      	movs	r1, #8
 8001e9c:	4803      	ldr	r0, [pc, #12]	; (8001eac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001e9e:	f7ff fe32 	bl	8001b06 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001ea2:	bf00      	nop
}
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58000c00 	.word	0x58000c00
 8001eb0:	20000438 	.word	0x20000438

08001eb4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001eb8:	2108      	movs	r1, #8
 8001eba:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001ebc:	f7ff fde0 	bl	8001a80 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001eca:	f7ff fe1c 	bl	8001b06 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001ece:	bf00      	nop
}
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	58000c00 	.word	0x58000c00
 8001ed8:	20000438 	.word	0x20000438

08001edc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001ee0:	2108      	movs	r1, #8
 8001ee2:	4802      	ldr	r0, [pc, #8]	; (8001eec <HW_IPCC_TRACES_Init+0x10>)
 8001ee4:	f7ff fdde 	bl	8001aa4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001ee8:	bf00      	nop
}
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	58000c00 	.word	0x58000c00

08001ef0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001ef4:	f00a fcae 	bl	800c854 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001ef8:	2108      	movs	r1, #8
 8001efa:	4802      	ldr	r0, [pc, #8]	; (8001f04 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001efc:	f7ff fdf5 	bl	8001aea <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001f00:	bf00      	nop
}
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	58000c00 	.word	0x58000c00

08001f08 <create_sensor_LL>:
	eStateFsm cur_state;
	int32_t baseline_temp_delta;
} fsm;

SensorQueueLL* create_sensor_LL(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	return calloc(1, sizeof(SensorQueueLL));
 8001f0c:	210c      	movs	r1, #12
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f00b fd1e 	bl	800d950 <calloc>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <update_sensor_LL>:

void update_sensor_LL(SensorQueueLL *ll, SensorData_t dat)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	4638      	mov	r0, r7
 8001f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f2a:	b672      	cpsid	i
}
 8001f2c:	bf00      	nop
	 __disable_irq( );
	SensorDataNode *new = calloc(1, sizeof(SensorQueueLL));
 8001f2e:	210c      	movs	r1, #12
 8001f30:	2001      	movs	r0, #1
 8001f32:	f00b fd0d 	bl	800d950 <calloc>
 8001f36:	4603      	mov	r3, r0
 8001f38:	617b      	str	r3, [r7, #20]
	if(new == NULL) return;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d03f      	beq.n	8001fc0 <update_sensor_LL+0xa4>
	new->data = dat;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3304      	adds	r3, #4
 8001f44:	463a      	mov	r2, r7
 8001f46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (ll->size == 0)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	7a1b      	ldrb	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <update_sensor_LL+0x4c>
	{
		ll->front = new;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	601a      	str	r2, [r3, #0]
		ll->rear = new;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	605a      	str	r2, [r3, #4]
		ll->size = 1;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2201      	movs	r2, #1
 8001f64:	721a      	strb	r2, [r3, #8]
 8001f66:	e021      	b.n	8001fac <update_sensor_LL+0x90>
	}
	else
	{
		if (ll->size >= 10)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	7a1b      	ldrb	r3, [r3, #8]
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	d910      	bls.n	8001f92 <update_sensor_LL+0x76>
		{
			SensorDataNode *del = ll->front;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	613b      	str	r3, [r7, #16]
			ll->front = ll->front->next;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	601a      	str	r2, [r3, #0]
			free(del);
 8001f80:	6938      	ldr	r0, [r7, #16]
 8001f82:	f00b fd17 	bl	800d9b4 <free>
			ll->size--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	7a1b      	ldrb	r3, [r3, #8]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	721a      	strb	r2, [r3, #8]
		}
		ll->rear->next = new;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	601a      	str	r2, [r3, #0]
		ll->rear = new;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	605a      	str	r2, [r3, #4]
		ll->size++;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	7a1b      	ldrb	r3, [r3, #8]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	721a      	strb	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fac:	b662      	cpsie	i
}
 8001fae:	bf00      	nop
	}
	__enable_irq();
	APP_DBG("LL  size :%d\n",ll->size);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	7a1b      	ldrb	r3, [r3, #8]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <update_sensor_LL+0xac>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f002 f935 	bl	8004228 <logApplication>
 8001fbe:	e000      	b.n	8001fc2 <update_sensor_LL+0xa6>
	if(new == NULL) return;
 8001fc0:	bf00      	nop
}
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	0800f5dc 	.word	0x0800f5dc

08001fcc <traverse_sensor_LL>:

uint8_t traverse_sensor_LL(SensorQueueLL *ll, bool isHum, int32_t l_th, int32_t u_th, int32_t *avg_temp, int32_t *avg_hum)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	72fb      	strb	r3, [r7, #11]
	SensorDataNode *cur = ll->front;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	617b      	str	r3, [r7, #20]
	uint8_t ret = 0, ctr = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	74fb      	strb	r3, [r7, #19]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	74bb      	strb	r3, [r7, #18]
	while (cur)
 8001fea:	e037      	b.n	800205c <traverse_sensor_LL+0x90>
	{
		if (isHum && (cur->data.humidity < l_th || cur->data.humidity > u_th))
 8001fec:	7afb      	ldrb	r3, [r7, #11]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <traverse_sensor_LL+0x42>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dc04      	bgt.n	8002006 <traverse_sensor_LL+0x3a>
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	da03      	bge.n	800200e <traverse_sensor_LL+0x42>
			ret++;
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	3301      	adds	r3, #1
 800200a:	74fb      	strb	r3, [r7, #19]
 800200c:	e012      	b.n	8002034 <traverse_sensor_LL+0x68>
		else if (!isHum && (cur->data.temp_main < l_th || cur->data.temp_main > u_th))
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	f083 0301 	eor.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00c      	beq.n	8002034 <traverse_sensor_LL+0x68>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	dc04      	bgt.n	800202e <traverse_sensor_LL+0x62>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	da02      	bge.n	8002034 <traverse_sensor_LL+0x68>
			ret++;
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	3301      	adds	r3, #1
 8002032:	74fb      	strb	r3, [r7, #19]
		cur = cur->next;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	617b      	str	r3, [r7, #20]
		(*avg_temp) += cur->data.temp_main;
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	441a      	add	r2, r3
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	601a      	str	r2, [r3, #0]
		(*avg_hum) += cur->data.humidity;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	441a      	add	r2, r3
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	601a      	str	r2, [r3, #0]
		ctr++;
 8002056:	7cbb      	ldrb	r3, [r7, #18]
 8002058:	3301      	adds	r3, #1
 800205a:	74bb      	strb	r3, [r7, #18]
	while (cur)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1c4      	bne.n	8001fec <traverse_sensor_LL+0x20>
	}
	APP_DBG("LL Length:%d, size :%d\n", ctr,ll->size);
 8002062:	7cba      	ldrb	r2, [r7, #18]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	7a1b      	ldrb	r3, [r3, #8]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	4a10      	ldr	r2, [pc, #64]	; (80020b0 <traverse_sensor_LL+0xe4>)
 800206e:	2101      	movs	r1, #1
 8002070:	2000      	movs	r0, #0
 8002072:	f002 f8d9 	bl	8004228 <logApplication>
	(*avg_temp) /= ctr==0?1:ctr;
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	7cbb      	ldrb	r3, [r7, #18]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <traverse_sensor_LL+0xb8>
 8002080:	7cbb      	ldrb	r3, [r7, #18]
 8002082:	e000      	b.n	8002086 <traverse_sensor_LL+0xba>
 8002084:	2301      	movs	r3, #1
 8002086:	fb92 f2f3 	sdiv	r2, r2, r3
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	601a      	str	r2, [r3, #0]
	(*avg_hum) /= ctr==0?1:ctr;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	7cbb      	ldrb	r3, [r7, #18]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <traverse_sensor_LL+0xd0>
 8002098:	7cbb      	ldrb	r3, [r7, #18]
 800209a:	e000      	b.n	800209e <traverse_sensor_LL+0xd2>
 800209c:	2301      	movs	r3, #1
 800209e:	fb92 f2f3 	sdiv	r2, r2, r3
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	601a      	str	r2, [r3, #0]
	return ret;
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	0800f5ec 	.word	0x0800f5ec

080020b4 <app_algo_init>:

void app_algo_init(SensorData_t data)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fsm.data_hist = create_sensor_LL();
 80020c0:	f7ff ff22 	bl	8001f08 <create_sensor_LL>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a09      	ldr	r2, [pc, #36]	; (80020ec <app_algo_init+0x38>)
 80020c8:	6013      	str	r3, [r2, #0]
	fsm.data_hist->size = 0;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <app_algo_init+0x38>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	721a      	strb	r2, [r3, #8]
	fsm.cur_state = STATE_INIT;
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <app_algo_init+0x38>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	711a      	strb	r2, [r3, #4]
	fsm.baseline_temp_delta = data.temp_main - (int32_t)data.temp_aux;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	4a02      	ldr	r2, [pc, #8]	; (80020ec <app_algo_init+0x38>)
 80020e2:	6093      	str	r3, [r2, #8]
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000043c 	.word	0x2000043c

080020f0 <app_algo_proc>:

eResFsm app_algo_proc(SensorData_t data, bool ext_sig_reset)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b08b      	sub	sp, #44	; 0x2c
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	1d3c      	adds	r4, r7, #4
 80020f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020fc:	70fb      	strb	r3, [r7, #3]
	update_sensor_LL(fsm.data_hist, data);
 80020fe:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <app_algo_proc+0x138>)
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002106:	f7ff ff09 	bl	8001f1c <update_sensor_LL>

	if (ext_sig_reset)
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d004      	beq.n	800211a <app_algo_proc+0x2a>
	{
		fsm.cur_state = STATE_INIT;
 8002110:	4b45      	ldr	r3, [pc, #276]	; (8002228 <app_algo_proc+0x138>)
 8002112:	2200      	movs	r2, #0
 8002114:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8002116:	2300      	movs	r3, #0
 8002118:	e082      	b.n	8002220 <app_algo_proc+0x130>
	}

	switch (fsm.cur_state)
 800211a:	4b43      	ldr	r3, [pc, #268]	; (8002228 <app_algo_proc+0x138>)
 800211c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002120:	3301      	adds	r3, #1
 8002122:	2b05      	cmp	r3, #5
 8002124:	d87a      	bhi.n	800221c <app_algo_proc+0x12c>
 8002126:	a201      	add	r2, pc, #4	; (adr r2, 800212c <app_algo_proc+0x3c>)
 8002128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212c:	08002217 	.word	0x08002217
 8002130:	08002145 	.word	0x08002145
 8002134:	08002159 	.word	0x08002159
 8002138:	08002175 	.word	0x08002175
 800213c:	080021d5 	.word	0x080021d5
 8002140:	080021e9 	.word	0x080021e9
	{
	case STATE_INIT:
	{
		fsm.cur_state = STATE_MEAS;
 8002144:	4b38      	ldr	r3, [pc, #224]	; (8002228 <app_algo_proc+0x138>)
 8002146:	2201      	movs	r2, #1
 8002148:	711a      	strb	r2, [r3, #4]
		APP_DBG("FSM STATE INIT");
 800214a:	4a38      	ldr	r2, [pc, #224]	; (800222c <app_algo_proc+0x13c>)
 800214c:	2101      	movs	r1, #1
 800214e:	2000      	movs	r0, #0
 8002150:	f002 f86a 	bl	8004228 <logApplication>
		return RES_NONE;
 8002154:	2300      	movs	r3, #0
 8002156:	e063      	b.n	8002220 <app_algo_proc+0x130>
	}
	case STATE_MEAS:
	{
		APP_DBG("FSM STATE MEAS");
 8002158:	4a35      	ldr	r2, [pc, #212]	; (8002230 <app_algo_proc+0x140>)
 800215a:	2101      	movs	r1, #1
 800215c:	2000      	movs	r0, #0
 800215e:	f002 f863 	bl	8004228 <logApplication>
		if (data.humidity > HUMIDITY_TRIG_TH_POS)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a33      	ldr	r2, [pc, #204]	; (8002234 <app_algo_proc+0x144>)
 8002166:	4293      	cmp	r3, r2
 8002168:	dd02      	ble.n	8002170 <app_algo_proc+0x80>
			fsm.cur_state = STATE_PRETRIG;
 800216a:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <app_algo_proc+0x138>)
 800216c:	2202      	movs	r2, #2
 800216e:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 8002170:	2300      	movs	r3, #0
 8002172:	e055      	b.n	8002220 <app_algo_proc+0x130>
	}
	case STATE_PRETRIG:
	{
		APP_DBG("FSM STATE PRETRIG\n");
 8002174:	4a30      	ldr	r2, [pc, #192]	; (8002238 <app_algo_proc+0x148>)
 8002176:	2101      	movs	r1, #1
 8002178:	2000      	movs	r0, #0
 800217a:	f002 f855 	bl	8004228 <logApplication>
		if (data.humidity < HUMIDITY_TRIG_TH_POS)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <app_algo_proc+0x144>)
 8002182:	4293      	cmp	r3, r2
 8002184:	da04      	bge.n	8002190 <app_algo_proc+0xa0>
		{
			fsm.cur_state = STATE_MEAS;
 8002186:	4b28      	ldr	r3, [pc, #160]	; (8002228 <app_algo_proc+0x138>)
 8002188:	2201      	movs	r2, #1
 800218a:	711a      	strb	r2, [r3, #4]
			return RES_NONE;
 800218c:	2300      	movs	r3, #0
 800218e:	e047      	b.n	8002220 <app_algo_proc+0x130>
		}
		int32_t t, h;
		uint8_t ct = traverse_sensor_LL(fsm.data_hist, true, -1, HUMIDITY_TRIG_TH_POS, &t, &h);
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <app_algo_proc+0x138>)
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	4a27      	ldr	r2, [pc, #156]	; (8002234 <app_algo_proc+0x144>)
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4613      	mov	r3, r2
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	2101      	movs	r1, #1
 80021aa:	f7ff ff0f 	bl	8001fcc <traverse_sensor_LL>
 80021ae:	4603      	mov	r3, r0
 80021b0:	77fb      	strb	r3, [r7, #31]
		APP_DBG("Pretrig ctr:%d", ct);
 80021b2:	7ffb      	ldrb	r3, [r7, #31]
 80021b4:	4a21      	ldr	r2, [pc, #132]	; (800223c <app_algo_proc+0x14c>)
 80021b6:	2101      	movs	r1, #1
 80021b8:	2000      	movs	r0, #0
 80021ba:	f002 f835 	bl	8004228 <logApplication>
		if (ct >= HUMIDITY_SAMPLES_TRIG_TH)
 80021be:	2205      	movs	r2, #5
 80021c0:	7ffb      	ldrb	r3, [r7, #31]
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d304      	bcc.n	80021d0 <app_algo_proc+0xe0>
		{
			fsm.cur_state = STATE_HEATING;
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <app_algo_proc+0x138>)
 80021c8:	2203      	movs	r2, #3
 80021ca:	711a      	strb	r2, [r3, #4]
			return RES_HEAT;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e027      	b.n	8002220 <app_algo_proc+0x130>
		}
		return RES_NONE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e025      	b.n	8002220 <app_algo_proc+0x130>
	}
	case STATE_HEATING:
	{
		APP_DBG("FSM STATE HEATING");
 80021d4:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <app_algo_proc+0x150>)
 80021d6:	2101      	movs	r1, #1
 80021d8:	2000      	movs	r0, #0
 80021da:	f002 f825 	bl	8004228 <logApplication>
		fsm.cur_state = STATE_COOLDOWN;
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <app_algo_proc+0x138>)
 80021e0:	2204      	movs	r2, #4
 80021e2:	711a      	strb	r2, [r3, #4]
		return RES_NONE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e01b      	b.n	8002220 <app_algo_proc+0x130>
	}
	case STATE_COOLDOWN:
	{
		APP_DBG("FSM STATE COOLDOWN");
 80021e8:	4a16      	ldr	r2, [pc, #88]	; (8002244 <app_algo_proc+0x154>)
 80021ea:	2101      	movs	r1, #1
 80021ec:	2000      	movs	r0, #0
 80021ee:	f002 f81b 	bl	8004228 <logApplication>
		if(data.temp_main - data.temp_aux < fsm.baseline_temp_delta + TEMPERATURE_COOLDOWN_MAX_ALLOWED_DELTA)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80021f8:	1a9a      	subs	r2, r3, r2
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <app_algo_proc+0x138>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002202:	440b      	add	r3, r1
 8002204:	429a      	cmp	r2, r3
 8002206:	da04      	bge.n	8002212 <app_algo_proc+0x122>
		{
			fsm.cur_state = STATE_MEAS;
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <app_algo_proc+0x138>)
 800220a:	2201      	movs	r2, #1
 800220c:	711a      	strb	r2, [r3, #4]
			return RES_NONE;
 800220e:	2300      	movs	r3, #0
 8002210:	e006      	b.n	8002220 <app_algo_proc+0x130>
		}
		else
		{
			return RES_INVL;
 8002212:	2302      	movs	r3, #2
 8002214:	e004      	b.n	8002220 <app_algo_proc+0x130>
		}
	}
	case STATE_UNDEF:
		return RES_FAULT;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	e001      	b.n	8002220 <app_algo_proc+0x130>
	}
	return RES_FAULT;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002220:	4618      	mov	r0, r3
 8002222:	3724      	adds	r7, #36	; 0x24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd90      	pop	{r4, r7, pc}
 8002228:	2000043c 	.word	0x2000043c
 800222c:	0800f604 	.word	0x0800f604
 8002230:	0800f614 	.word	0x0800f614
 8002234:	00012110 	.word	0x00012110
 8002238:	0800f624 	.word	0x0800f624
 800223c:	0800f638 	.word	0x0800f638
 8002240:	0800f648 	.word	0x0800f648
 8002244:	0800f65c 	.word	0x0800f65c

08002248 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <LL_C2_PWR_SetPowerMode+0x28>)
 8002252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002256:	f023 0207 	bic.w	r2, r3, #7
 800225a:	4905      	ldr	r1, [pc, #20]	; (8002270 <LL_C2_PWR_SetPowerMode+0x28>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	58000400 	.word	0x58000400

08002274 <LL_EXTI_EnableIT_32_63>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <LL_EXTI_EnableIT_32_63+0x24>)
 800227e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002282:	4905      	ldr	r1, [pc, #20]	; (8002298 <LL_EXTI_EnableIT_32_63+0x24>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	58000800 	.word	0x58000800

0800229c <LL_C2_EXTI_EnableIT_32_63>:
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80022a6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80022aa:	4905      	ldr	r1, [pc, #20]	; (80022c0 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	58000800 	.word	0x58000800

080022c4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80022cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80022d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022de:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	cafecafe 	.word	0xcafecafe

08002300 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	22ff      	movs	r2, #255	; 0xff
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	22ca      	movs	r2, #202	; 0xca
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2253      	movs	r2, #83	; 0x53
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 0207 	bic.w	r2, r3, #7
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	609a      	str	r2, [r3, #8]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <MX_APPE_Config+0x18>)
 800238e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002392:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8002394:	f000 f83e 	bl	8002414 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8002398:	f000 f843 	bl	8002422 <Config_HSE>

  return;
 800239c:	bf00      	nop
}
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	58004000 	.word	0x58004000

080023a4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80023a8:	f000 f84f 	bl	800244a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80023ac:	f000 f868 	bl	8002480 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80023b0:	4908      	ldr	r1, [pc, #32]	; (80023d4 <MX_APPE_Init+0x30>)
 80023b2:	2000      	movs	r0, #0
 80023b4:	f000 fdc6 	bl	8002f44 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 80023b8:	f000 f81c 	bl	80023f4 <Init_Debug>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80023bc:	2101      	movs	r1, #1
 80023be:	2001      	movs	r0, #1
 80023c0:	f00a fba8 	bl	800cb14 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80023c4:	2101      	movs	r1, #1
 80023c6:	2001      	movs	r0, #1
 80023c8:	f00a fbd4 	bl	800cb74 <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80023cc:	f000 f866 	bl	800249c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80023d0:	bf00      	nop
}
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000774 	.word	0x20000774

080023d8 <Init_Smps>:

void Init_Smps(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80023dc:	bf00      	nop
}
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <Init_Exti>:

void Init_Exti(void)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80023ea:	2050      	movs	r0, #80	; 0x50
 80023ec:	f7ff ff42 	bl	8002274 <LL_EXTI_EnableIT_32_63>

  return;
 80023f0:	bf00      	nop
}
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80023f8:	f002 f8a2 	bl	8004540 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80023fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002400:	f7ff ff38 	bl	8002274 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8002404:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002408:	f7ff ff48 	bl	800229c <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 800240c:	f00a faca 	bl	800c9a4 <DbgTraceInit>
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 8002410:	bf00      	nop
}
 8002412:	bd80      	pop	{r7, pc}

08002414 <Reset_Device>:
static void Reset_Device(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8002418:	bf00      	nop
}
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002428:	2000      	movs	r0, #0
 800242a:	f00a fb39 	bl	800caa0 <OTP_Read>
 800242e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	799b      	ldrb	r3, [r3, #6]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff42 	bl	80022c4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8002440:	bf00      	nop
 8002442:	bf00      	nop
}
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <System_Init>:

static void System_Init(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0
  Init_Smps();
 800244e:	f7ff ffc3 	bl	80023d8 <Init_Smps>

  Init_Exti();
 8002452:	f7ff ffc8 	bl	80023e6 <Init_Exti>

  Init_Rtc();
 8002456:	f000 f803 	bl	8002460 <Init_Rtc>

  return;
 800245a:	bf00      	nop
}
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <Init_Rtc>:

static void Init_Rtc(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <Init_Rtc+0x1c>)
 8002466:	f7ff ff6c 	bl	8002342 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800246a:	2100      	movs	r1, #0
 800246c:	4803      	ldr	r0, [pc, #12]	; (800247c <Init_Rtc+0x1c>)
 800246e:	f7ff ff78 	bl	8002362 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002472:	4802      	ldr	r0, [pc, #8]	; (800247c <Init_Rtc+0x1c>)
 8002474:	f7ff ff58 	bl	8002328 <LL_RTC_EnableWriteProtection>

  return;
 8002478:	bf00      	nop
}
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40002800 	.word	0x40002800

08002480 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002484:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002488:	f7ff ff3a 	bl	8002300 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800248c:	f00a fb30 	bl	800caf0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002490:	2004      	movs	r0, #4
 8002492:	f7ff fed9 	bl	8002248 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8002496:	bf00      	nop
}
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80024a2:	f009 ffe3 	bl	800c46c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 80024a6:	4a11      	ldr	r2, [pc, #68]	; (80024ec <appe_Tl_Init+0x50>)
 80024a8:	2100      	movs	r1, #0
 80024aa:	2004      	movs	r0, #4
 80024ac:	f00a fc8e 	bl	800cdcc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <appe_Tl_Init+0x54>)
 80024b2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <appe_Tl_Init+0x58>)
 80024b6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80024b8:	463b      	mov	r3, r7
 80024ba:	4619      	mov	r1, r3
 80024bc:	480e      	ldr	r0, [pc, #56]	; (80024f8 <appe_Tl_Init+0x5c>)
 80024be:	f009 fda3 	bl	800c008 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <appe_Tl_Init+0x60>)
 80024c8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <appe_Tl_Init+0x64>)
 80024cc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80024ce:	f240 533c 	movw	r3, #1340	; 0x53c
 80024d2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80024d4:	f107 0308 	add.w	r3, r7, #8
 80024d8:	4618      	mov	r0, r3
 80024da:	f00a f935 	bl	800c748 <TL_MM_Init>

  TL_Enable();
 80024de:	f009 ffbf 	bl	800c460 <TL_Enable>

  return;
 80024e2:	bf00      	nop
}
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	0800c041 	.word	0x0800c041
 80024f0:	20030a54 	.word	0x20030a54
 80024f4:	08002505 	.word	0x08002505
 80024f8:	0800251b 	.word	0x0800251b
 80024fc:	20030b60 	.word	0x20030b60
 8002500:	20030518 	.word	0x20030518

08002504 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800250e:	bf00      	nop
}
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	330b      	adds	r3, #11
 8002528:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8002534:	d004      	beq.n	8002540 <APPE_SysUserEvtRx+0x26>
 8002536:	f249 2201 	movw	r2, #37377	; 0x9201
 800253a:	4293      	cmp	r3, r2
 800253c:	d003      	beq.n	8002546 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 800253e:	e008      	b.n	8002552 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8002540:	f000 f834 	bl	80025ac <APPE_SysEvtReadyProcessing>
         break;
 8002544:	e005      	b.n	8002552 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	789b      	ldrb	r3, [r3, #2]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f806 	bl	800255c <APPE_SysEvtError>
         break;
 8002550:	bf00      	nop
  }
  return;
 8002552:	bf00      	nop
}
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b7d      	cmp	r3, #125	; 0x7d
 800256a:	d002      	beq.n	8002572 <APPE_SysEvtError+0x16>
 800256c:	2b7e      	cmp	r3, #126	; 0x7e
 800256e:	d006      	beq.n	800257e <APPE_SysEvtError+0x22>
 8002570:	e00b      	b.n	800258a <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8002572:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <APPE_SysEvtError+0x44>)
 8002574:	2101      	movs	r1, #1
 8002576:	2000      	movs	r0, #0
 8002578:	f001 fe56 	bl	8004228 <logApplication>
       break;
 800257c:	e00c      	b.n	8002598 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 800257e:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <APPE_SysEvtError+0x48>)
 8002580:	2101      	movs	r1, #1
 8002582:	2000      	movs	r0, #0
 8002584:	f001 fe50 	bl	8004228 <logApplication>
       break;
 8002588:	e006      	b.n	8002598 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <APPE_SysEvtError+0x4c>)
 800258e:	2101      	movs	r1, #1
 8002590:	2000      	movs	r0, #0
 8002592:	f001 fe49 	bl	8004228 <logApplication>
       break;
 8002596:	bf00      	nop
  }
  return;
 8002598:	bf00      	nop
}
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	0800f670 	.word	0x0800f670
 80025a4:	0800f694 	.word	0x0800f694
 80025a8:	0800f6b4 	.word	0x0800f6b4

080025ac <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 80025b0:	f00a f93e 	bl	800c830 <TL_TRACES_Init>

  APP_THREAD_Init();
 80025b4:	f7fe fbc6 	bl	8000d44 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80025b8:	2100      	movs	r1, #0
 80025ba:	2001      	movs	r0, #1
 80025bc:	f00a faaa 	bl	800cb14 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80025c0:	2100      	movs	r1, #0
 80025c2:	2001      	movs	r0, #1
 80025c4:	f00a fad6 	bl	800cb74 <UTIL_LPM_SetOffMode>
  return;
 80025c8:	bf00      	nop
}
 80025ca:	bd80      	pop	{r7, pc}

080025cc <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f00a fafe 	bl	800cbd4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80025e0:	bf00      	nop
}
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d003      	beq.n	8002604 <UTIL_SEQ_EvtIdle+0x18>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d00c      	beq.n	800261c <UTIL_SEQ_EvtIdle+0x30>
 8002602:	e012      	b.n	800262a <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 8002604:	4b0d      	ldr	r3, [pc, #52]	; (800263c <UTIL_SEQ_EvtIdle+0x50>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d103      	bne.n	8002614 <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 800260c:	2001      	movs	r0, #1
 800260e:	f00a fae1 	bl	800cbd4 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 8002612:	e00f      	b.n	8002634 <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 8002614:	2000      	movs	r0, #0
 8002616:	f00a fadd 	bl	800cbd4 <UTIL_SEQ_Run>
    break;
 800261a:	e00b      	b.n	8002634 <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800261c:	2004      	movs	r0, #4
 800261e:	f00a fc23 	bl	800ce68 <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8002622:	2001      	movs	r0, #1
 8002624:	f00a fad6 	bl	800cbd4 <UTIL_SEQ_Run>
    break;
 8002628:	e004      	b.n	8002634 <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800262a:	f04f 30ff 	mov.w	r0, #4294967295
 800262e:	f00a fad1 	bl	800cbd4 <UTIL_SEQ_Run>
    break;
 8002632:	bf00      	nop
  }
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000448 	.word	0x20000448

08002640 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8002648:	2100      	movs	r1, #0
 800264a:	2004      	movs	r0, #4
 800264c:	f00a fbe0 	bl	800ce10 <UTIL_SEQ_SetTask>
  return;
 8002650:	bf00      	nop
}
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8002660:	2001      	movs	r0, #1
 8002662:	f00a fc01 	bl	800ce68 <UTIL_SEQ_SetEvt>
  return;
 8002666:	bf00      	nop
}
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8002676:	2001      	movs	r0, #1
 8002678:	f00a fc16 	bl	800cea8 <UTIL_SEQ_WaitEvt>
  return;
 800267c:	bf00      	nop
}
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
#if (CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	330b      	adds	r3, #11
 8002690:	1c99      	adds	r1, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7a9b      	ldrb	r3, [r3, #10]
 8002696:	3b02      	subs	r3, #2
 8002698:	461a      	mov	r2, r3
 800269a:	2001      	movs	r0, #1
 800269c:	f00a f9a8 	bl	800c9f0 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f00a f88d 	bl	800c7c0 <TL_MM_EvtDone>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if (CFG_DEBUG_TRACE != 0)
void DbgOutputInit(void)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
	MX_LPUART1_UART_Init();
 80026b2:	f001 f959 	bl	8003968 <MX_LPUART1_UART_Init>
  return;
 80026b6:	bf00      	nop
#endif /* CFG_DEBUG_TRACE_UART */
}
 80026b8:	bd80      	pop	{r7, pc}

080026ba <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	460b      	mov	r3, r1
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80026c8:	897a      	ldrh	r2, [r7, #10]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	2002      	movs	r0, #2
 80026d0:	f000 ff18 	bl	8003504 <HW_UART_Transmit_DMA>

  return;
 80026d4:	bf00      	nop
}
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <HAL_GPIO_EXTI_Callback+0x3c>)
 80026ea:	2101      	movs	r1, #1
 80026ec:	2000      	movs	r0, #0
 80026ee:	f001 fd9b 	bl	8004228 <logApplication>
  switch(GPIO_Pin)
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_EXTI_Callback+0x26>
 80026fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fe:	d005      	beq.n	800270c <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 8002700:	e005      	b.n	800270e <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 8002702:	2101      	movs	r1, #1
 8002704:	2008      	movs	r0, #8
 8002706:	f00a fb83 	bl	800ce10 <UTIL_SEQ_SetTask>
        break;
 800270a:	e000      	b.n	800270e <HAL_GPIO_EXTI_Callback+0x32>
        break;
 800270c:	bf00      	nop
  }
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	0800f6d4 	.word	0x0800f6d4

0800271c <LL_EXTI_EnableIT_0_31>:
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <LL_EXTI_EnableIT_0_31+0x24>)
 8002726:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800272a:	4905      	ldr	r1, [pc, #20]	; (8002740 <LL_EXTI_EnableIT_0_31+0x24>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	58000800 	.word	0x58000800

08002744 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4904      	ldr	r1, [pc, #16]	; (8002764 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	58000800 	.word	0x58000800

08002768 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <ReadRtcSsrValue+0x3c>)
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	b29b      	uxth	r3, r3
 8002774:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <ReadRtcSsrValue+0x3c>)
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	b29b      	uxth	r3, r3
 800277c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800277e:	e005      	b.n	800278c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <ReadRtcSsrValue+0x3c>)
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	b29b      	uxth	r3, r3
 800278a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d1f5      	bne.n	8002780 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002794:	683b      	ldr	r3, [r7, #0]
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40002800 	.word	0x40002800

080027a8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	460a      	mov	r2, r1
 80027b2:	71fb      	strb	r3, [r7, #7]
 80027b4:	4613      	mov	r3, r2
 80027b6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80027b8:	79ba      	ldrb	r2, [r7, #6]
 80027ba:	491d      	ldr	r1, [pc, #116]	; (8002830 <LinkTimerAfter+0x88>)
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	3315      	adds	r3, #21
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d009      	beq.n	80027e6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	4916      	ldr	r1, [pc, #88]	; (8002830 <LinkTimerAfter+0x88>)
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	3314      	adds	r3, #20
 80027e2:	79fa      	ldrb	r2, [r7, #7]
 80027e4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80027e6:	79fa      	ldrb	r2, [r7, #7]
 80027e8:	4911      	ldr	r1, [pc, #68]	; (8002830 <LinkTimerAfter+0x88>)
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	3315      	adds	r3, #21
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80027fa:	79fa      	ldrb	r2, [r7, #7]
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <LinkTimerAfter+0x88>)
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	3314      	adds	r3, #20
 800280a:	79ba      	ldrb	r2, [r7, #6]
 800280c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800280e:	79ba      	ldrb	r2, [r7, #6]
 8002810:	4907      	ldr	r1, [pc, #28]	; (8002830 <LinkTimerAfter+0x88>)
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	3315      	adds	r3, #21
 800281e:	79fa      	ldrb	r2, [r7, #7]
 8002820:	701a      	strb	r2, [r3, #0]

  return;
 8002822:	bf00      	nop
}
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	2000044c 	.word	0x2000044c

08002834 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	460a      	mov	r2, r1
 800283e:	71fb      	strb	r3, [r7, #7]
 8002840:	4613      	mov	r3, r2
 8002842:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002844:	4b29      	ldr	r3, [pc, #164]	; (80028ec <LinkTimerBefore+0xb8>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	79ba      	ldrb	r2, [r7, #6]
 800284c:	429a      	cmp	r2, r3
 800284e:	d032      	beq.n	80028b6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002850:	79ba      	ldrb	r2, [r7, #6]
 8002852:	4927      	ldr	r1, [pc, #156]	; (80028f0 <LinkTimerBefore+0xbc>)
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	3314      	adds	r3, #20
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	4922      	ldr	r1, [pc, #136]	; (80028f0 <LinkTimerBefore+0xbc>)
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	3315      	adds	r3, #21
 8002874:	79fa      	ldrb	r2, [r7, #7]
 8002876:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002878:	79fa      	ldrb	r2, [r7, #7]
 800287a:	491d      	ldr	r1, [pc, #116]	; (80028f0 <LinkTimerBefore+0xbc>)
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	3315      	adds	r3, #21
 8002888:	79ba      	ldrb	r2, [r7, #6]
 800288a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800288c:	79fa      	ldrb	r2, [r7, #7]
 800288e:	4918      	ldr	r1, [pc, #96]	; (80028f0 <LinkTimerBefore+0xbc>)
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	440b      	add	r3, r1
 800289a:	3314      	adds	r3, #20
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80028a0:	79ba      	ldrb	r2, [r7, #6]
 80028a2:	4913      	ldr	r1, [pc, #76]	; (80028f0 <LinkTimerBefore+0xbc>)
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	3314      	adds	r3, #20
 80028b0:	79fa      	ldrb	r2, [r7, #7]
 80028b2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80028b4:	e014      	b.n	80028e0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80028b6:	79fa      	ldrb	r2, [r7, #7]
 80028b8:	490d      	ldr	r1, [pc, #52]	; (80028f0 <LinkTimerBefore+0xbc>)
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	3315      	adds	r3, #21
 80028c6:	79ba      	ldrb	r2, [r7, #6]
 80028c8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80028ca:	79ba      	ldrb	r2, [r7, #6]
 80028cc:	4908      	ldr	r1, [pc, #32]	; (80028f0 <LinkTimerBefore+0xbc>)
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	3314      	adds	r3, #20
 80028da:	79fa      	ldrb	r2, [r7, #7]
 80028dc:	701a      	strb	r2, [r3, #0]
  return;
 80028de:	bf00      	nop
}
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	200004dc 	.word	0x200004dc
 80028f0:	2000044c 	.word	0x2000044c

080028f4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80028fe:	4b4e      	ldr	r3, [pc, #312]	; (8002a38 <linkTimer+0x144>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b06      	cmp	r3, #6
 8002906:	d118      	bne.n	800293a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002908:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <linkTimer+0x144>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4b4b      	ldr	r3, [pc, #300]	; (8002a3c <linkTimer+0x148>)
 8002910:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002912:	4a49      	ldr	r2, [pc, #292]	; (8002a38 <linkTimer+0x144>)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002918:	79fa      	ldrb	r2, [r7, #7]
 800291a:	4949      	ldr	r1, [pc, #292]	; (8002a40 <linkTimer+0x14c>)
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	3315      	adds	r3, #21
 8002928:	2206      	movs	r2, #6
 800292a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800292c:	4b45      	ldr	r3, [pc, #276]	; (8002a44 <linkTimer+0x150>)
 800292e:	f04f 32ff 	mov.w	r2, #4294967295
 8002932:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	81fb      	strh	r3, [r7, #14]
 8002938:	e078      	b.n	8002a2c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800293a:	f000 f909 	bl	8002b50 <ReturnTimeElapsed>
 800293e:	4603      	mov	r3, r0
 8002940:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002942:	79fa      	ldrb	r2, [r7, #7]
 8002944:	493e      	ldr	r1, [pc, #248]	; (8002a40 <linkTimer+0x14c>)
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	3308      	adds	r3, #8
 8002952:	6819      	ldr	r1, [r3, #0]
 8002954:	89fb      	ldrh	r3, [r7, #14]
 8002956:	79fa      	ldrb	r2, [r7, #7]
 8002958:	4419      	add	r1, r3
 800295a:	4839      	ldr	r0, [pc, #228]	; (8002a40 <linkTimer+0x14c>)
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4403      	add	r3, r0
 8002966:	3308      	adds	r3, #8
 8002968:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800296a:	79fa      	ldrb	r2, [r7, #7]
 800296c:	4934      	ldr	r1, [pc, #208]	; (8002a40 <linkTimer+0x14c>)
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	3308      	adds	r3, #8
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800297e:	4b2e      	ldr	r3, [pc, #184]	; (8002a38 <linkTimer+0x144>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <linkTimer+0x14c>)
 8002988:	460b      	mov	r3, r1
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	440b      	add	r3, r1
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	3308      	adds	r3, #8
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	d337      	bcc.n	8002a0c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800299c:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <linkTimer+0x144>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80029a2:	7b7a      	ldrb	r2, [r7, #13]
 80029a4:	4926      	ldr	r1, [pc, #152]	; (8002a40 <linkTimer+0x14c>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	3315      	adds	r3, #21
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80029b6:	e013      	b.n	80029e0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80029b8:	7b7a      	ldrb	r2, [r7, #13]
 80029ba:	4921      	ldr	r1, [pc, #132]	; (8002a40 <linkTimer+0x14c>)
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	3315      	adds	r3, #21
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80029cc:	7b7a      	ldrb	r2, [r7, #13]
 80029ce:	491c      	ldr	r1, [pc, #112]	; (8002a40 <linkTimer+0x14c>)
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	3315      	adds	r3, #21
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80029e0:	7b3b      	ldrb	r3, [r7, #12]
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d00b      	beq.n	80029fe <linkTimer+0x10a>
 80029e6:	7b3a      	ldrb	r2, [r7, #12]
 80029e8:	4915      	ldr	r1, [pc, #84]	; (8002a40 <linkTimer+0x14c>)
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	3308      	adds	r3, #8
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d2dc      	bcs.n	80029b8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80029fe:	7b7a      	ldrb	r2, [r7, #13]
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fecf 	bl	80027a8 <LinkTimerAfter>
 8002a0a:	e00f      	b.n	8002a2c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <linkTimer+0x144>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff0c 	bl	8002834 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <linkTimer+0x144>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <linkTimer+0x148>)
 8002a24:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002a26:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <linkTimer+0x144>)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002a2c:	89fb      	ldrh	r3, [r7, #14]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200004dc 	.word	0x200004dc
 8002a3c:	200004dd 	.word	0x200004dd
 8002a40:	2000044c 	.word	0x2000044c
 8002a44:	200004e0 	.word	0x200004e0

08002a48 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	460a      	mov	r2, r1
 8002a52:	71fb      	strb	r3, [r7, #7]
 8002a54:	4613      	mov	r3, r2
 8002a56:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002a58:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <UnlinkTimer+0xf8>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	79fa      	ldrb	r2, [r7, #7]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d111      	bne.n	8002a88 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002a64:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <UnlinkTimer+0xf8>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <UnlinkTimer+0xfc>)
 8002a6c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002a6e:	79fa      	ldrb	r2, [r7, #7]
 8002a70:	4935      	ldr	r1, [pc, #212]	; (8002b48 <UnlinkTimer+0x100>)
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3315      	adds	r3, #21
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <UnlinkTimer+0xf8>)
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e03e      	b.n	8002b06 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002a88:	79fa      	ldrb	r2, [r7, #7]
 8002a8a:	492f      	ldr	r1, [pc, #188]	; (8002b48 <UnlinkTimer+0x100>)
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	3314      	adds	r3, #20
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002a9c:	79fa      	ldrb	r2, [r7, #7]
 8002a9e:	492a      	ldr	r1, [pc, #168]	; (8002b48 <UnlinkTimer+0x100>)
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3315      	adds	r3, #21
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002ab0:	79f9      	ldrb	r1, [r7, #7]
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	4824      	ldr	r0, [pc, #144]	; (8002b48 <UnlinkTimer+0x100>)
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	440b      	add	r3, r1
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4403      	add	r3, r0
 8002ac0:	3315      	adds	r3, #21
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	b2d8      	uxtb	r0, r3
 8002ac6:	4920      	ldr	r1, [pc, #128]	; (8002b48 <UnlinkTimer+0x100>)
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3315      	adds	r3, #21
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ad8:	7bbb      	ldrb	r3, [r7, #14]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d013      	beq.n	8002b06 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002ade:	79f9      	ldrb	r1, [r7, #7]
 8002ae0:	7bba      	ldrb	r2, [r7, #14]
 8002ae2:	4819      	ldr	r0, [pc, #100]	; (8002b48 <UnlinkTimer+0x100>)
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	440b      	add	r3, r1
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4403      	add	r3, r0
 8002aee:	3314      	adds	r3, #20
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b2d8      	uxtb	r0, r3
 8002af4:	4914      	ldr	r1, [pc, #80]	; (8002b48 <UnlinkTimer+0x100>)
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	3314      	adds	r3, #20
 8002b02:	4602      	mov	r2, r0
 8002b04:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002b06:	79fa      	ldrb	r2, [r7, #7]
 8002b08:	490f      	ldr	r1, [pc, #60]	; (8002b48 <UnlinkTimer+0x100>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	330c      	adds	r3, #12
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <UnlinkTimer+0xf8>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b06      	cmp	r3, #6
 8002b22:	d107      	bne.n	8002b34 <UnlinkTimer+0xec>
 8002b24:	79bb      	ldrb	r3, [r7, #6]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d104      	bne.n	8002b34 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <UnlinkTimer+0x104>)
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	601a      	str	r2, [r3, #0]
  }

  return;
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
}
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	200004dc 	.word	0x200004dc
 8002b44:	200004dd 	.word	0x200004dd
 8002b48:	2000044c 	.word	0x2000044c
 8002b4c:	200004e0 	.word	0x200004e0

08002b50 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <ReturnTimeElapsed+0x70>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d026      	beq.n	8002bae <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002b60:	f7ff fe02 	bl	8002768 <ReadRtcSsrValue>
 8002b64:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <ReturnTimeElapsed+0x70>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d805      	bhi.n	8002b7c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <ReturnTimeElapsed+0x70>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	e00a      	b.n	8002b92 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <ReturnTimeElapsed+0x74>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <ReturnTimeElapsed+0x70>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <ReturnTimeElapsed+0x78>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <ReturnTimeElapsed+0x7c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	40d3      	lsrs	r3, r2
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	e001      	b.n	8002bb2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	b29b      	uxth	r3, r3
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200004e0 	.word	0x200004e0
 8002bc4:	200004e8 	.word	0x200004e8
 8002bc8:	200004e6 	.word	0x200004e6
 8002bcc:	200004e5 	.word	0x200004e5

08002bd0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d108      	bne.n	8002bf2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002be0:	f7ff fdc2 	bl	8002768 <ReadRtcSsrValue>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4a21      	ldr	r2, [pc, #132]	; (8002c6c <RestartWakeupCounter+0x9c>)
 8002be8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002bea:	2003      	movs	r0, #3
 8002bec:	f001 fe45 	bl	800487a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002bf0:	e039      	b.n	8002c66 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d803      	bhi.n	8002c00 <RestartWakeupCounter+0x30>
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <RestartWakeupCounter+0xa0>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d002      	beq.n	8002c06 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002c06:	bf00      	nop
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <RestartWakeupCounter+0xa4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f8      	beq.n	8002c08 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <RestartWakeupCounter+0xa4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <RestartWakeupCounter+0xa4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c26:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <RestartWakeupCounter+0xa8>)
 8002c2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c2e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002c30:	2003      	movs	r0, #3
 8002c32:	f001 fe30 	bl	8004896 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <RestartWakeupCounter+0xac>)
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	0c1b      	lsrs	r3, r3, #16
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	490e      	ldr	r1, [pc, #56]	; (8002c7c <RestartWakeupCounter+0xac>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002c46:	f7ff fd8f 	bl	8002768 <ReadRtcSsrValue>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <RestartWakeupCounter+0x9c>)
 8002c4e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <RestartWakeupCounter+0xa4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <RestartWakeupCounter+0xa4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c5e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002c60:	f3af 8000 	nop.w
  return ;
 8002c64:	bf00      	nop
}
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200004e0 	.word	0x200004e0
 8002c70:	200004e5 	.word	0x200004e5
 8002c74:	20000774 	.word	0x20000774
 8002c78:	58000800 	.word	0x58000800
 8002c7c:	40002800 	.word	0x40002800

08002c80 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002c86:	4b45      	ldr	r3, [pc, #276]	; (8002d9c <RescheduleTimerList+0x11c>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	d107      	bne.n	8002ca4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002c94:	bf00      	nop
 8002c96:	4b42      	ldr	r3, [pc, #264]	; (8002da0 <RescheduleTimerList+0x120>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f8      	bne.n	8002c96 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002ca4:	4b3e      	ldr	r3, [pc, #248]	; (8002da0 <RescheduleTimerList+0x120>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <RescheduleTimerList+0x120>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <RescheduleTimerList+0x124>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	493a      	ldr	r1, [pc, #232]	; (8002da8 <RescheduleTimerList+0x128>)
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3308      	adds	r3, #8
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002cce:	f7ff ff3f 	bl	8002b50 <ReturnTimeElapsed>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d205      	bcs.n	8002cea <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002ce2:	4b32      	ldr	r3, [pc, #200]	; (8002dac <RescheduleTimerList+0x12c>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e04d      	b.n	8002d86 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	4a30      	ldr	r2, [pc, #192]	; (8002db0 <RescheduleTimerList+0x130>)
 8002cee:	8812      	ldrh	r2, [r2, #0]
 8002cf0:	b292      	uxth	r2, r2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d906      	bls.n	8002d0a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002cfc:	4b2c      	ldr	r3, [pc, #176]	; (8002db0 <RescheduleTimerList+0x130>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <RescheduleTimerList+0x12c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e03d      	b.n	8002d86 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <RescheduleTimerList+0x12c>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d1a:	e034      	b.n	8002d86 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	4922      	ldr	r1, [pc, #136]	; (8002da8 <RescheduleTimerList+0x128>)
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	440b      	add	r3, r1
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d20a      	bcs.n	8002d4a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	491c      	ldr	r1, [pc, #112]	; (8002da8 <RescheduleTimerList+0x128>)
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	440b      	add	r3, r1
 8002d42:	3308      	adds	r3, #8
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e013      	b.n	8002d72 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	4916      	ldr	r1, [pc, #88]	; (8002da8 <RescheduleTimerList+0x128>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	3308      	adds	r3, #8
 8002d5a:	6819      	ldr	r1, [r3, #0]
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	1ac9      	subs	r1, r1, r3
 8002d62:	4811      	ldr	r0, [pc, #68]	; (8002da8 <RescheduleTimerList+0x128>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4403      	add	r3, r0
 8002d6e:	3308      	adds	r3, #8
 8002d70:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <RescheduleTimerList+0x128>)
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	3315      	adds	r3, #21
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b06      	cmp	r3, #6
 8002d8a:	d1c7      	bne.n	8002d1c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002d8c:	89bb      	ldrh	r3, [r7, #12]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff1e 	bl	8002bd0 <RestartWakeupCounter>

  return ;
 8002d94:	bf00      	nop
}
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40002800 	.word	0x40002800
 8002da0:	20000774 	.word	0x20000774
 8002da4:	200004dc 	.word	0x200004dc
 8002da8:	2000044c 	.word	0x2000044c
 8002dac:	200004e4 	.word	0x200004e4
 8002db0:	200004ea 	.word	0x200004ea

08002db4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dba:	f3ef 8310 	mrs	r3, PRIMASK
 8002dbe:	617b      	str	r3, [r7, #20]
  return(result);
 8002dc0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc4:	b672      	cpsid	i
}
 8002dc6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002dc8:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	22ca      	movs	r2, #202	; 0xca
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24
 8002dd0:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2253      	movs	r2, #83	; 0x53
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002dd8:	4b55      	ldr	r3, [pc, #340]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002de8:	4b52      	ldr	r3, [pc, #328]	; (8002f34 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002df0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002df4:	4950      	ldr	r1, [pc, #320]	; (8002f38 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	440b      	add	r3, r1
 8002e00:	330c      	adds	r3, #12
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d16e      	bne.n	8002ee8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002e0a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002e0e:	494a      	ldr	r1, [pc, #296]	; (8002f38 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002e1e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002e22:	4945      	ldr	r1, [pc, #276]	; (8002f38 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3310      	adds	r3, #16
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002e34:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d04c      	beq.n	8002ed8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002e3e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002e42:	493d      	ldr	r1, [pc, #244]	; (8002f38 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	330d      	adds	r3, #13
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d124      	bne.n	8002ea2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002e58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fdf2 	bl	8002a48 <UnlinkTimer>
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002e70:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002e74:	4930      	ldr	r1, [pc, #192]	; (8002f38 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	3304      	adds	r3, #4
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fa32 	bl	80032f4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	22ca      	movs	r2, #202	; 0xca
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2253      	movs	r2, #83	; 0x53
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24
 8002ea0:	e012      	b.n	8002ec8 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f383 8810 	msr	PRIMASK, r3
}
 8002eac:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f99a 	bl	80031ec <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	22ca      	movs	r2, #202	; 0xca
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2253      	movs	r2, #83	; 0x53
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	69b8      	ldr	r0, [r7, #24]
 8002ed2:	f000 fa95 	bl	8003400 <HW_TS_RTC_Int_AppNot>
 8002ed6:	e022      	b.n	8002f1e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002ed8:	f7ff fed2 	bl	8002c80 <RescheduleTimerList>
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f383 8810 	msr	PRIMASK, r3
}
 8002ee6:	e01a      	b.n	8002f1e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002ee8:	bf00      	nop
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f8      	beq.n	8002eea <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002f08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002f0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f383 8810 	msr	PRIMASK, r3
}
 8002f1c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002f1e:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	22ff      	movs	r2, #255	; 0xff
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002f26:	bf00      	nop
}
 8002f28:	3728      	adds	r7, #40	; 0x28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000774 	.word	0x20000774
 8002f34:	200004dc 	.word	0x200004dc
 8002f38:	2000044c 	.word	0x2000044c
 8002f3c:	200004e4 	.word	0x200004e4
 8002f40:	58000800 	.word	0x58000800

08002f44 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002f50:	4b5e      	ldr	r3, [pc, #376]	; (80030cc <HW_TS_Init+0x188>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	22ca      	movs	r2, #202	; 0xca
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24
 8002f58:	4b5c      	ldr	r3, [pc, #368]	; (80030cc <HW_TS_Init+0x188>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2253      	movs	r2, #83	; 0x53
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f60:	4b5b      	ldr	r3, [pc, #364]	; (80030d0 <HW_TS_Init+0x18c>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a5a      	ldr	r2, [pc, #360]	; (80030d0 <HW_TS_Init+0x18c>)
 8002f66:	f043 0320 	orr.w	r3, r3, #32
 8002f6a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002f6c:	4b58      	ldr	r3, [pc, #352]	; (80030d0 <HW_TS_Init+0x18c>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f1c3 0304 	rsb	r3, r3, #4
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b55      	ldr	r3, [pc, #340]	; (80030d4 <HW_TS_Init+0x190>)
 8002f80:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002f82:	4b53      	ldr	r3, [pc, #332]	; (80030d0 <HW_TS_Init+0x18c>)
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f8a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002f8e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	fa92 f2a2 	rbit	r2, r2
 8002f96:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	d101      	bne.n	8002fa6 <HW_TS_Init+0x62>
  {
    return 32U;
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	e003      	b.n	8002fae <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	fab2 f282 	clz	r2, r2
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	40d3      	lsrs	r3, r2
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <HW_TS_Init+0x194>)
 8002fb8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002fba:	4b45      	ldr	r3, [pc, #276]	; (80030d0 <HW_TS_Init+0x18c>)
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	4b44      	ldr	r3, [pc, #272]	; (80030dc <HW_TS_Init+0x198>)
 8002fcc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HW_TS_Init+0x198>)
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <HW_TS_Init+0x194>)
 8002fd6:	7812      	ldrb	r2, [r2, #0]
 8002fd8:	fb02 f303 	mul.w	r3, r2, r3
 8002fdc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fe0:	4a3c      	ldr	r2, [pc, #240]	; (80030d4 <HW_TS_Init+0x190>)
 8002fe2:	7812      	ldrb	r2, [r2, #0]
 8002fe4:	40d3      	lsrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d904      	bls.n	8002ffc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HW_TS_Init+0x19c>)
 8002ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ff8:	801a      	strh	r2, [r3, #0]
 8002ffa:	e003      	b.n	8003004 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HW_TS_Init+0x19c>)
 8003002:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003004:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003008:	f7ff fb9c 	bl	8002744 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800300c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003010:	f7ff fb84 	bl	800271c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d13d      	bne.n	8003096 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800301a:	4b32      	ldr	r3, [pc, #200]	; (80030e4 <HW_TS_Init+0x1a0>)
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003020:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HW_TS_Init+0x1a4>)
 8003022:	f04f 32ff 	mov.w	r2, #4294967295
 8003026:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003028:	2300      	movs	r3, #0
 800302a:	77fb      	strb	r3, [r7, #31]
 800302c:	e00c      	b.n	8003048 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800302e:	7ffa      	ldrb	r2, [r7, #31]
 8003030:	492e      	ldr	r1, [pc, #184]	; (80030ec <HW_TS_Init+0x1a8>)
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	440b      	add	r3, r1
 800303c:	330c      	adds	r3, #12
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003042:	7ffb      	ldrb	r3, [r7, #31]
 8003044:	3301      	adds	r3, #1
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	7ffb      	ldrb	r3, [r7, #31]
 800304a:	2b05      	cmp	r3, #5
 800304c:	d9ef      	bls.n	800302e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800304e:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <HW_TS_Init+0x1ac>)
 8003050:	2206      	movs	r2, #6
 8003052:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HW_TS_Init+0x188>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <HW_TS_Init+0x188>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003062:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HW_TS_Init+0x188>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <HW_TS_Init+0x188>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003074:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003076:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <HW_TS_Init+0x1b0>)
 8003078:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800307c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800307e:	2003      	movs	r0, #3
 8003080:	f001 fc09 	bl	8004896 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HW_TS_Init+0x188>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HW_TS_Init+0x188>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	e009      	b.n	80030aa <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <HW_TS_Init+0x188>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80030a4:	2003      	movs	r0, #3
 80030a6:	f001 fbe8 	bl	800487a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HW_TS_Init+0x188>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	22ff      	movs	r2, #255	; 0xff
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80030b2:	2200      	movs	r2, #0
 80030b4:	2103      	movs	r1, #3
 80030b6:	2003      	movs	r0, #3
 80030b8:	f001 fb99 	bl	80047ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80030bc:	2003      	movs	r0, #3
 80030be:	f001 fbb0 	bl	8004822 <HAL_NVIC_EnableIRQ>

  return;
 80030c2:	bf00      	nop
}
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000774 	.word	0x20000774
 80030d0:	40002800 	.word	0x40002800
 80030d4:	200004e5 	.word	0x200004e5
 80030d8:	200004e6 	.word	0x200004e6
 80030dc:	200004e8 	.word	0x200004e8
 80030e0:	200004ea 	.word	0x200004ea
 80030e4:	200004e4 	.word	0x200004e4
 80030e8:	200004e0 	.word	0x200004e0
 80030ec:	2000044c 	.word	0x2000044c
 80030f0:	200004dc 	.word	0x200004dc
 80030f4:	58000800 	.word	0x58000800

080030f8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b08b      	sub	sp, #44	; 0x2c
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310e:	f3ef 8310 	mrs	r3, PRIMASK
 8003112:	61fb      	str	r3, [r7, #28]
  return(result);
 8003114:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003116:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003118:	b672      	cpsid	i
}
 800311a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800311c:	e004      	b.n	8003128 <HW_TS_Create+0x30>
  {
    loop++;
 800311e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003122:	3301      	adds	r3, #1
 8003124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003128:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800312c:	2b05      	cmp	r3, #5
 800312e:	d80c      	bhi.n	800314a <HW_TS_Create+0x52>
 8003130:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003134:	492c      	ldr	r1, [pc, #176]	; (80031e8 <HW_TS_Create+0xf0>)
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	330c      	adds	r3, #12
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e9      	bne.n	800311e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800314a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800314e:	2b06      	cmp	r3, #6
 8003150:	d038      	beq.n	80031c4 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003152:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003156:	4924      	ldr	r1, [pc, #144]	; (80031e8 <HW_TS_Create+0xf0>)
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	440b      	add	r3, r1
 8003162:	330c      	adds	r3, #12
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f383 8810 	msr	PRIMASK, r3
}
 8003172:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003174:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003178:	491b      	ldr	r1, [pc, #108]	; (80031e8 <HW_TS_Create+0xf0>)
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	3310      	adds	r3, #16
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800318a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800318e:	4916      	ldr	r1, [pc, #88]	; (80031e8 <HW_TS_Create+0xf0>)
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	330d      	adds	r3, #13
 800319c:	79fa      	ldrb	r2, [r7, #7]
 800319e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80031a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80031a4:	4910      	ldr	r1, [pc, #64]	; (80031e8 <HW_TS_Create+0xf0>)
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	440b      	add	r3, r1
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80031ba:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031c2:	e008      	b.n	80031d6 <HW_TS_Create+0xde>
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f383 8810 	msr	PRIMASK, r3
}
 80031ce:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80031d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031da:	4618      	mov	r0, r3
 80031dc:	372c      	adds	r7, #44	; 0x2c
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	2000044c 	.word	0x2000044c

080031ec <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f6:	f3ef 8310 	mrs	r3, PRIMASK
 80031fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80031fc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80031fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003200:	b672      	cpsid	i
}
 8003202:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003204:	2003      	movs	r0, #3
 8003206:	f001 fb1a 	bl	800483e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HW_TS_Stop+0xf0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	22ca      	movs	r2, #202	; 0xca
 8003210:	625a      	str	r2, [r3, #36]	; 0x24
 8003212:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HW_TS_Stop+0xf0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2253      	movs	r2, #83	; 0x53
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800321a:	79fa      	ldrb	r2, [r7, #7]
 800321c:	4930      	ldr	r1, [pc, #192]	; (80032e0 <HW_TS_Stop+0xf4>)
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	440b      	add	r3, r1
 8003228:	330c      	adds	r3, #12
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d142      	bne.n	80032b8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fc06 	bl	8002a48 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800323c:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <HW_TS_Stop+0xf8>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	2b06      	cmp	r3, #6
 8003246:	d12f      	bne.n	80032a8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <HW_TS_Stop+0xfc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003254:	d107      	bne.n	8003266 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003256:	bf00      	nop
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HW_TS_Stop+0xf0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f8      	bne.n	8003258 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HW_TS_Stop+0xf0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HW_TS_Stop+0xf0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003274:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003276:	bf00      	nop
 8003278:	4b18      	ldr	r3, [pc, #96]	; (80032dc <HW_TS_Stop+0xf0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f8      	beq.n	8003278 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HW_TS_Stop+0xf0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <HW_TS_Stop+0xf0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003296:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <HW_TS_Stop+0x100>)
 800329a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800329e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80032a0:	2003      	movs	r0, #3
 80032a2:	f001 faf8 	bl	8004896 <HAL_NVIC_ClearPendingIRQ>
 80032a6:	e007      	b.n	80032b8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HW_TS_Stop+0x104>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	7cfa      	ldrb	r2, [r7, #19]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80032b4:	f7ff fce4 	bl	8002c80 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HW_TS_Stop+0xf0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	22ff      	movs	r2, #255	; 0xff
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80032c0:	2003      	movs	r0, #3
 80032c2:	f001 faae 	bl	8004822 <HAL_NVIC_EnableIRQ>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f383 8810 	msr	PRIMASK, r3
}
 80032d0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80032d2:	bf00      	nop
}
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000774 	.word	0x20000774
 80032e0:	2000044c 	.word	0x2000044c
 80032e4:	200004dc 	.word	0x200004dc
 80032e8:	40002800 	.word	0x40002800
 80032ec:	58000800 	.word	0x58000800
 80032f0:	200004dd 	.word	0x200004dd

080032f4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	6039      	str	r1, [r7, #0]
 80032fe:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003300:	79fa      	ldrb	r2, [r7, #7]
 8003302:	493b      	ldr	r1, [pc, #236]	; (80033f0 <HW_TS_Start+0xfc>)
 8003304:	4613      	mov	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	330c      	adds	r3, #12
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d103      	bne.n	8003320 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff66 	bl	80031ec <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003320:	f3ef 8310 	mrs	r3, PRIMASK
 8003324:	60fb      	str	r3, [r7, #12]
  return(result);
 8003326:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003328:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800332a:	b672      	cpsid	i
}
 800332c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800332e:	2003      	movs	r0, #3
 8003330:	f001 fa85 	bl	800483e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003334:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <HW_TS_Start+0x100>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	22ca      	movs	r2, #202	; 0xca
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HW_TS_Start+0x100>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2253      	movs	r2, #83	; 0x53
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003344:	79fa      	ldrb	r2, [r7, #7]
 8003346:	492a      	ldr	r1, [pc, #168]	; (80033f0 <HW_TS_Start+0xfc>)
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	330c      	adds	r3, #12
 8003354:	2202      	movs	r2, #2
 8003356:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003358:	79fa      	ldrb	r2, [r7, #7]
 800335a:	4925      	ldr	r1, [pc, #148]	; (80033f0 <HW_TS_Start+0xfc>)
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	3308      	adds	r3, #8
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800336c:	79fa      	ldrb	r2, [r7, #7]
 800336e:	4920      	ldr	r1, [pc, #128]	; (80033f0 <HW_TS_Start+0xfc>)
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	440b      	add	r3, r1
 800337a:	3304      	adds	r3, #4
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fab6 	bl	80028f4 <linkTimer>
 8003388:	4603      	mov	r3, r0
 800338a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <HW_TS_Start+0x104>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003392:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HW_TS_Start+0x108>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	7c7a      	ldrb	r2, [r7, #17]
 800339a:	429a      	cmp	r2, r3
 800339c:	d002      	beq.n	80033a4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800339e:	f7ff fc6f 	bl	8002c80 <RescheduleTimerList>
 80033a2:	e013      	b.n	80033cc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80033a4:	79fa      	ldrb	r2, [r7, #7]
 80033a6:	4912      	ldr	r1, [pc, #72]	; (80033f0 <HW_TS_Start+0xfc>)
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	440b      	add	r3, r1
 80033b2:	3308      	adds	r3, #8
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	8a7b      	ldrh	r3, [r7, #18]
 80033b8:	79fa      	ldrb	r2, [r7, #7]
 80033ba:	1ac9      	subs	r1, r1, r3
 80033bc:	480c      	ldr	r0, [pc, #48]	; (80033f0 <HW_TS_Start+0xfc>)
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4403      	add	r3, r0
 80033c8:	3308      	adds	r3, #8
 80033ca:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HW_TS_Start+0x100>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	22ff      	movs	r2, #255	; 0xff
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80033d4:	2003      	movs	r0, #3
 80033d6:	f001 fa24 	bl	8004822 <HAL_NVIC_EnableIRQ>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f383 8810 	msr	PRIMASK, r3
}
 80033e4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80033e6:	bf00      	nop
}
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	2000044c 	.word	0x2000044c
 80033f4:	20000774 	.word	0x20000774
 80033f8:	200004dc 	.word	0x200004dc
 80033fc:	200004dd 	.word	0x200004dd

08003400 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	460b      	mov	r3, r1
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4798      	blx	r3

  return;
 8003412:	bf00      	nop
}
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	4603      	mov	r3, r0
 8003428:	73fb      	strb	r3, [r7, #15]
 800342a:	4613      	mov	r3, r2
 800342c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HW_UART_Receive_IT+0x1e>
 8003434:	2b02      	cmp	r3, #2
 8003436:	d00d      	beq.n	8003454 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8003438:	e019      	b.n	800346e <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 800343a:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <HW_UART_Receive_IT+0x5c>)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <HW_UART_Receive_IT+0x60>)
 8003442:	4a0f      	ldr	r2, [pc, #60]	; (8003480 <HW_UART_Receive_IT+0x64>)
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	89bb      	ldrh	r3, [r7, #12]
 8003448:	461a      	mov	r2, r3
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	480b      	ldr	r0, [pc, #44]	; (800347c <HW_UART_Receive_IT+0x60>)
 800344e:	f004 ff35 	bl	80082bc <HAL_UART_Receive_IT>
            break;
 8003452:	e00c      	b.n	800346e <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <HW_UART_Receive_IT+0x68>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HW_UART_Receive_IT+0x6c>)
 800345c:	4a0b      	ldr	r2, [pc, #44]	; (800348c <HW_UART_Receive_IT+0x70>)
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	89bb      	ldrh	r3, [r7, #12]
 8003462:	461a      	mov	r2, r3
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	4808      	ldr	r0, [pc, #32]	; (8003488 <HW_UART_Receive_IT+0x6c>)
 8003468:	f004 ff28 	bl	80082bc <HAL_UART_Receive_IT>
            break;
 800346c:	bf00      	nop
    }

    return;
 800346e:	bf00      	nop
}
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200004ec 	.word	0x200004ec
 800347c:	200005cc 	.word	0x200005cc
 8003480:	40013800 	.word	0x40013800
 8003484:	200004f4 	.word	0x200004f4
 8003488:	20000538 	.word	0x20000538
 800348c:	40008000 	.word	0x40008000

08003490 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	4603      	mov	r3, r0
 800349c:	73fb      	strb	r3, [r7, #15]
 800349e:	4613      	mov	r3, r2
 80034a0:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HW_UART_Transmit_IT+0x1e>
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d00d      	beq.n	80034c8 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80034ac:	e019      	b.n	80034e2 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 80034ae:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <HW_UART_Transmit_IT+0x5c>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HW_UART_Transmit_IT+0x60>)
 80034b6:	4a0f      	ldr	r2, [pc, #60]	; (80034f4 <HW_UART_Transmit_IT+0x64>)
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	89bb      	ldrh	r3, [r7, #12]
 80034bc:	461a      	mov	r2, r3
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <HW_UART_Transmit_IT+0x60>)
 80034c2:	f004 fe67 	bl	8008194 <HAL_UART_Transmit_IT>
            break;
 80034c6:	e00c      	b.n	80034e2 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 80034c8:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <HW_UART_Transmit_IT+0x68>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HW_UART_Transmit_IT+0x6c>)
 80034d0:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <HW_UART_Transmit_IT+0x70>)
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	89bb      	ldrh	r3, [r7, #12]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	4808      	ldr	r0, [pc, #32]	; (80034fc <HW_UART_Transmit_IT+0x6c>)
 80034dc:	f004 fe5a 	bl	8008194 <HAL_UART_Transmit_IT>
            break;
 80034e0:	bf00      	nop
    }

    return;
 80034e2:	bf00      	nop
}
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200004f0 	.word	0x200004f0
 80034f0:	200005cc 	.word	0x200005cc
 80034f4:	40013800 	.word	0x40013800
 80034f8:	200004f8 	.word	0x200004f8
 80034fc:	20000538 	.word	0x20000538
 8003500:	40008000 	.word	0x40008000

08003504 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	4603      	mov	r3, r0
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	4613      	mov	r3, r2
 8003514:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800351a:	2300      	movs	r3, #0
 800351c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HW_UART_Transmit_DMA+0x26>
 8003524:	2b02      	cmp	r3, #2
 8003526:	d00f      	beq.n	8003548 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003528:	e01d      	b.n	8003566 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 800352a:	4a1f      	ldr	r2, [pc, #124]	; (80035a8 <HW_UART_Transmit_DMA+0xa4>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8003530:	4b1e      	ldr	r3, [pc, #120]	; (80035ac <HW_UART_Transmit_DMA+0xa8>)
 8003532:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <HW_UART_Transmit_DMA+0xac>)
 8003534:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003536:	89bb      	ldrh	r3, [r7, #12]
 8003538:	461a      	mov	r2, r3
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	481b      	ldr	r0, [pc, #108]	; (80035ac <HW_UART_Transmit_DMA+0xa8>)
 800353e:	f004 ff09 	bl	8008354 <HAL_UART_Transmit_DMA>
 8003542:	4603      	mov	r3, r0
 8003544:	75fb      	strb	r3, [r7, #23]
            break;
 8003546:	e00e      	b.n	8003566 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8003548:	4a1a      	ldr	r2, [pc, #104]	; (80035b4 <HW_UART_Transmit_DMA+0xb0>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 800354e:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <HW_UART_Transmit_DMA+0xb4>)
 8003550:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <HW_UART_Transmit_DMA+0xb8>)
 8003552:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8003554:	89bb      	ldrh	r3, [r7, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	4817      	ldr	r0, [pc, #92]	; (80035b8 <HW_UART_Transmit_DMA+0xb4>)
 800355c:	f004 fefa 	bl	8008354 <HAL_UART_Transmit_DMA>
 8003560:	4603      	mov	r3, r0
 8003562:	75fb      	strb	r3, [r7, #23]
            break;
 8003564:	bf00      	nop
    }

    switch (hal_status)
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d817      	bhi.n	800359c <HW_UART_Transmit_DMA+0x98>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HW_UART_Transmit_DMA+0x70>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003585 	.word	0x08003585
 8003578:	0800358b 	.word	0x0800358b
 800357c:	08003591 	.word	0x08003591
 8003580:	08003597 	.word	0x08003597
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003584:	2300      	movs	r3, #0
 8003586:	75bb      	strb	r3, [r7, #22]
            break;
 8003588:	e009      	b.n	800359e <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800358a:	2301      	movs	r3, #1
 800358c:	75bb      	strb	r3, [r7, #22]
            break;
 800358e:	e006      	b.n	800359e <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003590:	2302      	movs	r3, #2
 8003592:	75bb      	strb	r3, [r7, #22]
            break;
 8003594:	e003      	b.n	800359e <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003596:	2303      	movs	r3, #3
 8003598:	75bb      	strb	r3, [r7, #22]
            break;
 800359a:	e000      	b.n	800359e <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 800359c:	bf00      	nop
    }

    return hw_status;
 800359e:	7dbb      	ldrb	r3, [r7, #22]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200004f0 	.word	0x200004f0
 80035ac:	200005cc 	.word	0x200005cc
 80035b0:	40013800 	.word	0x40013800
 80035b4:	200004f8 	.word	0x200004f8
 80035b8:	20000538 	.word	0x20000538
 80035bc:	40008000 	.word	0x40008000

080035c0 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0f      	ldr	r2, [pc, #60]	; (800360c <HAL_UART_RxCpltCallback+0x4c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00a      	beq.n	80035e8 <HAL_UART_RxCpltCallback+0x28>
 80035d2:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <HAL_UART_RxCpltCallback+0x50>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d10f      	bne.n	80035f8 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80035d8:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <HAL_UART_RxCpltCallback+0x54>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <HAL_UART_RxCpltCallback+0x54>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4798      	blx	r3
            }
            break;
 80035e6:	e009      	b.n	80035fc <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_UART_RxCpltCallback+0x58>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 80035f0:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_UART_RxCpltCallback+0x58>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4798      	blx	r3
            }
            break;
 80035f6:	e003      	b.n	8003600 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 80035f8:	bf00      	nop
 80035fa:	e002      	b.n	8003602 <HAL_UART_RxCpltCallback+0x42>
            break;
 80035fc:	bf00      	nop
 80035fe:	e000      	b.n	8003602 <HAL_UART_RxCpltCallback+0x42>
            break;
 8003600:	bf00      	nop
    }

    return;
 8003602:	bf00      	nop
}
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40008000 	.word	0x40008000
 8003610:	40013800 	.word	0x40013800
 8003614:	200004ec 	.word	0x200004ec
 8003618:	200004f4 	.word	0x200004f4

0800361c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0f      	ldr	r2, [pc, #60]	; (8003668 <HAL_UART_TxCpltCallback+0x4c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00a      	beq.n	8003644 <HAL_UART_TxCpltCallback+0x28>
 800362e:	4a0f      	ldr	r2, [pc, #60]	; (800366c <HAL_UART_TxCpltCallback+0x50>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d10f      	bne.n	8003654 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <HAL_UART_TxCpltCallback+0x54>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_UART_TxCpltCallback+0x54>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4798      	blx	r3
            }
            break;
 8003642:	e009      	b.n	8003658 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_UART_TxCpltCallback+0x58>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_UART_TxCpltCallback+0x58>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4798      	blx	r3
            }
            break;
 8003652:	e003      	b.n	800365c <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <HAL_UART_TxCpltCallback+0x42>
            break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <HAL_UART_TxCpltCallback+0x42>
            break;
 800365c:	bf00      	nop
    }

    return;
 800365e:	bf00      	nop
}
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40008000 	.word	0x40008000
 800366c:	40013800 	.word	0x40013800
 8003670:	200004f0 	.word	0x200004f0
 8003674:	200004f8 	.word	0x200004f8

08003678 <LL_RCC_LSE_SetDriveCapability>:
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f023 0218 	bic.w	r2, r3, #24
 800368c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_AHB1_GRP1_EnableClock>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80036ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80036bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036c8:	68fb      	ldr	r3, [r7, #12]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <LL_AHB2_GRP1_EnableClock>:
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80036de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80036ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4013      	ands	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036fa:	68fb      	ldr	r3, [r7, #12]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <LL_APB1_GRP1_EnableClock>:
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003714:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4313      	orrs	r3, r2
 800371e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003724:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4013      	ands	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800372c:	68fb      	ldr	r3, [r7, #12]
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <main>:
SensorData_t sensor_data;
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003740:	f000 fe78 	bl	8004434 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 8003744:	f7fe fe20 	bl	8002388 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003748:	f000 f824 	bl	8003794 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800374c:	f000 f87e 	bl	800384c <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 8003750:	f000 f898 	bl	8003884 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003754:	f000 f9aa 	bl	8003aac <MX_GPIO_Init>
	MX_DMA_Init();
 8003758:	f000 f98e 	bl	8003a78 <MX_DMA_Init>
	MX_RF_Init();
 800375c:	f000 f950 	bl	8003a00 <MX_RF_Init>
	MX_RTC_Init();
 8003760:	f000 f956 	bl	8003a10 <MX_RTC_Init>
	MX_I2C1_Init();
 8003764:	f000 f8a2 	bl	80038ac <MX_I2C1_Init>

	/*--[ Scanning Done ]--*/
	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 8003768:	f7fe fe1c 	bl	80023a4 <MX_APPE_Init>
	app_algo_init();
 800376c:	f7fe fca2 	bl	80020b4 <app_algo_init>

	sensirion_i2c_init(&hi2c1);
 8003770:	4807      	ldr	r0, [pc, #28]	; (8003790 <main+0x54>)
 8003772:	f7fc ffeb 	bl	800074c <sensirion_i2c_init>

	sht4x_enable_low_power_mode(1);
 8003776:	2001      	movs	r0, #1
 8003778:	f7fd f86a 	bl	8000850 <sht4x_enable_low_power_mode>
	platform_stts22h_init(&hi2c1);
 800377c:	4804      	ldr	r0, [pc, #16]	; (8003790 <main+0x54>)
 800377e:	f7fd f889 	bl	8000894 <platform_stts22h_init>
	stts22h_temp_data_rate_set(0x04);
 8003782:	2004      	movs	r0, #4
 8003784:	f7fd f918 	bl	80009b8 <stts22h_temp_data_rate_set>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		MX_APPE_Process();
 8003788:	f7fe ff20 	bl	80025cc <MX_APPE_Process>
 800378c:	e7fc      	b.n	8003788 <main+0x4c>
 800378e:	bf00      	nop
 8003790:	20000720 	.word	0x20000720

08003794 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b09a      	sub	sp, #104	; 0x68
 8003798:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800379a:	f107 0320 	add.w	r3, r7, #32
 800379e:	2248      	movs	r2, #72	; 0x48
 80037a0:	2100      	movs	r1, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f00a f91c 	bl	800d9e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	60da      	str	r2, [r3, #12]
 80037b4:	611a      	str	r2, [r3, #16]
 80037b6:	615a      	str	r2, [r3, #20]
 80037b8:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80037ba:	f002 fc75 	bl	80060a8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80037be:	2000      	movs	r0, #0
 80037c0:	f7ff ff5a 	bl	8003678 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037c4:	4b20      	ldr	r3, [pc, #128]	; (8003848 <SystemClock_Config+0xb4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <SystemClock_Config+0xb4>)
 80037ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <SystemClock_Config+0xb4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80037e0:	2307      	movs	r3, #7
 80037e2:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037ea:	2301      	movs	r3, #1
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037f4:	2340      	movs	r3, #64	; 0x40
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80037fc:	f107 0320 	add.w	r3, r7, #32
 8003800:	4618      	mov	r0, r3
 8003802:	f003 f863 	bl	80068cc <HAL_RCC_OscConfig>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <SystemClock_Config+0x7c>
		Error_Handler();
 800380c:	f000 f978 	bl	8003b00 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8003810:	236f      	movs	r3, #111	; 0x6f
 8003812:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003814:	2302      	movs	r3, #2
 8003816:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003828:	2300      	movs	r3, #0
 800382a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	2101      	movs	r1, #1
 8003830:	4618      	mov	r0, r3
 8003832:	f003 fbbf 	bl	8006fb4 <HAL_RCC_ClockConfig>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <SystemClock_Config+0xac>
		Error_Handler();
 800383c:	f000 f960 	bl	8003b00 <Error_Handler>
	}
}
 8003840:	bf00      	nop
 8003842:	3768      	adds	r7, #104	; 0x68
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	58000400 	.word	0x58000400

0800384c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b094      	sub	sp, #80	; 0x50
 8003850:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003852:	463b      	mov	r3, r7
 8003854:	2250      	movs	r2, #80	; 0x50
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f00a f8c1 	bl	800d9e0 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 800385e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003862:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003868:	647b      	str	r3, [r7, #68]	; 0x44
	//PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
	// PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800386a:	463b      	mov	r3, r7
 800386c:	4618      	mov	r0, r3
 800386e:	f003 ffde 	bl	800782e <HAL_RCCEx_PeriphCLKConfig>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <PeriphCommonClock_Config+0x30>
		Error_Handler();
 8003878:	f000 f942 	bl	8003b00 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 800387c:	bf00      	nop
 800387e:	3750      	adds	r7, #80	; 0x50
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <MX_IPCC_Init+0x20>)
 800388a:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <MX_IPCC_Init+0x24>)
 800388c:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <MX_IPCC_Init+0x20>)
 8003890:	f002 fb84 	bl	8005f9c <HAL_IPCC_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_IPCC_Init+0x1a>
		Error_Handler();
 800389a:	f000 f931 	bl	8003b00 <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200004fc 	.word	0x200004fc
 80038a8:	58000c00 	.word	0x58000c00

080038ac <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	// Configure PB8 and PB9 as alternate function pins
	__HAL_RCC_I2C1_CLK_ENABLE();
 80038b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80038b6:	f7ff ff27 	bl	8003708 <LL_APB1_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80038ba:	2002      	movs	r0, #2
 80038bc:	f7ff ff0b 	bl	80036d6 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef gpio_init;
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80038c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038c4:	607b      	str	r3, [r7, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 80038c6:	2312      	movs	r3, #18
 80038c8:	60bb      	str	r3, [r7, #8]
	gpio_init.Pull = GPIO_PULLUP;
 80038ca:	2301      	movs	r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ce:	2303      	movs	r3, #3
 80038d0:	613b      	str	r3, [r7, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 80038d2:	2304      	movs	r3, #4
 80038d4:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &gpio_init);
 80038d6:	1d3b      	adds	r3, r7, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4820      	ldr	r0, [pc, #128]	; (800395c <MX_I2C1_Init+0xb0>)
 80038dc:	f001 fbda 	bl	8005094 <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 80038e0:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <MX_I2C1_Init+0xb4>)
 80038e2:	4a20      	ldr	r2, [pc, #128]	; (8003964 <MX_I2C1_Init+0xb8>)
 80038e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <MX_I2C1_Init+0xb4>)
 80038e8:	f640 6214 	movw	r2, #3604	; 0xe14
 80038ec:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0x00;
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <MX_I2C1_Init+0xb4>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038f4:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <MX_I2C1_Init+0xb4>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038fa:	4b19      	ldr	r3, [pc, #100]	; (8003960 <MX_I2C1_Init+0xb4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003900:	4b17      	ldr	r3, [pc, #92]	; (8003960 <MX_I2C1_Init+0xb4>)
 8003902:	2200      	movs	r2, #0
 8003904:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003906:	4b16      	ldr	r3, [pc, #88]	; (8003960 <MX_I2C1_Init+0xb4>)
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <MX_I2C1_Init+0xb4>)
 800390e:	2200      	movs	r2, #0
 8003910:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003912:	4b13      	ldr	r3, [pc, #76]	; (8003960 <MX_I2C1_Init+0xb4>)
 8003914:	2200      	movs	r2, #0
 8003916:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003918:	4811      	ldr	r0, [pc, #68]	; (8003960 <MX_I2C1_Init+0xb4>)
 800391a:	f001 fd99 	bl	8005450 <HAL_I2C_Init>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_I2C1_Init+0x7c>
		Error_Handler();
 8003924:	f000 f8ec 	bl	8003b00 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8003928:	2100      	movs	r1, #0
 800392a:	480d      	ldr	r0, [pc, #52]	; (8003960 <MX_I2C1_Init+0xb4>)
 800392c:	f002 fa8c 	bl	8005e48 <HAL_I2CEx_ConfigAnalogFilter>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_I2C1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8003936:	f000 f8e3 	bl	8003b00 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800393a:	2100      	movs	r1, #0
 800393c:	4808      	ldr	r0, [pc, #32]	; (8003960 <MX_I2C1_Init+0xb4>)
 800393e:	f002 face 	bl	8005ede <HAL_I2CEx_ConfigDigitalFilter>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_I2C1_Init+0xa0>
		Error_Handler();
 8003948:	f000 f8da 	bl	8003b00 <Error_Handler>
	}
	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800394c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003950:	f002 fb12 	bl	8005f78 <HAL_I2CEx_EnableFastModePlus>
}
 8003954:	bf00      	nop
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	48000400 	.word	0x48000400
 8003960:	20000720 	.word	0x20000720
 8003964:	40005400 	.word	0x40005400

08003968 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_LPUART1_UART_Init(void) {
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 800396c:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 800396e:	4a23      	ldr	r2, [pc, #140]	; (80039fc <MX_LPUART1_UART_Init+0x94>)
 8003970:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8003972:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 8003974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003978:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 800397c:	2200      	movs	r2, #0
 800397e:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 8003982:	2200      	movs	r2, #0
 8003984:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003986:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 8003988:	2200      	movs	r2, #0
 800398a:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 800398e:	220c      	movs	r2, #12
 8003990:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003992:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 8003994:	2200      	movs	r2, #0
 8003996:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003998:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 800399a:	2200      	movs	r2, #0
 800399c:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800399e:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039a4:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80039aa:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80039b0:	4811      	ldr	r0, [pc, #68]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 80039b2:	f004 fb9f 	bl	80080f4 <HAL_UART_Init>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <MX_LPUART1_UART_Init+0x58>
		Error_Handler();
 80039bc:	f000 f8a0 	bl	8003b00 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 80039c0:	2100      	movs	r1, #0
 80039c2:	480d      	ldr	r0, [pc, #52]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 80039c4:	f006 fe25 	bl	800a612 <HAL_UARTEx_SetTxFifoThreshold>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_LPUART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80039ce:	f000 f897 	bl	8003b00 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 80039d2:	2100      	movs	r1, #0
 80039d4:	4808      	ldr	r0, [pc, #32]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 80039d6:	f006 fe5a 	bl	800a68e <HAL_UARTEx_SetRxFifoThreshold>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_LPUART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80039e0:	f000 f88e 	bl	8003b00 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 80039e4:	4804      	ldr	r0, [pc, #16]	; (80039f8 <MX_LPUART1_UART_Init+0x90>)
 80039e6:	f006 fddb 	bl	800a5a0 <HAL_UARTEx_DisableFifoMode>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_LPUART1_UART_Init+0x8c>
		Error_Handler();
 80039f0:	f000 f886 	bl	8003b00 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000538 	.word	0x20000538
 80039fc:	40008000 	.word	0x40008000

08003a00 <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8003a14:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <MX_RTC_Init+0x60>)
 8003a16:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <MX_RTC_Init+0x64>)
 8003a18:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <MX_RTC_Init+0x60>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <MX_RTC_Init+0x60>)
 8003a22:	220f      	movs	r2, #15
 8003a24:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <MX_RTC_Init+0x60>)
 8003a28:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003a2c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <MX_RTC_Init+0x60>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a34:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <MX_RTC_Init+0x60>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <MX_RTC_Init+0x60>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <MX_RTC_Init+0x60>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8003a46:	480a      	ldr	r0, [pc, #40]	; (8003a70 <MX_RTC_Init+0x60>)
 8003a48:	f004 f978 	bl	8007d3c <HAL_RTC_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_RTC_Init+0x46>
		Error_Handler();
 8003a52:	f000 f855 	bl	8003b00 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 8003a56:	2200      	movs	r2, #0
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4805      	ldr	r0, [pc, #20]	; (8003a70 <MX_RTC_Init+0x60>)
 8003a5c:	f004 fa6e 	bl	8007f3c <HAL_RTCEx_SetWakeUpTimer_IT>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8003a66:	f000 f84b 	bl	8003b00 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000774 	.word	0x20000774
 8003a74:	40002800 	.word	0x40002800

08003a78 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003a7c:	2004      	movs	r0, #4
 8003a7e:	f7ff fe11 	bl	80036a4 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003a82:	2001      	movs	r0, #1
 8003a84:	f7ff fe0e 	bl	80036a4 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	200b      	movs	r0, #11
 8003a8e:	f000 feae 	bl	80047ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003a92:	200b      	movs	r0, #11
 8003a94:	f000 fec5 	bl	8004822 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	200c      	movs	r0, #12
 8003a9e:	f000 fea6 	bl	80047ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003aa2:	200c      	movs	r0, #12
 8003aa4:	f000 febd 	bl	8004822 <HAL_NVIC_EnableIRQ>

}
 8003aa8:	bf00      	nop
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003ab2:	2004      	movs	r0, #4
 8003ab4:	f7ff fe0f 	bl	80036d6 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab8:	2001      	movs	r0, #1
 8003aba:	f7ff fe0c 	bl	80036d6 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003abe:	2002      	movs	r0, #2
 8003ac0:	f7ff fe09 	bl	80036d6 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	609a      	str	r2, [r3, #8]
 8003ace:	60da      	str	r2, [r3, #12]
 8003ad0:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4805      	ldr	r0, [pc, #20]	; (8003afc <MX_GPIO_Init+0x50>)
 8003ae8:	f001 fad4 	bl	8005094 <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003aec:	2102      	movs	r1, #2
 8003aee:	4803      	ldr	r0, [pc, #12]	; (8003afc <MX_GPIO_Init+0x50>)
 8003af0:	f001 fc58 	bl	80053a4 <HAL_GPIO_TogglePin>

}
 8003af4:	bf00      	nop
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	48000800 	.word	0x48000800

08003b00 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b52:	bf00      	nop
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <LL_AHB2_GRP1_EnableClock>:
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b80:	68fb      	ldr	r3, [r7, #12]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <LL_AHB3_GRP1_EnableClock>:
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003baa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_APB1_GRP1_EnableClock>:
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003be4:	68fb      	ldr	r3, [r7, #12]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <LL_APB1_GRP2_EnableClock>:
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4013      	ands	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_APB2_GRP1_EnableClock>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4013      	ands	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c48:	68fb      	ldr	r3, [r7, #12]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003c5a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003c5e:	f7ff ff96 	bl	8003b8e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2100      	movs	r1, #0
 8003c66:	2001      	movs	r0, #1
 8003c68:	f000 fdc1 	bl	80047ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f000 fdd8 	bl	8004822 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	2004      	movs	r0, #4
 8003c78:	f000 fdb9 	bl	80047ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003c7c:	2004      	movs	r0, #4
 8003c7e:	f000 fdd0 	bl	8004822 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003c82:	2200      	movs	r2, #0
 8003c84:	2100      	movs	r1, #0
 8003c86:	2005      	movs	r0, #5
 8003c88:	f000 fdb1 	bl	80047ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003c8c:	2005      	movs	r0, #5
 8003c8e:	f000 fdc8 	bl	8004822 <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2100      	movs	r1, #0
 8003c96:	2015      	movs	r0, #21
 8003c98:	f000 fda9 	bl	80047ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8003c9c:	2015      	movs	r0, #21
 8003c9e:	f000 fdc0 	bl	8004822 <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	202b      	movs	r0, #43	; 0x2b
 8003ca8:	f000 fda1 	bl	80047ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8003cac:	202b      	movs	r0, #43	; 0x2b
 8003cae:	f000 fdb8 	bl	8004822 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	202e      	movs	r0, #46	; 0x2e
 8003cb8:	f000 fd99 	bl	80047ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003cbc:	202e      	movs	r0, #46	; 0x2e
 8003cbe:	f000 fdb0 	bl	8004822 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	2036      	movs	r0, #54	; 0x36
 8003cc8:	f000 fd91 	bl	80047ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003ccc:	2036      	movs	r0, #54	; 0x36
 8003cce:	f000 fda8 	bl	8004822 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <HAL_IPCC_MspInit+0x44>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d113      	bne.n	8003d12 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003cea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003cee:	f7ff ff4e 	bl	8003b8e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	202c      	movs	r0, #44	; 0x2c
 8003cf8:	f000 fd79 	bl	80047ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003cfc:	202c      	movs	r0, #44	; 0x2c
 8003cfe:	f000 fd90 	bl	8004822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003d02:	2200      	movs	r2, #0
 8003d04:	2100      	movs	r1, #0
 8003d06:	202d      	movs	r0, #45	; 0x2d
 8003d08:	f000 fd71 	bl	80047ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003d0c:	202d      	movs	r0, #45	; 0x2d
 8003d0e:	f000 fd88 	bl	8004822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	58000c00 	.word	0x58000c00

08003d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b09c      	sub	sp, #112	; 0x70
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d38:	f107 030c 	add.w	r3, r7, #12
 8003d3c:	2250      	movs	r2, #80	; 0x50
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f009 fe4d 	bl	800d9e0 <memset>
  if(huart->Instance==LPUART1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a67      	ldr	r2, [pc, #412]	; (8003ee8 <HAL_UART_MspInit+0x1c8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d156      	bne.n	8003dfe <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003d50:	2302      	movs	r3, #2
 8003d52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003d54:	2300      	movs	r3, #0
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d58:	f107 030c 	add.w	r3, r7, #12
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 fd66 	bl	800782e <HAL_RCCEx_PeriphCLKConfig>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d68:	f7ff feca 	bl	8003b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7ff ff40 	bl	8003bf2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d72:	2001      	movs	r0, #1
 8003d74:	f7ff fef2 	bl	8003b5c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d78:	230c      	movs	r3, #12
 8003d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d84:	2300      	movs	r3, #0
 8003d86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003d88:	2308      	movs	r3, #8
 8003d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d90:	4619      	mov	r1, r3
 8003d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d96:	f001 f97d 	bl	8005094 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8003d9a:	4b54      	ldr	r3, [pc, #336]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003d9c:	4a54      	ldr	r2, [pc, #336]	; (8003ef0 <HAL_UART_MspInit+0x1d0>)
 8003d9e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003da0:	4b52      	ldr	r3, [pc, #328]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003da2:	2211      	movs	r2, #17
 8003da4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003da6:	4b51      	ldr	r3, [pc, #324]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003da8:	2210      	movs	r2, #16
 8003daa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dac:	4b4f      	ldr	r3, [pc, #316]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003db2:	4b4e      	ldr	r3, [pc, #312]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003db8:	4b4c      	ldr	r3, [pc, #304]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dbe:	4b4b      	ldr	r3, [pc, #300]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003dc4:	4b49      	ldr	r3, [pc, #292]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003dca:	4b48      	ldr	r3, [pc, #288]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003dd0:	4846      	ldr	r0, [pc, #280]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003dd2:	f000 fd6f 	bl	80048b4 <HAL_DMA_Init>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003ddc:	f7ff fe90 	bl	8003b00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a42      	ldr	r2, [pc, #264]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003de4:	67da      	str	r2, [r3, #124]	; 0x7c
 8003de6:	4a41      	ldr	r2, [pc, #260]	; (8003eec <HAL_UART_MspInit+0x1cc>)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003dec:	2200      	movs	r2, #0
 8003dee:	2100      	movs	r1, #0
 8003df0:	2025      	movs	r0, #37	; 0x25
 8003df2:	f000 fcfc 	bl	80047ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003df6:	2025      	movs	r0, #37	; 0x25
 8003df8:	f000 fd13 	bl	8004822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003dfc:	e06f      	b.n	8003ede <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a3c      	ldr	r2, [pc, #240]	; (8003ef4 <HAL_UART_MspInit+0x1d4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d16a      	bne.n	8003ede <HAL_UART_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 fd0a 	bl	800782e <HAL_RCCEx_PeriphCLKConfig>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8003e20:	f7ff fe6e 	bl	8003b00 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e28:	f7ff fefc 	bl	8003c24 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	f7ff fe95 	bl	8003b5c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e32:	2002      	movs	r0, #2
 8003e34:	f7ff fe92 	bl	8003b5c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003e38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e46:	2300      	movs	r3, #0
 8003e48:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e4a:	2307      	movs	r3, #7
 8003e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e52:	4619      	mov	r1, r3
 8003e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e58:	f001 f91c 	bl	8005094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e5c:	23c0      	movs	r3, #192	; 0xc0
 8003e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e60:	2302      	movs	r3, #2
 8003e62:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e6c:	2307      	movs	r3, #7
 8003e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e74:	4619      	mov	r1, r3
 8003e76:	4820      	ldr	r0, [pc, #128]	; (8003ef8 <HAL_UART_MspInit+0x1d8>)
 8003e78:	f001 f90c 	bl	8005094 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003e7c:	4b1f      	ldr	r3, [pc, #124]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003e7e:	4a20      	ldr	r2, [pc, #128]	; (8003f00 <HAL_UART_MspInit+0x1e0>)
 8003e80:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003e84:	220f      	movs	r2, #15
 8003e86:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e88:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003e96:	2280      	movs	r2, #128	; 0x80
 8003e98:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e9a:	4b18      	ldr	r3, [pc, #96]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003eb2:	4812      	ldr	r0, [pc, #72]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003eb4:	f000 fcfe 	bl	80048b4 <HAL_DMA_Init>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8003ebe:	f7ff fe1f 	bl	8003b00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a0d      	ldr	r2, [pc, #52]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003ec6:	67da      	str	r2, [r3, #124]	; 0x7c
 8003ec8:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <HAL_UART_MspInit+0x1dc>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	2024      	movs	r0, #36	; 0x24
 8003ed4:	f000 fc8b 	bl	80047ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ed8:	2024      	movs	r0, #36	; 0x24
 8003eda:	f000 fca2 	bl	8004822 <HAL_NVIC_EnableIRQ>
}
 8003ede:	bf00      	nop
 8003ee0:	3770      	adds	r7, #112	; 0x70
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40008000 	.word	0x40008000
 8003eec:	20000660 	.word	0x20000660
 8003ef0:	40020008 	.word	0x40020008
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	48000400 	.word	0x48000400
 8003efc:	200006c0 	.word	0x200006c0
 8003f00:	4002001c 	.word	0x4002001c

08003f04 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b096      	sub	sp, #88	; 0x58
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f0c:	f107 0308 	add.w	r3, r7, #8
 8003f10:	2250      	movs	r2, #80	; 0x50
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f009 fd63 	bl	800d9e0 <memset>
  if(hrtc->Instance==RTC)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <HAL_RTC_MspInit+0x80>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d12b      	bne.n	8003f7c <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003f24:	f002 f8c0 	bl	80060a8 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8003f28:	f002 f8be 	bl	80060a8 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 8003f2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f30:	f7ff fded 	bl	8003b0e <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f38:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f40:	f107 0308 	add.w	r3, r7, #8
 8003f44:	4618      	mov	r0, r3
 8003f46:	f003 fc72 	bl	800782e <HAL_RCCEx_PeriphCLKConfig>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8003f50:	f7ff fdd6 	bl	8003b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f54:	f7ff fdf1 	bl	8003b3a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003f58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003f5c:	f7ff fe30 	bl	8003bc0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003f60:	2200      	movs	r2, #0
 8003f62:	2100      	movs	r1, #0
 8003f64:	2003      	movs	r0, #3
 8003f66:	f000 fc42 	bl	80047ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003f6a:	2003      	movs	r0, #3
 8003f6c:	f000 fc59 	bl	8004822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <HAL_RTC_MspInit+0x80>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a03      	ldr	r2, [pc, #12]	; (8003f84 <HAL_RTC_MspInit+0x80>)
 8003f76:	f023 0307 	bic.w	r3, r3, #7
 8003f7a:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003f7c:	bf00      	nop
 8003f7e:	3758      	adds	r7, #88	; 0x58
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40002800 	.word	0x40002800

08003f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f9a:	e7fe      	b.n	8003f9a <HardFault_Handler+0x4>

08003f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fa0:	e7fe      	b.n	8003fa0 <MemManage_Handler+0x4>

08003fa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fa6:	e7fe      	b.n	8003fa6 <BusFault_Handler+0x4>

08003fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fac:	e7fe      	b.n	8003fac <UsageFault_Handler+0x4>

08003fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fdc:	f000 fa84 	bl	80044e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003fe8:	f002 f8c4 	bl	8006174 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003ff4:	f7fe fede 	bl	8002db4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8004000:	f000 ff8a 	bl	8004f18 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8004004:	bf00      	nop
 8004006:	bd80      	pop	{r7, pc}

08004008 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800401c:	4802      	ldr	r0, [pc, #8]	; (8004028 <DMA1_Channel1_IRQHandler+0x10>)
 800401e:	f000 fe2a 	bl	8004c76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000660 	.word	0x20000660

0800402c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004030:	4802      	ldr	r0, [pc, #8]	; (800403c <DMA1_Channel2_IRQHandler+0x10>)
 8004032:	f000 fe20 	bl	8004c76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	200006c0 	.word	0x200006c0

08004040 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004054:	4802      	ldr	r0, [pc, #8]	; (8004060 <USART1_IRQHandler+0x10>)
 8004056:	f004 f9fd 	bl	8008454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200005cc 	.word	0x200005cc

08004064 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004068:	4802      	ldr	r0, [pc, #8]	; (8004074 <LPUART1_IRQHandler+0x10>)
 800406a:	f004 f9f3 	bl	8008454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000538 	.word	0x20000538

08004078 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 800407c:	bf00      	nop
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800408a:	f7fd fd75 	bl	8001b78 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}

08004092 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8004096:	f7fd fdc9 	bl	8001c2c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}

0800409e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80040a2:	f001 f9b1 	bl	8005408 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}

080040aa <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 80040bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80040c0:	f001 f98a 	bl	80053d8 <HAL_GPIO_EXTI_IRQHandler>
}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 80040c8:	b5b0      	push	{r4, r5, r7, lr}
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
 80040d4:	4613      	mov	r3, r2
 80040d6:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 80040d8:	787b      	ldrb	r3, [r7, #1]
 80040da:	3b01      	subs	r3, #1
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d83e      	bhi.n	800415e <logRegion+0x96>
 80040e0:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <logRegion+0x20>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	080040fd 	.word	0x080040fd
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004125 	.word	0x08004125
 80040f4:	08004137 	.word	0x08004137
 80040f8:	0800414b 	.word	0x0800414b
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 80040fc:	f107 0308 	add.w	r3, r7, #8
 8004100:	4a22      	ldr	r2, [pc, #136]	; (800418c <logRegion+0xc4>)
 8004102:	461c      	mov	r4, r3
 8004104:	4615      	mov	r5, r2
 8004106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800410a:	682b      	ldr	r3, [r5, #0]
 800410c:	7023      	strb	r3, [r4, #0]
      break;
 800410e:	e02f      	b.n	8004170 <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 8004110:	f107 0308 	add.w	r3, r7, #8
 8004114:	4a1e      	ldr	r2, [pc, #120]	; (8004190 <logRegion+0xc8>)
 8004116:	461c      	mov	r4, r3
 8004118:	4615      	mov	r5, r2
 800411a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800411c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800411e:	682b      	ldr	r3, [r5, #0]
 8004120:	6023      	str	r3, [r4, #0]
      break;
 8004122:	e025      	b.n	8004170 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 8004124:	f107 0308 	add.w	r3, r7, #8
 8004128:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <logRegion+0xcc>)
 800412a:	461c      	mov	r4, r3
 800412c:	4613      	mov	r3, r2
 800412e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004130:	c407      	stmia	r4!, {r0, r1, r2}
 8004132:	8023      	strh	r3, [r4, #0]
      break;
 8004134:	e01c      	b.n	8004170 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 8004136:	f107 0308 	add.w	r3, r7, #8
 800413a:	4a17      	ldr	r2, [pc, #92]	; (8004198 <logRegion+0xd0>)
 800413c:	461c      	mov	r4, r3
 800413e:	4615      	mov	r5, r2
 8004140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	8023      	strh	r3, [r4, #0]
      break;
 8004148:	e012      	b.n	8004170 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	4a13      	ldr	r2, [pc, #76]	; (800419c <logRegion+0xd4>)
 8004150:	461c      	mov	r4, r3
 8004152:	4615      	mov	r5, r2
 8004154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	7023      	strb	r3, [r4, #0]
      break;
 800415c:	e008      	b.n	8004170 <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 800415e:	f107 0308 	add.w	r3, r7, #8
 8004162:	4a0f      	ldr	r2, [pc, #60]	; (80041a0 <logRegion+0xd8>)
 8004164:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004168:	6018      	str	r0, [r3, #0]
 800416a:	3304      	adds	r3, #4
 800416c:	7019      	strb	r1, [r3, #0]
      break;
 800416e:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 8004170:	8879      	ldrh	r1, [r7, #2]
 8004172:	f107 0308 	add.w	r3, r7, #8
 8004176:	4a0b      	ldr	r2, [pc, #44]	; (80041a4 <logRegion+0xdc>)
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f009 fd57 	bl	800dc2c <sniprintf>
 800417e:	4603      	mov	r3, r0
 8004180:	b29b      	uxth	r3, r3
}
 8004182:	4618      	mov	r0, r3
 8004184:	3728      	adds	r7, #40	; 0x28
 8004186:	46bd      	mov	sp, r7
 8004188:	bdb0      	pop	{r4, r5, r7, pc}
 800418a:	bf00      	nop
 800418c:	0800f704 	.word	0x0800f704
 8004190:	0800f718 	.word	0x0800f718
 8004194:	0800f72c 	.word	0x0800f72c
 8004198:	0800f73c 	.word	0x0800f73c
 800419c:	0800f750 	.word	0x0800f750
 80041a0:	0800f764 	.word	0x0800f764
 80041a4:	0800f76c 	.word	0x0800f76c

080041a8 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d00a      	beq.n	80041ce <levelToString+0x26>
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	dc0a      	bgt.n	80041d2 <levelToString+0x2a>
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d002      	beq.n	80041c6 <levelToString+0x1e>
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d002      	beq.n	80041ca <levelToString+0x22>
 80041c4:	e005      	b.n	80041d2 <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <levelToString+0x38>)
 80041c8:	e004      	b.n	80041d4 <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <levelToString+0x3c>)
 80041cc:	e002      	b.n	80041d4 <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <levelToString+0x40>)
 80041d0:	e000      	b.n	80041d4 <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <levelToString+0x44>)
  }
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	0800f770 	.word	0x0800f770
 80041e4:	0800f778 	.word	0x0800f778
 80041e8:	0800f780 	.word	0x0800f780
 80041ec:	0800f788 	.word	0x0800f788

080041f0 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	807b      	strh	r3, [r7, #2]
 80041fc:	4613      	mov	r3, r2
 80041fe:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8004200:	887c      	ldrh	r4, [r7, #2]
 8004202:	787b      	ldrb	r3, [r7, #1]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff ffcf 	bl	80041a8 <levelToString>
 800420a:	4603      	mov	r3, r0
 800420c:	4a05      	ldr	r2, [pc, #20]	; (8004224 <logLevel+0x34>)
 800420e:	4621      	mov	r1, r4
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f009 fd0b 	bl	800dc2c <sniprintf>
 8004216:	4603      	mov	r3, r0
 8004218:	b29b      	uxth	r3, r3
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	bd90      	pop	{r4, r7, pc}
 8004222:	bf00      	nop
 8004224:	0800f790 	.word	0x0800f790

08004228 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8004228:	b40c      	push	{r2, r3}
 800422a:	b580      	push	{r7, lr}
 800422c:	b0c4      	sub	sp, #272	; 0x110
 800422e:	af00      	add	r7, sp, #0
 8004230:	4602      	mov	r2, r0
 8004232:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004236:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004240:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8004244:	460a      	mov	r2, r1
 8004246:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800424e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8004252:	f107 020c 	add.w	r2, r7, #12
 8004256:	18d0      	adds	r0, r2, r3
 8004258:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800425c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004260:	b299      	uxth	r1, r3
 8004262:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004266:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	f7ff ffbf 	bl	80041f0 <logLevel>
 8004272:	4603      	mov	r3, r0
 8004274:	461a      	mov	r2, r3
 8004276:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800427a:	4413      	add	r3, r2
 800427c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8004280:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8004284:	f107 020c 	add.w	r2, r7, #12
 8004288:	18d0      	adds	r0, r2, r3
 800428a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800428e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004292:	b299      	uxth	r1, r3
 8004294:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004298:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	f7ff ff12 	bl	80040c8 <logRegion>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80042ac:	4413      	add	r3, r2
 80042ae:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 80042b2:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80042b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042be:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80042c0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80042c4:	f107 020c 	add.w	r2, r7, #12
 80042c8:	18d0      	adds	r0, r2, r3
 80042ca:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80042ce:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80042d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80042e0:	f009 fd04 	bl	800dcec <vsniprintf>
 80042e4:	4603      	mov	r3, r0
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80042ec:	4413      	add	r3, r2
 80042ee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 80042f2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 80042fc:	461a      	mov	r2, r3
 80042fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004306:	210d      	movs	r1, #13
 8004308:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 800430a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8004314:	461a      	mov	r2, r3
 8004316:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800431a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800431e:	210a      	movs	r1, #10
 8004320:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 8004322:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800432c:	461a      	mov	r2, r3
 800432e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004336:	2100      	movs	r1, #0
 8004338:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 800433a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800433e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d805      	bhi.n	8004354 <logApplication+0x12c>
  {
    printf("%s", logString);
 8004348:	f107 030c 	add.w	r3, r7, #12
 800434c:	4619      	mov	r1, r3
 800434e:	4805      	ldr	r0, [pc, #20]	; (8004364 <logApplication+0x13c>)
 8004350:	f009 fc44 	bl	800dbdc <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8004354:	bf00      	nop
 8004356:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800435a:	46bd      	mov	sp, r7
 800435c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004360:	b002      	add	sp, #8
 8004362:	4770      	bx	lr
 8004364:	0800f790 	.word	0x0800f790

08004368 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800436c:	4b26      	ldr	r3, [pc, #152]	; (8004408 <SystemInit+0xa0>)
 800436e:	2200      	movs	r2, #0
 8004370:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004372:	4b25      	ldr	r3, [pc, #148]	; (8004408 <SystemInit+0xa0>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	4a23      	ldr	r2, [pc, #140]	; (8004408 <SystemInit+0xa0>)
 800437a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800437e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004396:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800439a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <SystemInit+0xa4>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b8:	f023 0305 	bic.w	r3, r3, #5
 80043bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80043c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d8:	4a0d      	ldr	r2, [pc, #52]	; (8004410 <SystemInit+0xa8>)
 80043da:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80043dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e0:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <SystemInit+0xa8>)
 80043e2:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	2200      	movs	r2, #0
 80043fa:	619a      	str	r2, [r3, #24]
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000ed00 	.word	0xe000ed00
 800440c:	faf6fefb 	.word	0xfaf6fefb
 8004410:	22041000 	.word	0x22041000

08004414 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	4a04      	ldr	r2, [pc, #16]	; (8004430 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6053      	str	r3, [r2, #4]
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	e0042000 	.word	0xe0042000

08004434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <HAL_Init+0x3c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <HAL_Init+0x3c>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800444a:	2003      	movs	r0, #3
 800444c:	f000 f9c4 	bl	80047d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004450:	2000      	movs	r0, #0
 8004452:	f000 f80f 	bl	8004474 <HAL_InitTick>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	71fb      	strb	r3, [r7, #7]
 8004460:	e001      	b.n	8004466 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004462:	f7ff fbf8 	bl	8003c56 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004466:	79fb      	ldrb	r3, [r7, #7]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	58004000 	.word	0x58004000

08004474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004480:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <HAL_InitTick+0x6c>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d024      	beq.n	80044d2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004488:	f002 ff40 	bl	800730c <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <HAL_InitTick+0x6c>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	4619      	mov	r1, r3
 8004494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004498:	fbb3 f3f1 	udiv	r3, r3, r1
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f9de 	bl	8004862 <HAL_SYSTICK_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10f      	bne.n	80044cc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b0f      	cmp	r3, #15
 80044b0:	d809      	bhi.n	80044c6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044b2:	2200      	movs	r2, #0
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ba:	f000 f998 	bl	80047ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044be:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <HAL_InitTick+0x70>)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	e007      	b.n	80044d6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
 80044ca:	e004      	b.n	80044d6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e001      	b.n	80044d6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000024 	.word	0x20000024
 80044e4:	20000020 	.word	0x20000020

080044e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_IncTick+0x20>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <HAL_IncTick+0x24>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4413      	add	r3, r2
 80044f8:	4a04      	ldr	r2, [pc, #16]	; (800450c <HAL_IncTick+0x24>)
 80044fa:	6013      	str	r3, [r2, #0]
}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000024 	.word	0x20000024
 800450c:	200007a4 	.word	0x200007a4

08004510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return uwTick;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <HAL_GetTick+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	200007a4 	.word	0x200007a4

08004528 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800452c:	4b03      	ldr	r3, [pc, #12]	; (800453c <HAL_GetTickPrio+0x14>)
 800452e:	681b      	ldr	r3, [r3, #0]
}
 8004530:	4618      	mov	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000020 	.word	0x20000020

08004540 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8004544:	f7ff ff66 	bl	8004414 <LL_DBGMCU_EnableDBGSleepMode>
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}

0800454c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <__NVIC_SetPriorityGrouping+0x44>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004568:	4013      	ands	r3, r2
 800456a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800457e:	4a04      	ldr	r2, [pc, #16]	; (8004590 <__NVIC_SetPriorityGrouping+0x44>)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	60d3      	str	r3, [r2, #12]
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <__NVIC_GetPriorityGrouping+0x18>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	0a1b      	lsrs	r3, r3, #8
 800459e:	f003 0307 	and.w	r3, r3, #7
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	e000ed00 	.word	0xe000ed00

080045b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	db0b      	blt.n	80045da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	f003 021f 	and.w	r2, r3, #31
 80045c8:	4907      	ldr	r1, [pc, #28]	; (80045e8 <__NVIC_EnableIRQ+0x38>)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2001      	movs	r0, #1
 80045d2:	fa00 f202 	lsl.w	r2, r0, r2
 80045d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	e000e100 	.word	0xe000e100

080045ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	db12      	blt.n	8004624 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	f003 021f 	and.w	r2, r3, #31
 8004604:	490a      	ldr	r1, [pc, #40]	; (8004630 <__NVIC_DisableIRQ+0x44>)
 8004606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	2001      	movs	r0, #1
 800460e:	fa00 f202 	lsl.w	r2, r0, r2
 8004612:	3320      	adds	r3, #32
 8004614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004618:	f3bf 8f4f 	dsb	sy
}
 800461c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800461e:	f3bf 8f6f 	isb	sy
}
 8004622:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000e100 	.word	0xe000e100

08004634 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	2b00      	cmp	r3, #0
 8004644:	db0c      	blt.n	8004660 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	f003 021f 	and.w	r2, r3, #31
 800464c:	4907      	ldr	r1, [pc, #28]	; (800466c <__NVIC_SetPendingIRQ+0x38>)
 800464e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2001      	movs	r0, #1
 8004656:	fa00 f202 	lsl.w	r2, r0, r2
 800465a:	3340      	adds	r3, #64	; 0x40
 800465c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000e100 	.word	0xe000e100

08004670 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	2b00      	cmp	r3, #0
 8004680:	db0c      	blt.n	800469c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	f003 021f 	and.w	r2, r3, #31
 8004688:	4907      	ldr	r1, [pc, #28]	; (80046a8 <__NVIC_ClearPendingIRQ+0x38>)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	2001      	movs	r0, #1
 8004692:	fa00 f202 	lsl.w	r2, r0, r2
 8004696:	3360      	adds	r3, #96	; 0x60
 8004698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	e000e100 	.word	0xe000e100

080046ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	6039      	str	r1, [r7, #0]
 80046b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	db0a      	blt.n	80046d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	490c      	ldr	r1, [pc, #48]	; (80046f8 <__NVIC_SetPriority+0x4c>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	0112      	lsls	r2, r2, #4
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	440b      	add	r3, r1
 80046d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d4:	e00a      	b.n	80046ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	4908      	ldr	r1, [pc, #32]	; (80046fc <__NVIC_SetPriority+0x50>)
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	3b04      	subs	r3, #4
 80046e4:	0112      	lsls	r2, r2, #4
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	440b      	add	r3, r1
 80046ea:	761a      	strb	r2, [r3, #24]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000e100 	.word	0xe000e100
 80046fc:	e000ed00 	.word	0xe000ed00

08004700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	; 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f1c3 0307 	rsb	r3, r3, #7
 800471a:	2b04      	cmp	r3, #4
 800471c:	bf28      	it	cs
 800471e:	2304      	movcs	r3, #4
 8004720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3304      	adds	r3, #4
 8004726:	2b06      	cmp	r3, #6
 8004728:	d902      	bls.n	8004730 <NVIC_EncodePriority+0x30>
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3b03      	subs	r3, #3
 800472e:	e000      	b.n	8004732 <NVIC_EncodePriority+0x32>
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004734:	f04f 32ff 	mov.w	r2, #4294967295
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43da      	mvns	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	401a      	ands	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004748:	f04f 31ff 	mov.w	r1, #4294967295
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	43d9      	mvns	r1, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004758:	4313      	orrs	r3, r2
         );
}
 800475a:	4618      	mov	r0, r3
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800476c:	f3bf 8f4f 	dsb	sy
}
 8004770:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <__NVIC_SystemReset+0x24>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800477a:	4904      	ldr	r1, [pc, #16]	; (800478c <__NVIC_SystemReset+0x24>)
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <__NVIC_SystemReset+0x28>)
 800477e:	4313      	orrs	r3, r2
 8004780:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004782:	f3bf 8f4f 	dsb	sy
}
 8004786:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004788:	bf00      	nop
 800478a:	e7fd      	b.n	8004788 <__NVIC_SystemReset+0x20>
 800478c:	e000ed00 	.word	0xe000ed00
 8004790:	05fa0004 	.word	0x05fa0004

08004794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3b01      	subs	r3, #1
 80047a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047a4:	d301      	bcc.n	80047aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047a6:	2301      	movs	r3, #1
 80047a8:	e00f      	b.n	80047ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047aa:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <SysTick_Config+0x40>)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047b2:	210f      	movs	r1, #15
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	f7ff ff78 	bl	80046ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <SysTick_Config+0x40>)
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047c2:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <SysTick_Config+0x40>)
 80047c4:	2207      	movs	r2, #7
 80047c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	e000e010 	.word	0xe000e010

080047d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff feb3 	bl	800454c <__NVIC_SetPriorityGrouping>
}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b086      	sub	sp, #24
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	4603      	mov	r3, r0
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047fc:	f7ff feca 	bl	8004594 <__NVIC_GetPriorityGrouping>
 8004800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	6978      	ldr	r0, [r7, #20]
 8004808:	f7ff ff7a 	bl	8004700 <NVIC_EncodePriority>
 800480c:	4602      	mov	r2, r0
 800480e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004812:	4611      	mov	r1, r2
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff ff49 	bl	80046ac <__NVIC_SetPriority>
}
 800481a:	bf00      	nop
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	4603      	mov	r3, r0
 800482a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800482c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff febd 	bl	80045b0 <__NVIC_EnableIRQ>
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	4603      	mov	r3, r0
 8004846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff fecd 	bl	80045ec <__NVIC_DisableIRQ>
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800485e:	f7ff ff83 	bl	8004768 <__NVIC_SystemReset>

08004862 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff ff92 	bl	8004794 <SysTick_Config>
 8004870:	4603      	mov	r3, r0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	4603      	mov	r3, r0
 8004882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fed3 	bl	8004634 <__NVIC_SetPendingIRQ>
}
 800488e:	bf00      	nop
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	4603      	mov	r3, r0
 800489e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80048a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff fee3 	bl	8004670 <__NVIC_ClearPendingIRQ>
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e08e      	b.n	80049e4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	4b47      	ldr	r3, [pc, #284]	; (80049ec <HAL_DMA_Init+0x138>)
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d80f      	bhi.n	80048f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	4b45      	ldr	r3, [pc, #276]	; (80049f0 <HAL_DMA_Init+0x13c>)
 80048da:	4413      	add	r3, r2
 80048dc:	4a45      	ldr	r2, [pc, #276]	; (80049f4 <HAL_DMA_Init+0x140>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	009a      	lsls	r2, r3, #2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a42      	ldr	r2, [pc, #264]	; (80049f8 <HAL_DMA_Init+0x144>)
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
 80048f0:	e00e      	b.n	8004910 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	4b40      	ldr	r3, [pc, #256]	; (80049fc <HAL_DMA_Init+0x148>)
 80048fa:	4413      	add	r3, r2
 80048fc:	4a3d      	ldr	r2, [pc, #244]	; (80049f4 <HAL_DMA_Init+0x140>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	009a      	lsls	r2, r3, #2
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a3c      	ldr	r2, [pc, #240]	; (8004a00 <HAL_DMA_Init+0x14c>)
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800494c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa74 	bl	8004e50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004970:	d102      	bne.n	8004978 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004980:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004984:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800498e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d010      	beq.n	80049ba <HAL_DMA_Init+0x106>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b04      	cmp	r3, #4
 800499e:	d80c      	bhi.n	80049ba <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fa93 	bl	8004ecc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	e008      	b.n	80049cc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40020407 	.word	0x40020407
 80049f0:	bffdfff8 	.word	0xbffdfff8
 80049f4:	cccccccd 	.word	0xcccccccd
 80049f8:	40020000 	.word	0x40020000
 80049fc:	bffdfbf8 	.word	0xbffdfbf8
 8004a00:	40020400 	.word	0x40020400

08004a04 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_DMA_Start_IT+0x20>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e066      	b.n	8004af2 <HAL_DMA_Start_IT+0xee>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d155      	bne.n	8004ae4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f9b9 	bl	8004dd4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d008      	beq.n	8004a7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 020e 	orr.w	r2, r2, #14
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e00f      	b.n	8004a9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0204 	bic.w	r2, r2, #4
 8004a8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 020a 	orr.w	r2, r2, #10
 8004a9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e005      	b.n	8004af0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
 8004aee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e04f      	b.n	8004bac <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d008      	beq.n	8004b2a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e040      	b.n	8004bac <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 020e 	bic.w	r2, r2, #14
 8004b38:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	f003 021c 	and.w	r2, r3, #28
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	2101      	movs	r1, #1
 8004b68:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b76:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00c      	beq.n	8004b9a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b98:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d005      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
 8004bda:	e047      	b.n	8004c6c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 020e 	bic.w	r2, r2, #14
 8004bea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f003 021c 	and.w	r2, r3, #28
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c1e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	4798      	blx	r3
    }
  }
  return status;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	f003 031c 	and.w	r3, r3, #28
 8004c96:	2204      	movs	r2, #4
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d026      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x7a>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d021      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d107      	bne.n	8004cca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0204 	bic.w	r2, r2, #4
 8004cc8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f003 021c 	and.w	r2, r3, #28
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	2104      	movs	r1, #4
 8004cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cdc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d071      	beq.n	8004dca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004cee:	e06c      	b.n	8004dca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf4:	f003 031c 	and.w	r3, r3, #28
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d02e      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xec>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d029      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10b      	bne.n	8004d34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 020a 	bic.w	r2, r2, #10
 8004d2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d38:	f003 021c 	and.w	r2, r3, #28
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	2102      	movs	r1, #2
 8004d42:	fa01 f202 	lsl.w	r2, r1, r2
 8004d46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d038      	beq.n	8004dca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004d60:	e033      	b.n	8004dca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	f003 031c 	and.w	r3, r3, #28
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d02a      	beq.n	8004dcc <HAL_DMA_IRQHandler+0x156>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d025      	beq.n	8004dcc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 020e 	bic.w	r2, r2, #14
 8004d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	f003 021c 	and.w	r2, r3, #28
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004da2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d004      	beq.n	8004dcc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004dca:	bf00      	nop
 8004dcc:	bf00      	nop
}
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004dea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d004      	beq.n	8004dfe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004dfc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	f003 021c 	and.w	r2, r3, #28
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d108      	bne.n	8004e34 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e32:	e007      	b.n	8004e44 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	60da      	str	r2, [r3, #12]
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d80a      	bhi.n	8004e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e68:	089b      	lsrs	r3, r3, #2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e70:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6493      	str	r3, [r2, #72]	; 0x48
 8004e78:	e007      	b.n	8004e8a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	089b      	lsrs	r3, r3, #2
 8004e80:	009a      	lsls	r2, r3, #2
 8004e82:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e84:	4413      	add	r3, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	3b08      	subs	r3, #8
 8004e92:	4a0c      	ldr	r2, [pc, #48]	; (8004ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e94:	fba2 2303 	umull	r2, r3, r2, r3
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004ea0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004eb0:	bf00      	nop
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	40020407 	.word	0x40020407
 8004ec0:	4002081c 	.word	0x4002081c
 8004ec4:	cccccccd 	.word	0xcccccccd
 8004ec8:	40020880 	.word	0x40020880

08004ecc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004edc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004ef0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2201      	movs	r2, #1
 8004efc:	409a      	lsls	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	1000823f 	.word	0x1000823f
 8004f14:	40020940 	.word	0x40020940

08004f18 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 8004f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f22:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004f24:	4b41      	ldr	r3, [pc, #260]	; (800502c <HAL_FLASH_IRQHandler+0x114>)
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8004f30:	4b3e      	ldr	r3, [pc, #248]	; (800502c <HAL_FLASH_IRQHandler+0x114>)
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	4b3e      	ldr	r3, [pc, #248]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	493c      	ldr	r1, [pc, #240]	; (800502c <HAL_FLASH_IRQHandler+0x114>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 8004f40:	4b3b      	ldr	r3, [pc, #236]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <HAL_FLASH_IRQHandler+0x11c>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 8004f4c:	4b38      	ldr	r3, [pc, #224]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	e008      	b.n	8004f66 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 8004f54:	4b36      	ldr	r3, [pc, #216]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 8004f60:	4b33      	ldr	r3, [pc, #204]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d022      	beq.n	8004fb2 <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004f6c:	4b30      	ldr	r3, [pc, #192]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	4a2e      	ldr	r2, [pc, #184]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004f76:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <HAL_FLASH_IRQHandler+0x7a>
 8004f82:	4b2a      	ldr	r3, [pc, #168]	; (800502c <HAL_FLASH_IRQHandler+0x114>)
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004f8c:	4927      	ldr	r1, [pc, #156]	; (800502c <HAL_FLASH_IRQHandler+0x114>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	618b      	str	r3, [r1, #24]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <HAL_FLASH_IRQHandler+0x8e>
 8004f9c:	4a23      	ldr	r2, [pc, #140]	; (800502c <HAL_FLASH_IRQHandler+0x114>)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004fa4:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004fa6:	4b22      	ldr	r3, [pc, #136]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f84d 	bl	800504c <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004fb2:	4b1e      	ldr	r3, [pc, #120]	; (800502c <HAL_FLASH_IRQHandler+0x114>)
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d124      	bne.n	8005008 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004fbe:	4b1b      	ldr	r3, [pc, #108]	; (800502c <HAL_FLASH_IRQHandler+0x114>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d117      	bne.n	8004ffc <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004fcc:	4b18      	ldr	r3, [pc, #96]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	4a17      	ldr	r2, [pc, #92]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004fd4:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 8004fd6:	4b16      	ldr	r3, [pc, #88]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 8004fde:	4b14      	ldr	r3, [pc, #80]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	4a12      	ldr	r2, [pc, #72]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004fe6:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 f837 	bl	8005060 <FLASH_PageErase>
 8004ff2:	e006      	b.n	8005002 <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
 8004ffa:	e002      	b.n	8005002 <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f818 	bl	8005038 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8005008:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d108      	bne.n	8005022 <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005010:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_FLASH_IRQHandler+0x114>)
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	4a05      	ldr	r2, [pc, #20]	; (800502c <HAL_FLASH_IRQHandler+0x114>)
 8005016:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800501a:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <HAL_FLASH_IRQHandler+0x118>)
 800501e:	2200      	movs	r2, #0
 8005020:	701a      	strb	r2, [r3, #0]
  }
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	58004000 	.word	0x58004000
 8005030:	200007a8 	.word	0x200007a8
 8005034:	00040001 	.word	0x00040001

08005038 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <FLASH_PageErase+0x30>)
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4313      	orrs	r3, r2
 8005076:	4a06      	ldr	r2, [pc, #24]	; (8005090 <FLASH_PageErase+0x30>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	f043 0302 	orr.w	r3, r3, #2
 8005080:	6153      	str	r3, [r2, #20]
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	58004000 	.word	0x58004000

08005094 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050a2:	e14c      	b.n	800533e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	2101      	movs	r1, #1
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	fa01 f303 	lsl.w	r3, r1, r3
 80050b0:	4013      	ands	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 813e 	beq.w	8005338 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d005      	beq.n	80050d4 <HAL_GPIO_Init+0x40>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d130      	bne.n	8005136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	2203      	movs	r2, #3
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4013      	ands	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800510a:	2201      	movs	r2, #1
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4013      	ands	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	091b      	lsrs	r3, r3, #4
 8005120:	f003 0201 	and.w	r2, r3, #1
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b03      	cmp	r3, #3
 8005140:	d017      	beq.n	8005172 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	2203      	movs	r2, #3
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4013      	ands	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d123      	bne.n	80051c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	08da      	lsrs	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3208      	adds	r2, #8
 8005186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	220f      	movs	r2, #15
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4013      	ands	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	08da      	lsrs	r2, r3, #3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3208      	adds	r2, #8
 80051c0:	6939      	ldr	r1, [r7, #16]
 80051c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	2203      	movs	r2, #3
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43db      	mvns	r3, r3
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4013      	ands	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f003 0203 	and.w	r2, r3, #3
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8098 	beq.w	8005338 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005208:	4a54      	ldr	r2, [pc, #336]	; (800535c <HAL_GPIO_Init+0x2c8>)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	089b      	lsrs	r3, r3, #2
 800520e:	3302      	adds	r3, #2
 8005210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	220f      	movs	r2, #15
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	43db      	mvns	r3, r3
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4013      	ands	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005232:	d019      	beq.n	8005268 <HAL_GPIO_Init+0x1d4>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a4a      	ldr	r2, [pc, #296]	; (8005360 <HAL_GPIO_Init+0x2cc>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d013      	beq.n	8005264 <HAL_GPIO_Init+0x1d0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a49      	ldr	r2, [pc, #292]	; (8005364 <HAL_GPIO_Init+0x2d0>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00d      	beq.n	8005260 <HAL_GPIO_Init+0x1cc>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a48      	ldr	r2, [pc, #288]	; (8005368 <HAL_GPIO_Init+0x2d4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d007      	beq.n	800525c <HAL_GPIO_Init+0x1c8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a47      	ldr	r2, [pc, #284]	; (800536c <HAL_GPIO_Init+0x2d8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d101      	bne.n	8005258 <HAL_GPIO_Init+0x1c4>
 8005254:	2304      	movs	r3, #4
 8005256:	e008      	b.n	800526a <HAL_GPIO_Init+0x1d6>
 8005258:	2307      	movs	r3, #7
 800525a:	e006      	b.n	800526a <HAL_GPIO_Init+0x1d6>
 800525c:	2303      	movs	r3, #3
 800525e:	e004      	b.n	800526a <HAL_GPIO_Init+0x1d6>
 8005260:	2302      	movs	r3, #2
 8005262:	e002      	b.n	800526a <HAL_GPIO_Init+0x1d6>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_GPIO_Init+0x1d6>
 8005268:	2300      	movs	r3, #0
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	f002 0203 	and.w	r2, r2, #3
 8005270:	0092      	lsls	r2, r2, #2
 8005272:	4093      	lsls	r3, r2
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800527a:	4938      	ldr	r1, [pc, #224]	; (800535c <HAL_GPIO_Init+0x2c8>)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	089b      	lsrs	r3, r3, #2
 8005280:	3302      	adds	r3, #2
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005288:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_GPIO_Init+0x2dc>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	43db      	mvns	r3, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4013      	ands	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052ac:	4a30      	ldr	r2, [pc, #192]	; (8005370 <HAL_GPIO_Init+0x2dc>)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80052b2:	4b2f      	ldr	r3, [pc, #188]	; (8005370 <HAL_GPIO_Init+0x2dc>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4013      	ands	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052d6:	4a26      	ldr	r2, [pc, #152]	; (8005370 <HAL_GPIO_Init+0x2dc>)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052dc:	4b24      	ldr	r3, [pc, #144]	; (8005370 <HAL_GPIO_Init+0x2dc>)
 80052de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	43db      	mvns	r3, r3
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4013      	ands	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005302:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <HAL_GPIO_Init+0x2dc>)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800530a:	4b19      	ldr	r3, [pc, #100]	; (8005370 <HAL_GPIO_Init+0x2dc>)
 800530c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	43db      	mvns	r3, r3
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4013      	ands	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005330:	4a0f      	ldr	r2, [pc, #60]	; (8005370 <HAL_GPIO_Init+0x2dc>)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	3301      	adds	r3, #1
 800533c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	f47f aeab 	bne.w	80050a4 <HAL_GPIO_Init+0x10>
  }
}
 800534e:	bf00      	nop
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40010000 	.word	0x40010000
 8005360:	48000400 	.word	0x48000400
 8005364:	48000800 	.word	0x48000800
 8005368:	48000c00 	.word	0x48000c00
 800536c:	48001000 	.word	0x48001000
 8005370:	58000800 	.word	0x58000800

08005374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	807b      	strh	r3, [r7, #2]
 8005380:	4613      	mov	r3, r2
 8005382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005384:	787b      	ldrb	r3, [r7, #1]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800538a:	887a      	ldrh	r2, [r7, #2]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005390:	e002      	b.n	8005398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005392:	887a      	ldrh	r2, [r7, #2]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053b6:	887a      	ldrh	r2, [r7, #2]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4013      	ands	r3, r2
 80053bc:	041a      	lsls	r2, r3, #16
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	43d9      	mvns	r1, r3
 80053c2:	887b      	ldrh	r3, [r7, #2]
 80053c4:	400b      	ands	r3, r1
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	619a      	str	r2, [r3, #24]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d006      	beq.n	80053fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053ee:	4a05      	ldr	r2, [pc, #20]	; (8005404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fd f970 	bl	80026dc <HAL_GPIO_EXTI_Callback>
  }
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	58000800 	.word	0x58000800

08005408 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800540e:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <HAL_HSEM_IRQHandler+0x30>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005414:	4b08      	ldr	r3, [pc, #32]	; (8005438 <HAL_HSEM_IRQHandler+0x30>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	43db      	mvns	r3, r3
 800541c:	4906      	ldr	r1, [pc, #24]	; (8005438 <HAL_HSEM_IRQHandler+0x30>)
 800541e:	4013      	ands	r3, r2
 8005420:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005422:	4a05      	ldr	r2, [pc, #20]	; (8005438 <HAL_HSEM_IRQHandler+0x30>)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f807 	bl	800543c <HAL_HSEM_FreeCallback>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	58001500 	.word	0x58001500

0800543c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e081      	b.n	8005566 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f879 	bl	800556e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2224      	movs	r2, #36	; 0x24
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0201 	bic.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d107      	bne.n	80054ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054c6:	609a      	str	r2, [r3, #8]
 80054c8:	e006      	b.n	80054d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80054d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d104      	bne.n	80054ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800550c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1a      	ldr	r2, [r3, #32]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af02      	add	r7, sp, #8
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	607a      	str	r2, [r7, #4]
 800558e:	461a      	mov	r2, r3
 8005590:	460b      	mov	r3, r1
 8005592:	817b      	strh	r3, [r7, #10]
 8005594:	4613      	mov	r3, r2
 8005596:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	f040 80da 	bne.w	800575a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_I2C_Master_Transmit+0x30>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e0d3      	b.n	800575c <HAL_I2C_Master_Transmit+0x1d8>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055bc:	f7fe ffa8 	bl	8004510 <HAL_GetTick>
 80055c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	2319      	movs	r3, #25
 80055c8:	2201      	movs	r2, #1
 80055ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f9e6 	bl	80059a0 <I2C_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e0be      	b.n	800575c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2221      	movs	r2, #33	; 0x21
 80055e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2210      	movs	r2, #16
 80055ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	893a      	ldrh	r2, [r7, #8]
 80055fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	2bff      	cmp	r3, #255	; 0xff
 800560e:	d90e      	bls.n	800562e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	22ff      	movs	r2, #255	; 0xff
 8005614:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561a:	b2da      	uxtb	r2, r3
 800561c:	8979      	ldrh	r1, [r7, #10]
 800561e:	4b51      	ldr	r3, [pc, #324]	; (8005764 <HAL_I2C_Master_Transmit+0x1e0>)
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fbdc 	bl	8005de4 <I2C_TransferConfig>
 800562c:	e06c      	b.n	8005708 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563c:	b2da      	uxtb	r2, r3
 800563e:	8979      	ldrh	r1, [r7, #10]
 8005640:	4b48      	ldr	r3, [pc, #288]	; (8005764 <HAL_I2C_Master_Transmit+0x1e0>)
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fbcb 	bl	8005de4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800564e:	e05b      	b.n	8005708 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	6a39      	ldr	r1, [r7, #32]
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f9e3 	bl	8005a20 <I2C_WaitOnTXISFlagUntilTimeout>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e07b      	b.n	800575c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d034      	beq.n	8005708 <HAL_I2C_Master_Transmit+0x184>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d130      	bne.n	8005708 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2180      	movs	r1, #128	; 0x80
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f975 	bl	80059a0 <I2C_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e04d      	b.n	800575c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2bff      	cmp	r3, #255	; 0xff
 80056c8:	d90e      	bls.n	80056e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	22ff      	movs	r2, #255	; 0xff
 80056ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	8979      	ldrh	r1, [r7, #10]
 80056d8:	2300      	movs	r3, #0
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 fb7f 	bl	8005de4 <I2C_TransferConfig>
 80056e6:	e00f      	b.n	8005708 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	8979      	ldrh	r1, [r7, #10]
 80056fa:	2300      	movs	r3, #0
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fb6e 	bl	8005de4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d19e      	bne.n	8005650 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	6a39      	ldr	r1, [r7, #32]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f9c2 	bl	8005aa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e01a      	b.n	800575c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2220      	movs	r2, #32
 800572c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6859      	ldr	r1, [r3, #4]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <HAL_I2C_Master_Transmit+0x1e4>)
 800573a:	400b      	ands	r3, r1
 800573c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	e000      	b.n	800575c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800575a:	2302      	movs	r3, #2
  }
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	80002000 	.word	0x80002000
 8005768:	fe00e800 	.word	0xfe00e800

0800576c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	461a      	mov	r2, r3
 8005778:	460b      	mov	r3, r1
 800577a:	817b      	strh	r3, [r7, #10]
 800577c:	4613      	mov	r3, r2
 800577e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b20      	cmp	r3, #32
 800578a:	f040 80db 	bne.w	8005944 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_I2C_Master_Receive+0x30>
 8005798:	2302      	movs	r3, #2
 800579a:	e0d4      	b.n	8005946 <HAL_I2C_Master_Receive+0x1da>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057a4:	f7fe feb4 	bl	8004510 <HAL_GetTick>
 80057a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	2319      	movs	r3, #25
 80057b0:	2201      	movs	r2, #1
 80057b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f8f2 	bl	80059a0 <I2C_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e0bf      	b.n	8005946 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2222      	movs	r2, #34	; 0x22
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2210      	movs	r2, #16
 80057d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	893a      	ldrh	r2, [r7, #8]
 80057e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2bff      	cmp	r3, #255	; 0xff
 80057f6:	d90e      	bls.n	8005816 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	22ff      	movs	r2, #255	; 0xff
 80057fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005802:	b2da      	uxtb	r2, r3
 8005804:	8979      	ldrh	r1, [r7, #10]
 8005806:	4b52      	ldr	r3, [pc, #328]	; (8005950 <HAL_I2C_Master_Receive+0x1e4>)
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fae8 	bl	8005de4 <I2C_TransferConfig>
 8005814:	e06d      	b.n	80058f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005824:	b2da      	uxtb	r2, r3
 8005826:	8979      	ldrh	r1, [r7, #10]
 8005828:	4b49      	ldr	r3, [pc, #292]	; (8005950 <HAL_I2C_Master_Receive+0x1e4>)
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 fad7 	bl	8005de4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005836:	e05c      	b.n	80058f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	6a39      	ldr	r1, [r7, #32]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f96b 	bl	8005b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e07c      	b.n	8005946 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d034      	beq.n	80058f2 <HAL_I2C_Master_Receive+0x186>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588c:	2b00      	cmp	r3, #0
 800588e:	d130      	bne.n	80058f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	2200      	movs	r2, #0
 8005898:	2180      	movs	r1, #128	; 0x80
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f880 	bl	80059a0 <I2C_WaitOnFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e04d      	b.n	8005946 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2bff      	cmp	r3, #255	; 0xff
 80058b2:	d90e      	bls.n	80058d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	22ff      	movs	r2, #255	; 0xff
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	8979      	ldrh	r1, [r7, #10]
 80058c2:	2300      	movs	r3, #0
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fa8a 	bl	8005de4 <I2C_TransferConfig>
 80058d0:	e00f      	b.n	80058f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	8979      	ldrh	r1, [r7, #10]
 80058e4:	2300      	movs	r3, #0
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fa79 	bl	8005de4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d19d      	bne.n	8005838 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	6a39      	ldr	r1, [r7, #32]
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f8cd 	bl	8005aa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e01a      	b.n	8005946 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2220      	movs	r2, #32
 8005916:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6859      	ldr	r1, [r3, #4]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <HAL_I2C_Master_Receive+0x1e8>)
 8005924:	400b      	ands	r3, r1
 8005926:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	e000      	b.n	8005946 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005944:	2302      	movs	r3, #2
  }
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	80002400 	.word	0x80002400
 8005954:	fe00e800 	.word	0xfe00e800

08005958 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b02      	cmp	r3, #2
 800596c:	d103      	bne.n	8005976 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2200      	movs	r2, #0
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b01      	cmp	r3, #1
 8005982:	d007      	beq.n	8005994 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	619a      	str	r2, [r3, #24]
  }
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b0:	e022      	b.n	80059f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b8:	d01e      	beq.n	80059f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ba:	f7fe fda9 	bl	8004510 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d302      	bcc.n	80059d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d113      	bne.n	80059f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d4:	f043 0220 	orr.w	r2, r3, #32
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e00f      	b.n	8005a18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4013      	ands	r3, r2
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	bf0c      	ite	eq
 8005a08:	2301      	moveq	r3, #1
 8005a0a:	2300      	movne	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d0cd      	beq.n	80059b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a2c:	e02c      	b.n	8005a88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 f8ea 	bl	8005c0c <I2C_IsErrorOccurred>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e02a      	b.n	8005a98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a48:	d01e      	beq.n	8005a88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4a:	f7fe fd61 	bl	8004510 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d113      	bne.n	8005a88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e007      	b.n	8005a98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d1cb      	bne.n	8005a2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aac:	e028      	b.n	8005b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f8aa 	bl	8005c0c <I2C_IsErrorOccurred>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e026      	b.n	8005b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac2:	f7fe fd25 	bl	8004510 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d113      	bne.n	8005b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e007      	b.n	8005b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d1cf      	bne.n	8005aae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b24:	e064      	b.n	8005bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f86e 	bl	8005c0c <I2C_IsErrorOccurred>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e062      	b.n	8005c00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	d138      	bne.n	8005bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d105      	bne.n	8005b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e04e      	b.n	8005c00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d107      	bne.n	8005b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2210      	movs	r2, #16
 8005b76:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	645a      	str	r2, [r3, #68]	; 0x44
 8005b7e:	e002      	b.n	8005b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6859      	ldr	r1, [r3, #4]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005b9a:	400b      	ands	r3, r1
 8005b9c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e022      	b.n	8005c00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bba:	f7fe fca9 	bl	8004510 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d302      	bcc.n	8005bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10f      	bne.n	8005bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	f043 0220 	orr.w	r2, r3, #32
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e007      	b.n	8005c00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d193      	bne.n	8005b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	fe00e800 	.word	0xfe00e800

08005c0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	; 0x28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d075      	beq.n	8005d24 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c40:	e056      	b.n	8005cf0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d052      	beq.n	8005cf0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c4a:	f7fe fc61 	bl	8004510 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d302      	bcc.n	8005c60 <I2C_IsErrorOccurred+0x54>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d147      	bne.n	8005cf0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c82:	d12e      	bne.n	8005ce2 <I2C_IsErrorOccurred+0xd6>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c8a:	d02a      	beq.n	8005ce2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005c8c:	7cfb      	ldrb	r3, [r7, #19]
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d027      	beq.n	8005ce2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ca0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ca2:	f7fe fc35 	bl	8004510 <HAL_GetTick>
 8005ca6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ca8:	e01b      	b.n	8005ce2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005caa:	f7fe fc31 	bl	8004510 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b19      	cmp	r3, #25
 8005cb6:	d914      	bls.n	8005ce2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d1dc      	bne.n	8005caa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d003      	beq.n	8005d06 <I2C_IsErrorOccurred+0xfa>
 8005cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d09d      	beq.n	8005c42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2220      	movs	r2, #32
 8005d14:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	f043 0304 	orr.w	r3, r3, #4
 8005d1c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	f043 0308 	orr.w	r3, r3, #8
 8005d5e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	f043 0302 	orr.w	r3, r3, #2
 8005d80:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d01c      	beq.n	8005dd4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff fddc 	bl	8005958 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6859      	ldr	r1, [r3, #4]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <I2C_IsErrorOccurred+0x1d4>)
 8005dac:	400b      	ands	r3, r1
 8005dae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3728      	adds	r7, #40	; 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	fe00e800 	.word	0xfe00e800

08005de4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	607b      	str	r3, [r7, #4]
 8005dee:	460b      	mov	r3, r1
 8005df0:	817b      	strh	r3, [r7, #10]
 8005df2:	4613      	mov	r3, r2
 8005df4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005df6:	897b      	ldrh	r3, [r7, #10]
 8005df8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005dfc:	7a7b      	ldrb	r3, [r7, #9]
 8005dfe:	041b      	lsls	r3, r3, #16
 8005e00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	0d5b      	lsrs	r3, r3, #21
 8005e1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005e22:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <I2C_TransferConfig+0x60>)
 8005e24:	430b      	orrs	r3, r1
 8005e26:	43db      	mvns	r3, r3
 8005e28:	ea02 0103 	and.w	r1, r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e36:	bf00      	nop
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	03ff63ff 	.word	0x03ff63ff

08005e48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d138      	bne.n	8005ed0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e032      	b.n	8005ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2224      	movs	r2, #36	; 0x24
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6819      	ldr	r1, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e000      	b.n	8005ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ed0:	2302      	movs	r3, #2
  }
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	d139      	bne.n	8005f68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e033      	b.n	8005f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2224      	movs	r2, #36	; 0x24
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0201 	bic.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	021b      	lsls	r3, r3, #8
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	e000      	b.n	8005f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f68:	2302      	movs	r3, #2
  }
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
	...

08005f78 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005f80:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	4904      	ldr	r1, [pc, #16]	; (8005f98 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	604b      	str	r3, [r1, #4]
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	40010000 	.word	0x40010000

08005f9c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01e      	beq.n	8005fec <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005fae:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <HAL_IPCC_Init+0x60>)
 8005fb0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fd fe8a 	bl	8003cd8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005fc4:	68b8      	ldr	r0, [r7, #8]
 8005fc6:	f000 f85b 	bl	8006080 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f82c 	bl	8006034 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005fea:	e001      	b.n	8005ff0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	58000c00 	.word	0x58000c00

08006000 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	4613      	mov	r3, r2
 800600c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	4613      	mov	r3, r2
 8006026:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e00f      	b.n	8006062 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	4a0b      	ldr	r2, [pc, #44]	; (8006078 <IPCC_SetDefaultCallbacks+0x44>)
 800604c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3306      	adds	r3, #6
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	4a08      	ldr	r2, [pc, #32]	; (800607c <IPCC_SetDefaultCallbacks+0x48>)
 800605a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b05      	cmp	r3, #5
 8006066:	d9ec      	bls.n	8006042 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	08006001 	.word	0x08006001
 800607c:	0800601b 	.word	0x0800601b

08006080 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8006094:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	223f      	movs	r2, #63	; 0x3f
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a04      	ldr	r2, [pc, #16]	; (80060c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b6:	6013      	str	r3, [r2, #0]
}
 80060b8:	bf00      	nop
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	58000400 	.word	0x58000400

080060c8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 80060cc:	bf00      	nop
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80060e0:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <LL_EXTI_ReadFlag_0_31+0x1c>)
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4013      	ands	r3, r2
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	58000800 	.word	0x58000800

080060f8 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 8006100:	4b04      	ldr	r3, [pc, #16]	; (8006114 <LL_EXTI_ReadFlag_32_63+0x1c>)
 8006102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4013      	ands	r3, r2
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	58000800 	.word	0x58000800

08006118 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006120:	4a04      	ldr	r2, [pc, #16]	; (8006134 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60d3      	str	r3, [r2, #12]
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	58000800 	.word	0x58000800

08006138 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8006140:	4a04      	ldr	r2, [pc, #16]	; (8006154 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	58000800 	.word	0x58000800

08006158 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800615c:	4b04      	ldr	r3, [pc, #16]	; (8006170 <HAL_PWREx_GetVoltageRange+0x18>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006164:	4618      	mov	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	58000400 	.word	0x58000400

08006174 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8006178:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800617c:	f7ff ffac 	bl	80060d8 <LL_EXTI_ReadFlag_0_31>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006186:	f7ff ff9f 	bl	80060c8 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800618a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800618e:	f7ff ffc3 	bl	8006118 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 8006192:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006196:	f7ff ff9f 	bl	80060d8 <LL_EXTI_ReadFlag_0_31>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 80061a0:	f000 f811 	bl	80061c6 <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 80061a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80061a8:	f7ff ffb6 	bl	8006118 <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 80061ac:	2002      	movs	r0, #2
 80061ae:	f7ff ffa3 	bl	80060f8 <LL_EXTI_ReadFlag_32_63>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d004      	beq.n	80061c2 <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 80061b8:	f000 f80c 	bl	80061d4 <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 80061bc:	2002      	movs	r0, #2
 80061be:	f7ff ffbb 	bl	8006138 <LL_EXTI_ClearFlag_32_63>
  }
}
 80061c2:	bf00      	nop
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 80061c6:	b480      	push	{r7}
 80061c8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 80061ca:	bf00      	nop
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80061e2:	b480      	push	{r7}
 80061e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80061e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f4:	d101      	bne.n	80061fa <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <LL_RCC_HSE_Enable>:
{
 8006206:	b480      	push	{r7}
 8006208:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800620a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006218:	6013      	str	r3, [r2, #0]
}
 800621a:	bf00      	nop
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <LL_RCC_HSE_Disable>:
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006236:	6013      	str	r3, [r2, #0]
}
 8006238:	bf00      	nop
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <LL_RCC_HSE_IsReady>:
{
 8006242:	b480      	push	{r7}
 8006244:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006254:	d101      	bne.n	800625a <LL_RCC_HSE_IsReady+0x18>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <LL_RCC_HSE_IsReady+0x1a>
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <LL_RCC_HSI_Enable>:
{
 8006266:	b480      	push	{r7}
 8006268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800626a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006278:	6013      	str	r3, [r2, #0]
}
 800627a:	bf00      	nop
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <LL_RCC_HSI_Disable>:
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006296:	6013      	str	r3, [r2, #0]
}
 8006298:	bf00      	nop
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <LL_RCC_HSI_IsReady>:
{
 80062a2:	b480      	push	{r7}
 80062a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80062a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b4:	d101      	bne.n	80062ba <LL_RCC_HSI_IsReady+0x18>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <LL_RCC_HSI_IsReady+0x1a>
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80062ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	061b      	lsls	r3, r3, #24
 80062dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062e0:	4313      	orrs	r3, r2
 80062e2:	604b      	str	r3, [r1, #4]
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <LL_RCC_HSI48_Enable>:
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80062f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006308:	bf00      	nop
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <LL_RCC_HSI48_Disable>:
{
 8006312:	b480      	push	{r7}
 8006314:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800631e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006322:	f023 0301 	bic.w	r3, r3, #1
 8006326:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800632a:	bf00      	nop
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <LL_RCC_HSI48_IsReady>:
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b02      	cmp	r3, #2
 8006346:	d101      	bne.n	800634c <LL_RCC_HSI48_IsReady+0x18>
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <LL_RCC_HSI48_IsReady+0x1a>
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <LL_RCC_LSE_Enable>:
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800635c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006370:	bf00      	nop
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <LL_RCC_LSE_Disable>:
{
 800637a:	b480      	push	{r7}
 800637c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800637e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006392:	bf00      	nop
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <LL_RCC_LSE_EnableBypass>:
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80063a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ac:	f043 0304 	orr.w	r3, r3, #4
 80063b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <LL_RCC_LSE_DisableBypass>:
{
 80063be:	b480      	push	{r7}
 80063c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80063c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ce:	f023 0304 	bic.w	r3, r3, #4
 80063d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80063d6:	bf00      	nop
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <LL_RCC_LSE_IsReady>:
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80063e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d101      	bne.n	80063f8 <LL_RCC_LSE_IsReady+0x18>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e000      	b.n	80063fa <LL_RCC_LSE_IsReady+0x1a>
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <LL_RCC_LSI1_Enable>:
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800640c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800641c:	bf00      	nop
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <LL_RCC_LSI1_Disable>:
{
 8006426:	b480      	push	{r7}
 8006428:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800642a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006436:	f023 0301 	bic.w	r3, r3, #1
 800643a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800643e:	bf00      	nop
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <LL_RCC_LSI1_IsReady>:
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800644c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b02      	cmp	r3, #2
 800645a:	d101      	bne.n	8006460 <LL_RCC_LSI1_IsReady+0x18>
 800645c:	2301      	movs	r3, #1
 800645e:	e000      	b.n	8006462 <LL_RCC_LSI1_IsReady+0x1a>
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <LL_RCC_LSI2_Enable>:
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800647c:	f043 0304 	orr.w	r3, r3, #4
 8006480:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006484:	bf00      	nop
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <LL_RCC_LSI2_Disable>:
{
 800648e:	b480      	push	{r7}
 8006490:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800649a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800649e:	f023 0304 	bic.w	r3, r3, #4
 80064a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80064a6:	bf00      	nop
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <LL_RCC_LSI2_IsReady>:
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80064b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d101      	bne.n	80064c8 <LL_RCC_LSI2_IsReady+0x18>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <LL_RCC_LSI2_IsReady+0x1a>
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <LL_RCC_LSI2_SetTrimming>:
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80064dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e4:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <LL_RCC_MSI_Enable>:
{
 8006502:	b480      	push	{r7}
 8006504:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	6013      	str	r3, [r2, #0]
}
 8006516:	bf00      	nop
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <LL_RCC_MSI_Disable>:
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800652e:	f023 0301 	bic.w	r3, r3, #1
 8006532:	6013      	str	r3, [r2, #0]
}
 8006534:	bf00      	nop
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <LL_RCC_MSI_IsReady>:
{
 800653e:	b480      	push	{r7}
 8006540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b02      	cmp	r3, #2
 800654e:	d101      	bne.n	8006554 <LL_RCC_MSI_IsReady+0x16>
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <LL_RCC_MSI_IsReady+0x18>
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <LL_RCC_MSI_SetRange>:
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <LL_RCC_MSI_GetRange>:
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800658e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006598:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2bb0      	cmp	r3, #176	; 0xb0
 800659e:	d901      	bls.n	80065a4 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80065a0:	23b0      	movs	r3, #176	; 0xb0
 80065a2:	607b      	str	r3, [r7, #4]
  return msiRange;
 80065a4:	687b      	ldr	r3, [r7, #4]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <LL_RCC_MSI_SetCalibTrimming>:
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80065ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065cc:	4313      	orrs	r3, r2
 80065ce:	604b      	str	r3, [r1, #4]
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_RCC_SetSysClkSource>:
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80065e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f023 0203 	bic.w	r2, r3, #3
 80065ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	608b      	str	r3, [r1, #8]
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <LL_RCC_GetSysClkSource>:
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 030c 	and.w	r3, r3, #12
}
 8006612:	4618      	mov	r0, r3
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <LL_RCC_SetAHBPrescaler>:
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800662e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4313      	orrs	r3, r2
 8006636:	608b      	str	r3, [r1, #8]
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <LL_C2_RCC_SetAHBPrescaler>:
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800664c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006650:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <LL_RCC_SetAHB4Prescaler>:
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006680:	f023 020f 	bic.w	r2, r3, #15
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	091b      	lsrs	r3, r3, #4
 8006688:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <LL_RCC_SetAPB1Prescaler>:
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80066a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	608b      	str	r3, [r1, #8]
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <LL_RCC_SetAPB2Prescaler>:
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80066ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4313      	orrs	r3, r2
 80066e0:	608b      	str	r3, [r1, #8]
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <LL_RCC_GetAHBPrescaler>:
{
 80066ee:	b480      	push	{r7}
 80066f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80066f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <LL_RCC_GetAHB4Prescaler>:
{
 8006706:	b480      	push	{r7}
 8006708:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800670a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006718:	4618      	mov	r0, r3
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <LL_RCC_GetAPB1Prescaler>:
{
 8006722:	b480      	push	{r7}
 8006724:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006730:	4618      	mov	r0, r3
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <LL_RCC_GetAPB2Prescaler>:
{
 800673a:	b480      	push	{r7}
 800673c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800673e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006748:	4618      	mov	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006752:	b480      	push	{r7}
 8006754:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006760:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006764:	6013      	str	r3, [r2, #0]
}
 8006766:	bf00      	nop
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800677e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006782:	6013      	str	r3, [r2, #0]
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800678e:	b480      	push	{r7}
 8006790:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067a0:	d101      	bne.n	80067a6 <LL_RCC_PLL_IsReady+0x18>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <LL_RCC_PLL_IsReady+0x1a>
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80067b2:	b480      	push	{r7}
 80067b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80067b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80067d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80067da:	4618      	mov	r0, r3
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80067e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0303 	and.w	r3, r3, #3
}
 800680a:	4618      	mov	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006826:	d101      	bne.n	800682c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800683c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006840:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800684c:	d101      	bne.n	8006852 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800685e:	b480      	push	{r7}
 8006860:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006866:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800686a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006872:	d101      	bne.n	8006878 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006896:	d101      	bne.n	800689c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80068ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068ba:	d101      	bne.n	80068c0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068cc:	b590      	push	{r4, r7, lr}
 80068ce:	b08d      	sub	sp, #52	; 0x34
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e363      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 808d 	beq.w	8006a06 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ec:	f7ff fe8a 	bl	8006604 <LL_RCC_GetSysClkSource>
 80068f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068f2:	f7ff ff83 	bl	80067fc <LL_RCC_PLL_GetMainSource>
 80068f6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_RCC_OscConfig+0x3e>
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	2b0c      	cmp	r3, #12
 8006902:	d147      	bne.n	8006994 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	2b01      	cmp	r3, #1
 8006908:	d144      	bne.n	8006994 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e347      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800691a:	f7ff fe35 	bl	8006588 <LL_RCC_MSI_GetRange>
 800691e:	4603      	mov	r3, r0
 8006920:	429c      	cmp	r4, r3
 8006922:	d914      	bls.n	800694e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fd2f 	bl	800738c <RCC_SetFlashLatencyFromMSIRange>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e336      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff fe0f 	bl	8006560 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff fe33 	bl	80065b2 <LL_RCC_MSI_SetCalibTrimming>
 800694c:	e013      	b.n	8006976 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff fe04 	bl	8006560 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fe28 	bl	80065b2 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fd10 	bl	800738c <RCC_SetFlashLatencyFromMSIRange>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e317      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006976:	f000 fcc9 	bl	800730c <HAL_RCC_GetHCLKFreq>
 800697a:	4603      	mov	r3, r0
 800697c:	4aa4      	ldr	r2, [pc, #656]	; (8006c10 <HAL_RCC_OscConfig+0x344>)
 800697e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006980:	4ba4      	ldr	r3, [pc, #656]	; (8006c14 <HAL_RCC_OscConfig+0x348>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f7fd fd75 	bl	8004474 <HAL_InitTick>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d039      	beq.n	8006a04 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e308      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01e      	beq.n	80069da <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800699c:	f7ff fdb1 	bl	8006502 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069a0:	f7fd fdb6 	bl	8004510 <HAL_GetTick>
 80069a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069a8:	f7fd fdb2 	bl	8004510 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e2f5      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80069ba:	f7ff fdc0 	bl	800653e <LL_RCC_MSI_IsReady>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0f1      	beq.n	80069a8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff fdc9 	bl	8006560 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff fded 	bl	80065b2 <LL_RCC_MSI_SetCalibTrimming>
 80069d8:	e015      	b.n	8006a06 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80069da:	f7ff fda1 	bl	8006520 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069de:	f7fd fd97 	bl	8004510 <HAL_GetTick>
 80069e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069e6:	f7fd fd93 	bl	8004510 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e2d6      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80069f8:	f7ff fda1 	bl	800653e <LL_RCC_MSI_IsReady>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f1      	bne.n	80069e6 <HAL_RCC_OscConfig+0x11a>
 8006a02:	e000      	b.n	8006a06 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006a04:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d047      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a12:	f7ff fdf7 	bl	8006604 <LL_RCC_GetSysClkSource>
 8006a16:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a18:	f7ff fef0 	bl	80067fc <LL_RCC_PLL_GetMainSource>
 8006a1c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d005      	beq.n	8006a30 <HAL_RCC_OscConfig+0x164>
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	2b0c      	cmp	r3, #12
 8006a28:	d108      	bne.n	8006a3c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d105      	bne.n	8006a3c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d134      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e2b4      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a44:	d102      	bne.n	8006a4c <HAL_RCC_OscConfig+0x180>
 8006a46:	f7ff fbde 	bl	8006206 <LL_RCC_HSE_Enable>
 8006a4a:	e001      	b.n	8006a50 <HAL_RCC_OscConfig+0x184>
 8006a4c:	f7ff fbea 	bl	8006224 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d012      	beq.n	8006a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a58:	f7fd fd5a 	bl	8004510 <HAL_GetTick>
 8006a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a60:	f7fd fd56 	bl	8004510 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b64      	cmp	r3, #100	; 0x64
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e299      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006a72:	f7ff fbe6 	bl	8006242 <LL_RCC_HSE_IsReady>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0f1      	beq.n	8006a60 <HAL_RCC_OscConfig+0x194>
 8006a7c:	e011      	b.n	8006aa2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7e:	f7fd fd47 	bl	8004510 <HAL_GetTick>
 8006a82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006a84:	e008      	b.n	8006a98 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a86:	f7fd fd43 	bl	8004510 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b64      	cmp	r3, #100	; 0x64
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e286      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006a98:	f7ff fbd3 	bl	8006242 <LL_RCC_HSE_IsReady>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1f1      	bne.n	8006a86 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d04c      	beq.n	8006b48 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aae:	f7ff fda9 	bl	8006604 <LL_RCC_GetSysClkSource>
 8006ab2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ab4:	f7ff fea2 	bl	80067fc <LL_RCC_PLL_GetMainSource>
 8006ab8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d005      	beq.n	8006acc <HAL_RCC_OscConfig+0x200>
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	2b0c      	cmp	r3, #12
 8006ac4:	d10e      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d10b      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e266      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff fbf2 	bl	80062c6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006ae2:	e031      	b.n	8006b48 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d019      	beq.n	8006b20 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aec:	f7ff fbbb 	bl	8006266 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af0:	f7fd fd0e 	bl	8004510 <HAL_GetTick>
 8006af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006af8:	f7fd fd0a 	bl	8004510 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e24d      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006b0a:	f7ff fbca 	bl	80062a2 <LL_RCC_HSI_IsReady>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0f1      	beq.n	8006af8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff fbd4 	bl	80062c6 <LL_RCC_HSI_SetCalibTrimming>
 8006b1e:	e013      	b.n	8006b48 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b20:	f7ff fbb0 	bl	8006284 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fd fcf4 	bl	8004510 <HAL_GetTick>
 8006b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b2c:	f7fd fcf0 	bl	8004510 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e233      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006b3e:	f7ff fbb0 	bl	80062a2 <LL_RCC_HSI_IsReady>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1f1      	bne.n	8006b2c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d106      	bne.n	8006b62 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 80a3 	beq.w	8006ca8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d076      	beq.n	8006c58 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0310 	and.w	r3, r3, #16
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d046      	beq.n	8006c04 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006b76:	f7ff fc67 	bl	8006448 <LL_RCC_LSI1_IsReady>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d113      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006b80:	f7ff fc40 	bl	8006404 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b84:	f7fd fcc4 	bl	8004510 <HAL_GetTick>
 8006b88:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006b8c:	f7fd fcc0 	bl	8004510 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e203      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006b9e:	f7ff fc53 	bl	8006448 <LL_RCC_LSI1_IsReady>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0f1      	beq.n	8006b8c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006ba8:	f7ff fc60 	bl	800646c <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bac:	f7fd fcb0 	bl	8004510 <HAL_GetTick>
 8006bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006bb4:	f7fd fcac 	bl	8004510 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e1ef      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006bc6:	f7ff fc73 	bl	80064b0 <LL_RCC_LSI2_IsReady>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0f1      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff fc7d 	bl	80064d4 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006bda:	f7ff fc24 	bl	8006426 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bde:	f7fd fc97 	bl	8004510 <HAL_GetTick>
 8006be2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006be6:	f7fd fc93 	bl	8004510 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e1d6      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006bf8:	f7ff fc26 	bl	8006448 <LL_RCC_LSI1_IsReady>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f1      	bne.n	8006be6 <HAL_RCC_OscConfig+0x31a>
 8006c02:	e051      	b.n	8006ca8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006c04:	f7ff fbfe 	bl	8006404 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7fd fc82 	bl	8004510 <HAL_GetTick>
 8006c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006c0e:	e00c      	b.n	8006c2a <HAL_RCC_OscConfig+0x35e>
 8006c10:	2000001c 	.word	0x2000001c
 8006c14:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006c18:	f7fd fc7a 	bl	8004510 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e1bd      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006c2a:	f7ff fc0d 	bl	8006448 <LL_RCC_LSI1_IsReady>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f1      	beq.n	8006c18 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006c34:	f7ff fc2b 	bl	800648e <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006c3a:	f7fd fc69 	bl	8004510 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e1ac      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006c4c:	f7ff fc30 	bl	80064b0 <LL_RCC_LSI2_IsReady>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1f1      	bne.n	8006c3a <HAL_RCC_OscConfig+0x36e>
 8006c56:	e027      	b.n	8006ca8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006c58:	f7ff fc19 	bl	800648e <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c5c:	f7fd fc58 	bl	8004510 <HAL_GetTick>
 8006c60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006c64:	f7fd fc54 	bl	8004510 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e197      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006c76:	f7ff fc1b 	bl	80064b0 <LL_RCC_LSI2_IsReady>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1f1      	bne.n	8006c64 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006c80:	f7ff fbd1 	bl	8006426 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c84:	f7fd fc44 	bl	8004510 <HAL_GetTick>
 8006c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006c8c:	f7fd fc40 	bl	8004510 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e183      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006c9e:	f7ff fbd3 	bl	8006448 <LL_RCC_LSI1_IsReady>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1f1      	bne.n	8006c8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d05b      	beq.n	8006d6c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cb4:	4ba7      	ldr	r3, [pc, #668]	; (8006f54 <HAL_RCC_OscConfig+0x688>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d114      	bne.n	8006cea <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006cc0:	f7ff f9f2 	bl	80060a8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cc4:	f7fd fc24 	bl	8004510 <HAL_GetTick>
 8006cc8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ccc:	f7fd fc20 	bl	8004510 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e163      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cde:	4b9d      	ldr	r3, [pc, #628]	; (8006f54 <HAL_RCC_OscConfig+0x688>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0f0      	beq.n	8006ccc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d102      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x42c>
 8006cf2:	f7ff fb31 	bl	8006358 <LL_RCC_LSE_Enable>
 8006cf6:	e00c      	b.n	8006d12 <HAL_RCC_OscConfig+0x446>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b05      	cmp	r3, #5
 8006cfe:	d104      	bne.n	8006d0a <HAL_RCC_OscConfig+0x43e>
 8006d00:	f7ff fb4c 	bl	800639c <LL_RCC_LSE_EnableBypass>
 8006d04:	f7ff fb28 	bl	8006358 <LL_RCC_LSE_Enable>
 8006d08:	e003      	b.n	8006d12 <HAL_RCC_OscConfig+0x446>
 8006d0a:	f7ff fb36 	bl	800637a <LL_RCC_LSE_Disable>
 8006d0e:	f7ff fb56 	bl	80063be <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d014      	beq.n	8006d44 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d1a:	f7fd fbf9 	bl	8004510 <HAL_GetTick>
 8006d1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006d20:	e00a      	b.n	8006d38 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d22:	f7fd fbf5 	bl	8004510 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e136      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006d38:	f7ff fb52 	bl	80063e0 <LL_RCC_LSE_IsReady>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0ef      	beq.n	8006d22 <HAL_RCC_OscConfig+0x456>
 8006d42:	e013      	b.n	8006d6c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d44:	f7fd fbe4 	bl	8004510 <HAL_GetTick>
 8006d48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006d4a:	e00a      	b.n	8006d62 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4c:	f7fd fbe0 	bl	8004510 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e121      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006d62:	f7ff fb3d 	bl	80063e0 <LL_RCC_LSE_IsReady>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1ef      	bne.n	8006d4c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d02c      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d014      	beq.n	8006daa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d80:	f7ff fab6 	bl	80062f0 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d84:	f7fd fbc4 	bl	8004510 <HAL_GetTick>
 8006d88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d8c:	f7fd fbc0 	bl	8004510 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e103      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006d9e:	f7ff fac9 	bl	8006334 <LL_RCC_HSI48_IsReady>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0f1      	beq.n	8006d8c <HAL_RCC_OscConfig+0x4c0>
 8006da8:	e013      	b.n	8006dd2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006daa:	f7ff fab2 	bl	8006312 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dae:	f7fd fbaf 	bl	8004510 <HAL_GetTick>
 8006db2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006db4:	e008      	b.n	8006dc8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006db6:	f7fd fbab 	bl	8004510 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e0ee      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006dc8:	f7ff fab4 	bl	8006334 <LL_RCC_HSI48_IsReady>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f1      	bne.n	8006db6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80e4 	beq.w	8006fa4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ddc:	f7ff fc12 	bl	8006604 <LL_RCC_GetSysClkSource>
 8006de0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	f040 80b4 	bne.w	8006f5c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f003 0203 	and.w	r2, r3, #3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d123      	bne.n	8006e4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d11c      	bne.n	8006e4a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d114      	bne.n	8006e4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d10d      	bne.n	8006e4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d106      	bne.n	8006e4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d05d      	beq.n	8006f06 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b0c      	cmp	r3, #12
 8006e4e:	d058      	beq.n	8006f02 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e0a1      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006e62:	f7ff fc85 	bl	8006770 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e66:	f7fd fb53 	bl	8004510 <HAL_GetTick>
 8006e6a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e6c:	e008      	b.n	8006e80 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6e:	f7fd fb4f 	bl	8004510 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e092      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1ef      	bne.n	8006e6e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	4b30      	ldr	r3, [pc, #192]	; (8006f58 <HAL_RCC_OscConfig+0x68c>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ea0:	4311      	orrs	r1, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ea6:	0212      	lsls	r2, r2, #8
 8006ea8:	4311      	orrs	r1, r2
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006eae:	4311      	orrs	r1, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ec4:	f7ff fc45 	bl	8006752 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ed8:	f7fd fb1a 	bl	8004510 <HAL_GetTick>
 8006edc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee0:	f7fd fb16 	bl	8004510 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e059      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0ef      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f00:	e050      	b.n	8006fa4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e04f      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d147      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006f14:	f7ff fc1d 	bl	8006752 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f28:	f7fd faf2 	bl	8004510 <HAL_GetTick>
 8006f2c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f30:	f7fd faee 	bl	8004510 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e031      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0ef      	beq.n	8006f30 <HAL_RCC_OscConfig+0x664>
 8006f50:	e028      	b.n	8006fa4 <HAL_RCC_OscConfig+0x6d8>
 8006f52:	bf00      	nop
 8006f54:	58000400 	.word	0x58000400
 8006f58:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b0c      	cmp	r3, #12
 8006f60:	d01e      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f62:	f7ff fc05 	bl	8006770 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f66:	f7fd fad3 	bl	8004510 <HAL_GetTick>
 8006f6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f6c:	e008      	b.n	8006f80 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f6e:	f7fd facf 	bl	8004510 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d901      	bls.n	8006f80 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e012      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1ef      	bne.n	8006f6e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <HAL_RCC_OscConfig+0x6e4>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	60cb      	str	r3, [r1, #12]
 8006f9e:	e001      	b.n	8006fa4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3734      	adds	r7, #52	; 0x34
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd90      	pop	{r4, r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	eefefffc 	.word	0xeefefffc

08006fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e12d      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc8:	4b98      	ldr	r3, [pc, #608]	; (800722c <HAL_RCC_ClockConfig+0x278>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d91b      	bls.n	800700e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd6:	4b95      	ldr	r3, [pc, #596]	; (800722c <HAL_RCC_ClockConfig+0x278>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f023 0207 	bic.w	r2, r3, #7
 8006fde:	4993      	ldr	r1, [pc, #588]	; (800722c <HAL_RCC_ClockConfig+0x278>)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe6:	f7fd fa93 	bl	8004510 <HAL_GetTick>
 8006fea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fec:	e008      	b.n	8007000 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006fee:	f7fd fa8f 	bl	8004510 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d901      	bls.n	8007000 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e111      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007000:	4b8a      	ldr	r3, [pc, #552]	; (800722c <HAL_RCC_ClockConfig+0x278>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d1ef      	bne.n	8006fee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d016      	beq.n	8007048 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff fafc 	bl	800661c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007024:	f7fd fa74 	bl	8004510 <HAL_GetTick>
 8007028:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800702a:	e008      	b.n	800703e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800702c:	f7fd fa70 	bl	8004510 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e0f2      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800703e:	f7ff fbe9 	bl	8006814 <LL_RCC_IsActiveFlag_HPRE>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0f1      	beq.n	800702c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d016      	beq.n	8007082 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff faf3 	bl	8006644 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800705e:	f7fd fa57 	bl	8004510 <HAL_GetTick>
 8007062:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007064:	e008      	b.n	8007078 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007066:	f7fd fa53 	bl	8004510 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e0d5      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007078:	f7ff fbde 	bl	8006838 <LL_RCC_IsActiveFlag_C2HPRE>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f1      	beq.n	8007066 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d016      	beq.n	80070bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff faec 	bl	8006670 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007098:	f7fd fa3a 	bl	8004510 <HAL_GetTick>
 800709c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800709e:	e008      	b.n	80070b2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80070a0:	f7fd fa36 	bl	8004510 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e0b8      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80070b2:	f7ff fbd4 	bl	800685e <LL_RCC_IsActiveFlag_SHDHPRE>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0f1      	beq.n	80070a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d016      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fae6 	bl	800669e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80070d2:	f7fd fa1d 	bl	8004510 <HAL_GetTick>
 80070d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80070d8:	e008      	b.n	80070ec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80070da:	f7fd fa19 	bl	8004510 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e09b      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80070ec:	f7ff fbca 	bl	8006884 <LL_RCC_IsActiveFlag_PPRE1>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0f1      	beq.n	80070da <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d017      	beq.n	8007132 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff fadc 	bl	80066c6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800710e:	f7fd f9ff 	bl	8004510 <HAL_GetTick>
 8007112:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007114:	e008      	b.n	8007128 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007116:	f7fd f9fb 	bl	8004510 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e07d      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007128:	f7ff fbbe 	bl	80068a8 <LL_RCC_IsActiveFlag_PPRE2>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0f1      	beq.n	8007116 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d043      	beq.n	80071c6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b02      	cmp	r3, #2
 8007144:	d106      	bne.n	8007154 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007146:	f7ff f87c 	bl	8006242 <LL_RCC_HSE_IsReady>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d11e      	bne.n	800718e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e067      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d106      	bne.n	800716a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800715c:	f7ff fb17 	bl	800678e <LL_RCC_PLL_IsReady>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d113      	bne.n	800718e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e05c      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d106      	bne.n	8007180 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007172:	f7ff f9e4 	bl	800653e <LL_RCC_MSI_IsReady>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d108      	bne.n	800718e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e051      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007180:	f7ff f88f 	bl	80062a2 <LL_RCC_HSI_IsReady>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e04a      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff fa22 	bl	80065dc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007198:	f7fd f9ba 	bl	8004510 <HAL_GetTick>
 800719c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800719e:	e00a      	b.n	80071b6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071a0:	f7fd f9b6 	bl	8004510 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e036      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071b6:	f7ff fa25 	bl	8006604 <LL_RCC_GetSysClkSource>
 80071ba:	4602      	mov	r2, r0
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d1ec      	bne.n	80071a0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071c6:	4b19      	ldr	r3, [pc, #100]	; (800722c <HAL_RCC_ClockConfig+0x278>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d21b      	bcs.n	800720c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071d4:	4b15      	ldr	r3, [pc, #84]	; (800722c <HAL_RCC_ClockConfig+0x278>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f023 0207 	bic.w	r2, r3, #7
 80071dc:	4913      	ldr	r1, [pc, #76]	; (800722c <HAL_RCC_ClockConfig+0x278>)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071e4:	f7fd f994 	bl	8004510 <HAL_GetTick>
 80071e8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80071ec:	f7fd f990 	bl	8004510 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e012      	b.n	8007224 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071fe:	4b0b      	ldr	r3, [pc, #44]	; (800722c <HAL_RCC_ClockConfig+0x278>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d1ef      	bne.n	80071ec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800720c:	f000 f87e 	bl	800730c <HAL_RCC_GetHCLKFreq>
 8007210:	4603      	mov	r3, r0
 8007212:	4a07      	ldr	r2, [pc, #28]	; (8007230 <HAL_RCC_ClockConfig+0x27c>)
 8007214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007216:	f7fd f987 	bl	8004528 <HAL_GetTickPrio>
 800721a:	4603      	mov	r3, r0
 800721c:	4618      	mov	r0, r3
 800721e:	f7fd f929 	bl	8004474 <HAL_InitTick>
 8007222:	4603      	mov	r3, r0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	58004000 	.word	0x58004000
 8007230:	2000001c 	.word	0x2000001c

08007234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007234:	b590      	push	{r4, r7, lr}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800723a:	f7ff f9e3 	bl	8006604 <LL_RCC_GetSysClkSource>
 800723e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10a      	bne.n	800725c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007246:	f7ff f99f 	bl	8006588 <LL_RCC_MSI_GetRange>
 800724a:	4603      	mov	r3, r0
 800724c:	091b      	lsrs	r3, r3, #4
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	4a2b      	ldr	r2, [pc, #172]	; (8007300 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	e04b      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b04      	cmp	r3, #4
 8007260:	d102      	bne.n	8007268 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007262:	4b28      	ldr	r3, [pc, #160]	; (8007304 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	e045      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b08      	cmp	r3, #8
 800726c:	d10a      	bne.n	8007284 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800726e:	f7fe ffb8 	bl	80061e2 <LL_RCC_HSE_IsEnabledDiv2>
 8007272:	4603      	mov	r3, r0
 8007274:	2b01      	cmp	r3, #1
 8007276:	d102      	bne.n	800727e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007278:	4b22      	ldr	r3, [pc, #136]	; (8007304 <HAL_RCC_GetSysClockFreq+0xd0>)
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e03a      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800727e:	4b22      	ldr	r3, [pc, #136]	; (8007308 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	e037      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007284:	f7ff faba 	bl	80067fc <LL_RCC_PLL_GetMainSource>
 8007288:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b02      	cmp	r3, #2
 800728e:	d003      	beq.n	8007298 <HAL_RCC_GetSysClockFreq+0x64>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2b03      	cmp	r3, #3
 8007294:	d003      	beq.n	800729e <HAL_RCC_GetSysClockFreq+0x6a>
 8007296:	e00d      	b.n	80072b4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007298:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <HAL_RCC_GetSysClockFreq+0xd0>)
 800729a:	60bb      	str	r3, [r7, #8]
        break;
 800729c:	e015      	b.n	80072ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800729e:	f7fe ffa0 	bl	80061e2 <LL_RCC_HSE_IsEnabledDiv2>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d102      	bne.n	80072ae <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80072a8:	4b16      	ldr	r3, [pc, #88]	; (8007304 <HAL_RCC_GetSysClockFreq+0xd0>)
 80072aa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80072ac:	e00d      	b.n	80072ca <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80072ae:	4b16      	ldr	r3, [pc, #88]	; (8007308 <HAL_RCC_GetSysClockFreq+0xd4>)
 80072b0:	60bb      	str	r3, [r7, #8]
        break;
 80072b2:	e00a      	b.n	80072ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80072b4:	f7ff f968 	bl	8006588 <LL_RCC_MSI_GetRange>
 80072b8:	4603      	mov	r3, r0
 80072ba:	091b      	lsrs	r3, r3, #4
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	4a0f      	ldr	r2, [pc, #60]	; (8007300 <HAL_RCC_GetSysClockFreq+0xcc>)
 80072c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c6:	60bb      	str	r3, [r7, #8]
        break;
 80072c8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80072ca:	f7ff fa72 	bl	80067b2 <LL_RCC_PLL_GetN>
 80072ce:	4602      	mov	r2, r0
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	fb03 f402 	mul.w	r4, r3, r2
 80072d6:	f7ff fa85 	bl	80067e4 <LL_RCC_PLL_GetDivider>
 80072da:	4603      	mov	r3, r0
 80072dc:	091b      	lsrs	r3, r3, #4
 80072de:	3301      	adds	r3, #1
 80072e0:	fbb4 f4f3 	udiv	r4, r4, r3
 80072e4:	f7ff fa72 	bl	80067cc <LL_RCC_PLL_GetR>
 80072e8:	4603      	mov	r3, r0
 80072ea:	0f5b      	lsrs	r3, r3, #29
 80072ec:	3301      	adds	r3, #1
 80072ee:	fbb4 f3f3 	udiv	r3, r4, r3
 80072f2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80072f4:	68fb      	ldr	r3, [r7, #12]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd90      	pop	{r4, r7, pc}
 80072fe:	bf00      	nop
 8007300:	0800f820 	.word	0x0800f820
 8007304:	00f42400 	.word	0x00f42400
 8007308:	01e84800 	.word	0x01e84800

0800730c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800730c:	b598      	push	{r3, r4, r7, lr}
 800730e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007310:	f7ff ff90 	bl	8007234 <HAL_RCC_GetSysClockFreq>
 8007314:	4604      	mov	r4, r0
 8007316:	f7ff f9ea 	bl	80066ee <LL_RCC_GetAHBPrescaler>
 800731a:	4603      	mov	r3, r0
 800731c:	091b      	lsrs	r3, r3, #4
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	4a03      	ldr	r2, [pc, #12]	; (8007330 <HAL_RCC_GetHCLKFreq+0x24>)
 8007324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007328:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800732c:	4618      	mov	r0, r3
 800732e:	bd98      	pop	{r3, r4, r7, pc}
 8007330:	0800f7c0 	.word	0x0800f7c0

08007334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007334:	b598      	push	{r3, r4, r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007338:	f7ff ffe8 	bl	800730c <HAL_RCC_GetHCLKFreq>
 800733c:	4604      	mov	r4, r0
 800733e:	f7ff f9f0 	bl	8006722 <LL_RCC_GetAPB1Prescaler>
 8007342:	4603      	mov	r3, r0
 8007344:	0a1b      	lsrs	r3, r3, #8
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	4a04      	ldr	r2, [pc, #16]	; (800735c <HAL_RCC_GetPCLK1Freq+0x28>)
 800734c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007358:	4618      	mov	r0, r3
 800735a:	bd98      	pop	{r3, r4, r7, pc}
 800735c:	0800f800 	.word	0x0800f800

08007360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007360:	b598      	push	{r3, r4, r7, lr}
 8007362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007364:	f7ff ffd2 	bl	800730c <HAL_RCC_GetHCLKFreq>
 8007368:	4604      	mov	r4, r0
 800736a:	f7ff f9e6 	bl	800673a <LL_RCC_GetAPB2Prescaler>
 800736e:	4603      	mov	r3, r0
 8007370:	0adb      	lsrs	r3, r3, #11
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	4a04      	ldr	r2, [pc, #16]	; (8007388 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800737c:	f003 031f 	and.w	r3, r3, #31
 8007380:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007384:	4618      	mov	r0, r3
 8007386:	bd98      	pop	{r3, r4, r7, pc}
 8007388:	0800f800 	.word	0x0800f800

0800738c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800738c:	b590      	push	{r4, r7, lr}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2bb0      	cmp	r3, #176	; 0xb0
 8007398:	d903      	bls.n	80073a2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800739a:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	e007      	b.n	80073b2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	091b      	lsrs	r3, r3, #4
 80073a6:	f003 030f 	and.w	r3, r3, #15
 80073aa:	4a11      	ldr	r2, [pc, #68]	; (80073f0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80073ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80073b2:	f7ff f9a8 	bl	8006706 <LL_RCC_GetAHB4Prescaler>
 80073b6:	4603      	mov	r3, r0
 80073b8:	091b      	lsrs	r3, r3, #4
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	4a0d      	ldr	r2, [pc, #52]	; (80073f4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80073c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4a0a      	ldr	r2, [pc, #40]	; (80073f8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80073d0:	fba2 2303 	umull	r2, r3, r2, r3
 80073d4:	0c9c      	lsrs	r4, r3, #18
 80073d6:	f7fe febf 	bl	8006158 <HAL_PWREx_GetVoltageRange>
 80073da:	4603      	mov	r3, r0
 80073dc:	4619      	mov	r1, r3
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 f80c 	bl	80073fc <RCC_SetFlashLatency>
 80073e4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd90      	pop	{r4, r7, pc}
 80073ee:	bf00      	nop
 80073f0:	0800f820 	.word	0x0800f820
 80073f4:	0800f7c0 	.word	0x0800f7c0
 80073f8:	431bde83 	.word	0x431bde83

080073fc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80073fc:	b590      	push	{r4, r7, lr}
 80073fe:	b093      	sub	sp, #76	; 0x4c
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007406:	4b37      	ldr	r3, [pc, #220]	; (80074e4 <RCC_SetFlashLatency+0xe8>)
 8007408:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800740c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800740e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007412:	4a35      	ldr	r2, [pc, #212]	; (80074e8 <RCC_SetFlashLatency+0xec>)
 8007414:	f107 031c 	add.w	r3, r7, #28
 8007418:	ca07      	ldmia	r2, {r0, r1, r2}
 800741a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800741e:	4b33      	ldr	r3, [pc, #204]	; (80074ec <RCC_SetFlashLatency+0xf0>)
 8007420:	f107 040c 	add.w	r4, r7, #12
 8007424:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007426:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800742a:	2300      	movs	r3, #0
 800742c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007434:	d11a      	bne.n	800746c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007436:	2300      	movs	r3, #0
 8007438:	643b      	str	r3, [r7, #64]	; 0x40
 800743a:	e013      	b.n	8007464 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800743c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	3348      	adds	r3, #72	; 0x48
 8007442:	443b      	add	r3, r7
 8007444:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	429a      	cmp	r2, r3
 800744c:	d807      	bhi.n	800745e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800744e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	3348      	adds	r3, #72	; 0x48
 8007454:	443b      	add	r3, r7
 8007456:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800745a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800745c:	e020      	b.n	80074a0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800745e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007460:	3301      	adds	r3, #1
 8007462:	643b      	str	r3, [r7, #64]	; 0x40
 8007464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007466:	2b03      	cmp	r3, #3
 8007468:	d9e8      	bls.n	800743c <RCC_SetFlashLatency+0x40>
 800746a:	e019      	b.n	80074a0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800746c:	2300      	movs	r3, #0
 800746e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007470:	e013      	b.n	800749a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	3348      	adds	r3, #72	; 0x48
 8007478:	443b      	add	r3, r7
 800747a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	429a      	cmp	r2, r3
 8007482:	d807      	bhi.n	8007494 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	3348      	adds	r3, #72	; 0x48
 800748a:	443b      	add	r3, r7
 800748c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007490:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007492:	e005      	b.n	80074a0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007496:	3301      	adds	r3, #1
 8007498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749c:	2b02      	cmp	r3, #2
 800749e:	d9e8      	bls.n	8007472 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80074a0:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <RCC_SetFlashLatency+0xf4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f023 0207 	bic.w	r2, r3, #7
 80074a8:	4911      	ldr	r1, [pc, #68]	; (80074f0 <RCC_SetFlashLatency+0xf4>)
 80074aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ac:	4313      	orrs	r3, r2
 80074ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074b0:	f7fd f82e 	bl	8004510 <HAL_GetTick>
 80074b4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80074b6:	e008      	b.n	80074ca <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80074b8:	f7fd f82a 	bl	8004510 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d901      	bls.n	80074ca <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e007      	b.n	80074da <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80074ca:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <RCC_SetFlashLatency+0xf4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d1ef      	bne.n	80074b8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	374c      	adds	r7, #76	; 0x4c
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd90      	pop	{r4, r7, pc}
 80074e2:	bf00      	nop
 80074e4:	0800f794 	.word	0x0800f794
 80074e8:	0800f7a4 	.word	0x0800f7a4
 80074ec:	0800f7b0 	.word	0x0800f7b0
 80074f0:	58004000 	.word	0x58004000

080074f4 <LL_RCC_LSE_IsEnabled>:
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80074f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b01      	cmp	r3, #1
 8007506:	d101      	bne.n	800750c <LL_RCC_LSE_IsEnabled+0x18>
 8007508:	2301      	movs	r3, #1
 800750a:	e000      	b.n	800750e <LL_RCC_LSE_IsEnabled+0x1a>
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <LL_RCC_LSE_IsReady>:
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800751c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b02      	cmp	r3, #2
 800752a:	d101      	bne.n	8007530 <LL_RCC_LSE_IsReady+0x18>
 800752c:	2301      	movs	r3, #1
 800752e:	e000      	b.n	8007532 <LL_RCC_LSE_IsReady+0x1a>
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <LL_RCC_SetRFWKPClockSource>:
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800754c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <LL_RCC_SetSMPSClockSource>:
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	f023 0203 	bic.w	r2, r3, #3
 800757a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4313      	orrs	r3, r2
 8007582:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <LL_RCC_SetSMPSPrescaler>:
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80075a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	624b      	str	r3, [r1, #36]	; 0x24
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <LL_RCC_SetUSARTClockSource>:
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80075c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c8:	f023 0203 	bic.w	r2, r3, #3
 80075cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <LL_RCC_SetLPUARTClockSource>:
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80075ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <LL_RCC_SetI2CClockSource>:
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800761c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	091b      	lsrs	r3, r3, #4
 8007624:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007628:	43db      	mvns	r3, r3
 800762a:	401a      	ands	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007634:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007638:	4313      	orrs	r3, r2
 800763a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <LL_RCC_SetLPTIMClockSource>:
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007656:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	0c1b      	lsrs	r3, r3, #16
 800765e:	041b      	lsls	r3, r3, #16
 8007660:	43db      	mvns	r3, r3
 8007662:	401a      	ands	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	041b      	lsls	r3, r3, #16
 8007668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800766c:	4313      	orrs	r3, r2
 800766e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <LL_RCC_SetSAIClockSource>:
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800768a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800768e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <LL_RCC_SetRNGClockSource>:
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80076b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80076be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <LL_RCC_SetCLK48ClockSource>:
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80076de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <LL_RCC_SetUSBClockSource>:
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff ffe3 	bl	80076d6 <LL_RCC_SetCLK48ClockSource>
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <LL_RCC_SetADCClockSource>:
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007728:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800772c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4313      	orrs	r3, r2
 8007734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <LL_RCC_SetRTCClockSource>:
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800774c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007758:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4313      	orrs	r3, r2
 8007760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <LL_RCC_GetRTCClockSource>:
{
 8007770:	b480      	push	{r7}
 8007772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007780:	4618      	mov	r0, r3
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <LL_RCC_ForceBackupDomainReset>:
{
 800778a:	b480      	push	{r7}
 800778c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800778e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800779a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800779e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80077a2:	bf00      	nop
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <LL_RCC_ReleaseBackupDomainReset>:
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80077b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80077c4:	bf00      	nop
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <LL_RCC_PLLSAI1_Enable>:
{
 80077ce:	b480      	push	{r7}
 80077d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80077d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077e0:	6013      	str	r3, [r2, #0]
}
 80077e2:	bf00      	nop
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <LL_RCC_PLLSAI1_Disable>:
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80077f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077fe:	6013      	str	r3, [r2, #0]
}
 8007800:	bf00      	nop
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <LL_RCC_PLLSAI1_IsReady>:
{
 800780a:	b480      	push	{r7}
 800780c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800780e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800781c:	d101      	bne.n	8007822 <LL_RCC_PLLSAI1_IsReady+0x18>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b088      	sub	sp, #32
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007836:	2300      	movs	r3, #0
 8007838:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800783a:	2300      	movs	r3, #0
 800783c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007846:	2b00      	cmp	r3, #0
 8007848:	d034      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007852:	d021      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007854:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007858:	d81b      	bhi.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800785a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800785e:	d01d      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007860:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007864:	d815      	bhi.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800786a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800786e:	d110      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800787a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800787e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007880:	e00d      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3304      	adds	r3, #4
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f947 	bl	8007b1a <RCCEx_PLLSAI1_ConfigNP>
 800788c:	4603      	mov	r3, r0
 800788e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007890:	e005      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	77fb      	strb	r3, [r7, #31]
        break;
 8007896:	e002      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007898:	bf00      	nop
 800789a:	e000      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800789c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789e:	7ffb      	ldrb	r3, [r7, #31]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff fee8 	bl	800767e <LL_RCC_SetSAIClockSource>
 80078ae:	e001      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b0:	7ffb      	ldrb	r3, [r7, #31]
 80078b2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d046      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80078c0:	f7ff ff56 	bl	8007770 <LL_RCC_GetRTCClockSource>
 80078c4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d03c      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80078d0:	f7fe fbea 	bl	80060a8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff ff30 	bl	8007744 <LL_RCC_SetRTCClockSource>
 80078e4:	e02e      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80078e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80078f0:	f7ff ff4b 	bl	800778a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80078f4:	f7ff ff5a 	bl	80077ac <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007910:	f7ff fdf0 	bl	80074f4 <LL_RCC_LSE_IsEnabled>
 8007914:	4603      	mov	r3, r0
 8007916:	2b01      	cmp	r3, #1
 8007918:	d114      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800791a:	f7fc fdf9 	bl	8004510 <HAL_GetTick>
 800791e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007920:	e00b      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007922:	f7fc fdf5 	bl	8004510 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007930:	4293      	cmp	r3, r2
 8007932:	d902      	bls.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	77fb      	strb	r3, [r7, #31]
              break;
 8007938:	e004      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800793a:	f7ff fded 	bl	8007518 <LL_RCC_LSE_IsReady>
 800793e:	4603      	mov	r3, r0
 8007940:	2b01      	cmp	r3, #1
 8007942:	d1ee      	bne.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007944:	7ffb      	ldrb	r3, [r7, #31]
 8007946:	77bb      	strb	r3, [r7, #30]
 8007948:	e001      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794a:	7ffb      	ldrb	r3, [r7, #31]
 800794c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff fe2a 	bl	80075b8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d004      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fe35 	bl	80075e4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff fe5d 	bl	800764a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fe52 	bl	800764a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0304 	and.w	r3, r3, #4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d004      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff fe2a 	bl	8007610 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d004      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff fe1f 	bl	8007610 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d022      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff fe8d 	bl	8007702 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079f0:	d107      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80079f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a00:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a0a:	d10b      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 f8dd 	bl	8007bd0 <RCCEx_PLLSAI1_ConfigNQ>
 8007a16:	4603      	mov	r3, r0
 8007a18:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007a1a:	7ffb      	ldrb	r3, [r7, #31]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007a20:	7ffb      	ldrb	r3, [r7, #31]
 8007a22:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d02b      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a38:	d008      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a42:	d003      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d105      	bne.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff fe2a 	bl	80076aa <LL_RCC_SetRNGClockSource>
 8007a56:	e00a      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	2000      	movs	r0, #0
 8007a64:	f7ff fe21 	bl	80076aa <LL_RCC_SetRNGClockSource>
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f7ff fe34 	bl	80076d6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007a76:	d107      	bne.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d022      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff fe3d 	bl	8007718 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa6:	d107      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ab6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ac0:	d10b      	bne.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 f8dd 	bl	8007c86 <RCCEx_PLLSAI1_ConfigNR>
 8007acc:	4603      	mov	r3, r0
 8007ace:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007ad0:	7ffb      	ldrb	r3, [r7, #31]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007ad6:	7ffb      	ldrb	r3, [r7, #31]
 8007ad8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff fd26 	bl	800753c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d009      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff fd45 	bl	8007590 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fd2c 	bl	8007568 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007b10:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3720      	adds	r7, #32
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007b26:	f7ff fe61 	bl	80077ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b2a:	f7fc fcf1 	bl	8004510 <HAL_GetTick>
 8007b2e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b30:	e009      	b.n	8007b46 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b32:	f7fc fced 	bl	8004510 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d902      	bls.n	8007b46 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	73fb      	strb	r3, [r7, #15]
      break;
 8007b44:	e004      	b.n	8007b50 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b46:	f7ff fe60 	bl	800780a <LL_RCC_PLLSAI1_IsReady>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1f0      	bne.n	8007b32 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d137      	bne.n	8007bc6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b80:	4313      	orrs	r3, r2
 8007b82:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007b84:	f7ff fe23 	bl	80077ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b88:	f7fc fcc2 	bl	8004510 <HAL_GetTick>
 8007b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b8e:	e009      	b.n	8007ba4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b90:	f7fc fcbe 	bl	8004510 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d902      	bls.n	8007ba4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8007ba2:	e004      	b.n	8007bae <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ba4:	f7ff fe31 	bl	800780a <LL_RCC_PLLSAI1_IsReady>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d1f0      	bne.n	8007b90 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d108      	bne.n	8007bc6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bb8:	691a      	ldr	r2, [r3, #16]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007bdc:	f7ff fe06 	bl	80077ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007be0:	f7fc fc96 	bl	8004510 <HAL_GetTick>
 8007be4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007be6:	e009      	b.n	8007bfc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007be8:	f7fc fc92 	bl	8004510 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d902      	bls.n	8007bfc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bfa:	e004      	b.n	8007c06 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007bfc:	f7ff fe05 	bl	800780a <LL_RCC_PLLSAI1_IsReady>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1f0      	bne.n	8007be8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d137      	bne.n	8007c7c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c20:	4313      	orrs	r3, r2
 8007c22:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c36:	4313      	orrs	r3, r2
 8007c38:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007c3a:	f7ff fdc8 	bl	80077ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3e:	f7fc fc67 	bl	8004510 <HAL_GetTick>
 8007c42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007c44:	e009      	b.n	8007c5a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c46:	f7fc fc63 	bl	8004510 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d902      	bls.n	8007c5a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	73fb      	strb	r3, [r7, #15]
        break;
 8007c58:	e004      	b.n	8007c64 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007c5a:	f7ff fdd6 	bl	800780a <LL_RCC_PLLSAI1_IsReady>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d1f0      	bne.n	8007c46 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d108      	bne.n	8007c7c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c6e:	691a      	ldr	r2, [r3, #16]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007c92:	f7ff fdab 	bl	80077ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c96:	f7fc fc3b 	bl	8004510 <HAL_GetTick>
 8007c9a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007c9c:	e009      	b.n	8007cb2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c9e:	f7fc fc37 	bl	8004510 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d902      	bls.n	8007cb2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb0:	e004      	b.n	8007cbc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007cb2:	f7ff fdaa 	bl	800780a <LL_RCC_PLLSAI1_IsReady>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1f0      	bne.n	8007c9e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d137      	bne.n	8007d32 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cec:	4313      	orrs	r3, r2
 8007cee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007cf0:	f7ff fd6d 	bl	80077ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf4:	f7fc fc0c 	bl	8004510 <HAL_GetTick>
 8007cf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007cfa:	e009      	b.n	8007d10 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cfc:	f7fc fc08 	bl	8004510 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d902      	bls.n	8007d10 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	73fb      	strb	r3, [r7, #15]
        break;
 8007d0e:	e004      	b.n	8007d1a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007d10:	f7ff fd7b 	bl	800780a <LL_RCC_PLLSAI1_IsReady>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d1f0      	bne.n	8007cfc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d108      	bne.n	8007d32 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d24:	691a      	ldr	r2, [r3, #16]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e09f      	b.n	8007e8e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d106      	bne.n	8007d68 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7fc f8ce 	bl	8003f04 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007d70:	4b49      	ldr	r3, [pc, #292]	; (8007e98 <HAL_RTC_Init+0x15c>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b10      	cmp	r3, #16
 8007d7a:	d07e      	beq.n	8007e7a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	22ca      	movs	r2, #202	; 0xca
 8007d82:	625a      	str	r2, [r3, #36]	; 0x24
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2253      	movs	r2, #83	; 0x53
 8007d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f8ab 	bl	8007ee8 <RTC_EnterInitMode>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	22ff      	movs	r2, #255	; 0xff
 8007d9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2204      	movs	r2, #4
 8007da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	73fb      	strb	r3, [r7, #15]
 8007dac:	e067      	b.n	8007e7e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6812      	ldr	r2, [r2, #0]
 8007db8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6899      	ldr	r1, [r3, #8]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	68d2      	ldr	r2, [r2, #12]
 8007de8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6919      	ldr	r1, [r3, #16]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	041a      	lsls	r2, r3, #16
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e0c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 0203 	bic.w	r2, r2, #3
 8007e1c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	69da      	ldr	r2, [r3, #28]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 0320 	and.w	r3, r3, #32
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d113      	bne.n	8007e6c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f829 	bl	8007e9c <HAL_RTC_WaitForSynchro>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00d      	beq.n	8007e6c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	22ff      	movs	r2, #255	; 0xff
 8007e56:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e010      	b.n	8007e8e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	22ff      	movs	r2, #255	; 0xff
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
 8007e78:	e001      	b.n	8007e7e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d103      	bne.n	8007e8c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	40002800 	.word	0x40002800

08007e9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007eb2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007eb4:	f7fc fb2c 	bl	8004510 <HAL_GetTick>
 8007eb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007eba:	e009      	b.n	8007ed0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ebc:	f7fc fb28 	bl	8004510 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eca:	d901      	bls.n	8007ed0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e007      	b.n	8007ee0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0ee      	beq.n	8007ebc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d119      	bne.n	8007f32 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f04f 32ff 	mov.w	r2, #4294967295
 8007f06:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007f08:	f7fc fb02 	bl	8004510 <HAL_GetTick>
 8007f0c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007f0e:	e009      	b.n	8007f24 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007f10:	f7fc fafe 	bl	8004510 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f1e:	d901      	bls.n	8007f24 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e007      	b.n	8007f34 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0ee      	beq.n	8007f10 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e0a8      	b.n	80080a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	22ca      	movs	r2, #202	; 0xca
 8007f6c:	625a      	str	r2, [r3, #36]	; 0x24
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2253      	movs	r2, #83	; 0x53
 8007f74:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d020      	beq.n	8007fc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007f84:	f7fc fac4 	bl	8004510 <HAL_GetTick>
 8007f88:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007f8a:	e015      	b.n	8007fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f8c:	f7fc fac0 	bl	8004510 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f9a:	d90d      	bls.n	8007fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	22ff      	movs	r2, #255	; 0xff
 8007fa2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2203      	movs	r2, #3
 8007fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e077      	b.n	80080a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1e2      	bne.n	8007f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fd4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007fe6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007fe8:	f7fc fa92 	bl	8004510 <HAL_GetTick>
 8007fec:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007fee:	e015      	b.n	800801c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ff0:	f7fc fa8e 	bl	8004510 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ffe:	d90d      	bls.n	800801c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	22ff      	movs	r2, #255	; 0xff
 8008006:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2203      	movs	r2, #3
 800800c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e045      	b.n	80080a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0e2      	beq.n	8007ff0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0207 	bic.w	r2, r2, #7
 8008040:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6899      	ldr	r1, [r3, #8]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	430a      	orrs	r2, r1
 8008050:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008052:	4b17      	ldr	r3, [pc, #92]	; (80080b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008058:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800805a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800805e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008062:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a12      	ldr	r2, [pc, #72]	; (80080b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800806c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800807c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800808c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	22ff      	movs	r2, #255	; 0xff
 8008094:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	58000800 	.word	0x58000800

080080b4 <LL_RCC_GetUSARTClockSource>:
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80080bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4013      	ands	r3, r2
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <LL_RCC_GetLPUARTClockSource>:
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80080dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4013      	ands	r3, r2
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e042      	b.n	800818c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800810c:	2b00      	cmp	r3, #0
 800810e:	d106      	bne.n	800811e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7fb fe01 	bl	8003d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2224      	movs	r2, #36	; 0x24
 8008122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0201 	bic.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fcd0 	bl	8008adc <UART_SetConfig>
 800813c:	4603      	mov	r3, r0
 800813e:	2b01      	cmp	r3, #1
 8008140:	d101      	bne.n	8008146 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e022      	b.n	800818c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 feec 	bl	8008f2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f042 0201 	orr.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 ff73 	bl	8009070 <UART_CheckIdleState>
 800818a:	4603      	mov	r3, r0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008194:	b480      	push	{r7}
 8008196:	b091      	sub	sp, #68	; 0x44
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d178      	bne.n	800829e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <HAL_UART_Transmit_IT+0x24>
 80081b2:	88fb      	ldrh	r3, [r7, #6]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e071      	b.n	80082a0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	88fa      	ldrh	r2, [r7, #6]
 80081c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	88fa      	ldrh	r2, [r7, #6]
 80081ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2221      	movs	r2, #33	; 0x21
 80081e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f0:	d12a      	bne.n	8008248 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081fa:	d107      	bne.n	800820c <HAL_UART_Transmit_IT+0x78>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d103      	bne.n	800820c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4a29      	ldr	r2, [pc, #164]	; (80082ac <HAL_UART_Transmit_IT+0x118>)
 8008208:	679a      	str	r2, [r3, #120]	; 0x78
 800820a:	e002      	b.n	8008212 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4a28      	ldr	r2, [pc, #160]	; (80082b0 <HAL_UART_Transmit_IT+0x11c>)
 8008210:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008228:	63bb      	str	r3, [r7, #56]	; 0x38
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3308      	adds	r3, #8
 8008230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008232:	637a      	str	r2, [r7, #52]	; 0x34
 8008234:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e5      	bne.n	8008212 <HAL_UART_Transmit_IT+0x7e>
 8008246:	e028      	b.n	800829a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008250:	d107      	bne.n	8008262 <HAL_UART_Transmit_IT+0xce>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d103      	bne.n	8008262 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4a15      	ldr	r2, [pc, #84]	; (80082b4 <HAL_UART_Transmit_IT+0x120>)
 800825e:	679a      	str	r2, [r3, #120]	; 0x78
 8008260:	e002      	b.n	8008268 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4a14      	ldr	r2, [pc, #80]	; (80082b8 <HAL_UART_Transmit_IT+0x124>)
 8008266:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	613b      	str	r3, [r7, #16]
   return(result);
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008286:	623b      	str	r3, [r7, #32]
 8008288:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	69f9      	ldr	r1, [r7, #28]
 800828c:	6a3a      	ldr	r2, [r7, #32]
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	61bb      	str	r3, [r7, #24]
   return(result);
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e6      	bne.n	8008268 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	e000      	b.n	80082a0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800829e:	2302      	movs	r3, #2
  }
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3744      	adds	r7, #68	; 0x44
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	080099eb 	.word	0x080099eb
 80082b0:	0800990b 	.word	0x0800990b
 80082b4:	08009849 	.word	0x08009849
 80082b8:	08009791 	.word	0x08009791

080082bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08a      	sub	sp, #40	; 0x28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	4613      	mov	r3, r2
 80082c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	d137      	bne.n	8008344 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <HAL_UART_Receive_IT+0x24>
 80082da:	88fb      	ldrh	r3, [r7, #6]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e030      	b.n	8008346 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a18      	ldr	r2, [pc, #96]	; (8008350 <HAL_UART_Receive_IT+0x94>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d01f      	beq.n	8008334 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d018      	beq.n	8008334 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	613b      	str	r3, [r7, #16]
   return(result);
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	461a      	mov	r2, r3
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	623b      	str	r3, [r7, #32]
 8008322:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008324:	69f9      	ldr	r1, [r7, #28]
 8008326:	6a3a      	ldr	r2, [r7, #32]
 8008328:	e841 2300 	strex	r3, r2, [r1]
 800832c:	61bb      	str	r3, [r7, #24]
   return(result);
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1e6      	bne.n	8008302 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008334:	88fb      	ldrh	r3, [r7, #6]
 8008336:	461a      	mov	r2, r3
 8008338:	68b9      	ldr	r1, [r7, #8]
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 ffae 	bl	800929c <UART_Start_Receive_IT>
 8008340:	4603      	mov	r3, r0
 8008342:	e000      	b.n	8008346 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008344:	2302      	movs	r3, #2
  }
}
 8008346:	4618      	mov	r0, r3
 8008348:	3728      	adds	r7, #40	; 0x28
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40008000 	.word	0x40008000

08008354 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08a      	sub	sp, #40	; 0x28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008368:	2b20      	cmp	r3, #32
 800836a:	d167      	bne.n	800843c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <HAL_UART_Transmit_DMA+0x24>
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e060      	b.n	800843e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	88fa      	ldrh	r2, [r7, #6]
 8008386:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	88fa      	ldrh	r2, [r7, #6]
 800838e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2221      	movs	r2, #33	; 0x21
 800839e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d028      	beq.n	80083fc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ae:	4a26      	ldr	r2, [pc, #152]	; (8008448 <HAL_UART_Transmit_DMA+0xf4>)
 80083b0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b6:	4a25      	ldr	r2, [pc, #148]	; (800844c <HAL_UART_Transmit_DMA+0xf8>)
 80083b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083be:	4a24      	ldr	r2, [pc, #144]	; (8008450 <HAL_UART_Transmit_DMA+0xfc>)
 80083c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083c6:	2200      	movs	r2, #0
 80083c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d2:	4619      	mov	r1, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3328      	adds	r3, #40	; 0x28
 80083da:	461a      	mov	r2, r3
 80083dc:	88fb      	ldrh	r3, [r7, #6]
 80083de:	f7fc fb11 	bl	8004a04 <HAL_DMA_Start_IT>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d009      	beq.n	80083fc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2210      	movs	r2, #16
 80083ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e020      	b.n	800843e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2240      	movs	r2, #64	; 0x40
 8008402:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3308      	adds	r3, #8
 800840a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	613b      	str	r3, [r7, #16]
   return(result);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800841a:	627b      	str	r3, [r7, #36]	; 0x24
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008424:	623a      	str	r2, [r7, #32]
 8008426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	69f9      	ldr	r1, [r7, #28]
 800842a:	6a3a      	ldr	r2, [r7, #32]
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	61bb      	str	r3, [r7, #24]
   return(result);
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e5      	bne.n	8008404 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	e000      	b.n	800843e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800843c:	2302      	movs	r3, #2
  }
}
 800843e:	4618      	mov	r0, r3
 8008440:	3728      	adds	r7, #40	; 0x28
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	0800962f 	.word	0x0800962f
 800844c:	080096c9 	.word	0x080096c9
 8008450:	080096e5 	.word	0x080096e5

08008454 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b0ba      	sub	sp, #232	; 0xe8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800847a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800847e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008482:	4013      	ands	r3, r2
 8008484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d11b      	bne.n	80084c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d015      	beq.n	80084c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800849c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d105      	bne.n	80084b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d009      	beq.n	80084c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 82e3 	beq.w	8008a84 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
      }
      return;
 80084c6:	e2dd      	b.n	8008a84 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8123 	beq.w	8008718 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80084d6:	4b8d      	ldr	r3, [pc, #564]	; (800870c <HAL_UART_IRQHandler+0x2b8>)
 80084d8:	4013      	ands	r3, r2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d106      	bne.n	80084ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80084e2:	4b8b      	ldr	r3, [pc, #556]	; (8008710 <HAL_UART_IRQHandler+0x2bc>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 8116 	beq.w	8008718 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d011      	beq.n	800851c <HAL_UART_IRQHandler+0xc8>
 80084f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00b      	beq.n	800851c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2201      	movs	r2, #1
 800850a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008512:	f043 0201 	orr.w	r2, r3, #1
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800851c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d011      	beq.n	800854c <HAL_UART_IRQHandler+0xf8>
 8008528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2202      	movs	r2, #2
 800853a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008542:	f043 0204 	orr.w	r2, r3, #4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800854c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	d011      	beq.n	800857c <HAL_UART_IRQHandler+0x128>
 8008558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2204      	movs	r2, #4
 800856a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008572:	f043 0202 	orr.w	r2, r3, #2
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800857c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d017      	beq.n	80085b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800858c:	f003 0320 	and.w	r3, r3, #32
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008594:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008598:	4b5c      	ldr	r3, [pc, #368]	; (800870c <HAL_UART_IRQHandler+0x2b8>)
 800859a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2208      	movs	r2, #8
 80085a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ae:	f043 0208 	orr.w	r2, r3, #8
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d012      	beq.n	80085ea <HAL_UART_IRQHandler+0x196>
 80085c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00c      	beq.n	80085ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e0:	f043 0220 	orr.w	r2, r3, #32
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 8249 	beq.w	8008a88 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d013      	beq.n	800862a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008606:	f003 0320 	and.w	r3, r3, #32
 800860a:	2b00      	cmp	r3, #0
 800860c:	d105      	bne.n	800861a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800860e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008630:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863e:	2b40      	cmp	r3, #64	; 0x40
 8008640:	d005      	beq.n	800864e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008646:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800864a:	2b00      	cmp	r3, #0
 800864c:	d054      	beq.n	80086f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 ff87 	bl	8009562 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865e:	2b40      	cmp	r3, #64	; 0x40
 8008660:	d146      	bne.n	80086f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3308      	adds	r3, #8
 8008668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800867c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3308      	adds	r3, #8
 800868a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800868e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800869a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1d9      	bne.n	8008662 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d017      	beq.n	80086e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086be:	4a15      	ldr	r2, [pc, #84]	; (8008714 <HAL_UART_IRQHandler+0x2c0>)
 80086c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fc fa75 	bl	8004bb8 <HAL_DMA_Abort_IT>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d019      	beq.n	8008708 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80086e2:	4610      	mov	r0, r2
 80086e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e6:	e00f      	b.n	8008708 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f9e1 	bl	8008ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ee:	e00b      	b.n	8008708 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f9dd 	bl	8008ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f6:	e007      	b.n	8008708 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f9d9 	bl	8008ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008706:	e1bf      	b.n	8008a88 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008708:	bf00      	nop
    return;
 800870a:	e1bd      	b.n	8008a88 <HAL_UART_IRQHandler+0x634>
 800870c:	10000001 	.word	0x10000001
 8008710:	04000120 	.word	0x04000120
 8008714:	08009765 	.word	0x08009765

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800871c:	2b01      	cmp	r3, #1
 800871e:	f040 8153 	bne.w	80089c8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008726:	f003 0310 	and.w	r3, r3, #16
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 814c 	beq.w	80089c8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 8145 	beq.w	80089c8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2210      	movs	r2, #16
 8008744:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008750:	2b40      	cmp	r3, #64	; 0x40
 8008752:	f040 80bb 	bne.w	80088cc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008764:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 818f 	beq.w	8008a8c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008774:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008778:	429a      	cmp	r2, r3
 800877a:	f080 8187 	bcs.w	8008a8c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008784:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	f040 8087 	bne.w	80088aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80087b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1da      	bne.n	800879c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3308      	adds	r3, #8
 80087ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087f0:	e853 3f00 	ldrex	r3, [r3]
 80087f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087f8:	f023 0301 	bic.w	r3, r3, #1
 80087fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3308      	adds	r3, #8
 8008806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800880a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800880e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008810:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008812:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800881c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e1      	bne.n	80087e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3308      	adds	r3, #8
 8008828:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800882c:	e853 3f00 	ldrex	r3, [r3]
 8008830:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3308      	adds	r3, #8
 8008842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008846:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008848:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800884c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e3      	bne.n	8008822 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008870:	e853 3f00 	ldrex	r3, [r3]
 8008874:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008878:	f023 0310 	bic.w	r3, r3, #16
 800887c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800888a:	65bb      	str	r3, [r7, #88]	; 0x58
 800888c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e4      	bne.n	8008868 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fc f928 	bl	8004afa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2202      	movs	r2, #2
 80088ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088bc:	b29b      	uxth	r3, r3
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f8fd 	bl	8008ac4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088ca:	e0df      	b.n	8008a8c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088d8:	b29b      	uxth	r3, r3
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 80d1 	beq.w	8008a90 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80088ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 80cc 	beq.w	8008a90 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800890c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800891a:	647b      	str	r3, [r7, #68]	; 0x44
 800891c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e4      	bne.n	80088f8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3308      	adds	r3, #8
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	623b      	str	r3, [r7, #32]
   return(result);
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008944:	f023 0301 	bic.w	r3, r3, #1
 8008948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3308      	adds	r3, #8
 8008952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008956:	633a      	str	r2, [r7, #48]	; 0x30
 8008958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800895c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e1      	bne.n	800892e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2220      	movs	r2, #32
 800896e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	60fb      	str	r3, [r7, #12]
   return(result);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f023 0310 	bic.w	r3, r3, #16
 8008992:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80089a0:	61fb      	str	r3, [r7, #28]
 80089a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	69b9      	ldr	r1, [r7, #24]
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	617b      	str	r3, [r7, #20]
   return(result);
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e4      	bne.n	800897e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2202      	movs	r2, #2
 80089b8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089be:	4619      	mov	r1, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f87f 	bl	8008ac4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089c6:	e063      	b.n	8008a90 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00e      	beq.n	80089f2 <HAL_UART_IRQHandler+0x59e>
 80089d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d008      	beq.n	80089f2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f001 fdba 	bl	800a564 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089f0:	e051      	b.n	8008a96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d014      	beq.n	8008a28 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80089fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d105      	bne.n	8008a16 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d008      	beq.n	8008a28 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d03a      	beq.n	8008a94 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	4798      	blx	r3
    }
    return;
 8008a26:	e035      	b.n	8008a94 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d009      	beq.n	8008a48 <HAL_UART_IRQHandler+0x5f4>
 8008a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 f847 	bl	8009ad4 <UART_EndTransmit_IT>
    return;
 8008a46:	e026      	b.n	8008a96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <HAL_UART_IRQHandler+0x614>
 8008a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 fd93 	bl	800a58c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a66:	e016      	b.n	8008a96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d010      	beq.n	8008a96 <HAL_UART_IRQHandler+0x642>
 8008a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	da0c      	bge.n	8008a96 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 fd7b 	bl	800a578 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a82:	e008      	b.n	8008a96 <HAL_UART_IRQHandler+0x642>
      return;
 8008a84:	bf00      	nop
 8008a86:	e006      	b.n	8008a96 <HAL_UART_IRQHandler+0x642>
    return;
 8008a88:	bf00      	nop
 8008a8a:	e004      	b.n	8008a96 <HAL_UART_IRQHandler+0x642>
      return;
 8008a8c:	bf00      	nop
 8008a8e:	e002      	b.n	8008a96 <HAL_UART_IRQHandler+0x642>
      return;
 8008a90:	bf00      	nop
 8008a92:	e000      	b.n	8008a96 <HAL_UART_IRQHandler+0x642>
    return;
 8008a94:	bf00      	nop
  }
}
 8008a96:	37e8      	adds	r7, #232	; 0xe8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ae0:	b08c      	sub	sp, #48	; 0x30
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	431a      	orrs	r2, r3
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	4baf      	ldr	r3, [pc, #700]	; (8008dc8 <UART_SetConfig+0x2ec>)
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	6812      	ldr	r2, [r2, #0]
 8008b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b14:	430b      	orrs	r3, r1
 8008b16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4aa4      	ldr	r2, [pc, #656]	; (8008dcc <UART_SetConfig+0x2f0>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d004      	beq.n	8008b48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b44:	4313      	orrs	r3, r2
 8008b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008b52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	6812      	ldr	r2, [r2, #0]
 8008b5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b5c:	430b      	orrs	r3, r1
 8008b5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b66:	f023 010f 	bic.w	r1, r3, #15
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a95      	ldr	r2, [pc, #596]	; (8008dd0 <UART_SetConfig+0x2f4>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d125      	bne.n	8008bcc <UART_SetConfig+0xf0>
 8008b80:	2003      	movs	r0, #3
 8008b82:	f7ff fa97 	bl	80080b4 <LL_RCC_GetUSARTClockSource>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d81b      	bhi.n	8008bc4 <UART_SetConfig+0xe8>
 8008b8c:	a201      	add	r2, pc, #4	; (adr r2, 8008b94 <UART_SetConfig+0xb8>)
 8008b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b92:	bf00      	nop
 8008b94:	08008ba5 	.word	0x08008ba5
 8008b98:	08008bb5 	.word	0x08008bb5
 8008b9c:	08008bad 	.word	0x08008bad
 8008ba0:	08008bbd 	.word	0x08008bbd
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008baa:	e042      	b.n	8008c32 <UART_SetConfig+0x156>
 8008bac:	2302      	movs	r3, #2
 8008bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bb2:	e03e      	b.n	8008c32 <UART_SetConfig+0x156>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bba:	e03a      	b.n	8008c32 <UART_SetConfig+0x156>
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bc2:	e036      	b.n	8008c32 <UART_SetConfig+0x156>
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bca:	e032      	b.n	8008c32 <UART_SetConfig+0x156>
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a7e      	ldr	r2, [pc, #504]	; (8008dcc <UART_SetConfig+0x2f0>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d12a      	bne.n	8008c2c <UART_SetConfig+0x150>
 8008bd6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008bda:	f7ff fa7b 	bl	80080d4 <LL_RCC_GetLPUARTClockSource>
 8008bde:	4603      	mov	r3, r0
 8008be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008be4:	d01a      	beq.n	8008c1c <UART_SetConfig+0x140>
 8008be6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bea:	d81b      	bhi.n	8008c24 <UART_SetConfig+0x148>
 8008bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bf0:	d00c      	beq.n	8008c0c <UART_SetConfig+0x130>
 8008bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bf6:	d815      	bhi.n	8008c24 <UART_SetConfig+0x148>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <UART_SetConfig+0x128>
 8008bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c00:	d008      	beq.n	8008c14 <UART_SetConfig+0x138>
 8008c02:	e00f      	b.n	8008c24 <UART_SetConfig+0x148>
 8008c04:	2300      	movs	r3, #0
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c0a:	e012      	b.n	8008c32 <UART_SetConfig+0x156>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c12:	e00e      	b.n	8008c32 <UART_SetConfig+0x156>
 8008c14:	2304      	movs	r3, #4
 8008c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c1a:	e00a      	b.n	8008c32 <UART_SetConfig+0x156>
 8008c1c:	2308      	movs	r3, #8
 8008c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c22:	e006      	b.n	8008c32 <UART_SetConfig+0x156>
 8008c24:	2310      	movs	r3, #16
 8008c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c2a:	e002      	b.n	8008c32 <UART_SetConfig+0x156>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a65      	ldr	r2, [pc, #404]	; (8008dcc <UART_SetConfig+0x2f0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	f040 8097 	bne.w	8008d6c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c42:	2b08      	cmp	r3, #8
 8008c44:	d823      	bhi.n	8008c8e <UART_SetConfig+0x1b2>
 8008c46:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <UART_SetConfig+0x170>)
 8008c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008c8f 	.word	0x08008c8f
 8008c54:	08008c79 	.word	0x08008c79
 8008c58:	08008c8f 	.word	0x08008c8f
 8008c5c:	08008c7f 	.word	0x08008c7f
 8008c60:	08008c8f 	.word	0x08008c8f
 8008c64:	08008c8f 	.word	0x08008c8f
 8008c68:	08008c8f 	.word	0x08008c8f
 8008c6c:	08008c87 	.word	0x08008c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c70:	f7fe fb60 	bl	8007334 <HAL_RCC_GetPCLK1Freq>
 8008c74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c76:	e010      	b.n	8008c9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c78:	4b56      	ldr	r3, [pc, #344]	; (8008dd4 <UART_SetConfig+0x2f8>)
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c7c:	e00d      	b.n	8008c9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c7e:	f7fe fad9 	bl	8007234 <HAL_RCC_GetSysClockFreq>
 8008c82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c84:	e009      	b.n	8008c9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c86:	f248 0306 	movw	r3, #32774	; 0x8006
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c8c:	e005      	b.n	8008c9a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 812b 	beq.w	8008ef8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	4a4c      	ldr	r2, [pc, #304]	; (8008dd8 <UART_SetConfig+0x2fc>)
 8008ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cac:	461a      	mov	r2, r3
 8008cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	4413      	add	r3, r2
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d305      	bcc.n	8008cd2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d903      	bls.n	8008cda <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008cd8:	e10e      	b.n	8008ef8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	2200      	movs	r2, #0
 8008cde:	60bb      	str	r3, [r7, #8]
 8008ce0:	60fa      	str	r2, [r7, #12]
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce6:	4a3c      	ldr	r2, [pc, #240]	; (8008dd8 <UART_SetConfig+0x2fc>)
 8008ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	2200      	movs	r2, #0
 8008cf0:	603b      	str	r3, [r7, #0]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008cfc:	f7f7 faa8 	bl	8000250 <__aeabi_uldivmod>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4610      	mov	r0, r2
 8008d06:	4619      	mov	r1, r3
 8008d08:	f04f 0200 	mov.w	r2, #0
 8008d0c:	f04f 0300 	mov.w	r3, #0
 8008d10:	020b      	lsls	r3, r1, #8
 8008d12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d16:	0202      	lsls	r2, r0, #8
 8008d18:	6979      	ldr	r1, [r7, #20]
 8008d1a:	6849      	ldr	r1, [r1, #4]
 8008d1c:	0849      	lsrs	r1, r1, #1
 8008d1e:	2000      	movs	r0, #0
 8008d20:	460c      	mov	r4, r1
 8008d22:	4605      	mov	r5, r0
 8008d24:	eb12 0804 	adds.w	r8, r2, r4
 8008d28:	eb43 0905 	adc.w	r9, r3, r5
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	469a      	mov	sl, r3
 8008d34:	4693      	mov	fp, r2
 8008d36:	4652      	mov	r2, sl
 8008d38:	465b      	mov	r3, fp
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	4649      	mov	r1, r9
 8008d3e:	f7f7 fa87 	bl	8000250 <__aeabi_uldivmod>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4613      	mov	r3, r2
 8008d48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d50:	d308      	bcc.n	8008d64 <UART_SetConfig+0x288>
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d58:	d204      	bcs.n	8008d64 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6a3a      	ldr	r2, [r7, #32]
 8008d60:	60da      	str	r2, [r3, #12]
 8008d62:	e0c9      	b.n	8008ef8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d6a:	e0c5      	b.n	8008ef8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d74:	d16d      	bne.n	8008e52 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008d76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	2b07      	cmp	r3, #7
 8008d7e:	d82d      	bhi.n	8008ddc <UART_SetConfig+0x300>
 8008d80:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <UART_SetConfig+0x2ac>)
 8008d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d86:	bf00      	nop
 8008d88:	08008da9 	.word	0x08008da9
 8008d8c:	08008db1 	.word	0x08008db1
 8008d90:	08008ddd 	.word	0x08008ddd
 8008d94:	08008db7 	.word	0x08008db7
 8008d98:	08008ddd 	.word	0x08008ddd
 8008d9c:	08008ddd 	.word	0x08008ddd
 8008da0:	08008ddd 	.word	0x08008ddd
 8008da4:	08008dbf 	.word	0x08008dbf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008da8:	f7fe fada 	bl	8007360 <HAL_RCC_GetPCLK2Freq>
 8008dac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dae:	e01b      	b.n	8008de8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008db0:	4b08      	ldr	r3, [pc, #32]	; (8008dd4 <UART_SetConfig+0x2f8>)
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008db4:	e018      	b.n	8008de8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008db6:	f7fe fa3d 	bl	8007234 <HAL_RCC_GetSysClockFreq>
 8008dba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dbc:	e014      	b.n	8008de8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dbe:	f248 0306 	movw	r3, #32774	; 0x8006
 8008dc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008dc4:	e010      	b.n	8008de8 <UART_SetConfig+0x30c>
 8008dc6:	bf00      	nop
 8008dc8:	cfff69f3 	.word	0xcfff69f3
 8008dcc:	40008000 	.word	0x40008000
 8008dd0:	40013800 	.word	0x40013800
 8008dd4:	00f42400 	.word	0x00f42400
 8008dd8:	0800f860 	.word	0x0800f860
      default:
        pclk = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 8084 	beq.w	8008ef8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	4a4b      	ldr	r2, [pc, #300]	; (8008f24 <UART_SetConfig+0x448>)
 8008df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e02:	005a      	lsls	r2, r3, #1
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	085b      	lsrs	r3, r3, #1
 8008e0a:	441a      	add	r2, r3
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e14:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	2b0f      	cmp	r3, #15
 8008e1a:	d916      	bls.n	8008e4a <UART_SetConfig+0x36e>
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e22:	d212      	bcs.n	8008e4a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	f023 030f 	bic.w	r3, r3, #15
 8008e2c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	085b      	lsrs	r3, r3, #1
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f003 0307 	and.w	r3, r3, #7
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	8bfb      	ldrh	r3, [r7, #30]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	8bfa      	ldrh	r2, [r7, #30]
 8008e46:	60da      	str	r2, [r3, #12]
 8008e48:	e056      	b.n	8008ef8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e50:	e052      	b.n	8008ef8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e56:	3b01      	subs	r3, #1
 8008e58:	2b07      	cmp	r3, #7
 8008e5a:	d822      	bhi.n	8008ea2 <UART_SetConfig+0x3c6>
 8008e5c:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <UART_SetConfig+0x388>)
 8008e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e62:	bf00      	nop
 8008e64:	08008e85 	.word	0x08008e85
 8008e68:	08008e8d 	.word	0x08008e8d
 8008e6c:	08008ea3 	.word	0x08008ea3
 8008e70:	08008e93 	.word	0x08008e93
 8008e74:	08008ea3 	.word	0x08008ea3
 8008e78:	08008ea3 	.word	0x08008ea3
 8008e7c:	08008ea3 	.word	0x08008ea3
 8008e80:	08008e9b 	.word	0x08008e9b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e84:	f7fe fa6c 	bl	8007360 <HAL_RCC_GetPCLK2Freq>
 8008e88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e8a:	e010      	b.n	8008eae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e8c:	4b26      	ldr	r3, [pc, #152]	; (8008f28 <UART_SetConfig+0x44c>)
 8008e8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e90:	e00d      	b.n	8008eae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e92:	f7fe f9cf 	bl	8007234 <HAL_RCC_GetSysClockFreq>
 8008e96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e98:	e009      	b.n	8008eae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e9a:	f248 0306 	movw	r3, #32774	; 0x8006
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ea0:	e005      	b.n	8008eae <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008eac:	bf00      	nop
    }

    if (pclk != 0U)
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d021      	beq.n	8008ef8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	4a1a      	ldr	r2, [pc, #104]	; (8008f24 <UART_SetConfig+0x448>)
 8008eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	085b      	lsrs	r3, r3, #1
 8008ecc:	441a      	add	r2, r3
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	2b0f      	cmp	r3, #15
 8008edc:	d909      	bls.n	8008ef2 <UART_SetConfig+0x416>
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ee4:	d205      	bcs.n	8008ef2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60da      	str	r2, [r3, #12]
 8008ef0:	e002      	b.n	8008ef8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	2200      	movs	r2, #0
 8008f12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008f14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3730      	adds	r7, #48	; 0x30
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f22:	bf00      	nop
 8008f24:	0800f860 	.word	0x0800f860
 8008f28:	00f42400 	.word	0x00f42400

08008f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00a      	beq.n	8008f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5a:	f003 0302 	and.w	r3, r3, #2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00a      	beq.n	8008f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9e:	f003 0308 	and.w	r3, r3, #8
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00a      	beq.n	8008fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc0:	f003 0310 	and.w	r3, r3, #16
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe2:	f003 0320 	and.w	r3, r3, #32
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01a      	beq.n	8009042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800902a:	d10a      	bne.n	8009042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	430a      	orrs	r2, r1
 8009040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	605a      	str	r2, [r3, #4]
  }
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af02      	add	r7, sp, #8
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009080:	f7fb fa46 	bl	8004510 <HAL_GetTick>
 8009084:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0308 	and.w	r3, r3, #8
 8009090:	2b08      	cmp	r3, #8
 8009092:	d10e      	bne.n	80090b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f832 	bl	800910c <UART_WaitOnFlagUntilTimeout>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e028      	b.n	8009104 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0304 	and.w	r3, r3, #4
 80090bc:	2b04      	cmp	r3, #4
 80090be:	d10e      	bne.n	80090de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f81c 	bl	800910c <UART_WaitOnFlagUntilTimeout>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e012      	b.n	8009104 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b09c      	sub	sp, #112	; 0x70
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	603b      	str	r3, [r7, #0]
 8009118:	4613      	mov	r3, r2
 800911a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911c:	e0a9      	b.n	8009272 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800911e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009124:	f000 80a5 	beq.w	8009272 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009128:	f7fb f9f2 	bl	8004510 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009134:	429a      	cmp	r2, r3
 8009136:	d302      	bcc.n	800913e <UART_WaitOnFlagUntilTimeout+0x32>
 8009138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800913a:	2b00      	cmp	r3, #0
 800913c:	d140      	bne.n	80091c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009146:	e853 3f00 	ldrex	r3, [r3]
 800914a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800914c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009152:	667b      	str	r3, [r7, #100]	; 0x64
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	461a      	mov	r2, r3
 800915a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800915c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800915e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009160:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009162:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009164:	e841 2300 	strex	r3, r2, [r1]
 8009168:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800916a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e6      	bne.n	800913e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3308      	adds	r3, #8
 8009176:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	f023 0301 	bic.w	r3, r3, #1
 8009186:	663b      	str	r3, [r7, #96]	; 0x60
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3308      	adds	r3, #8
 800918e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009190:	64ba      	str	r2, [r7, #72]	; 0x48
 8009192:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009198:	e841 2300 	strex	r3, r2, [r1]
 800919c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800919e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e5      	bne.n	8009170 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2220      	movs	r2, #32
 80091b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e069      	b.n	8009294 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 0304 	and.w	r3, r3, #4
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d051      	beq.n	8009272 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091dc:	d149      	bne.n	8009272 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009206:	637b      	str	r3, [r7, #52]	; 0x34
 8009208:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800920c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e6      	bne.n	80091e8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3308      	adds	r3, #8
 8009220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	e853 3f00 	ldrex	r3, [r3]
 8009228:	613b      	str	r3, [r7, #16]
   return(result);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f023 0301 	bic.w	r3, r3, #1
 8009230:	66bb      	str	r3, [r7, #104]	; 0x68
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3308      	adds	r3, #8
 8009238:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800923a:	623a      	str	r2, [r7, #32]
 800923c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923e:	69f9      	ldr	r1, [r7, #28]
 8009240:	6a3a      	ldr	r2, [r7, #32]
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	61bb      	str	r3, [r7, #24]
   return(result);
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e5      	bne.n	800921a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2220      	movs	r2, #32
 8009252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2220      	movs	r2, #32
 800925a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2220      	movs	r2, #32
 8009262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e010      	b.n	8009294 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69da      	ldr	r2, [r3, #28]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4013      	ands	r3, r2
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	429a      	cmp	r2, r3
 8009280:	bf0c      	ite	eq
 8009282:	2301      	moveq	r3, #1
 8009284:	2300      	movne	r3, #0
 8009286:	b2db      	uxtb	r3, r3
 8009288:	461a      	mov	r2, r3
 800928a:	79fb      	ldrb	r3, [r7, #7]
 800928c:	429a      	cmp	r2, r3
 800928e:	f43f af46 	beq.w	800911e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3770      	adds	r7, #112	; 0x70
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800929c:	b480      	push	{r7}
 800929e:	b0a3      	sub	sp, #140	; 0x8c
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	4613      	mov	r3, r2
 80092a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	88fa      	ldrh	r2, [r7, #6]
 80092b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	88fa      	ldrh	r2, [r7, #6]
 80092bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ce:	d10e      	bne.n	80092ee <UART_Start_Receive_IT+0x52>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d105      	bne.n	80092e4 <UART_Start_Receive_IT+0x48>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80092de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092e2:	e02d      	b.n	8009340 <UART_Start_Receive_IT+0xa4>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	22ff      	movs	r2, #255	; 0xff
 80092e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092ec:	e028      	b.n	8009340 <UART_Start_Receive_IT+0xa4>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10d      	bne.n	8009312 <UART_Start_Receive_IT+0x76>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d104      	bne.n	8009308 <UART_Start_Receive_IT+0x6c>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	22ff      	movs	r2, #255	; 0xff
 8009302:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009306:	e01b      	b.n	8009340 <UART_Start_Receive_IT+0xa4>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	227f      	movs	r2, #127	; 0x7f
 800930c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009310:	e016      	b.n	8009340 <UART_Start_Receive_IT+0xa4>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800931a:	d10d      	bne.n	8009338 <UART_Start_Receive_IT+0x9c>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d104      	bne.n	800932e <UART_Start_Receive_IT+0x92>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	227f      	movs	r2, #127	; 0x7f
 8009328:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800932c:	e008      	b.n	8009340 <UART_Start_Receive_IT+0xa4>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	223f      	movs	r2, #63	; 0x3f
 8009332:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009336:	e003      	b.n	8009340 <UART_Start_Receive_IT+0xa4>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2222      	movs	r2, #34	; 0x22
 800934c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3308      	adds	r3, #8
 8009356:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800935a:	e853 3f00 	ldrex	r3, [r3]
 800935e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009362:	f043 0301 	orr.w	r3, r3, #1
 8009366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009374:	673a      	str	r2, [r7, #112]	; 0x70
 8009376:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009378:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800937a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800937c:	e841 2300 	strex	r3, r2, [r1]
 8009380:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1e3      	bne.n	8009350 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800938c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009390:	d14f      	bne.n	8009432 <UART_Start_Receive_IT+0x196>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009398:	88fa      	ldrh	r2, [r7, #6]
 800939a:	429a      	cmp	r2, r3
 800939c:	d349      	bcc.n	8009432 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a6:	d107      	bne.n	80093b8 <UART_Start_Receive_IT+0x11c>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d103      	bne.n	80093b8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4a47      	ldr	r2, [pc, #284]	; (80094d0 <UART_Start_Receive_IT+0x234>)
 80093b4:	675a      	str	r2, [r3, #116]	; 0x74
 80093b6:	e002      	b.n	80093be <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4a46      	ldr	r2, [pc, #280]	; (80094d4 <UART_Start_Receive_IT+0x238>)
 80093bc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d01a      	beq.n	80093fc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ce:	e853 3f00 	ldrex	r3, [r3]
 80093d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80093d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	461a      	mov	r2, r3
 80093e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093ea:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80093f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e4      	bne.n	80093c6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3308      	adds	r3, #8
 8009402:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009406:	e853 3f00 	ldrex	r3, [r3]
 800940a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009412:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3308      	adds	r3, #8
 800941a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800941c:	64ba      	str	r2, [r7, #72]	; 0x48
 800941e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800942a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e5      	bne.n	80093fc <UART_Start_Receive_IT+0x160>
 8009430:	e046      	b.n	80094c0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800943a:	d107      	bne.n	800944c <UART_Start_Receive_IT+0x1b0>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d103      	bne.n	800944c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4a24      	ldr	r2, [pc, #144]	; (80094d8 <UART_Start_Receive_IT+0x23c>)
 8009448:	675a      	str	r2, [r3, #116]	; 0x74
 800944a:	e002      	b.n	8009452 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4a23      	ldr	r2, [pc, #140]	; (80094dc <UART_Start_Receive_IT+0x240>)
 8009450:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d019      	beq.n	800948e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800946e:	677b      	str	r3, [r7, #116]	; 0x74
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009478:	637b      	str	r3, [r7, #52]	; 0x34
 800947a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800947e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e6      	bne.n	800945a <UART_Start_Receive_IT+0x1be>
 800948c:	e018      	b.n	80094c0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	e853 3f00 	ldrex	r3, [r3]
 800949a:	613b      	str	r3, [r7, #16]
   return(result);
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f043 0320 	orr.w	r3, r3, #32
 80094a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ac:	623b      	str	r3, [r7, #32]
 80094ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	69f9      	ldr	r1, [r7, #28]
 80094b2:	6a3a      	ldr	r2, [r7, #32]
 80094b4:	e841 2300 	strex	r3, r2, [r1]
 80094b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e6      	bne.n	800948e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	378c      	adds	r7, #140	; 0x8c
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	0800a1fd 	.word	0x0800a1fd
 80094d4:	08009e9d 	.word	0x08009e9d
 80094d8:	08009ce5 	.word	0x08009ce5
 80094dc:	08009b2d 	.word	0x08009b2d

080094e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b08f      	sub	sp, #60	; 0x3c
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80094fc:	637b      	str	r3, [r7, #52]	; 0x34
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009508:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800950c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e6      	bne.n	80094e8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3308      	adds	r3, #8
 8009520:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	60bb      	str	r3, [r7, #8]
   return(result);
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009530:	633b      	str	r3, [r7, #48]	; 0x30
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3308      	adds	r3, #8
 8009538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800953a:	61ba      	str	r2, [r7, #24]
 800953c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	6979      	ldr	r1, [r7, #20]
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	613b      	str	r3, [r7, #16]
   return(result);
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e5      	bne.n	800951a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2220      	movs	r2, #32
 8009552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009556:	bf00      	nop
 8009558:	373c      	adds	r7, #60	; 0x3c
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009562:	b480      	push	{r7}
 8009564:	b095      	sub	sp, #84	; 0x54
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800957e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009588:	643b      	str	r3, [r7, #64]	; 0x40
 800958a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800958e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e6      	bne.n	800956a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3308      	adds	r3, #8
 80095a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095b2:	f023 0301 	bic.w	r3, r3, #1
 80095b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3308      	adds	r3, #8
 80095be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095c8:	e841 2300 	strex	r3, r2, [r1]
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e3      	bne.n	800959c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d118      	bne.n	800960e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	e853 3f00 	ldrex	r3, [r3]
 80095e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f023 0310 	bic.w	r3, r3, #16
 80095f0:	647b      	str	r3, [r7, #68]	; 0x44
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	461a      	mov	r2, r3
 80095f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095fa:	61bb      	str	r3, [r7, #24]
 80095fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6979      	ldr	r1, [r7, #20]
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	613b      	str	r3, [r7, #16]
   return(result);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e6      	bne.n	80095dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2220      	movs	r2, #32
 8009612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009622:	bf00      	nop
 8009624:	3754      	adds	r7, #84	; 0x54
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b090      	sub	sp, #64	; 0x40
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0320 	and.w	r3, r3, #32
 8009646:	2b00      	cmp	r3, #0
 8009648:	d137      	bne.n	80096ba <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800964a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964c:	2200      	movs	r2, #0
 800964e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3308      	adds	r3, #8
 8009658:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	623b      	str	r3, [r7, #32]
   return(result);
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009668:	63bb      	str	r3, [r7, #56]	; 0x38
 800966a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009672:	633a      	str	r2, [r7, #48]	; 0x30
 8009674:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e5      	bne.n	8009652 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	60fb      	str	r3, [r7, #12]
   return(result);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800969a:	637b      	str	r3, [r7, #52]	; 0x34
 800969c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	461a      	mov	r2, r3
 80096a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a4:	61fb      	str	r3, [r7, #28]
 80096a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	69b9      	ldr	r1, [r7, #24]
 80096aa:	69fa      	ldr	r2, [r7, #28]
 80096ac:	e841 2300 	strex	r3, r2, [r1]
 80096b0:	617b      	str	r3, [r7, #20]
   return(result);
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e6      	bne.n	8009686 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096b8:	e002      	b.n	80096c0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80096ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80096bc:	f7f9 ffae 	bl	800361c <HAL_UART_TxCpltCallback>
}
 80096c0:	bf00      	nop
 80096c2:	3740      	adds	r7, #64	; 0x40
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f7ff f9e0 	bl	8008a9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096dc:	bf00      	nop
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009700:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970c:	2b80      	cmp	r3, #128	; 0x80
 800970e:	d109      	bne.n	8009724 <UART_DMAError+0x40>
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	2b21      	cmp	r3, #33	; 0x21
 8009714:	d106      	bne.n	8009724 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2200      	movs	r2, #0
 800971a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800971e:	6978      	ldr	r0, [r7, #20]
 8009720:	f7ff fede 	bl	80094e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972e:	2b40      	cmp	r3, #64	; 0x40
 8009730:	d109      	bne.n	8009746 <UART_DMAError+0x62>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b22      	cmp	r3, #34	; 0x22
 8009736:	d106      	bne.n	8009746 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	2200      	movs	r2, #0
 800973c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009740:	6978      	ldr	r0, [r7, #20]
 8009742:	f7ff ff0e 	bl	8009562 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974c:	f043 0210 	orr.w	r2, r3, #16
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009756:	6978      	ldr	r0, [r7, #20]
 8009758:	f7ff f9aa 	bl	8008ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800975c:	bf00      	nop
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009770:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f7ff f994 	bl	8008ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009788:	bf00      	nop
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009790:	b480      	push	{r7}
 8009792:	b08f      	sub	sp, #60	; 0x3c
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800979e:	2b21      	cmp	r3, #33	; 0x21
 80097a0:	d14c      	bne.n	800983c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d132      	bne.n	8009814 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	e853 3f00 	ldrex	r3, [r3]
 80097ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097c2:	637b      	str	r3, [r7, #52]	; 0x34
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	461a      	mov	r2, r3
 80097ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097d4:	e841 2300 	strex	r3, r2, [r1]
 80097d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1e6      	bne.n	80097ae <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	e853 3f00 	ldrex	r3, [r3]
 80097ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f4:	633b      	str	r3, [r7, #48]	; 0x30
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fe:	61bb      	str	r3, [r7, #24]
 8009800:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	6979      	ldr	r1, [r7, #20]
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	e841 2300 	strex	r3, r2, [r1]
 800980a:	613b      	str	r3, [r7, #16]
   return(result);
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e6      	bne.n	80097e0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009812:	e013      	b.n	800983c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009818:	781a      	ldrb	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009830:	b29b      	uxth	r3, r3
 8009832:	3b01      	subs	r3, #1
 8009834:	b29a      	uxth	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800983c:	bf00      	nop
 800983e:	373c      	adds	r7, #60	; 0x3c
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009848:	b480      	push	{r7}
 800984a:	b091      	sub	sp, #68	; 0x44
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009856:	2b21      	cmp	r3, #33	; 0x21
 8009858:	d151      	bne.n	80098fe <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009860:	b29b      	uxth	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d132      	bne.n	80098cc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986e:	e853 3f00 	ldrex	r3, [r3]
 8009872:	623b      	str	r3, [r7, #32]
   return(result);
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800987a:	63bb      	str	r3, [r7, #56]	; 0x38
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	461a      	mov	r2, r3
 8009882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009884:	633b      	str	r3, [r7, #48]	; 0x30
 8009886:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800988a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800988c:	e841 2300 	strex	r3, r2, [r1]
 8009890:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e6      	bne.n	8009866 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ac:	637b      	str	r3, [r7, #52]	; 0x34
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b6:	61fb      	str	r3, [r7, #28]
 80098b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	69b9      	ldr	r1, [r7, #24]
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	617b      	str	r3, [r7, #20]
   return(result);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e6      	bne.n	8009898 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80098ca:	e018      	b.n	80098fe <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80098d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098e0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e6:	1c9a      	adds	r2, r3, #2
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80098fe:	bf00      	nop
 8009900:	3744      	adds	r7, #68	; 0x44
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800990a:	b480      	push	{r7}
 800990c:	b091      	sub	sp, #68	; 0x44
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009918:	2b21      	cmp	r3, #33	; 0x21
 800991a:	d160      	bne.n	80099de <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009922:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009924:	e057      	b.n	80099d6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800992c:	b29b      	uxth	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d133      	bne.n	800999a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3308      	adds	r3, #8
 8009938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	623b      	str	r3, [r7, #32]
   return(result);
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009948:	63bb      	str	r3, [r7, #56]	; 0x38
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3308      	adds	r3, #8
 8009950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009952:	633a      	str	r2, [r7, #48]	; 0x30
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995a:	e841 2300 	strex	r3, r2, [r1]
 800995e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e5      	bne.n	8009932 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	60fb      	str	r3, [r7, #12]
   return(result);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800997a:	637b      	str	r3, [r7, #52]	; 0x34
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	461a      	mov	r2, r3
 8009982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009988:	69b9      	ldr	r1, [r7, #24]
 800998a:	69fa      	ldr	r2, [r7, #28]
 800998c:	e841 2300 	strex	r3, r2, [r1]
 8009990:	617b      	str	r3, [r7, #20]
   return(result);
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1e6      	bne.n	8009966 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009998:	e021      	b.n	80099de <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d013      	beq.n	80099d0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ac:	781a      	ldrb	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	3b01      	subs	r3, #1
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80099d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80099d2:	3b01      	subs	r3, #1
 80099d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80099d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1a4      	bne.n	8009926 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80099dc:	e7ff      	b.n	80099de <UART_TxISR_8BIT_FIFOEN+0xd4>
 80099de:	bf00      	nop
 80099e0:	3744      	adds	r7, #68	; 0x44
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b091      	sub	sp, #68	; 0x44
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f8:	2b21      	cmp	r3, #33	; 0x21
 80099fa:	d165      	bne.n	8009ac8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a02:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009a04:	e05c      	b.n	8009ac0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d133      	bne.n	8009a7a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3308      	adds	r3, #8
 8009a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	e853 3f00 	ldrex	r3, [r3]
 8009a20:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009a28:	637b      	str	r3, [r7, #52]	; 0x34
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3308      	adds	r3, #8
 8009a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e5      	bne.n	8009a12 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	e853 3f00 	ldrex	r3, [r3]
 8009a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	461a      	mov	r2, r3
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	61bb      	str	r3, [r7, #24]
 8009a66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a68:	6979      	ldr	r1, [r7, #20]
 8009a6a:	69ba      	ldr	r2, [r7, #24]
 8009a6c:	e841 2300 	strex	r3, r2, [r1]
 8009a70:	613b      	str	r3, [r7, #16]
   return(result);
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1e6      	bne.n	8009a46 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009a78:	e026      	b.n	8009ac8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d018      	beq.n	8009aba <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	461a      	mov	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a9c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa2:	1c9a      	adds	r2, r3, #2
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009aba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009abc:	3b01      	subs	r3, #1
 8009abe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009ac0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d19f      	bne.n	8009a06 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009ac6:	e7ff      	b.n	8009ac8 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009ac8:	bf00      	nop
 8009aca:	3744      	adds	r7, #68	; 0x44
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af0:	61fb      	str	r3, [r7, #28]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	61bb      	str	r3, [r7, #24]
 8009afc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afe:	6979      	ldr	r1, [r7, #20]
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	e841 2300 	strex	r3, r2, [r1]
 8009b06:	613b      	str	r3, [r7, #16]
   return(result);
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1e6      	bne.n	8009adc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2220      	movs	r2, #32
 8009b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7f9 fd7d 	bl	800361c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b22:	bf00      	nop
 8009b24:	3720      	adds	r7, #32
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b09c      	sub	sp, #112	; 0x70
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b3a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b44:	2b22      	cmp	r3, #34	; 0x22
 8009b46:	f040 80be 	bne.w	8009cc6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009b54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009b58:	b2d9      	uxtb	r1, r3
 8009b5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b64:	400a      	ands	r2, r1
 8009b66:	b2d2      	uxtb	r2, r2
 8009b68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f040 80a1 	bne.w	8009cd6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bb4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bba:	e841 2300 	strex	r3, r2, [r1]
 8009bbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1e6      	bne.n	8009b94 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3308      	adds	r3, #8
 8009bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd0:	e853 3f00 	ldrex	r3, [r3]
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd8:	f023 0301 	bic.w	r3, r3, #1
 8009bdc:	667b      	str	r3, [r7, #100]	; 0x64
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3308      	adds	r3, #8
 8009be4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009be6:	647a      	str	r2, [r7, #68]	; 0x44
 8009be8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bee:	e841 2300 	strex	r3, r2, [r1]
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1e5      	bne.n	8009bc6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2220      	movs	r2, #32
 8009bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a33      	ldr	r2, [pc, #204]	; (8009ce0 <UART_RxISR_8BIT+0x1b4>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d01f      	beq.n	8009c58 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d018      	beq.n	8009c58 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	e853 3f00 	ldrex	r3, [r3]
 8009c32:	623b      	str	r3, [r7, #32]
   return(result);
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	461a      	mov	r2, r3
 8009c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c44:	633b      	str	r3, [r7, #48]	; 0x30
 8009c46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c4c:	e841 2300 	strex	r3, r2, [r1]
 8009c50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1e6      	bne.n	8009c26 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d12e      	bne.n	8009cbe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	e853 3f00 	ldrex	r3, [r3]
 8009c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f023 0310 	bic.w	r3, r3, #16
 8009c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	461a      	mov	r2, r3
 8009c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c84:	61fb      	str	r3, [r7, #28]
 8009c86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	69b9      	ldr	r1, [r7, #24]
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	617b      	str	r3, [r7, #20]
   return(result);
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e6      	bne.n	8009c66 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	f003 0310 	and.w	r3, r3, #16
 8009ca2:	2b10      	cmp	r3, #16
 8009ca4:	d103      	bne.n	8009cae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2210      	movs	r2, #16
 8009cac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7fe ff04 	bl	8008ac4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cbc:	e00b      	b.n	8009cd6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7f9 fc7e 	bl	80035c0 <HAL_UART_RxCpltCallback>
}
 8009cc4:	e007      	b.n	8009cd6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	699a      	ldr	r2, [r3, #24]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f042 0208 	orr.w	r2, r2, #8
 8009cd4:	619a      	str	r2, [r3, #24]
}
 8009cd6:	bf00      	nop
 8009cd8:	3770      	adds	r7, #112	; 0x70
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	40008000 	.word	0x40008000

08009ce4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b09c      	sub	sp, #112	; 0x70
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cf2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cfc:	2b22      	cmp	r3, #34	; 0x22
 8009cfe:	f040 80be 	bne.w	8009e7e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d10:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d12:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009d16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d26:	1c9a      	adds	r2, r3, #2
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	3b01      	subs	r3, #1
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f040 80a1 	bne.w	8009e8e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d60:	667b      	str	r3, [r7, #100]	; 0x64
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d6a:	657b      	str	r3, [r7, #84]	; 0x54
 8009d6c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d72:	e841 2300 	strex	r3, r2, [r1]
 8009d76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1e6      	bne.n	8009d4c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	3308      	adds	r3, #8
 8009d84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d88:	e853 3f00 	ldrex	r3, [r3]
 8009d8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	f023 0301 	bic.w	r3, r3, #1
 8009d94:	663b      	str	r3, [r7, #96]	; 0x60
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3308      	adds	r3, #8
 8009d9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d9e:	643a      	str	r2, [r7, #64]	; 0x40
 8009da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009da4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009da6:	e841 2300 	strex	r3, r2, [r1]
 8009daa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1e5      	bne.n	8009d7e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2220      	movs	r2, #32
 8009db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a33      	ldr	r2, [pc, #204]	; (8009e98 <UART_RxISR_16BIT+0x1b4>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d01f      	beq.n	8009e10 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d018      	beq.n	8009e10 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	e853 3f00 	ldrex	r3, [r3]
 8009dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dfe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e6      	bne.n	8009dde <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d12e      	bne.n	8009e76 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	e853 3f00 	ldrex	r3, [r3]
 8009e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f023 0310 	bic.w	r3, r3, #16
 8009e32:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e3c:	61bb      	str	r3, [r7, #24]
 8009e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e40:	6979      	ldr	r1, [r7, #20]
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	e841 2300 	strex	r3, r2, [r1]
 8009e48:	613b      	str	r3, [r7, #16]
   return(result);
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1e6      	bne.n	8009e1e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	f003 0310 	and.w	r3, r3, #16
 8009e5a:	2b10      	cmp	r3, #16
 8009e5c:	d103      	bne.n	8009e66 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2210      	movs	r2, #16
 8009e64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7fe fe28 	bl	8008ac4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e74:	e00b      	b.n	8009e8e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7f9 fba2 	bl	80035c0 <HAL_UART_RxCpltCallback>
}
 8009e7c:	e007      	b.n	8009e8e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	699a      	ldr	r2, [r3, #24]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f042 0208 	orr.w	r2, r2, #8
 8009e8c:	619a      	str	r2, [r3, #24]
}
 8009e8e:	bf00      	nop
 8009e90:	3770      	adds	r7, #112	; 0x70
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	40008000 	.word	0x40008000

08009e9c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b0ac      	sub	sp, #176	; 0xb0
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009eaa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ed2:	2b22      	cmp	r3, #34	; 0x22
 8009ed4:	f040 8182 	bne.w	800a1dc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ede:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ee2:	e125      	b.n	800a130 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eea:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009eee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009ef2:	b2d9      	uxtb	r1, r3
 8009ef4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009efe:	400a      	ands	r2, r1
 8009f00:	b2d2      	uxtb	r2, r2
 8009f02:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f08:	1c5a      	adds	r2, r3, #1
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	3b01      	subs	r3, #1
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f2e:	f003 0307 	and.w	r3, r3, #7
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d053      	beq.n	8009fde <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f3a:	f003 0301 	and.w	r3, r3, #1
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d011      	beq.n	8009f66 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00b      	beq.n	8009f66 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2201      	movs	r2, #1
 8009f54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f5c:	f043 0201 	orr.w	r2, r3, #1
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d011      	beq.n	8009f96 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00b      	beq.n	8009f96 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2202      	movs	r2, #2
 8009f84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f8c:	f043 0204 	orr.w	r2, r3, #4
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f9a:	f003 0304 	and.w	r3, r3, #4
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d011      	beq.n	8009fc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00b      	beq.n	8009fc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2204      	movs	r2, #4
 8009fb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fbc:	f043 0202 	orr.w	r2, r3, #2
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d006      	beq.n	8009fde <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7fe fd6d 	bl	8008ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f040 80a2 	bne.w	800a130 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ff4:	e853 3f00 	ldrex	r3, [r3]
 8009ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	461a      	mov	r2, r3
 800a00a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a00e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a010:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a014:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800a01c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e4      	bne.n	8009fec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a038:	f023 0301 	bic.w	r3, r3, #1
 800a03c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3308      	adds	r3, #8
 800a046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a04a:	66ba      	str	r2, [r7, #104]	; 0x68
 800a04c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a050:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a052:	e841 2300 	strex	r3, r2, [r1]
 800a056:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1e1      	bne.n	800a022 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2220      	movs	r2, #32
 800a062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a5f      	ldr	r2, [pc, #380]	; (800a1f4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d021      	beq.n	800a0c0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d01a      	beq.n	800a0c0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a092:	e853 3f00 	ldrex	r3, [r3]
 800a096:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a09a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a09e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0ac:	657b      	str	r3, [r7, #84]	; 0x54
 800a0ae:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0b4:	e841 2300 	strex	r3, r2, [r1]
 800a0b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1e4      	bne.n	800a08a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d130      	bne.n	800a12a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d6:	e853 3f00 	ldrex	r3, [r3]
 800a0da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0de:	f023 0310 	bic.w	r3, r3, #16
 800a0e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0f0:	643b      	str	r3, [r7, #64]	; 0x40
 800a0f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0f8:	e841 2300 	strex	r3, r2, [r1]
 800a0fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1e4      	bne.n	800a0ce <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	f003 0310 	and.w	r3, r3, #16
 800a10e:	2b10      	cmp	r3, #16
 800a110:	d103      	bne.n	800a11a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2210      	movs	r2, #16
 800a118:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7fe fcce 	bl	8008ac4 <HAL_UARTEx_RxEventCallback>
 800a128:	e002      	b.n	800a130 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7f9 fa48 	bl	80035c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a130:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800a134:	2b00      	cmp	r3, #0
 800a136:	d006      	beq.n	800a146 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a13c:	f003 0320 	and.w	r3, r3, #32
 800a140:	2b00      	cmp	r3, #0
 800a142:	f47f aecf 	bne.w	8009ee4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a14c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a150:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a154:	2b00      	cmp	r3, #0
 800a156:	d049      	beq.n	800a1ec <UART_RxISR_8BIT_FIFOEN+0x350>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a15e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800a162:	429a      	cmp	r2, r3
 800a164:	d242      	bcs.n	800a1ec <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3308      	adds	r3, #8
 800a16c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	e853 3f00 	ldrex	r3, [r3]
 800a174:	61fb      	str	r3, [r7, #28]
   return(result);
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a17c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	3308      	adds	r3, #8
 800a186:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a18a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a18c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a192:	e841 2300 	strex	r3, r2, [r1]
 800a196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1e3      	bne.n	800a166 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a15      	ldr	r2, [pc, #84]	; (800a1f8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a1a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	f043 0320 	orr.w	r3, r3, #32
 800a1b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1c6:	61bb      	str	r3, [r7, #24]
 800a1c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ca:	6979      	ldr	r1, [r7, #20]
 800a1cc:	69ba      	ldr	r2, [r7, #24]
 800a1ce:	e841 2300 	strex	r3, r2, [r1]
 800a1d2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1e4      	bne.n	800a1a4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1da:	e007      	b.n	800a1ec <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	699a      	ldr	r2, [r3, #24]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f042 0208 	orr.w	r2, r2, #8
 800a1ea:	619a      	str	r2, [r3, #24]
}
 800a1ec:	bf00      	nop
 800a1ee:	37b0      	adds	r7, #176	; 0xb0
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	40008000 	.word	0x40008000
 800a1f8:	08009b2d 	.word	0x08009b2d

0800a1fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b0ae      	sub	sp, #184	; 0xb8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a20a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a232:	2b22      	cmp	r3, #34	; 0x22
 800a234:	f040 8186 	bne.w	800a544 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a23e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a242:	e129      	b.n	800a498 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a256:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a25a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a25e:	4013      	ands	r3, r2
 800a260:	b29a      	uxth	r2, r3
 800a262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a266:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a26c:	1c9a      	adds	r2, r3, #2
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a278:	b29b      	uxth	r3, r3
 800a27a:	3b01      	subs	r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a28e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a292:	f003 0307 	and.w	r3, r3, #7
 800a296:	2b00      	cmp	r3, #0
 800a298:	d053      	beq.n	800a342 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a29a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a29e:	f003 0301 	and.w	r3, r3, #1
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d011      	beq.n	800a2ca <UART_RxISR_16BIT_FIFOEN+0xce>
 800a2a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00b      	beq.n	800a2ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2c0:	f043 0201 	orr.w	r2, r3, #1
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d011      	beq.n	800a2fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a2d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00b      	beq.n	800a2fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2f0:	f043 0204 	orr.w	r2, r3, #4
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2fe:	f003 0304 	and.w	r3, r3, #4
 800a302:	2b00      	cmp	r3, #0
 800a304:	d011      	beq.n	800a32a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00b      	beq.n	800a32a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2204      	movs	r2, #4
 800a318:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a320:	f043 0202 	orr.w	r2, r3, #2
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a330:	2b00      	cmp	r3, #0
 800a332:	d006      	beq.n	800a342 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7fe fbbb 	bl	8008ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a348:	b29b      	uxth	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f040 80a4 	bne.w	800a498 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a35e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	461a      	mov	r2, r3
 800a36e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a376:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a37a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1e2      	bne.n	800a350 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3308      	adds	r3, #8
 800a390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a394:	e853 3f00 	ldrex	r3, [r3]
 800a398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a39a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a39c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3a0:	f023 0301 	bic.w	r3, r3, #1
 800a3a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a3b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e1      	bne.n	800a38a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a5f      	ldr	r2, [pc, #380]	; (800a55c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d021      	beq.n	800a428 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d01a      	beq.n	800a428 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3fa:	e853 3f00 	ldrex	r3, [r3]
 800a3fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a402:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a414:	65bb      	str	r3, [r7, #88]	; 0x58
 800a416:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a41a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a41c:	e841 2300 	strex	r3, r2, [r1]
 800a420:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1e4      	bne.n	800a3f2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d130      	bne.n	800a492 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	e853 3f00 	ldrex	r3, [r3]
 800a442:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a446:	f023 0310 	bic.w	r3, r3, #16
 800a44a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a458:	647b      	str	r3, [r7, #68]	; 0x44
 800a45a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a45e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a460:	e841 2300 	strex	r3, r2, [r1]
 800a464:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e4      	bne.n	800a436 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	f003 0310 	and.w	r3, r3, #16
 800a476:	2b10      	cmp	r3, #16
 800a478:	d103      	bne.n	800a482 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2210      	movs	r2, #16
 800a480:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7fe fb1a 	bl	8008ac4 <HAL_UARTEx_RxEventCallback>
 800a490:	e002      	b.n	800a498 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7f9 f894 	bl	80035c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a498:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d006      	beq.n	800a4ae <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a4a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4a4:	f003 0320 	and.w	r3, r3, #32
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f47f aecb 	bne.w	800a244 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a4b4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a4b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d049      	beq.n	800a554 <UART_RxISR_16BIT_FIFOEN+0x358>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a4c6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d242      	bcs.n	800a554 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d8:	e853 3f00 	ldrex	r3, [r3]
 800a4dc:	623b      	str	r3, [r7, #32]
   return(result);
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a4f2:	633a      	str	r2, [r7, #48]	; 0x30
 800a4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4fa:	e841 2300 	strex	r3, r2, [r1]
 800a4fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1e3      	bne.n	800a4ce <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a15      	ldr	r2, [pc, #84]	; (800a560 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a50a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	e853 3f00 	ldrex	r3, [r3]
 800a518:	60fb      	str	r3, [r7, #12]
   return(result);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f043 0320 	orr.w	r3, r3, #32
 800a520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	461a      	mov	r2, r3
 800a52a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a52e:	61fb      	str	r3, [r7, #28]
 800a530:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a532:	69b9      	ldr	r1, [r7, #24]
 800a534:	69fa      	ldr	r2, [r7, #28]
 800a536:	e841 2300 	strex	r3, r2, [r1]
 800a53a:	617b      	str	r3, [r7, #20]
   return(result);
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1e4      	bne.n	800a50c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a542:	e007      	b.n	800a554 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	699a      	ldr	r2, [r3, #24]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f042 0208 	orr.w	r2, r2, #8
 800a552:	619a      	str	r2, [r3, #24]
}
 800a554:	bf00      	nop
 800a556:	37b8      	adds	r7, #184	; 0xb8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	40008000 	.word	0x40008000
 800a560:	08009ce5 	.word	0x08009ce5

0800a564 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d101      	bne.n	800a5b6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	e027      	b.n	800a606 <HAL_UARTEx_DisableFifoMode+0x66>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2224      	movs	r2, #36	; 0x24
 800a5c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0201 	bic.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a5e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3714      	adds	r7, #20
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a622:	2b01      	cmp	r3, #1
 800a624:	d101      	bne.n	800a62a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a626:	2302      	movs	r3, #2
 800a628:	e02d      	b.n	800a686 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2224      	movs	r2, #36	; 0x24
 800a636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 0201 	bic.w	r2, r2, #1
 800a650:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	683a      	ldr	r2, [r7, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f850 	bl	800a70c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2220      	movs	r2, #32
 800a678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e02d      	b.n	800a702 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2224      	movs	r2, #36	; 0x24
 800a6b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 0201 	bic.w	r2, r2, #1
 800a6cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f812 	bl	800a70c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d108      	bne.n	800a72e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a72c:	e031      	b.n	800a792 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a72e:	2308      	movs	r3, #8
 800a730:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a732:	2308      	movs	r3, #8
 800a734:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	0e5b      	lsrs	r3, r3, #25
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	f003 0307 	and.w	r3, r3, #7
 800a744:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	0f5b      	lsrs	r3, r3, #29
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	f003 0307 	and.w	r3, r3, #7
 800a754:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a756:	7bbb      	ldrb	r3, [r7, #14]
 800a758:	7b3a      	ldrb	r2, [r7, #12]
 800a75a:	4911      	ldr	r1, [pc, #68]	; (800a7a0 <UARTEx_SetNbDataToProcess+0x94>)
 800a75c:	5c8a      	ldrb	r2, [r1, r2]
 800a75e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a762:	7b3a      	ldrb	r2, [r7, #12]
 800a764:	490f      	ldr	r1, [pc, #60]	; (800a7a4 <UARTEx_SetNbDataToProcess+0x98>)
 800a766:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a768:	fb93 f3f2 	sdiv	r3, r3, r2
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	7b7a      	ldrb	r2, [r7, #13]
 800a778:	4909      	ldr	r1, [pc, #36]	; (800a7a0 <UARTEx_SetNbDataToProcess+0x94>)
 800a77a:	5c8a      	ldrb	r2, [r1, r2]
 800a77c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a780:	7b7a      	ldrb	r2, [r7, #13]
 800a782:	4908      	ldr	r1, [pc, #32]	; (800a7a4 <UARTEx_SetNbDataToProcess+0x98>)
 800a784:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a786:	fb93 f3f2 	sdiv	r3, r3, r2
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a792:	bf00      	nop
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	0800f878 	.word	0x0800f878
 800a7a4:	0800f880 	.word	0x0800f880

0800a7a8 <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a7b2:	f7f6 ffbd 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a7b6:	f7f6 ff4d 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800a7ba:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f062 0208 	orn	r2, r2, #8
 800a7c4:	701a      	strb	r2, [r3, #0]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	705a      	strb	r2, [r3, #1]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	709a      	strb	r2, [r3, #2]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f042 0201 	orr.w	r2, r2, #1
 800a7da:	711a      	strb	r2, [r3, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	715a      	strb	r2, [r3, #5]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	719a      	strb	r2, [r3, #6]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a7ee:	f7f6 ff79 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a7f2:	f7f6 ff3b 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a7f6:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	689b      	ldr	r3, [r3, #8]

}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <otCoapMessageInit>:

void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
 800a810:	4613      	mov	r3, r2
 800a812:	70bb      	strb	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800a814:	f7f6 ff8c 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a818:	f7f6 ff1c 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800a81c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f062 0228 	orn	r2, r2, #40	; 0x28
 800a826:	701a      	strb	r2, [r3, #0]
 800a828:	2200      	movs	r2, #0
 800a82a:	705a      	strb	r2, [r3, #1]
 800a82c:	2200      	movs	r2, #0
 800a82e:	709a      	strb	r2, [r3, #2]
 800a830:	2200      	movs	r2, #0
 800a832:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f042 0203 	orr.w	r2, r2, #3
 800a83c:	711a      	strb	r2, [r3, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	715a      	strb	r2, [r3, #5]
 800a842:	2200      	movs	r2, #0
 800a844:	719a      	strb	r2, [r3, #6]
 800a846:	2200      	movs	r2, #0
 800a848:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aType;
 800a850:	78fa      	ldrb	r2, [r7, #3]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aCode;
 800a856:	78ba      	ldrb	r2, [r7, #2]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800a85c:	f7f6 ff42 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a860:	f7f6 ff04 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a864:	60f8      	str	r0, [r7, #12]
}
 800a866:	bf00      	nop
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <otCoapMessageInitResponse>:

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b086      	sub	sp, #24
 800a872:	af00      	add	r7, sp, #0
 800a874:	60f8      	str	r0, [r7, #12]
 800a876:	60b9      	str	r1, [r7, #8]
 800a878:	4611      	mov	r1, r2
 800a87a:	461a      	mov	r2, r3
 800a87c:	460b      	mov	r3, r1
 800a87e:	71fb      	strb	r3, [r7, #7]
 800a880:	4613      	mov	r3, r2
 800a882:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800a884:	f7f6 ff54 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a888:	f7f6 fee4 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800a88c:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2200      	movs	r2, #0
 800a892:	f062 0227 	orn	r2, r2, #39	; 0x27
 800a896:	701a      	strb	r2, [r3, #0]
 800a898:	2200      	movs	r2, #0
 800a89a:	705a      	strb	r2, [r3, #1]
 800a89c:	2200      	movs	r2, #0
 800a89e:	709a      	strb	r2, [r3, #2]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f042 0204 	orr.w	r2, r2, #4
 800a8ac:	711a      	strb	r2, [r3, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	715a      	strb	r2, [r3, #5]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	719a      	strb	r2, [r3, #6]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 800a8c6:	79fa      	ldrb	r2, [r7, #7]
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 800a8cc:	79ba      	ldrb	r2, [r7, #6]
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800a8d2:	f7f6 ff07 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a8d6:	f7f6 fec9 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a8da:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	b2db      	uxtb	r3, r3
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3718      	adds	r7, #24
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <otCoapMessageSetToken>:

otError otCoapMessageSetToken(otMessage *aMessage, const uint8_t *aToken, uint8_t aTokenLength)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b086      	sub	sp, #24
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	60f8      	str	r0, [r7, #12]
 800a8f2:	60b9      	str	r1, [r7, #8]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	71fb      	strb	r3, [r7, #7]
  Pre_OtCmdProcessing();
 800a8f8:	f7f6 ff1a 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a8fc:	f7f6 feaa 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800a900:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_TOKEN;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2200      	movs	r2, #0
 800a906:	f062 0226 	orn	r2, r2, #38	; 0x26
 800a90a:	701a      	strb	r2, [r3, #0]
 800a90c:	2200      	movs	r2, #0
 800a90e:	705a      	strb	r2, [r3, #1]
 800a910:	2200      	movs	r2, #0
 800a912:	709a      	strb	r2, [r3, #2]
 800a914:	2200      	movs	r2, #0
 800a916:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f042 0203 	orr.w	r2, r2, #3
 800a920:	711a      	strb	r2, [r3, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	715a      	strb	r2, [r3, #5]
 800a926:	2200      	movs	r2, #0
 800a928:	719a      	strb	r2, [r3, #6]
 800a92a:	2200      	movs	r2, #0
 800a92c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aToken;
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTokenLength;
 800a93a:	79fa      	ldrb	r2, [r7, #7]
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800a940:	f7f6 fed0 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a944:	f7f6 fe92 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a948:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	b2db      	uxtb	r3, r3
}
 800a950:	4618      	mov	r0, r3
 800a952:	3718      	adds	r7, #24
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <otCoapMessageGenerateToken>:

void otCoapMessageGenerateToken(otMessage *aMessage, uint8_t aTokenLength)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a964:	f7f6 fee4 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a968:	f7f6 fe74 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800a96c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GENERATE_TOKEN;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f062 0225 	orn	r2, r2, #37	; 0x25
 800a976:	701a      	strb	r2, [r3, #0]
 800a978:	2200      	movs	r2, #0
 800a97a:	705a      	strb	r2, [r3, #1]
 800a97c:	2200      	movs	r2, #0
 800a97e:	709a      	strb	r2, [r3, #2]
 800a980:	2200      	movs	r2, #0
 800a982:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	f042 0202 	orr.w	r2, r2, #2
 800a98c:	711a      	strb	r2, [r3, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	715a      	strb	r2, [r3, #5]
 800a992:	2200      	movs	r2, #0
 800a994:	719a      	strb	r2, [r3, #6]
 800a996:	2200      	movs	r2, #0
 800a998:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800a9a0:	78fa      	ldrb	r2, [r7, #3]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a9a6:	f7f6 fe9d 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a9aa:	f7f6 fe5f 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800a9ae:	60f8      	str	r0, [r7, #12]
}
 800a9b0:	bf00      	nop
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <otCoapMessageAppendUriPathOptions>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a9c2:	f7f6 feb5 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a9c6:	f7f6 fe45 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800a9ca:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_APPEND_URI_PATH_OPTIONS;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f062 0220 	orn	r2, r2, #32
 800a9d4:	701a      	strb	r2, [r3, #0]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	705a      	strb	r2, [r3, #1]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	709a      	strb	r2, [r3, #2]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f042 0202 	orr.w	r2, r2, #2
 800a9ea:	711a      	strb	r2, [r3, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	715a      	strb	r2, [r3, #5]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	719a      	strb	r2, [r3, #6]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aUriPath;
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800aa04:	f7f6 fe6e 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aa08:	f7f6 fe30 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800aa0c:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	b2db      	uxtb	r3, r3
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800aa24:	f7f6 fe84 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aa28:	f7f6 fe14 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800aa2c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f062 0219 	orn	r2, r2, #25
 800aa36:	701a      	strb	r2, [r3, #0]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	705a      	strb	r2, [r3, #1]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	709a      	strb	r2, [r3, #2]
 800aa40:	2200      	movs	r2, #0
 800aa42:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f042 0201 	orr.w	r2, r2, #1
 800aa4c:	711a      	strb	r2, [r3, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	715a      	strb	r2, [r3, #5]
 800aa52:	2200      	movs	r2, #0
 800aa54:	719a      	strb	r2, [r3, #6]
 800aa56:	2200      	movs	r2, #0
 800aa58:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800aa60:	f7f6 fe40 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aa64:	f7f6 fe02 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800aa68:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	b2db      	uxtb	r3, r3
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <otCoapMessageGetCode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otCoapType)p_ot_req->Data[0];
}

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800aa80:	f7f6 fe56 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aa84:	f7f6 fde6 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800aa88:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f062 0217 	orn	r2, r2, #23
 800aa92:	701a      	strb	r2, [r3, #0]
 800aa94:	2200      	movs	r2, #0
 800aa96:	705a      	strb	r2, [r3, #1]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	709a      	strb	r2, [r3, #2]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f042 0201 	orr.w	r2, r2, #1
 800aaa8:	711a      	strb	r2, [r3, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	715a      	strb	r2, [r3, #5]
 800aaae:	2200      	movs	r2, #0
 800aab0:	719a      	strb	r2, [r3, #6]
 800aab2:	2200      	movs	r2, #0
 800aab4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800aabc:	f7f6 fe12 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aac0:	f7f6 fdd4 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800aac4:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	b2db      	uxtb	r3, r3
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <otCoapMessageSetCode>:

void otCoapMessageSetCode(otMessage *aMessage, otCoapCode aCode)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	460b      	mov	r3, r1
 800aade:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800aae0:	f7f6 fe26 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aae4:	f7f6 fdb6 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800aae8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_CODE;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f062 0216 	orn	r2, r2, #22
 800aaf2:	701a      	strb	r2, [r3, #0]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	705a      	strb	r2, [r3, #1]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	709a      	strb	r2, [r3, #2]
 800aafc:	2200      	movs	r2, #0
 800aafe:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f042 0202 	orr.w	r2, r2, #2
 800ab08:	711a      	strb	r2, [r3, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	715a      	strb	r2, [r3, #5]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	719a      	strb	r2, [r3, #6]
 800ab12:	2200      	movs	r2, #0
 800ab14:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aCode;
 800ab1c:	78fa      	ldrb	r2, [r7, #3]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800ab22:	f7f6 fddf 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ab26:	f7f6 fda1 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800ab2a:	60f8      	str	r0, [r7, #12]
}
 800ab2c:	bf00      	nop
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <otCoapMessageGetTokenLength>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t)p_ot_req->Data[0];
}

uint8_t otCoapMessageGetTokenLength(const otMessage *aMessage)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ab3c:	f7f6 fdf8 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ab40:	f7f6 fd88 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800ab44:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN_LENGTH;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f062 0213 	orn	r2, r2, #19
 800ab4e:	701a      	strb	r2, [r3, #0]
 800ab50:	2200      	movs	r2, #0
 800ab52:	705a      	strb	r2, [r3, #1]
 800ab54:	2200      	movs	r2, #0
 800ab56:	709a      	strb	r2, [r3, #2]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f042 0201 	orr.w	r2, r2, #1
 800ab64:	711a      	strb	r2, [r3, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	715a      	strb	r2, [r3, #5]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	719a      	strb	r2, [r3, #6]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ab78:	f7f6 fdb4 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ab7c:	f7f6 fd76 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800ab80:	60f8      	str	r0, [r7, #12]
  return (uint8_t)p_ot_req->Data[0];
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	b2db      	uxtb	r3, r3
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <otCoapMessageGetToken>:

const uint8_t *otCoapMessageGetToken(const otMessage *aMessage)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ab98:	f7f6 fdca 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ab9c:	f7f6 fd5a 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800aba0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f062 0212 	orn	r2, r2, #18
 800abaa:	701a      	strb	r2, [r3, #0]
 800abac:	2200      	movs	r2, #0
 800abae:	705a      	strb	r2, [r3, #1]
 800abb0:	2200      	movs	r2, #0
 800abb2:	709a      	strb	r2, [r3, #2]
 800abb4:	2200      	movs	r2, #0
 800abb6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	f042 0201 	orr.w	r2, r2, #1
 800abc0:	711a      	strb	r2, [r3, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	715a      	strb	r2, [r3, #5]
 800abc6:	2200      	movs	r2, #0
 800abc8:	719a      	strb	r2, [r3, #6]
 800abca:	2200      	movs	r2, #0
 800abcc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800abd4:	f7f6 fd86 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800abd8:	f7f6 fd48 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800abdc:	60f8      	str	r0, [r7, #12]
  return (uint8_t *)p_ot_req->Data[0];
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	689b      	ldr	r3, [r3, #8]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <otCoapSendRequestWithParameters>:
                                        otMessage *               aMessage,
                                        const otMessageInfo *     aMessageInfo,
                                        otCoapResponseHandler     aHandler,
                                        void *                    aContext,
                                        const otCoapTxParameters *aTxParameters)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b086      	sub	sp, #24
 800abee:	af00      	add	r7, sp, #0
 800abf0:	60f8      	str	r0, [r7, #12]
 800abf2:	60b9      	str	r1, [r7, #8]
 800abf4:	607a      	str	r2, [r7, #4]
 800abf6:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 800abf8:	f7f6 fd9a 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800abfc:	f7f6 fd2a 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800ac00:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST_WITH_PARAMETERS;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f062 0209 	orn	r2, r2, #9
 800ac0a:	701a      	strb	r2, [r3, #0]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	705a      	strb	r2, [r3, #1]
 800ac10:	2200      	movs	r2, #0
 800ac12:	709a      	strb	r2, [r3, #2]
 800ac14:	2200      	movs	r2, #0
 800ac16:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=5;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f042 0205 	orr.w	r2, r2, #5
 800ac20:	711a      	strb	r2, [r3, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	715a      	strb	r2, [r3, #5]
 800ac26:	2200      	movs	r2, #0
 800ac28:	719a      	strb	r2, [r3, #6]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aHandler;
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aContext;
 800ac40:	6a3a      	ldr	r2, [r7, #32]
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	615a      	str	r2, [r3, #20]
  p_ot_req->Data[4] = (uint32_t) aTxParameters;
 800ac46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	619a      	str	r2, [r3, #24]

  Ot_Cmd_Transfer();
 800ac4c:	f7f6 fd4a 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ac50:	f7f6 fd0c 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800ac54:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	b2db      	uxtb	r3, r3
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3718      	adds	r7, #24
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800ac70:	f7f6 fd5e 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ac74:	f7f6 fcee 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800ac78:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f062 0207 	orn	r2, r2, #7
 800ac82:	701a      	strb	r2, [r3, #0]
 800ac84:	2200      	movs	r2, #0
 800ac86:	705a      	strb	r2, [r3, #1]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	709a      	strb	r2, [r3, #2]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f042 0201 	orr.w	r2, r2, #1
 800ac98:	711a      	strb	r2, [r3, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	715a      	strb	r2, [r3, #5]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	719a      	strb	r2, [r3, #6]
 800aca2:	2200      	movs	r2, #0
 800aca4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 800aca6:	887a      	ldrh	r2, [r7, #2]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800acac:	f7f6 fd1a 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800acb0:	f7f6 fcdc 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800acb4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	b2db      	uxtb	r3, r3
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800acce:	f7f6 fd2f 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800acd2:	f7f6 fcbf 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800acd6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	f062 0203 	orn	r2, r2, #3
 800ace0:	701a      	strb	r2, [r3, #0]
 800ace2:	2200      	movs	r2, #0
 800ace4:	705a      	strb	r2, [r3, #1]
 800ace6:	2200      	movs	r2, #0
 800ace8:	709a      	strb	r2, [r3, #2]
 800acea:	2200      	movs	r2, #0
 800acec:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f042 0201 	orr.w	r2, r2, #1
 800acf6:	711a      	strb	r2, [r3, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	715a      	strb	r2, [r3, #5]
 800acfc:	2200      	movs	r2, #0
 800acfe:	719a      	strb	r2, [r3, #6]
 800ad00:	2200      	movs	r2, #0
 800ad02:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 800ad04:	683a      	ldr	r2, [r7, #0]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ad0a:	f7f6 fceb 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ad0e:	f7f6 fcad 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800ad12:	60f8      	str	r0, [r7, #12]
}
 800ad14:	bf00      	nop
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 800ad2a:	f7f6 fd01 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ad2e:	f7f6 fc91 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800ad32:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	2200      	movs	r2, #0
 800ad38:	701a      	strb	r2, [r3, #0]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f042 0201 	orr.w	r2, r2, #1
 800ad40:	705a      	strb	r2, [r3, #1]
 800ad42:	2200      	movs	r2, #0
 800ad44:	709a      	strb	r2, [r3, #2]
 800ad46:	2200      	movs	r2, #0
 800ad48:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f042 0203 	orr.w	r2, r2, #3
 800ad52:	711a      	strb	r2, [r3, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	715a      	strb	r2, [r3, #5]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	719a      	strb	r2, [r3, #6]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800ad72:	f7f6 fcb7 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ad76:	f7f6 fc79 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800ad7a:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	b2db      	uxtb	r3, r3
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 800ad90:	f7f6 fcce 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ad94:	f7f6 fc5e 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800ad98:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f062 0235 	orn	r2, r2, #53	; 0x35
 800ada2:	701a      	strb	r2, [r3, #0]
 800ada4:	2200      	movs	r2, #0
 800ada6:	705a      	strb	r2, [r3, #1]
 800ada8:	2200      	movs	r2, #0
 800adaa:	709a      	strb	r2, [r3, #2]
 800adac:	2200      	movs	r2, #0
 800adae:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	711a      	strb	r2, [r3, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	715a      	strb	r2, [r3, #5]
 800adba:	2200      	movs	r2, #0
 800adbc:	719a      	strb	r2, [r3, #6]
 800adbe:	2200      	movs	r2, #0
 800adc0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800adc2:	f7f6 fc8f 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800adc6:	f7f6 fc51 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800adca:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <otInstanceFinalize>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ade0:	f7f6 fca6 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ade4:	f7f6 fc36 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800ade8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	f062 0233 	orn	r2, r2, #51	; 0x33
 800adf2:	701a      	strb	r2, [r3, #0]
 800adf4:	2200      	movs	r2, #0
 800adf6:	705a      	strb	r2, [r3, #1]
 800adf8:	2200      	movs	r2, #0
 800adfa:	709a      	strb	r2, [r3, #2]
 800adfc:	2200      	movs	r2, #0
 800adfe:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	711a      	strb	r2, [r3, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	715a      	strb	r2, [r3, #5]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	719a      	strb	r2, [r3, #6]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800ae12:	f7f6 fc67 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ae16:	f7f6 fc29 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800ae1a:	60f8      	str	r0, [r7, #12]
}
 800ae1c:	bf00      	nop
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <otSetStateChangedCallback>:
#endif

#if OPENTHREAD_MTD || OPENTHREAD_FTD
otError otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
    void *aContext)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 800ae30:	f7f6 fc7e 	bl	8001730 <Pre_OtCmdProcessing>
  /* Store the callback function */
  otStateChangedCb = aCallback;
 800ae34:	4a15      	ldr	r2, [pc, #84]	; (800ae8c <otSetStateChangedCallback+0x68>)
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6013      	str	r3, [r2, #0]
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ae3a:	f7f6 fc0b 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800ae3e:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f062 0232 	orn	r2, r2, #50	; 0x32
 800ae48:	701a      	strb	r2, [r3, #0]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	705a      	strb	r2, [r3, #1]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	709a      	strb	r2, [r3, #2]
 800ae52:	2200      	movs	r2, #0
 800ae54:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f042 0201 	orr.w	r2, r2, #1
 800ae5e:	711a      	strb	r2, [r3, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	715a      	strb	r2, [r3, #5]
 800ae64:	2200      	movs	r2, #0
 800ae66:	719a      	strb	r2, [r3, #6]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aContext;
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ae72:	f7f6 fc37 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ae76:	f7f6 fbf9 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800ae7a:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	b2db      	uxtb	r3, r3
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	200007c0 	.word	0x200007c0

0800ae90 <otInstanceErasePersistentInfo>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ae98:	f7f6 fc4a 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ae9c:	f7f6 fbda 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800aea0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f062 022c 	orn	r2, r2, #44	; 0x2c
 800aeaa:	701a      	strb	r2, [r3, #0]
 800aeac:	2200      	movs	r2, #0
 800aeae:	705a      	strb	r2, [r3, #1]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	709a      	strb	r2, [r3, #2]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	711a      	strb	r2, [r3, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	715a      	strb	r2, [r3, #5]
 800aec2:	2200      	movs	r2, #0
 800aec4:	719a      	strb	r2, [r3, #6]
 800aec6:	2200      	movs	r2, #0
 800aec8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800aeca:	f7f6 fc0b 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aece:	f7f6 fbcd 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800aed2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	b2db      	uxtb	r3, r3
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b084      	sub	sp, #16
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	460b      	mov	r3, r1
 800aeec:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800aeee:	f7f6 fc1f 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aef2:	f7f6 fbaf 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800aef6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	2200      	movs	r2, #0
 800af04:	705a      	strb	r2, [r3, #1]
 800af06:	2200      	movs	r2, #0
 800af08:	709a      	strb	r2, [r3, #2]
 800af0a:	2200      	movs	r2, #0
 800af0c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f042 0201 	orr.w	r2, r2, #1
 800af16:	711a      	strb	r2, [r3, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	715a      	strb	r2, [r3, #5]
 800af1c:	2200      	movs	r2, #0
 800af1e:	719a      	strb	r2, [r3, #6]
 800af20:	2200      	movs	r2, #0
 800af22:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800af24:	78fa      	ldrb	r2, [r7, #3]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800af2a:	f7f6 fbdb 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800af2e:	f7f6 fb9d 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800af32:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	b2db      	uxtb	r3, r3
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

otError otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	460b      	mov	r3, r1
 800af4c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800af4e:	f7f6 fbef 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800af52:	f7f6 fb7f 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800af56:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f042 0207 	orr.w	r2, r2, #7
 800af60:	701a      	strb	r2, [r3, #0]
 800af62:	2200      	movs	r2, #0
 800af64:	705a      	strb	r2, [r3, #1]
 800af66:	2200      	movs	r2, #0
 800af68:	709a      	strb	r2, [r3, #2]
 800af6a:	2200      	movs	r2, #0
 800af6c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	f042 0201 	orr.w	r2, r2, #1
 800af76:	711a      	strb	r2, [r3, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	715a      	strb	r2, [r3, #5]
 800af7c:	2200      	movs	r2, #0
 800af7e:	719a      	strb	r2, [r3, #6]
 800af80:	2200      	movs	r2, #0
 800af82:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800af84:	78fa      	ldrb	r2, [r7, #3]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800af8a:	f7f6 fbab 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800af8e:	f7f6 fb6d 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800af92:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	b2db      	uxtb	r3, r3
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <otLinkGetFactoryAssignedIeeeEui64>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

void otLinkGetFactoryAssignedIeeeEui64(otInstance *aInstance, otExtAddress *aEui64)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800afac:	f7f6 fbc0 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800afb0:	f7f6 fb50 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800afb4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_GET_FACTORY_ASSIGNED_EUI64;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	f042 020c 	orr.w	r2, r2, #12
 800afbe:	701a      	strb	r2, [r3, #0]
 800afc0:	2200      	movs	r2, #0
 800afc2:	705a      	strb	r2, [r3, #1]
 800afc4:	2200      	movs	r2, #0
 800afc6:	709a      	strb	r2, [r3, #2]
 800afc8:	2200      	movs	r2, #0
 800afca:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f042 0201 	orr.w	r2, r2, #1
 800afd4:	711a      	strb	r2, [r3, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	715a      	strb	r2, [r3, #5]
 800afda:	2200      	movs	r2, #0
 800afdc:	719a      	strb	r2, [r3, #6]
 800afde:	2200      	movs	r2, #0
 800afe0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEui64;
 800afe2:	683a      	ldr	r2, [r7, #0]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800afe8:	f7f6 fb7c 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800afec:	f7f6 fb3e 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800aff0:	60f8      	str	r0, [r7, #12]
}
 800aff2:	bf00      	nop
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

otError otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	460b      	mov	r3, r1
 800b004:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800b006:	f7f6 fb93 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b00a:	f7f6 fb23 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800b00e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f042 020e 	orr.w	r2, r2, #14
 800b018:	701a      	strb	r2, [r3, #0]
 800b01a:	2200      	movs	r2, #0
 800b01c:	705a      	strb	r2, [r3, #1]
 800b01e:	2200      	movs	r2, #0
 800b020:	709a      	strb	r2, [r3, #2]
 800b022:	2200      	movs	r2, #0
 800b024:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f042 0201 	orr.w	r2, r2, #1
 800b02e:	711a      	strb	r2, [r3, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	715a      	strb	r2, [r3, #5]
 800b034:	2200      	movs	r2, #0
 800b036:	719a      	strb	r2, [r3, #6]
 800b038:	2200      	movs	r2, #0
 800b03a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800b03c:	887a      	ldrh	r2, [r7, #2]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800b042:	f7f6 fb4f 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b046:	f7f6 fb11 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800b04a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	b2db      	uxtb	r3, r3
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b084      	sub	sp, #16
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800b064:	f7f6 fb64 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b068:	f7f6 faf4 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800b06c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2200      	movs	r2, #0
 800b072:	f042 0210 	orr.w	r2, r2, #16
 800b076:	701a      	strb	r2, [r3, #0]
 800b078:	2200      	movs	r2, #0
 800b07a:	705a      	strb	r2, [r3, #1]
 800b07c:	2200      	movs	r2, #0
 800b07e:	709a      	strb	r2, [r3, #2]
 800b080:	2200      	movs	r2, #0
 800b082:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	f042 0201 	orr.w	r2, r2, #1
 800b08c:	711a      	strb	r2, [r3, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	715a      	strb	r2, [r3, #5]
 800b092:	2200      	movs	r2, #0
 800b094:	719a      	strb	r2, [r3, #6]
 800b096:	2200      	movs	r2, #0
 800b098:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	683a      	ldr	r2, [r7, #0]
 800b09e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800b0a0:	f7f6 fb20 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b0a4:	f7f6 fae2 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800b0a8:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	b2db      	uxtb	r3, r3
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800b0c0:	f7f6 fb36 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b0c4:	f7f6 fac6 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800b0c8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f042 0216 	orr.w	r2, r2, #22
 800b0d2:	701a      	strb	r2, [r3, #0]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f042 0201 	orr.w	r2, r2, #1
 800b0da:	705a      	strb	r2, [r3, #1]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	709a      	strb	r2, [r3, #2]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f042 0201 	orr.w	r2, r2, #1
 800b0ec:	711a      	strb	r2, [r3, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	715a      	strb	r2, [r3, #5]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	719a      	strb	r2, [r3, #6]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800b100:	f7f6 faf0 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b104:	f7f6 fab2 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800b108:	60f8      	str	r0, [r7, #12]
}
 800b10a:	bf00      	nop
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800b11a:	f7f6 fb09 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b11e:	f7f6 fa99 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800b122:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	f042 0219 	orr.w	r2, r2, #25
 800b12c:	701a      	strb	r2, [r3, #0]
 800b12e:	2200      	movs	r2, #0
 800b130:	f042 0201 	orr.w	r2, r2, #1
 800b134:	705a      	strb	r2, [r3, #1]
 800b136:	2200      	movs	r2, #0
 800b138:	709a      	strb	r2, [r3, #2]
 800b13a:	2200      	movs	r2, #0
 800b13c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f042 0201 	orr.w	r2, r2, #1
 800b146:	711a      	strb	r2, [r3, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	715a      	strb	r2, [r3, #5]
 800b14c:	2200      	movs	r2, #0
 800b14e:	719a      	strb	r2, [r3, #6]
 800b150:	2200      	movs	r2, #0
 800b152:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800b15a:	f7f6 fac3 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b15e:	f7f6 fa85 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800b162:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	b29b      	uxth	r3, r3
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <otMessageAppend>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b086      	sub	sp, #24
 800b176:	af00      	add	r7, sp, #0
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	60b9      	str	r1, [r7, #8]
 800b17c:	4613      	mov	r3, r2
 800b17e:	80fb      	strh	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800b180:	f7f6 fad6 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b184:	f7f6 fa66 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800b188:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f042 021e 	orr.w	r2, r2, #30
 800b192:	701a      	strb	r2, [r3, #0]
 800b194:	2200      	movs	r2, #0
 800b196:	f042 0201 	orr.w	r2, r2, #1
 800b19a:	705a      	strb	r2, [r3, #1]
 800b19c:	2200      	movs	r2, #0
 800b19e:	709a      	strb	r2, [r3, #2]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f042 0203 	orr.w	r2, r2, #3
 800b1ac:	711a      	strb	r2, [r3, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	715a      	strb	r2, [r3, #5]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	719a      	strb	r2, [r3, #6]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aBuf;
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aLength;
 800b1c6:	88fa      	ldrh	r2, [r7, #6]
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800b1cc:	f7f6 fa8a 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b1d0:	f7f6 fa4c 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800b1d4:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	b2db      	uxtb	r3, r3
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3718      	adds	r7, #24
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	607a      	str	r2, [r7, #4]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	817b      	strh	r3, [r7, #10]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 800b1f8:	f7f6 fa9a 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b1fc:	f7f6 fa2a 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800b200:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	2200      	movs	r2, #0
 800b206:	f042 021f 	orr.w	r2, r2, #31
 800b20a:	701a      	strb	r2, [r3, #0]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f042 0201 	orr.w	r2, r2, #1
 800b212:	705a      	strb	r2, [r3, #1]
 800b214:	2200      	movs	r2, #0
 800b216:	709a      	strb	r2, [r3, #2]
 800b218:	2200      	movs	r2, #0
 800b21a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	2200      	movs	r2, #0
 800b220:	f042 0204 	orr.w	r2, r2, #4
 800b224:	711a      	strb	r2, [r3, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	715a      	strb	r2, [r3, #5]
 800b22a:	2200      	movs	r2, #0
 800b22c:	719a      	strb	r2, [r3, #6]
 800b22e:	2200      	movs	r2, #0
 800b230:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 800b238:	897a      	ldrh	r2, [r7, #10]
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 800b244:	893a      	ldrh	r2, [r7, #8]
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800b24a:	f7f6 fa4b 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b24e:	f7f6 fa0d 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800b252:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	b29b      	uxth	r3, r3
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3718      	adds	r7, #24
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800b264:	b5b0      	push	{r4, r5, r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800b26a:	2300      	movs	r3, #0
 800b26c:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800b26e:	f7f6 fa09 	bl	8001684 <THREAD_Get_NotificationPayloadBuffer>
 800b272:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3b01      	subs	r3, #1
 800b27a:	2b48      	cmp	r3, #72	; 0x48
 800b27c:	f200 8543 	bhi.w	800bd06 <OpenThread_CallBack_Processing+0xaa2>
 800b280:	a201      	add	r2, pc, #4	; (adr r2, 800b288 <OpenThread_CallBack_Processing+0x24>)
 800b282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b286:	bf00      	nop
 800b288:	0800b5f3 	.word	0x0800b5f3
 800b28c:	0800b6ab 	.word	0x0800b6ab
 800b290:	0800b703 	.word	0x0800b703
 800b294:	0800b7af 	.word	0x0800b7af
 800b298:	0800b7bb 	.word	0x0800b7bb
 800b29c:	0800b7d9 	.word	0x0800b7d9
 800b2a0:	0800bd07 	.word	0x0800bd07
 800b2a4:	0800b803 	.word	0x0800b803
 800b2a8:	0800b81d 	.word	0x0800b81d
 800b2ac:	0800b851 	.word	0x0800b851
 800b2b0:	0800b86f 	.word	0x0800b86f
 800b2b4:	0800b88d 	.word	0x0800b88d
 800b2b8:	0800bd07 	.word	0x0800bd07
 800b2bc:	0800b8b7 	.word	0x0800b8b7
 800b2c0:	0800b919 	.word	0x0800b919
 800b2c4:	0800b93f 	.word	0x0800b93f
 800b2c8:	0800b95f 	.word	0x0800b95f
 800b2cc:	0800b97d 	.word	0x0800b97d
 800b2d0:	0800bd07 	.word	0x0800bd07
 800b2d4:	0800b9a5 	.word	0x0800b9a5
 800b2d8:	0800b9cd 	.word	0x0800b9cd
 800b2dc:	0800bd07 	.word	0x0800bd07
 800b2e0:	0800b9eb 	.word	0x0800b9eb
 800b2e4:	0800ba0f 	.word	0x0800ba0f
 800b2e8:	0800ba39 	.word	0x0800ba39
 800b2ec:	0800b419 	.word	0x0800b419
 800b2f0:	0800b43d 	.word	0x0800b43d
 800b2f4:	0800b461 	.word	0x0800b461
 800b2f8:	0800b48b 	.word	0x0800b48b
 800b2fc:	0800bd07 	.word	0x0800bd07
 800b300:	0800ba59 	.word	0x0800ba59
 800b304:	0800bd07 	.word	0x0800bd07
 800b308:	0800bd07 	.word	0x0800bd07
 800b30c:	0800bd07 	.word	0x0800bd07
 800b310:	0800bd07 	.word	0x0800bd07
 800b314:	0800bd07 	.word	0x0800bd07
 800b318:	0800b6e1 	.word	0x0800b6e1
 800b31c:	0800b741 	.word	0x0800b741
 800b320:	0800b767 	.word	0x0800b767
 800b324:	0800b78d 	.word	0x0800b78d
 800b328:	0800ba7b 	.word	0x0800ba7b
 800b32c:	0800bab9 	.word	0x0800bab9
 800b330:	0800bad1 	.word	0x0800bad1
 800b334:	0800b60f 	.word	0x0800b60f
 800b338:	0800b675 	.word	0x0800b675
 800b33c:	0800bd07 	.word	0x0800bd07
 800b340:	0800b4b5 	.word	0x0800b4b5
 800b344:	0800b4d5 	.word	0x0800b4d5
 800b348:	0800b4f5 	.word	0x0800b4f5
 800b34c:	0800b515 	.word	0x0800b515
 800b350:	0800b537 	.word	0x0800b537
 800b354:	0800b559 	.word	0x0800b559
 800b358:	0800bd07 	.word	0x0800bd07
 800b35c:	0800bd07 	.word	0x0800bd07
 800b360:	0800b3ad 	.word	0x0800b3ad
 800b364:	0800b3d1 	.word	0x0800b3d1
 800b368:	0800b3f5 	.word	0x0800b3f5
 800b36c:	0800bd07 	.word	0x0800bd07
 800b370:	0800bd07 	.word	0x0800bd07
 800b374:	0800b57b 	.word	0x0800b57b
 800b378:	0800b599 	.word	0x0800b599
 800b37c:	0800bd07 	.word	0x0800bd07
 800b380:	0800b5cb 	.word	0x0800b5cb
 800b384:	0800b68d 	.word	0x0800b68d
 800b388:	0800baff 	.word	0x0800baff
 800b38c:	0800bb1d 	.word	0x0800bb1d
 800b390:	0800bb3b 	.word	0x0800bb3b
 800b394:	0800bbb9 	.word	0x0800bbb9
 800b398:	0800bbe7 	.word	0x0800bbe7
 800b39c:	0800bc2b 	.word	0x0800bc2b
 800b3a0:	0800bc95 	.word	0x0800bc95
 800b3a4:	0800bcd3 	.word	0x0800bcd3
 800b3a8:	0800bc5f 	.word	0x0800bc5f
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 800b3ac:	4b9f      	ldr	r3, [pc, #636]	; (800b62c <OpenThread_CallBack_Processing+0x3c8>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f000 84ab 	beq.w	800bd0c <OpenThread_CallBack_Processing+0xaa8>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800b3b6:	4b9d      	ldr	r3, [pc, #628]	; (800b62c <OpenThread_CallBack_Processing+0x3c8>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	683a      	ldr	r2, [r7, #0]
 800b3bc:	6892      	ldr	r2, [r2, #8]
 800b3be:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800b3c4:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800b3ca:	4798      	blx	r3
    }
    break;
 800b3cc:	f000 bc9e 	b.w	800bd0c <OpenThread_CallBack_Processing+0xaa8>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 800b3d0:	4b97      	ldr	r3, [pc, #604]	; (800b630 <OpenThread_CallBack_Processing+0x3cc>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 849b 	beq.w	800bd10 <OpenThread_CallBack_Processing+0xaac>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800b3da:	4b95      	ldr	r3, [pc, #596]	; (800b630 <OpenThread_CallBack_Processing+0x3cc>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	6892      	ldr	r2, [r2, #8]
 800b3e2:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800b3e8:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800b3ea:	683a      	ldr	r2, [r7, #0]
 800b3ec:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800b3ee:	4798      	blx	r3
    }
    break;
 800b3f0:	f000 bc8e 	b.w	800bd10 <OpenThread_CallBack_Processing+0xaac>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 800b3f4:	4b8f      	ldr	r3, [pc, #572]	; (800b634 <OpenThread_CallBack_Processing+0x3d0>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 848b 	beq.w	800bd14 <OpenThread_CallBack_Processing+0xab0>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800b3fe:	4b8d      	ldr	r3, [pc, #564]	; (800b634 <OpenThread_CallBack_Processing+0x3d0>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	6892      	ldr	r2, [r2, #8]
 800b406:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800b40c:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800b412:	4798      	blx	r3
    }
    break;
 800b414:	f000 bc7e 	b.w	800bd14 <OpenThread_CallBack_Processing+0xab0>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 800b418:	4b87      	ldr	r3, [pc, #540]	; (800b638 <OpenThread_CallBack_Processing+0x3d4>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 847b 	beq.w	800bd18 <OpenThread_CallBack_Processing+0xab4>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800b422:	4b85      	ldr	r3, [pc, #532]	; (800b638 <OpenThread_CallBack_Processing+0x3d4>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	6892      	ldr	r2, [r2, #8]
 800b42a:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800b430:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800b436:	4798      	blx	r3
    }
    break;
 800b438:	f000 bc6e 	b.w	800bd18 <OpenThread_CallBack_Processing+0xab4>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 800b43c:	4b7f      	ldr	r3, [pc, #508]	; (800b63c <OpenThread_CallBack_Processing+0x3d8>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 846b 	beq.w	800bd1c <OpenThread_CallBack_Processing+0xab8>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800b446:	4b7d      	ldr	r3, [pc, #500]	; (800b63c <OpenThread_CallBack_Processing+0x3d8>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	6892      	ldr	r2, [r2, #8]
 800b44e:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800b454:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800b456:	683a      	ldr	r2, [r7, #0]
 800b458:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800b45a:	4798      	blx	r3
    }
    break;
 800b45c:	f000 bc5e 	b.w	800bd1c <OpenThread_CallBack_Processing+0xab8>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 800b460:	4b77      	ldr	r3, [pc, #476]	; (800b640 <OpenThread_CallBack_Processing+0x3dc>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 845b 	beq.w	800bd20 <OpenThread_CallBack_Processing+0xabc>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800b46a:	4b75      	ldr	r3, [pc, #468]	; (800b640 <OpenThread_CallBack_Processing+0x3dc>)
 800b46c:	681c      	ldr	r4, [r3, #0]
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800b478:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800b47e:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800b484:	47a0      	blx	r4
    }
    break;
 800b486:	f000 bc4b 	b.w	800bd20 <OpenThread_CallBack_Processing+0xabc>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 800b48a:	4b6e      	ldr	r3, [pc, #440]	; (800b644 <OpenThread_CallBack_Processing+0x3e0>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f000 8448 	beq.w	800bd24 <OpenThread_CallBack_Processing+0xac0>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800b494:	4b6b      	ldr	r3, [pc, #428]	; (800b644 <OpenThread_CallBack_Processing+0x3e0>)
 800b496:	681c      	ldr	r4, [r3, #0]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800b4a2:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800b4a8:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800b4ae:	47a0      	blx	r4
    }
    break;
 800b4b0:	f000 bc38 	b.w	800bd24 <OpenThread_CallBack_Processing+0xac0>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 800b4b4:	4b64      	ldr	r3, [pc, #400]	; (800b648 <OpenThread_CallBack_Processing+0x3e4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f000 8435 	beq.w	800bd28 <OpenThread_CallBack_Processing+0xac4>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800b4be:	4b62      	ldr	r3, [pc, #392]	; (800b648 <OpenThread_CallBack_Processing+0x3e4>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	6892      	ldr	r2, [r2, #8]
 800b4c6:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	4798      	blx	r3
    }
    break;
 800b4d0:	f000 bc2a 	b.w	800bd28 <OpenThread_CallBack_Processing+0xac4>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 800b4d4:	4b5d      	ldr	r3, [pc, #372]	; (800b64c <OpenThread_CallBack_Processing+0x3e8>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 8427 	beq.w	800bd2c <OpenThread_CallBack_Processing+0xac8>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800b4de:	4b5b      	ldr	r3, [pc, #364]	; (800b64c <OpenThread_CallBack_Processing+0x3e8>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	6892      	ldr	r2, [r2, #8]
 800b4e6:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800b4e8:	683a      	ldr	r2, [r7, #0]
 800b4ea:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800b4ec:	4611      	mov	r1, r2
 800b4ee:	4798      	blx	r3
    }
    break;
 800b4f0:	f000 bc1c 	b.w	800bd2c <OpenThread_CallBack_Processing+0xac8>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 800b4f4:	4b56      	ldr	r3, [pc, #344]	; (800b650 <OpenThread_CallBack_Processing+0x3ec>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 8419 	beq.w	800bd30 <OpenThread_CallBack_Processing+0xacc>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800b4fe:	4b54      	ldr	r3, [pc, #336]	; (800b650 <OpenThread_CallBack_Processing+0x3ec>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	6892      	ldr	r2, [r2, #8]
 800b506:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800b50c:	4611      	mov	r1, r2
 800b50e:	4798      	blx	r3
    }
    break;
 800b510:	f000 bc0e 	b.w	800bd30 <OpenThread_CallBack_Processing+0xacc>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 800b514:	4b4f      	ldr	r3, [pc, #316]	; (800b654 <OpenThread_CallBack_Processing+0x3f0>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 840b 	beq.w	800bd34 <OpenThread_CallBack_Processing+0xad0>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 800b51e:	4b4d      	ldr	r3, [pc, #308]	; (800b654 <OpenThread_CallBack_Processing+0x3f0>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	6892      	ldr	r2, [r2, #8]
 800b526:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800b52c:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800b532:	4798      	blx	r3
    }
    break;
 800b534:	e3fe      	b.n	800bd34 <OpenThread_CallBack_Processing+0xad0>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 800b536:	4b48      	ldr	r3, [pc, #288]	; (800b658 <OpenThread_CallBack_Processing+0x3f4>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f000 83fc 	beq.w	800bd38 <OpenThread_CallBack_Processing+0xad4>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 800b540:	4b45      	ldr	r3, [pc, #276]	; (800b658 <OpenThread_CallBack_Processing+0x3f4>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	6892      	ldr	r2, [r2, #8]
 800b548:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 800b54e:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 800b554:	4798      	blx	r3
    }
    break;
 800b556:	e3ef      	b.n	800bd38 <OpenThread_CallBack_Processing+0xad4>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 800b558:	4b3f      	ldr	r3, [pc, #252]	; (800b658 <OpenThread_CallBack_Processing+0x3f4>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f000 83ed 	beq.w	800bd3c <OpenThread_CallBack_Processing+0xad8>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 800b562:	4b3e      	ldr	r3, [pc, #248]	; (800b65c <OpenThread_CallBack_Processing+0x3f8>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	6892      	ldr	r2, [r2, #8]
 800b56a:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 800b570:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 800b576:	4798      	blx	r3
    }
    break;
 800b578:	e3e0      	b.n	800bd3c <OpenThread_CallBack_Processing+0xad8>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 800b57a:	4b39      	ldr	r3, [pc, #228]	; (800b660 <OpenThread_CallBack_Processing+0x3fc>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 83de 	beq.w	800bd40 <OpenThread_CallBack_Processing+0xadc>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800b584:	4b36      	ldr	r3, [pc, #216]	; (800b660 <OpenThread_CallBack_Processing+0x3fc>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	6892      	ldr	r2, [r2, #8]
 800b58c:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800b592:	4611      	mov	r1, r2
 800b594:	4798      	blx	r3
    }
    break;
 800b596:	e3d3      	b.n	800bd40 <OpenThread_CallBack_Processing+0xadc>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 800b598:	4b32      	ldr	r3, [pc, #200]	; (800b664 <OpenThread_CallBack_Processing+0x400>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 83d1 	beq.w	800bd44 <OpenThread_CallBack_Processing+0xae0>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 800b5a2:	4b30      	ldr	r3, [pc, #192]	; (800b664 <OpenThread_CallBack_Processing+0x400>)
 800b5a4:	681c      	ldr	r4, [r3, #0]
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 800b5b0:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 800b5b6:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 800b5bc:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	462b      	mov	r3, r5
 800b5c6:	47a0      	blx	r4
    }
    break;
 800b5c8:	e3bc      	b.n	800bd44 <OpenThread_CallBack_Processing+0xae0>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 800b5ca:	4b27      	ldr	r3, [pc, #156]	; (800b668 <OpenThread_CallBack_Processing+0x404>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 83ba 	beq.w	800bd48 <OpenThread_CallBack_Processing+0xae4>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800b5d4:	4b24      	ldr	r3, [pc, #144]	; (800b668 <OpenThread_CallBack_Processing+0x404>)
 800b5d6:	681c      	ldr	r4, [r3, #0]
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800b5e2:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800b5e8:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800b5ee:	47a0      	blx	r4
    }
    break;
 800b5f0:	e3aa      	b.n	800bd48 <OpenThread_CallBack_Processing+0xae4>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 800b5f2:	4b1e      	ldr	r3, [pc, #120]	; (800b66c <OpenThread_CallBack_Processing+0x408>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 83a8 	beq.w	800bd4c <OpenThread_CallBack_Processing+0xae8>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800b5fc:	4b1b      	ldr	r3, [pc, #108]	; (800b66c <OpenThread_CallBack_Processing+0x408>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	683a      	ldr	r2, [r7, #0]
 800b602:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800b608:	4611      	mov	r1, r2
 800b60a:	4798      	blx	r3
    }
    break;
 800b60c:	e39e      	b.n	800bd4c <OpenThread_CallBack_Processing+0xae8>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 800b60e:	4b18      	ldr	r3, [pc, #96]	; (800b670 <OpenThread_CallBack_Processing+0x40c>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	f000 839c 	beq.w	800bd50 <OpenThread_CallBack_Processing+0xaec>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800b618:	4b15      	ldr	r3, [pc, #84]	; (800b670 <OpenThread_CallBack_Processing+0x40c>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	683a      	ldr	r2, [r7, #0]
 800b61e:	6892      	ldr	r2, [r2, #8]
 800b620:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800b626:	4611      	mov	r1, r2
 800b628:	4798      	blx	r3
    }
    break;
 800b62a:	e391      	b.n	800bd50 <OpenThread_CallBack_Processing+0xaec>
 800b62c:	20000854 	.word	0x20000854
 800b630:	2000085c 	.word	0x2000085c
 800b634:	20000858 	.word	0x20000858
 800b638:	200007e8 	.word	0x200007e8
 800b63c:	200007e4 	.word	0x200007e4
 800b640:	200007ec 	.word	0x200007ec
 800b644:	200007e0 	.word	0x200007e0
 800b648:	20000860 	.word	0x20000860
 800b64c:	20000864 	.word	0x20000864
 800b650:	20000868 	.word	0x20000868
 800b654:	20000870 	.word	0x20000870
 800b658:	2000086c 	.word	0x2000086c
 800b65c:	20000874 	.word	0x20000874
 800b660:	20000880 	.word	0x20000880
 800b664:	2000087c 	.word	0x2000087c
 800b668:	20000878 	.word	0x20000878
 800b66c:	200007c0 	.word	0x200007c0
 800b670:	200007f0 	.word	0x200007f0
  case MSG_M0TOM4_THREAD_DETACH_GRACEFULLY_CB:
    if (otDetachGracefullyCb != NULL)
 800b674:	4b97      	ldr	r3, [pc, #604]	; (800b8d4 <OpenThread_CallBack_Processing+0x670>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 836b 	beq.w	800bd54 <OpenThread_CallBack_Processing+0xaf0>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 800b67e:	4b95      	ldr	r3, [pc, #596]	; (800b8d4 <OpenThread_CallBack_Processing+0x670>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	6892      	ldr	r2, [r2, #8]
 800b686:	4610      	mov	r0, r2
 800b688:	4798      	blx	r3
    }
    break;
 800b68a:	e363      	b.n	800bd54 <OpenThread_CallBack_Processing+0xaf0>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 800b68c:	4b92      	ldr	r3, [pc, #584]	; (800b8d8 <OpenThread_CallBack_Processing+0x674>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	f000 8361 	beq.w	800bd58 <OpenThread_CallBack_Processing+0xaf4>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800b696:	4b90      	ldr	r3, [pc, #576]	; (800b8d8 <OpenThread_CallBack_Processing+0x674>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	6892      	ldr	r2, [r2, #8]
 800b69e:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	4798      	blx	r3
    }
    break;
 800b6a8:	e356      	b.n	800bd58 <OpenThread_CallBack_Processing+0xaf4>
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	4b8a      	ldr	r3, [pc, #552]	; (800b8dc <OpenThread_CallBack_Processing+0x678>)
 800b6b2:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 800b6b4:	4b89      	ldr	r3, [pc, #548]	; (800b8dc <OpenThread_CallBack_Processing+0x678>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	4a89      	ldr	r2, [pc, #548]	; (800b8e0 <OpenThread_CallBack_Processing+0x67c>)
 800b6bc:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 800b6be:	4b88      	ldr	r3, [pc, #544]	; (800b8e0 <OpenThread_CallBack_Processing+0x67c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f000 834a 	beq.w	800bd5c <OpenThread_CallBack_Processing+0xaf8>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800b6c8:	4b85      	ldr	r3, [pc, #532]	; (800b8e0 <OpenThread_CallBack_Processing+0x67c>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a83      	ldr	r2, [pc, #524]	; (800b8dc <OpenThread_CallBack_Processing+0x678>)
 800b6ce:	6812      	ldr	r2, [r2, #0]
 800b6d0:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800b6d6:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800b6dc:	4798      	blx	r3
    }
    break;
 800b6de:	e33d      	b.n	800bd5c <OpenThread_CallBack_Processing+0xaf8>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 800b6e0:	4b80      	ldr	r3, [pc, #512]	; (800b8e4 <OpenThread_CallBack_Processing+0x680>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f000 833b 	beq.w	800bd60 <OpenThread_CallBack_Processing+0xafc>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800b6ea:	4b7e      	ldr	r3, [pc, #504]	; (800b8e4 <OpenThread_CallBack_Processing+0x680>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	6892      	ldr	r2, [r2, #8]
 800b6f2:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800b6f8:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800b6fe:	4798      	blx	r3
    }
    break;
 800b700:	e32e      	b.n	800bd60 <OpenThread_CallBack_Processing+0xafc>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	461a      	mov	r2, r3
 800b708:	4b77      	ldr	r3, [pc, #476]	; (800b8e8 <OpenThread_CallBack_Processing+0x684>)
 800b70a:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800b70c:	4b76      	ldr	r3, [pc, #472]	; (800b8e8 <OpenThread_CallBack_Processing+0x684>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	4a76      	ldr	r2, [pc, #472]	; (800b8ec <OpenThread_CallBack_Processing+0x688>)
 800b714:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 800b716:	4b75      	ldr	r3, [pc, #468]	; (800b8ec <OpenThread_CallBack_Processing+0x688>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f000 8322 	beq.w	800bd64 <OpenThread_CallBack_Processing+0xb00>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800b720:	4b72      	ldr	r3, [pc, #456]	; (800b8ec <OpenThread_CallBack_Processing+0x688>)
 800b722:	681c      	ldr	r4, [r3, #0]
 800b724:	4b70      	ldr	r3, [pc, #448]	; (800b8e8 <OpenThread_CallBack_Processing+0x684>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800b72e:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800b734:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	47a0      	blx	r4
    }
    break;
 800b73e:	e311      	b.n	800bd64 <OpenThread_CallBack_Processing+0xb00>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800b740:	4b6b      	ldr	r3, [pc, #428]	; (800b8f0 <OpenThread_CallBack_Processing+0x68c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 830f 	beq.w	800bd68 <OpenThread_CallBack_Processing+0xb04>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800b74a:	4b69      	ldr	r3, [pc, #420]	; (800b8f0 <OpenThread_CallBack_Processing+0x68c>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	6892      	ldr	r2, [r2, #8]
 800b752:	2a00      	cmp	r2, #0
 800b754:	bf14      	ite	ne
 800b756:	2201      	movne	r2, #1
 800b758:	2200      	moveq	r2, #0
 800b75a:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800b760:	4611      	mov	r1, r2
 800b762:	4798      	blx	r3
    }
    break;
 800b764:	e300      	b.n	800bd68 <OpenThread_CallBack_Processing+0xb04>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800b766:	4b62      	ldr	r3, [pc, #392]	; (800b8f0 <OpenThread_CallBack_Processing+0x68c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 82fe 	beq.w	800bd6c <OpenThread_CallBack_Processing+0xb08>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800b770:	4b5f      	ldr	r3, [pc, #380]	; (800b8f0 <OpenThread_CallBack_Processing+0x68c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	683a      	ldr	r2, [r7, #0]
 800b776:	6892      	ldr	r2, [r2, #8]
 800b778:	2a00      	cmp	r2, #0
 800b77a:	bf14      	ite	ne
 800b77c:	2201      	movne	r2, #1
 800b77e:	2200      	moveq	r2, #0
 800b780:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800b786:	4611      	mov	r1, r2
 800b788:	4798      	blx	r3
    }
    break;
 800b78a:	e2ef      	b.n	800bd6c <OpenThread_CallBack_Processing+0xb08>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 800b78c:	4b59      	ldr	r3, [pc, #356]	; (800b8f4 <OpenThread_CallBack_Processing+0x690>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 82ed 	beq.w	800bd70 <OpenThread_CallBack_Processing+0xb0c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800b796:	4b57      	ldr	r3, [pc, #348]	; (800b8f4 <OpenThread_CallBack_Processing+0x690>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	6892      	ldr	r2, [r2, #8]
 800b79e:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800b7a4:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800b7aa:	4798      	blx	r3
    }
    break;
 800b7ac:	e2e0      	b.n	800bd70 <OpenThread_CallBack_Processing+0xb0c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	f000 fb45 	bl	800be3e <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 800b7b4:	f7f9 f851 	bl	800485a <HAL_NVIC_SystemReset>
    break;
 800b7b8:	e317      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 800b7ba:	4b4f      	ldr	r3, [pc, #316]	; (800b8f8 <OpenThread_CallBack_Processing+0x694>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f000 82d8 	beq.w	800bd74 <OpenThread_CallBack_Processing+0xb10>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800b7c4:	4b4c      	ldr	r3, [pc, #304]	; (800b8f8 <OpenThread_CallBack_Processing+0x694>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	683a      	ldr	r2, [r7, #0]
 800b7ca:	6892      	ldr	r2, [r2, #8]
 800b7cc:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	4798      	blx	r3
    }
    break;
 800b7d6:	e2cd      	b.n	800bd74 <OpenThread_CallBack_Processing+0xb10>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 800b7d8:	4b48      	ldr	r3, [pc, #288]	; (800b8fc <OpenThread_CallBack_Processing+0x698>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 82cb 	beq.w	800bd78 <OpenThread_CallBack_Processing+0xb14>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800b7e2:	4b46      	ldr	r3, [pc, #280]	; (800b8fc <OpenThread_CallBack_Processing+0x698>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	683a      	ldr	r2, [r7, #0]
 800b7e8:	6892      	ldr	r2, [r2, #8]
 800b7ea:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 800b7ec:	683a      	ldr	r2, [r7, #0]
 800b7ee:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800b7f0:	2a00      	cmp	r2, #0
 800b7f2:	bf14      	ite	ne
 800b7f4:	2201      	movne	r2, #1
 800b7f6:	2200      	moveq	r2, #0
 800b7f8:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800b7fa:	683a      	ldr	r2, [r7, #0]
 800b7fc:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800b7fe:	4798      	blx	r3
    }
    break;
 800b800:	e2ba      	b.n	800bd78 <OpenThread_CallBack_Processing+0xb14>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 800b802:	4b3f      	ldr	r3, [pc, #252]	; (800b900 <OpenThread_CallBack_Processing+0x69c>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 82b8 	beq.w	800bd7c <OpenThread_CallBack_Processing+0xb18>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 800b80c:	4b3c      	ldr	r3, [pc, #240]	; (800b900 <OpenThread_CallBack_Processing+0x69c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 800b814:	4611      	mov	r1, r2
 800b816:	2000      	movs	r0, #0
 800b818:	4798      	blx	r3
    }
    break;
 800b81a:	e2af      	b.n	800bd7c <OpenThread_CallBack_Processing+0xb18>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 800b81c:	4b39      	ldr	r3, [pc, #228]	; (800b904 <OpenThread_CallBack_Processing+0x6a0>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 82ad 	beq.w	800bd80 <OpenThread_CallBack_Processing+0xb1c>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800b826:	4b37      	ldr	r3, [pc, #220]	; (800b904 <OpenThread_CallBack_Processing+0x6a0>)
 800b828:	681c      	ldr	r4, [r3, #0]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800b834:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800b83a:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800b840:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800b846:	b2db      	uxtb	r3, r3
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	462b      	mov	r3, r5
 800b84c:	47a0      	blx	r4
    }
    break;
 800b84e:	e297      	b.n	800bd80 <OpenThread_CallBack_Processing+0xb1c>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 800b850:	4b2d      	ldr	r3, [pc, #180]	; (800b908 <OpenThread_CallBack_Processing+0x6a4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 8295 	beq.w	800bd84 <OpenThread_CallBack_Processing+0xb20>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800b85a:	4b2b      	ldr	r3, [pc, #172]	; (800b908 <OpenThread_CallBack_Processing+0x6a4>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	6892      	ldr	r2, [r2, #8]
 800b862:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800b864:	683a      	ldr	r2, [r7, #0]
 800b866:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800b868:	4611      	mov	r1, r2
 800b86a:	4798      	blx	r3
    }
    break;
 800b86c:	e28a      	b.n	800bd84 <OpenThread_CallBack_Processing+0xb20>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 800b86e:	4b27      	ldr	r3, [pc, #156]	; (800b90c <OpenThread_CallBack_Processing+0x6a8>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 8288 	beq.w	800bd88 <OpenThread_CallBack_Processing+0xb24>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800b878:	4b24      	ldr	r3, [pc, #144]	; (800b90c <OpenThread_CallBack_Processing+0x6a8>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	6892      	ldr	r2, [r2, #8]
 800b880:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800b886:	4611      	mov	r1, r2
 800b888:	4798      	blx	r3
    }
    break;
 800b88a:	e27d      	b.n	800bd88 <OpenThread_CallBack_Processing+0xb24>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 800b88c:	4b20      	ldr	r3, [pc, #128]	; (800b910 <OpenThread_CallBack_Processing+0x6ac>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 827b 	beq.w	800bd8c <OpenThread_CallBack_Processing+0xb28>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800b896:	4b1e      	ldr	r3, [pc, #120]	; (800b910 <OpenThread_CallBack_Processing+0x6ac>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	6892      	ldr	r2, [r2, #8]
 800b89e:	4610      	mov	r0, r2
          p_notification->Data[1],
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800b8a4:	2a00      	cmp	r2, #0
 800b8a6:	bf14      	ite	ne
 800b8a8:	2201      	movne	r2, #1
 800b8aa:	2200      	moveq	r2, #0
 800b8ac:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800b8b2:	4798      	blx	r3
    }
    break;
 800b8b4:	e26a      	b.n	800bd8c <OpenThread_CallBack_Processing+0xb28>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 800b8b6:	4b17      	ldr	r3, [pc, #92]	; (800b914 <OpenThread_CallBack_Processing+0x6b0>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f000 8268 	beq.w	800bd90 <OpenThread_CallBack_Processing+0xb2c>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800b8c0:	4b14      	ldr	r3, [pc, #80]	; (800b914 <OpenThread_CallBack_Processing+0x6b0>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	683a      	ldr	r2, [r7, #0]
 800b8c6:	6892      	ldr	r2, [r2, #8]
 800b8c8:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	4798      	blx	r3
    }
    break;
 800b8d2:	e25d      	b.n	800bd90 <OpenThread_CallBack_Processing+0xb2c>
 800b8d4:	200007f4 	.word	0x200007f4
 800b8d8:	200007f8 	.word	0x200007f8
 800b8dc:	2000083c 	.word	0x2000083c
 800b8e0:	20000830 	.word	0x20000830
 800b8e4:	20000834 	.word	0x20000834
 800b8e8:	20000840 	.word	0x20000840
 800b8ec:	20000838 	.word	0x20000838
 800b8f0:	20000848 	.word	0x20000848
 800b8f4:	20000844 	.word	0x20000844
 800b8f8:	200007c8 	.word	0x200007c8
 800b8fc:	200007cc 	.word	0x200007cc
 800b900:	200007c4 	.word	0x200007c4
 800b904:	200007d0 	.word	0x200007d0
 800b908:	200007d4 	.word	0x200007d4
 800b90c:	200007d8 	.word	0x200007d8
 800b910:	200007dc 	.word	0x200007dc
 800b914:	200007fc 	.word	0x200007fc
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 800b918:	4b95      	ldr	r3, [pc, #596]	; (800bb70 <OpenThread_CallBack_Processing+0x90c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 8239 	beq.w	800bd94 <OpenThread_CallBack_Processing+0xb30>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800b922:	4b93      	ldr	r3, [pc, #588]	; (800bb70 <OpenThread_CallBack_Processing+0x90c>)
 800b924:	681c      	ldr	r4, [r3, #0]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800b92e:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800b934:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800b93a:	47a0      	blx	r4
    }
    break;
 800b93c:	e22a      	b.n	800bd94 <OpenThread_CallBack_Processing+0xb30>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 800b93e:	4b8d      	ldr	r3, [pc, #564]	; (800bb74 <OpenThread_CallBack_Processing+0x910>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	f000 8228 	beq.w	800bd98 <OpenThread_CallBack_Processing+0xb34>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800b948:	4b8a      	ldr	r3, [pc, #552]	; (800bb74 <OpenThread_CallBack_Processing+0x910>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	6892      	ldr	r2, [r2, #8]
 800b950:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800b95a:	4798      	blx	r3
    }
    break;
 800b95c:	e21c      	b.n	800bd98 <OpenThread_CallBack_Processing+0xb34>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 800b95e:	4b86      	ldr	r3, [pc, #536]	; (800bb78 <OpenThread_CallBack_Processing+0x914>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 821a 	beq.w	800bd9c <OpenThread_CallBack_Processing+0xb38>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800b968:	4b83      	ldr	r3, [pc, #524]	; (800bb78 <OpenThread_CallBack_Processing+0x914>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	6892      	ldr	r2, [r2, #8]
 800b970:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800b976:	4611      	mov	r1, r2
 800b978:	4798      	blx	r3
    }
    break;
 800b97a:	e20f      	b.n	800bd9c <OpenThread_CallBack_Processing+0xb38>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 800b97c:	4b7f      	ldr	r3, [pc, #508]	; (800bb7c <OpenThread_CallBack_Processing+0x918>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 820d 	beq.w	800bda0 <OpenThread_CallBack_Processing+0xb3c>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800b986:	4b7d      	ldr	r3, [pc, #500]	; (800bb7c <OpenThread_CallBack_Processing+0x918>)
 800b988:	681c      	ldr	r4, [r3, #0]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800b994:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800b99a:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800b9a0:	47a0      	blx	r4
    }
    break;
 800b9a2:	e1fd      	b.n	800bda0 <OpenThread_CallBack_Processing+0xb3c>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 800b9a4:	4b76      	ldr	r3, [pc, #472]	; (800bb80 <OpenThread_CallBack_Processing+0x91c>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f000 81fb 	beq.w	800bda4 <OpenThread_CallBack_Processing+0xb40>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800b9ae:	4b74      	ldr	r3, [pc, #464]	; (800bb80 <OpenThread_CallBack_Processing+0x91c>)
 800b9b0:	681c      	ldr	r4, [r3, #0]
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800b9bc:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800b9c2:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800b9c8:	47a0      	blx	r4
    }
    break;
 800b9ca:	e1eb      	b.n	800bda4 <OpenThread_CallBack_Processing+0xb40>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 800b9cc:	4b6d      	ldr	r3, [pc, #436]	; (800bb84 <OpenThread_CallBack_Processing+0x920>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f000 81e9 	beq.w	800bda8 <OpenThread_CallBack_Processing+0xb44>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800b9d6:	4b6b      	ldr	r3, [pc, #428]	; (800bb84 <OpenThread_CallBack_Processing+0x920>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	6892      	ldr	r2, [r2, #8]
 800b9de:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800b9e0:	683a      	ldr	r2, [r7, #0]
 800b9e2:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4798      	blx	r3
    }
    break;
 800b9e8:	e1de      	b.n	800bda8 <OpenThread_CallBack_Processing+0xb44>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 800b9ea:	4b67      	ldr	r3, [pc, #412]	; (800bb88 <OpenThread_CallBack_Processing+0x924>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 81dc 	beq.w	800bdac <OpenThread_CallBack_Processing+0xb48>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800b9f4:	4b64      	ldr	r3, [pc, #400]	; (800bb88 <OpenThread_CallBack_Processing+0x924>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	6892      	ldr	r2, [r2, #8]
 800b9fc:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800ba02:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800ba08:	b2d2      	uxtb	r2, r2
 800ba0a:	4798      	blx	r3
    }
    break;
 800ba0c:	e1ce      	b.n	800bdac <OpenThread_CallBack_Processing+0xb48>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 800ba0e:	4b5f      	ldr	r3, [pc, #380]	; (800bb8c <OpenThread_CallBack_Processing+0x928>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 81cc 	beq.w	800bdb0 <OpenThread_CallBack_Processing+0xb4c>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800ba18:	4b5c      	ldr	r3, [pc, #368]	; (800bb8c <OpenThread_CallBack_Processing+0x928>)
 800ba1a:	681c      	ldr	r4, [r3, #0]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800ba26:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800ba2c:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	47a0      	blx	r4
    }
    break;
 800ba36:	e1bb      	b.n	800bdb0 <OpenThread_CallBack_Processing+0xb4c>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 800ba38:	4b55      	ldr	r3, [pc, #340]	; (800bb90 <OpenThread_CallBack_Processing+0x92c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 81b9 	beq.w	800bdb4 <OpenThread_CallBack_Processing+0xb50>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800ba42:	4b53      	ldr	r3, [pc, #332]	; (800bb90 <OpenThread_CallBack_Processing+0x92c>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	6892      	ldr	r2, [r2, #8]
 800ba4a:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800ba50:	b252      	sxtb	r2, r2
 800ba52:	4611      	mov	r1, r2
 800ba54:	4798      	blx	r3
    }
    break;
 800ba56:	e1ad      	b.n	800bdb4 <OpenThread_CallBack_Processing+0xb50>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 800ba58:	4b4e      	ldr	r3, [pc, #312]	; (800bb94 <OpenThread_CallBack_Processing+0x930>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f000 81ab 	beq.w	800bdb8 <OpenThread_CallBack_Processing+0xb54>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 800ba62:	4b4c      	ldr	r3, [pc, #304]	; (800bb94 <OpenThread_CallBack_Processing+0x930>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	6892      	ldr	r2, [r2, #8]
 800ba6a:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800ba70:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800ba76:	4798      	blx	r3
    }
    break;
 800ba78:	e19e      	b.n	800bdb8 <OpenThread_CallBack_Processing+0xb54>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	4b45      	ldr	r3, [pc, #276]	; (800bb98 <OpenThread_CallBack_Processing+0x934>)
 800ba82:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 800ba84:	4b44      	ldr	r3, [pc, #272]	; (800bb98 <OpenThread_CallBack_Processing+0x934>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	4a44      	ldr	r2, [pc, #272]	; (800bb9c <OpenThread_CallBack_Processing+0x938>)
 800ba8c:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 800ba8e:	4b43      	ldr	r3, [pc, #268]	; (800bb9c <OpenThread_CallBack_Processing+0x938>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f000 8192 	beq.w	800bdbc <OpenThread_CallBack_Processing+0xb58>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800ba98:	4b40      	ldr	r3, [pc, #256]	; (800bb9c <OpenThread_CallBack_Processing+0x938>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a3e      	ldr	r2, [pc, #248]	; (800bb98 <OpenThread_CallBack_Processing+0x934>)
 800ba9e:	6812      	ldr	r2, [r2, #0]
 800baa0:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800baa6:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800baac:	4798      	blx	r3
 800baae:	4603      	mov	r3, r0
 800bab0:	461a      	mov	r2, r3
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	609a      	str	r2, [r3, #8]
      }
      break;
 800bab6:	e181      	b.n	800bdbc <OpenThread_CallBack_Processing+0xb58>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 800bab8:	4b39      	ldr	r3, [pc, #228]	; (800bba0 <OpenThread_CallBack_Processing+0x93c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	f000 817f 	beq.w	800bdc0 <OpenThread_CallBack_Processing+0xb5c>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 800bac2:	4b37      	ldr	r3, [pc, #220]	; (800bba0 <OpenThread_CallBack_Processing+0x93c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	6892      	ldr	r2, [r2, #8]
 800baca:	4610      	mov	r0, r2
 800bacc:	4798      	blx	r3
    }
    break;
 800bace:	e177      	b.n	800bdc0 <OpenThread_CallBack_Processing+0xb5c>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 800bad0:	4b34      	ldr	r3, [pc, #208]	; (800bba4 <OpenThread_CallBack_Processing+0x940>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 8175 	beq.w	800bdc4 <OpenThread_CallBack_Processing+0xb60>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800bada:	4b32      	ldr	r3, [pc, #200]	; (800bba4 <OpenThread_CallBack_Processing+0x940>)
 800badc:	6819      	ldr	r1, [r3, #0]
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800bae8:	2200      	movs	r2, #0
 800baea:	461c      	mov	r4, r3
 800baec:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	4622      	mov	r2, r4
 800baf8:	462b      	mov	r3, r5
 800bafa:	4788      	blx	r1
    }
    break;
 800bafc:	e162      	b.n	800bdc4 <OpenThread_CallBack_Processing+0xb60>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 800bafe:	4b2a      	ldr	r3, [pc, #168]	; (800bba8 <OpenThread_CallBack_Processing+0x944>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f000 8160 	beq.w	800bdc8 <OpenThread_CallBack_Processing+0xb64>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800bb08:	4b27      	ldr	r3, [pc, #156]	; (800bba8 <OpenThread_CallBack_Processing+0x944>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	6892      	ldr	r2, [r2, #8]
 800bb10:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800bb16:	4611      	mov	r1, r2
 800bb18:	4798      	blx	r3
    }
    break;
 800bb1a:	e155      	b.n	800bdc8 <OpenThread_CallBack_Processing+0xb64>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 800bb1c:	4b23      	ldr	r3, [pc, #140]	; (800bbac <OpenThread_CallBack_Processing+0x948>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 8153 	beq.w	800bdcc <OpenThread_CallBack_Processing+0xb68>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800bb26:	4b21      	ldr	r3, [pc, #132]	; (800bbac <OpenThread_CallBack_Processing+0x948>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	6892      	ldr	r2, [r2, #8]
 800bb2e:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800bb30:	683a      	ldr	r2, [r7, #0]
 800bb32:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800bb34:	4611      	mov	r1, r2
 800bb36:	4798      	blx	r3
    }
    break;
 800bb38:	e148      	b.n	800bdcc <OpenThread_CallBack_Processing+0xb68>
//      otTcpBytesAckedCb((otTcpEndpoint *) p_notification->Data[0],
//          (size_t) p_notification->Data[1]);
//    }
//    break;
  case MSG_M0TOM4_TCP_DISCONNECTED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bb42:	4a1b      	ldr	r2, [pc, #108]	; (800bbb0 <OpenThread_CallBack_Processing+0x94c>)
 800bb44:	6013      	str	r3, [r2, #0]

    otTcpDisconnectedCb = mySTTcpEndpointHandlerContext->mDisconnectedCallback;
 800bb46:	4b1a      	ldr	r3, [pc, #104]	; (800bbb0 <OpenThread_CallBack_Processing+0x94c>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	4a19      	ldr	r2, [pc, #100]	; (800bbb4 <OpenThread_CallBack_Processing+0x950>)
 800bb4e:	6013      	str	r3, [r2, #0]

    if (otTcpDisconnectedCb != NULL)
 800bb50:	4b18      	ldr	r3, [pc, #96]	; (800bbb4 <OpenThread_CallBack_Processing+0x950>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 813b 	beq.w	800bdd0 <OpenThread_CallBack_Processing+0xb6c>
    {
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800bb5a:	4b16      	ldr	r3, [pc, #88]	; (800bbb4 <OpenThread_CallBack_Processing+0x950>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	6892      	ldr	r2, [r2, #8]
 800bb62:	4610      	mov	r0, r2
          (otTcpDisconnectedReason) p_notification->Data[1]);
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	68d2      	ldr	r2, [r2, #12]
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800bb68:	b2d2      	uxtb	r2, r2
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	4798      	blx	r3
    }
    break;
 800bb6e:	e12f      	b.n	800bdd0 <OpenThread_CallBack_Processing+0xb6c>
 800bb70:	20000808 	.word	0x20000808
 800bb74:	2000080c 	.word	0x2000080c
 800bb78:	20000800 	.word	0x20000800
 800bb7c:	20000804 	.word	0x20000804
 800bb80:	20000810 	.word	0x20000810
 800bb84:	20000814 	.word	0x20000814
 800bb88:	20000818 	.word	0x20000818
 800bb8c:	2000081c 	.word	0x2000081c
 800bb90:	20000820 	.word	0x20000820
 800bb94:	20000824 	.word	0x20000824
 800bb98:	2000082c 	.word	0x2000082c
 800bb9c:	20000828 	.word	0x20000828
 800bba0:	2000084c 	.word	0x2000084c
 800bba4:	20000850 	.word	0x20000850
 800bba8:	20000884 	.word	0x20000884
 800bbac:	20000888 	.word	0x20000888
 800bbb0:	2000088c 	.word	0x2000088c
 800bbb4:	20000894 	.word	0x20000894
  case MSG_M0TOM4_TCP_ESTABLISHED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bbc0:	4a8d      	ldr	r2, [pc, #564]	; (800bdf8 <OpenThread_CallBack_Processing+0xb94>)
 800bbc2:	6013      	str	r3, [r2, #0]

    otTcpEstablishedCb = mySTTcpEndpointHandlerContext->mEstablishedCallback;
 800bbc4:	4b8c      	ldr	r3, [pc, #560]	; (800bdf8 <OpenThread_CallBack_Processing+0xb94>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	4a8c      	ldr	r2, [pc, #560]	; (800bdfc <OpenThread_CallBack_Processing+0xb98>)
 800bbcc:	6013      	str	r3, [r2, #0]

    if (otTcpEstablishedCb != NULL)
 800bbce:	4b8b      	ldr	r3, [pc, #556]	; (800bdfc <OpenThread_CallBack_Processing+0xb98>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 80fe 	beq.w	800bdd4 <OpenThread_CallBack_Processing+0xb70>
    {
      otTcpEstablishedCb((otTcpEndpoint *) p_notification->Data[0]);
 800bbd8:	4b88      	ldr	r3, [pc, #544]	; (800bdfc <OpenThread_CallBack_Processing+0xb98>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	6892      	ldr	r2, [r2, #8]
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	4798      	blx	r3
    }
    break;
 800bbe4:	e0f6      	b.n	800bdd4 <OpenThread_CallBack_Processing+0xb70>
  case MSG_M0TOM4_TCP_RECEIVE_AVAILABLE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bbee:	4a82      	ldr	r2, [pc, #520]	; (800bdf8 <OpenThread_CallBack_Processing+0xb94>)
 800bbf0:	6013      	str	r3, [r2, #0]

    otTcpReceiveAvailableCb = mySTTcpEndpointHandlerContext->mReceiveAvailableCallback;
 800bbf2:	4b81      	ldr	r3, [pc, #516]	; (800bdf8 <OpenThread_CallBack_Processing+0xb94>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	4a81      	ldr	r2, [pc, #516]	; (800be00 <OpenThread_CallBack_Processing+0xb9c>)
 800bbfa:	6013      	str	r3, [r2, #0]

    if (otTcpReceiveAvailableCb != NULL)
 800bbfc:	4b80      	ldr	r3, [pc, #512]	; (800be00 <OpenThread_CallBack_Processing+0xb9c>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 80e9 	beq.w	800bdd8 <OpenThread_CallBack_Processing+0xb74>
    {
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800bc06:	4b7e      	ldr	r3, [pc, #504]	; (800be00 <OpenThread_CallBack_Processing+0xb9c>)
 800bc08:	681c      	ldr	r4, [r3, #0]
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	4618      	mov	r0, r3
          (size_t) p_notification->Data[1],
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	68d9      	ldr	r1, [r3, #12]
          (bool) p_notification->Data[2],
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	691b      	ldr	r3, [r3, #16]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bf14      	ite	ne
 800bc1c:	2301      	movne	r3, #1
 800bc1e:	2300      	moveq	r3, #0
 800bc20:	b2da      	uxtb	r2, r3
          (size_t) p_notification->Data[3]);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	695b      	ldr	r3, [r3, #20]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800bc26:	47a0      	blx	r4
    }
    break;
 800bc28:	e0d6      	b.n	800bdd8 <OpenThread_CallBack_Processing+0xb74>
  case MSG_M0TOM4_TCP_SEND_DONE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bc32:	4a71      	ldr	r2, [pc, #452]	; (800bdf8 <OpenThread_CallBack_Processing+0xb94>)
 800bc34:	6013      	str	r3, [r2, #0]

    otTcpSendDoneCb = mySTTcpEndpointHandlerContext->mSendDoneCallback;
 800bc36:	4b70      	ldr	r3, [pc, #448]	; (800bdf8 <OpenThread_CallBack_Processing+0xb94>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	4a71      	ldr	r2, [pc, #452]	; (800be04 <OpenThread_CallBack_Processing+0xba0>)
 800bc3e:	6013      	str	r3, [r2, #0]

    if (otTcpSendDoneCb != NULL)
 800bc40:	4b70      	ldr	r3, [pc, #448]	; (800be04 <OpenThread_CallBack_Processing+0xba0>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f000 80c9 	beq.w	800bddc <OpenThread_CallBack_Processing+0xb78>
    {
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800bc4a:	4b6e      	ldr	r3, [pc, #440]	; (800be04 <OpenThread_CallBack_Processing+0xba0>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	6892      	ldr	r2, [r2, #8]
 800bc52:	4610      	mov	r0, r2
          (otLinkedBuffer *) p_notification->Data[1]);
 800bc54:	683a      	ldr	r2, [r7, #0]
 800bc56:	68d2      	ldr	r2, [r2, #12]
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800bc58:	4611      	mov	r1, r2
 800bc5a:	4798      	blx	r3
    }
    break;
 800bc5c:	e0be      	b.n	800bddc <OpenThread_CallBack_Processing+0xb78>
//    {
//      otTcpSendReadyCb((otTcpEndpoint *) p_notification->Data[0]);
//    }
//    break;
  case MSG_M0TOM4_TCP_FORWARD_PROGRESS_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bc66:	4a64      	ldr	r2, [pc, #400]	; (800bdf8 <OpenThread_CallBack_Processing+0xb94>)
 800bc68:	6013      	str	r3, [r2, #0]

    mForwardProgressCallback = mySTTcpEndpointHandlerContext->mForwardProgressCallback;
 800bc6a:	4b63      	ldr	r3, [pc, #396]	; (800bdf8 <OpenThread_CallBack_Processing+0xb94>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	4a65      	ldr	r2, [pc, #404]	; (800be08 <OpenThread_CallBack_Processing+0xba4>)
 800bc72:	6013      	str	r3, [r2, #0]

    if (mForwardProgressCallback != NULL)
 800bc74:	4b64      	ldr	r3, [pc, #400]	; (800be08 <OpenThread_CallBack_Processing+0xba4>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f000 80b1 	beq.w	800bde0 <OpenThread_CallBack_Processing+0xb7c>
    {
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800bc7e:	4b62      	ldr	r3, [pc, #392]	; (800be08 <OpenThread_CallBack_Processing+0xba4>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	683a      	ldr	r2, [r7, #0]
 800bc84:	6892      	ldr	r2, [r2, #8]
 800bc86:	4610      	mov	r0, r2
          (size_t) p_notification->Data[1],
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	68d1      	ldr	r1, [r2, #12]
          (size_t) p_notification->Data[2]);
 800bc8c:	683a      	ldr	r2, [r7, #0]
 800bc8e:	6912      	ldr	r2, [r2, #16]
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800bc90:	4798      	blx	r3
    }
    break;
 800bc92:	e0a5      	b.n	800bde0 <OpenThread_CallBack_Processing+0xb7c>
  case MSG_M0TOM4_TCP_ACCEPT_READY_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	6a1b      	ldr	r3, [r3, #32]
 800bc9a:	4a5c      	ldr	r2, [pc, #368]	; (800be0c <OpenThread_CallBack_Processing+0xba8>)
 800bc9c:	6013      	str	r3, [r2, #0]

    otTcpAcceptReadyCb = mySTTcpListenerHandlerContext->mAcceptReadyCallback;
 800bc9e:	4b5b      	ldr	r3, [pc, #364]	; (800be0c <OpenThread_CallBack_Processing+0xba8>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	4a5a      	ldr	r2, [pc, #360]	; (800be10 <OpenThread_CallBack_Processing+0xbac>)
 800bca6:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptReadyCb != NULL)
 800bca8:	4b59      	ldr	r3, [pc, #356]	; (800be10 <OpenThread_CallBack_Processing+0xbac>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 8099 	beq.w	800bde4 <OpenThread_CallBack_Processing+0xb80>
    {
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800bcb2:	4b57      	ldr	r3, [pc, #348]	; (800be10 <OpenThread_CallBack_Processing+0xbac>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	6892      	ldr	r2, [r2, #8]
 800bcba:	4610      	mov	r0, r2
          (const otSockAddr *) p_notification->Data[1],
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	68d2      	ldr	r2, [r2, #12]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800bcc0:	4611      	mov	r1, r2
          (otTcpEndpoint **) p_notification->Data[2]);
 800bcc2:	683a      	ldr	r2, [r7, #0]
 800bcc4:	6912      	ldr	r2, [r2, #16]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800bcc6:	4798      	blx	r3
 800bcc8:	4603      	mov	r3, r0
 800bcca:	461a      	mov	r2, r3
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	609a      	str	r2, [r3, #8]
    }
    break;
 800bcd0:	e088      	b.n	800bde4 <OpenThread_CallBack_Processing+0xb80>
  case MSG_M0TOM4_TCP_ACCEPT_DONE_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	6a1b      	ldr	r3, [r3, #32]
 800bcd8:	4a4c      	ldr	r2, [pc, #304]	; (800be0c <OpenThread_CallBack_Processing+0xba8>)
 800bcda:	6013      	str	r3, [r2, #0]

    otTcpAcceptDoneCb = mySTTcpListenerHandlerContext->mAcceptDoneCallback;
 800bcdc:	4b4b      	ldr	r3, [pc, #300]	; (800be0c <OpenThread_CallBack_Processing+0xba8>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	4a4c      	ldr	r2, [pc, #304]	; (800be14 <OpenThread_CallBack_Processing+0xbb0>)
 800bce4:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptDoneCb != NULL)
 800bce6:	4b4b      	ldr	r3, [pc, #300]	; (800be14 <OpenThread_CallBack_Processing+0xbb0>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d07c      	beq.n	800bde8 <OpenThread_CallBack_Processing+0xb84>
    {
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800bcee:	4b49      	ldr	r3, [pc, #292]	; (800be14 <OpenThread_CallBack_Processing+0xbb0>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	6892      	ldr	r2, [r2, #8]
 800bcf6:	4610      	mov	r0, r2
          (otTcpEndpoint *) p_notification->Data[1],
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	68d2      	ldr	r2, [r2, #12]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800bcfc:	4611      	mov	r1, r2
          (const otSockAddr *) p_notification->Data[2]);
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	6912      	ldr	r2, [r2, #16]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800bd02:	4798      	blx	r3
    }
    break;
 800bd04:	e070      	b.n	800bde8 <OpenThread_CallBack_Processing+0xb84>
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	71fb      	strb	r3, [r7, #7]
    break;
 800bd0a:	e06e      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd0c:	bf00      	nop
 800bd0e:	e06c      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd10:	bf00      	nop
 800bd12:	e06a      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd14:	bf00      	nop
 800bd16:	e068      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd18:	bf00      	nop
 800bd1a:	e066      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd1c:	bf00      	nop
 800bd1e:	e064      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd20:	bf00      	nop
 800bd22:	e062      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd24:	bf00      	nop
 800bd26:	e060      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd28:	bf00      	nop
 800bd2a:	e05e      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd2c:	bf00      	nop
 800bd2e:	e05c      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd30:	bf00      	nop
 800bd32:	e05a      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd34:	bf00      	nop
 800bd36:	e058      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd38:	bf00      	nop
 800bd3a:	e056      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd3c:	bf00      	nop
 800bd3e:	e054      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd40:	bf00      	nop
 800bd42:	e052      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd44:	bf00      	nop
 800bd46:	e050      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd48:	bf00      	nop
 800bd4a:	e04e      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd4c:	bf00      	nop
 800bd4e:	e04c      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd50:	bf00      	nop
 800bd52:	e04a      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd54:	bf00      	nop
 800bd56:	e048      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd58:	bf00      	nop
 800bd5a:	e046      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd5c:	bf00      	nop
 800bd5e:	e044      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd60:	bf00      	nop
 800bd62:	e042      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd64:	bf00      	nop
 800bd66:	e040      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd68:	bf00      	nop
 800bd6a:	e03e      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd6c:	bf00      	nop
 800bd6e:	e03c      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd70:	bf00      	nop
 800bd72:	e03a      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd74:	bf00      	nop
 800bd76:	e038      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd78:	bf00      	nop
 800bd7a:	e036      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd7c:	bf00      	nop
 800bd7e:	e034      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd80:	bf00      	nop
 800bd82:	e032      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd84:	bf00      	nop
 800bd86:	e030      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd88:	bf00      	nop
 800bd8a:	e02e      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd8c:	bf00      	nop
 800bd8e:	e02c      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd90:	bf00      	nop
 800bd92:	e02a      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd94:	bf00      	nop
 800bd96:	e028      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd98:	bf00      	nop
 800bd9a:	e026      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bd9c:	bf00      	nop
 800bd9e:	e024      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bda0:	bf00      	nop
 800bda2:	e022      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bda4:	bf00      	nop
 800bda6:	e020      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bda8:	bf00      	nop
 800bdaa:	e01e      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bdac:	bf00      	nop
 800bdae:	e01c      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bdb0:	bf00      	nop
 800bdb2:	e01a      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bdb4:	bf00      	nop
 800bdb6:	e018      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bdb8:	bf00      	nop
 800bdba:	e016      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
      break;
 800bdbc:	bf00      	nop
 800bdbe:	e014      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bdc0:	bf00      	nop
 800bdc2:	e012      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bdc4:	bf00      	nop
 800bdc6:	e010      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bdc8:	bf00      	nop
 800bdca:	e00e      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bdcc:	bf00      	nop
 800bdce:	e00c      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bdd0:	bf00      	nop
 800bdd2:	e00a      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bdd4:	bf00      	nop
 800bdd6:	e008      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bdd8:	bf00      	nop
 800bdda:	e006      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bddc:	bf00      	nop
 800bdde:	e004      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bde0:	bf00      	nop
 800bde2:	e002      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bde4:	bf00      	nop
 800bde6:	e000      	b.n	800bdea <OpenThread_CallBack_Processing+0xb86>
    break;
 800bde8:	bf00      	nop
  }

  TL_THREAD_SendAck();
 800bdea:	f000 fc6d 	bl	800c6c8 <TL_THREAD_SendAck>
  return status;
 800bdee:	79fb      	ldrb	r3, [r7, #7]

}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bdb0      	pop	{r4, r5, r7, pc}
 800bdf8:	2000088c 	.word	0x2000088c
 800bdfc:	20000898 	.word	0x20000898
 800be00:	2000089c 	.word	0x2000089c
 800be04:	200008a0 	.word	0x200008a0
 800be08:	200008ac 	.word	0x200008ac
 800be0c:	20000890 	.word	0x20000890
 800be10:	200008a4 	.word	0x200008a4
 800be14:	200008a8 	.word	0x200008a8

0800be18 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800be1e:	1d3b      	adds	r3, r7, #4
 800be20:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2200      	movs	r2, #0
 800be26:	2100      	movs	r1, #0
 800be28:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800be2c:	f000 f956 	bl	800c0dc <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	330b      	adds	r3, #11
 800be34:	78db      	ldrb	r3, [r3, #3]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b088      	sub	sp, #32
 800be42:	af00      	add	r7, sp, #0
 800be44:	4603      	mov	r3, r0
 800be46:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800be48:	f107 030c 	add.w	r3, r7, #12
 800be4c:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800be4e:	79fb      	ldrb	r3, [r7, #7]
 800be50:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800be52:	f107 020c 	add.w	r2, r7, #12
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	2101      	movs	r1, #1
 800be5a:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800be5e:	f000 f93d 	bl	800c0dc <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	330b      	adds	r3, #11
 800be66:	78db      	ldrb	r3, [r3, #3]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3720      	adds	r7, #32
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b088      	sub	sp, #32
 800be74:	af00      	add	r7, sp, #0
 800be76:	4603      	mov	r3, r0
 800be78:	460a      	mov	r2, r1
 800be7a:	71fb      	strb	r3, [r7, #7]
 800be7c:	4613      	mov	r3, r2
 800be7e:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800be80:	f107 030c 	add.w	r3, r7, #12
 800be84:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 800be8a:	79bb      	ldrb	r3, [r7, #6]
 800be8c:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 800be8e:	f107 020c 	add.w	r2, r7, #12
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	2102      	movs	r1, #2
 800be96:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 800be9a:	f000 f91f 	bl	800c0dc <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	330b      	adds	r3, #11
 800bea2:	78db      	ldrb	r3, [r3, #3]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3720      	adds	r7, #32
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800beac:	b480      	push	{r7}
 800beae:	b08b      	sub	sp, #44	; 0x2c
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800beb8:	2300      	movs	r3, #0
 800beba:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800bec8:	2300      	movs	r3, #0
 800beca:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800bed4:	4b4a      	ldr	r3, [pc, #296]	; (800c000 <SHCI_GetWirelessFwInfo+0x154>)
 800bed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bedc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bee6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a44      	ldr	r2, [pc, #272]	; (800c004 <SHCI_GetWirelessFwInfo+0x158>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d10f      	bne.n	800bf18 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	69db      	ldr	r3, [r3, #28]
 800bf08:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	617b      	str	r3, [r7, #20]
 800bf16:	e01a      	b.n	800bf4e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bf20:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bf24:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf50:	0e1b      	lsrs	r3, r3, #24
 800bf52:	b2da      	uxtb	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5a:	0c1b      	lsrs	r3, r3, #16
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	0a1b      	lsrs	r3, r3, #8
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	091b      	lsrs	r3, r3, #4
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	f003 030f 	and.w	r3, r3, #15
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	f003 030f 	and.w	r3, r3, #15
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	0e1b      	lsrs	r3, r3, #24
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	0c1b      	lsrs	r3, r3, #16
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	0a1b      	lsrs	r3, r3, #8
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bfa8:	6a3b      	ldr	r3, [r7, #32]
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	b2da      	uxtb	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	0e1b      	lsrs	r3, r3, #24
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	0c1b      	lsrs	r3, r3, #16
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	0a1b      	lsrs	r3, r3, #8
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	0e1b      	lsrs	r3, r3, #24
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	0c1b      	lsrs	r3, r3, #16
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	372c      	adds	r7, #44	; 0x2c
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr
 800c000:	58004000 	.word	0x58004000
 800c004:	a94656b9 	.word	0xa94656b9

0800c008 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	4a08      	ldr	r2, [pc, #32]	; (800c038 <shci_init+0x30>)
 800c018:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c01a:	4a08      	ldr	r2, [pc, #32]	; (800c03c <shci_init+0x34>)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c020:	4806      	ldr	r0, [pc, #24]	; (800c03c <shci_init+0x34>)
 800c022:	f000 f911 	bl	800c248 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 f894 	bl	800c158 <TlInit>

  return;
 800c030:	bf00      	nop
}
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	200008d0 	.word	0x200008d0
 800c03c:	200008b0 	.word	0x200008b0

0800c040 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c046:	4822      	ldr	r0, [pc, #136]	; (800c0d0 <shci_user_evt_proc+0x90>)
 800c048:	f000 ffd2 	bl	800cff0 <LST_is_empty>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d12b      	bne.n	800c0aa <shci_user_evt_proc+0x6a>
 800c052:	4b20      	ldr	r3, [pc, #128]	; (800c0d4 <shci_user_evt_proc+0x94>)
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d027      	beq.n	800c0aa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c05a:	f107 030c 	add.w	r3, r7, #12
 800c05e:	4619      	mov	r1, r3
 800c060:	481b      	ldr	r0, [pc, #108]	; (800c0d0 <shci_user_evt_proc+0x90>)
 800c062:	f001 f854 	bl	800d10e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800c066:	4b1c      	ldr	r3, [pc, #112]	; (800c0d8 <shci_user_evt_proc+0x98>)
 800c068:	69db      	ldr	r3, [r3, #28]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00c      	beq.n	800c088 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800c072:	2301      	movs	r3, #1
 800c074:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c076:	4b18      	ldr	r3, [pc, #96]	; (800c0d8 <shci_user_evt_proc+0x98>)
 800c078:	69db      	ldr	r3, [r3, #28]
 800c07a:	1d3a      	adds	r2, r7, #4
 800c07c:	4610      	mov	r0, r2
 800c07e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c080:	793a      	ldrb	r2, [r7, #4]
 800c082:	4b14      	ldr	r3, [pc, #80]	; (800c0d4 <shci_user_evt_proc+0x94>)
 800c084:	701a      	strb	r2, [r3, #0]
 800c086:	e002      	b.n	800c08e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c088:	4b12      	ldr	r3, [pc, #72]	; (800c0d4 <shci_user_evt_proc+0x94>)
 800c08a:	2201      	movs	r2, #1
 800c08c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c08e:	4b11      	ldr	r3, [pc, #68]	; (800c0d4 <shci_user_evt_proc+0x94>)
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d004      	beq.n	800c0a0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 fb91 	bl	800c7c0 <TL_MM_EvtDone>
 800c09e:	e004      	b.n	800c0aa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	480a      	ldr	r0, [pc, #40]	; (800c0d0 <shci_user_evt_proc+0x90>)
 800c0a6:	f000 ffc5 	bl	800d034 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c0aa:	4809      	ldr	r0, [pc, #36]	; (800c0d0 <shci_user_evt_proc+0x90>)
 800c0ac:	f000 ffa0 	bl	800cff0 <LST_is_empty>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d107      	bne.n	800c0c6 <shci_user_evt_proc+0x86>
 800c0b6:	4b07      	ldr	r3, [pc, #28]	; (800c0d4 <shci_user_evt_proc+0x94>)
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d003      	beq.n	800c0c6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c0be:	4804      	ldr	r0, [pc, #16]	; (800c0d0 <shci_user_evt_proc+0x90>)
 800c0c0:	f7f6 fabe 	bl	8002640 <shci_notify_asynch_evt>
  }


  return;
 800c0c4:	bf00      	nop
 800c0c6:	bf00      	nop
}
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	20000094 	.word	0x20000094
 800c0d4:	200000a4 	.word	0x200000a4
 800c0d8:	200008b0 	.word	0x200008b0

0800c0dc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60ba      	str	r2, [r7, #8]
 800c0e4:	607b      	str	r3, [r7, #4]
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	81fb      	strh	r3, [r7, #14]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	f000 f864 	bl	800c1bc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c0f4:	4b16      	ldr	r3, [pc, #88]	; (800c150 <shci_send+0x74>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	89fa      	ldrh	r2, [r7, #14]
 800c0fa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c0fe:	4b14      	ldr	r3, [pc, #80]	; (800c150 <shci_send+0x74>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	7b7a      	ldrb	r2, [r7, #13]
 800c104:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c106:	4b12      	ldr	r3, [pc, #72]	; (800c150 <shci_send+0x74>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	330c      	adds	r3, #12
 800c10c:	7b7a      	ldrb	r2, [r7, #13]
 800c10e:	68b9      	ldr	r1, [r7, #8]
 800c110:	4618      	mov	r0, r3
 800c112:	f001 fc57 	bl	800d9c4 <memcpy>

  shciContext.io.Send(0,0);
 800c116:	4b0f      	ldr	r3, [pc, #60]	; (800c154 <shci_send+0x78>)
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	2100      	movs	r1, #0
 800c11c:	2000      	movs	r0, #0
 800c11e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c120:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c124:	f7f6 faa3 	bl	800266e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f103 0008 	add.w	r0, r3, #8
 800c12e:	4b08      	ldr	r3, [pc, #32]	; (800c150 <shci_send+0x74>)
 800c130:	6819      	ldr	r1, [r3, #0]
 800c132:	4b07      	ldr	r3, [pc, #28]	; (800c150 <shci_send+0x74>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	789b      	ldrb	r3, [r3, #2]
 800c138:	3303      	adds	r3, #3
 800c13a:	461a      	mov	r2, r3
 800c13c:	f001 fc42 	bl	800d9c4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c140:	2001      	movs	r0, #1
 800c142:	f000 f83b 	bl	800c1bc <Cmd_SetStatus>

  return;
 800c146:	bf00      	nop
}
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	200000a0 	.word	0x200000a0
 800c154:	200008b0 	.word	0x200008b0

0800c158 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c160:	4a10      	ldr	r2, [pc, #64]	; (800c1a4 <TlInit+0x4c>)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c166:	4810      	ldr	r0, [pc, #64]	; (800c1a8 <TlInit+0x50>)
 800c168:	f000 ff32 	bl	800cfd0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c16c:	2001      	movs	r0, #1
 800c16e:	f000 f825 	bl	800c1bc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c172:	4b0e      	ldr	r3, [pc, #56]	; (800c1ac <TlInit+0x54>)
 800c174:	2201      	movs	r2, #1
 800c176:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c178:	4b0d      	ldr	r3, [pc, #52]	; (800c1b0 <TlInit+0x58>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00c      	beq.n	800c19a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c184:	4b0b      	ldr	r3, [pc, #44]	; (800c1b4 <TlInit+0x5c>)
 800c186:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c188:	4b0b      	ldr	r3, [pc, #44]	; (800c1b8 <TlInit+0x60>)
 800c18a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c18c:	4b08      	ldr	r3, [pc, #32]	; (800c1b0 <TlInit+0x58>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f107 020c 	add.w	r2, r7, #12
 800c194:	4610      	mov	r0, r2
 800c196:	4798      	blx	r3
  }

  return;
 800c198:	bf00      	nop
 800c19a:	bf00      	nop
}
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	200000a0 	.word	0x200000a0
 800c1a8:	20000094 	.word	0x20000094
 800c1ac:	200000a4 	.word	0x200000a4
 800c1b0:	200008b0 	.word	0x200008b0
 800c1b4:	0800c20d 	.word	0x0800c20d
 800c1b8:	0800c225 	.word	0x0800c225

0800c1bc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c1c6:	79fb      	ldrb	r3, [r7, #7]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10b      	bne.n	800c1e4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c1cc:	4b0d      	ldr	r3, [pc, #52]	; (800c204 <Cmd_SetStatus+0x48>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d003      	beq.n	800c1dc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c1d4:	4b0b      	ldr	r3, [pc, #44]	; (800c204 <Cmd_SetStatus+0x48>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2000      	movs	r0, #0
 800c1da:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c1dc:	4b0a      	ldr	r3, [pc, #40]	; (800c208 <Cmd_SetStatus+0x4c>)
 800c1de:	2200      	movs	r2, #0
 800c1e0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c1e2:	e00b      	b.n	800c1fc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c1e4:	4b08      	ldr	r3, [pc, #32]	; (800c208 <Cmd_SetStatus+0x4c>)
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c1ea:	4b06      	ldr	r3, [pc, #24]	; (800c204 <Cmd_SetStatus+0x48>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d004      	beq.n	800c1fc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c1f2:	4b04      	ldr	r3, [pc, #16]	; (800c204 <Cmd_SetStatus+0x48>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2001      	movs	r0, #1
 800c1f8:	4798      	blx	r3
  return;
 800c1fa:	bf00      	nop
 800c1fc:	bf00      	nop
}
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	200008d0 	.word	0x200008d0
 800c208:	2000009c 	.word	0x2000009c

0800c20c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c214:	2000      	movs	r0, #0
 800c216:	f7f6 fa1f 	bl	8002658 <shci_cmd_resp_release>

  return;
 800c21a:	bf00      	nop
}
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
	...

0800c224 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c22c:	6879      	ldr	r1, [r7, #4]
 800c22e:	4805      	ldr	r0, [pc, #20]	; (800c244 <TlUserEvtReceived+0x20>)
 800c230:	f000 ff26 	bl	800d080 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c234:	4803      	ldr	r0, [pc, #12]	; (800c244 <TlUserEvtReceived+0x20>)
 800c236:	f7f6 fa03 	bl	8002640 <shci_notify_asynch_evt>

  return;
 800c23a:	bf00      	nop
}
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	20000094 	.word	0x20000094

0800c248 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a05      	ldr	r2, [pc, #20]	; (800c268 <shci_register_io_bus+0x20>)
 800c254:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4a04      	ldr	r2, [pc, #16]	; (800c26c <shci_register_io_bus+0x24>)
 800c25a:	611a      	str	r2, [r3, #16]

  return;
 800c25c:	bf00      	nop
}
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	0800c555 	.word	0x0800c555
 800c26c:	0800c5a9 	.word	0x0800c5a9

0800c270 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800c27c:	f7f5 fa58 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c280:	f7f5 f9e8 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800c284:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800c28e:	701a      	strb	r2, [r3, #0]
 800c290:	2200      	movs	r2, #0
 800c292:	705a      	strb	r2, [r3, #1]
 800c294:	2200      	movs	r2, #0
 800c296:	709a      	strb	r2, [r3, #2]
 800c298:	2200      	movs	r2, #0
 800c29a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f042 0201 	orr.w	r2, r2, #1
 800c2a4:	711a      	strb	r2, [r3, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	715a      	strb	r2, [r3, #5]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	719a      	strb	r2, [r3, #6]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800c2b2:	78fa      	ldrb	r2, [r7, #3]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c2b8:	f7f5 fa14 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c2bc:	f7f5 f9d6 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c2c0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	b2db      	uxtb	r3, r3
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c2da:	f7f5 fa29 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c2de:	f7f5 f9b9 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800c2e2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 800c2ec:	701a      	strb	r2, [r3, #0]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	705a      	strb	r2, [r3, #1]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	709a      	strb	r2, [r3, #2]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f042 0203 	orr.w	r2, r2, #3
 800c302:	711a      	strb	r2, [r3, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	715a      	strb	r2, [r3, #5]
 800c308:	2200      	movs	r2, #0
 800c30a:	719a      	strb	r2, [r3, #6]
 800c30c:	2200      	movs	r2, #0
 800c30e:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 800c310:	783b      	ldrb	r3, [r7, #0]
 800c312:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c316:	b2db      	uxtb	r3, r3
 800c318:	461a      	mov	r2, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 800c31e:	783b      	ldrb	r3, [r7, #0]
 800c320:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c324:	b2db      	uxtb	r3, r3
 800c326:	461a      	mov	r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 800c32c:	783b      	ldrb	r3, [r7, #0]
 800c32e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c332:	b2db      	uxtb	r3, r3
 800c334:	461a      	mov	r2, r3
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800c33a:	f7f5 f9d3 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c33e:	f7f5 f995 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c342:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	b2db      	uxtb	r3, r3
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <otThreadSetNetworkKey>:
  return (otNetworkKeyRef)p_ot_req->Data[0];
}
#endif

otError otThreadSetNetworkKey(otInstance *aInstance, const otNetworkKey *aKey)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c35c:	f7f5 f9e8 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c360:	f7f5 f978 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800c364:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_KEY;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	f042 026f 	orr.w	r2, r2, #111	; 0x6f
 800c36e:	701a      	strb	r2, [r3, #0]
 800c370:	2200      	movs	r2, #0
 800c372:	705a      	strb	r2, [r3, #1]
 800c374:	2200      	movs	r2, #0
 800c376:	709a      	strb	r2, [r3, #2]
 800c378:	2200      	movs	r2, #0
 800c37a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	f042 0201 	orr.w	r2, r2, #1
 800c384:	711a      	strb	r2, [r3, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	715a      	strb	r2, [r3, #5]
 800c38a:	2200      	movs	r2, #0
 800c38c:	719a      	strb	r2, [r3, #6]
 800c38e:	2200      	movs	r2, #0
 800c390:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 800c392:	683a      	ldr	r2, [r7, #0]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c398:	f7f5 f9a4 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c39c:	f7f5 f966 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c3a0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	b2db      	uxtb	r3, r3
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800c3b8:	f7f5 f9ba 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c3bc:	f7f5 f94a 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800c3c0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f062 0279 	orn	r2, r2, #121	; 0x79
 800c3ca:	701a      	strb	r2, [r3, #0]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	705a      	strb	r2, [r3, #1]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	709a      	strb	r2, [r3, #2]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	711a      	strb	r2, [r3, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	715a      	strb	r2, [r3, #5]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	719a      	strb	r2, [r3, #6]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800c3ea:	f7f5 f97b 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c3ee:	f7f5 f93d 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c3f2:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	b2db      	uxtb	r3, r3
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <otThreadGetParentLastRssi>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otThreadGetParentLastRssi(otInstance *aInstance, int8_t *aLastRssi)
{
 800c402:	b580      	push	{r7, lr}
 800c404:	b084      	sub	sp, #16
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800c40c:	f7f5 f990 	bl	8001730 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c410:	f7f5 f920 	bl	8001654 <THREAD_Get_OTCmdPayloadBuffer>
 800c414:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_PARENT_LAST_RSSI;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f062 0270 	orn	r2, r2, #112	; 0x70
 800c41e:	701a      	strb	r2, [r3, #0]
 800c420:	2200      	movs	r2, #0
 800c422:	705a      	strb	r2, [r3, #1]
 800c424:	2200      	movs	r2, #0
 800c426:	709a      	strb	r2, [r3, #2]
 800c428:	2200      	movs	r2, #0
 800c42a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	f042 0201 	orr.w	r2, r2, #1
 800c434:	711a      	strb	r2, [r3, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	715a      	strb	r2, [r3, #5]
 800c43a:	2200      	movs	r2, #0
 800c43c:	719a      	strb	r2, [r3, #6]
 800c43e:	2200      	movs	r2, #0
 800c440:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aLastRssi;
 800c442:	683a      	ldr	r2, [r7, #0]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800c448:	f7f5 f94c 	bl	80016e4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c44c:	f7f5 f90e 	bl	800166c <THREAD_Get_OTCmdRspPayloadBuffer>
 800c450:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	b2db      	uxtb	r3, r3
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c464:	f7f5 fc2c 	bl	8001cc0 <HW_IPCC_Enable>

  return;
 800c468:	bf00      	nop
}
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <TL_Init>:


void TL_Init( void )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c470:	4b10      	ldr	r3, [pc, #64]	; (800c4b4 <TL_Init+0x48>)
 800c472:	4a11      	ldr	r2, [pc, #68]	; (800c4b8 <TL_Init+0x4c>)
 800c474:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c476:	4b0f      	ldr	r3, [pc, #60]	; (800c4b4 <TL_Init+0x48>)
 800c478:	4a10      	ldr	r2, [pc, #64]	; (800c4bc <TL_Init+0x50>)
 800c47a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c47c:	4b0d      	ldr	r3, [pc, #52]	; (800c4b4 <TL_Init+0x48>)
 800c47e:	4a10      	ldr	r2, [pc, #64]	; (800c4c0 <TL_Init+0x54>)
 800c480:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c482:	4b0c      	ldr	r3, [pc, #48]	; (800c4b4 <TL_Init+0x48>)
 800c484:	4a0f      	ldr	r2, [pc, #60]	; (800c4c4 <TL_Init+0x58>)
 800c486:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c488:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <TL_Init+0x48>)
 800c48a:	4a0f      	ldr	r2, [pc, #60]	; (800c4c8 <TL_Init+0x5c>)
 800c48c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c48e:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <TL_Init+0x48>)
 800c490:	4a0e      	ldr	r2, [pc, #56]	; (800c4cc <TL_Init+0x60>)
 800c492:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c494:	4b07      	ldr	r3, [pc, #28]	; (800c4b4 <TL_Init+0x48>)
 800c496:	4a0e      	ldr	r2, [pc, #56]	; (800c4d0 <TL_Init+0x64>)
 800c498:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c49a:	4b06      	ldr	r3, [pc, #24]	; (800c4b4 <TL_Init+0x48>)
 800c49c:	4a0d      	ldr	r2, [pc, #52]	; (800c4d4 <TL_Init+0x68>)
 800c49e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c4a0:	4b04      	ldr	r3, [pc, #16]	; (800c4b4 <TL_Init+0x48>)
 800c4a2:	4a0d      	ldr	r2, [pc, #52]	; (800c4d8 <TL_Init+0x6c>)
 800c4a4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c4a6:	4b03      	ldr	r3, [pc, #12]	; (800c4b4 <TL_Init+0x48>)
 800c4a8:	4a0c      	ldr	r2, [pc, #48]	; (800c4dc <TL_Init+0x70>)
 800c4aa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c4ac:	f7f5 fc1c 	bl	8001ce8 <HW_IPCC_Init>

  return;
 800c4b0:	bf00      	nop
}
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	20030000 	.word	0x20030000
 800c4b8:	20030038 	.word	0x20030038
 800c4bc:	20030058 	.word	0x20030058
 800c4c0:	20030068 	.word	0x20030068
 800c4c4:	20030078 	.word	0x20030078
 800c4c8:	20030080 	.word	0x20030080
 800c4cc:	20030088 	.word	0x20030088
 800c4d0:	20030090 	.word	0x20030090
 800c4d4:	200300ac 	.word	0x200300ac
 800c4d8:	200300b0 	.word	0x200300b0
 800c4dc:	200300bc 	.word	0x200300bc

0800c4e0 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c4e6:	e01c      	b.n	800c522 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c4e8:	1d3b      	adds	r3, r7, #4
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	4812      	ldr	r0, [pc, #72]	; (800c538 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c4ee:	f000 fe0e 	bl	800d10e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	7a5b      	ldrb	r3, [r3, #9]
 800c4f6:	2b0f      	cmp	r3, #15
 800c4f8:	d003      	beq.n	800c502 <HW_IPCC_BLE_RxEvtNot+0x22>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	7a5b      	ldrb	r3, [r3, #9]
 800c4fe:	2b0e      	cmp	r3, #14
 800c500:	d105      	bne.n	800c50e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4619      	mov	r1, r3
 800c506:	2002      	movs	r0, #2
 800c508:	f000 f9be 	bl	800c888 <OutputDbgTrace>
 800c50c:	e004      	b.n	800c518 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4619      	mov	r1, r3
 800c512:	2003      	movs	r0, #3
 800c514:	f000 f9b8 	bl	800c888 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c518:	4b08      	ldr	r3, [pc, #32]	; (800c53c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	4610      	mov	r0, r2
 800c520:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c522:	4805      	ldr	r0, [pc, #20]	; (800c538 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c524:	f000 fd64 	bl	800cff0 <LST_is_empty>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0dc      	beq.n	800c4e8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c52e:	bf00      	nop
}
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	200300d8 	.word	0x200300d8
 800c53c:	200008dc 	.word	0x200008dc

0800c540 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c544:	4b02      	ldr	r3, [pc, #8]	; (800c550 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4798      	blx	r3

  return;
 800c54a:	bf00      	nop
}
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	200008e0 	.word	0x200008e0

0800c554 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c560:	480d      	ldr	r0, [pc, #52]	; (800c598 <TL_SYS_Init+0x44>)
 800c562:	f000 fd35 	bl	800cfd0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c566:	4b0d      	ldr	r3, [pc, #52]	; (800c59c <TL_SYS_Init+0x48>)
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	689a      	ldr	r2, [r3, #8]
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	4a08      	ldr	r2, [pc, #32]	; (800c598 <TL_SYS_Init+0x44>)
 800c578:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c57a:	f7f5 fbe3 	bl	8001d44 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a07      	ldr	r2, [pc, #28]	; (800c5a0 <TL_SYS_Init+0x4c>)
 800c584:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	4a06      	ldr	r2, [pc, #24]	; (800c5a4 <TL_SYS_Init+0x50>)
 800c58c:	6013      	str	r3, [r2, #0]

  return 0;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	200300e0 	.word	0x200300e0
 800c59c:	20030000 	.word	0x20030000
 800c5a0:	200008e4 	.word	0x200008e4
 800c5a4:	200008e8 	.word	0x200008e8

0800c5a8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c5b4:	4b09      	ldr	r3, [pc, #36]	; (800c5dc <TL_SYS_SendCmd+0x34>)
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2210      	movs	r2, #16
 800c5bc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c5be:	4b07      	ldr	r3, [pc, #28]	; (800c5dc <TL_SYS_SendCmd+0x34>)
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	2004      	movs	r0, #4
 800c5c8:	f000 f95e 	bl	800c888 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c5cc:	f7f5 fbc4 	bl	8001d58 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c5d0:	2300      	movs	r3, #0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	20030000 	.word	0x20030000

0800c5e0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c5e4:	4b07      	ldr	r3, [pc, #28]	; (800c604 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	2005      	movs	r0, #5
 800c5ee:	f000 f94b 	bl	800c888 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c5f2:	4b05      	ldr	r3, [pc, #20]	; (800c608 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a03      	ldr	r2, [pc, #12]	; (800c604 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c5f8:	68d2      	ldr	r2, [r2, #12]
 800c5fa:	6812      	ldr	r2, [r2, #0]
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	4798      	blx	r3

  return;
 800c600:	bf00      	nop
}
 800c602:	bd80      	pop	{r7, pc}
 800c604:	20030000 	.word	0x20030000
 800c608:	200008e4 	.word	0x200008e4

0800c60c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c612:	e00e      	b.n	800c632 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c614:	1d3b      	adds	r3, r7, #4
 800c616:	4619      	mov	r1, r3
 800c618:	480b      	ldr	r0, [pc, #44]	; (800c648 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c61a:	f000 fd78 	bl	800d10e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4619      	mov	r1, r3
 800c622:	2006      	movs	r0, #6
 800c624:	f000 f930 	bl	800c888 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c628:	4b08      	ldr	r3, [pc, #32]	; (800c64c <HW_IPCC_SYS_EvtNot+0x40>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	4610      	mov	r0, r2
 800c630:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c632:	4805      	ldr	r0, [pc, #20]	; (800c648 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c634:	f000 fcdc 	bl	800cff0 <LST_is_empty>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d0ea      	beq.n	800c614 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c63e:	bf00      	nop
}
 800c640:	3708      	adds	r7, #8
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	200300e0 	.word	0x200300e0
 800c64c:	200008e8 	.word	0x200008e8

0800c650 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800c658:	4b0c      	ldr	r3, [pc, #48]	; (800c68c <TL_THREAD_Init+0x3c>)
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	689a      	ldr	r2, [r3, #8]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68da      	ldr	r2, [r3, #12]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800c67e:	f7f5 fb91 	bl	8001da4 <HW_IPCC_THREAD_Init>

  return;
 800c682:	bf00      	nop
}
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	20030000 	.word	0x20030000

0800c690 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800c694:	4b04      	ldr	r3, [pc, #16]	; (800c6a8 <TL_OT_SendCmd+0x18>)
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	2208      	movs	r2, #8
 800c69c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800c69e:	f7f5 fb8f 	bl	8001dc0 <HW_IPCC_OT_SendCmd>

  return;
 800c6a2:	bf00      	nop
}
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20030000 	.word	0x20030000

0800c6ac <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800c6b0:	4b04      	ldr	r3, [pc, #16]	; (800c6c4 <TL_CLI_SendCmd+0x18>)
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	220a      	movs	r2, #10
 800c6b8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800c6ba:	f7f5 fb8f 	bl	8001ddc <HW_IPCC_CLI_SendCmd>

  return;
 800c6be:	bf00      	nop
}
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20030000 	.word	0x20030000

0800c6c8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c6cc:	4b04      	ldr	r3, [pc, #16]	; (800c6e0 <TL_THREAD_SendAck+0x18>)
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	220d      	movs	r2, #13
 800c6d4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800c6d6:	f7f5 fb8b 	bl	8001df0 <HW_IPCC_THREAD_SendAck>

  return;
 800c6da:	bf00      	nop
}
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	20030000 	.word	0x20030000

0800c6e4 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c6e8:	4b04      	ldr	r3, [pc, #16]	; (800c6fc <TL_THREAD_CliSendAck+0x18>)
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	220d      	movs	r2, #13
 800c6f0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800c6f2:	f7f5 fb8b 	bl	8001e0c <HW_IPCC_THREAD_CliSendAck>

  return;
 800c6f6:	bf00      	nop
}
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	20030000 	.word	0x20030000

0800c700 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800c704:	4b03      	ldr	r3, [pc, #12]	; (800c714 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7f4 fff0 	bl	80016f0 <TL_OT_CmdEvtReceived>

  return;
 800c710:	bf00      	nop
}
 800c712:	bd80      	pop	{r7, pc}
 800c714:	20030000 	.word	0x20030000

0800c718 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800c71c:	4b03      	ldr	r3, [pc, #12]	; (800c72c <HW_IPCC_THREAD_EvtNot+0x14>)
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4618      	mov	r0, r3
 800c724:	f7f4 fff4 	bl	8001710 <TL_THREAD_NotReceived>

  return;
 800c728:	bf00      	nop
}
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20030000 	.word	0x20030000

0800c730 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800c734:	4b03      	ldr	r3, [pc, #12]	; (800c744 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f5 f8be 	bl	80018bc <TL_THREAD_CliNotReceived>

  return;
 800c740:	bf00      	nop
}
 800c742:	bd80      	pop	{r7, pc}
 800c744:	20030000 	.word	0x20030000

0800c748 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c750:	4817      	ldr	r0, [pc, #92]	; (800c7b0 <TL_MM_Init+0x68>)
 800c752:	f000 fc3d 	bl	800cfd0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c756:	4817      	ldr	r0, [pc, #92]	; (800c7b4 <TL_MM_Init+0x6c>)
 800c758:	f000 fc3a 	bl	800cfd0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c75c:	4b16      	ldr	r3, [pc, #88]	; (800c7b8 <TL_MM_Init+0x70>)
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	4a16      	ldr	r2, [pc, #88]	; (800c7bc <TL_MM_Init+0x74>)
 800c762:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c764:	4b15      	ldr	r3, [pc, #84]	; (800c7bc <TL_MM_Init+0x74>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	6892      	ldr	r2, [r2, #8]
 800c76c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c76e:	4b13      	ldr	r3, [pc, #76]	; (800c7bc <TL_MM_Init+0x74>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	68d2      	ldr	r2, [r2, #12]
 800c776:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c778:	4b10      	ldr	r3, [pc, #64]	; (800c7bc <TL_MM_Init+0x74>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a0c      	ldr	r2, [pc, #48]	; (800c7b0 <TL_MM_Init+0x68>)
 800c77e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c780:	4b0e      	ldr	r3, [pc, #56]	; (800c7bc <TL_MM_Init+0x74>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	6812      	ldr	r2, [r2, #0]
 800c788:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c78a:	4b0c      	ldr	r3, [pc, #48]	; (800c7bc <TL_MM_Init+0x74>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	6852      	ldr	r2, [r2, #4]
 800c792:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c794:	4b09      	ldr	r3, [pc, #36]	; (800c7bc <TL_MM_Init+0x74>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	6912      	ldr	r2, [r2, #16]
 800c79c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c79e:	4b07      	ldr	r3, [pc, #28]	; (800c7bc <TL_MM_Init+0x74>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	6952      	ldr	r2, [r2, #20]
 800c7a6:	619a      	str	r2, [r3, #24]

  return;
 800c7a8:	bf00      	nop
}
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	200300c8 	.word	0x200300c8
 800c7b4:	200008d4 	.word	0x200008d4
 800c7b8:	20030000 	.word	0x20030000
 800c7bc:	200008ec 	.word	0x200008ec

0800c7c0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c7c8:	6879      	ldr	r1, [r7, #4]
 800c7ca:	4807      	ldr	r0, [pc, #28]	; (800c7e8 <TL_MM_EvtDone+0x28>)
 800c7cc:	f000 fc58 	bl	800d080 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c7d0:	6879      	ldr	r1, [r7, #4]
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	f000 f858 	bl	800c888 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c7d8:	4804      	ldr	r0, [pc, #16]	; (800c7ec <TL_MM_EvtDone+0x2c>)
 800c7da:	f7f5 fb49 	bl	8001e70 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c7de:	bf00      	nop
}
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	200008d4 	.word	0x200008d4
 800c7ec:	0800c7f1 	.word	0x0800c7f1

0800c7f0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c7f6:	e00c      	b.n	800c812 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c7f8:	1d3b      	adds	r3, r7, #4
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	480a      	ldr	r0, [pc, #40]	; (800c828 <SendFreeBuf+0x38>)
 800c7fe:	f000 fc86 	bl	800d10e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c802:	4b0a      	ldr	r3, [pc, #40]	; (800c82c <SendFreeBuf+0x3c>)
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	4611      	mov	r1, r2
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 fc37 	bl	800d080 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c812:	4805      	ldr	r0, [pc, #20]	; (800c828 <SendFreeBuf+0x38>)
 800c814:	f000 fbec 	bl	800cff0 <LST_is_empty>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0ec      	beq.n	800c7f8 <SendFreeBuf+0x8>
  }

  return;
 800c81e:	bf00      	nop
}
 800c820:	3708      	adds	r7, #8
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	200008d4 	.word	0x200008d4
 800c82c:	20030000 	.word	0x20030000

0800c830 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c830:	b580      	push	{r7, lr}
 800c832:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c834:	4805      	ldr	r0, [pc, #20]	; (800c84c <TL_TRACES_Init+0x1c>)
 800c836:	f000 fbcb 	bl	800cfd0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c83a:	4b05      	ldr	r3, [pc, #20]	; (800c850 <TL_TRACES_Init+0x20>)
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	4a03      	ldr	r2, [pc, #12]	; (800c84c <TL_TRACES_Init+0x1c>)
 800c840:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c842:	f7f5 fb4b 	bl	8001edc <HW_IPCC_TRACES_Init>

  return;
 800c846:	bf00      	nop
}
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	200300d0 	.word	0x200300d0
 800c850:	20030000 	.word	0x20030000

0800c854 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c85a:	e008      	b.n	800c86e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c85c:	1d3b      	adds	r3, r7, #4
 800c85e:	4619      	mov	r1, r3
 800c860:	4808      	ldr	r0, [pc, #32]	; (800c884 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c862:	f000 fc54 	bl	800d10e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4618      	mov	r0, r3
 800c86a:	f7f5 ff0b 	bl	8002684 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c86e:	4805      	ldr	r0, [pc, #20]	; (800c884 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c870:	f000 fbbe 	bl	800cff0 <LST_is_empty>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d0f0      	beq.n	800c85c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c87a:	bf00      	nop
}
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	200300d0 	.word	0x200300d0

0800c888 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	4603      	mov	r3, r0
 800c890:	6039      	str	r1, [r7, #0]
 800c892:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c894:	79fb      	ldrb	r3, [r7, #7]
 800c896:	2b06      	cmp	r3, #6
 800c898:	d845      	bhi.n	800c926 <OutputDbgTrace+0x9e>
 800c89a:	a201      	add	r2, pc, #4	; (adr r2, 800c8a0 <OutputDbgTrace+0x18>)
 800c89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a0:	0800c8bd 	.word	0x0800c8bd
 800c8a4:	0800c8e1 	.word	0x0800c8e1
 800c8a8:	0800c8e7 	.word	0x0800c8e7
 800c8ac:	0800c8fb 	.word	0x0800c8fb
 800c8b0:	0800c907 	.word	0x0800c907
 800c8b4:	0800c90d 	.word	0x0800c90d
 800c8b8:	0800c91b 	.word	0x0800c91b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	7a5b      	ldrb	r3, [r3, #9]
 800c8c4:	2bff      	cmp	r3, #255	; 0xff
 800c8c6:	d005      	beq.n	800c8d4 <OutputDbgTrace+0x4c>
 800c8c8:	2bff      	cmp	r3, #255	; 0xff
 800c8ca:	dc05      	bgt.n	800c8d8 <OutputDbgTrace+0x50>
 800c8cc:	2b0e      	cmp	r3, #14
 800c8ce:	d005      	beq.n	800c8dc <OutputDbgTrace+0x54>
 800c8d0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c8d2:	e001      	b.n	800c8d8 <OutputDbgTrace+0x50>
          break;
 800c8d4:	bf00      	nop
 800c8d6:	e027      	b.n	800c928 <OutputDbgTrace+0xa0>
          break;
 800c8d8:	bf00      	nop
 800c8da:	e025      	b.n	800c928 <OutputDbgTrace+0xa0>
          break;
 800c8dc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c8de:	e023      	b.n	800c928 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c8e4:	e020      	b.n	800c928 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	7a5b      	ldrb	r3, [r3, #9]
 800c8ee:	2b0e      	cmp	r3, #14
 800c8f0:	d001      	beq.n	800c8f6 <OutputDbgTrace+0x6e>
 800c8f2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c8f4:	e000      	b.n	800c8f8 <OutputDbgTrace+0x70>
          break;
 800c8f6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c8f8:	e016      	b.n	800c928 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	7a5b      	ldrb	r3, [r3, #9]
 800c902:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c904:	e010      	b.n	800c928 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c90a:	e00d      	b.n	800c928 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	7a5b      	ldrb	r3, [r3, #9]
 800c914:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c916:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c918:	e006      	b.n	800c928 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	7a5b      	ldrb	r3, [r3, #9]
 800c922:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c924:	e000      	b.n	800c928 <OutputDbgTrace+0xa0>

    default:
      break;
 800c926:	bf00      	nop
  }

  return;
 800c928:	bf00      	nop
}
 800c92a:	3714      	adds	r7, #20
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b086      	sub	sp, #24
 800c938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c93a:	f3ef 8310 	mrs	r3, PRIMASK
 800c93e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c940:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800c942:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c944:	b672      	cpsid	i
}
 800c946:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800c948:	1cbb      	adds	r3, r7, #2
 800c94a:	4619      	mov	r1, r3
 800c94c:	4812      	ldr	r0, [pc, #72]	; (800c998 <DbgTrace_TxCpltCallback+0x64>)
 800c94e:	f000 fe56 	bl	800d5fe <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800c952:	1cbb      	adds	r3, r7, #2
 800c954:	4619      	mov	r1, r3
 800c956:	4810      	ldr	r0, [pc, #64]	; (800c998 <DbgTrace_TxCpltCallback+0x64>)
 800c958:	f000 ff42 	bl	800d7e0 <CircularQueue_Sense>
 800c95c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00c      	beq.n	800c97e <DbgTrace_TxCpltCallback+0x4a>
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	f383 8810 	msr	PRIMASK, r3
}
 800c96e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800c970:	887b      	ldrh	r3, [r7, #2]
 800c972:	4a0a      	ldr	r2, [pc, #40]	; (800c99c <DbgTrace_TxCpltCallback+0x68>)
 800c974:	4619      	mov	r1, r3
 800c976:	6938      	ldr	r0, [r7, #16]
 800c978:	f7f5 fe9f 	bl	80026ba <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800c97c:	e008      	b.n	800c990 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800c97e:	4b08      	ldr	r3, [pc, #32]	; (800c9a0 <DbgTrace_TxCpltCallback+0x6c>)
 800c980:	2201      	movs	r2, #1
 800c982:	701a      	strb	r2, [r3, #0]
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f383 8810 	msr	PRIMASK, r3
}
 800c98e:	bf00      	nop
}
 800c990:	bf00      	nop
 800c992:	3718      	adds	r7, #24
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	200008f0 	.word	0x200008f0
 800c99c:	0800c935 	.word	0x0800c935
 800c9a0:	20000025 	.word	0x20000025

0800c9a4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800c9aa:	f7f5 fe80 	bl	80026ae <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c9b8:	4903      	ldr	r1, [pc, #12]	; (800c9c8 <DbgTraceInit+0x24>)
 800c9ba:	4804      	ldr	r0, [pc, #16]	; (800c9cc <DbgTraceInit+0x28>)
 800c9bc:	f000 fbc6 	bl	800d14c <CircularQueue_Init>
#endif 
#endif
  return;
 800c9c0:	bf00      	nop
}
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	20000910 	.word	0x20000910
 800c9cc:	200008f0 	.word	0x200008f0

0800c9d0 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	68b9      	ldr	r1, [r7, #8]
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f000 f805 	bl	800c9f0 <DbgTraceWrite>
 800c9e6:	4603      	mov	r3, r0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b08a      	sub	sp, #40	; 0x28
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca00:	f3ef 8310 	mrs	r3, PRIMASK
 800ca04:	61bb      	str	r3, [r7, #24]
  return(result);
 800ca06:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ca08:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca10:	d102      	bne.n	800ca18 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	627b      	str	r3, [r7, #36]	; 0x24
 800ca16:	e037      	b.n	800ca88 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d006      	beq.n	800ca2c <DbgTraceWrite+0x3c>
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d003      	beq.n	800ca2c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ca24:	f04f 33ff 	mov.w	r3, #4294967295
 800ca28:	627b      	str	r3, [r7, #36]	; 0x24
 800ca2a:	e02d      	b.n	800ca88 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d02a      	beq.n	800ca88 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800ca36:	b672      	cpsid	i
}
 800ca38:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	2301      	movs	r3, #1
 800ca40:	68b9      	ldr	r1, [r7, #8]
 800ca42:	4814      	ldr	r0, [pc, #80]	; (800ca94 <DbgTraceWrite+0xa4>)
 800ca44:	f000 fbb4 	bl	800d1b0 <CircularQueue_Add>
 800ca48:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d015      	beq.n	800ca7c <DbgTraceWrite+0x8c>
 800ca50:	4b11      	ldr	r3, [pc, #68]	; (800ca98 <DbgTraceWrite+0xa8>)
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d010      	beq.n	800ca7c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800ca5a:	4b0f      	ldr	r3, [pc, #60]	; (800ca98 <DbgTraceWrite+0xa8>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	701a      	strb	r2, [r3, #0]
 800ca60:	6a3b      	ldr	r3, [r7, #32]
 800ca62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	f383 8810 	msr	PRIMASK, r3
}
 800ca6a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	4a0a      	ldr	r2, [pc, #40]	; (800ca9c <DbgTraceWrite+0xac>)
 800ca72:	4619      	mov	r1, r3
 800ca74:	69f8      	ldr	r0, [r7, #28]
 800ca76:	f7f5 fe20 	bl	80026ba <DbgOutputTraces>
 800ca7a:	e005      	b.n	800ca88 <DbgTraceWrite+0x98>
 800ca7c:	6a3b      	ldr	r3, [r7, #32]
 800ca7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	f383 8810 	msr	PRIMASK, r3
}
 800ca86:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3728      	adds	r7, #40	; 0x28
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	200008f0 	.word	0x200008f0
 800ca98:	20000025 	.word	0x20000025
 800ca9c:	0800c935 	.word	0x0800c935

0800caa0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	4603      	mov	r3, r0
 800caa8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800caaa:	4b0f      	ldr	r3, [pc, #60]	; (800cae8 <OTP_Read+0x48>)
 800caac:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800caae:	e002      	b.n	800cab6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	3b08      	subs	r3, #8
 800cab4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3307      	adds	r3, #7
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	79fa      	ldrb	r2, [r7, #7]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d003      	beq.n	800caca <OTP_Read+0x2a>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	4a09      	ldr	r2, [pc, #36]	; (800caec <OTP_Read+0x4c>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d1f2      	bne.n	800cab0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	3307      	adds	r3, #7
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	79fa      	ldrb	r2, [r7, #7]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d001      	beq.n	800cada <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800cad6:	2300      	movs	r3, #0
 800cad8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800cada:	68fb      	ldr	r3, [r7, #12]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr
 800cae8:	1fff73f8 	.word	0x1fff73f8
 800caec:	1fff7000 	.word	0x1fff7000

0800caf0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800caf0:	b480      	push	{r7}
 800caf2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800caf4:	4b05      	ldr	r3, [pc, #20]	; (800cb0c <UTIL_LPM_Init+0x1c>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800cafa:	4b05      	ldr	r3, [pc, #20]	; (800cb10 <UTIL_LPM_Init+0x20>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800cb00:	bf00      	nop
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	20001910 	.word	0x20001910
 800cb10:	20001914 	.word	0x20001914

0800cb14 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800cb14:	b480      	push	{r7}
 800cb16:	b087      	sub	sp, #28
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb20:	f3ef 8310 	mrs	r3, PRIMASK
 800cb24:	613b      	str	r3, [r7, #16]
  return(result);
 800cb26:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800cb28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb2a:	b672      	cpsid	i
}
 800cb2c:	bf00      	nop

  switch( state )
 800cb2e:	78fb      	ldrb	r3, [r7, #3]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d008      	beq.n	800cb46 <UTIL_LPM_SetStopMode+0x32>
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d10e      	bne.n	800cb56 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800cb38:	4b0d      	ldr	r3, [pc, #52]	; (800cb70 <UTIL_LPM_SetStopMode+0x5c>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	4a0b      	ldr	r2, [pc, #44]	; (800cb70 <UTIL_LPM_SetStopMode+0x5c>)
 800cb42:	6013      	str	r3, [r2, #0]
      break;
 800cb44:	e008      	b.n	800cb58 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	43da      	mvns	r2, r3
 800cb4a:	4b09      	ldr	r3, [pc, #36]	; (800cb70 <UTIL_LPM_SetStopMode+0x5c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4013      	ands	r3, r2
 800cb50:	4a07      	ldr	r2, [pc, #28]	; (800cb70 <UTIL_LPM_SetStopMode+0x5c>)
 800cb52:	6013      	str	r3, [r2, #0]
      break;
 800cb54:	e000      	b.n	800cb58 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800cb56:	bf00      	nop
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f383 8810 	msr	PRIMASK, r3
}
 800cb62:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cb64:	bf00      	nop
 800cb66:	371c      	adds	r7, #28
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr
 800cb70:	20001910 	.word	0x20001910

0800cb74 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800cb74:	b480      	push	{r7}
 800cb76:	b087      	sub	sp, #28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb80:	f3ef 8310 	mrs	r3, PRIMASK
 800cb84:	613b      	str	r3, [r7, #16]
  return(result);
 800cb86:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800cb88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb8a:	b672      	cpsid	i
}
 800cb8c:	bf00      	nop
  
  switch(state)
 800cb8e:	78fb      	ldrb	r3, [r7, #3]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d008      	beq.n	800cba6 <UTIL_LPM_SetOffMode+0x32>
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d10e      	bne.n	800cbb6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800cb98:	4b0d      	ldr	r3, [pc, #52]	; (800cbd0 <UTIL_LPM_SetOffMode+0x5c>)
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	4a0b      	ldr	r2, [pc, #44]	; (800cbd0 <UTIL_LPM_SetOffMode+0x5c>)
 800cba2:	6013      	str	r3, [r2, #0]
      break;
 800cba4:	e008      	b.n	800cbb8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	43da      	mvns	r2, r3
 800cbaa:	4b09      	ldr	r3, [pc, #36]	; (800cbd0 <UTIL_LPM_SetOffMode+0x5c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4013      	ands	r3, r2
 800cbb0:	4a07      	ldr	r2, [pc, #28]	; (800cbd0 <UTIL_LPM_SetOffMode+0x5c>)
 800cbb2:	6013      	str	r3, [r2, #0]
      break;
 800cbb4:	e000      	b.n	800cbb8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800cbb6:	bf00      	nop
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f383 8810 	msr	PRIMASK, r3
}
 800cbc2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cbc4:	bf00      	nop
 800cbc6:	371c      	adds	r7, #28
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr
 800cbd0:	20001914 	.word	0x20001914

0800cbd4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b090      	sub	sp, #64	; 0x40
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800cbdc:	4b73      	ldr	r3, [pc, #460]	; (800cdac <UTIL_SEQ_Run+0x1d8>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800cbe2:	4b72      	ldr	r3, [pc, #456]	; (800cdac <UTIL_SEQ_Run+0x1d8>)
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4013      	ands	r3, r2
 800cbea:	4a70      	ldr	r2, [pc, #448]	; (800cdac <UTIL_SEQ_Run+0x1d8>)
 800cbec:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800cbee:	4b70      	ldr	r3, [pc, #448]	; (800cdb0 <UTIL_SEQ_Run+0x1dc>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800cbf4:	4b6f      	ldr	r3, [pc, #444]	; (800cdb4 <UTIL_SEQ_Run+0x1e0>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cbfa:	4b6f      	ldr	r3, [pc, #444]	; (800cdb8 <UTIL_SEQ_Run+0x1e4>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800cc00:	4b6e      	ldr	r3, [pc, #440]	; (800cdbc <UTIL_SEQ_Run+0x1e8>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cc06:	e08d      	b.n	800cd24 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cc0c:	e002      	b.n	800cc14 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800cc0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc10:	3301      	adds	r3, #1
 800cc12:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cc14:	4a6a      	ldr	r2, [pc, #424]	; (800cdc0 <UTIL_SEQ_Run+0x1ec>)
 800cc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc18:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1e:	401a      	ands	r2, r3
 800cc20:	4b62      	ldr	r3, [pc, #392]	; (800cdac <UTIL_SEQ_Run+0x1d8>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4013      	ands	r3, r2
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d0f1      	beq.n	800cc0e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800cc2a:	4a65      	ldr	r2, [pc, #404]	; (800cdc0 <UTIL_SEQ_Run+0x1ec>)
 800cc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc2e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc34:	401a      	ands	r2, r3
 800cc36:	4b5d      	ldr	r3, [pc, #372]	; (800cdac <UTIL_SEQ_Run+0x1d8>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800cc3e:	4a60      	ldr	r2, [pc, #384]	; (800cdc0 <UTIL_SEQ_Run+0x1ec>)
 800cc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	4413      	add	r3, r2
 800cc46:	685a      	ldr	r2, [r3, #4]
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	4013      	ands	r3, r2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d106      	bne.n	800cc5e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800cc50:	4a5b      	ldr	r2, [pc, #364]	; (800cdc0 <UTIL_SEQ_Run+0x1ec>)
 800cc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	4413      	add	r3, r2
 800cc58:	f04f 32ff 	mov.w	r2, #4294967295
 800cc5c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cc5e:	4a58      	ldr	r2, [pc, #352]	; (800cdc0 <UTIL_SEQ_Run+0x1ec>)
 800cc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	4413      	add	r3, r2
 800cc66:	685a      	ldr	r2, [r3, #4]
 800cc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f000 f973 	bl	800cf58 <SEQ_BitPosition>
 800cc72:	4603      	mov	r3, r0
 800cc74:	461a      	mov	r2, r3
 800cc76:	4b53      	ldr	r3, [pc, #332]	; (800cdc4 <UTIL_SEQ_Run+0x1f0>)
 800cc78:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800cc7a:	4a51      	ldr	r2, [pc, #324]	; (800cdc0 <UTIL_SEQ_Run+0x1ec>)
 800cc7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	4413      	add	r3, r2
 800cc82:	685a      	ldr	r2, [r3, #4]
 800cc84:	4b4f      	ldr	r3, [pc, #316]	; (800cdc4 <UTIL_SEQ_Run+0x1f0>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2101      	movs	r1, #1
 800cc8a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc8e:	43db      	mvns	r3, r3
 800cc90:	401a      	ands	r2, r3
 800cc92:	494b      	ldr	r1, [pc, #300]	; (800cdc0 <UTIL_SEQ_Run+0x1ec>)
 800cc94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	440b      	add	r3, r1
 800cc9a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc9c:	f3ef 8310 	mrs	r3, PRIMASK
 800cca0:	61bb      	str	r3, [r7, #24]
  return(result);
 800cca2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cca4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800cca6:	b672      	cpsid	i
}
 800cca8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800ccaa:	4b46      	ldr	r3, [pc, #280]	; (800cdc4 <UTIL_SEQ_Run+0x1f0>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccb4:	43da      	mvns	r2, r3
 800ccb6:	4b3e      	ldr	r3, [pc, #248]	; (800cdb0 <UTIL_SEQ_Run+0x1dc>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4013      	ands	r3, r2
 800ccbc:	4a3c      	ldr	r2, [pc, #240]	; (800cdb0 <UTIL_SEQ_Run+0x1dc>)
 800ccbe:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccc4:	e013      	b.n	800ccee <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800ccc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	4a3d      	ldr	r2, [pc, #244]	; (800cdc0 <UTIL_SEQ_Run+0x1ec>)
 800cccc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ccd0:	4b3c      	ldr	r3, [pc, #240]	; (800cdc4 <UTIL_SEQ_Run+0x1f0>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccda:	43da      	mvns	r2, r3
 800ccdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccde:	3b01      	subs	r3, #1
 800cce0:	400a      	ands	r2, r1
 800cce2:	4937      	ldr	r1, [pc, #220]	; (800cdc0 <UTIL_SEQ_Run+0x1ec>)
 800cce4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccea:	3b01      	subs	r3, #1
 800ccec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1e8      	bne.n	800ccc6 <UTIL_SEQ_Run+0xf2>
 800ccf4:	6a3b      	ldr	r3, [r7, #32]
 800ccf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	f383 8810 	msr	PRIMASK, r3
}
 800ccfe:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800cd00:	4b30      	ldr	r3, [pc, #192]	; (800cdc4 <UTIL_SEQ_Run+0x1f0>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a30      	ldr	r2, [pc, #192]	; (800cdc8 <UTIL_SEQ_Run+0x1f4>)
 800cd06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd0a:	4798      	blx	r3

    local_taskset = TaskSet;
 800cd0c:	4b28      	ldr	r3, [pc, #160]	; (800cdb0 <UTIL_SEQ_Run+0x1dc>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800cd12:	4b28      	ldr	r3, [pc, #160]	; (800cdb4 <UTIL_SEQ_Run+0x1e0>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800cd18:	4b27      	ldr	r3, [pc, #156]	; (800cdb8 <UTIL_SEQ_Run+0x1e4>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800cd1e:	4b27      	ldr	r3, [pc, #156]	; (800cdbc <UTIL_SEQ_Run+0x1e8>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cd24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	401a      	ands	r2, r3
 800cd2a:	4b20      	ldr	r3, [pc, #128]	; (800cdac <UTIL_SEQ_Run+0x1d8>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4013      	ands	r3, r2
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d005      	beq.n	800cd40 <UTIL_SEQ_Run+0x16c>
 800cd34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd38:	4013      	ands	r3, r2
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f43f af64 	beq.w	800cc08 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800cd40:	4b20      	ldr	r3, [pc, #128]	; (800cdc4 <UTIL_SEQ_Run+0x1f0>)
 800cd42:	f04f 32ff 	mov.w	r2, #4294967295
 800cd46:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800cd48:	f000 f8f8 	bl	800cf3c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd4c:	f3ef 8310 	mrs	r3, PRIMASK
 800cd50:	613b      	str	r3, [r7, #16]
  return(result);
 800cd52:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800cd54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd56:	b672      	cpsid	i
}
 800cd58:	bf00      	nop
  local_taskset = TaskSet;
 800cd5a:	4b15      	ldr	r3, [pc, #84]	; (800cdb0 <UTIL_SEQ_Run+0x1dc>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800cd60:	4b14      	ldr	r3, [pc, #80]	; (800cdb4 <UTIL_SEQ_Run+0x1e0>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cd66:	4b14      	ldr	r3, [pc, #80]	; (800cdb8 <UTIL_SEQ_Run+0x1e4>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800cd6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd70:	401a      	ands	r2, r3
 800cd72:	4b0e      	ldr	r3, [pc, #56]	; (800cdac <UTIL_SEQ_Run+0x1d8>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4013      	ands	r3, r2
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d107      	bne.n	800cd8c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800cd7c:	4b0f      	ldr	r3, [pc, #60]	; (800cdbc <UTIL_SEQ_Run+0x1e8>)
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd82:	4013      	ands	r3, r2
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d101      	bne.n	800cd8c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800cd88:	f7f5 fc28 	bl	80025dc <UTIL_SEQ_Idle>
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f383 8810 	msr	PRIMASK, r3
}
 800cd96:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800cd98:	f000 f8d7 	bl	800cf4a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800cd9c:	4a03      	ldr	r2, [pc, #12]	; (800cdac <UTIL_SEQ_Run+0x1d8>)
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	6013      	str	r3, [r2, #0]

  return;
 800cda2:	bf00      	nop
}
 800cda4:	3740      	adds	r7, #64	; 0x40
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	2000002c 	.word	0x2000002c
 800cdb0:	20001918 	.word	0x20001918
 800cdb4:	2000191c 	.word	0x2000191c
 800cdb8:	20000028 	.word	0x20000028
 800cdbc:	20001920 	.word	0x20001920
 800cdc0:	200019a8 	.word	0x200019a8
 800cdc4:	20001924 	.word	0x20001924
 800cdc8:	20001928 	.word	0x20001928

0800cdcc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b088      	sub	sp, #32
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdd8:	f3ef 8310 	mrs	r3, PRIMASK
 800cddc:	617b      	str	r3, [r7, #20]
  return(result);
 800cdde:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800cde0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cde2:	b672      	cpsid	i
}
 800cde4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f000 f8b6 	bl	800cf58 <SEQ_BitPosition>
 800cdec:	4603      	mov	r3, r0
 800cdee:	4619      	mov	r1, r3
 800cdf0:	4a06      	ldr	r2, [pc, #24]	; (800ce0c <UTIL_SEQ_RegTask+0x40>)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	f383 8810 	msr	PRIMASK, r3
}
 800ce02:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ce04:	bf00      	nop
}
 800ce06:	3720      	adds	r7, #32
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20001928 	.word	0x20001928

0800ce10 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ce10:	b480      	push	{r7}
 800ce12:	b087      	sub	sp, #28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce1e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce20:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ce22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce24:	b672      	cpsid	i
}
 800ce26:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ce28:	4b0d      	ldr	r3, [pc, #52]	; (800ce60 <UTIL_SEQ_SetTask+0x50>)
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	4a0b      	ldr	r2, [pc, #44]	; (800ce60 <UTIL_SEQ_SetTask+0x50>)
 800ce32:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ce34:	4a0b      	ldr	r2, [pc, #44]	; (800ce64 <UTIL_SEQ_SetTask+0x54>)
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	431a      	orrs	r2, r3
 800ce40:	4908      	ldr	r1, [pc, #32]	; (800ce64 <UTIL_SEQ_SetTask+0x54>)
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	f383 8810 	msr	PRIMASK, r3
}
 800ce52:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ce54:	bf00      	nop
}
 800ce56:	371c      	adds	r7, #28
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr
 800ce60:	20001918 	.word	0x20001918
 800ce64:	200019a8 	.word	0x200019a8

0800ce68 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b087      	sub	sp, #28
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce70:	f3ef 8310 	mrs	r3, PRIMASK
 800ce74:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce76:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ce78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce7a:	b672      	cpsid	i
}
 800ce7c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ce7e:	4b09      	ldr	r3, [pc, #36]	; (800cea4 <UTIL_SEQ_SetEvt+0x3c>)
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4313      	orrs	r3, r2
 800ce86:	4a07      	ldr	r2, [pc, #28]	; (800cea4 <UTIL_SEQ_SetEvt+0x3c>)
 800ce88:	6013      	str	r3, [r2, #0]
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	f383 8810 	msr	PRIMASK, r3
}
 800ce94:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ce96:	bf00      	nop
}
 800ce98:	371c      	adds	r7, #28
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	2000191c 	.word	0x2000191c

0800cea8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b088      	sub	sp, #32
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800ceb0:	4b1f      	ldr	r3, [pc, #124]	; (800cf30 <UTIL_SEQ_WaitEvt+0x88>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800ceb6:	4b1e      	ldr	r3, [pc, #120]	; (800cf30 <UTIL_SEQ_WaitEvt+0x88>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cebe:	d102      	bne.n	800cec6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800cec0:	2300      	movs	r3, #0
 800cec2:	61fb      	str	r3, [r7, #28]
 800cec4:	e005      	b.n	800ced2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800cec6:	4b1a      	ldr	r3, [pc, #104]	; (800cf30 <UTIL_SEQ_WaitEvt+0x88>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2201      	movs	r2, #1
 800cecc:	fa02 f303 	lsl.w	r3, r2, r3
 800ced0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800ced2:	4b18      	ldr	r3, [pc, #96]	; (800cf34 <UTIL_SEQ_WaitEvt+0x8c>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800ced8:	4a16      	ldr	r2, [pc, #88]	; (800cf34 <UTIL_SEQ_WaitEvt+0x8c>)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800cede:	e003      	b.n	800cee8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800cee0:	6879      	ldr	r1, [r7, #4]
 800cee2:	69f8      	ldr	r0, [r7, #28]
 800cee4:	f7f5 fb82 	bl	80025ec <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800cee8:	4b13      	ldr	r3, [pc, #76]	; (800cf38 <UTIL_SEQ_WaitEvt+0x90>)
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4013      	ands	r3, r2
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d0f5      	beq.n	800cee0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800cef4:	4a0e      	ldr	r2, [pc, #56]	; (800cf30 <UTIL_SEQ_WaitEvt+0x88>)
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cefa:	f3ef 8310 	mrs	r3, PRIMASK
 800cefe:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf00:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cf02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf04:	b672      	cpsid	i
}
 800cf06:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	43da      	mvns	r2, r3
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <UTIL_SEQ_WaitEvt+0x90>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4013      	ands	r3, r2
 800cf12:	4a09      	ldr	r2, [pc, #36]	; (800cf38 <UTIL_SEQ_WaitEvt+0x90>)
 800cf14:	6013      	str	r3, [r2, #0]
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f383 8810 	msr	PRIMASK, r3
}
 800cf20:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800cf22:	4a04      	ldr	r2, [pc, #16]	; (800cf34 <UTIL_SEQ_WaitEvt+0x8c>)
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	6013      	str	r3, [r2, #0]
  return;
 800cf28:	bf00      	nop
}
 800cf2a:	3720      	adds	r7, #32
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	20001924 	.word	0x20001924
 800cf34:	20001920 	.word	0x20001920
 800cf38:	2000191c 	.word	0x2000191c

0800cf3c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cf40:	bf00      	nop
}
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800cf4a:	b480      	push	{r7}
 800cf4c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cf4e:	bf00      	nop
}
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800cf60:	2300      	movs	r3, #0
 800cf62:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	0c1b      	lsrs	r3, r3, #16
 800cf6c:	041b      	lsls	r3, r3, #16
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d104      	bne.n	800cf7c <SEQ_BitPosition+0x24>
 800cf72:	2310      	movs	r3, #16
 800cf74:	73fb      	strb	r3, [r7, #15]
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	041b      	lsls	r3, r3, #16
 800cf7a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d105      	bne.n	800cf92 <SEQ_BitPosition+0x3a>
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
 800cf88:	3308      	adds	r3, #8
 800cf8a:	73fb      	strb	r3, [r7, #15]
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	021b      	lsls	r3, r3, #8
 800cf90:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d105      	bne.n	800cfa8 <SEQ_BitPosition+0x50>
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	73fb      	strb	r3, [r7, #15]
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	011b      	lsls	r3, r3, #4
 800cfa6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	0f1b      	lsrs	r3, r3, #28
 800cfac:	4a07      	ldr	r2, [pc, #28]	; (800cfcc <SEQ_BitPosition+0x74>)
 800cfae:	5cd2      	ldrb	r2, [r2, r3]
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800cfb6:	7bfb      	ldrb	r3, [r7, #15]
 800cfb8:	f1c3 031f 	rsb	r3, r3, #31
 800cfbc:	b2db      	uxtb	r3, r3
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	0800f888 	.word	0x0800f888

0800cfd0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	605a      	str	r2, [r3, #4]
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b087      	sub	sp, #28
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cff8:	f3ef 8310 	mrs	r3, PRIMASK
 800cffc:	60fb      	str	r3, [r7, #12]
  return(result);
 800cffe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d002:	b672      	cpsid	i
}
 800d004:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d102      	bne.n	800d016 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800d010:	2301      	movs	r3, #1
 800d012:	75fb      	strb	r3, [r7, #23]
 800d014:	e001      	b.n	800d01a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800d016:	2300      	movs	r3, #0
 800d018:	75fb      	strb	r3, [r7, #23]
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	f383 8810 	msr	PRIMASK, r3
}
 800d024:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800d026:	7dfb      	ldrb	r3, [r7, #23]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	371c      	adds	r7, #28
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800d034:	b480      	push	{r7}
 800d036:	b087      	sub	sp, #28
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d03e:	f3ef 8310 	mrs	r3, PRIMASK
 800d042:	60fb      	str	r3, [r7, #12]
  return(result);
 800d044:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d046:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d048:	b672      	cpsid	i
}
 800d04a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	683a      	ldr	r2, [r7, #0]
 800d066:	605a      	str	r2, [r3, #4]
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	f383 8810 	msr	PRIMASK, r3
}
 800d072:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d074:	bf00      	nop
 800d076:	371c      	adds	r7, #28
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800d080:	b480      	push	{r7}
 800d082:	b087      	sub	sp, #28
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d08a:	f3ef 8310 	mrs	r3, PRIMASK
 800d08e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d090:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d092:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d094:	b672      	cpsid	i
}
 800d096:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	601a      	str	r2, [r3, #0]
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	f383 8810 	msr	PRIMASK, r3
}
 800d0be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d0c0:	bf00      	nop
 800d0c2:	371c      	adds	r7, #28
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b087      	sub	sp, #28
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0d4:	f3ef 8310 	mrs	r3, PRIMASK
 800d0d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d0dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0de:	b672      	cpsid	i
}
 800d0e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	6812      	ldr	r2, [r2, #0]
 800d0ea:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	6852      	ldr	r2, [r2, #4]
 800d0f4:	605a      	str	r2, [r3, #4]
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	f383 8810 	msr	PRIMASK, r3
}
 800d100:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d102:	bf00      	nop
 800d104:	371c      	adds	r7, #28
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr

0800d10e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b086      	sub	sp, #24
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d118:	f3ef 8310 	mrs	r3, PRIMASK
 800d11c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d11e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d120:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d122:	b672      	cpsid	i
}
 800d124:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4618      	mov	r0, r3
 800d134:	f7ff ffca 	bl	800d0cc <LST_remove_node>
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	f383 8810 	msr	PRIMASK, r3
}
 800d142:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d144:	bf00      	nop
 800d146:	3718      	adds	r7, #24
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	68ba      	ldr	r2, [r7, #8]
 800d15e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2200      	movs	r2, #0
 800d170:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	887a      	ldrh	r2, [r7, #2]
 800d182:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	7e3a      	ldrb	r2, [r7, #24]
 800d188:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800d18a:	7e3b      	ldrb	r3, [r7, #24]
 800d18c:	f003 0302 	and.w	r3, r3, #2
 800d190:	2b00      	cmp	r3, #0
 800d192:	d006      	beq.n	800d1a2 <CircularQueue_Init+0x56>
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	891b      	ldrh	r3, [r3, #8]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d002      	beq.n	800d1a2 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800d19c:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a0:	e000      	b.n	800d1a4 <CircularQueue_Init+0x58>
  }
  return 0;
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3714      	adds	r7, #20
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b08e      	sub	sp, #56	; 0x38
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	603b      	str	r3, [r7, #0]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800d1d8:	2300      	movs	r3, #0
 800d1da:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	891b      	ldrh	r3, [r3, #8]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d101      	bne.n	800d1e8 <CircularQueue_Add+0x38>
 800d1e4:	2302      	movs	r3, #2
 800d1e6:	e000      	b.n	800d1ea <CircularQueue_Add+0x3a>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d02a      	beq.n	800d24a <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	891b      	ldrh	r3, [r3, #8]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d123      	bne.n	800d244 <CircularQueue_Add+0x94>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	4413      	add	r3, r2
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	b29a      	uxth	r2, r3
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6819      	ldr	r1, [r3, #0]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	691b      	ldr	r3, [r3, #16]
 800d212:	1c58      	adds	r0, r3, #1
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	4298      	cmp	r0, r3
 800d21a:	d306      	bcc.n	800d22a <CircularQueue_Add+0x7a>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6918      	ldr	r0, [r3, #16]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	1ac3      	subs	r3, r0, r3
 800d226:	3301      	adds	r3, #1
 800d228:	e002      	b.n	800d230 <CircularQueue_Add+0x80>
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	3301      	adds	r3, #1
 800d230:	440b      	add	r3, r1
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	b29b      	uxth	r3, r3
 800d236:	021b      	lsls	r3, r3, #8
 800d238:	b29b      	uxth	r3, r3
 800d23a:	4413      	add	r3, r2
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	3302      	adds	r3, #2
 800d240:	b29b      	uxth	r3, r3
 800d242:	e001      	b.n	800d248 <CircularQueue_Add+0x98>
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	891b      	ldrh	r3, [r3, #8]
 800d248:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	891b      	ldrh	r3, [r3, #8]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d002      	beq.n	800d258 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	891b      	ldrh	r3, [r3, #8]
 800d256:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	691a      	ldr	r2, [r3, #16]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	429a      	cmp	r2, r3
 800d262:	d307      	bcc.n	800d274 <CircularQueue_Add+0xc4>
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	685a      	ldr	r2, [r3, #4]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6919      	ldr	r1, [r3, #16]
 800d26c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d26e:	440b      	add	r3, r1
 800d270:	1ad3      	subs	r3, r2, r3
 800d272:	e000      	b.n	800d276 <CircularQueue_Add+0xc6>
 800d274:	2300      	movs	r3, #0
 800d276:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800d278:	88fa      	ldrh	r2, [r7, #6]
 800d27a:	7ffb      	ldrb	r3, [r7, #31]
 800d27c:	4413      	add	r3, r2
 800d27e:	461a      	mov	r2, r3
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	fb02 f303 	mul.w	r3, r2, r3
 800d286:	69ba      	ldr	r2, [r7, #24]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d80b      	bhi.n	800d2a4 <CircularQueue_Add+0xf4>
 800d28c:	88fa      	ldrh	r2, [r7, #6]
 800d28e:	7ffb      	ldrb	r3, [r7, #31]
 800d290:	4413      	add	r3, r2
 800d292:	461a      	mov	r2, r3
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	fbb3 f1f2 	udiv	r1, r3, r2
 800d29a:	fb01 f202 	mul.w	r2, r1, r2
 800d29e:	1a9b      	subs	r3, r3, r2
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	e000      	b.n	800d2a6 <CircularQueue_Add+0xf6>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800d2a8:	7dfa      	ldrb	r2, [r7, #23]
 800d2aa:	7ffb      	ldrb	r3, [r7, #31]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	bf8c      	ite	hi
 800d2b0:	2301      	movhi	r3, #1
 800d2b2:	2300      	movls	r3, #0
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800d2b8:	7fbb      	ldrb	r3, [r7, #30]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d008      	beq.n	800d2d0 <CircularQueue_Add+0x120>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	7f1b      	ldrb	r3, [r3, #28]
 800d2c2:	f003 0301 	and.w	r3, r3, #1
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d002      	beq.n	800d2d0 <CircularQueue_Add+0x120>
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	e000      	b.n	800d2d2 <CircularQueue_Add+0x122>
 800d2d0:	8bbb      	ldrh	r3, [r7, #28]
 800d2d2:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800d2d4:	7fbb      	ldrb	r3, [r7, #30]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d008      	beq.n	800d2ec <CircularQueue_Add+0x13c>
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	7f1b      	ldrb	r3, [r3, #28]
 800d2de:	f003 0302 	and.w	r3, r3, #2
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d002      	beq.n	800d2ec <CircularQueue_Add+0x13c>
 800d2e6:	7ffb      	ldrb	r3, [r7, #31]
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	e000      	b.n	800d2ee <CircularQueue_Add+0x13e>
 800d2ec:	8bbb      	ldrh	r3, [r7, #28]
 800d2ee:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800d2f0:	88fb      	ldrh	r3, [r7, #6]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f000 817e 	beq.w	800d5f4 <CircularQueue_Add+0x444>
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	695a      	ldr	r2, [r3, #20]
 800d2fc:	88f9      	ldrh	r1, [r7, #6]
 800d2fe:	7ffb      	ldrb	r3, [r7, #31]
 800d300:	440b      	add	r3, r1
 800d302:	4619      	mov	r1, r3
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	fb01 f303 	mul.w	r3, r1, r3
 800d30a:	441a      	add	r2, r3
 800d30c:	8bbb      	ldrh	r3, [r7, #28]
 800d30e:	441a      	add	r2, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	429a      	cmp	r2, r3
 800d316:	f200 816d 	bhi.w	800d5f4 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800d31a:	2300      	movs	r3, #0
 800d31c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d31e:	e14a      	b.n	800d5b6 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	691a      	ldr	r2, [r3, #16]
 800d324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d326:	441a      	add	r2, r3
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d307      	bcc.n	800d340 <CircularQueue_Add+0x190>
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	691a      	ldr	r2, [r3, #16]
 800d334:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d336:	441a      	add	r2, r3
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	e003      	b.n	800d348 <CircularQueue_Add+0x198>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	691a      	ldr	r2, [r3, #16]
 800d344:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d346:	4413      	add	r3, r2
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	691b      	ldr	r3, [r3, #16]
 800d350:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	891b      	ldrh	r3, [r3, #8]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d130      	bne.n	800d3bc <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d360:	1c59      	adds	r1, r3, #1
 800d362:	6339      	str	r1, [r7, #48]	; 0x30
 800d364:	4413      	add	r3, r2
 800d366:	88fa      	ldrh	r2, [r7, #6]
 800d368:	b2d2      	uxtb	r2, r2
 800d36a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d372:	429a      	cmp	r2, r3
 800d374:	d304      	bcc.n	800d380 <CircularQueue_Add+0x1d0>
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d37c:	1ad3      	subs	r3, r2, r3
 800d37e:	e000      	b.n	800d382 <CircularQueue_Add+0x1d2>
 800d380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d382:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800d384:	88fb      	ldrh	r3, [r7, #6]
 800d386:	0a1b      	lsrs	r3, r3, #8
 800d388:	b298      	uxth	r0, r3
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d390:	1c59      	adds	r1, r3, #1
 800d392:	6339      	str	r1, [r7, #48]	; 0x30
 800d394:	4413      	add	r3, r2
 800d396:	b2c2      	uxtb	r2, r0
 800d398:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d304      	bcc.n	800d3ae <CircularQueue_Add+0x1fe>
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	e000      	b.n	800d3b0 <CircularQueue_Add+0x200>
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	695b      	ldr	r3, [r3, #20]
 800d3b6:	1c9a      	adds	r2, r3, #2
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800d3bc:	88fa      	ldrh	r2, [r7, #6]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6859      	ldr	r1, [r3, #4]
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	1acb      	subs	r3, r1, r3
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	bf28      	it	cs
 800d3ca:	4613      	movcs	r3, r2
 800d3cc:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800d3ce:	88fb      	ldrh	r3, [r7, #6]
 800d3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d007      	beq.n	800d3e6 <CircularQueue_Add+0x236>
 800d3d6:	88fb      	ldrh	r3, [r7, #6]
 800d3d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d225      	bcs.n	800d42a <CircularQueue_Add+0x27a>
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	7f1b      	ldrb	r3, [r3, #28]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d121      	bne.n	800d42a <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	18d0      	adds	r0, r2, r3
 800d3ee:	88fb      	ldrh	r3, [r7, #6]
 800d3f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3f2:	fb02 f303 	mul.w	r3, r2, r3
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	f000 fae1 	bl	800d9c4 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	695a      	ldr	r2, [r3, #20]
 800d406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d408:	441a      	add	r2, r3
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800d40e:	2300      	movs	r3, #0
 800d410:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d414:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800d416:	88fa      	ldrh	r2, [r7, #6]
 800d418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800d41e:	7ffb      	ldrb	r3, [r7, #31]
 800d420:	b29a      	uxth	r2, r3
 800d422:	88fb      	ldrh	r3, [r7, #6]
 800d424:	4413      	add	r3, r2
 800d426:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d428:	e0a4      	b.n	800d574 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f000 80a1 	beq.w	800d574 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	7f1b      	ldrb	r3, [r3, #28]
 800d436:	f003 0301 	and.w	r3, r3, #1
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d03a      	beq.n	800d4b4 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	891b      	ldrh	r3, [r3, #8]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10d      	bne.n	800d462 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	3b02      	subs	r3, #2
 800d44e:	4413      	add	r3, r2
 800d450:	22ff      	movs	r2, #255	; 0xff
 800d452:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45a:	3b01      	subs	r3, #1
 800d45c:	4413      	add	r3, r2
 800d45e:	22ff      	movs	r2, #255	; 0xff
 800d460:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	695a      	ldr	r2, [r3, #20]
 800d466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d468:	441a      	add	r2, r3
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800d46e:	2300      	movs	r3, #0
 800d470:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800d472:	88fb      	ldrh	r3, [r7, #6]
 800d474:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800d476:	2300      	movs	r3, #0
 800d478:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	891b      	ldrh	r3, [r3, #8]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d16f      	bne.n	800d562 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d488:	1c59      	adds	r1, r3, #1
 800d48a:	6339      	str	r1, [r7, #48]	; 0x30
 800d48c:	4413      	add	r3, r2
 800d48e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d490:	b2d2      	uxtb	r2, r2
 800d492:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d496:	0a18      	lsrs	r0, r3, #8
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49e:	1c59      	adds	r1, r3, #1
 800d4a0:	6339      	str	r1, [r7, #48]	; 0x30
 800d4a2:	4413      	add	r3, r2
 800d4a4:	b2c2      	uxtb	r2, r0
 800d4a6:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	695b      	ldr	r3, [r3, #20]
 800d4ac:	1c9a      	adds	r2, r3, #2
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	615a      	str	r2, [r3, #20]
 800d4b2:	e056      	b.n	800d562 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	7f1b      	ldrb	r3, [r3, #28]
 800d4b8:	f003 0302 	and.w	r3, r3, #2
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d050      	beq.n	800d562 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	891b      	ldrh	r3, [r3, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d14a      	bne.n	800d55e <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ce:	3b02      	subs	r3, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4d4:	b2d2      	uxtb	r2, r2
 800d4d6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4da:	0a19      	lsrs	r1, r3, #8
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	4413      	add	r3, r2
 800d4e6:	b2ca      	uxtb	r2, r1
 800d4e8:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	18d0      	adds	r0, r2, r3
 800d4f2:	88fb      	ldrh	r3, [r7, #6]
 800d4f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4f6:	fb02 f303 	mul.w	r3, r2, r3
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d500:	4619      	mov	r1, r3
 800d502:	f000 fa5f 	bl	800d9c4 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	695a      	ldr	r2, [r3, #20]
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	441a      	add	r2, r3
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800d512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d514:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800d516:	88fa      	ldrh	r2, [r7, #6]
 800d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	699b      	ldr	r3, [r3, #24]
 800d522:	1c5a      	adds	r2, r3, #1
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800d528:	2300      	movs	r3, #0
 800d52a:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d532:	1c59      	adds	r1, r3, #1
 800d534:	6339      	str	r1, [r7, #48]	; 0x30
 800d536:	4413      	add	r3, r2
 800d538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d53a:	b2d2      	uxtb	r2, r2
 800d53c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d540:	0a18      	lsrs	r0, r3, #8
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d548:	1c59      	adds	r1, r3, #1
 800d54a:	6339      	str	r1, [r7, #48]	; 0x30
 800d54c:	4413      	add	r3, r2
 800d54e:	b2c2      	uxtb	r2, r0
 800d550:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	695b      	ldr	r3, [r3, #20]
 800d556:	1c9a      	adds	r2, r3, #2
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	615a      	str	r2, [r3, #20]
 800d55c:	e001      	b.n	800d562 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800d55e:	2300      	movs	r3, #0
 800d560:	e049      	b.n	800d5f6 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800d562:	7ffb      	ldrb	r3, [r7, #31]
 800d564:	b29a      	uxth	r2, r3
 800d566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d568:	b29b      	uxth	r3, r3
 800d56a:	4413      	add	r3, r2
 800d56c:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2200      	movs	r2, #0
 800d572:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800d574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d576:	2b00      	cmp	r3, #0
 800d578:	d015      	beq.n	800d5a6 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d580:	18d0      	adds	r0, r2, r3
 800d582:	88fb      	ldrh	r3, [r7, #6]
 800d584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d586:	fb03 f202 	mul.w	r2, r3, r2
 800d58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58c:	4413      	add	r3, r2
 800d58e:	68ba      	ldr	r2, [r7, #8]
 800d590:	4413      	add	r3, r2
 800d592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d594:	4619      	mov	r1, r3
 800d596:	f000 fa15 	bl	800d9c4 <memcpy>
        q->byteCount += NbBytesToCopy;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	695a      	ldr	r2, [r3, #20]
 800d59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a0:	441a      	add	r2, r3
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	1c5a      	adds	r2, r3, #1
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800d5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	f4ff aeb0 	bcc.w	800d320 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6919      	ldr	r1, [r3, #16]
 800d5c8:	7ffb      	ldrb	r3, [r7, #31]
 800d5ca:	4419      	add	r1, r3
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	4299      	cmp	r1, r3
 800d5d2:	d307      	bcc.n	800d5e4 <CircularQueue_Add+0x434>
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6919      	ldr	r1, [r3, #16]
 800d5d8:	7ffb      	ldrb	r3, [r7, #31]
 800d5da:	4419      	add	r1, r3
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	1acb      	subs	r3, r1, r3
 800d5e2:	e003      	b.n	800d5ec <CircularQueue_Add+0x43c>
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6919      	ldr	r1, [r3, #16]
 800d5e8:	7ffb      	ldrb	r3, [r7, #31]
 800d5ea:	440b      	add	r3, r1
 800d5ec:	4413      	add	r3, r2
 800d5ee:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800d5f0:	6a3b      	ldr	r3, [r7, #32]
 800d5f2:	e000      	b.n	800d5f6 <CircularQueue_Add+0x446>
    return NULL;
 800d5f4:	2300      	movs	r3, #0
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3738      	adds	r7, #56	; 0x38
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800d5fe:	b480      	push	{r7}
 800d600:	b085      	sub	sp, #20
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d608:	2300      	movs	r3, #0
 800d60a:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800d60c:	2300      	movs	r3, #0
 800d60e:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	891b      	ldrh	r3, [r3, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d101      	bne.n	800d61c <CircularQueue_Remove+0x1e>
 800d618:	2302      	movs	r3, #2
 800d61a:	e000      	b.n	800d61e <CircularQueue_Remove+0x20>
 800d61c:	2300      	movs	r3, #0
 800d61e:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800d620:	2300      	movs	r3, #0
 800d622:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	695b      	ldr	r3, [r3, #20]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f000 80cc 	beq.w	800d7c6 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	891b      	ldrh	r3, [r3, #8]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d121      	bne.n	800d67a <CircularQueue_Remove+0x7c>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	4413      	add	r3, r2
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	b29a      	uxth	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6819      	ldr	r1, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	1c58      	adds	r0, r3, #1
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	4298      	cmp	r0, r3
 800d654:	d306      	bcc.n	800d664 <CircularQueue_Remove+0x66>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68d8      	ldr	r0, [r3, #12]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	1ac3      	subs	r3, r0, r3
 800d660:	3301      	adds	r3, #1
 800d662:	e002      	b.n	800d66a <CircularQueue_Remove+0x6c>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	3301      	adds	r3, #1
 800d66a:	440b      	add	r3, r1
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	b29b      	uxth	r3, r3
 800d670:	021b      	lsls	r3, r3, #8
 800d672:	b29b      	uxth	r3, r3
 800d674:	4413      	add	r3, r2
 800d676:	b29b      	uxth	r3, r3
 800d678:	e001      	b.n	800d67e <CircularQueue_Remove+0x80>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	891b      	ldrh	r3, [r3, #8]
 800d67e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	7f1b      	ldrb	r3, [r3, #28]
 800d684:	f003 0301 	and.w	r3, r3, #1
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d057      	beq.n	800d73c <CircularQueue_Remove+0x13e>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	7f1b      	ldrb	r3, [r3, #28]
 800d690:	f003 0302 	and.w	r3, r3, #2
 800d694:	2b00      	cmp	r3, #0
 800d696:	d151      	bne.n	800d73c <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d698:	897b      	ldrh	r3, [r7, #10]
 800d69a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d103      	bne.n	800d6aa <CircularQueue_Remove+0xac>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	891b      	ldrh	r3, [r3, #8]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d012      	beq.n	800d6d0 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	68da      	ldr	r2, [r3, #12]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d942      	bls.n	800d73c <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	891b      	ldrh	r3, [r3, #8]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d03e      	beq.n	800d73c <CircularQueue_Remove+0x13e>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	685a      	ldr	r2, [r3, #4]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	1ad3      	subs	r3, r2, r3
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	8912      	ldrh	r2, [r2, #8]
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d235      	bcs.n	800d73c <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	695a      	ldr	r2, [r3, #20]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	68d9      	ldr	r1, [r3, #12]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	1acb      	subs	r3, r1, r3
 800d6de:	441a      	add	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	891b      	ldrh	r3, [r3, #8]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d121      	bne.n	800d736 <CircularQueue_Remove+0x138>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6819      	ldr	r1, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	1c58      	adds	r0, r3, #1
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	4298      	cmp	r0, r3
 800d710:	d306      	bcc.n	800d720 <CircularQueue_Remove+0x122>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	68d8      	ldr	r0, [r3, #12]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	1ac3      	subs	r3, r0, r3
 800d71c:	3301      	adds	r3, #1
 800d71e:	e002      	b.n	800d726 <CircularQueue_Remove+0x128>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	3301      	adds	r3, #1
 800d726:	440b      	add	r3, r1
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	021b      	lsls	r3, r3, #8
 800d72e:	b29b      	uxth	r3, r3
 800d730:	4413      	add	r3, r2
 800d732:	b29b      	uxth	r3, r3
 800d734:	e001      	b.n	800d73a <CircularQueue_Remove+0x13c>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	891b      	ldrh	r3, [r3, #8]
 800d73a:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	68d9      	ldr	r1, [r3, #12]
 800d744:	7a7b      	ldrb	r3, [r7, #9]
 800d746:	4419      	add	r1, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	4299      	cmp	r1, r3
 800d74e:	d307      	bcc.n	800d760 <CircularQueue_Remove+0x162>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	68d9      	ldr	r1, [r3, #12]
 800d754:	7a7b      	ldrb	r3, [r7, #9]
 800d756:	4419      	add	r1, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	1acb      	subs	r3, r1, r3
 800d75e:	e003      	b.n	800d768 <CircularQueue_Remove+0x16a>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	68d9      	ldr	r1, [r3, #12]
 800d764:	7a7b      	ldrb	r3, [r7, #9]
 800d766:	440b      	add	r3, r1
 800d768:	4413      	add	r3, r2
 800d76a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	695b      	ldr	r3, [r3, #20]
 800d770:	8979      	ldrh	r1, [r7, #10]
 800d772:	7a7a      	ldrb	r2, [r7, #9]
 800d774:	440a      	add	r2, r1
 800d776:	1a9a      	subs	r2, r3, r2
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d01b      	beq.n	800d7bc <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	68da      	ldr	r2, [r3, #12]
 800d788:	897b      	ldrh	r3, [r7, #10]
 800d78a:	441a      	add	r2, r3
 800d78c:	7a7b      	ldrb	r3, [r7, #9]
 800d78e:	441a      	add	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	429a      	cmp	r2, r3
 800d796:	d309      	bcc.n	800d7ac <CircularQueue_Remove+0x1ae>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	68da      	ldr	r2, [r3, #12]
 800d79c:	897b      	ldrh	r3, [r7, #10]
 800d79e:	441a      	add	r2, r3
 800d7a0:	7a7b      	ldrb	r3, [r7, #9]
 800d7a2:	441a      	add	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	1ad3      	subs	r3, r2, r3
 800d7aa:	e005      	b.n	800d7b8 <CircularQueue_Remove+0x1ba>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	68da      	ldr	r2, [r3, #12]
 800d7b0:	897b      	ldrh	r3, [r7, #10]
 800d7b2:	441a      	add	r2, r3
 800d7b4:	7a7b      	ldrb	r3, [r7, #9]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	699b      	ldr	r3, [r3, #24]
 800d7c0:	1e5a      	subs	r2, r3, #1
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	897a      	ldrh	r2, [r7, #10]
 800d7d0:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3714      	adds	r7, #20
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b087      	sub	sp, #28
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	891b      	ldrh	r3, [r3, #8]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d101      	bne.n	800d7fe <CircularQueue_Sense+0x1e>
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	e000      	b.n	800d800 <CircularQueue_Sense+0x20>
 800d7fe:	2300      	movs	r3, #0
 800d800:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800d802:	2300      	movs	r3, #0
 800d804:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	695b      	ldr	r3, [r3, #20]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f000 8090 	beq.w	800d934 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	891b      	ldrh	r3, [r3, #8]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d121      	bne.n	800d866 <CircularQueue_Sense+0x86>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	4413      	add	r3, r2
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	b29a      	uxth	r2, r3
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6819      	ldr	r1, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	1c58      	adds	r0, r3, #1
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	4298      	cmp	r0, r3
 800d840:	d306      	bcc.n	800d850 <CircularQueue_Sense+0x70>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	68d8      	ldr	r0, [r3, #12]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	1ac3      	subs	r3, r0, r3
 800d84c:	3301      	adds	r3, #1
 800d84e:	e002      	b.n	800d856 <CircularQueue_Sense+0x76>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	3301      	adds	r3, #1
 800d856:	440b      	add	r3, r1
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	021b      	lsls	r3, r3, #8
 800d85e:	b29b      	uxth	r3, r3
 800d860:	4413      	add	r3, r2
 800d862:	b29b      	uxth	r3, r3
 800d864:	e001      	b.n	800d86a <CircularQueue_Sense+0x8a>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	891b      	ldrh	r3, [r3, #8]
 800d86a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	7f1b      	ldrb	r3, [r3, #28]
 800d870:	f003 0301 	and.w	r3, r3, #1
 800d874:	2b00      	cmp	r3, #0
 800d876:	d048      	beq.n	800d90a <CircularQueue_Sense+0x12a>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	7f1b      	ldrb	r3, [r3, #28]
 800d87c:	f003 0302 	and.w	r3, r3, #2
 800d880:	2b00      	cmp	r3, #0
 800d882:	d142      	bne.n	800d90a <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d884:	8a7b      	ldrh	r3, [r7, #18]
 800d886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d103      	bne.n	800d896 <CircularQueue_Sense+0xb6>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	891b      	ldrh	r3, [r3, #8]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d012      	beq.n	800d8bc <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	68da      	ldr	r2, [r3, #12]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d933      	bls.n	800d90a <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	891b      	ldrh	r3, [r3, #8]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d02f      	beq.n	800d90a <CircularQueue_Sense+0x12a>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	685a      	ldr	r2, [r3, #4]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	8912      	ldrh	r2, [r2, #8]
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d226      	bcs.n	800d90a <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800d8bc:	2300      	movs	r3, #0
 800d8be:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	891b      	ldrh	r3, [r3, #8]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d11d      	bne.n	800d904 <CircularQueue_Sense+0x124>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6819      	ldr	r1, [r3, #0]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	1c58      	adds	r0, r3, #1
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	4298      	cmp	r0, r3
 800d8e2:	d305      	bcc.n	800d8f0 <CircularQueue_Sense+0x110>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	1ac3      	subs	r3, r0, r3
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	e001      	b.n	800d8f4 <CircularQueue_Sense+0x114>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	440b      	add	r3, r1
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	021b      	lsls	r3, r3, #8
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	4413      	add	r3, r2
 800d900:	b29b      	uxth	r3, r3
 800d902:	e001      	b.n	800d908 <CircularQueue_Sense+0x128>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	891b      	ldrh	r3, [r3, #8]
 800d908:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	7af9      	ldrb	r1, [r7, #11]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	4419      	add	r1, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	4299      	cmp	r1, r3
 800d91a:	d306      	bcc.n	800d92a <CircularQueue_Sense+0x14a>
 800d91c:	7af9      	ldrb	r1, [r7, #11]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	4419      	add	r1, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	1acb      	subs	r3, r1, r3
 800d928:	e002      	b.n	800d930 <CircularQueue_Sense+0x150>
 800d92a:	7af9      	ldrb	r1, [r7, #11]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	440b      	add	r3, r1
 800d930:	4413      	add	r3, r2
 800d932:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d002      	beq.n	800d940 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	8a7a      	ldrh	r2, [r7, #18]
 800d93e:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800d940:	697b      	ldr	r3, [r7, #20]
}
 800d942:	4618      	mov	r0, r3
 800d944:	371c      	adds	r7, #28
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr
	...

0800d950 <calloc>:
 800d950:	4b02      	ldr	r3, [pc, #8]	; (800d95c <calloc+0xc>)
 800d952:	460a      	mov	r2, r1
 800d954:	4601      	mov	r1, r0
 800d956:	6818      	ldr	r0, [r3, #0]
 800d958:	f000 b84a 	b.w	800d9f0 <_calloc_r>
 800d95c:	20000030 	.word	0x20000030

0800d960 <__errno>:
 800d960:	4b01      	ldr	r3, [pc, #4]	; (800d968 <__errno+0x8>)
 800d962:	6818      	ldr	r0, [r3, #0]
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	20000030 	.word	0x20000030

0800d96c <__libc_init_array>:
 800d96c:	b570      	push	{r4, r5, r6, lr}
 800d96e:	4d0d      	ldr	r5, [pc, #52]	; (800d9a4 <__libc_init_array+0x38>)
 800d970:	4c0d      	ldr	r4, [pc, #52]	; (800d9a8 <__libc_init_array+0x3c>)
 800d972:	1b64      	subs	r4, r4, r5
 800d974:	10a4      	asrs	r4, r4, #2
 800d976:	2600      	movs	r6, #0
 800d978:	42a6      	cmp	r6, r4
 800d97a:	d109      	bne.n	800d990 <__libc_init_array+0x24>
 800d97c:	4d0b      	ldr	r5, [pc, #44]	; (800d9ac <__libc_init_array+0x40>)
 800d97e:	4c0c      	ldr	r4, [pc, #48]	; (800d9b0 <__libc_init_array+0x44>)
 800d980:	f001 f9f6 	bl	800ed70 <_init>
 800d984:	1b64      	subs	r4, r4, r5
 800d986:	10a4      	asrs	r4, r4, #2
 800d988:	2600      	movs	r6, #0
 800d98a:	42a6      	cmp	r6, r4
 800d98c:	d105      	bne.n	800d99a <__libc_init_array+0x2e>
 800d98e:	bd70      	pop	{r4, r5, r6, pc}
 800d990:	f855 3b04 	ldr.w	r3, [r5], #4
 800d994:	4798      	blx	r3
 800d996:	3601      	adds	r6, #1
 800d998:	e7ee      	b.n	800d978 <__libc_init_array+0xc>
 800d99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d99e:	4798      	blx	r3
 800d9a0:	3601      	adds	r6, #1
 800d9a2:	e7f2      	b.n	800d98a <__libc_init_array+0x1e>
 800d9a4:	0800f938 	.word	0x0800f938
 800d9a8:	0800f938 	.word	0x0800f938
 800d9ac:	0800f938 	.word	0x0800f938
 800d9b0:	0800f93c 	.word	0x0800f93c

0800d9b4 <free>:
 800d9b4:	4b02      	ldr	r3, [pc, #8]	; (800d9c0 <free+0xc>)
 800d9b6:	4601      	mov	r1, r0
 800d9b8:	6818      	ldr	r0, [r3, #0]
 800d9ba:	f000 b82f 	b.w	800da1c <_free_r>
 800d9be:	bf00      	nop
 800d9c0:	20000030 	.word	0x20000030

0800d9c4 <memcpy>:
 800d9c4:	440a      	add	r2, r1
 800d9c6:	4291      	cmp	r1, r2
 800d9c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9cc:	d100      	bne.n	800d9d0 <memcpy+0xc>
 800d9ce:	4770      	bx	lr
 800d9d0:	b510      	push	{r4, lr}
 800d9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9da:	4291      	cmp	r1, r2
 800d9dc:	d1f9      	bne.n	800d9d2 <memcpy+0xe>
 800d9de:	bd10      	pop	{r4, pc}

0800d9e0 <memset>:
 800d9e0:	4402      	add	r2, r0
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d100      	bne.n	800d9ea <memset+0xa>
 800d9e8:	4770      	bx	lr
 800d9ea:	f803 1b01 	strb.w	r1, [r3], #1
 800d9ee:	e7f9      	b.n	800d9e4 <memset+0x4>

0800d9f0 <_calloc_r>:
 800d9f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9f2:	fba1 2402 	umull	r2, r4, r1, r2
 800d9f6:	b94c      	cbnz	r4, 800da0c <_calloc_r+0x1c>
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	9201      	str	r2, [sp, #4]
 800d9fc:	f000 f87a 	bl	800daf4 <_malloc_r>
 800da00:	9a01      	ldr	r2, [sp, #4]
 800da02:	4605      	mov	r5, r0
 800da04:	b930      	cbnz	r0, 800da14 <_calloc_r+0x24>
 800da06:	4628      	mov	r0, r5
 800da08:	b003      	add	sp, #12
 800da0a:	bd30      	pop	{r4, r5, pc}
 800da0c:	220c      	movs	r2, #12
 800da0e:	6002      	str	r2, [r0, #0]
 800da10:	2500      	movs	r5, #0
 800da12:	e7f8      	b.n	800da06 <_calloc_r+0x16>
 800da14:	4621      	mov	r1, r4
 800da16:	f7ff ffe3 	bl	800d9e0 <memset>
 800da1a:	e7f4      	b.n	800da06 <_calloc_r+0x16>

0800da1c <_free_r>:
 800da1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da1e:	2900      	cmp	r1, #0
 800da20:	d044      	beq.n	800daac <_free_r+0x90>
 800da22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da26:	9001      	str	r0, [sp, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	f1a1 0404 	sub.w	r4, r1, #4
 800da2e:	bfb8      	it	lt
 800da30:	18e4      	addlt	r4, r4, r3
 800da32:	f000 fa61 	bl	800def8 <__malloc_lock>
 800da36:	4a1e      	ldr	r2, [pc, #120]	; (800dab0 <_free_r+0x94>)
 800da38:	9801      	ldr	r0, [sp, #4]
 800da3a:	6813      	ldr	r3, [r2, #0]
 800da3c:	b933      	cbnz	r3, 800da4c <_free_r+0x30>
 800da3e:	6063      	str	r3, [r4, #4]
 800da40:	6014      	str	r4, [r2, #0]
 800da42:	b003      	add	sp, #12
 800da44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da48:	f000 ba5c 	b.w	800df04 <__malloc_unlock>
 800da4c:	42a3      	cmp	r3, r4
 800da4e:	d908      	bls.n	800da62 <_free_r+0x46>
 800da50:	6825      	ldr	r5, [r4, #0]
 800da52:	1961      	adds	r1, r4, r5
 800da54:	428b      	cmp	r3, r1
 800da56:	bf01      	itttt	eq
 800da58:	6819      	ldreq	r1, [r3, #0]
 800da5a:	685b      	ldreq	r3, [r3, #4]
 800da5c:	1949      	addeq	r1, r1, r5
 800da5e:	6021      	streq	r1, [r4, #0]
 800da60:	e7ed      	b.n	800da3e <_free_r+0x22>
 800da62:	461a      	mov	r2, r3
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	b10b      	cbz	r3, 800da6c <_free_r+0x50>
 800da68:	42a3      	cmp	r3, r4
 800da6a:	d9fa      	bls.n	800da62 <_free_r+0x46>
 800da6c:	6811      	ldr	r1, [r2, #0]
 800da6e:	1855      	adds	r5, r2, r1
 800da70:	42a5      	cmp	r5, r4
 800da72:	d10b      	bne.n	800da8c <_free_r+0x70>
 800da74:	6824      	ldr	r4, [r4, #0]
 800da76:	4421      	add	r1, r4
 800da78:	1854      	adds	r4, r2, r1
 800da7a:	42a3      	cmp	r3, r4
 800da7c:	6011      	str	r1, [r2, #0]
 800da7e:	d1e0      	bne.n	800da42 <_free_r+0x26>
 800da80:	681c      	ldr	r4, [r3, #0]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	6053      	str	r3, [r2, #4]
 800da86:	4421      	add	r1, r4
 800da88:	6011      	str	r1, [r2, #0]
 800da8a:	e7da      	b.n	800da42 <_free_r+0x26>
 800da8c:	d902      	bls.n	800da94 <_free_r+0x78>
 800da8e:	230c      	movs	r3, #12
 800da90:	6003      	str	r3, [r0, #0]
 800da92:	e7d6      	b.n	800da42 <_free_r+0x26>
 800da94:	6825      	ldr	r5, [r4, #0]
 800da96:	1961      	adds	r1, r4, r5
 800da98:	428b      	cmp	r3, r1
 800da9a:	bf04      	itt	eq
 800da9c:	6819      	ldreq	r1, [r3, #0]
 800da9e:	685b      	ldreq	r3, [r3, #4]
 800daa0:	6063      	str	r3, [r4, #4]
 800daa2:	bf04      	itt	eq
 800daa4:	1949      	addeq	r1, r1, r5
 800daa6:	6021      	streq	r1, [r4, #0]
 800daa8:	6054      	str	r4, [r2, #4]
 800daaa:	e7ca      	b.n	800da42 <_free_r+0x26>
 800daac:	b003      	add	sp, #12
 800daae:	bd30      	pop	{r4, r5, pc}
 800dab0:	200019b8 	.word	0x200019b8

0800dab4 <sbrk_aligned>:
 800dab4:	b570      	push	{r4, r5, r6, lr}
 800dab6:	4e0e      	ldr	r6, [pc, #56]	; (800daf0 <sbrk_aligned+0x3c>)
 800dab8:	460c      	mov	r4, r1
 800daba:	6831      	ldr	r1, [r6, #0]
 800dabc:	4605      	mov	r5, r0
 800dabe:	b911      	cbnz	r1, 800dac6 <sbrk_aligned+0x12>
 800dac0:	f000 f8a4 	bl	800dc0c <_sbrk_r>
 800dac4:	6030      	str	r0, [r6, #0]
 800dac6:	4621      	mov	r1, r4
 800dac8:	4628      	mov	r0, r5
 800daca:	f000 f89f 	bl	800dc0c <_sbrk_r>
 800dace:	1c43      	adds	r3, r0, #1
 800dad0:	d00a      	beq.n	800dae8 <sbrk_aligned+0x34>
 800dad2:	1cc4      	adds	r4, r0, #3
 800dad4:	f024 0403 	bic.w	r4, r4, #3
 800dad8:	42a0      	cmp	r0, r4
 800dada:	d007      	beq.n	800daec <sbrk_aligned+0x38>
 800dadc:	1a21      	subs	r1, r4, r0
 800dade:	4628      	mov	r0, r5
 800dae0:	f000 f894 	bl	800dc0c <_sbrk_r>
 800dae4:	3001      	adds	r0, #1
 800dae6:	d101      	bne.n	800daec <sbrk_aligned+0x38>
 800dae8:	f04f 34ff 	mov.w	r4, #4294967295
 800daec:	4620      	mov	r0, r4
 800daee:	bd70      	pop	{r4, r5, r6, pc}
 800daf0:	200019bc 	.word	0x200019bc

0800daf4 <_malloc_r>:
 800daf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daf8:	1ccd      	adds	r5, r1, #3
 800dafa:	f025 0503 	bic.w	r5, r5, #3
 800dafe:	3508      	adds	r5, #8
 800db00:	2d0c      	cmp	r5, #12
 800db02:	bf38      	it	cc
 800db04:	250c      	movcc	r5, #12
 800db06:	2d00      	cmp	r5, #0
 800db08:	4607      	mov	r7, r0
 800db0a:	db01      	blt.n	800db10 <_malloc_r+0x1c>
 800db0c:	42a9      	cmp	r1, r5
 800db0e:	d905      	bls.n	800db1c <_malloc_r+0x28>
 800db10:	230c      	movs	r3, #12
 800db12:	603b      	str	r3, [r7, #0]
 800db14:	2600      	movs	r6, #0
 800db16:	4630      	mov	r0, r6
 800db18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db1c:	4e2e      	ldr	r6, [pc, #184]	; (800dbd8 <_malloc_r+0xe4>)
 800db1e:	f000 f9eb 	bl	800def8 <__malloc_lock>
 800db22:	6833      	ldr	r3, [r6, #0]
 800db24:	461c      	mov	r4, r3
 800db26:	bb34      	cbnz	r4, 800db76 <_malloc_r+0x82>
 800db28:	4629      	mov	r1, r5
 800db2a:	4638      	mov	r0, r7
 800db2c:	f7ff ffc2 	bl	800dab4 <sbrk_aligned>
 800db30:	1c43      	adds	r3, r0, #1
 800db32:	4604      	mov	r4, r0
 800db34:	d14d      	bne.n	800dbd2 <_malloc_r+0xde>
 800db36:	6834      	ldr	r4, [r6, #0]
 800db38:	4626      	mov	r6, r4
 800db3a:	2e00      	cmp	r6, #0
 800db3c:	d140      	bne.n	800dbc0 <_malloc_r+0xcc>
 800db3e:	6823      	ldr	r3, [r4, #0]
 800db40:	4631      	mov	r1, r6
 800db42:	4638      	mov	r0, r7
 800db44:	eb04 0803 	add.w	r8, r4, r3
 800db48:	f000 f860 	bl	800dc0c <_sbrk_r>
 800db4c:	4580      	cmp	r8, r0
 800db4e:	d13a      	bne.n	800dbc6 <_malloc_r+0xd2>
 800db50:	6821      	ldr	r1, [r4, #0]
 800db52:	3503      	adds	r5, #3
 800db54:	1a6d      	subs	r5, r5, r1
 800db56:	f025 0503 	bic.w	r5, r5, #3
 800db5a:	3508      	adds	r5, #8
 800db5c:	2d0c      	cmp	r5, #12
 800db5e:	bf38      	it	cc
 800db60:	250c      	movcc	r5, #12
 800db62:	4629      	mov	r1, r5
 800db64:	4638      	mov	r0, r7
 800db66:	f7ff ffa5 	bl	800dab4 <sbrk_aligned>
 800db6a:	3001      	adds	r0, #1
 800db6c:	d02b      	beq.n	800dbc6 <_malloc_r+0xd2>
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	442b      	add	r3, r5
 800db72:	6023      	str	r3, [r4, #0]
 800db74:	e00e      	b.n	800db94 <_malloc_r+0xa0>
 800db76:	6822      	ldr	r2, [r4, #0]
 800db78:	1b52      	subs	r2, r2, r5
 800db7a:	d41e      	bmi.n	800dbba <_malloc_r+0xc6>
 800db7c:	2a0b      	cmp	r2, #11
 800db7e:	d916      	bls.n	800dbae <_malloc_r+0xba>
 800db80:	1961      	adds	r1, r4, r5
 800db82:	42a3      	cmp	r3, r4
 800db84:	6025      	str	r5, [r4, #0]
 800db86:	bf18      	it	ne
 800db88:	6059      	strne	r1, [r3, #4]
 800db8a:	6863      	ldr	r3, [r4, #4]
 800db8c:	bf08      	it	eq
 800db8e:	6031      	streq	r1, [r6, #0]
 800db90:	5162      	str	r2, [r4, r5]
 800db92:	604b      	str	r3, [r1, #4]
 800db94:	4638      	mov	r0, r7
 800db96:	f104 060b 	add.w	r6, r4, #11
 800db9a:	f000 f9b3 	bl	800df04 <__malloc_unlock>
 800db9e:	f026 0607 	bic.w	r6, r6, #7
 800dba2:	1d23      	adds	r3, r4, #4
 800dba4:	1af2      	subs	r2, r6, r3
 800dba6:	d0b6      	beq.n	800db16 <_malloc_r+0x22>
 800dba8:	1b9b      	subs	r3, r3, r6
 800dbaa:	50a3      	str	r3, [r4, r2]
 800dbac:	e7b3      	b.n	800db16 <_malloc_r+0x22>
 800dbae:	6862      	ldr	r2, [r4, #4]
 800dbb0:	42a3      	cmp	r3, r4
 800dbb2:	bf0c      	ite	eq
 800dbb4:	6032      	streq	r2, [r6, #0]
 800dbb6:	605a      	strne	r2, [r3, #4]
 800dbb8:	e7ec      	b.n	800db94 <_malloc_r+0xa0>
 800dbba:	4623      	mov	r3, r4
 800dbbc:	6864      	ldr	r4, [r4, #4]
 800dbbe:	e7b2      	b.n	800db26 <_malloc_r+0x32>
 800dbc0:	4634      	mov	r4, r6
 800dbc2:	6876      	ldr	r6, [r6, #4]
 800dbc4:	e7b9      	b.n	800db3a <_malloc_r+0x46>
 800dbc6:	230c      	movs	r3, #12
 800dbc8:	603b      	str	r3, [r7, #0]
 800dbca:	4638      	mov	r0, r7
 800dbcc:	f000 f99a 	bl	800df04 <__malloc_unlock>
 800dbd0:	e7a1      	b.n	800db16 <_malloc_r+0x22>
 800dbd2:	6025      	str	r5, [r4, #0]
 800dbd4:	e7de      	b.n	800db94 <_malloc_r+0xa0>
 800dbd6:	bf00      	nop
 800dbd8:	200019b8 	.word	0x200019b8

0800dbdc <iprintf>:
 800dbdc:	b40f      	push	{r0, r1, r2, r3}
 800dbde:	4b0a      	ldr	r3, [pc, #40]	; (800dc08 <iprintf+0x2c>)
 800dbe0:	b513      	push	{r0, r1, r4, lr}
 800dbe2:	681c      	ldr	r4, [r3, #0]
 800dbe4:	b124      	cbz	r4, 800dbf0 <iprintf+0x14>
 800dbe6:	69a3      	ldr	r3, [r4, #24]
 800dbe8:	b913      	cbnz	r3, 800dbf0 <iprintf+0x14>
 800dbea:	4620      	mov	r0, r4
 800dbec:	f000 f8e4 	bl	800ddb8 <__sinit>
 800dbf0:	ab05      	add	r3, sp, #20
 800dbf2:	9a04      	ldr	r2, [sp, #16]
 800dbf4:	68a1      	ldr	r1, [r4, #8]
 800dbf6:	9301      	str	r3, [sp, #4]
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f000 fb0f 	bl	800e21c <_vfiprintf_r>
 800dbfe:	b002      	add	sp, #8
 800dc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc04:	b004      	add	sp, #16
 800dc06:	4770      	bx	lr
 800dc08:	20000030 	.word	0x20000030

0800dc0c <_sbrk_r>:
 800dc0c:	b538      	push	{r3, r4, r5, lr}
 800dc0e:	4d06      	ldr	r5, [pc, #24]	; (800dc28 <_sbrk_r+0x1c>)
 800dc10:	2300      	movs	r3, #0
 800dc12:	4604      	mov	r4, r0
 800dc14:	4608      	mov	r0, r1
 800dc16:	602b      	str	r3, [r5, #0]
 800dc18:	f7f3 f84c 	bl	8000cb4 <_sbrk>
 800dc1c:	1c43      	adds	r3, r0, #1
 800dc1e:	d102      	bne.n	800dc26 <_sbrk_r+0x1a>
 800dc20:	682b      	ldr	r3, [r5, #0]
 800dc22:	b103      	cbz	r3, 800dc26 <_sbrk_r+0x1a>
 800dc24:	6023      	str	r3, [r4, #0]
 800dc26:	bd38      	pop	{r3, r4, r5, pc}
 800dc28:	200019c4 	.word	0x200019c4

0800dc2c <sniprintf>:
 800dc2c:	b40c      	push	{r2, r3}
 800dc2e:	b530      	push	{r4, r5, lr}
 800dc30:	4b17      	ldr	r3, [pc, #92]	; (800dc90 <sniprintf+0x64>)
 800dc32:	1e0c      	subs	r4, r1, #0
 800dc34:	681d      	ldr	r5, [r3, #0]
 800dc36:	b09d      	sub	sp, #116	; 0x74
 800dc38:	da08      	bge.n	800dc4c <sniprintf+0x20>
 800dc3a:	238b      	movs	r3, #139	; 0x8b
 800dc3c:	602b      	str	r3, [r5, #0]
 800dc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc42:	b01d      	add	sp, #116	; 0x74
 800dc44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc48:	b002      	add	sp, #8
 800dc4a:	4770      	bx	lr
 800dc4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dc50:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dc54:	bf14      	ite	ne
 800dc56:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc5a:	4623      	moveq	r3, r4
 800dc5c:	9304      	str	r3, [sp, #16]
 800dc5e:	9307      	str	r3, [sp, #28]
 800dc60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc64:	9002      	str	r0, [sp, #8]
 800dc66:	9006      	str	r0, [sp, #24]
 800dc68:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dc6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dc6e:	ab21      	add	r3, sp, #132	; 0x84
 800dc70:	a902      	add	r1, sp, #8
 800dc72:	4628      	mov	r0, r5
 800dc74:	9301      	str	r3, [sp, #4]
 800dc76:	f000 f9a7 	bl	800dfc8 <_svfiprintf_r>
 800dc7a:	1c43      	adds	r3, r0, #1
 800dc7c:	bfbc      	itt	lt
 800dc7e:	238b      	movlt	r3, #139	; 0x8b
 800dc80:	602b      	strlt	r3, [r5, #0]
 800dc82:	2c00      	cmp	r4, #0
 800dc84:	d0dd      	beq.n	800dc42 <sniprintf+0x16>
 800dc86:	9b02      	ldr	r3, [sp, #8]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	701a      	strb	r2, [r3, #0]
 800dc8c:	e7d9      	b.n	800dc42 <sniprintf+0x16>
 800dc8e:	bf00      	nop
 800dc90:	20000030 	.word	0x20000030

0800dc94 <_vsniprintf_r>:
 800dc94:	b530      	push	{r4, r5, lr}
 800dc96:	4614      	mov	r4, r2
 800dc98:	2c00      	cmp	r4, #0
 800dc9a:	b09b      	sub	sp, #108	; 0x6c
 800dc9c:	4605      	mov	r5, r0
 800dc9e:	461a      	mov	r2, r3
 800dca0:	da05      	bge.n	800dcae <_vsniprintf_r+0x1a>
 800dca2:	238b      	movs	r3, #139	; 0x8b
 800dca4:	6003      	str	r3, [r0, #0]
 800dca6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcaa:	b01b      	add	sp, #108	; 0x6c
 800dcac:	bd30      	pop	{r4, r5, pc}
 800dcae:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dcb2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dcb6:	bf14      	ite	ne
 800dcb8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dcbc:	4623      	moveq	r3, r4
 800dcbe:	9302      	str	r3, [sp, #8]
 800dcc0:	9305      	str	r3, [sp, #20]
 800dcc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dcc6:	9100      	str	r1, [sp, #0]
 800dcc8:	9104      	str	r1, [sp, #16]
 800dcca:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dcce:	4669      	mov	r1, sp
 800dcd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dcd2:	f000 f979 	bl	800dfc8 <_svfiprintf_r>
 800dcd6:	1c43      	adds	r3, r0, #1
 800dcd8:	bfbc      	itt	lt
 800dcda:	238b      	movlt	r3, #139	; 0x8b
 800dcdc:	602b      	strlt	r3, [r5, #0]
 800dcde:	2c00      	cmp	r4, #0
 800dce0:	d0e3      	beq.n	800dcaa <_vsniprintf_r+0x16>
 800dce2:	9b00      	ldr	r3, [sp, #0]
 800dce4:	2200      	movs	r2, #0
 800dce6:	701a      	strb	r2, [r3, #0]
 800dce8:	e7df      	b.n	800dcaa <_vsniprintf_r+0x16>
	...

0800dcec <vsniprintf>:
 800dcec:	b507      	push	{r0, r1, r2, lr}
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	460a      	mov	r2, r1
 800dcf4:	4601      	mov	r1, r0
 800dcf6:	4803      	ldr	r0, [pc, #12]	; (800dd04 <vsniprintf+0x18>)
 800dcf8:	6800      	ldr	r0, [r0, #0]
 800dcfa:	f7ff ffcb 	bl	800dc94 <_vsniprintf_r>
 800dcfe:	b003      	add	sp, #12
 800dd00:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd04:	20000030 	.word	0x20000030

0800dd08 <std>:
 800dd08:	2300      	movs	r3, #0
 800dd0a:	b510      	push	{r4, lr}
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	e9c0 3300 	strd	r3, r3, [r0]
 800dd12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd16:	6083      	str	r3, [r0, #8]
 800dd18:	8181      	strh	r1, [r0, #12]
 800dd1a:	6643      	str	r3, [r0, #100]	; 0x64
 800dd1c:	81c2      	strh	r2, [r0, #14]
 800dd1e:	6183      	str	r3, [r0, #24]
 800dd20:	4619      	mov	r1, r3
 800dd22:	2208      	movs	r2, #8
 800dd24:	305c      	adds	r0, #92	; 0x5c
 800dd26:	f7ff fe5b 	bl	800d9e0 <memset>
 800dd2a:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <std+0x38>)
 800dd2c:	6263      	str	r3, [r4, #36]	; 0x24
 800dd2e:	4b05      	ldr	r3, [pc, #20]	; (800dd44 <std+0x3c>)
 800dd30:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd32:	4b05      	ldr	r3, [pc, #20]	; (800dd48 <std+0x40>)
 800dd34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd36:	4b05      	ldr	r3, [pc, #20]	; (800dd4c <std+0x44>)
 800dd38:	6224      	str	r4, [r4, #32]
 800dd3a:	6323      	str	r3, [r4, #48]	; 0x30
 800dd3c:	bd10      	pop	{r4, pc}
 800dd3e:	bf00      	nop
 800dd40:	0800e7a5 	.word	0x0800e7a5
 800dd44:	0800e7c7 	.word	0x0800e7c7
 800dd48:	0800e7ff 	.word	0x0800e7ff
 800dd4c:	0800e823 	.word	0x0800e823

0800dd50 <_cleanup_r>:
 800dd50:	4901      	ldr	r1, [pc, #4]	; (800dd58 <_cleanup_r+0x8>)
 800dd52:	f000 b8af 	b.w	800deb4 <_fwalk_reent>
 800dd56:	bf00      	nop
 800dd58:	0800eafd 	.word	0x0800eafd

0800dd5c <__sfmoreglue>:
 800dd5c:	b570      	push	{r4, r5, r6, lr}
 800dd5e:	2268      	movs	r2, #104	; 0x68
 800dd60:	1e4d      	subs	r5, r1, #1
 800dd62:	4355      	muls	r5, r2
 800dd64:	460e      	mov	r6, r1
 800dd66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd6a:	f7ff fec3 	bl	800daf4 <_malloc_r>
 800dd6e:	4604      	mov	r4, r0
 800dd70:	b140      	cbz	r0, 800dd84 <__sfmoreglue+0x28>
 800dd72:	2100      	movs	r1, #0
 800dd74:	e9c0 1600 	strd	r1, r6, [r0]
 800dd78:	300c      	adds	r0, #12
 800dd7a:	60a0      	str	r0, [r4, #8]
 800dd7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd80:	f7ff fe2e 	bl	800d9e0 <memset>
 800dd84:	4620      	mov	r0, r4
 800dd86:	bd70      	pop	{r4, r5, r6, pc}

0800dd88 <__sfp_lock_acquire>:
 800dd88:	4801      	ldr	r0, [pc, #4]	; (800dd90 <__sfp_lock_acquire+0x8>)
 800dd8a:	f000 b8b3 	b.w	800def4 <__retarget_lock_acquire_recursive>
 800dd8e:	bf00      	nop
 800dd90:	200019c1 	.word	0x200019c1

0800dd94 <__sfp_lock_release>:
 800dd94:	4801      	ldr	r0, [pc, #4]	; (800dd9c <__sfp_lock_release+0x8>)
 800dd96:	f000 b8ae 	b.w	800def6 <__retarget_lock_release_recursive>
 800dd9a:	bf00      	nop
 800dd9c:	200019c1 	.word	0x200019c1

0800dda0 <__sinit_lock_acquire>:
 800dda0:	4801      	ldr	r0, [pc, #4]	; (800dda8 <__sinit_lock_acquire+0x8>)
 800dda2:	f000 b8a7 	b.w	800def4 <__retarget_lock_acquire_recursive>
 800dda6:	bf00      	nop
 800dda8:	200019c2 	.word	0x200019c2

0800ddac <__sinit_lock_release>:
 800ddac:	4801      	ldr	r0, [pc, #4]	; (800ddb4 <__sinit_lock_release+0x8>)
 800ddae:	f000 b8a2 	b.w	800def6 <__retarget_lock_release_recursive>
 800ddb2:	bf00      	nop
 800ddb4:	200019c2 	.word	0x200019c2

0800ddb8 <__sinit>:
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	4604      	mov	r4, r0
 800ddbc:	f7ff fff0 	bl	800dda0 <__sinit_lock_acquire>
 800ddc0:	69a3      	ldr	r3, [r4, #24]
 800ddc2:	b11b      	cbz	r3, 800ddcc <__sinit+0x14>
 800ddc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddc8:	f7ff bff0 	b.w	800ddac <__sinit_lock_release>
 800ddcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ddd0:	6523      	str	r3, [r4, #80]	; 0x50
 800ddd2:	4b13      	ldr	r3, [pc, #76]	; (800de20 <__sinit+0x68>)
 800ddd4:	4a13      	ldr	r2, [pc, #76]	; (800de24 <__sinit+0x6c>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ddda:	42a3      	cmp	r3, r4
 800dddc:	bf04      	itt	eq
 800ddde:	2301      	moveq	r3, #1
 800dde0:	61a3      	streq	r3, [r4, #24]
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 f820 	bl	800de28 <__sfp>
 800dde8:	6060      	str	r0, [r4, #4]
 800ddea:	4620      	mov	r0, r4
 800ddec:	f000 f81c 	bl	800de28 <__sfp>
 800ddf0:	60a0      	str	r0, [r4, #8]
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f000 f818 	bl	800de28 <__sfp>
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	60e0      	str	r0, [r4, #12]
 800ddfc:	2104      	movs	r1, #4
 800ddfe:	6860      	ldr	r0, [r4, #4]
 800de00:	f7ff ff82 	bl	800dd08 <std>
 800de04:	68a0      	ldr	r0, [r4, #8]
 800de06:	2201      	movs	r2, #1
 800de08:	2109      	movs	r1, #9
 800de0a:	f7ff ff7d 	bl	800dd08 <std>
 800de0e:	68e0      	ldr	r0, [r4, #12]
 800de10:	2202      	movs	r2, #2
 800de12:	2112      	movs	r1, #18
 800de14:	f7ff ff78 	bl	800dd08 <std>
 800de18:	2301      	movs	r3, #1
 800de1a:	61a3      	str	r3, [r4, #24]
 800de1c:	e7d2      	b.n	800ddc4 <__sinit+0xc>
 800de1e:	bf00      	nop
 800de20:	0800f898 	.word	0x0800f898
 800de24:	0800dd51 	.word	0x0800dd51

0800de28 <__sfp>:
 800de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2a:	4607      	mov	r7, r0
 800de2c:	f7ff ffac 	bl	800dd88 <__sfp_lock_acquire>
 800de30:	4b1e      	ldr	r3, [pc, #120]	; (800deac <__sfp+0x84>)
 800de32:	681e      	ldr	r6, [r3, #0]
 800de34:	69b3      	ldr	r3, [r6, #24]
 800de36:	b913      	cbnz	r3, 800de3e <__sfp+0x16>
 800de38:	4630      	mov	r0, r6
 800de3a:	f7ff ffbd 	bl	800ddb8 <__sinit>
 800de3e:	3648      	adds	r6, #72	; 0x48
 800de40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de44:	3b01      	subs	r3, #1
 800de46:	d503      	bpl.n	800de50 <__sfp+0x28>
 800de48:	6833      	ldr	r3, [r6, #0]
 800de4a:	b30b      	cbz	r3, 800de90 <__sfp+0x68>
 800de4c:	6836      	ldr	r6, [r6, #0]
 800de4e:	e7f7      	b.n	800de40 <__sfp+0x18>
 800de50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de54:	b9d5      	cbnz	r5, 800de8c <__sfp+0x64>
 800de56:	4b16      	ldr	r3, [pc, #88]	; (800deb0 <__sfp+0x88>)
 800de58:	60e3      	str	r3, [r4, #12]
 800de5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de5e:	6665      	str	r5, [r4, #100]	; 0x64
 800de60:	f000 f847 	bl	800def2 <__retarget_lock_init_recursive>
 800de64:	f7ff ff96 	bl	800dd94 <__sfp_lock_release>
 800de68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de70:	6025      	str	r5, [r4, #0]
 800de72:	61a5      	str	r5, [r4, #24]
 800de74:	2208      	movs	r2, #8
 800de76:	4629      	mov	r1, r5
 800de78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de7c:	f7ff fdb0 	bl	800d9e0 <memset>
 800de80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de88:	4620      	mov	r0, r4
 800de8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de8c:	3468      	adds	r4, #104	; 0x68
 800de8e:	e7d9      	b.n	800de44 <__sfp+0x1c>
 800de90:	2104      	movs	r1, #4
 800de92:	4638      	mov	r0, r7
 800de94:	f7ff ff62 	bl	800dd5c <__sfmoreglue>
 800de98:	4604      	mov	r4, r0
 800de9a:	6030      	str	r0, [r6, #0]
 800de9c:	2800      	cmp	r0, #0
 800de9e:	d1d5      	bne.n	800de4c <__sfp+0x24>
 800dea0:	f7ff ff78 	bl	800dd94 <__sfp_lock_release>
 800dea4:	230c      	movs	r3, #12
 800dea6:	603b      	str	r3, [r7, #0]
 800dea8:	e7ee      	b.n	800de88 <__sfp+0x60>
 800deaa:	bf00      	nop
 800deac:	0800f898 	.word	0x0800f898
 800deb0:	ffff0001 	.word	0xffff0001

0800deb4 <_fwalk_reent>:
 800deb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deb8:	4606      	mov	r6, r0
 800deba:	4688      	mov	r8, r1
 800debc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dec0:	2700      	movs	r7, #0
 800dec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dec6:	f1b9 0901 	subs.w	r9, r9, #1
 800deca:	d505      	bpl.n	800ded8 <_fwalk_reent+0x24>
 800decc:	6824      	ldr	r4, [r4, #0]
 800dece:	2c00      	cmp	r4, #0
 800ded0:	d1f7      	bne.n	800dec2 <_fwalk_reent+0xe>
 800ded2:	4638      	mov	r0, r7
 800ded4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ded8:	89ab      	ldrh	r3, [r5, #12]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d907      	bls.n	800deee <_fwalk_reent+0x3a>
 800dede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dee2:	3301      	adds	r3, #1
 800dee4:	d003      	beq.n	800deee <_fwalk_reent+0x3a>
 800dee6:	4629      	mov	r1, r5
 800dee8:	4630      	mov	r0, r6
 800deea:	47c0      	blx	r8
 800deec:	4307      	orrs	r7, r0
 800deee:	3568      	adds	r5, #104	; 0x68
 800def0:	e7e9      	b.n	800dec6 <_fwalk_reent+0x12>

0800def2 <__retarget_lock_init_recursive>:
 800def2:	4770      	bx	lr

0800def4 <__retarget_lock_acquire_recursive>:
 800def4:	4770      	bx	lr

0800def6 <__retarget_lock_release_recursive>:
 800def6:	4770      	bx	lr

0800def8 <__malloc_lock>:
 800def8:	4801      	ldr	r0, [pc, #4]	; (800df00 <__malloc_lock+0x8>)
 800defa:	f7ff bffb 	b.w	800def4 <__retarget_lock_acquire_recursive>
 800defe:	bf00      	nop
 800df00:	200019c0 	.word	0x200019c0

0800df04 <__malloc_unlock>:
 800df04:	4801      	ldr	r0, [pc, #4]	; (800df0c <__malloc_unlock+0x8>)
 800df06:	f7ff bff6 	b.w	800def6 <__retarget_lock_release_recursive>
 800df0a:	bf00      	nop
 800df0c:	200019c0 	.word	0x200019c0

0800df10 <__ssputs_r>:
 800df10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df14:	688e      	ldr	r6, [r1, #8]
 800df16:	429e      	cmp	r6, r3
 800df18:	4682      	mov	sl, r0
 800df1a:	460c      	mov	r4, r1
 800df1c:	4690      	mov	r8, r2
 800df1e:	461f      	mov	r7, r3
 800df20:	d838      	bhi.n	800df94 <__ssputs_r+0x84>
 800df22:	898a      	ldrh	r2, [r1, #12]
 800df24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df28:	d032      	beq.n	800df90 <__ssputs_r+0x80>
 800df2a:	6825      	ldr	r5, [r4, #0]
 800df2c:	6909      	ldr	r1, [r1, #16]
 800df2e:	eba5 0901 	sub.w	r9, r5, r1
 800df32:	6965      	ldr	r5, [r4, #20]
 800df34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df3c:	3301      	adds	r3, #1
 800df3e:	444b      	add	r3, r9
 800df40:	106d      	asrs	r5, r5, #1
 800df42:	429d      	cmp	r5, r3
 800df44:	bf38      	it	cc
 800df46:	461d      	movcc	r5, r3
 800df48:	0553      	lsls	r3, r2, #21
 800df4a:	d531      	bpl.n	800dfb0 <__ssputs_r+0xa0>
 800df4c:	4629      	mov	r1, r5
 800df4e:	f7ff fdd1 	bl	800daf4 <_malloc_r>
 800df52:	4606      	mov	r6, r0
 800df54:	b950      	cbnz	r0, 800df6c <__ssputs_r+0x5c>
 800df56:	230c      	movs	r3, #12
 800df58:	f8ca 3000 	str.w	r3, [sl]
 800df5c:	89a3      	ldrh	r3, [r4, #12]
 800df5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df62:	81a3      	strh	r3, [r4, #12]
 800df64:	f04f 30ff 	mov.w	r0, #4294967295
 800df68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df6c:	6921      	ldr	r1, [r4, #16]
 800df6e:	464a      	mov	r2, r9
 800df70:	f7ff fd28 	bl	800d9c4 <memcpy>
 800df74:	89a3      	ldrh	r3, [r4, #12]
 800df76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df7e:	81a3      	strh	r3, [r4, #12]
 800df80:	6126      	str	r6, [r4, #16]
 800df82:	6165      	str	r5, [r4, #20]
 800df84:	444e      	add	r6, r9
 800df86:	eba5 0509 	sub.w	r5, r5, r9
 800df8a:	6026      	str	r6, [r4, #0]
 800df8c:	60a5      	str	r5, [r4, #8]
 800df8e:	463e      	mov	r6, r7
 800df90:	42be      	cmp	r6, r7
 800df92:	d900      	bls.n	800df96 <__ssputs_r+0x86>
 800df94:	463e      	mov	r6, r7
 800df96:	6820      	ldr	r0, [r4, #0]
 800df98:	4632      	mov	r2, r6
 800df9a:	4641      	mov	r1, r8
 800df9c:	f000 fe62 	bl	800ec64 <memmove>
 800dfa0:	68a3      	ldr	r3, [r4, #8]
 800dfa2:	1b9b      	subs	r3, r3, r6
 800dfa4:	60a3      	str	r3, [r4, #8]
 800dfa6:	6823      	ldr	r3, [r4, #0]
 800dfa8:	4433      	add	r3, r6
 800dfaa:	6023      	str	r3, [r4, #0]
 800dfac:	2000      	movs	r0, #0
 800dfae:	e7db      	b.n	800df68 <__ssputs_r+0x58>
 800dfb0:	462a      	mov	r2, r5
 800dfb2:	f000 fe71 	bl	800ec98 <_realloc_r>
 800dfb6:	4606      	mov	r6, r0
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d1e1      	bne.n	800df80 <__ssputs_r+0x70>
 800dfbc:	6921      	ldr	r1, [r4, #16]
 800dfbe:	4650      	mov	r0, sl
 800dfc0:	f7ff fd2c 	bl	800da1c <_free_r>
 800dfc4:	e7c7      	b.n	800df56 <__ssputs_r+0x46>
	...

0800dfc8 <_svfiprintf_r>:
 800dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	4698      	mov	r8, r3
 800dfce:	898b      	ldrh	r3, [r1, #12]
 800dfd0:	061b      	lsls	r3, r3, #24
 800dfd2:	b09d      	sub	sp, #116	; 0x74
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	460d      	mov	r5, r1
 800dfd8:	4614      	mov	r4, r2
 800dfda:	d50e      	bpl.n	800dffa <_svfiprintf_r+0x32>
 800dfdc:	690b      	ldr	r3, [r1, #16]
 800dfde:	b963      	cbnz	r3, 800dffa <_svfiprintf_r+0x32>
 800dfe0:	2140      	movs	r1, #64	; 0x40
 800dfe2:	f7ff fd87 	bl	800daf4 <_malloc_r>
 800dfe6:	6028      	str	r0, [r5, #0]
 800dfe8:	6128      	str	r0, [r5, #16]
 800dfea:	b920      	cbnz	r0, 800dff6 <_svfiprintf_r+0x2e>
 800dfec:	230c      	movs	r3, #12
 800dfee:	603b      	str	r3, [r7, #0]
 800dff0:	f04f 30ff 	mov.w	r0, #4294967295
 800dff4:	e0d1      	b.n	800e19a <_svfiprintf_r+0x1d2>
 800dff6:	2340      	movs	r3, #64	; 0x40
 800dff8:	616b      	str	r3, [r5, #20]
 800dffa:	2300      	movs	r3, #0
 800dffc:	9309      	str	r3, [sp, #36]	; 0x24
 800dffe:	2320      	movs	r3, #32
 800e000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e004:	f8cd 800c 	str.w	r8, [sp, #12]
 800e008:	2330      	movs	r3, #48	; 0x30
 800e00a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e1b4 <_svfiprintf_r+0x1ec>
 800e00e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e012:	f04f 0901 	mov.w	r9, #1
 800e016:	4623      	mov	r3, r4
 800e018:	469a      	mov	sl, r3
 800e01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e01e:	b10a      	cbz	r2, 800e024 <_svfiprintf_r+0x5c>
 800e020:	2a25      	cmp	r2, #37	; 0x25
 800e022:	d1f9      	bne.n	800e018 <_svfiprintf_r+0x50>
 800e024:	ebba 0b04 	subs.w	fp, sl, r4
 800e028:	d00b      	beq.n	800e042 <_svfiprintf_r+0x7a>
 800e02a:	465b      	mov	r3, fp
 800e02c:	4622      	mov	r2, r4
 800e02e:	4629      	mov	r1, r5
 800e030:	4638      	mov	r0, r7
 800e032:	f7ff ff6d 	bl	800df10 <__ssputs_r>
 800e036:	3001      	adds	r0, #1
 800e038:	f000 80aa 	beq.w	800e190 <_svfiprintf_r+0x1c8>
 800e03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e03e:	445a      	add	r2, fp
 800e040:	9209      	str	r2, [sp, #36]	; 0x24
 800e042:	f89a 3000 	ldrb.w	r3, [sl]
 800e046:	2b00      	cmp	r3, #0
 800e048:	f000 80a2 	beq.w	800e190 <_svfiprintf_r+0x1c8>
 800e04c:	2300      	movs	r3, #0
 800e04e:	f04f 32ff 	mov.w	r2, #4294967295
 800e052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e056:	f10a 0a01 	add.w	sl, sl, #1
 800e05a:	9304      	str	r3, [sp, #16]
 800e05c:	9307      	str	r3, [sp, #28]
 800e05e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e062:	931a      	str	r3, [sp, #104]	; 0x68
 800e064:	4654      	mov	r4, sl
 800e066:	2205      	movs	r2, #5
 800e068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e06c:	4851      	ldr	r0, [pc, #324]	; (800e1b4 <_svfiprintf_r+0x1ec>)
 800e06e:	f7f2 f89f 	bl	80001b0 <memchr>
 800e072:	9a04      	ldr	r2, [sp, #16]
 800e074:	b9d8      	cbnz	r0, 800e0ae <_svfiprintf_r+0xe6>
 800e076:	06d0      	lsls	r0, r2, #27
 800e078:	bf44      	itt	mi
 800e07a:	2320      	movmi	r3, #32
 800e07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e080:	0711      	lsls	r1, r2, #28
 800e082:	bf44      	itt	mi
 800e084:	232b      	movmi	r3, #43	; 0x2b
 800e086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e08a:	f89a 3000 	ldrb.w	r3, [sl]
 800e08e:	2b2a      	cmp	r3, #42	; 0x2a
 800e090:	d015      	beq.n	800e0be <_svfiprintf_r+0xf6>
 800e092:	9a07      	ldr	r2, [sp, #28]
 800e094:	4654      	mov	r4, sl
 800e096:	2000      	movs	r0, #0
 800e098:	f04f 0c0a 	mov.w	ip, #10
 800e09c:	4621      	mov	r1, r4
 800e09e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0a2:	3b30      	subs	r3, #48	; 0x30
 800e0a4:	2b09      	cmp	r3, #9
 800e0a6:	d94e      	bls.n	800e146 <_svfiprintf_r+0x17e>
 800e0a8:	b1b0      	cbz	r0, 800e0d8 <_svfiprintf_r+0x110>
 800e0aa:	9207      	str	r2, [sp, #28]
 800e0ac:	e014      	b.n	800e0d8 <_svfiprintf_r+0x110>
 800e0ae:	eba0 0308 	sub.w	r3, r0, r8
 800e0b2:	fa09 f303 	lsl.w	r3, r9, r3
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	9304      	str	r3, [sp, #16]
 800e0ba:	46a2      	mov	sl, r4
 800e0bc:	e7d2      	b.n	800e064 <_svfiprintf_r+0x9c>
 800e0be:	9b03      	ldr	r3, [sp, #12]
 800e0c0:	1d19      	adds	r1, r3, #4
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	9103      	str	r1, [sp, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	bfbb      	ittet	lt
 800e0ca:	425b      	neglt	r3, r3
 800e0cc:	f042 0202 	orrlt.w	r2, r2, #2
 800e0d0:	9307      	strge	r3, [sp, #28]
 800e0d2:	9307      	strlt	r3, [sp, #28]
 800e0d4:	bfb8      	it	lt
 800e0d6:	9204      	strlt	r2, [sp, #16]
 800e0d8:	7823      	ldrb	r3, [r4, #0]
 800e0da:	2b2e      	cmp	r3, #46	; 0x2e
 800e0dc:	d10c      	bne.n	800e0f8 <_svfiprintf_r+0x130>
 800e0de:	7863      	ldrb	r3, [r4, #1]
 800e0e0:	2b2a      	cmp	r3, #42	; 0x2a
 800e0e2:	d135      	bne.n	800e150 <_svfiprintf_r+0x188>
 800e0e4:	9b03      	ldr	r3, [sp, #12]
 800e0e6:	1d1a      	adds	r2, r3, #4
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	9203      	str	r2, [sp, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	bfb8      	it	lt
 800e0f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0f4:	3402      	adds	r4, #2
 800e0f6:	9305      	str	r3, [sp, #20]
 800e0f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e1c4 <_svfiprintf_r+0x1fc>
 800e0fc:	7821      	ldrb	r1, [r4, #0]
 800e0fe:	2203      	movs	r2, #3
 800e100:	4650      	mov	r0, sl
 800e102:	f7f2 f855 	bl	80001b0 <memchr>
 800e106:	b140      	cbz	r0, 800e11a <_svfiprintf_r+0x152>
 800e108:	2340      	movs	r3, #64	; 0x40
 800e10a:	eba0 000a 	sub.w	r0, r0, sl
 800e10e:	fa03 f000 	lsl.w	r0, r3, r0
 800e112:	9b04      	ldr	r3, [sp, #16]
 800e114:	4303      	orrs	r3, r0
 800e116:	3401      	adds	r4, #1
 800e118:	9304      	str	r3, [sp, #16]
 800e11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e11e:	4826      	ldr	r0, [pc, #152]	; (800e1b8 <_svfiprintf_r+0x1f0>)
 800e120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e124:	2206      	movs	r2, #6
 800e126:	f7f2 f843 	bl	80001b0 <memchr>
 800e12a:	2800      	cmp	r0, #0
 800e12c:	d038      	beq.n	800e1a0 <_svfiprintf_r+0x1d8>
 800e12e:	4b23      	ldr	r3, [pc, #140]	; (800e1bc <_svfiprintf_r+0x1f4>)
 800e130:	bb1b      	cbnz	r3, 800e17a <_svfiprintf_r+0x1b2>
 800e132:	9b03      	ldr	r3, [sp, #12]
 800e134:	3307      	adds	r3, #7
 800e136:	f023 0307 	bic.w	r3, r3, #7
 800e13a:	3308      	adds	r3, #8
 800e13c:	9303      	str	r3, [sp, #12]
 800e13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e140:	4433      	add	r3, r6
 800e142:	9309      	str	r3, [sp, #36]	; 0x24
 800e144:	e767      	b.n	800e016 <_svfiprintf_r+0x4e>
 800e146:	fb0c 3202 	mla	r2, ip, r2, r3
 800e14a:	460c      	mov	r4, r1
 800e14c:	2001      	movs	r0, #1
 800e14e:	e7a5      	b.n	800e09c <_svfiprintf_r+0xd4>
 800e150:	2300      	movs	r3, #0
 800e152:	3401      	adds	r4, #1
 800e154:	9305      	str	r3, [sp, #20]
 800e156:	4619      	mov	r1, r3
 800e158:	f04f 0c0a 	mov.w	ip, #10
 800e15c:	4620      	mov	r0, r4
 800e15e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e162:	3a30      	subs	r2, #48	; 0x30
 800e164:	2a09      	cmp	r2, #9
 800e166:	d903      	bls.n	800e170 <_svfiprintf_r+0x1a8>
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d0c5      	beq.n	800e0f8 <_svfiprintf_r+0x130>
 800e16c:	9105      	str	r1, [sp, #20]
 800e16e:	e7c3      	b.n	800e0f8 <_svfiprintf_r+0x130>
 800e170:	fb0c 2101 	mla	r1, ip, r1, r2
 800e174:	4604      	mov	r4, r0
 800e176:	2301      	movs	r3, #1
 800e178:	e7f0      	b.n	800e15c <_svfiprintf_r+0x194>
 800e17a:	ab03      	add	r3, sp, #12
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	462a      	mov	r2, r5
 800e180:	4b0f      	ldr	r3, [pc, #60]	; (800e1c0 <_svfiprintf_r+0x1f8>)
 800e182:	a904      	add	r1, sp, #16
 800e184:	4638      	mov	r0, r7
 800e186:	f3af 8000 	nop.w
 800e18a:	1c42      	adds	r2, r0, #1
 800e18c:	4606      	mov	r6, r0
 800e18e:	d1d6      	bne.n	800e13e <_svfiprintf_r+0x176>
 800e190:	89ab      	ldrh	r3, [r5, #12]
 800e192:	065b      	lsls	r3, r3, #25
 800e194:	f53f af2c 	bmi.w	800dff0 <_svfiprintf_r+0x28>
 800e198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e19a:	b01d      	add	sp, #116	; 0x74
 800e19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a0:	ab03      	add	r3, sp, #12
 800e1a2:	9300      	str	r3, [sp, #0]
 800e1a4:	462a      	mov	r2, r5
 800e1a6:	4b06      	ldr	r3, [pc, #24]	; (800e1c0 <_svfiprintf_r+0x1f8>)
 800e1a8:	a904      	add	r1, sp, #16
 800e1aa:	4638      	mov	r0, r7
 800e1ac:	f000 f9d4 	bl	800e558 <_printf_i>
 800e1b0:	e7eb      	b.n	800e18a <_svfiprintf_r+0x1c2>
 800e1b2:	bf00      	nop
 800e1b4:	0800f8fc 	.word	0x0800f8fc
 800e1b8:	0800f906 	.word	0x0800f906
 800e1bc:	00000000 	.word	0x00000000
 800e1c0:	0800df11 	.word	0x0800df11
 800e1c4:	0800f902 	.word	0x0800f902

0800e1c8 <__sfputc_r>:
 800e1c8:	6893      	ldr	r3, [r2, #8]
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	b410      	push	{r4}
 800e1d0:	6093      	str	r3, [r2, #8]
 800e1d2:	da08      	bge.n	800e1e6 <__sfputc_r+0x1e>
 800e1d4:	6994      	ldr	r4, [r2, #24]
 800e1d6:	42a3      	cmp	r3, r4
 800e1d8:	db01      	blt.n	800e1de <__sfputc_r+0x16>
 800e1da:	290a      	cmp	r1, #10
 800e1dc:	d103      	bne.n	800e1e6 <__sfputc_r+0x1e>
 800e1de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1e2:	f000 bb23 	b.w	800e82c <__swbuf_r>
 800e1e6:	6813      	ldr	r3, [r2, #0]
 800e1e8:	1c58      	adds	r0, r3, #1
 800e1ea:	6010      	str	r0, [r2, #0]
 800e1ec:	7019      	strb	r1, [r3, #0]
 800e1ee:	4608      	mov	r0, r1
 800e1f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <__sfputs_r>:
 800e1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f8:	4606      	mov	r6, r0
 800e1fa:	460f      	mov	r7, r1
 800e1fc:	4614      	mov	r4, r2
 800e1fe:	18d5      	adds	r5, r2, r3
 800e200:	42ac      	cmp	r4, r5
 800e202:	d101      	bne.n	800e208 <__sfputs_r+0x12>
 800e204:	2000      	movs	r0, #0
 800e206:	e007      	b.n	800e218 <__sfputs_r+0x22>
 800e208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e20c:	463a      	mov	r2, r7
 800e20e:	4630      	mov	r0, r6
 800e210:	f7ff ffda 	bl	800e1c8 <__sfputc_r>
 800e214:	1c43      	adds	r3, r0, #1
 800e216:	d1f3      	bne.n	800e200 <__sfputs_r+0xa>
 800e218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e21c <_vfiprintf_r>:
 800e21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e220:	460d      	mov	r5, r1
 800e222:	b09d      	sub	sp, #116	; 0x74
 800e224:	4614      	mov	r4, r2
 800e226:	4698      	mov	r8, r3
 800e228:	4606      	mov	r6, r0
 800e22a:	b118      	cbz	r0, 800e234 <_vfiprintf_r+0x18>
 800e22c:	6983      	ldr	r3, [r0, #24]
 800e22e:	b90b      	cbnz	r3, 800e234 <_vfiprintf_r+0x18>
 800e230:	f7ff fdc2 	bl	800ddb8 <__sinit>
 800e234:	4b89      	ldr	r3, [pc, #548]	; (800e45c <_vfiprintf_r+0x240>)
 800e236:	429d      	cmp	r5, r3
 800e238:	d11b      	bne.n	800e272 <_vfiprintf_r+0x56>
 800e23a:	6875      	ldr	r5, [r6, #4]
 800e23c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e23e:	07d9      	lsls	r1, r3, #31
 800e240:	d405      	bmi.n	800e24e <_vfiprintf_r+0x32>
 800e242:	89ab      	ldrh	r3, [r5, #12]
 800e244:	059a      	lsls	r2, r3, #22
 800e246:	d402      	bmi.n	800e24e <_vfiprintf_r+0x32>
 800e248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e24a:	f7ff fe53 	bl	800def4 <__retarget_lock_acquire_recursive>
 800e24e:	89ab      	ldrh	r3, [r5, #12]
 800e250:	071b      	lsls	r3, r3, #28
 800e252:	d501      	bpl.n	800e258 <_vfiprintf_r+0x3c>
 800e254:	692b      	ldr	r3, [r5, #16]
 800e256:	b9eb      	cbnz	r3, 800e294 <_vfiprintf_r+0x78>
 800e258:	4629      	mov	r1, r5
 800e25a:	4630      	mov	r0, r6
 800e25c:	f000 fb4a 	bl	800e8f4 <__swsetup_r>
 800e260:	b1c0      	cbz	r0, 800e294 <_vfiprintf_r+0x78>
 800e262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e264:	07dc      	lsls	r4, r3, #31
 800e266:	d50e      	bpl.n	800e286 <_vfiprintf_r+0x6a>
 800e268:	f04f 30ff 	mov.w	r0, #4294967295
 800e26c:	b01d      	add	sp, #116	; 0x74
 800e26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e272:	4b7b      	ldr	r3, [pc, #492]	; (800e460 <_vfiprintf_r+0x244>)
 800e274:	429d      	cmp	r5, r3
 800e276:	d101      	bne.n	800e27c <_vfiprintf_r+0x60>
 800e278:	68b5      	ldr	r5, [r6, #8]
 800e27a:	e7df      	b.n	800e23c <_vfiprintf_r+0x20>
 800e27c:	4b79      	ldr	r3, [pc, #484]	; (800e464 <_vfiprintf_r+0x248>)
 800e27e:	429d      	cmp	r5, r3
 800e280:	bf08      	it	eq
 800e282:	68f5      	ldreq	r5, [r6, #12]
 800e284:	e7da      	b.n	800e23c <_vfiprintf_r+0x20>
 800e286:	89ab      	ldrh	r3, [r5, #12]
 800e288:	0598      	lsls	r0, r3, #22
 800e28a:	d4ed      	bmi.n	800e268 <_vfiprintf_r+0x4c>
 800e28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e28e:	f7ff fe32 	bl	800def6 <__retarget_lock_release_recursive>
 800e292:	e7e9      	b.n	800e268 <_vfiprintf_r+0x4c>
 800e294:	2300      	movs	r3, #0
 800e296:	9309      	str	r3, [sp, #36]	; 0x24
 800e298:	2320      	movs	r3, #32
 800e29a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e29e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2a2:	2330      	movs	r3, #48	; 0x30
 800e2a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e468 <_vfiprintf_r+0x24c>
 800e2a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2ac:	f04f 0901 	mov.w	r9, #1
 800e2b0:	4623      	mov	r3, r4
 800e2b2:	469a      	mov	sl, r3
 800e2b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2b8:	b10a      	cbz	r2, 800e2be <_vfiprintf_r+0xa2>
 800e2ba:	2a25      	cmp	r2, #37	; 0x25
 800e2bc:	d1f9      	bne.n	800e2b2 <_vfiprintf_r+0x96>
 800e2be:	ebba 0b04 	subs.w	fp, sl, r4
 800e2c2:	d00b      	beq.n	800e2dc <_vfiprintf_r+0xc0>
 800e2c4:	465b      	mov	r3, fp
 800e2c6:	4622      	mov	r2, r4
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	f7ff ff93 	bl	800e1f6 <__sfputs_r>
 800e2d0:	3001      	adds	r0, #1
 800e2d2:	f000 80aa 	beq.w	800e42a <_vfiprintf_r+0x20e>
 800e2d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2d8:	445a      	add	r2, fp
 800e2da:	9209      	str	r2, [sp, #36]	; 0x24
 800e2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 80a2 	beq.w	800e42a <_vfiprintf_r+0x20e>
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2f0:	f10a 0a01 	add.w	sl, sl, #1
 800e2f4:	9304      	str	r3, [sp, #16]
 800e2f6:	9307      	str	r3, [sp, #28]
 800e2f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2fc:	931a      	str	r3, [sp, #104]	; 0x68
 800e2fe:	4654      	mov	r4, sl
 800e300:	2205      	movs	r2, #5
 800e302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e306:	4858      	ldr	r0, [pc, #352]	; (800e468 <_vfiprintf_r+0x24c>)
 800e308:	f7f1 ff52 	bl	80001b0 <memchr>
 800e30c:	9a04      	ldr	r2, [sp, #16]
 800e30e:	b9d8      	cbnz	r0, 800e348 <_vfiprintf_r+0x12c>
 800e310:	06d1      	lsls	r1, r2, #27
 800e312:	bf44      	itt	mi
 800e314:	2320      	movmi	r3, #32
 800e316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e31a:	0713      	lsls	r3, r2, #28
 800e31c:	bf44      	itt	mi
 800e31e:	232b      	movmi	r3, #43	; 0x2b
 800e320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e324:	f89a 3000 	ldrb.w	r3, [sl]
 800e328:	2b2a      	cmp	r3, #42	; 0x2a
 800e32a:	d015      	beq.n	800e358 <_vfiprintf_r+0x13c>
 800e32c:	9a07      	ldr	r2, [sp, #28]
 800e32e:	4654      	mov	r4, sl
 800e330:	2000      	movs	r0, #0
 800e332:	f04f 0c0a 	mov.w	ip, #10
 800e336:	4621      	mov	r1, r4
 800e338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e33c:	3b30      	subs	r3, #48	; 0x30
 800e33e:	2b09      	cmp	r3, #9
 800e340:	d94e      	bls.n	800e3e0 <_vfiprintf_r+0x1c4>
 800e342:	b1b0      	cbz	r0, 800e372 <_vfiprintf_r+0x156>
 800e344:	9207      	str	r2, [sp, #28]
 800e346:	e014      	b.n	800e372 <_vfiprintf_r+0x156>
 800e348:	eba0 0308 	sub.w	r3, r0, r8
 800e34c:	fa09 f303 	lsl.w	r3, r9, r3
 800e350:	4313      	orrs	r3, r2
 800e352:	9304      	str	r3, [sp, #16]
 800e354:	46a2      	mov	sl, r4
 800e356:	e7d2      	b.n	800e2fe <_vfiprintf_r+0xe2>
 800e358:	9b03      	ldr	r3, [sp, #12]
 800e35a:	1d19      	adds	r1, r3, #4
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	9103      	str	r1, [sp, #12]
 800e360:	2b00      	cmp	r3, #0
 800e362:	bfbb      	ittet	lt
 800e364:	425b      	neglt	r3, r3
 800e366:	f042 0202 	orrlt.w	r2, r2, #2
 800e36a:	9307      	strge	r3, [sp, #28]
 800e36c:	9307      	strlt	r3, [sp, #28]
 800e36e:	bfb8      	it	lt
 800e370:	9204      	strlt	r2, [sp, #16]
 800e372:	7823      	ldrb	r3, [r4, #0]
 800e374:	2b2e      	cmp	r3, #46	; 0x2e
 800e376:	d10c      	bne.n	800e392 <_vfiprintf_r+0x176>
 800e378:	7863      	ldrb	r3, [r4, #1]
 800e37a:	2b2a      	cmp	r3, #42	; 0x2a
 800e37c:	d135      	bne.n	800e3ea <_vfiprintf_r+0x1ce>
 800e37e:	9b03      	ldr	r3, [sp, #12]
 800e380:	1d1a      	adds	r2, r3, #4
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	9203      	str	r2, [sp, #12]
 800e386:	2b00      	cmp	r3, #0
 800e388:	bfb8      	it	lt
 800e38a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e38e:	3402      	adds	r4, #2
 800e390:	9305      	str	r3, [sp, #20]
 800e392:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e478 <_vfiprintf_r+0x25c>
 800e396:	7821      	ldrb	r1, [r4, #0]
 800e398:	2203      	movs	r2, #3
 800e39a:	4650      	mov	r0, sl
 800e39c:	f7f1 ff08 	bl	80001b0 <memchr>
 800e3a0:	b140      	cbz	r0, 800e3b4 <_vfiprintf_r+0x198>
 800e3a2:	2340      	movs	r3, #64	; 0x40
 800e3a4:	eba0 000a 	sub.w	r0, r0, sl
 800e3a8:	fa03 f000 	lsl.w	r0, r3, r0
 800e3ac:	9b04      	ldr	r3, [sp, #16]
 800e3ae:	4303      	orrs	r3, r0
 800e3b0:	3401      	adds	r4, #1
 800e3b2:	9304      	str	r3, [sp, #16]
 800e3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3b8:	482c      	ldr	r0, [pc, #176]	; (800e46c <_vfiprintf_r+0x250>)
 800e3ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3be:	2206      	movs	r2, #6
 800e3c0:	f7f1 fef6 	bl	80001b0 <memchr>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	d03f      	beq.n	800e448 <_vfiprintf_r+0x22c>
 800e3c8:	4b29      	ldr	r3, [pc, #164]	; (800e470 <_vfiprintf_r+0x254>)
 800e3ca:	bb1b      	cbnz	r3, 800e414 <_vfiprintf_r+0x1f8>
 800e3cc:	9b03      	ldr	r3, [sp, #12]
 800e3ce:	3307      	adds	r3, #7
 800e3d0:	f023 0307 	bic.w	r3, r3, #7
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	9303      	str	r3, [sp, #12]
 800e3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3da:	443b      	add	r3, r7
 800e3dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e3de:	e767      	b.n	800e2b0 <_vfiprintf_r+0x94>
 800e3e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3e4:	460c      	mov	r4, r1
 800e3e6:	2001      	movs	r0, #1
 800e3e8:	e7a5      	b.n	800e336 <_vfiprintf_r+0x11a>
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	3401      	adds	r4, #1
 800e3ee:	9305      	str	r3, [sp, #20]
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	f04f 0c0a 	mov.w	ip, #10
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3fc:	3a30      	subs	r2, #48	; 0x30
 800e3fe:	2a09      	cmp	r2, #9
 800e400:	d903      	bls.n	800e40a <_vfiprintf_r+0x1ee>
 800e402:	2b00      	cmp	r3, #0
 800e404:	d0c5      	beq.n	800e392 <_vfiprintf_r+0x176>
 800e406:	9105      	str	r1, [sp, #20]
 800e408:	e7c3      	b.n	800e392 <_vfiprintf_r+0x176>
 800e40a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e40e:	4604      	mov	r4, r0
 800e410:	2301      	movs	r3, #1
 800e412:	e7f0      	b.n	800e3f6 <_vfiprintf_r+0x1da>
 800e414:	ab03      	add	r3, sp, #12
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	462a      	mov	r2, r5
 800e41a:	4b16      	ldr	r3, [pc, #88]	; (800e474 <_vfiprintf_r+0x258>)
 800e41c:	a904      	add	r1, sp, #16
 800e41e:	4630      	mov	r0, r6
 800e420:	f3af 8000 	nop.w
 800e424:	4607      	mov	r7, r0
 800e426:	1c78      	adds	r0, r7, #1
 800e428:	d1d6      	bne.n	800e3d8 <_vfiprintf_r+0x1bc>
 800e42a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e42c:	07d9      	lsls	r1, r3, #31
 800e42e:	d405      	bmi.n	800e43c <_vfiprintf_r+0x220>
 800e430:	89ab      	ldrh	r3, [r5, #12]
 800e432:	059a      	lsls	r2, r3, #22
 800e434:	d402      	bmi.n	800e43c <_vfiprintf_r+0x220>
 800e436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e438:	f7ff fd5d 	bl	800def6 <__retarget_lock_release_recursive>
 800e43c:	89ab      	ldrh	r3, [r5, #12]
 800e43e:	065b      	lsls	r3, r3, #25
 800e440:	f53f af12 	bmi.w	800e268 <_vfiprintf_r+0x4c>
 800e444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e446:	e711      	b.n	800e26c <_vfiprintf_r+0x50>
 800e448:	ab03      	add	r3, sp, #12
 800e44a:	9300      	str	r3, [sp, #0]
 800e44c:	462a      	mov	r2, r5
 800e44e:	4b09      	ldr	r3, [pc, #36]	; (800e474 <_vfiprintf_r+0x258>)
 800e450:	a904      	add	r1, sp, #16
 800e452:	4630      	mov	r0, r6
 800e454:	f000 f880 	bl	800e558 <_printf_i>
 800e458:	e7e4      	b.n	800e424 <_vfiprintf_r+0x208>
 800e45a:	bf00      	nop
 800e45c:	0800f8bc 	.word	0x0800f8bc
 800e460:	0800f8dc 	.word	0x0800f8dc
 800e464:	0800f89c 	.word	0x0800f89c
 800e468:	0800f8fc 	.word	0x0800f8fc
 800e46c:	0800f906 	.word	0x0800f906
 800e470:	00000000 	.word	0x00000000
 800e474:	0800e1f7 	.word	0x0800e1f7
 800e478:	0800f902 	.word	0x0800f902

0800e47c <_printf_common>:
 800e47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e480:	4616      	mov	r6, r2
 800e482:	4699      	mov	r9, r3
 800e484:	688a      	ldr	r2, [r1, #8]
 800e486:	690b      	ldr	r3, [r1, #16]
 800e488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e48c:	4293      	cmp	r3, r2
 800e48e:	bfb8      	it	lt
 800e490:	4613      	movlt	r3, r2
 800e492:	6033      	str	r3, [r6, #0]
 800e494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e498:	4607      	mov	r7, r0
 800e49a:	460c      	mov	r4, r1
 800e49c:	b10a      	cbz	r2, 800e4a2 <_printf_common+0x26>
 800e49e:	3301      	adds	r3, #1
 800e4a0:	6033      	str	r3, [r6, #0]
 800e4a2:	6823      	ldr	r3, [r4, #0]
 800e4a4:	0699      	lsls	r1, r3, #26
 800e4a6:	bf42      	ittt	mi
 800e4a8:	6833      	ldrmi	r3, [r6, #0]
 800e4aa:	3302      	addmi	r3, #2
 800e4ac:	6033      	strmi	r3, [r6, #0]
 800e4ae:	6825      	ldr	r5, [r4, #0]
 800e4b0:	f015 0506 	ands.w	r5, r5, #6
 800e4b4:	d106      	bne.n	800e4c4 <_printf_common+0x48>
 800e4b6:	f104 0a19 	add.w	sl, r4, #25
 800e4ba:	68e3      	ldr	r3, [r4, #12]
 800e4bc:	6832      	ldr	r2, [r6, #0]
 800e4be:	1a9b      	subs	r3, r3, r2
 800e4c0:	42ab      	cmp	r3, r5
 800e4c2:	dc26      	bgt.n	800e512 <_printf_common+0x96>
 800e4c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e4c8:	1e13      	subs	r3, r2, #0
 800e4ca:	6822      	ldr	r2, [r4, #0]
 800e4cc:	bf18      	it	ne
 800e4ce:	2301      	movne	r3, #1
 800e4d0:	0692      	lsls	r2, r2, #26
 800e4d2:	d42b      	bmi.n	800e52c <_printf_common+0xb0>
 800e4d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4d8:	4649      	mov	r1, r9
 800e4da:	4638      	mov	r0, r7
 800e4dc:	47c0      	blx	r8
 800e4de:	3001      	adds	r0, #1
 800e4e0:	d01e      	beq.n	800e520 <_printf_common+0xa4>
 800e4e2:	6823      	ldr	r3, [r4, #0]
 800e4e4:	68e5      	ldr	r5, [r4, #12]
 800e4e6:	6832      	ldr	r2, [r6, #0]
 800e4e8:	f003 0306 	and.w	r3, r3, #6
 800e4ec:	2b04      	cmp	r3, #4
 800e4ee:	bf08      	it	eq
 800e4f0:	1aad      	subeq	r5, r5, r2
 800e4f2:	68a3      	ldr	r3, [r4, #8]
 800e4f4:	6922      	ldr	r2, [r4, #16]
 800e4f6:	bf0c      	ite	eq
 800e4f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4fc:	2500      	movne	r5, #0
 800e4fe:	4293      	cmp	r3, r2
 800e500:	bfc4      	itt	gt
 800e502:	1a9b      	subgt	r3, r3, r2
 800e504:	18ed      	addgt	r5, r5, r3
 800e506:	2600      	movs	r6, #0
 800e508:	341a      	adds	r4, #26
 800e50a:	42b5      	cmp	r5, r6
 800e50c:	d11a      	bne.n	800e544 <_printf_common+0xc8>
 800e50e:	2000      	movs	r0, #0
 800e510:	e008      	b.n	800e524 <_printf_common+0xa8>
 800e512:	2301      	movs	r3, #1
 800e514:	4652      	mov	r2, sl
 800e516:	4649      	mov	r1, r9
 800e518:	4638      	mov	r0, r7
 800e51a:	47c0      	blx	r8
 800e51c:	3001      	adds	r0, #1
 800e51e:	d103      	bne.n	800e528 <_printf_common+0xac>
 800e520:	f04f 30ff 	mov.w	r0, #4294967295
 800e524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e528:	3501      	adds	r5, #1
 800e52a:	e7c6      	b.n	800e4ba <_printf_common+0x3e>
 800e52c:	18e1      	adds	r1, r4, r3
 800e52e:	1c5a      	adds	r2, r3, #1
 800e530:	2030      	movs	r0, #48	; 0x30
 800e532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e536:	4422      	add	r2, r4
 800e538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e53c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e540:	3302      	adds	r3, #2
 800e542:	e7c7      	b.n	800e4d4 <_printf_common+0x58>
 800e544:	2301      	movs	r3, #1
 800e546:	4622      	mov	r2, r4
 800e548:	4649      	mov	r1, r9
 800e54a:	4638      	mov	r0, r7
 800e54c:	47c0      	blx	r8
 800e54e:	3001      	adds	r0, #1
 800e550:	d0e6      	beq.n	800e520 <_printf_common+0xa4>
 800e552:	3601      	adds	r6, #1
 800e554:	e7d9      	b.n	800e50a <_printf_common+0x8e>
	...

0800e558 <_printf_i>:
 800e558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e55c:	7e0f      	ldrb	r7, [r1, #24]
 800e55e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e560:	2f78      	cmp	r7, #120	; 0x78
 800e562:	4691      	mov	r9, r2
 800e564:	4680      	mov	r8, r0
 800e566:	460c      	mov	r4, r1
 800e568:	469a      	mov	sl, r3
 800e56a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e56e:	d807      	bhi.n	800e580 <_printf_i+0x28>
 800e570:	2f62      	cmp	r7, #98	; 0x62
 800e572:	d80a      	bhi.n	800e58a <_printf_i+0x32>
 800e574:	2f00      	cmp	r7, #0
 800e576:	f000 80d8 	beq.w	800e72a <_printf_i+0x1d2>
 800e57a:	2f58      	cmp	r7, #88	; 0x58
 800e57c:	f000 80a3 	beq.w	800e6c6 <_printf_i+0x16e>
 800e580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e588:	e03a      	b.n	800e600 <_printf_i+0xa8>
 800e58a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e58e:	2b15      	cmp	r3, #21
 800e590:	d8f6      	bhi.n	800e580 <_printf_i+0x28>
 800e592:	a101      	add	r1, pc, #4	; (adr r1, 800e598 <_printf_i+0x40>)
 800e594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e598:	0800e5f1 	.word	0x0800e5f1
 800e59c:	0800e605 	.word	0x0800e605
 800e5a0:	0800e581 	.word	0x0800e581
 800e5a4:	0800e581 	.word	0x0800e581
 800e5a8:	0800e581 	.word	0x0800e581
 800e5ac:	0800e581 	.word	0x0800e581
 800e5b0:	0800e605 	.word	0x0800e605
 800e5b4:	0800e581 	.word	0x0800e581
 800e5b8:	0800e581 	.word	0x0800e581
 800e5bc:	0800e581 	.word	0x0800e581
 800e5c0:	0800e581 	.word	0x0800e581
 800e5c4:	0800e711 	.word	0x0800e711
 800e5c8:	0800e635 	.word	0x0800e635
 800e5cc:	0800e6f3 	.word	0x0800e6f3
 800e5d0:	0800e581 	.word	0x0800e581
 800e5d4:	0800e581 	.word	0x0800e581
 800e5d8:	0800e733 	.word	0x0800e733
 800e5dc:	0800e581 	.word	0x0800e581
 800e5e0:	0800e635 	.word	0x0800e635
 800e5e4:	0800e581 	.word	0x0800e581
 800e5e8:	0800e581 	.word	0x0800e581
 800e5ec:	0800e6fb 	.word	0x0800e6fb
 800e5f0:	682b      	ldr	r3, [r5, #0]
 800e5f2:	1d1a      	adds	r2, r3, #4
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	602a      	str	r2, [r5, #0]
 800e5f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e600:	2301      	movs	r3, #1
 800e602:	e0a3      	b.n	800e74c <_printf_i+0x1f4>
 800e604:	6820      	ldr	r0, [r4, #0]
 800e606:	6829      	ldr	r1, [r5, #0]
 800e608:	0606      	lsls	r6, r0, #24
 800e60a:	f101 0304 	add.w	r3, r1, #4
 800e60e:	d50a      	bpl.n	800e626 <_printf_i+0xce>
 800e610:	680e      	ldr	r6, [r1, #0]
 800e612:	602b      	str	r3, [r5, #0]
 800e614:	2e00      	cmp	r6, #0
 800e616:	da03      	bge.n	800e620 <_printf_i+0xc8>
 800e618:	232d      	movs	r3, #45	; 0x2d
 800e61a:	4276      	negs	r6, r6
 800e61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e620:	485e      	ldr	r0, [pc, #376]	; (800e79c <_printf_i+0x244>)
 800e622:	230a      	movs	r3, #10
 800e624:	e019      	b.n	800e65a <_printf_i+0x102>
 800e626:	680e      	ldr	r6, [r1, #0]
 800e628:	602b      	str	r3, [r5, #0]
 800e62a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e62e:	bf18      	it	ne
 800e630:	b236      	sxthne	r6, r6
 800e632:	e7ef      	b.n	800e614 <_printf_i+0xbc>
 800e634:	682b      	ldr	r3, [r5, #0]
 800e636:	6820      	ldr	r0, [r4, #0]
 800e638:	1d19      	adds	r1, r3, #4
 800e63a:	6029      	str	r1, [r5, #0]
 800e63c:	0601      	lsls	r1, r0, #24
 800e63e:	d501      	bpl.n	800e644 <_printf_i+0xec>
 800e640:	681e      	ldr	r6, [r3, #0]
 800e642:	e002      	b.n	800e64a <_printf_i+0xf2>
 800e644:	0646      	lsls	r6, r0, #25
 800e646:	d5fb      	bpl.n	800e640 <_printf_i+0xe8>
 800e648:	881e      	ldrh	r6, [r3, #0]
 800e64a:	4854      	ldr	r0, [pc, #336]	; (800e79c <_printf_i+0x244>)
 800e64c:	2f6f      	cmp	r7, #111	; 0x6f
 800e64e:	bf0c      	ite	eq
 800e650:	2308      	moveq	r3, #8
 800e652:	230a      	movne	r3, #10
 800e654:	2100      	movs	r1, #0
 800e656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e65a:	6865      	ldr	r5, [r4, #4]
 800e65c:	60a5      	str	r5, [r4, #8]
 800e65e:	2d00      	cmp	r5, #0
 800e660:	bfa2      	ittt	ge
 800e662:	6821      	ldrge	r1, [r4, #0]
 800e664:	f021 0104 	bicge.w	r1, r1, #4
 800e668:	6021      	strge	r1, [r4, #0]
 800e66a:	b90e      	cbnz	r6, 800e670 <_printf_i+0x118>
 800e66c:	2d00      	cmp	r5, #0
 800e66e:	d04d      	beq.n	800e70c <_printf_i+0x1b4>
 800e670:	4615      	mov	r5, r2
 800e672:	fbb6 f1f3 	udiv	r1, r6, r3
 800e676:	fb03 6711 	mls	r7, r3, r1, r6
 800e67a:	5dc7      	ldrb	r7, [r0, r7]
 800e67c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e680:	4637      	mov	r7, r6
 800e682:	42bb      	cmp	r3, r7
 800e684:	460e      	mov	r6, r1
 800e686:	d9f4      	bls.n	800e672 <_printf_i+0x11a>
 800e688:	2b08      	cmp	r3, #8
 800e68a:	d10b      	bne.n	800e6a4 <_printf_i+0x14c>
 800e68c:	6823      	ldr	r3, [r4, #0]
 800e68e:	07de      	lsls	r6, r3, #31
 800e690:	d508      	bpl.n	800e6a4 <_printf_i+0x14c>
 800e692:	6923      	ldr	r3, [r4, #16]
 800e694:	6861      	ldr	r1, [r4, #4]
 800e696:	4299      	cmp	r1, r3
 800e698:	bfde      	ittt	le
 800e69a:	2330      	movle	r3, #48	; 0x30
 800e69c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6a4:	1b52      	subs	r2, r2, r5
 800e6a6:	6122      	str	r2, [r4, #16]
 800e6a8:	f8cd a000 	str.w	sl, [sp]
 800e6ac:	464b      	mov	r3, r9
 800e6ae:	aa03      	add	r2, sp, #12
 800e6b0:	4621      	mov	r1, r4
 800e6b2:	4640      	mov	r0, r8
 800e6b4:	f7ff fee2 	bl	800e47c <_printf_common>
 800e6b8:	3001      	adds	r0, #1
 800e6ba:	d14c      	bne.n	800e756 <_printf_i+0x1fe>
 800e6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c0:	b004      	add	sp, #16
 800e6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c6:	4835      	ldr	r0, [pc, #212]	; (800e79c <_printf_i+0x244>)
 800e6c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e6cc:	6829      	ldr	r1, [r5, #0]
 800e6ce:	6823      	ldr	r3, [r4, #0]
 800e6d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6d4:	6029      	str	r1, [r5, #0]
 800e6d6:	061d      	lsls	r5, r3, #24
 800e6d8:	d514      	bpl.n	800e704 <_printf_i+0x1ac>
 800e6da:	07df      	lsls	r7, r3, #31
 800e6dc:	bf44      	itt	mi
 800e6de:	f043 0320 	orrmi.w	r3, r3, #32
 800e6e2:	6023      	strmi	r3, [r4, #0]
 800e6e4:	b91e      	cbnz	r6, 800e6ee <_printf_i+0x196>
 800e6e6:	6823      	ldr	r3, [r4, #0]
 800e6e8:	f023 0320 	bic.w	r3, r3, #32
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	2310      	movs	r3, #16
 800e6f0:	e7b0      	b.n	800e654 <_printf_i+0xfc>
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	f043 0320 	orr.w	r3, r3, #32
 800e6f8:	6023      	str	r3, [r4, #0]
 800e6fa:	2378      	movs	r3, #120	; 0x78
 800e6fc:	4828      	ldr	r0, [pc, #160]	; (800e7a0 <_printf_i+0x248>)
 800e6fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e702:	e7e3      	b.n	800e6cc <_printf_i+0x174>
 800e704:	0659      	lsls	r1, r3, #25
 800e706:	bf48      	it	mi
 800e708:	b2b6      	uxthmi	r6, r6
 800e70a:	e7e6      	b.n	800e6da <_printf_i+0x182>
 800e70c:	4615      	mov	r5, r2
 800e70e:	e7bb      	b.n	800e688 <_printf_i+0x130>
 800e710:	682b      	ldr	r3, [r5, #0]
 800e712:	6826      	ldr	r6, [r4, #0]
 800e714:	6961      	ldr	r1, [r4, #20]
 800e716:	1d18      	adds	r0, r3, #4
 800e718:	6028      	str	r0, [r5, #0]
 800e71a:	0635      	lsls	r5, r6, #24
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	d501      	bpl.n	800e724 <_printf_i+0x1cc>
 800e720:	6019      	str	r1, [r3, #0]
 800e722:	e002      	b.n	800e72a <_printf_i+0x1d2>
 800e724:	0670      	lsls	r0, r6, #25
 800e726:	d5fb      	bpl.n	800e720 <_printf_i+0x1c8>
 800e728:	8019      	strh	r1, [r3, #0]
 800e72a:	2300      	movs	r3, #0
 800e72c:	6123      	str	r3, [r4, #16]
 800e72e:	4615      	mov	r5, r2
 800e730:	e7ba      	b.n	800e6a8 <_printf_i+0x150>
 800e732:	682b      	ldr	r3, [r5, #0]
 800e734:	1d1a      	adds	r2, r3, #4
 800e736:	602a      	str	r2, [r5, #0]
 800e738:	681d      	ldr	r5, [r3, #0]
 800e73a:	6862      	ldr	r2, [r4, #4]
 800e73c:	2100      	movs	r1, #0
 800e73e:	4628      	mov	r0, r5
 800e740:	f7f1 fd36 	bl	80001b0 <memchr>
 800e744:	b108      	cbz	r0, 800e74a <_printf_i+0x1f2>
 800e746:	1b40      	subs	r0, r0, r5
 800e748:	6060      	str	r0, [r4, #4]
 800e74a:	6863      	ldr	r3, [r4, #4]
 800e74c:	6123      	str	r3, [r4, #16]
 800e74e:	2300      	movs	r3, #0
 800e750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e754:	e7a8      	b.n	800e6a8 <_printf_i+0x150>
 800e756:	6923      	ldr	r3, [r4, #16]
 800e758:	462a      	mov	r2, r5
 800e75a:	4649      	mov	r1, r9
 800e75c:	4640      	mov	r0, r8
 800e75e:	47d0      	blx	sl
 800e760:	3001      	adds	r0, #1
 800e762:	d0ab      	beq.n	800e6bc <_printf_i+0x164>
 800e764:	6823      	ldr	r3, [r4, #0]
 800e766:	079b      	lsls	r3, r3, #30
 800e768:	d413      	bmi.n	800e792 <_printf_i+0x23a>
 800e76a:	68e0      	ldr	r0, [r4, #12]
 800e76c:	9b03      	ldr	r3, [sp, #12]
 800e76e:	4298      	cmp	r0, r3
 800e770:	bfb8      	it	lt
 800e772:	4618      	movlt	r0, r3
 800e774:	e7a4      	b.n	800e6c0 <_printf_i+0x168>
 800e776:	2301      	movs	r3, #1
 800e778:	4632      	mov	r2, r6
 800e77a:	4649      	mov	r1, r9
 800e77c:	4640      	mov	r0, r8
 800e77e:	47d0      	blx	sl
 800e780:	3001      	adds	r0, #1
 800e782:	d09b      	beq.n	800e6bc <_printf_i+0x164>
 800e784:	3501      	adds	r5, #1
 800e786:	68e3      	ldr	r3, [r4, #12]
 800e788:	9903      	ldr	r1, [sp, #12]
 800e78a:	1a5b      	subs	r3, r3, r1
 800e78c:	42ab      	cmp	r3, r5
 800e78e:	dcf2      	bgt.n	800e776 <_printf_i+0x21e>
 800e790:	e7eb      	b.n	800e76a <_printf_i+0x212>
 800e792:	2500      	movs	r5, #0
 800e794:	f104 0619 	add.w	r6, r4, #25
 800e798:	e7f5      	b.n	800e786 <_printf_i+0x22e>
 800e79a:	bf00      	nop
 800e79c:	0800f90d 	.word	0x0800f90d
 800e7a0:	0800f91e 	.word	0x0800f91e

0800e7a4 <__sread>:
 800e7a4:	b510      	push	{r4, lr}
 800e7a6:	460c      	mov	r4, r1
 800e7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ac:	f000 faa4 	bl	800ecf8 <_read_r>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	bfab      	itete	ge
 800e7b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7b6:	89a3      	ldrhlt	r3, [r4, #12]
 800e7b8:	181b      	addge	r3, r3, r0
 800e7ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7be:	bfac      	ite	ge
 800e7c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7c2:	81a3      	strhlt	r3, [r4, #12]
 800e7c4:	bd10      	pop	{r4, pc}

0800e7c6 <__swrite>:
 800e7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ca:	461f      	mov	r7, r3
 800e7cc:	898b      	ldrh	r3, [r1, #12]
 800e7ce:	05db      	lsls	r3, r3, #23
 800e7d0:	4605      	mov	r5, r0
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	4616      	mov	r6, r2
 800e7d6:	d505      	bpl.n	800e7e4 <__swrite+0x1e>
 800e7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7dc:	2302      	movs	r3, #2
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f000 f9c8 	bl	800eb74 <_lseek_r>
 800e7e4:	89a3      	ldrh	r3, [r4, #12]
 800e7e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7ee:	81a3      	strh	r3, [r4, #12]
 800e7f0:	4632      	mov	r2, r6
 800e7f2:	463b      	mov	r3, r7
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7fa:	f000 b869 	b.w	800e8d0 <_write_r>

0800e7fe <__sseek>:
 800e7fe:	b510      	push	{r4, lr}
 800e800:	460c      	mov	r4, r1
 800e802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e806:	f000 f9b5 	bl	800eb74 <_lseek_r>
 800e80a:	1c43      	adds	r3, r0, #1
 800e80c:	89a3      	ldrh	r3, [r4, #12]
 800e80e:	bf15      	itete	ne
 800e810:	6560      	strne	r0, [r4, #84]	; 0x54
 800e812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e81a:	81a3      	strheq	r3, [r4, #12]
 800e81c:	bf18      	it	ne
 800e81e:	81a3      	strhne	r3, [r4, #12]
 800e820:	bd10      	pop	{r4, pc}

0800e822 <__sclose>:
 800e822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e826:	f000 b8d3 	b.w	800e9d0 <_close_r>
	...

0800e82c <__swbuf_r>:
 800e82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e82e:	460e      	mov	r6, r1
 800e830:	4614      	mov	r4, r2
 800e832:	4605      	mov	r5, r0
 800e834:	b118      	cbz	r0, 800e83e <__swbuf_r+0x12>
 800e836:	6983      	ldr	r3, [r0, #24]
 800e838:	b90b      	cbnz	r3, 800e83e <__swbuf_r+0x12>
 800e83a:	f7ff fabd 	bl	800ddb8 <__sinit>
 800e83e:	4b21      	ldr	r3, [pc, #132]	; (800e8c4 <__swbuf_r+0x98>)
 800e840:	429c      	cmp	r4, r3
 800e842:	d12b      	bne.n	800e89c <__swbuf_r+0x70>
 800e844:	686c      	ldr	r4, [r5, #4]
 800e846:	69a3      	ldr	r3, [r4, #24]
 800e848:	60a3      	str	r3, [r4, #8]
 800e84a:	89a3      	ldrh	r3, [r4, #12]
 800e84c:	071a      	lsls	r2, r3, #28
 800e84e:	d52f      	bpl.n	800e8b0 <__swbuf_r+0x84>
 800e850:	6923      	ldr	r3, [r4, #16]
 800e852:	b36b      	cbz	r3, 800e8b0 <__swbuf_r+0x84>
 800e854:	6923      	ldr	r3, [r4, #16]
 800e856:	6820      	ldr	r0, [r4, #0]
 800e858:	1ac0      	subs	r0, r0, r3
 800e85a:	6963      	ldr	r3, [r4, #20]
 800e85c:	b2f6      	uxtb	r6, r6
 800e85e:	4283      	cmp	r3, r0
 800e860:	4637      	mov	r7, r6
 800e862:	dc04      	bgt.n	800e86e <__swbuf_r+0x42>
 800e864:	4621      	mov	r1, r4
 800e866:	4628      	mov	r0, r5
 800e868:	f000 f948 	bl	800eafc <_fflush_r>
 800e86c:	bb30      	cbnz	r0, 800e8bc <__swbuf_r+0x90>
 800e86e:	68a3      	ldr	r3, [r4, #8]
 800e870:	3b01      	subs	r3, #1
 800e872:	60a3      	str	r3, [r4, #8]
 800e874:	6823      	ldr	r3, [r4, #0]
 800e876:	1c5a      	adds	r2, r3, #1
 800e878:	6022      	str	r2, [r4, #0]
 800e87a:	701e      	strb	r6, [r3, #0]
 800e87c:	6963      	ldr	r3, [r4, #20]
 800e87e:	3001      	adds	r0, #1
 800e880:	4283      	cmp	r3, r0
 800e882:	d004      	beq.n	800e88e <__swbuf_r+0x62>
 800e884:	89a3      	ldrh	r3, [r4, #12]
 800e886:	07db      	lsls	r3, r3, #31
 800e888:	d506      	bpl.n	800e898 <__swbuf_r+0x6c>
 800e88a:	2e0a      	cmp	r6, #10
 800e88c:	d104      	bne.n	800e898 <__swbuf_r+0x6c>
 800e88e:	4621      	mov	r1, r4
 800e890:	4628      	mov	r0, r5
 800e892:	f000 f933 	bl	800eafc <_fflush_r>
 800e896:	b988      	cbnz	r0, 800e8bc <__swbuf_r+0x90>
 800e898:	4638      	mov	r0, r7
 800e89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e89c:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <__swbuf_r+0x9c>)
 800e89e:	429c      	cmp	r4, r3
 800e8a0:	d101      	bne.n	800e8a6 <__swbuf_r+0x7a>
 800e8a2:	68ac      	ldr	r4, [r5, #8]
 800e8a4:	e7cf      	b.n	800e846 <__swbuf_r+0x1a>
 800e8a6:	4b09      	ldr	r3, [pc, #36]	; (800e8cc <__swbuf_r+0xa0>)
 800e8a8:	429c      	cmp	r4, r3
 800e8aa:	bf08      	it	eq
 800e8ac:	68ec      	ldreq	r4, [r5, #12]
 800e8ae:	e7ca      	b.n	800e846 <__swbuf_r+0x1a>
 800e8b0:	4621      	mov	r1, r4
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	f000 f81e 	bl	800e8f4 <__swsetup_r>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d0cb      	beq.n	800e854 <__swbuf_r+0x28>
 800e8bc:	f04f 37ff 	mov.w	r7, #4294967295
 800e8c0:	e7ea      	b.n	800e898 <__swbuf_r+0x6c>
 800e8c2:	bf00      	nop
 800e8c4:	0800f8bc 	.word	0x0800f8bc
 800e8c8:	0800f8dc 	.word	0x0800f8dc
 800e8cc:	0800f89c 	.word	0x0800f89c

0800e8d0 <_write_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4d07      	ldr	r5, [pc, #28]	; (800e8f0 <_write_r+0x20>)
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	4608      	mov	r0, r1
 800e8d8:	4611      	mov	r1, r2
 800e8da:	2200      	movs	r2, #0
 800e8dc:	602a      	str	r2, [r5, #0]
 800e8de:	461a      	mov	r2, r3
 800e8e0:	f7fe f876 	bl	800c9d0 <_write>
 800e8e4:	1c43      	adds	r3, r0, #1
 800e8e6:	d102      	bne.n	800e8ee <_write_r+0x1e>
 800e8e8:	682b      	ldr	r3, [r5, #0]
 800e8ea:	b103      	cbz	r3, 800e8ee <_write_r+0x1e>
 800e8ec:	6023      	str	r3, [r4, #0]
 800e8ee:	bd38      	pop	{r3, r4, r5, pc}
 800e8f0:	200019c4 	.word	0x200019c4

0800e8f4 <__swsetup_r>:
 800e8f4:	4b32      	ldr	r3, [pc, #200]	; (800e9c0 <__swsetup_r+0xcc>)
 800e8f6:	b570      	push	{r4, r5, r6, lr}
 800e8f8:	681d      	ldr	r5, [r3, #0]
 800e8fa:	4606      	mov	r6, r0
 800e8fc:	460c      	mov	r4, r1
 800e8fe:	b125      	cbz	r5, 800e90a <__swsetup_r+0x16>
 800e900:	69ab      	ldr	r3, [r5, #24]
 800e902:	b913      	cbnz	r3, 800e90a <__swsetup_r+0x16>
 800e904:	4628      	mov	r0, r5
 800e906:	f7ff fa57 	bl	800ddb8 <__sinit>
 800e90a:	4b2e      	ldr	r3, [pc, #184]	; (800e9c4 <__swsetup_r+0xd0>)
 800e90c:	429c      	cmp	r4, r3
 800e90e:	d10f      	bne.n	800e930 <__swsetup_r+0x3c>
 800e910:	686c      	ldr	r4, [r5, #4]
 800e912:	89a3      	ldrh	r3, [r4, #12]
 800e914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e918:	0719      	lsls	r1, r3, #28
 800e91a:	d42c      	bmi.n	800e976 <__swsetup_r+0x82>
 800e91c:	06dd      	lsls	r5, r3, #27
 800e91e:	d411      	bmi.n	800e944 <__swsetup_r+0x50>
 800e920:	2309      	movs	r3, #9
 800e922:	6033      	str	r3, [r6, #0]
 800e924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e928:	81a3      	strh	r3, [r4, #12]
 800e92a:	f04f 30ff 	mov.w	r0, #4294967295
 800e92e:	e03e      	b.n	800e9ae <__swsetup_r+0xba>
 800e930:	4b25      	ldr	r3, [pc, #148]	; (800e9c8 <__swsetup_r+0xd4>)
 800e932:	429c      	cmp	r4, r3
 800e934:	d101      	bne.n	800e93a <__swsetup_r+0x46>
 800e936:	68ac      	ldr	r4, [r5, #8]
 800e938:	e7eb      	b.n	800e912 <__swsetup_r+0x1e>
 800e93a:	4b24      	ldr	r3, [pc, #144]	; (800e9cc <__swsetup_r+0xd8>)
 800e93c:	429c      	cmp	r4, r3
 800e93e:	bf08      	it	eq
 800e940:	68ec      	ldreq	r4, [r5, #12]
 800e942:	e7e6      	b.n	800e912 <__swsetup_r+0x1e>
 800e944:	0758      	lsls	r0, r3, #29
 800e946:	d512      	bpl.n	800e96e <__swsetup_r+0x7a>
 800e948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e94a:	b141      	cbz	r1, 800e95e <__swsetup_r+0x6a>
 800e94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e950:	4299      	cmp	r1, r3
 800e952:	d002      	beq.n	800e95a <__swsetup_r+0x66>
 800e954:	4630      	mov	r0, r6
 800e956:	f7ff f861 	bl	800da1c <_free_r>
 800e95a:	2300      	movs	r3, #0
 800e95c:	6363      	str	r3, [r4, #52]	; 0x34
 800e95e:	89a3      	ldrh	r3, [r4, #12]
 800e960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e964:	81a3      	strh	r3, [r4, #12]
 800e966:	2300      	movs	r3, #0
 800e968:	6063      	str	r3, [r4, #4]
 800e96a:	6923      	ldr	r3, [r4, #16]
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	89a3      	ldrh	r3, [r4, #12]
 800e970:	f043 0308 	orr.w	r3, r3, #8
 800e974:	81a3      	strh	r3, [r4, #12]
 800e976:	6923      	ldr	r3, [r4, #16]
 800e978:	b94b      	cbnz	r3, 800e98e <__swsetup_r+0x9a>
 800e97a:	89a3      	ldrh	r3, [r4, #12]
 800e97c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e984:	d003      	beq.n	800e98e <__swsetup_r+0x9a>
 800e986:	4621      	mov	r1, r4
 800e988:	4630      	mov	r0, r6
 800e98a:	f000 f92b 	bl	800ebe4 <__smakebuf_r>
 800e98e:	89a0      	ldrh	r0, [r4, #12]
 800e990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e994:	f010 0301 	ands.w	r3, r0, #1
 800e998:	d00a      	beq.n	800e9b0 <__swsetup_r+0xbc>
 800e99a:	2300      	movs	r3, #0
 800e99c:	60a3      	str	r3, [r4, #8]
 800e99e:	6963      	ldr	r3, [r4, #20]
 800e9a0:	425b      	negs	r3, r3
 800e9a2:	61a3      	str	r3, [r4, #24]
 800e9a4:	6923      	ldr	r3, [r4, #16]
 800e9a6:	b943      	cbnz	r3, 800e9ba <__swsetup_r+0xc6>
 800e9a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e9ac:	d1ba      	bne.n	800e924 <__swsetup_r+0x30>
 800e9ae:	bd70      	pop	{r4, r5, r6, pc}
 800e9b0:	0781      	lsls	r1, r0, #30
 800e9b2:	bf58      	it	pl
 800e9b4:	6963      	ldrpl	r3, [r4, #20]
 800e9b6:	60a3      	str	r3, [r4, #8]
 800e9b8:	e7f4      	b.n	800e9a4 <__swsetup_r+0xb0>
 800e9ba:	2000      	movs	r0, #0
 800e9bc:	e7f7      	b.n	800e9ae <__swsetup_r+0xba>
 800e9be:	bf00      	nop
 800e9c0:	20000030 	.word	0x20000030
 800e9c4:	0800f8bc 	.word	0x0800f8bc
 800e9c8:	0800f8dc 	.word	0x0800f8dc
 800e9cc:	0800f89c 	.word	0x0800f89c

0800e9d0 <_close_r>:
 800e9d0:	b538      	push	{r3, r4, r5, lr}
 800e9d2:	4d06      	ldr	r5, [pc, #24]	; (800e9ec <_close_r+0x1c>)
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	4608      	mov	r0, r1
 800e9da:	602b      	str	r3, [r5, #0]
 800e9dc:	f7f2 f936 	bl	8000c4c <_close>
 800e9e0:	1c43      	adds	r3, r0, #1
 800e9e2:	d102      	bne.n	800e9ea <_close_r+0x1a>
 800e9e4:	682b      	ldr	r3, [r5, #0]
 800e9e6:	b103      	cbz	r3, 800e9ea <_close_r+0x1a>
 800e9e8:	6023      	str	r3, [r4, #0]
 800e9ea:	bd38      	pop	{r3, r4, r5, pc}
 800e9ec:	200019c4 	.word	0x200019c4

0800e9f0 <__sflush_r>:
 800e9f0:	898a      	ldrh	r2, [r1, #12]
 800e9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f6:	4605      	mov	r5, r0
 800e9f8:	0710      	lsls	r0, r2, #28
 800e9fa:	460c      	mov	r4, r1
 800e9fc:	d458      	bmi.n	800eab0 <__sflush_r+0xc0>
 800e9fe:	684b      	ldr	r3, [r1, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	dc05      	bgt.n	800ea10 <__sflush_r+0x20>
 800ea04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	dc02      	bgt.n	800ea10 <__sflush_r+0x20>
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea12:	2e00      	cmp	r6, #0
 800ea14:	d0f9      	beq.n	800ea0a <__sflush_r+0x1a>
 800ea16:	2300      	movs	r3, #0
 800ea18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea1c:	682f      	ldr	r7, [r5, #0]
 800ea1e:	602b      	str	r3, [r5, #0]
 800ea20:	d032      	beq.n	800ea88 <__sflush_r+0x98>
 800ea22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	075a      	lsls	r2, r3, #29
 800ea28:	d505      	bpl.n	800ea36 <__sflush_r+0x46>
 800ea2a:	6863      	ldr	r3, [r4, #4]
 800ea2c:	1ac0      	subs	r0, r0, r3
 800ea2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea30:	b10b      	cbz	r3, 800ea36 <__sflush_r+0x46>
 800ea32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea34:	1ac0      	subs	r0, r0, r3
 800ea36:	2300      	movs	r3, #0
 800ea38:	4602      	mov	r2, r0
 800ea3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea3c:	6a21      	ldr	r1, [r4, #32]
 800ea3e:	4628      	mov	r0, r5
 800ea40:	47b0      	blx	r6
 800ea42:	1c43      	adds	r3, r0, #1
 800ea44:	89a3      	ldrh	r3, [r4, #12]
 800ea46:	d106      	bne.n	800ea56 <__sflush_r+0x66>
 800ea48:	6829      	ldr	r1, [r5, #0]
 800ea4a:	291d      	cmp	r1, #29
 800ea4c:	d82c      	bhi.n	800eaa8 <__sflush_r+0xb8>
 800ea4e:	4a2a      	ldr	r2, [pc, #168]	; (800eaf8 <__sflush_r+0x108>)
 800ea50:	40ca      	lsrs	r2, r1
 800ea52:	07d6      	lsls	r6, r2, #31
 800ea54:	d528      	bpl.n	800eaa8 <__sflush_r+0xb8>
 800ea56:	2200      	movs	r2, #0
 800ea58:	6062      	str	r2, [r4, #4]
 800ea5a:	04d9      	lsls	r1, r3, #19
 800ea5c:	6922      	ldr	r2, [r4, #16]
 800ea5e:	6022      	str	r2, [r4, #0]
 800ea60:	d504      	bpl.n	800ea6c <__sflush_r+0x7c>
 800ea62:	1c42      	adds	r2, r0, #1
 800ea64:	d101      	bne.n	800ea6a <__sflush_r+0x7a>
 800ea66:	682b      	ldr	r3, [r5, #0]
 800ea68:	b903      	cbnz	r3, 800ea6c <__sflush_r+0x7c>
 800ea6a:	6560      	str	r0, [r4, #84]	; 0x54
 800ea6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea6e:	602f      	str	r7, [r5, #0]
 800ea70:	2900      	cmp	r1, #0
 800ea72:	d0ca      	beq.n	800ea0a <__sflush_r+0x1a>
 800ea74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea78:	4299      	cmp	r1, r3
 800ea7a:	d002      	beq.n	800ea82 <__sflush_r+0x92>
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	f7fe ffcd 	bl	800da1c <_free_r>
 800ea82:	2000      	movs	r0, #0
 800ea84:	6360      	str	r0, [r4, #52]	; 0x34
 800ea86:	e7c1      	b.n	800ea0c <__sflush_r+0x1c>
 800ea88:	6a21      	ldr	r1, [r4, #32]
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	4628      	mov	r0, r5
 800ea8e:	47b0      	blx	r6
 800ea90:	1c41      	adds	r1, r0, #1
 800ea92:	d1c7      	bne.n	800ea24 <__sflush_r+0x34>
 800ea94:	682b      	ldr	r3, [r5, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d0c4      	beq.n	800ea24 <__sflush_r+0x34>
 800ea9a:	2b1d      	cmp	r3, #29
 800ea9c:	d001      	beq.n	800eaa2 <__sflush_r+0xb2>
 800ea9e:	2b16      	cmp	r3, #22
 800eaa0:	d101      	bne.n	800eaa6 <__sflush_r+0xb6>
 800eaa2:	602f      	str	r7, [r5, #0]
 800eaa4:	e7b1      	b.n	800ea0a <__sflush_r+0x1a>
 800eaa6:	89a3      	ldrh	r3, [r4, #12]
 800eaa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaac:	81a3      	strh	r3, [r4, #12]
 800eaae:	e7ad      	b.n	800ea0c <__sflush_r+0x1c>
 800eab0:	690f      	ldr	r7, [r1, #16]
 800eab2:	2f00      	cmp	r7, #0
 800eab4:	d0a9      	beq.n	800ea0a <__sflush_r+0x1a>
 800eab6:	0793      	lsls	r3, r2, #30
 800eab8:	680e      	ldr	r6, [r1, #0]
 800eaba:	bf08      	it	eq
 800eabc:	694b      	ldreq	r3, [r1, #20]
 800eabe:	600f      	str	r7, [r1, #0]
 800eac0:	bf18      	it	ne
 800eac2:	2300      	movne	r3, #0
 800eac4:	eba6 0807 	sub.w	r8, r6, r7
 800eac8:	608b      	str	r3, [r1, #8]
 800eaca:	f1b8 0f00 	cmp.w	r8, #0
 800eace:	dd9c      	ble.n	800ea0a <__sflush_r+0x1a>
 800ead0:	6a21      	ldr	r1, [r4, #32]
 800ead2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ead4:	4643      	mov	r3, r8
 800ead6:	463a      	mov	r2, r7
 800ead8:	4628      	mov	r0, r5
 800eada:	47b0      	blx	r6
 800eadc:	2800      	cmp	r0, #0
 800eade:	dc06      	bgt.n	800eaee <__sflush_r+0xfe>
 800eae0:	89a3      	ldrh	r3, [r4, #12]
 800eae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eae6:	81a3      	strh	r3, [r4, #12]
 800eae8:	f04f 30ff 	mov.w	r0, #4294967295
 800eaec:	e78e      	b.n	800ea0c <__sflush_r+0x1c>
 800eaee:	4407      	add	r7, r0
 800eaf0:	eba8 0800 	sub.w	r8, r8, r0
 800eaf4:	e7e9      	b.n	800eaca <__sflush_r+0xda>
 800eaf6:	bf00      	nop
 800eaf8:	20400001 	.word	0x20400001

0800eafc <_fflush_r>:
 800eafc:	b538      	push	{r3, r4, r5, lr}
 800eafe:	690b      	ldr	r3, [r1, #16]
 800eb00:	4605      	mov	r5, r0
 800eb02:	460c      	mov	r4, r1
 800eb04:	b913      	cbnz	r3, 800eb0c <_fflush_r+0x10>
 800eb06:	2500      	movs	r5, #0
 800eb08:	4628      	mov	r0, r5
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}
 800eb0c:	b118      	cbz	r0, 800eb16 <_fflush_r+0x1a>
 800eb0e:	6983      	ldr	r3, [r0, #24]
 800eb10:	b90b      	cbnz	r3, 800eb16 <_fflush_r+0x1a>
 800eb12:	f7ff f951 	bl	800ddb8 <__sinit>
 800eb16:	4b14      	ldr	r3, [pc, #80]	; (800eb68 <_fflush_r+0x6c>)
 800eb18:	429c      	cmp	r4, r3
 800eb1a:	d11b      	bne.n	800eb54 <_fflush_r+0x58>
 800eb1c:	686c      	ldr	r4, [r5, #4]
 800eb1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d0ef      	beq.n	800eb06 <_fflush_r+0xa>
 800eb26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb28:	07d0      	lsls	r0, r2, #31
 800eb2a:	d404      	bmi.n	800eb36 <_fflush_r+0x3a>
 800eb2c:	0599      	lsls	r1, r3, #22
 800eb2e:	d402      	bmi.n	800eb36 <_fflush_r+0x3a>
 800eb30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb32:	f7ff f9df 	bl	800def4 <__retarget_lock_acquire_recursive>
 800eb36:	4628      	mov	r0, r5
 800eb38:	4621      	mov	r1, r4
 800eb3a:	f7ff ff59 	bl	800e9f0 <__sflush_r>
 800eb3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb40:	07da      	lsls	r2, r3, #31
 800eb42:	4605      	mov	r5, r0
 800eb44:	d4e0      	bmi.n	800eb08 <_fflush_r+0xc>
 800eb46:	89a3      	ldrh	r3, [r4, #12]
 800eb48:	059b      	lsls	r3, r3, #22
 800eb4a:	d4dd      	bmi.n	800eb08 <_fflush_r+0xc>
 800eb4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb4e:	f7ff f9d2 	bl	800def6 <__retarget_lock_release_recursive>
 800eb52:	e7d9      	b.n	800eb08 <_fflush_r+0xc>
 800eb54:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <_fflush_r+0x70>)
 800eb56:	429c      	cmp	r4, r3
 800eb58:	d101      	bne.n	800eb5e <_fflush_r+0x62>
 800eb5a:	68ac      	ldr	r4, [r5, #8]
 800eb5c:	e7df      	b.n	800eb1e <_fflush_r+0x22>
 800eb5e:	4b04      	ldr	r3, [pc, #16]	; (800eb70 <_fflush_r+0x74>)
 800eb60:	429c      	cmp	r4, r3
 800eb62:	bf08      	it	eq
 800eb64:	68ec      	ldreq	r4, [r5, #12]
 800eb66:	e7da      	b.n	800eb1e <_fflush_r+0x22>
 800eb68:	0800f8bc 	.word	0x0800f8bc
 800eb6c:	0800f8dc 	.word	0x0800f8dc
 800eb70:	0800f89c 	.word	0x0800f89c

0800eb74 <_lseek_r>:
 800eb74:	b538      	push	{r3, r4, r5, lr}
 800eb76:	4d07      	ldr	r5, [pc, #28]	; (800eb94 <_lseek_r+0x20>)
 800eb78:	4604      	mov	r4, r0
 800eb7a:	4608      	mov	r0, r1
 800eb7c:	4611      	mov	r1, r2
 800eb7e:	2200      	movs	r2, #0
 800eb80:	602a      	str	r2, [r5, #0]
 800eb82:	461a      	mov	r2, r3
 800eb84:	f7f2 f889 	bl	8000c9a <_lseek>
 800eb88:	1c43      	adds	r3, r0, #1
 800eb8a:	d102      	bne.n	800eb92 <_lseek_r+0x1e>
 800eb8c:	682b      	ldr	r3, [r5, #0]
 800eb8e:	b103      	cbz	r3, 800eb92 <_lseek_r+0x1e>
 800eb90:	6023      	str	r3, [r4, #0]
 800eb92:	bd38      	pop	{r3, r4, r5, pc}
 800eb94:	200019c4 	.word	0x200019c4

0800eb98 <__swhatbuf_r>:
 800eb98:	b570      	push	{r4, r5, r6, lr}
 800eb9a:	460e      	mov	r6, r1
 800eb9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eba0:	2900      	cmp	r1, #0
 800eba2:	b096      	sub	sp, #88	; 0x58
 800eba4:	4614      	mov	r4, r2
 800eba6:	461d      	mov	r5, r3
 800eba8:	da08      	bge.n	800ebbc <__swhatbuf_r+0x24>
 800ebaa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	602a      	str	r2, [r5, #0]
 800ebb2:	061a      	lsls	r2, r3, #24
 800ebb4:	d410      	bmi.n	800ebd8 <__swhatbuf_r+0x40>
 800ebb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebba:	e00e      	b.n	800ebda <__swhatbuf_r+0x42>
 800ebbc:	466a      	mov	r2, sp
 800ebbe:	f000 f8ad 	bl	800ed1c <_fstat_r>
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	dbf1      	blt.n	800ebaa <__swhatbuf_r+0x12>
 800ebc6:	9a01      	ldr	r2, [sp, #4]
 800ebc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ebcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ebd0:	425a      	negs	r2, r3
 800ebd2:	415a      	adcs	r2, r3
 800ebd4:	602a      	str	r2, [r5, #0]
 800ebd6:	e7ee      	b.n	800ebb6 <__swhatbuf_r+0x1e>
 800ebd8:	2340      	movs	r3, #64	; 0x40
 800ebda:	2000      	movs	r0, #0
 800ebdc:	6023      	str	r3, [r4, #0]
 800ebde:	b016      	add	sp, #88	; 0x58
 800ebe0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ebe4 <__smakebuf_r>:
 800ebe4:	898b      	ldrh	r3, [r1, #12]
 800ebe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ebe8:	079d      	lsls	r5, r3, #30
 800ebea:	4606      	mov	r6, r0
 800ebec:	460c      	mov	r4, r1
 800ebee:	d507      	bpl.n	800ec00 <__smakebuf_r+0x1c>
 800ebf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ebf4:	6023      	str	r3, [r4, #0]
 800ebf6:	6123      	str	r3, [r4, #16]
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	6163      	str	r3, [r4, #20]
 800ebfc:	b002      	add	sp, #8
 800ebfe:	bd70      	pop	{r4, r5, r6, pc}
 800ec00:	ab01      	add	r3, sp, #4
 800ec02:	466a      	mov	r2, sp
 800ec04:	f7ff ffc8 	bl	800eb98 <__swhatbuf_r>
 800ec08:	9900      	ldr	r1, [sp, #0]
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	f7fe ff71 	bl	800daf4 <_malloc_r>
 800ec12:	b948      	cbnz	r0, 800ec28 <__smakebuf_r+0x44>
 800ec14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec18:	059a      	lsls	r2, r3, #22
 800ec1a:	d4ef      	bmi.n	800ebfc <__smakebuf_r+0x18>
 800ec1c:	f023 0303 	bic.w	r3, r3, #3
 800ec20:	f043 0302 	orr.w	r3, r3, #2
 800ec24:	81a3      	strh	r3, [r4, #12]
 800ec26:	e7e3      	b.n	800ebf0 <__smakebuf_r+0xc>
 800ec28:	4b0d      	ldr	r3, [pc, #52]	; (800ec60 <__smakebuf_r+0x7c>)
 800ec2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	6020      	str	r0, [r4, #0]
 800ec30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec34:	81a3      	strh	r3, [r4, #12]
 800ec36:	9b00      	ldr	r3, [sp, #0]
 800ec38:	6163      	str	r3, [r4, #20]
 800ec3a:	9b01      	ldr	r3, [sp, #4]
 800ec3c:	6120      	str	r0, [r4, #16]
 800ec3e:	b15b      	cbz	r3, 800ec58 <__smakebuf_r+0x74>
 800ec40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec44:	4630      	mov	r0, r6
 800ec46:	f000 f87b 	bl	800ed40 <_isatty_r>
 800ec4a:	b128      	cbz	r0, 800ec58 <__smakebuf_r+0x74>
 800ec4c:	89a3      	ldrh	r3, [r4, #12]
 800ec4e:	f023 0303 	bic.w	r3, r3, #3
 800ec52:	f043 0301 	orr.w	r3, r3, #1
 800ec56:	81a3      	strh	r3, [r4, #12]
 800ec58:	89a0      	ldrh	r0, [r4, #12]
 800ec5a:	4305      	orrs	r5, r0
 800ec5c:	81a5      	strh	r5, [r4, #12]
 800ec5e:	e7cd      	b.n	800ebfc <__smakebuf_r+0x18>
 800ec60:	0800dd51 	.word	0x0800dd51

0800ec64 <memmove>:
 800ec64:	4288      	cmp	r0, r1
 800ec66:	b510      	push	{r4, lr}
 800ec68:	eb01 0402 	add.w	r4, r1, r2
 800ec6c:	d902      	bls.n	800ec74 <memmove+0x10>
 800ec6e:	4284      	cmp	r4, r0
 800ec70:	4623      	mov	r3, r4
 800ec72:	d807      	bhi.n	800ec84 <memmove+0x20>
 800ec74:	1e43      	subs	r3, r0, #1
 800ec76:	42a1      	cmp	r1, r4
 800ec78:	d008      	beq.n	800ec8c <memmove+0x28>
 800ec7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec82:	e7f8      	b.n	800ec76 <memmove+0x12>
 800ec84:	4402      	add	r2, r0
 800ec86:	4601      	mov	r1, r0
 800ec88:	428a      	cmp	r2, r1
 800ec8a:	d100      	bne.n	800ec8e <memmove+0x2a>
 800ec8c:	bd10      	pop	{r4, pc}
 800ec8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec96:	e7f7      	b.n	800ec88 <memmove+0x24>

0800ec98 <_realloc_r>:
 800ec98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec9c:	4680      	mov	r8, r0
 800ec9e:	4614      	mov	r4, r2
 800eca0:	460e      	mov	r6, r1
 800eca2:	b921      	cbnz	r1, 800ecae <_realloc_r+0x16>
 800eca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eca8:	4611      	mov	r1, r2
 800ecaa:	f7fe bf23 	b.w	800daf4 <_malloc_r>
 800ecae:	b92a      	cbnz	r2, 800ecbc <_realloc_r+0x24>
 800ecb0:	f7fe feb4 	bl	800da1c <_free_r>
 800ecb4:	4625      	mov	r5, r4
 800ecb6:	4628      	mov	r0, r5
 800ecb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecbc:	f000 f850 	bl	800ed60 <_malloc_usable_size_r>
 800ecc0:	4284      	cmp	r4, r0
 800ecc2:	4607      	mov	r7, r0
 800ecc4:	d802      	bhi.n	800eccc <_realloc_r+0x34>
 800ecc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ecca:	d812      	bhi.n	800ecf2 <_realloc_r+0x5a>
 800eccc:	4621      	mov	r1, r4
 800ecce:	4640      	mov	r0, r8
 800ecd0:	f7fe ff10 	bl	800daf4 <_malloc_r>
 800ecd4:	4605      	mov	r5, r0
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d0ed      	beq.n	800ecb6 <_realloc_r+0x1e>
 800ecda:	42bc      	cmp	r4, r7
 800ecdc:	4622      	mov	r2, r4
 800ecde:	4631      	mov	r1, r6
 800ece0:	bf28      	it	cs
 800ece2:	463a      	movcs	r2, r7
 800ece4:	f7fe fe6e 	bl	800d9c4 <memcpy>
 800ece8:	4631      	mov	r1, r6
 800ecea:	4640      	mov	r0, r8
 800ecec:	f7fe fe96 	bl	800da1c <_free_r>
 800ecf0:	e7e1      	b.n	800ecb6 <_realloc_r+0x1e>
 800ecf2:	4635      	mov	r5, r6
 800ecf4:	e7df      	b.n	800ecb6 <_realloc_r+0x1e>
	...

0800ecf8 <_read_r>:
 800ecf8:	b538      	push	{r3, r4, r5, lr}
 800ecfa:	4d07      	ldr	r5, [pc, #28]	; (800ed18 <_read_r+0x20>)
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	4608      	mov	r0, r1
 800ed00:	4611      	mov	r1, r2
 800ed02:	2200      	movs	r2, #0
 800ed04:	602a      	str	r2, [r5, #0]
 800ed06:	461a      	mov	r2, r3
 800ed08:	f7f1 ff83 	bl	8000c12 <_read>
 800ed0c:	1c43      	adds	r3, r0, #1
 800ed0e:	d102      	bne.n	800ed16 <_read_r+0x1e>
 800ed10:	682b      	ldr	r3, [r5, #0]
 800ed12:	b103      	cbz	r3, 800ed16 <_read_r+0x1e>
 800ed14:	6023      	str	r3, [r4, #0]
 800ed16:	bd38      	pop	{r3, r4, r5, pc}
 800ed18:	200019c4 	.word	0x200019c4

0800ed1c <_fstat_r>:
 800ed1c:	b538      	push	{r3, r4, r5, lr}
 800ed1e:	4d07      	ldr	r5, [pc, #28]	; (800ed3c <_fstat_r+0x20>)
 800ed20:	2300      	movs	r3, #0
 800ed22:	4604      	mov	r4, r0
 800ed24:	4608      	mov	r0, r1
 800ed26:	4611      	mov	r1, r2
 800ed28:	602b      	str	r3, [r5, #0]
 800ed2a:	f7f1 ff9b 	bl	8000c64 <_fstat>
 800ed2e:	1c43      	adds	r3, r0, #1
 800ed30:	d102      	bne.n	800ed38 <_fstat_r+0x1c>
 800ed32:	682b      	ldr	r3, [r5, #0]
 800ed34:	b103      	cbz	r3, 800ed38 <_fstat_r+0x1c>
 800ed36:	6023      	str	r3, [r4, #0]
 800ed38:	bd38      	pop	{r3, r4, r5, pc}
 800ed3a:	bf00      	nop
 800ed3c:	200019c4 	.word	0x200019c4

0800ed40 <_isatty_r>:
 800ed40:	b538      	push	{r3, r4, r5, lr}
 800ed42:	4d06      	ldr	r5, [pc, #24]	; (800ed5c <_isatty_r+0x1c>)
 800ed44:	2300      	movs	r3, #0
 800ed46:	4604      	mov	r4, r0
 800ed48:	4608      	mov	r0, r1
 800ed4a:	602b      	str	r3, [r5, #0]
 800ed4c:	f7f1 ff9a 	bl	8000c84 <_isatty>
 800ed50:	1c43      	adds	r3, r0, #1
 800ed52:	d102      	bne.n	800ed5a <_isatty_r+0x1a>
 800ed54:	682b      	ldr	r3, [r5, #0]
 800ed56:	b103      	cbz	r3, 800ed5a <_isatty_r+0x1a>
 800ed58:	6023      	str	r3, [r4, #0]
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}
 800ed5c:	200019c4 	.word	0x200019c4

0800ed60 <_malloc_usable_size_r>:
 800ed60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed64:	1f18      	subs	r0, r3, #4
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	bfbc      	itt	lt
 800ed6a:	580b      	ldrlt	r3, [r1, r0]
 800ed6c:	18c0      	addlt	r0, r0, r3
 800ed6e:	4770      	bx	lr

0800ed70 <_init>:
 800ed70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed72:	bf00      	nop
 800ed74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed76:	bc08      	pop	{r3}
 800ed78:	469e      	mov	lr, r3
 800ed7a:	4770      	bx	lr

0800ed7c <_fini>:
 800ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7e:	bf00      	nop
 800ed80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed82:	bc08      	pop	{r3}
 800ed84:	469e      	mov	lr, r3
 800ed86:	4770      	bx	lr
