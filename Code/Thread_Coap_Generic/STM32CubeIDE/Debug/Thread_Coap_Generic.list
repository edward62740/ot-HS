
Thread_Coap_Generic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf20  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a4  0800d060  0800d060  0001d060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da04  0800da04  0001da04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800da0c  0800da0c  0001da0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800da10  0800da10  0001da10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000008  0800da14  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000090  0800da9c  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001760  200000a4  0800daad  000200a4  2**2
                  ALLOC
  9 ._user_heap_stack 00002804  20001804  0800daad  00021804  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 14 .debug_line   00031243  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000314b9  00000000  00000000  00051314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000066df  00000000  00000000  000827cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029f0  00000000  00000000  00088eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111825  00000000  00000000  0008b8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002748  00000000  00000000  0019d0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000303ec  00000000  00000000  0019f810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001cfbfc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b534  00000000  00000000  001cfc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a4 	.word	0x200000a4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d048 	.word	0x0800d048

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000a8 	.word	0x200000a8
 800017c:	0800d048 	.word	0x0800d048

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000544:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000546:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000548:	3304      	adds	r3, #4

0800054a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800054e:	d3f9      	bcc.n	8000544 <CopyDataInit>
  bx lr
 8000550:	4770      	bx	lr

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000552:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000554:	3004      	adds	r0, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000556:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>
  bx lr
 800055a:	4770      	bx	lr

0800055c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800055e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000560:	f003 f952 	bl	8003808 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <LoopForever+0x8>)
 8000566:	490c      	ldr	r1, [pc, #48]	; (8000598 <LoopForever+0xc>)
 8000568:	4a0c      	ldr	r2, [pc, #48]	; (800059c <LoopForever+0x10>)
 800056a:	2300      	movs	r3, #0
 800056c:	f7ff ffed 	bl	800054a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <LoopForever+0x14>)
 8000572:	490c      	ldr	r1, [pc, #48]	; (80005a4 <LoopForever+0x18>)
 8000574:	2300      	movs	r3, #0
 8000576:	f7ff ffee 	bl	8000556 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800057a:	480b      	ldr	r0, [pc, #44]	; (80005a8 <LoopForever+0x1c>)
 800057c:	490b      	ldr	r1, [pc, #44]	; (80005ac <LoopForever+0x20>)
 800057e:	2300      	movs	r3, #0
 8000580:	f7ff ffe9 	bl	8000556 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000584:	f00b fb7c 	bl	800bc80 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000588:	f002 fbb2 	bl	8002cf0 <main>

0800058c <LoopForever>:

LoopForever:
  b LoopForever
 800058c:	e7fe      	b.n	800058c <LoopForever>
 800058e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000590:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 8000594:	20000008 	.word	0x20000008
 8000598:	20000090 	.word	0x20000090
 800059c:	0800da14 	.word	0x0800da14
  INIT_BSS _sbss, _ebss
 80005a0:	200000a4 	.word	0x200000a4
 80005a4:	20001804 	.word	0x20001804
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80005a8:	200300e8 	.word	0x200300e8
 80005ac:	20030c6a 	.word	0x20030c6a

080005b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC1_IRQHandler>

080005b2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b086      	sub	sp, #24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	60f8      	str	r0, [r7, #12]
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	e00a      	b.n	80005da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005c4:	f3af 8000 	nop.w
 80005c8:	4601      	mov	r1, r0
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	60ba      	str	r2, [r7, #8]
 80005d0:	b2ca      	uxtb	r2, r1
 80005d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	3301      	adds	r3, #1
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	429a      	cmp	r2, r3
 80005e0:	dbf0      	blt.n	80005c4 <_read+0x12>
  }

  return len;
 80005e2:	687b      	ldr	r3, [r7, #4]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000614:	605a      	str	r2, [r3, #4]
  return 0;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <_isatty>:

int _isatty(int file)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800062c:	2301      	movs	r3, #1
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800065c:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <_sbrk+0x5c>)
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <_sbrk+0x60>)
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d102      	bne.n	8000676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <_sbrk+0x64>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <_sbrk+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	693a      	ldr	r2, [r7, #16]
 8000680:	429a      	cmp	r2, r3
 8000682:	d207      	bcs.n	8000694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000684:	f00b faf6 	bl	800bc74 <__errno>
 8000688:	4603      	mov	r3, r0
 800068a:	220c      	movs	r2, #12
 800068c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	e009      	b.n	80006a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <_sbrk+0x64>)
 80006a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20024000 	.word	0x20024000
 80006b4:	00002000 	.word	0x00002000
 80006b8:	200000c0 	.word	0x200000c0
 80006bc:	20001808 	.word	0x20001808

080006c0 <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 80006cc:	2300      	movs	r3, #0
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f008 fdd6 	bl	8009284 <otCoapSendResponseWithParameters>
 80006d8:	4603      	mov	r3, r0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 80006ea:	f000 f9a9 	bl	8000a40 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 80006ee:	4811      	ldr	r0, [pc, #68]	; (8000734 <APP_THREAD_Init+0x50>)
 80006f0:	f000 fb3a 	bl	8000d68 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 80006f4:	2101      	movs	r1, #1
 80006f6:	2002      	movs	r0, #2
 80006f8:	f00a fbce 	bl	800ae98 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 80006fc:	f000 fc5a 	bl	8000fb4 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8000700:	f000 fc40 	bl	8000f84 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000704:	f009 fda8 	bl	800a258 <SHCI_C2_THREAD_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
 800070c:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <APP_THREAD_Init+0x54>)
 800070e:	2100      	movs	r1, #0
 8000710:	2001      	movs	r0, #1
 8000712:	f00a fced 	bl	800b0f0 <UTIL_SEQ_RegTask>
  /* USER CODE BEGIN INIT TASKS */
  //UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_MSG_BUTTON, UTIL_SEQ_RFU, APP_THREAD_SendCoapMsg);
  /* USER CODE END INIT TASKS */

  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 8000716:	f000 f8cb 	bl	80008b0 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &TimerID, hw_ts_SingleShot, APP_THREAD_TimingElapsed);
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <APP_THREAD_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	4908      	ldr	r1, [pc, #32]	; (8000740 <APP_THREAD_Init+0x5c>)
 8000720:	2000      	movs	r0, #0
 8000722:	f001 ffdd 	bl	80026e0 <HW_TS_Create>

  APP_THREAD_InitPayloadWrite();
 8000726:	f000 fac5 	bl	8000cb4 <APP_THREAD_InitPayloadWrite>
  /* USER CODE END APP_THREAD_INIT_2 */
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200300e8 	.word	0x200300e8
 8000738:	08001049 	.word	0x08001049
 800073c:	08000ce9 	.word	0x08000ce9
 8000740:	200002de 	.word	0x200002de

08000744 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b16      	cmp	r3, #22
 8000752:	f200 8081 	bhi.w	8000858 <APP_THREAD_Error+0x114>
 8000756:	a201      	add	r2, pc, #4	; (adr r2, 800075c <APP_THREAD_Error+0x18>)
 8000758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075c:	080007b9 	.word	0x080007b9
 8000760:	080007c3 	.word	0x080007c3
 8000764:	080007cd 	.word	0x080007cd
 8000768:	080007d7 	.word	0x080007d7
 800076c:	080007e1 	.word	0x080007e1
 8000770:	080007eb 	.word	0x080007eb
 8000774:	080007f5 	.word	0x080007f5
 8000778:	080007ff 	.word	0x080007ff
 800077c:	08000813 	.word	0x08000813
 8000780:	0800081d 	.word	0x0800081d
 8000784:	08000827 	.word	0x08000827
 8000788:	08000831 	.word	0x08000831
 800078c:	08000859 	.word	0x08000859
 8000790:	0800083b 	.word	0x0800083b
 8000794:	08000845 	.word	0x08000845
 8000798:	08000859 	.word	0x08000859
 800079c:	08000859 	.word	0x08000859
 80007a0:	08000859 	.word	0x08000859
 80007a4:	08000859 	.word	0x08000859
 80007a8:	08000859 	.word	0x08000859
 80007ac:	0800084f 	.word	0x0800084f
 80007b0:	08000859 	.word	0x08000859
 80007b4:	08000809 	.word	0x08000809
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 80007b8:	6839      	ldr	r1, [r7, #0]
 80007ba:	482c      	ldr	r0, [pc, #176]	; (800086c <APP_THREAD_Error+0x128>)
 80007bc:	f000 f92c 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 80007c0:	e04f      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 80007c2:	6839      	ldr	r1, [r7, #0]
 80007c4:	482a      	ldr	r0, [pc, #168]	; (8000870 <APP_THREAD_Error+0x12c>)
 80007c6:	f000 f927 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 80007ca:	e04a      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 80007cc:	6839      	ldr	r1, [r7, #0]
 80007ce:	4829      	ldr	r0, [pc, #164]	; (8000874 <APP_THREAD_Error+0x130>)
 80007d0:	f000 f922 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 80007d4:	e045      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 80007d6:	6839      	ldr	r1, [r7, #0]
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <APP_THREAD_Error+0x134>)
 80007da:	f000 f91d 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 80007de:	e040      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 80007e0:	6839      	ldr	r1, [r7, #0]
 80007e2:	4826      	ldr	r0, [pc, #152]	; (800087c <APP_THREAD_Error+0x138>)
 80007e4:	f000 f918 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 80007e8:	e03b      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 80007ea:	6839      	ldr	r1, [r7, #0]
 80007ec:	4824      	ldr	r0, [pc, #144]	; (8000880 <APP_THREAD_Error+0x13c>)
 80007ee:	f000 f913 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 80007f2:	e036      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 80007f4:	6839      	ldr	r1, [r7, #0]
 80007f6:	4823      	ldr	r0, [pc, #140]	; (8000884 <APP_THREAD_Error+0x140>)
 80007f8:	f000 f90e 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 80007fc:	e031      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_NETWORK_KEY :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ",ErrCode);
 80007fe:	6839      	ldr	r1, [r7, #0]
 8000800:	4821      	ldr	r0, [pc, #132]	; (8000888 <APP_THREAD_Error+0x144>)
 8000802:	f000 f909 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 8000806:	e02c      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8000808:	6839      	ldr	r1, [r7, #0]
 800080a:	4820      	ldr	r0, [pc, #128]	; (800088c <APP_THREAD_Error+0x148>)
 800080c:	f000 f904 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 8000810:	e027      	b.n	8000862 <APP_THREAD_Error+0x11e>
  /* USER CODE BEGIN APP_THREAD_Error_2 */
  case ERR_THREAD_COAP_START :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ",ErrCode);
 8000812:	6839      	ldr	r1, [r7, #0]
 8000814:	481e      	ldr	r0, [pc, #120]	; (8000890 <APP_THREAD_Error+0x14c>)
 8000816:	f000 f8ff 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 800081a:	e022      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_ADD_RESSOURCE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",ErrCode);
 800081c:	6839      	ldr	r1, [r7, #0]
 800081e:	481d      	ldr	r0, [pc, #116]	; (8000894 <APP_THREAD_Error+0x150>)
 8000820:	f000 f8fa 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 8000824:	e01d      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MESSAGE_READ :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ",ErrCode);
 8000826:	6839      	ldr	r1, [r7, #0]
 8000828:	481b      	ldr	r0, [pc, #108]	; (8000898 <APP_THREAD_Error+0x154>)
 800082a:	f000 f8f5 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 800082e:	e018      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_RESPONSE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",ErrCode);
 8000830:	6839      	ldr	r1, [r7, #0]
 8000832:	481a      	ldr	r0, [pc, #104]	; (800089c <APP_THREAD_Error+0x158>)
 8000834:	f000 f8f0 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 8000838:	e013      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_APPEND :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ",ErrCode);
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	4818      	ldr	r0, [pc, #96]	; (80008a0 <APP_THREAD_Error+0x15c>)
 800083e:	f000 f8eb 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 8000842:	e00e      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_REQUEST :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ",ErrCode);
 8000844:	6839      	ldr	r1, [r7, #0]
 8000846:	4817      	ldr	r0, [pc, #92]	; (80008a4 <APP_THREAD_Error+0x160>)
 8000848:	f000 f8e6 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 800084c:	e009      	b.n	8000862 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MSG_COMPARE_FAILED:
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",ErrCode);
 800084e:	6839      	ldr	r1, [r7, #0]
 8000850:	4815      	ldr	r0, [pc, #84]	; (80008a8 <APP_THREAD_Error+0x164>)
 8000852:	f000 f8e1 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 8000856:	e004      	b.n	8000862 <APP_THREAD_Error+0x11e>
  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8000858:	2100      	movs	r1, #0
 800085a:	4814      	ldr	r0, [pc, #80]	; (80008ac <APP_THREAD_Error+0x168>)
 800085c:	f000 f8dc 	bl	8000a18 <APP_THREAD_TraceError>
    break;
 8000860:	bf00      	nop
  }
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	0800d078 	.word	0x0800d078
 8000870:	0800d09c 	.word	0x0800d09c
 8000874:	0800d0c0 	.word	0x0800d0c0
 8000878:	0800d0e0 	.word	0x0800d0e0
 800087c:	0800d100 	.word	0x0800d100
 8000880:	0800d120 	.word	0x0800d120
 8000884:	0800d13c 	.word	0x0800d13c
 8000888:	0800d168 	.word	0x0800d168
 800088c:	0800d18c 	.word	0x0800d18c
 8000890:	0800d1b0 	.word	0x0800d1b0
 8000894:	0800d1d0 	.word	0x0800d1d0
 8000898:	0800d1f8 	.word	0x0800d1f8
 800089c:	0800d21c 	.word	0x0800d21c
 80008a0:	0800d244 	.word	0x0800d244
 80008a4:	0800d264 	.word	0x0800d264
 80008a8:	0800d28c 	.word	0x0800d28c
 80008ac:	0800d2b4 	.word	0x0800d2b4

080008b0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
  otError error;
  otNetworkKey networkKey = {{0xb3, 0x08, 0x8e, 0x0c, 0x4c, 0x97, 0x70, 0xa9,
 80008b6:	4b42      	ldr	r3, [pc, #264]	; (80009c0 <APP_THREAD_DeviceConfig+0x110>)
 80008b8:	1d3c      	adds	r4, r7, #4
 80008ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          0xca, 0x86, 0x85, 0xab, 0x99, 0xda, 0xc9, 0x51}};

  error = otInstanceErasePersistentInfo(NULL);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f008 fd99 	bl	80093f8 <otInstanceErasePersistentInfo>
 80008c6:	4603      	mov	r3, r0
 80008c8:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 80008ca:	7dfb      	ldrb	r3, [r7, #23]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d004      	beq.n	80008da <APP_THREAD_DeviceConfig+0x2a>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 80008d0:	7dfb      	ldrb	r3, [r7, #23]
 80008d2:	4619      	mov	r1, r3
 80008d4:	2006      	movs	r0, #6
 80008d6:	f7ff ff35 	bl	8000744 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 80008da:	2000      	movs	r0, #0
 80008dc:	f008 fd30 	bl	8009340 <otInstanceFinalize>
  otInstanceInitSingle();
 80008e0:	f008 fd07 	bl	80092f2 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 80008e4:	2200      	movs	r2, #0
 80008e6:	4937      	ldr	r1, [pc, #220]	; (80009c4 <APP_THREAD_DeviceConfig+0x114>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f008 fd4f 	bl	800938c <otSetStateChangedCallback>
 80008ee:	4603      	mov	r3, r0
 80008f0:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 80008f2:	7dfb      	ldrb	r3, [r7, #23]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d004      	beq.n	8000902 <APP_THREAD_DeviceConfig+0x52>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 80008f8:	7dfb      	ldrb	r3, [r7, #23]
 80008fa:	4619      	mov	r1, r3
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff ff21 	bl	8000744 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8000902:	210e      	movs	r1, #14
 8000904:	2000      	movs	r0, #0
 8000906:	f008 fdd0 	bl	80094aa <otLinkSetChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d004      	beq.n	800091e <APP_THREAD_DeviceConfig+0x6e>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	4619      	mov	r1, r3
 8000918:	2002      	movs	r0, #2
 800091a:	f7ff ff13 	bl	8000744 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 800091e:	f241 1111 	movw	r1, #4369	; 0x1111
 8000922:	2000      	movs	r0, #0
 8000924:	f008 fdf1 	bl	800950a <otLinkSetPanId>
 8000928:	4603      	mov	r3, r0
 800092a:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 800092c:	7dfb      	ldrb	r3, [r7, #23]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d004      	beq.n	800093c <APP_THREAD_DeviceConfig+0x8c>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	4619      	mov	r1, r3
 8000936:	2003      	movs	r0, #3
 8000938:	f7ff ff04 	bl	8000744 <APP_THREAD_Error>
  }
  error = otThreadSetNetworkKey(NULL, &networkKey);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	2000      	movs	r0, #0
 8000942:	f009 fec7 	bl	800a6d4 <otThreadSetNetworkKey>
 8000946:	4603      	mov	r3, r0
 8000948:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 800094a:	7dfb      	ldrb	r3, [r7, #23]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d004      	beq.n	800095a <APP_THREAD_DeviceConfig+0xaa>
  {
    APP_THREAD_Error(ERR_THREAD_SET_NETWORK_KEY,error);
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	4619      	mov	r1, r3
 8000954:	2007      	movs	r0, #7
 8000956:	f7ff fef5 	bl	8000744 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 800095a:	2101      	movs	r1, #1
 800095c:	2000      	movs	r0, #0
 800095e:	f008 fd74 	bl	800944a <otIp6SetEnabled>
 8000962:	4603      	mov	r3, r0
 8000964:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000966:	7dfb      	ldrb	r3, [r7, #23]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d004      	beq.n	8000976 <APP_THREAD_DeviceConfig+0xc6>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 800096c:	7dfb      	ldrb	r3, [r7, #23]
 800096e:	4619      	mov	r1, r3
 8000970:	2004      	movs	r0, #4
 8000972:	f7ff fee7 	bl	8000744 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8000976:	2101      	movs	r1, #1
 8000978:	2000      	movs	r0, #0
 800097a:	f009 fe7b 	bl	800a674 <otThreadSetEnabled>
 800097e:	4603      	mov	r3, r0
 8000980:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000982:	7dfb      	ldrb	r3, [r7, #23]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d004      	beq.n	8000992 <APP_THREAD_DeviceConfig+0xe2>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	4619      	mov	r1, r3
 800098c:	2005      	movs	r0, #5
 800098e:	f7ff fed9 	bl	8000744 <APP_THREAD_Error>
  }
  /* USER CODE BEGIN DEVICECONFIG */
  /* Start the COAP server */
  error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8000992:	f241 6133 	movw	r1, #5683	; 0x1633
 8000996:	2000      	movs	r0, #0
 8000998:	f008 fc18 	bl	80091cc <otCoapStart>
 800099c:	4603      	mov	r3, r0
 800099e:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 80009a0:	7dfb      	ldrb	r3, [r7, #23]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d004      	beq.n	80009b0 <APP_THREAD_DeviceConfig+0x100>
  {
    APP_THREAD_Error(ERR_THREAD_COAP_START,error);
 80009a6:	7dfb      	ldrb	r3, [r7, #23]
 80009a8:	4619      	mov	r1, r3
 80009aa:	2008      	movs	r0, #8
 80009ac:	f7ff feca 	bl	8000744 <APP_THREAD_Error>
  }
  /* Add COAP resources */
  otCoapAddResource(NULL, &OT_Ressource);
 80009b0:	4905      	ldr	r1, [pc, #20]	; (80009c8 <APP_THREAD_DeviceConfig+0x118>)
 80009b2:	2000      	movs	r0, #0
 80009b4:	f008 fc3a 	bl	800922c <otCoapAddResource>

  /* USER CODE END DEVICECONFIG */
}
 80009b8:	bf00      	nop
 80009ba:	371c      	adds	r7, #28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	0800d2c4 	.word	0x0800d2c4
 80009c4:	080009cd 	.word	0x080009cd
 80009c8:	20000008 	.word	0x20000008

080009cc <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */
  
  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d013      	beq.n	8000a08 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 80009e0:	2000      	movs	r0, #0
 80009e2:	f009 fea6 	bl	800a732 <otThreadGetDeviceRole>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d80f      	bhi.n	8000a0c <APP_THREAD_StateNotif+0x40>
 80009ec:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <APP_THREAD_StateNotif+0x28>)
 80009ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f2:	bf00      	nop
 80009f4:	08000a0d 	.word	0x08000a0d
 80009f8:	08000a0d 	.word	0x08000a0d
 80009fc:	08000a0d 	.word	0x08000a0d
 8000a00:	08000a0d 	.word	0x08000a0d
 8000a04:	08000a0d 	.word	0x08000a0d
    default:
       /* USER CODE BEGIN DEFAULT */
       /* USER CODE END DEFAULT */
       break;
    }
  }
 8000a08:	bf00      	nop
 8000a0a:	e000      	b.n	8000a0e <APP_THREAD_StateNotif+0x42>
       break;
 8000a0c:	bf00      	nop
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop

08000a18 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <APP_THREAD_TraceError+0x24>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f002 fe4b 	bl	80036c8 <logApplication>

  /* USER CODE END TRACE_ERROR */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	0800d2d4 	.word	0x0800d2d4

08000a40 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8000a4a:	6978      	ldr	r0, [r7, #20]
 8000a4c:	f009 fc30 	bl	800a2b0 <SHCI_GetWirelessFwInfo>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d004      	beq.n	8000a60 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8000a56:	2101      	movs	r1, #1
 8000a58:	2016      	movs	r0, #22
 8000a5a:	f7ff fe73 	bl	8000744 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8000a5e:	e07c      	b.n	8000b5a <APP_THREAD_CheckWirelessFirmwareInfo+0x11a>
    APP_DBG("*****************WIRELESS COPROCESSOR FW*******************");
 8000a60:	4a40      	ldr	r2, [pc, #256]	; (8000b64 <APP_THREAD_CheckWirelessFirmwareInfo+0x124>)
 8000a62:	2101      	movs	r1, #1
 8000a64:	2000      	movs	r0, #0
 8000a66:	f002 fe2f 	bl	80036c8 <logApplication>
    APP_DBG("STACK VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	461a      	mov	r2, r3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	789b      	ldrb	r3, [r3, #2]
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	9200      	str	r2, [sp, #0]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	4a39      	ldr	r2, [pc, #228]	; (8000b68 <APP_THREAD_CheckWirelessFirmwareInfo+0x128>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	2000      	movs	r0, #0
 8000a86:	f002 fe1f 	bl	80036c8 <logApplication>
    APP_DBG("Version release type: %d", p_wireless_info->VersionReleaseType);
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	791b      	ldrb	r3, [r3, #4]
 8000a8e:	4a37      	ldr	r2, [pc, #220]	; (8000b6c <APP_THREAD_CheckWirelessFirmwareInfo+0x12c>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	2000      	movs	r0, #0
 8000a94:	f002 fe18 	bl	80036c8 <logApplication>
    APP_DBG("Version branch type: %d", p_wireless_info->VersionBranch);
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	78db      	ldrb	r3, [r3, #3]
 8000a9c:	4a34      	ldr	r2, [pc, #208]	; (8000b70 <APP_THREAD_CheckWirelessFirmwareInfo+0x130>)
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f002 fe11 	bl	80036c8 <logApplication>
    APP_DBG("FUS VERSION ID = %d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	7a9b      	ldrb	r3, [r3, #10]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	7adb      	ldrb	r3, [r3, #11]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	7b1b      	ldrb	r3, [r3, #12]
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	9200      	str	r2, [sp, #0]
 8000aba:	460b      	mov	r3, r1
 8000abc:	4a2d      	ldr	r2, [pc, #180]	; (8000b74 <APP_THREAD_CheckWirelessFirmwareInfo+0x134>)
 8000abe:	2101      	movs	r1, #1
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f002 fe01 	bl	80036c8 <logApplication>
    APP_DBG("Stack type: %d", p_wireless_info->StackType);
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	7a5b      	ldrb	r3, [r3, #9]
 8000aca:	4a2b      	ldr	r2, [pc, #172]	; (8000b78 <APP_THREAD_CheckWirelessFirmwareInfo+0x138>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f002 fdfa 	bl	80036c8 <logApplication>
    APP_DBG("MEMSIZE flash: %d", p_wireless_info->MemorySizeFlash);
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	7a1b      	ldrb	r3, [r3, #8]
 8000ad8:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <APP_THREAD_CheckWirelessFirmwareInfo+0x13c>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	2000      	movs	r0, #0
 8000ade:	f002 fdf3 	bl	80036c8 <logApplication>
    APP_DBG("MEMSIZE sram1: %d", p_wireless_info->MemorySizeSram1);
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	79db      	ldrb	r3, [r3, #7]
 8000ae6:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <APP_THREAD_CheckWirelessFirmwareInfo+0x140>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	2000      	movs	r0, #0
 8000aec:	f002 fdec 	bl	80036c8 <logApplication>
    APP_DBG("MEMSIZE sram2a: %d", p_wireless_info->MemorySizeSram2A);
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	799b      	ldrb	r3, [r3, #6]
 8000af4:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <APP_THREAD_CheckWirelessFirmwareInfo+0x144>)
 8000af6:	2101      	movs	r1, #1
 8000af8:	2000      	movs	r0, #0
 8000afa:	f002 fde5 	bl	80036c8 <logApplication>
    APP_DBG("MEMSIZE sram2b: %d", p_wireless_info->MemorySizeSram2B);
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	795b      	ldrb	r3, [r3, #5]
 8000b02:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <APP_THREAD_CheckWirelessFirmwareInfo+0x148>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	2000      	movs	r0, #0
 8000b08:	f002 fdde 	bl	80036c8 <logApplication>
    switch(p_wireless_info->StackType)
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	7a5b      	ldrb	r3, [r3, #9]
 8000b10:	2b50      	cmp	r3, #80	; 0x50
 8000b12:	d012      	beq.n	8000b3a <APP_THREAD_CheckWirelessFirmwareInfo+0xfa>
 8000b14:	2b50      	cmp	r3, #80	; 0x50
 8000b16:	dc16      	bgt.n	8000b46 <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
 8000b18:	2b10      	cmp	r3, #16
 8000b1a:	d002      	beq.n	8000b22 <APP_THREAD_CheckWirelessFirmwareInfo+0xe2>
 8000b1c:	2b11      	cmp	r3, #17
 8000b1e:	d006      	beq.n	8000b2e <APP_THREAD_CheckWirelessFirmwareInfo+0xee>
 8000b20:	e011      	b.n	8000b46 <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
      APP_DBG("FW Type : Thread FTD");
 8000b22:	4a1a      	ldr	r2, [pc, #104]	; (8000b8c <APP_THREAD_CheckWirelessFirmwareInfo+0x14c>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	2000      	movs	r0, #0
 8000b28:	f002 fdce 	bl	80036c8 <logApplication>
      break;
 8000b2c:	e010      	b.n	8000b50 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Thread MTD");
 8000b2e:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <APP_THREAD_CheckWirelessFirmwareInfo+0x150>)
 8000b30:	2101      	movs	r1, #1
 8000b32:	2000      	movs	r0, #0
 8000b34:	f002 fdc8 	bl	80036c8 <logApplication>
      break;
 8000b38:	e00a      	b.n	8000b50 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <APP_THREAD_CheckWirelessFirmwareInfo+0x154>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f002 fdc2 	bl	80036c8 <logApplication>
      break;
 8000b44:	e004      	b.n	8000b50 <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8000b46:	2101      	movs	r1, #1
 8000b48:	2016      	movs	r0, #22
 8000b4a:	f7ff fdfb 	bl	8000744 <APP_THREAD_Error>
      break;
 8000b4e:	bf00      	nop
    APP_DBG("**********************************************************");
 8000b50:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <APP_THREAD_CheckWirelessFirmwareInfo+0x158>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	2000      	movs	r0, #0
 8000b56:	f002 fdb7 	bl	80036c8 <logApplication>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	0800d2f8 	.word	0x0800d2f8
 8000b68:	0800d334 	.word	0x0800d334
 8000b6c:	0800d350 	.word	0x0800d350
 8000b70:	0800d36c 	.word	0x0800d36c
 8000b74:	0800d384 	.word	0x0800d384
 8000b78:	0800d3a0 	.word	0x0800d3a0
 8000b7c:	0800d3b0 	.word	0x0800d3b0
 8000b80:	0800d3c4 	.word	0x0800d3c4
 8000b84:	0800d3d8 	.word	0x0800d3d8
 8000b88:	0800d3ec 	.word	0x0800d3ec
 8000b8c:	0800d400 	.word	0x0800d400
 8000b90:	0800d418 	.word	0x0800d418
 8000b94:	0800d430 	.word	0x0800d430
 8000b98:	0800d45c 	.word	0x0800d45c

08000b9c <APP_THREAD_CoapRequestHandler>:
 */
static void APP_THREAD_CoapRequestHandler(void                 * pContext,
                                          otMessage            * pMessage,
                                          const otMessageInfo  * pMessageInfo)

{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  static uint8_t flagToggle = FALSE;
  
  APP_DBG(" Received CoAP request (context = %s)",pContext);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4a1a      	ldr	r2, [pc, #104]	; (8000c14 <APP_THREAD_CoapRequestHandler+0x78>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f002 fd8a 	bl	80036c8 <logApplication>
  /* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
  if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &PayloadRead, sizeof(PayloadRead)) != sizeof(PayloadRead))
 8000bb4:	68b8      	ldr	r0, [r7, #8]
 8000bb6:	f008 fd05 	bl	80095c4 <otMessageGetOffset>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <APP_THREAD_CoapRequestHandler+0x7c>)
 8000bc2:	68b8      	ldr	r0, [r7, #8]
 8000bc4:	f008 fd2e 	bl	8009624 <otMessageRead>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d003      	beq.n	8000bd6 <APP_THREAD_CoapRequestHandler+0x3a>
  {
    APP_THREAD_Error(ERR_THREAD_MESSAGE_READ, 0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	200a      	movs	r0, #10
 8000bd2:	f7ff fdb7 	bl	8000744 <APP_THREAD_Error>
  }

  if (APP_THREAD_CheckMsgValidity() == true)
 8000bd6:	f000 f895 	bl	8000d04 <APP_THREAD_CheckMsgValidity>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00a      	beq.n	8000bf6 <APP_THREAD_CoapRequestHandler+0x5a>
  {
    if (flagToggle == FALSE)
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <APP_THREAD_CoapRequestHandler+0x80>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d103      	bne.n	8000bf0 <APP_THREAD_CoapRequestHandler+0x54>
    {

        flagToggle = TRUE;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <APP_THREAD_CoapRequestHandler+0x80>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	e002      	b.n	8000bf6 <APP_THREAD_CoapRequestHandler+0x5a>
    }
    else
    {

        flagToggle = FALSE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <APP_THREAD_CoapRequestHandler+0x80>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
    }
  }
  /* USER CODE END APP_THREAD_CoapRequestHandler */

  /* If Message is Confirmable, send response */
  if (otCoapMessageGetType(pMessage) == OT_COAP_TYPE_CONFIRMABLE)
 8000bf6:	68b8      	ldr	r0, [r7, #8]
 8000bf8:	f008 faba 	bl	8009170 <otCoapMessageGetType>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d103      	bne.n	8000c0a <APP_THREAD_CoapRequestHandler+0x6e>
  {
    APP_THREAD_CoapSendDataResponse(pMessage, pMessageInfo);
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	68b8      	ldr	r0, [r7, #8]
 8000c06:	f000 f80b 	bl	8000c20 <APP_THREAD_CoapSendDataResponse>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0800d580 	.word	0x0800d580
 8000c18:	200002dc 	.word	0x200002dc
 8000c1c:	200002df 	.word	0x200002df

08000c20 <APP_THREAD_CoapSendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponse(otMessage  * pMessage,
    const otMessageInfo * pMessageInfo)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG(" ********* APP_THREAD_CoapSendDataResponse ********* ");
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <APP_THREAD_CoapSendDataResponse+0x88>)
 8000c30:	2101      	movs	r1, #1
 8000c32:	2000      	movs	r0, #0
 8000c34:	f002 fd48 	bl	80036c8 <logApplication>

    pOT_MessageResponse = otCoapNewMessage(NULL, NULL);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f008 fa2c 	bl	8009098 <otCoapNewMessage>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <APP_THREAD_CoapSendDataResponse+0x8c>)
 8000c44:	6013      	str	r3, [r2, #0]
    if (pOT_MessageResponse == NULL)
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <APP_THREAD_CoapSendDataResponse+0x8c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d106      	bne.n	8000c5c <APP_THREAD_CoapSendDataResponse+0x3c>
    {
      APP_DBG("WARNING : pOT_MessageResponse = NULL ! -> exit now");
 8000c4e:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <APP_THREAD_CoapSendDataResponse+0x90>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	2000      	movs	r0, #0
 8000c54:	f002 fd38 	bl	80036c8 <logApplication>
      break;
 8000c58:	bf00      	nop
    {
      otMessageFree(pOT_MessageResponse);
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 8000c5a:	e020      	b.n	8000c9e <APP_THREAD_CoapSendDataResponse+0x7e>
    otCoapMessageInitResponse(pOT_MessageResponse,
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <APP_THREAD_CoapSendDataResponse+0x8c>)
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	2343      	movs	r3, #67	; 0x43
 8000c62:	2202      	movs	r2, #2
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	f008 fa45 	bl	80090f4 <otCoapMessageInitResponse>
    error = otCoapSendResponse(NULL, pOT_MessageResponse, pMessageInfo);
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <APP_THREAD_CoapSendDataResponse+0x8c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fd24 	bl	80006c0 <otCoapSendResponse>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_MessageResponse != NULL)
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00d      	beq.n	8000c9e <APP_THREAD_CoapSendDataResponse+0x7e>
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <APP_THREAD_CoapSendDataResponse+0x8c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d009      	beq.n	8000c9e <APP_THREAD_CoapSendDataResponse+0x7e>
      otMessageFree(pOT_MessageResponse);
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <APP_THREAD_CoapSendDataResponse+0x8c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f008 fc6b 	bl	800956a <otMessageFree>
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	4619      	mov	r1, r3
 8000c98:	200f      	movs	r0, #15
 8000c9a:	f7ff fd53 	bl	8000744 <APP_THREAD_Error>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	0800d5a8 	.word	0x0800d5a8
 8000cac:	200002d4 	.word	0x200002d4
 8000cb0:	0800d5e0 	.word	0x0800d5e0

08000cb4 <APP_THREAD_InitPayloadWrite>:
 * @brief Initialize CoAP write buffer.
 * @param  None
 * @retval None
 */
static void APP_THREAD_InitPayloadWrite(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	e006      	b.n	8000cce <APP_THREAD_InitPayloadWrite+0x1a>
  {
    PayloadWrite[i] = 0xFF;
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <APP_THREAD_InitPayloadWrite+0x30>)
 8000cc4:	21ff      	movs	r1, #255	; 0xff
 8000cc6:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d9f5      	bls.n	8000cc0 <APP_THREAD_InitPayloadWrite+0xc>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200002d8 	.word	0x200002d8

08000ce8 <APP_THREAD_TimingElapsed>:
      APP_THREAD_CoapDataRespHandler,
      NULL);
}

static void APP_THREAD_TimingElapsed(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  APP_DBG("--- APP_THREAD_TimingElapsed ---");
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <APP_THREAD_TimingElapsed+0x18>)
 8000cee:	2101      	movs	r1, #1
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f002 fce9 	bl	80036c8 <logApplication>
  UTIL_SEQ_SetEvt(EVENT_TIMER);
 8000cf6:	2008      	movs	r0, #8
 8000cf8:	f00a fa48 	bl	800b18c <UTIL_SEQ_SetEvt>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	0800d704 	.word	0x0800d704

08000d04 <APP_THREAD_CheckMsgValidity>:
 * @brief  Compare the message received versus the original message.
 * @param  None
 * @retval None
 */
static bool APP_THREAD_CheckMsgValidity(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  bool valid = true;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	71fb      	strb	r3, [r7, #7]
  uint32_t i;

  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	e00e      	b.n	8000d32 <APP_THREAD_CheckMsgValidity+0x2e>
  {
    if(PayloadRead[i] != PayloadWrite[i])
 8000d14:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <APP_THREAD_CheckMsgValidity+0x58>)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	4910      	ldr	r1, [pc, #64]	; (8000d60 <APP_THREAD_CheckMsgValidity+0x5c>)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	440b      	add	r3, r1
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d001      	beq.n	8000d2c <APP_THREAD_CheckMsgValidity+0x28>
    {
      valid = false;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  for(i = 0; i < COAP_PAYLOAD_LENGTH; i++)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d9ed      	bls.n	8000d14 <APP_THREAD_CheckMsgValidity+0x10>
    }
  }

  if(valid == true)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <APP_THREAD_CheckMsgValidity+0x46>
  {
    APP_DBG("PAYLOAD Comparison OK!");
 8000d3e:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <APP_THREAD_CheckMsgValidity+0x60>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	2000      	movs	r0, #0
 8000d44:	f002 fcc0 	bl	80036c8 <logApplication>
 8000d48:	e003      	b.n	8000d52 <APP_THREAD_CheckMsgValidity+0x4e>
  }else
  {
    APP_THREAD_Error(ERR_THREAD_MSG_COMPARE_FAILED, 0);
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2014      	movs	r0, #20
 8000d4e:	f7ff fcf9 	bl	8000744 <APP_THREAD_Error>
  }
  return valid;
 8000d52:	79fb      	ldrb	r3, [r7, #7]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200002dc 	.word	0x200002dc
 8000d60:	200002d8 	.word	0x200002d8
 8000d64:	0800d728 	.word	0x0800d728

08000d68 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200002c8 	.word	0x200002c8

08000d88 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	330c      	adds	r3, #12
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	200002c8 	.word	0x200002c8

08000da0 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	330b      	adds	r3, #11
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	200002c8 	.word	0x200002c8

08000db8 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	330b      	adds	r3, #11
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	200002cc 	.word	0x200002cc

08000dd0 <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <Ot_Cmd_Transfer_Common+0x44>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000de0:	725a      	strb	r2, [r3, #9]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f042 0202 	orr.w	r2, r2, #2
 8000de8:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <Ot_Cmd_Transfer_Common+0x44>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	330c      	adds	r3, #12
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	3302      	adds	r3, #2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <Ot_Cmd_Transfer_Common+0x44>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8000e02:	f009 fdd7 	bl	800a9b4 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8000e06:	f000 f834 	bl	8000e72 <Wait_Getting_Ack_From_M0>

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200002c8 	.word	0x200002c8

08000e18 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  Ot_Cmd_Transfer_Common();
 8000e1c:	f7ff ffd8 	bl	8000dd0 <Ot_Cmd_Transfer_Common>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8000e2c:	f000 f828 	bl	8000e80 <Receive_Ack_From_M0>

  /* Does not allow OpenThread M0 to M4 notification */
  g_ot_notification_allowed = 0U;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <TL_OT_CmdEvtReceived+0x1c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200002e4 	.word	0x200002e4

08000e44 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <TL_THREAD_NotReceived+0x1c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8000e52:	f000 f81d 	bl	8000e90 <Receive_Notification_From_M0>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200002cc 	.word	0x200002cc

08000e64 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f00a f9af 	bl	800b1cc <UTIL_SEQ_WaitEvt>
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 8000e76:	2002      	movs	r0, #2
 8000e78:	f00a f9a8 	bl	800b1cc <UTIL_SEQ_WaitEvt>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f00a f981 	bl	800b18c <UTIL_SEQ_SetEvt>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <Receive_Notification_From_M0+0x1c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <Receive_Notification_From_M0+0x1c>)
 8000e9c:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4,CFG_SCH_PRIO_0);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f00a f947 	bl	800b134 <UTIL_SEQ_SetTask>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200002d0 	.word	0x200002d0

08000eb0 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <RxCpltCallback+0x4c>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	2bff      	cmp	r3, #255	; 0xff
 8000ebc:	d816      	bhi.n	8000eec <RxCpltCallback+0x3c>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <RxCpltCallback+0x4c>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	b291      	uxth	r1, r2
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <RxCpltCallback+0x4c>)
 8000eca:	8011      	strh	r1, [r2, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <RxCpltCallback+0x50>)
 8000ed0:	7819      	ldrb	r1, [r3, #0]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <RxCpltCallback+0x54>)
 8000ed4:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <RxCpltCallback+0x50>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b0d      	cmp	r3, #13
 8000edc:	d106      	bne.n	8000eec <RxCpltCallback+0x3c>
    {
      CptReceiveCmdFromUser = 1U;
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <RxCpltCallback+0x58>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      UTIL_SEQ_SetTask(1U << CFG_TASK_SEND_CLI_TO_M0, CFG_SCH_PRIO_0);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f00a f924 	bl	800b134 <UTIL_SEQ_SetTask>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <RxCpltCallback+0x5c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4903      	ldr	r1, [pc, #12]	; (8000f00 <RxCpltCallback+0x50>)
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f001 fd86 	bl	8002a04 <HW_UART_Receive_IT>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200002c4 	.word	0x200002c4
 8000f00:	200000c4 	.word	0x200000c4
 8000f04:	200001c4 	.word	0x200001c4
 8000f08:	200002c6 	.word	0x200002c6
 8000f0c:	08000eb1 	.word	0x08000eb1

08000f10 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8000f14:	22ff      	movs	r2, #255	; 0xff
 8000f16:	2100      	movs	r1, #0
 8000f18:	4812      	ldr	r0, [pc, #72]	; (8000f64 <Send_CLI_To_M0+0x54>)
 8000f1a:	f00a fee3 	bl	800bce4 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <Send_CLI_To_M0+0x58>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	461a      	mov	r2, r3
 8000f26:	4911      	ldr	r1, [pc, #68]	; (8000f6c <Send_CLI_To_M0+0x5c>)
 8000f28:	480e      	ldr	r0, [pc, #56]	; (8000f64 <Send_CLI_To_M0+0x54>)
 8000f2a:	f00a fecd 	bl	800bcc8 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <Send_CLI_To_M0+0x58>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <Send_CLI_To_M0+0x60>)
 8000f38:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <Send_CLI_To_M0+0x60>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	725a      	strb	r2, [r3, #9]
 8000f40:	2200      	movs	r2, #0
 8000f42:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <Send_CLI_To_M0+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <Send_CLI_To_M0+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8000f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f54:	2100      	movs	r1, #0
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <Send_CLI_To_M0+0x5c>)
 8000f58:	f00a fec4 	bl	800bce4 <memset>

  TL_CLI_SendCmd();
 8000f5c:	f009 fd38 	bl	800a9d0 <TL_CLI_SendCmd>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2003030c 	.word	0x2003030c
 8000f68:	200002c4 	.word	0x200002c4
 8000f6c:	200001c4 	.word	0x200001c4
 8000f70:	20030300 	.word	0x20030300
 8000f74:	200002c6 	.word	0x200002c6

08000f78 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8000f7c:	f009 fd44 	bl	800aa08 <TL_THREAD_CliSendAck>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SEND_CLI_TO_M0, UTIL_SEQ_RFU,Send_CLI_To_M0);
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <APP_THREAD_Init_UART_CLI+0x24>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f00a f8af 	bl	800b0f0 <UTIL_SEQ_RegTask>
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_LPUART1_UART_Init();
 8000f92:	f001 ff57 	bl	8002e44 <MX_LPUART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <APP_THREAD_Init_UART_CLI+0x28>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4905      	ldr	r1, [pc, #20]	; (8000fb0 <APP_THREAD_Init_UART_CLI+0x2c>)
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f001 fd31 	bl	8002a04 <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	08000f11 	.word	0x08000f11
 8000fac:	08000eb1 	.word	0x08000eb1
 8000fb0:	200000c4 	.word	0x200000c4

08000fb4 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <APP_THREAD_TL_THREAD_INIT+0x28>)
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8000fbc:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <APP_THREAD_TL_THREAD_INIT+0x28>)
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <APP_THREAD_TL_THREAD_INIT+0x30>)
 8000fc2:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <APP_THREAD_TL_THREAD_INIT+0x28>)
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <APP_THREAD_TL_THREAD_INIT+0x34>)
 8000fc8:	605a      	str	r2, [r3, #4]
  ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*)&ThreadCliNotBuffer;
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <APP_THREAD_TL_THREAD_INIT+0x28>)
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <APP_THREAD_TL_THREAD_INIT+0x38>)
 8000fce:	60da      	str	r2, [r3, #12]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <APP_THREAD_TL_THREAD_INIT+0x28>)
 8000fd2:	f009 fccf 	bl	800a974 <TL_THREAD_Init>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20030028 	.word	0x20030028
 8000fe0:	200300e8 	.word	0x200300e8
 8000fe4:	200301f4 	.word	0x200301f4
 8000fe8:	20030300 	.word	0x20030300
 8000fec:	2003040c 	.word	0x2003040c

08000ff0 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	7adb      	ldrb	r3, [r3, #11]
 8001000:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	330c      	adds	r3, #12
 8001006:	490b      	ldr	r1, [pc, #44]	; (8001034 <TL_THREAD_CliNotReceived+0x44>)
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f8b9 	bl	8000180 <strcmp>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d009      	beq.n	8001028 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f103 010c 	add.w	r1, r3, #12
 800101a:	7afb      	ldrb	r3, [r7, #11]
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <TL_THREAD_CliNotReceived+0x48>)
 8001020:	2002      	movs	r0, #2
 8001022:	f001 fd29 	bl	8002a78 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 8001026:	e001      	b.n	800102c <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 8001028:	f7ff ffa6 	bl	8000f78 <Send_CLI_Ack_For_OT>
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	0800d740 	.word	0x0800d740
 8001038:	0800103d 	.word	0x0800103d

0800103c <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 8001040:	f7ff ff9a 	bl	8000f78 <Send_CLI_Ack_For_OT>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00d      	beq.n	8001070 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d904      	bls.n	8001066 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 800105c:	2100      	movs	r1, #0
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fb70 	bl	8000744 <APP_THREAD_Error>
 8001064:	e001      	b.n	800106a <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8001066:	f008 fb1d 	bl	80096a4 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 800106a:	4b02      	ldr	r3, [pc, #8]	; (8001074 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
  }
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200002d0 	.word	0x200002d0

08001078 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <LL_PWR_EnableBootC2+0x1c>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <LL_PWR_EnableBootC2+0x1c>)
 8001082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	58000400 	.word	0x58000400

08001098 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80010a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80010a6:	4905      	ldr	r1, [pc, #20]	; (80010bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	58000800 	.word	0x58000800

080010c0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80010ca:	6a1a      	ldr	r2, [r3, #32]
 80010cc:	4904      	ldr	r1, [pc, #16]	; (80010e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	620b      	str	r3, [r1, #32]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	58000800 	.word	0x58000800

080010e4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80010ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001108:	68fb      	ldr	r3, [r7, #12]
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800111e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001122:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4313      	orrs	r3, r2
 800112e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001136:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001140:	68fb      	ldr	r3, [r7, #12]
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	601a      	str	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	041b      	lsls	r3, r3, #16
 80011a0:	43db      	mvns	r3, r3
 80011a2:	401a      	ands	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	605a      	str	r2, [r3, #4]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	041b      	lsls	r3, r3, #16
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	605a      	str	r2, [r3, #4]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	401a      	ands	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	605a      	str	r2, [r3, #4]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	605a      	str	r2, [r3, #4]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	609a      	str	r2, [r3, #8]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	041a      	lsls	r2, r3, #16
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	609a      	str	r2, [r3, #8]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	4013      	ands	r3, r2
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d101      	bne.n	8001274 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69da      	ldr	r2, [r3, #28]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4013      	ands	r3, r2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d101      	bne.n	800129e <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80012b0:	2102      	movs	r1, #2
 80012b2:	482a      	ldr	r0, [pc, #168]	; (800135c <HW_IPCC_Rx_Handler+0xb0>)
 80012b4:	f7ff ffe5 	bl	8001282 <LL_C2_IPCC_IsActiveFlag_CHx>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <HW_IPCC_Rx_Handler+0x26>
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <HW_IPCC_Rx_Handler+0xb0>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80012cc:	f000 f8f8 	bl	80014c0 <HW_IPCC_SYS_EvtHandler>
 80012d0:	e041      	b.n	8001356 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 80012d2:	2104      	movs	r1, #4
 80012d4:	4821      	ldr	r0, [pc, #132]	; (800135c <HW_IPCC_Rx_Handler+0xb0>)
 80012d6:	f7ff ffd4 	bl	8001282 <LL_C2_IPCC_IsActiveFlag_CHx>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d009      	beq.n	80012f4 <HW_IPCC_Rx_Handler+0x48>
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <HW_IPCC_Rx_Handler+0xb0>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 80012ee:	f000 f941 	bl	8001574 <HW_IPCC_THREAD_NotEvtHandler>
 80012f2:	e030      	b.n	8001356 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 80012f4:	2110      	movs	r1, #16
 80012f6:	4819      	ldr	r0, [pc, #100]	; (800135c <HW_IPCC_Rx_Handler+0xb0>)
 80012f8:	f7ff ffc3 	bl	8001282 <LL_C2_IPCC_IsActiveFlag_CHx>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <HW_IPCC_Rx_Handler+0x6a>
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <HW_IPCC_Rx_Handler+0xb0>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	43db      	mvns	r3, r3
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8001310:	f000 f93c 	bl	800158c <HW_IPCC_THREAD_CliNotEvtHandler>
 8001314:	e01f      	b.n	8001356 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001316:	2101      	movs	r1, #1
 8001318:	4810      	ldr	r0, [pc, #64]	; (800135c <HW_IPCC_Rx_Handler+0xb0>)
 800131a:	f7ff ffb2 	bl	8001282 <LL_C2_IPCC_IsActiveFlag_CHx>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HW_IPCC_Rx_Handler+0x8a>
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HW_IPCC_Rx_Handler+0xb0>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8001330:	f000 f88a 	bl	8001448 <HW_IPCC_BLE_EvtHandler>
 8001334:	e00f      	b.n	8001356 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001336:	2108      	movs	r1, #8
 8001338:	4808      	ldr	r0, [pc, #32]	; (800135c <HW_IPCC_Rx_Handler+0xb0>)
 800133a:	f7ff ffa2 	bl	8001282 <LL_C2_IPCC_IsActiveFlag_CHx>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d009      	beq.n	8001358 <HW_IPCC_Rx_Handler+0xac>
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <HW_IPCC_Rx_Handler+0xb0>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	43db      	mvns	r3, r3
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001352:	f000 f967 	bl	8001624 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001356:	bf00      	nop
 8001358:	bf00      	nop
}
 800135a:	bd80      	pop	{r7, pc}
 800135c:	58000c00 	.word	0x58000c00

08001360 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001364:	2102      	movs	r1, #2
 8001366:	4822      	ldr	r0, [pc, #136]	; (80013f0 <HW_IPCC_Tx_Handler+0x90>)
 8001368:	f7ff ff76 	bl	8001258 <LL_C1_IPCC_IsActiveFlag_CHx>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <HW_IPCC_Tx_Handler+0x26>
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <HW_IPCC_Tx_Handler+0x90>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	43db      	mvns	r3, r3
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001380:	f000 f892 	bl	80014a8 <HW_IPCC_SYS_CmdEvtHandler>
 8001384:	e031      	b.n	80013ea <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8001386:	2104      	movs	r1, #4
 8001388:	4819      	ldr	r0, [pc, #100]	; (80013f0 <HW_IPCC_Tx_Handler+0x90>)
 800138a:	f7ff ff65 	bl	8001258 <LL_C1_IPCC_IsActiveFlag_CHx>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d109      	bne.n	80013a8 <HW_IPCC_Tx_Handler+0x48>
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HW_IPCC_Tx_Handler+0x90>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	43db      	mvns	r3, r3
 800139a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 80013a2:	f000 f8db 	bl	800155c <HW_IPCC_OT_CmdEvtHandler>
 80013a6:	e020      	b.n	80013ea <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80013a8:	2108      	movs	r1, #8
 80013aa:	4811      	ldr	r0, [pc, #68]	; (80013f0 <HW_IPCC_Tx_Handler+0x90>)
 80013ac:	f7ff ff54 	bl	8001258 <LL_C1_IPCC_IsActiveFlag_CHx>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HW_IPCC_Tx_Handler+0x6a>
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HW_IPCC_Tx_Handler+0x90>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 80013c4:	f000 f910 	bl	80015e8 <HW_IPCC_MM_FreeBufHandler>
 80013c8:	e00f      	b.n	80013ea <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80013ca:	2120      	movs	r1, #32
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <HW_IPCC_Tx_Handler+0x90>)
 80013ce:	f7ff ff43 	bl	8001258 <LL_C1_IPCC_IsActiveFlag_CHx>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <HW_IPCC_Tx_Handler+0x8c>
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HW_IPCC_Tx_Handler+0x90>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	43db      	mvns	r3, r3
 80013de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80013e6:	f000 f83b 	bl	8001460 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
}
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	58000c00 	.word	0x58000c00

080013f4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80013f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80013fc:	f7ff fe8b 	bl	8001116 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001400:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001404:	f7ff fe5c 	bl	80010c0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001408:	f44f 7000 	mov.w	r0, #512	; 0x200
 800140c:	f7ff fe44 	bl	8001098 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001410:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001412:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001414:	f7ff fe30 	bl	8001078 <LL_PWR_EnableBootC2>

  return;
 8001418:	bf00      	nop
}
 800141a:	bd80      	pop	{r7, pc}

0800141c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001420:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001424:	f7ff fe5e 	bl	80010e4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001428:	4806      	ldr	r0, [pc, #24]	; (8001444 <HW_IPCC_Init+0x28>)
 800142a:	f7ff fea0 	bl	800116e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <HW_IPCC_Init+0x28>)
 8001430:	f7ff fe8d 	bl	800114e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001434:	202c      	movs	r0, #44	; 0x2c
 8001436:	f002 fc44 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800143a:	202d      	movs	r0, #45	; 0x2d
 800143c:	f002 fc41 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

  return;
 8001440:	bf00      	nop
}
 8001442:	bd80      	pop	{r7, pc}
 8001444:	58000c00 	.word	0x58000c00

08001448 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800144c:	f009 f9da 	bl	800a804 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001450:	2101      	movs	r1, #1
 8001452:	4802      	ldr	r0, [pc, #8]	; (800145c <HW_IPCC_BLE_EvtHandler+0x14>)
 8001454:	f7ff fee3 	bl	800121e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001458:	bf00      	nop
}
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58000c00 	.word	0x58000c00

08001460 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001464:	2120      	movs	r1, #32
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001468:	f7ff fea4 	bl	80011b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800146c:	f009 f9fa 	bl	800a864 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001470:	bf00      	nop
}
 8001472:	bd80      	pop	{r7, pc}
 8001474:	58000c00 	.word	0x58000c00

08001478 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800147c:	2102      	movs	r1, #2
 800147e:	4802      	ldr	r0, [pc, #8]	; (8001488 <HW_IPCC_SYS_Init+0x10>)
 8001480:	f7ff feaa 	bl	80011d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001484:	bf00      	nop
}
 8001486:	bd80      	pop	{r7, pc}
 8001488:	58000c00 	.word	0x58000c00

0800148c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001490:	2102      	movs	r1, #2
 8001492:	4804      	ldr	r0, [pc, #16]	; (80014a4 <HW_IPCC_SYS_SendCmd+0x18>)
 8001494:	f7ff fed1 	bl	800123a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001498:	2102      	movs	r1, #2
 800149a:	4802      	ldr	r0, [pc, #8]	; (80014a4 <HW_IPCC_SYS_SendCmd+0x18>)
 800149c:	f7ff fe77 	bl	800118e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80014a0:	bf00      	nop
}
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	58000c00 	.word	0x58000c00

080014a8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80014ac:	2102      	movs	r1, #2
 80014ae:	4803      	ldr	r0, [pc, #12]	; (80014bc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80014b0:	f7ff fe80 	bl	80011b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80014b4:	f009 fa26 	bl	800a904 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80014b8:	bf00      	nop
}
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	58000c00 	.word	0x58000c00

080014c0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80014c4:	f009 fa34 	bl	800a930 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80014c8:	2102      	movs	r1, #2
 80014ca:	4802      	ldr	r0, [pc, #8]	; (80014d4 <HW_IPCC_SYS_EvtHandler+0x14>)
 80014cc:	f7ff fea7 	bl	800121e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80014d0:	bf00      	nop
}
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	58000c00 	.word	0x58000c00

080014d8 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80014dc:	2104      	movs	r1, #4
 80014de:	4804      	ldr	r0, [pc, #16]	; (80014f0 <HW_IPCC_THREAD_Init+0x18>)
 80014e0:	f7ff fe7a 	bl	80011d8 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80014e4:	2110      	movs	r1, #16
 80014e6:	4802      	ldr	r0, [pc, #8]	; (80014f0 <HW_IPCC_THREAD_Init+0x18>)
 80014e8:	f7ff fe76 	bl	80011d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80014ec:	bf00      	nop
}
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	58000c00 	.word	0x58000c00

080014f4 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80014f8:	2104      	movs	r1, #4
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <HW_IPCC_OT_SendCmd+0x18>)
 80014fc:	f7ff fe9d 	bl	800123a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001500:	2104      	movs	r1, #4
 8001502:	4802      	ldr	r0, [pc, #8]	; (800150c <HW_IPCC_OT_SendCmd+0x18>)
 8001504:	f7ff fe43 	bl	800118e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001508:	bf00      	nop
}
 800150a:	bd80      	pop	{r7, pc}
 800150c:	58000c00 	.word	0x58000c00

08001510 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8001514:	2110      	movs	r1, #16
 8001516:	4802      	ldr	r0, [pc, #8]	; (8001520 <HW_IPCC_CLI_SendCmd+0x10>)
 8001518:	f7ff fe8f 	bl	800123a <LL_C1_IPCC_SetFlag_CHx>

  return;
 800151c:	bf00      	nop
}
 800151e:	bd80      	pop	{r7, pc}
 8001520:	58000c00 	.word	0x58000c00

08001524 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001528:	2104      	movs	r1, #4
 800152a:	4804      	ldr	r0, [pc, #16]	; (800153c <HW_IPCC_THREAD_SendAck+0x18>)
 800152c:	f7ff fe77 	bl	800121e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001530:	2104      	movs	r1, #4
 8001532:	4802      	ldr	r0, [pc, #8]	; (800153c <HW_IPCC_THREAD_SendAck+0x18>)
 8001534:	f7ff fe50 	bl	80011d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001538:	bf00      	nop
}
 800153a:	bd80      	pop	{r7, pc}
 800153c:	58000c00 	.word	0x58000c00

08001540 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001544:	2110      	movs	r1, #16
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001548:	f7ff fe69 	bl	800121e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800154c:	2110      	movs	r1, #16
 800154e:	4802      	ldr	r0, [pc, #8]	; (8001558 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001550:	f7ff fe42 	bl	80011d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001554:	bf00      	nop
}
 8001556:	bd80      	pop	{r7, pc}
 8001558:	58000c00 	.word	0x58000c00

0800155c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001560:	2104      	movs	r1, #4
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8001564:	f7ff fe26 	bl	80011b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8001568:	f009 fa5c 	bl	800aa24 <HW_IPCC_OT_CmdEvtNot>

  return;
 800156c:	bf00      	nop
}
 800156e:	bd80      	pop	{r7, pc}
 8001570:	58000c00 	.word	0x58000c00

08001574 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001578:	2104      	movs	r1, #4
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 800157c:	f7ff fe3e 	bl	80011fc <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8001580:	f009 fa5c 	bl	800aa3c <HW_IPCC_THREAD_EvtNot>

  return;
 8001584:	bf00      	nop
}
 8001586:	bd80      	pop	{r7, pc}
 8001588:	58000c00 	.word	0x58000c00

0800158c <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001590:	2110      	movs	r1, #16
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8001594:	f7ff fe32 	bl	80011fc <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8001598:	f009 fa5c 	bl	800aa54 <HW_IPCC_THREAD_CliEvtNot>

  return;
 800159c:	bf00      	nop
}
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	58000c00 	.word	0x58000c00

080015a4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80015ac:	2108      	movs	r1, #8
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80015b0:	f7ff fe52 	bl	8001258 <LL_C1_IPCC_IsActiveFlag_CHx>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80015c0:	2108      	movs	r1, #8
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80015c4:	f7ff fde3 	bl	800118e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80015c8:	e006      	b.n	80015d8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80015ce:	2108      	movs	r1, #8
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80015d2:	f7ff fe32 	bl	800123a <LL_C1_IPCC_SetFlag_CHx>
  return;
 80015d6:	bf00      	nop
}
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	58000c00 	.word	0x58000c00
 80015e4:	200002e0 	.word	0x200002e0

080015e8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80015ec:	2108      	movs	r1, #8
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80015f0:	f7ff fde0 	bl	80011b4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HW_IPCC_MM_FreeBufHandler+0x24>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80015fa:	2108      	movs	r1, #8
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80015fe:	f7ff fe1c 	bl	800123a <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001602:	bf00      	nop
}
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	58000c00 	.word	0x58000c00
 800160c:	200002e0 	.word	0x200002e0

08001610 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001614:	2108      	movs	r1, #8
 8001616:	4802      	ldr	r0, [pc, #8]	; (8001620 <HW_IPCC_TRACES_Init+0x10>)
 8001618:	f7ff fdde 	bl	80011d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800161c:	bf00      	nop
}
 800161e:	bd80      	pop	{r7, pc}
 8001620:	58000c00 	.word	0x58000c00

08001624 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001628:	f009 faa6 	bl	800ab78 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800162c:	2108      	movs	r1, #8
 800162e:	4802      	ldr	r0, [pc, #8]	; (8001638 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001630:	f7ff fdf5 	bl	800121e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001634:	bf00      	nop
}
 8001636:	bd80      	pop	{r7, pc}
 8001638:	58000c00 	.word	0x58000c00

0800163c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <LL_C2_PWR_SetPowerMode+0x28>)
 8001646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800164a:	f023 0207 	bic.w	r2, r3, #7
 800164e:	4905      	ldr	r1, [pc, #20]	; (8001664 <LL_C2_PWR_SetPowerMode+0x28>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4313      	orrs	r3, r2
 8001654:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	58000400 	.word	0x58000400

08001668 <LL_EXTI_EnableIT_32_63>:
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <LL_EXTI_EnableIT_32_63+0x24>)
 8001672:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001676:	4905      	ldr	r1, [pc, #20]	; (800168c <LL_EXTI_EnableIT_32_63+0x24>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4313      	orrs	r3, r2
 800167c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	58000800 	.word	0x58000800

08001690 <LL_C2_EXTI_EnableIT_32_63>:
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 800169a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800169e:	4905      	ldr	r1, [pc, #20]	; (80016b4 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	58000800 	.word	0x58000800

080016b8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80016c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016d2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016de:	4313      	orrs	r3, r2
 80016e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	cafecafe 	.word	0xcafecafe

080016f4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80016fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4313      	orrs	r3, r2
 800170e:	608b      	str	r3, [r1, #8]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800174e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001774:	d101      	bne.n	800177a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800179a:	d101      	bne.n	80017a0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_AHB3_GRP1_EnableClock>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80017b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80017c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d0:	68fb      	ldr	r3, [r7, #12]
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_C1_IPCC_DisableTransmitChannel>:
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	605a      	str	r2, [r3, #4]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	605a      	str	r2, [r3, #4]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_C2_IPCC_DisableTransmitChannel>:
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	615a      	str	r2, [r3, #20]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_C2_IPCC_DisableReceiveChannel>:
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	615a      	str	r2, [r3, #20]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_C1_IPCC_ClearFlag_CHx>:
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	609a      	str	r2, [r3, #8]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_C2_IPCC_ClearFlag_CHx>:
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	22ff      	movs	r2, #255	; 0xff
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	22ca      	movs	r2, #202	; 0xca
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2253      	movs	r2, #83	; 0x53
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 0207 	bic.w	r2, r3, #7
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	609a      	str	r2, [r3, #8]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <MX_APPE_Config+0x18>)
 800190a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800190e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001910:	f000 f83a 	bl	8001988 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001914:	f000 f87a 	bl	8001a0c <Config_HSE>

  return;
 8001918:	bf00      	nop
}
 800191a:	bd80      	pop	{r7, pc}
 800191c:	58004000 	.word	0x58004000

08001920 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001924:	f000 f886 	bl	8001a34 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001928:	f000 f89e 	bl	8001a68 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800192c:	4906      	ldr	r1, [pc, #24]	; (8001948 <MX_APPE_Init+0x28>)
 800192e:	2000      	movs	r0, #0
 8001930:	f000 fdfc 	bl	800252c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8001934:	f000 f818 	bl	8001968 <Init_Debug>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001938:	2101      	movs	r1, #1
 800193a:	2001      	movs	r0, #1
 800193c:	f009 faac 	bl	800ae98 <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001940:	f000 f8a0 	bl	8001a84 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001944:	bf00      	nop
}
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200005bc 	.word	0x200005bc

0800194c <Init_Smps>:

void Init_Smps(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001950:	bf00      	nop
}
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <Init_Exti>:

void Init_Exti(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800195e:	2050      	movs	r0, #80	; 0x50
 8001960:	f7ff fe82 	bl	8001668 <LL_EXTI_EnableIT_32_63>

  return;
 8001964:	bf00      	nop
}
 8001966:	bd80      	pop	{r7, pc}

08001968 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 800196c:	f002 f838 	bl	80039e0 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001970:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001974:	f7ff fe78 	bl	8001668 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001978:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800197c:	f7ff fe88 	bl	8001690 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001980:	f009 f9a2 	bl	800acc8 <DbgTraceInit>
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 8001984:	bf00      	nop
}
 8001986:	bd80      	pop	{r7, pc}

08001988 <Reset_Device>:
static void Reset_Device(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 800198c:	f000 f804 	bl	8001998 <Reset_BackupDomain>

  Reset_IPCC();
 8001990:	f000 f81a 	bl	80019c8 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001994:	bf00      	nop
}
 8001996:	bd80      	pop	{r7, pc}

08001998 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800199c:	f7ff fee0 	bl	8001760 <LL_RCC_IsActiveFlag_PINRST>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00d      	beq.n	80019c2 <Reset_BackupDomain+0x2a>
 80019a6:	f7ff feee 	bl	8001786 <LL_RCC_IsActiveFlag_SFTRST>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d108      	bne.n	80019c2 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80019b0:	f002 fff2 	bl	8004998 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80019b4:	f002 fff0 	bl	8004998 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80019b8:	f7ff feb0 	bl	800171c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80019bc:	f7ff febf 	bl	800173e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
}
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80019cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80019d0:	f7ff feec 	bl	80017ac <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80019d4:	213f      	movs	r1, #63	; 0x3f
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <Reset_IPCC+0x40>)
 80019d8:	f7ff ff47 	bl	800186a <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80019dc:	213f      	movs	r1, #63	; 0x3f
 80019de:	480a      	ldr	r0, [pc, #40]	; (8001a08 <Reset_IPCC+0x40>)
 80019e0:	f7ff ff51 	bl	8001886 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80019e4:	213f      	movs	r1, #63	; 0x3f
 80019e6:	4808      	ldr	r0, [pc, #32]	; (8001a08 <Reset_IPCC+0x40>)
 80019e8:	f7ff fef9 	bl	80017de <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80019ec:	213f      	movs	r1, #63	; 0x3f
 80019ee:	4806      	ldr	r0, [pc, #24]	; (8001a08 <Reset_IPCC+0x40>)
 80019f0:	f7ff ff18 	bl	8001824 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80019f4:	213f      	movs	r1, #63	; 0x3f
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <Reset_IPCC+0x40>)
 80019f8:	f7ff ff03 	bl	8001802 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80019fc:	213f      	movs	r1, #63	; 0x3f
 80019fe:	4802      	ldr	r0, [pc, #8]	; (8001a08 <Reset_IPCC+0x40>)
 8001a00:	f7ff ff22 	bl	8001848 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001a04:	bf00      	nop
}
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	58000c00 	.word	0x58000c00

08001a0c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f009 f9d6 	bl	800adc4 <OTP_Read>
 8001a18:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	799b      	ldrb	r3, [r3, #6]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fe47 	bl	80016b8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
}
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <System_Init>:

static void System_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  Init_Smps();
 8001a38:	f7ff ff88 	bl	800194c <Init_Smps>

  Init_Exti();
 8001a3c:	f7ff ff8d 	bl	800195a <Init_Exti>

  Init_Rtc();
 8001a40:	f000 f802 	bl	8001a48 <Init_Rtc>

  return;
 8001a44:	bf00      	nop
}
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <Init_Rtc+0x1c>)
 8001a4e:	f7ff ff35 	bl	80018bc <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001a52:	2100      	movs	r1, #0
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <Init_Rtc+0x1c>)
 8001a56:	f7ff ff41 	bl	80018dc <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001a5a:	4802      	ldr	r0, [pc, #8]	; (8001a64 <Init_Rtc+0x1c>)
 8001a5c:	f7ff ff21 	bl	80018a2 <LL_RTC_EnableWriteProtection>

  return;
 8001a60:	bf00      	nop
}
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40002800 	.word	0x40002800

08001a68 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001a6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a70:	f7ff fe40 	bl	80016f4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001a74:	f009 f9ce 	bl	800ae14 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001a78:	2004      	movs	r0, #4
 8001a7a:	f7ff fddf 	bl	800163c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001a7e:	bf00      	nop
}
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001a8a:	f008 fe81 	bl	800a790 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <appe_Tl_Init+0x50>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	2004      	movs	r0, #4
 8001a94:	f009 fb2c 	bl	800b0f0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <appe_Tl_Init+0x54>)
 8001a9a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <appe_Tl_Init+0x58>)
 8001a9e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480e      	ldr	r0, [pc, #56]	; (8001ae0 <appe_Tl_Init+0x5c>)
 8001aa6:	f008 fcb1 	bl	800a40c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <appe_Tl_Init+0x60>)
 8001ab0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <appe_Tl_Init+0x64>)
 8001ab4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001ab6:	f240 533c 	movw	r3, #1340	; 0x53c
 8001aba:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f008 ffd3 	bl	800aa6c <TL_MM_Init>

  TL_Enable();
 8001ac6:	f008 fe5d 	bl	800a784 <TL_Enable>

  return;
 8001aca:	bf00      	nop
}
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	0800a445 	.word	0x0800a445
 8001ad8:	20030a54 	.word	0x20030a54
 8001adc:	08001aed 	.word	0x08001aed
 8001ae0:	08001b03 	.word	0x08001b03
 8001ae4:	20030b60 	.word	0x20030b60
 8001ae8:	20030518 	.word	0x20030518

08001aec <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001af6:	bf00      	nop
}
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	330b      	adds	r3, #11
 8001b10:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8001b1c:	d004      	beq.n	8001b28 <APPE_SysUserEvtRx+0x26>
 8001b1e:	f249 2201 	movw	r2, #37377	; 0x9201
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d003      	beq.n	8001b2e <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001b26:	e008      	b.n	8001b3a <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001b28:	f000 f834 	bl	8001b94 <APPE_SysEvtReadyProcessing>
         break;
 8001b2c:	e005      	b.n	8001b3a <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	789b      	ldrb	r3, [r3, #2]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f806 	bl	8001b44 <APPE_SysEvtError>
         break;
 8001b38:	bf00      	nop
  }
  return;
 8001b3a:	bf00      	nop
}
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b7d      	cmp	r3, #125	; 0x7d
 8001b52:	d002      	beq.n	8001b5a <APPE_SysEvtError+0x16>
 8001b54:	2b7e      	cmp	r3, #126	; 0x7e
 8001b56:	d006      	beq.n	8001b66 <APPE_SysEvtError+0x22>
 8001b58:	e00b      	b.n	8001b72 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <APPE_SysEvtError+0x44>)
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f001 fdb2 	bl	80036c8 <logApplication>
       break;
 8001b64:	e00c      	b.n	8001b80 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <APPE_SysEvtError+0x48>)
 8001b68:	2101      	movs	r1, #1
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f001 fdac 	bl	80036c8 <logApplication>
       break;
 8001b70:	e006      	b.n	8001b80 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <APPE_SysEvtError+0x4c>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f001 fda5 	bl	80036c8 <logApplication>
       break;
 8001b7e:	bf00      	nop
  }
  return;
 8001b80:	bf00      	nop
}
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	0800d744 	.word	0x0800d744
 8001b8c:	0800d768 	.word	0x0800d768
 8001b90:	0800d788 	.word	0x0800d788

08001b94 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8001b98:	f008 ffdc 	bl	800ab54 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001b9c:	f7fe fda2 	bl	80006e4 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f009 f948 	bl	800ae38 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2001      	movs	r0, #1
 8001bac:	f009 f974 	bl	800ae98 <UTIL_LPM_SetOffMode>
  return;
 8001bb0:	bf00      	nop
}
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f009 f99c 	bl	800aef8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001bc8:	bf00      	nop
}
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d003      	beq.n	8001bec <UTIL_SEQ_EvtIdle+0x18>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d00c      	beq.n	8001c04 <UTIL_SEQ_EvtIdle+0x30>
 8001bea:	e012      	b.n	8001c12 <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <UTIL_SEQ_EvtIdle+0x50>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d103      	bne.n	8001bfc <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f009 f97f 	bl	800aef8 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 8001bfa:	e00f      	b.n	8001c1c <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f009 f97b 	bl	800aef8 <UTIL_SEQ_Run>
    break;
 8001c02:	e00b      	b.n	8001c1c <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8001c04:	2004      	movs	r0, #4
 8001c06:	f009 fac1 	bl	800b18c <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f009 f974 	bl	800aef8 <UTIL_SEQ_Run>
    break;
 8001c10:	e004      	b.n	8001c1c <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c12:	f04f 30ff 	mov.w	r0, #4294967295
 8001c16:	f009 f96f 	bl	800aef8 <UTIL_SEQ_Run>
    break;
 8001c1a:	bf00      	nop
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200002e4 	.word	0x200002e4

08001c28 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8001c30:	2100      	movs	r1, #0
 8001c32:	2004      	movs	r0, #4
 8001c34:	f009 fa7e 	bl	800b134 <UTIL_SEQ_SetTask>
  return;
 8001c38:	bf00      	nop
}
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f009 fa9f 	bl	800b18c <UTIL_SEQ_SetEvt>
  return;
 8001c4e:	bf00      	nop
}
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f009 fab4 	bl	800b1cc <UTIL_SEQ_WaitEvt>
  return;
 8001c64:	bf00      	nop
}
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
#if (CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	330b      	adds	r3, #11
 8001c78:	1c99      	adds	r1, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7a9b      	ldrb	r3, [r3, #10]
 8001c7e:	3b02      	subs	r3, #2
 8001c80:	461a      	mov	r2, r3
 8001c82:	2001      	movs	r0, #1
 8001c84:	f009 f846 	bl	800ad14 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f008 ff2b 	bl	800aae4 <TL_MM_EvtDone>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if (CFG_DEBUG_TRACE != 0)
void DbgOutputInit(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
	MX_LPUART1_UART_Init();
 8001c9a:	f001 f8d3 	bl	8002e44 <MX_LPUART1_UART_Init>
  return;
 8001c9e:	bf00      	nop
#endif /* CFG_DEBUG_TRACE_UART */
}
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	460b      	mov	r3, r1
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001cb0:	897a      	ldrh	r2, [r7, #10]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68f9      	ldr	r1, [r7, #12]
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f000 ff18 	bl	8002aec <HW_UART_Transmit_DMA>

  return;
 8001cbc:	bf00      	nop
}
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f001 fcf7 	bl	80036c8 <logApplication>
  switch(GPIO_Pin)
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_EXTI_Callback+0x26>
 8001ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce6:	d005      	beq.n	8001cf4 <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 8001ce8:	e005      	b.n	8001cf6 <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 8001cea:	2101      	movs	r1, #1
 8001cec:	2008      	movs	r0, #8
 8001cee:	f009 fa21 	bl	800b134 <UTIL_SEQ_SetTask>
        break;
 8001cf2:	e000      	b.n	8001cf6 <HAL_GPIO_EXTI_Callback+0x32>
        break;
 8001cf4:	bf00      	nop
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	0800d7a8 	.word	0x0800d7a8

08001d04 <LL_EXTI_EnableIT_0_31>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <LL_EXTI_EnableIT_0_31+0x24>)
 8001d0e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001d12:	4905      	ldr	r1, [pc, #20]	; (8001d28 <LL_EXTI_EnableIT_0_31+0x24>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	58000800 	.word	0x58000800

08001d2c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4904      	ldr	r1, [pc, #16]	; (8001d4c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	58000800 	.word	0x58000800

08001d50 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <ReadRtcSsrValue+0x3c>)
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <ReadRtcSsrValue+0x3c>)
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001d66:	e005      	b.n	8001d74 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <ReadRtcSsrValue+0x3c>)
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d1f5      	bne.n	8001d68 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001d7c:	683b      	ldr	r3, [r7, #0]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40002800 	.word	0x40002800

08001d90 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	460a      	mov	r2, r1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001da0:	79ba      	ldrb	r2, [r7, #6]
 8001da2:	491d      	ldr	r1, [pc, #116]	; (8001e18 <LinkTimerAfter+0x88>)
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	3315      	adds	r3, #21
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d009      	beq.n	8001dce <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	4916      	ldr	r1, [pc, #88]	; (8001e18 <LinkTimerAfter+0x88>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3314      	adds	r3, #20
 8001dca:	79fa      	ldrb	r2, [r7, #7]
 8001dcc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001dce:	79fa      	ldrb	r2, [r7, #7]
 8001dd0:	4911      	ldr	r1, [pc, #68]	; (8001e18 <LinkTimerAfter+0x88>)
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	3315      	adds	r3, #21
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001de2:	79fa      	ldrb	r2, [r7, #7]
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <LinkTimerAfter+0x88>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	3314      	adds	r3, #20
 8001df2:	79ba      	ldrb	r2, [r7, #6]
 8001df4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001df6:	79ba      	ldrb	r2, [r7, #6]
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <LinkTimerAfter+0x88>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	3315      	adds	r3, #21
 8001e06:	79fa      	ldrb	r2, [r7, #7]
 8001e08:	701a      	strb	r2, [r3, #0]

  return;
 8001e0a:	bf00      	nop
}
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	200002e8 	.word	0x200002e8

08001e1c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	460a      	mov	r2, r1
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001e2c:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <LinkTimerBefore+0xb8>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	79ba      	ldrb	r2, [r7, #6]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d032      	beq.n	8001e9e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001e38:	79ba      	ldrb	r2, [r7, #6]
 8001e3a:	4927      	ldr	r1, [pc, #156]	; (8001ed8 <LinkTimerBefore+0xbc>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	3314      	adds	r3, #20
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	4922      	ldr	r1, [pc, #136]	; (8001ed8 <LinkTimerBefore+0xbc>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	3315      	adds	r3, #21
 8001e5c:	79fa      	ldrb	r2, [r7, #7]
 8001e5e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e60:	79fa      	ldrb	r2, [r7, #7]
 8001e62:	491d      	ldr	r1, [pc, #116]	; (8001ed8 <LinkTimerBefore+0xbc>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3315      	adds	r3, #21
 8001e70:	79ba      	ldrb	r2, [r7, #6]
 8001e72:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001e74:	79fa      	ldrb	r2, [r7, #7]
 8001e76:	4918      	ldr	r1, [pc, #96]	; (8001ed8 <LinkTimerBefore+0xbc>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	3314      	adds	r3, #20
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e88:	79ba      	ldrb	r2, [r7, #6]
 8001e8a:	4913      	ldr	r1, [pc, #76]	; (8001ed8 <LinkTimerBefore+0xbc>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3314      	adds	r3, #20
 8001e98:	79fa      	ldrb	r2, [r7, #7]
 8001e9a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001e9c:	e014      	b.n	8001ec8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e9e:	79fa      	ldrb	r2, [r7, #7]
 8001ea0:	490d      	ldr	r1, [pc, #52]	; (8001ed8 <LinkTimerBefore+0xbc>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	3315      	adds	r3, #21
 8001eae:	79ba      	ldrb	r2, [r7, #6]
 8001eb0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001eb2:	79ba      	ldrb	r2, [r7, #6]
 8001eb4:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <LinkTimerBefore+0xbc>)
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3314      	adds	r3, #20
 8001ec2:	79fa      	ldrb	r2, [r7, #7]
 8001ec4:	701a      	strb	r2, [r3, #0]
  return;
 8001ec6:	bf00      	nop
}
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000378 	.word	0x20000378
 8001ed8:	200002e8 	.word	0x200002e8

08001edc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ee6:	4b4e      	ldr	r3, [pc, #312]	; (8002020 <linkTimer+0x144>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d118      	bne.n	8001f22 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <linkTimer+0x144>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4b4b      	ldr	r3, [pc, #300]	; (8002024 <linkTimer+0x148>)
 8001ef8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001efa:	4a49      	ldr	r2, [pc, #292]	; (8002020 <linkTimer+0x144>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001f00:	79fa      	ldrb	r2, [r7, #7]
 8001f02:	4949      	ldr	r1, [pc, #292]	; (8002028 <linkTimer+0x14c>)
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3315      	adds	r3, #21
 8001f10:	2206      	movs	r2, #6
 8001f12:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f14:	4b45      	ldr	r3, [pc, #276]	; (800202c <linkTimer+0x150>)
 8001f16:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	81fb      	strh	r3, [r7, #14]
 8001f20:	e078      	b.n	8002014 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001f22:	f000 f909 	bl	8002138 <ReturnTimeElapsed>
 8001f26:	4603      	mov	r3, r0
 8001f28:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	493e      	ldr	r1, [pc, #248]	; (8002028 <linkTimer+0x14c>)
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	3308      	adds	r3, #8
 8001f3a:	6819      	ldr	r1, [r3, #0]
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
 8001f3e:	79fa      	ldrb	r2, [r7, #7]
 8001f40:	4419      	add	r1, r3
 8001f42:	4839      	ldr	r0, [pc, #228]	; (8002028 <linkTimer+0x14c>)
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4403      	add	r3, r0
 8001f4e:	3308      	adds	r3, #8
 8001f50:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001f52:	79fa      	ldrb	r2, [r7, #7]
 8001f54:	4934      	ldr	r1, [pc, #208]	; (8002028 <linkTimer+0x14c>)
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	3308      	adds	r3, #8
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001f66:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <linkTimer+0x144>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4a2e      	ldr	r2, [pc, #184]	; (8002028 <linkTimer+0x14c>)
 8001f70:	460b      	mov	r3, r1
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	440b      	add	r3, r1
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3308      	adds	r3, #8
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d337      	bcc.n	8001ff4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001f84:	4b26      	ldr	r3, [pc, #152]	; (8002020 <linkTimer+0x144>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001f8a:	7b7a      	ldrb	r2, [r7, #13]
 8001f8c:	4926      	ldr	r1, [pc, #152]	; (8002028 <linkTimer+0x14c>)
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	3315      	adds	r3, #21
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f9e:	e013      	b.n	8001fc8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001fa0:	7b7a      	ldrb	r2, [r7, #13]
 8001fa2:	4921      	ldr	r1, [pc, #132]	; (8002028 <linkTimer+0x14c>)
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	3315      	adds	r3, #21
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001fb4:	7b7a      	ldrb	r2, [r7, #13]
 8001fb6:	491c      	ldr	r1, [pc, #112]	; (8002028 <linkTimer+0x14c>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3315      	adds	r3, #21
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001fc8:	7b3b      	ldrb	r3, [r7, #12]
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d00b      	beq.n	8001fe6 <linkTimer+0x10a>
 8001fce:	7b3a      	ldrb	r2, [r7, #12]
 8001fd0:	4915      	ldr	r1, [pc, #84]	; (8002028 <linkTimer+0x14c>)
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	3308      	adds	r3, #8
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d2dc      	bcs.n	8001fa0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001fe6:	7b7a      	ldrb	r2, [r7, #13]
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fecf 	bl	8001d90 <LinkTimerAfter>
 8001ff2:	e00f      	b.n	8002014 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <linkTimer+0x144>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff0c 	bl	8001e1c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <linkTimer+0x144>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <linkTimer+0x148>)
 800200c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <linkTimer+0x144>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002014:	89fb      	ldrh	r3, [r7, #14]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000378 	.word	0x20000378
 8002024:	20000379 	.word	0x20000379
 8002028:	200002e8 	.word	0x200002e8
 800202c:	2000037c 	.word	0x2000037c

08002030 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	460a      	mov	r2, r1
 800203a:	71fb      	strb	r3, [r7, #7]
 800203c:	4613      	mov	r3, r2
 800203e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002040:	4b39      	ldr	r3, [pc, #228]	; (8002128 <UnlinkTimer+0xf8>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	79fa      	ldrb	r2, [r7, #7]
 8002048:	429a      	cmp	r2, r3
 800204a:	d111      	bne.n	8002070 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <UnlinkTimer+0xf8>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <UnlinkTimer+0xfc>)
 8002054:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002056:	79fa      	ldrb	r2, [r7, #7]
 8002058:	4935      	ldr	r1, [pc, #212]	; (8002130 <UnlinkTimer+0x100>)
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	3315      	adds	r3, #21
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <UnlinkTimer+0xf8>)
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e03e      	b.n	80020ee <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002070:	79fa      	ldrb	r2, [r7, #7]
 8002072:	492f      	ldr	r1, [pc, #188]	; (8002130 <UnlinkTimer+0x100>)
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	3314      	adds	r3, #20
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002084:	79fa      	ldrb	r2, [r7, #7]
 8002086:	492a      	ldr	r1, [pc, #168]	; (8002130 <UnlinkTimer+0x100>)
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	3315      	adds	r3, #21
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002098:	79f9      	ldrb	r1, [r7, #7]
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	4824      	ldr	r0, [pc, #144]	; (8002130 <UnlinkTimer+0x100>)
 800209e:	460b      	mov	r3, r1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	440b      	add	r3, r1
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4403      	add	r3, r0
 80020a8:	3315      	adds	r3, #21
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2d8      	uxtb	r0, r3
 80020ae:	4920      	ldr	r1, [pc, #128]	; (8002130 <UnlinkTimer+0x100>)
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	3315      	adds	r3, #21
 80020bc:	4602      	mov	r2, r0
 80020be:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020c0:	7bbb      	ldrb	r3, [r7, #14]
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d013      	beq.n	80020ee <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80020c6:	79f9      	ldrb	r1, [r7, #7]
 80020c8:	7bba      	ldrb	r2, [r7, #14]
 80020ca:	4819      	ldr	r0, [pc, #100]	; (8002130 <UnlinkTimer+0x100>)
 80020cc:	460b      	mov	r3, r1
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	440b      	add	r3, r1
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4403      	add	r3, r0
 80020d6:	3314      	adds	r3, #20
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	b2d8      	uxtb	r0, r3
 80020dc:	4914      	ldr	r1, [pc, #80]	; (8002130 <UnlinkTimer+0x100>)
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	3314      	adds	r3, #20
 80020ea:	4602      	mov	r2, r0
 80020ec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80020ee:	79fa      	ldrb	r2, [r7, #7]
 80020f0:	490f      	ldr	r1, [pc, #60]	; (8002130 <UnlinkTimer+0x100>)
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	330c      	adds	r3, #12
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <UnlinkTimer+0xf8>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b06      	cmp	r3, #6
 800210a:	d107      	bne.n	800211c <UnlinkTimer+0xec>
 800210c:	79bb      	ldrb	r3, [r7, #6]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d104      	bne.n	800211c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <UnlinkTimer+0x104>)
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	601a      	str	r2, [r3, #0]
  }

  return;
 800211a:	bf00      	nop
 800211c:	bf00      	nop
}
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	20000378 	.word	0x20000378
 800212c:	20000379 	.word	0x20000379
 8002130:	200002e8 	.word	0x200002e8
 8002134:	2000037c 	.word	0x2000037c

08002138 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <ReturnTimeElapsed+0x70>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002146:	d026      	beq.n	8002196 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002148:	f7ff fe02 	bl	8001d50 <ReadRtcSsrValue>
 800214c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <ReturnTimeElapsed+0x70>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	d805      	bhi.n	8002164 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <ReturnTimeElapsed+0x70>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	e00a      	b.n	800217a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <ReturnTimeElapsed+0x74>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002170:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <ReturnTimeElapsed+0x70>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	4413      	add	r3, r2
 8002178:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <ReturnTimeElapsed+0x78>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <ReturnTimeElapsed+0x7c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	40d3      	lsrs	r3, r2
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	e001      	b.n	800219a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	b29b      	uxth	r3, r3
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000037c 	.word	0x2000037c
 80021ac:	20000384 	.word	0x20000384
 80021b0:	20000382 	.word	0x20000382
 80021b4:	20000381 	.word	0x20000381

080021b8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d108      	bne.n	80021da <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021c8:	f7ff fdc2 	bl	8001d50 <ReadRtcSsrValue>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4a21      	ldr	r2, [pc, #132]	; (8002254 <RestartWakeupCounter+0x9c>)
 80021d0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80021d2:	2003      	movs	r0, #3
 80021d4:	f001 fda1 	bl	8003d1a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80021d8:	e039      	b.n	800224e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d803      	bhi.n	80021e8 <RestartWakeupCounter+0x30>
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <RestartWakeupCounter+0xa0>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d002      	beq.n	80021ee <RestartWakeupCounter+0x36>
      Value -= 1;
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80021ee:	bf00      	nop
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <RestartWakeupCounter+0xa4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f8      	beq.n	80021f0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <RestartWakeupCounter+0xa4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <RestartWakeupCounter+0xa4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800220e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <RestartWakeupCounter+0xa8>)
 8002212:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002216:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002218:	2003      	movs	r0, #3
 800221a:	f001 fd8c 	bl	8003d36 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <RestartWakeupCounter+0xac>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	0c1b      	lsrs	r3, r3, #16
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	88fa      	ldrh	r2, [r7, #6]
 8002228:	490e      	ldr	r1, [pc, #56]	; (8002264 <RestartWakeupCounter+0xac>)
 800222a:	4313      	orrs	r3, r2
 800222c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800222e:	f7ff fd8f 	bl	8001d50 <ReadRtcSsrValue>
 8002232:	4603      	mov	r3, r0
 8002234:	4a07      	ldr	r2, [pc, #28]	; (8002254 <RestartWakeupCounter+0x9c>)
 8002236:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <RestartWakeupCounter+0xa4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <RestartWakeupCounter+0xa4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002246:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002248:	f3af 8000 	nop.w
  return ;
 800224c:	bf00      	nop
}
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000037c 	.word	0x2000037c
 8002258:	20000381 	.word	0x20000381
 800225c:	200005bc 	.word	0x200005bc
 8002260:	58000800 	.word	0x58000800
 8002264:	40002800 	.word	0x40002800

08002268 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800226e:	4b45      	ldr	r3, [pc, #276]	; (8002384 <RescheduleTimerList+0x11c>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227a:	d107      	bne.n	800228c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800227c:	bf00      	nop
 800227e:	4b42      	ldr	r3, [pc, #264]	; (8002388 <RescheduleTimerList+0x120>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f8      	bne.n	800227e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800228c:	4b3e      	ldr	r3, [pc, #248]	; (8002388 <RescheduleTimerList+0x120>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <RescheduleTimerList+0x120>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800229c:	4b3b      	ldr	r3, [pc, #236]	; (800238c <RescheduleTimerList+0x124>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	493a      	ldr	r1, [pc, #232]	; (8002390 <RescheduleTimerList+0x128>)
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3308      	adds	r3, #8
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80022b6:	f7ff ff3f 	bl	8002138 <ReturnTimeElapsed>
 80022ba:	4603      	mov	r3, r0
 80022bc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d205      	bcs.n	80022d2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022ca:	4b32      	ldr	r3, [pc, #200]	; (8002394 <RescheduleTimerList+0x12c>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	e04d      	b.n	800236e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	4a30      	ldr	r2, [pc, #192]	; (8002398 <RescheduleTimerList+0x130>)
 80022d6:	8812      	ldrh	r2, [r2, #0]
 80022d8:	b292      	uxth	r2, r2
 80022da:	4413      	add	r3, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d906      	bls.n	80022f2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80022e4:	4b2c      	ldr	r3, [pc, #176]	; (8002398 <RescheduleTimerList+0x130>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80022ea:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <RescheduleTimerList+0x12c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e03d      	b.n	800236e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <RescheduleTimerList+0x12c>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002302:	e034      	b.n	800236e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	4922      	ldr	r1, [pc, #136]	; (8002390 <RescheduleTimerList+0x128>)
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	3308      	adds	r3, #8
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	429a      	cmp	r2, r3
 800231a:	d20a      	bcs.n	8002332 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	491c      	ldr	r1, [pc, #112]	; (8002390 <RescheduleTimerList+0x128>)
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	3308      	adds	r3, #8
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e013      	b.n	800235a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	4916      	ldr	r1, [pc, #88]	; (8002390 <RescheduleTimerList+0x128>)
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	3308      	adds	r3, #8
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	1ac9      	subs	r1, r1, r3
 800234a:	4811      	ldr	r0, [pc, #68]	; (8002390 <RescheduleTimerList+0x128>)
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4403      	add	r3, r0
 8002356:	3308      	adds	r3, #8
 8002358:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <RescheduleTimerList+0x128>)
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	3315      	adds	r3, #21
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b06      	cmp	r3, #6
 8002372:	d1c7      	bne.n	8002304 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002374:	89bb      	ldrh	r3, [r7, #12]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff1e 	bl	80021b8 <RestartWakeupCounter>

  return ;
 800237c:	bf00      	nop
}
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40002800 	.word	0x40002800
 8002388:	200005bc 	.word	0x200005bc
 800238c:	20000378 	.word	0x20000378
 8002390:	200002e8 	.word	0x200002e8
 8002394:	20000380 	.word	0x20000380
 8002398:	20000386 	.word	0x20000386

0800239c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a2:	f3ef 8310 	mrs	r3, PRIMASK
 80023a6:	617b      	str	r3, [r7, #20]
  return(result);
 80023a8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80023ac:	b672      	cpsid	i
}
 80023ae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023b0:	4b59      	ldr	r3, [pc, #356]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	22ca      	movs	r2, #202	; 0xca
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24
 80023b8:	4b57      	ldr	r3, [pc, #348]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2253      	movs	r2, #83	; 0x53
 80023be:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80023c0:	4b55      	ldr	r3, [pc, #340]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	4b54      	ldr	r3, [pc, #336]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ce:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80023d0:	4b52      	ldr	r3, [pc, #328]	; (800251c <HW_TS_RTC_Wakeup_Handler+0x180>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80023d8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023dc:	4950      	ldr	r1, [pc, #320]	; (8002520 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	440b      	add	r3, r1
 80023e8:	330c      	adds	r3, #12
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d16e      	bne.n	80024d0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80023f2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023f6:	494a      	ldr	r1, [pc, #296]	; (8002520 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	440b      	add	r3, r1
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002406:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800240a:	4945      	ldr	r1, [pc, #276]	; (8002520 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	3310      	adds	r3, #16
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800241c:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d04c      	beq.n	80024c0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002426:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800242a:	493d      	ldr	r1, [pc, #244]	; (8002520 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	330d      	adds	r3, #13
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d124      	bne.n	800248a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002444:	2101      	movs	r1, #1
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fdf2 	bl	8002030 <UnlinkTimer>
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f383 8810 	msr	PRIMASK, r3
}
 8002456:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002458:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800245c:	4930      	ldr	r1, [pc, #192]	; (8002520 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	3304      	adds	r3, #4
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fa32 	bl	80028dc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	22ca      	movs	r2, #202	; 0xca
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2253      	movs	r2, #83	; 0x53
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
 8002488:	e012      	b.n	80024b0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f383 8810 	msr	PRIMASK, r3
}
 8002494:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002496:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f99a 	bl	80027d4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	22ca      	movs	r2, #202	; 0xca
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2253      	movs	r2, #83	; 0x53
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80024b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	4619      	mov	r1, r3
 80024b8:	69b8      	ldr	r0, [r7, #24]
 80024ba:	f000 fa95 	bl	80029e8 <HW_TS_RTC_Int_AppNot>
 80024be:	e022      	b.n	8002506 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80024c0:	f7ff fed2 	bl	8002268 <RescheduleTimerList>
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f383 8810 	msr	PRIMASK, r3
}
 80024ce:	e01a      	b.n	8002506 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024d0:	bf00      	nop
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f8      	beq.n	80024d2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024f0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80024f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f383 8810 	msr	PRIMASK, r3
}
 8002504:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	22ff      	movs	r2, #255	; 0xff
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800250e:	bf00      	nop
}
 8002510:	3728      	adds	r7, #40	; 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200005bc 	.word	0x200005bc
 800251c:	20000378 	.word	0x20000378
 8002520:	200002e8 	.word	0x200002e8
 8002524:	20000380 	.word	0x20000380
 8002528:	58000800 	.word	0x58000800

0800252c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002538:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <HW_TS_Init+0x188>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	22ca      	movs	r2, #202	; 0xca
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
 8002540:	4b5c      	ldr	r3, [pc, #368]	; (80026b4 <HW_TS_Init+0x188>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2253      	movs	r2, #83	; 0x53
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002548:	4b5b      	ldr	r3, [pc, #364]	; (80026b8 <HW_TS_Init+0x18c>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	4a5a      	ldr	r2, [pc, #360]	; (80026b8 <HW_TS_Init+0x18c>)
 800254e:	f043 0320 	orr.w	r3, r3, #32
 8002552:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002554:	4b58      	ldr	r3, [pc, #352]	; (80026b8 <HW_TS_Init+0x18c>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f1c3 0304 	rsb	r3, r3, #4
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b55      	ldr	r3, [pc, #340]	; (80026bc <HW_TS_Init+0x190>)
 8002568:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800256a:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HW_TS_Init+0x18c>)
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002572:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002576:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	fa92 f2a2 	rbit	r2, r2
 800257e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	2a00      	cmp	r2, #0
 8002588:	d101      	bne.n	800258e <HW_TS_Init+0x62>
  {
    return 32U;
 800258a:	2220      	movs	r2, #32
 800258c:	e003      	b.n	8002596 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	fab2 f282 	clz	r2, r2
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	40d3      	lsrs	r3, r2
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3301      	adds	r3, #1
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b48      	ldr	r3, [pc, #288]	; (80026c0 <HW_TS_Init+0x194>)
 80025a0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80025a2:	4b45      	ldr	r3, [pc, #276]	; (80026b8 <HW_TS_Init+0x18c>)
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	4b44      	ldr	r3, [pc, #272]	; (80026c4 <HW_TS_Init+0x198>)
 80025b4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80025b6:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <HW_TS_Init+0x198>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	4a40      	ldr	r2, [pc, #256]	; (80026c0 <HW_TS_Init+0x194>)
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025c8:	4a3c      	ldr	r2, [pc, #240]	; (80026bc <HW_TS_Init+0x190>)
 80025ca:	7812      	ldrb	r2, [r2, #0]
 80025cc:	40d3      	lsrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d904      	bls.n	80025e4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HW_TS_Init+0x19c>)
 80025dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	e003      	b.n	80025ec <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <HW_TS_Init+0x19c>)
 80025ea:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80025ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80025f0:	f7ff fb9c 	bl	8001d2c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80025f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80025f8:	f7ff fb84 	bl	8001d04 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d13d      	bne.n	800267e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002602:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HW_TS_Init+0x1a0>)
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002608:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <HW_TS_Init+0x1a4>)
 800260a:	f04f 32ff 	mov.w	r2, #4294967295
 800260e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002610:	2300      	movs	r3, #0
 8002612:	77fb      	strb	r3, [r7, #31]
 8002614:	e00c      	b.n	8002630 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002616:	7ffa      	ldrb	r2, [r7, #31]
 8002618:	492e      	ldr	r1, [pc, #184]	; (80026d4 <HW_TS_Init+0x1a8>)
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	330c      	adds	r3, #12
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800262a:	7ffb      	ldrb	r3, [r7, #31]
 800262c:	3301      	adds	r3, #1
 800262e:	77fb      	strb	r3, [r7, #31]
 8002630:	7ffb      	ldrb	r3, [r7, #31]
 8002632:	2b05      	cmp	r3, #5
 8002634:	d9ef      	bls.n	8002616 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002636:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <HW_TS_Init+0x1ac>)
 8002638:	2206      	movs	r2, #6
 800263a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HW_TS_Init+0x188>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HW_TS_Init+0x188>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HW_TS_Init+0x188>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <HW_TS_Init+0x188>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800265c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <HW_TS_Init+0x1b0>)
 8002660:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002664:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002666:	2003      	movs	r0, #3
 8002668:	f001 fb65 	bl	8003d36 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HW_TS_Init+0x188>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HW_TS_Init+0x188>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	e009      	b.n	8002692 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HW_TS_Init+0x188>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800268c:	2003      	movs	r0, #3
 800268e:	f001 fb44 	bl	8003d1a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HW_TS_Init+0x188>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	22ff      	movs	r2, #255	; 0xff
 8002698:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800269a:	2200      	movs	r2, #0
 800269c:	2103      	movs	r1, #3
 800269e:	2003      	movs	r0, #3
 80026a0:	f001 faf5 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80026a4:	2003      	movs	r0, #3
 80026a6:	f001 fb0c 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

  return;
 80026aa:	bf00      	nop
}
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200005bc 	.word	0x200005bc
 80026b8:	40002800 	.word	0x40002800
 80026bc:	20000381 	.word	0x20000381
 80026c0:	20000382 	.word	0x20000382
 80026c4:	20000384 	.word	0x20000384
 80026c8:	20000386 	.word	0x20000386
 80026cc:	20000380 	.word	0x20000380
 80026d0:	2000037c 	.word	0x2000037c
 80026d4:	200002e8 	.word	0x200002e8
 80026d8:	20000378 	.word	0x20000378
 80026dc:	58000800 	.word	0x58000800

080026e0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b08b      	sub	sp, #44	; 0x2c
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026f6:	f3ef 8310 	mrs	r3, PRIMASK
 80026fa:	61fb      	str	r3, [r7, #28]
  return(result);
 80026fc:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80026fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002700:	b672      	cpsid	i
}
 8002702:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002704:	e004      	b.n	8002710 <HW_TS_Create+0x30>
  {
    loop++;
 8002706:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800270a:	3301      	adds	r3, #1
 800270c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002710:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002714:	2b05      	cmp	r3, #5
 8002716:	d80c      	bhi.n	8002732 <HW_TS_Create+0x52>
 8002718:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800271c:	492c      	ldr	r1, [pc, #176]	; (80027d0 <HW_TS_Create+0xf0>)
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	330c      	adds	r3, #12
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e9      	bne.n	8002706 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002732:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002736:	2b06      	cmp	r3, #6
 8002738:	d038      	beq.n	80027ac <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800273a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800273e:	4924      	ldr	r1, [pc, #144]	; (80027d0 <HW_TS_Create+0xf0>)
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	330c      	adds	r3, #12
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f383 8810 	msr	PRIMASK, r3
}
 800275a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800275c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002760:	491b      	ldr	r1, [pc, #108]	; (80027d0 <HW_TS_Create+0xf0>)
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	440b      	add	r3, r1
 800276c:	3310      	adds	r3, #16
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002772:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002776:	4916      	ldr	r1, [pc, #88]	; (80027d0 <HW_TS_Create+0xf0>)
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	330d      	adds	r3, #13
 8002784:	79fa      	ldrb	r2, [r7, #7]
 8002786:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002788:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800278c:	4910      	ldr	r1, [pc, #64]	; (80027d0 <HW_TS_Create+0xf0>)
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80027a2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027aa:	e008      	b.n	80027be <HW_TS_Create+0xde>
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f383 8810 	msr	PRIMASK, r3
}
 80027b6:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80027be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	372c      	adds	r7, #44	; 0x2c
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	200002e8 	.word	0x200002e8

080027d4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027de:	f3ef 8310 	mrs	r3, PRIMASK
 80027e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80027e4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80027e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80027e8:	b672      	cpsid	i
}
 80027ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80027ec:	2003      	movs	r0, #3
 80027ee:	f001 fa76 	bl	8003cde <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HW_TS_Stop+0xf0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	22ca      	movs	r2, #202	; 0xca
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24
 80027fa:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HW_TS_Stop+0xf0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2253      	movs	r2, #83	; 0x53
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002802:	79fa      	ldrb	r2, [r7, #7]
 8002804:	4930      	ldr	r1, [pc, #192]	; (80028c8 <HW_TS_Stop+0xf4>)
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	440b      	add	r3, r1
 8002810:	330c      	adds	r3, #12
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d142      	bne.n	80028a0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fc06 	bl	8002030 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <HW_TS_Stop+0xf8>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	2b06      	cmp	r3, #6
 800282e:	d12f      	bne.n	8002890 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HW_TS_Stop+0xfc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283c:	d107      	bne.n	800284e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800283e:	bf00      	nop
 8002840:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HW_TS_Stop+0xf0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f8      	bne.n	8002840 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HW_TS_Stop+0xf0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HW_TS_Stop+0xf0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800285e:	bf00      	nop
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HW_TS_Stop+0xf0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f8      	beq.n	8002860 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HW_TS_Stop+0xf0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HW_TS_Stop+0xf0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800287e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002880:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HW_TS_Stop+0x100>)
 8002882:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002886:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002888:	2003      	movs	r0, #3
 800288a:	f001 fa54 	bl	8003d36 <HAL_NVIC_ClearPendingIRQ>
 800288e:	e007      	b.n	80028a0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HW_TS_Stop+0x104>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	7cfa      	ldrb	r2, [r7, #19]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800289c:	f7ff fce4 	bl	8002268 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <HW_TS_Stop+0xf0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	22ff      	movs	r2, #255	; 0xff
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80028a8:	2003      	movs	r0, #3
 80028aa:	f001 fa0a 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f383 8810 	msr	PRIMASK, r3
}
 80028b8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80028ba:	bf00      	nop
}
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200005bc 	.word	0x200005bc
 80028c8:	200002e8 	.word	0x200002e8
 80028cc:	20000378 	.word	0x20000378
 80028d0:	40002800 	.word	0x40002800
 80028d4:	58000800 	.word	0x58000800
 80028d8:	20000379 	.word	0x20000379

080028dc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80028e8:	79fa      	ldrb	r2, [r7, #7]
 80028ea:	493b      	ldr	r1, [pc, #236]	; (80029d8 <HW_TS_Start+0xfc>)
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	330c      	adds	r3, #12
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d103      	bne.n	8002908 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff66 	bl	80027d4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002908:	f3ef 8310 	mrs	r3, PRIMASK
 800290c:	60fb      	str	r3, [r7, #12]
  return(result);
 800290e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002912:	b672      	cpsid	i
}
 8002914:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002916:	2003      	movs	r0, #3
 8002918:	f001 f9e1 	bl	8003cde <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800291c:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <HW_TS_Start+0x100>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	22ca      	movs	r2, #202	; 0xca
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HW_TS_Start+0x100>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2253      	movs	r2, #83	; 0x53
 800292a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800292c:	79fa      	ldrb	r2, [r7, #7]
 800292e:	492a      	ldr	r1, [pc, #168]	; (80029d8 <HW_TS_Start+0xfc>)
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	330c      	adds	r3, #12
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002940:	79fa      	ldrb	r2, [r7, #7]
 8002942:	4925      	ldr	r1, [pc, #148]	; (80029d8 <HW_TS_Start+0xfc>)
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	3308      	adds	r3, #8
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002954:	79fa      	ldrb	r2, [r7, #7]
 8002956:	4920      	ldr	r1, [pc, #128]	; (80029d8 <HW_TS_Start+0xfc>)
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	3304      	adds	r3, #4
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fab6 	bl	8001edc <linkTimer>
 8002970:	4603      	mov	r3, r0
 8002972:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HW_TS_Start+0x104>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <HW_TS_Start+0x108>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	7c7a      	ldrb	r2, [r7, #17]
 8002982:	429a      	cmp	r2, r3
 8002984:	d002      	beq.n	800298c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002986:	f7ff fc6f 	bl	8002268 <RescheduleTimerList>
 800298a:	e013      	b.n	80029b4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800298c:	79fa      	ldrb	r2, [r7, #7]
 800298e:	4912      	ldr	r1, [pc, #72]	; (80029d8 <HW_TS_Start+0xfc>)
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	3308      	adds	r3, #8
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	8a7b      	ldrh	r3, [r7, #18]
 80029a0:	79fa      	ldrb	r2, [r7, #7]
 80029a2:	1ac9      	subs	r1, r1, r3
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <HW_TS_Start+0xfc>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4403      	add	r3, r0
 80029b0:	3308      	adds	r3, #8
 80029b2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HW_TS_Start+0x100>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	22ff      	movs	r2, #255	; 0xff
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80029bc:	2003      	movs	r0, #3
 80029be:	f001 f980 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f383 8810 	msr	PRIMASK, r3
}
 80029cc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80029ce:	bf00      	nop
}
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200002e8 	.word	0x200002e8
 80029dc:	200005bc 	.word	0x200005bc
 80029e0:	20000378 	.word	0x20000378
 80029e4:	20000379 	.word	0x20000379

080029e8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	460b      	mov	r3, r1
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4798      	blx	r3

  return;
 80029fa:	bf00      	nop
}
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	4603      	mov	r3, r0
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	4613      	mov	r3, r2
 8002a14:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HW_UART_Receive_IT+0x1e>
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d00d      	beq.n	8002a3c <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002a20:	e019      	b.n	8002a56 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8002a22:	4a0f      	ldr	r2, [pc, #60]	; (8002a60 <HW_UART_Receive_IT+0x5c>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <HW_UART_Receive_IT+0x60>)
 8002a2a:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HW_UART_Receive_IT+0x64>)
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	89bb      	ldrh	r3, [r7, #12]
 8002a30:	461a      	mov	r2, r3
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	480b      	ldr	r0, [pc, #44]	; (8002a64 <HW_UART_Receive_IT+0x60>)
 8002a36:	f004 f8b9 	bl	8006bac <HAL_UART_Receive_IT>
            break;
 8002a3a:	e00c      	b.n	8002a56 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8002a3c:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <HW_UART_Receive_IT+0x68>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HW_UART_Receive_IT+0x6c>)
 8002a44:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <HW_UART_Receive_IT+0x70>)
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	89bb      	ldrh	r3, [r7, #12]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <HW_UART_Receive_IT+0x6c>)
 8002a50:	f004 f8ac 	bl	8006bac <HAL_UART_Receive_IT>
            break;
 8002a54:	bf00      	nop
    }

    return;
 8002a56:	bf00      	nop
}
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000388 	.word	0x20000388
 8002a64:	20000468 	.word	0x20000468
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	20000390 	.word	0x20000390
 8002a70:	200003d4 	.word	0x200003d4
 8002a74:	40008000 	.word	0x40008000

08002a78 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	4603      	mov	r3, r0
 8002a84:	73fb      	strb	r3, [r7, #15]
 8002a86:	4613      	mov	r3, r2
 8002a88:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HW_UART_Transmit_IT+0x1e>
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d00d      	beq.n	8002ab0 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002a94:	e019      	b.n	8002aca <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 8002a96:	4a0f      	ldr	r2, [pc, #60]	; (8002ad4 <HW_UART_Transmit_IT+0x5c>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <HW_UART_Transmit_IT+0x60>)
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <HW_UART_Transmit_IT+0x64>)
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	89bb      	ldrh	r3, [r7, #12]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	480b      	ldr	r0, [pc, #44]	; (8002ad8 <HW_UART_Transmit_IT+0x60>)
 8002aaa:	f003 ffeb 	bl	8006a84 <HAL_UART_Transmit_IT>
            break;
 8002aae:	e00c      	b.n	8002aca <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8002ab0:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <HW_UART_Transmit_IT+0x68>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HW_UART_Transmit_IT+0x6c>)
 8002ab8:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <HW_UART_Transmit_IT+0x70>)
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	89bb      	ldrh	r3, [r7, #12]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	4808      	ldr	r0, [pc, #32]	; (8002ae4 <HW_UART_Transmit_IT+0x6c>)
 8002ac4:	f003 ffde 	bl	8006a84 <HAL_UART_Transmit_IT>
            break;
 8002ac8:	bf00      	nop
    }

    return;
 8002aca:	bf00      	nop
}
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	2000038c 	.word	0x2000038c
 8002ad8:	20000468 	.word	0x20000468
 8002adc:	40013800 	.word	0x40013800
 8002ae0:	20000394 	.word	0x20000394
 8002ae4:	200003d4 	.word	0x200003d4
 8002ae8:	40008000 	.word	0x40008000

08002aec <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	4603      	mov	r3, r0
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	4613      	mov	r3, r2
 8002afc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002b02:	2300      	movs	r3, #0
 8002b04:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HW_UART_Transmit_DMA+0x26>
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d00f      	beq.n	8002b30 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002b10:	e01d      	b.n	8002b4e <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8002b12:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <HW_UART_Transmit_DMA+0xa4>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HW_UART_Transmit_DMA+0xa8>)
 8002b1a:	4a1f      	ldr	r2, [pc, #124]	; (8002b98 <HW_UART_Transmit_DMA+0xac>)
 8002b1c:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002b1e:	89bb      	ldrh	r3, [r7, #12]
 8002b20:	461a      	mov	r2, r3
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	481b      	ldr	r0, [pc, #108]	; (8002b94 <HW_UART_Transmit_DMA+0xa8>)
 8002b26:	f004 f88d 	bl	8006c44 <HAL_UART_Transmit_DMA>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]
            break;
 8002b2e:	e00e      	b.n	8002b4e <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8002b30:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <HW_UART_Transmit_DMA+0xb0>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <HW_UART_Transmit_DMA+0xb4>)
 8002b38:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <HW_UART_Transmit_DMA+0xb8>)
 8002b3a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8002b3c:	89bb      	ldrh	r3, [r7, #12]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	4817      	ldr	r0, [pc, #92]	; (8002ba0 <HW_UART_Transmit_DMA+0xb4>)
 8002b44:	f004 f87e 	bl	8006c44 <HAL_UART_Transmit_DMA>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	75fb      	strb	r3, [r7, #23]
            break;
 8002b4c:	bf00      	nop
    }

    switch (hal_status)
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d817      	bhi.n	8002b84 <HW_UART_Transmit_DMA+0x98>
 8002b54:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <HW_UART_Transmit_DMA+0x70>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b6d 	.word	0x08002b6d
 8002b60:	08002b73 	.word	0x08002b73
 8002b64:	08002b79 	.word	0x08002b79
 8002b68:	08002b7f 	.word	0x08002b7f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	75bb      	strb	r3, [r7, #22]
            break;
 8002b70:	e009      	b.n	8002b86 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002b72:	2301      	movs	r3, #1
 8002b74:	75bb      	strb	r3, [r7, #22]
            break;
 8002b76:	e006      	b.n	8002b86 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	75bb      	strb	r3, [r7, #22]
            break;
 8002b7c:	e003      	b.n	8002b86 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	75bb      	strb	r3, [r7, #22]
            break;
 8002b82:	e000      	b.n	8002b86 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8002b84:	bf00      	nop
    }

    return hw_status;
 8002b86:	7dbb      	ldrb	r3, [r7, #22]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	2000038c 	.word	0x2000038c
 8002b94:	20000468 	.word	0x20000468
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	20000394 	.word	0x20000394
 8002ba0:	200003d4 	.word	0x200003d4
 8002ba4:	40008000 	.word	0x40008000

08002ba8 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a0f      	ldr	r2, [pc, #60]	; (8002bf4 <HAL_UART_RxCpltCallback+0x4c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_UART_RxCpltCallback+0x28>
 8002bba:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <HAL_UART_RxCpltCallback+0x50>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d10f      	bne.n	8002be0 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_UART_RxCpltCallback+0x54>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_UART_RxCpltCallback+0x54>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4798      	blx	r3
            }
            break;
 8002bce:	e009      	b.n	8002be4 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_UART_RxCpltCallback+0x58>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d007      	beq.n	8002be8 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_UART_RxCpltCallback+0x58>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4798      	blx	r3
            }
            break;
 8002bde:	e003      	b.n	8002be8 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 8002be0:	bf00      	nop
 8002be2:	e002      	b.n	8002bea <HAL_UART_RxCpltCallback+0x42>
            break;
 8002be4:	bf00      	nop
 8002be6:	e000      	b.n	8002bea <HAL_UART_RxCpltCallback+0x42>
            break;
 8002be8:	bf00      	nop
    }

    return;
 8002bea:	bf00      	nop
}
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40008000 	.word	0x40008000
 8002bf8:	40013800 	.word	0x40013800
 8002bfc:	20000388 	.word	0x20000388
 8002c00:	20000390 	.word	0x20000390

08002c04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0f      	ldr	r2, [pc, #60]	; (8002c50 <HAL_UART_TxCpltCallback+0x4c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00a      	beq.n	8002c2c <HAL_UART_TxCpltCallback+0x28>
 8002c16:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <HAL_UART_TxCpltCallback+0x50>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10f      	bne.n	8002c3c <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_UART_TxCpltCallback+0x54>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_UART_TxCpltCallback+0x54>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4798      	blx	r3
            }
            break;
 8002c2a:	e009      	b.n	8002c40 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_UART_TxCpltCallback+0x58>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_UART_TxCpltCallback+0x58>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4798      	blx	r3
            }
            break;
 8002c3a:	e003      	b.n	8002c44 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8002c3c:	bf00      	nop
 8002c3e:	e002      	b.n	8002c46 <HAL_UART_TxCpltCallback+0x42>
            break;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <HAL_UART_TxCpltCallback+0x42>
            break;
 8002c44:	bf00      	nop
    }

    return;
 8002c46:	bf00      	nop
}
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40008000 	.word	0x40008000
 8002c54:	40013800 	.word	0x40013800
 8002c58:	2000038c 	.word	0x2000038c
 8002c5c:	20000394 	.word	0x20000394

08002c60 <LL_RCC_LSE_SetDriveCapability>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f023 0218 	bic.w	r2, r3, #24
 8002c74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_AHB1_GRP1_EnableClock>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4013      	ands	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_AHB2_GRP1_EnableClock>:
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cf4:	f000 fdee 	bl	80038d4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002cf8:	f7fe fe04 	bl	8001904 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cfc:	f000 f812 	bl	8002d24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002d00:	f000 f86c 	bl	8002ddc <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002d04:	f000 f88a 	bl	8002e1c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d08:	f000 f93e 	bl	8002f88 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d0c:	f000 f922 	bl	8002f54 <MX_DMA_Init>
  MX_RF_Init();
 8002d10:	f000 f8e4 	bl	8002edc <MX_RF_Init>
  MX_RTC_Init();
 8002d14:	f000 f8ea 	bl	8002eec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002d18:	f7fe fe02 	bl	8001920 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002d1c:	f7fe ff4a 	bl	8001bb4 <MX_APPE_Process>
 8002d20:	e7fc      	b.n	8002d1c <main+0x2c>
	...

08002d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b09a      	sub	sp, #104	; 0x68
 8002d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d2a:	f107 0320 	add.w	r3, r7, #32
 8002d2e:	2248      	movs	r2, #72	; 0x48
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f008 ffd6 	bl	800bce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	60da      	str	r2, [r3, #12]
 8002d44:	611a      	str	r2, [r3, #16]
 8002d46:	615a      	str	r2, [r3, #20]
 8002d48:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d4a:	f001 fe25 	bl	8004998 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7ff ff86 	bl	8002c60 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d54:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <SystemClock_Config+0xb4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d5c:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <SystemClock_Config+0xb4>)
 8002d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <SystemClock_Config+0xb4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002d70:	2307      	movs	r3, #7
 8002d72:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d84:	2340      	movs	r3, #64	; 0x40
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d8c:	f107 0320 	add.w	r3, r7, #32
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 fa13 	bl	80051bc <HAL_RCC_OscConfig>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002d9c:	f000 f901 	bl	8002fa2 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002da0:	236f      	movs	r3, #111	; 0x6f
 8002da2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002da4:	2302      	movs	r3, #2
 8002da6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fd6f 	bl	80058a4 <HAL_RCC_ClockConfig>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002dcc:	f000 f8e9 	bl	8002fa2 <Error_Handler>
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3768      	adds	r7, #104	; 0x68
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	58000400 	.word	0x58000400

08002ddc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b094      	sub	sp, #80	; 0x50
 8002de0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002de2:	463b      	mov	r3, r7
 8002de4:	2250      	movs	r2, #80	; 0x50
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f008 ff7b 	bl	800bce4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002dee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002df2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002df8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e02:	463b      	mov	r3, r7
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 f98a 	bl	800611e <HAL_RCCEx_PeriphCLKConfig>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002e10:	f000 f8c7 	bl	8002fa2 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002e14:	bf00      	nop
 8002e16:	3750      	adds	r7, #80	; 0x50
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <MX_IPCC_Init+0x20>)
 8002e22:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <MX_IPCC_Init+0x24>)
 8002e24:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002e26:	4805      	ldr	r0, [pc, #20]	; (8002e3c <MX_IPCC_Init+0x20>)
 8002e28:	f001 fd30 	bl	800488c <HAL_IPCC_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002e32:	f000 f8b6 	bl	8002fa2 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000398 	.word	0x20000398
 8002e40:	58000c00 	.word	0x58000c00

08002e44 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002e48:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e4a:	4a23      	ldr	r2, [pc, #140]	; (8002ed8 <MX_LPUART1_UART_Init+0x94>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002e4e:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e54:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e56:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002e8c:	4811      	ldr	r0, [pc, #68]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e8e:	f003 fda9 	bl	80069e4 <HAL_UART_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e98:	f000 f883 	bl	8002fa2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	480d      	ldr	r0, [pc, #52]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002ea0:	f006 f82f 	bl	8008f02 <HAL_UARTEx_SetTxFifoThreshold>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002eaa:	f000 f87a 	bl	8002fa2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002eb2:	f006 f864 	bl	8008f7e <HAL_UARTEx_SetRxFifoThreshold>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002ebc:	f000 f871 	bl	8002fa2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002ec0:	4804      	ldr	r0, [pc, #16]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002ec2:	f005 ffe5 	bl	8008e90 <HAL_UARTEx_DisableFifoMode>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ecc:	f000 f869 	bl	8002fa2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	200003d4 	.word	0x200003d4
 8002ed8:	40008000 	.word	0x40008000

08002edc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <MX_RTC_Init+0x60>)
 8002ef2:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <MX_RTC_Init+0x64>)
 8002ef4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <MX_RTC_Init+0x60>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <MX_RTC_Init+0x60>)
 8002efe:	220f      	movs	r2, #15
 8002f00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <MX_RTC_Init+0x60>)
 8002f04:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002f08:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <MX_RTC_Init+0x60>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <MX_RTC_Init+0x60>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <MX_RTC_Init+0x60>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <MX_RTC_Init+0x60>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f22:	480a      	ldr	r0, [pc, #40]	; (8002f4c <MX_RTC_Init+0x60>)
 8002f24:	f003 fb82 	bl	800662c <HAL_RTC_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002f2e:	f000 f838 	bl	8002fa2 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002f32:	2200      	movs	r2, #0
 8002f34:	2100      	movs	r1, #0
 8002f36:	4805      	ldr	r0, [pc, #20]	; (8002f4c <MX_RTC_Init+0x60>)
 8002f38:	f003 fc78 	bl	800682c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002f42:	f000 f82e 	bl	8002fa2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200005bc 	.word	0x200005bc
 8002f50:	40002800 	.word	0x40002800

08002f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002f58:	2004      	movs	r0, #4
 8002f5a:	f7ff fe97 	bl	8002c8c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7ff fe94 	bl	8002c8c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f64:	2200      	movs	r2, #0
 8002f66:	2100      	movs	r1, #0
 8002f68:	200b      	movs	r0, #11
 8002f6a:	f000 fe90 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f6e:	200b      	movs	r0, #11
 8002f70:	f000 fea7 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	2100      	movs	r1, #0
 8002f78:	200c      	movs	r0, #12
 8002f7a:	f000 fe88 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002f7e:	200c      	movs	r0, #12
 8002f80:	f000 fe9f 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f8c:	2004      	movs	r0, #4
 8002f8e:	f7ff fe96 	bl	8002cbe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f92:	2001      	movs	r0, #1
 8002f94:	f7ff fe93 	bl	8002cbe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f98:	2002      	movs	r0, #2
 8002f9a:	f7ff fe90 	bl	8002cbe <LL_AHB2_GRP1_EnableClock>

}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fa6:	bf00      	nop
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_RCC_SetRTCClockSource>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_RCC_EnableRTC>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_AHB2_GRP1_EnableClock>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800300c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4313      	orrs	r3, r2
 8003014:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4013      	ands	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003022:	68fb      	ldr	r3, [r7, #12]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_AHB3_GRP1_EnableClock>:
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800303e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4313      	orrs	r3, r2
 8003046:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003054:	68fb      	ldr	r3, [r7, #12]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_APB1_GRP1_EnableClock>:
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4313      	orrs	r3, r2
 8003078:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800307a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4013      	ands	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_APB1_GRP2_EnableClock>:
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030b8:	68fb      	ldr	r3, [r7, #12]
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <LL_APB2_GRP1_EnableClock>:
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80030ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4313      	orrs	r3, r2
 80030dc:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4013      	ands	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030ea:	68fb      	ldr	r3, [r7, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80030fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003100:	f7ff ff96 	bl	8003030 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003104:	2200      	movs	r2, #0
 8003106:	2100      	movs	r1, #0
 8003108:	2001      	movs	r0, #1
 800310a:	f000 fdc0 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 800310e:	2001      	movs	r0, #1
 8003110:	f000 fdd7 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003114:	2200      	movs	r2, #0
 8003116:	2100      	movs	r1, #0
 8003118:	2004      	movs	r0, #4
 800311a:	f000 fdb8 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800311e:	2004      	movs	r0, #4
 8003120:	f000 fdcf 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003124:	2200      	movs	r2, #0
 8003126:	2100      	movs	r1, #0
 8003128:	2005      	movs	r0, #5
 800312a:	f000 fdb0 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800312e:	2005      	movs	r0, #5
 8003130:	f000 fdc7 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 8003134:	2200      	movs	r2, #0
 8003136:	2100      	movs	r1, #0
 8003138:	2015      	movs	r0, #21
 800313a:	f000 fda8 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 800313e:	2015      	movs	r0, #21
 8003140:	f000 fdbf 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 8003144:	2200      	movs	r2, #0
 8003146:	2100      	movs	r1, #0
 8003148:	202b      	movs	r0, #43	; 0x2b
 800314a:	f000 fda0 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 800314e:	202b      	movs	r0, #43	; 0x2b
 8003150:	f000 fdb7 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003154:	2200      	movs	r2, #0
 8003156:	2100      	movs	r1, #0
 8003158:	202e      	movs	r0, #46	; 0x2e
 800315a:	f000 fd98 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800315e:	202e      	movs	r0, #46	; 0x2e
 8003160:	f000 fdaf 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	2100      	movs	r1, #0
 8003168:	2036      	movs	r0, #54	; 0x36
 800316a:	f000 fd90 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800316e:	2036      	movs	r0, #54	; 0x36
 8003170:	f000 fda7 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0d      	ldr	r2, [pc, #52]	; (80031bc <HAL_IPCC_MspInit+0x44>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d113      	bne.n	80031b2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800318a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800318e:	f7ff ff4f 	bl	8003030 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2100      	movs	r1, #0
 8003196:	202c      	movs	r0, #44	; 0x2c
 8003198:	f000 fd79 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800319c:	202c      	movs	r0, #44	; 0x2c
 800319e:	f000 fd90 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	202d      	movs	r0, #45	; 0x2d
 80031a8:	f000 fd71 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80031ac:	202d      	movs	r0, #45	; 0x2d
 80031ae:	f000 fd88 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	58000c00 	.word	0x58000c00

080031c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b09c      	sub	sp, #112	; 0x70
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	2250      	movs	r2, #80	; 0x50
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f008 fd7f 	bl	800bce4 <memset>
  if(huart->Instance==LPUART1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a67      	ldr	r2, [pc, #412]	; (8003388 <HAL_UART_MspInit+0x1c8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d156      	bne.n	800329e <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80031f0:	2302      	movs	r3, #2
 80031f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80031f4:	2300      	movs	r3, #0
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 ff8e 	bl	800611e <HAL_RCCEx_PeriphCLKConfig>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003208:	f7ff fecb 	bl	8002fa2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800320c:	2001      	movs	r0, #1
 800320e:	f7ff ff41 	bl	8003094 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	2001      	movs	r0, #1
 8003214:	f7ff fef3 	bl	8002ffe <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003218:	230c      	movs	r3, #12
 800321a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003228:	2308      	movs	r3, #8
 800322a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003230:	4619      	mov	r1, r3
 8003232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003236:	f001 f97d 	bl	8004534 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 800323a:	4b54      	ldr	r3, [pc, #336]	; (800338c <HAL_UART_MspInit+0x1cc>)
 800323c:	4a54      	ldr	r2, [pc, #336]	; (8003390 <HAL_UART_MspInit+0x1d0>)
 800323e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003240:	4b52      	ldr	r3, [pc, #328]	; (800338c <HAL_UART_MspInit+0x1cc>)
 8003242:	2211      	movs	r2, #17
 8003244:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003246:	4b51      	ldr	r3, [pc, #324]	; (800338c <HAL_UART_MspInit+0x1cc>)
 8003248:	2210      	movs	r2, #16
 800324a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800324c:	4b4f      	ldr	r3, [pc, #316]	; (800338c <HAL_UART_MspInit+0x1cc>)
 800324e:	2200      	movs	r2, #0
 8003250:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003252:	4b4e      	ldr	r3, [pc, #312]	; (800338c <HAL_UART_MspInit+0x1cc>)
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003258:	4b4c      	ldr	r3, [pc, #304]	; (800338c <HAL_UART_MspInit+0x1cc>)
 800325a:	2200      	movs	r2, #0
 800325c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800325e:	4b4b      	ldr	r3, [pc, #300]	; (800338c <HAL_UART_MspInit+0x1cc>)
 8003260:	2200      	movs	r2, #0
 8003262:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003264:	4b49      	ldr	r3, [pc, #292]	; (800338c <HAL_UART_MspInit+0x1cc>)
 8003266:	2200      	movs	r2, #0
 8003268:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800326a:	4b48      	ldr	r3, [pc, #288]	; (800338c <HAL_UART_MspInit+0x1cc>)
 800326c:	2200      	movs	r2, #0
 800326e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003270:	4846      	ldr	r0, [pc, #280]	; (800338c <HAL_UART_MspInit+0x1cc>)
 8003272:	f000 fd6f 	bl	8003d54 <HAL_DMA_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800327c:	f7ff fe91 	bl	8002fa2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a42      	ldr	r2, [pc, #264]	; (800338c <HAL_UART_MspInit+0x1cc>)
 8003284:	67da      	str	r2, [r3, #124]	; 0x7c
 8003286:	4a41      	ldr	r2, [pc, #260]	; (800338c <HAL_UART_MspInit+0x1cc>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800328c:	2200      	movs	r2, #0
 800328e:	2100      	movs	r1, #0
 8003290:	2025      	movs	r0, #37	; 0x25
 8003292:	f000 fcfc 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003296:	2025      	movs	r0, #37	; 0x25
 8003298:	f000 fd13 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800329c:	e06f      	b.n	800337e <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <HAL_UART_MspInit+0x1d4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d16a      	bne.n	800337e <HAL_UART_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032a8:	2301      	movs	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032ac:	2300      	movs	r3, #0
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 ff32 	bl	800611e <HAL_RCCEx_PeriphCLKConfig>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_UART_MspInit+0x104>
      Error_Handler();
 80032c0:	f7ff fe6f 	bl	8002fa2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80032c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80032c8:	f7ff fefd 	bl	80030c6 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032cc:	2001      	movs	r0, #1
 80032ce:	f7ff fe96 	bl	8002ffe <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d2:	2002      	movs	r0, #2
 80032d4:	f7ff fe93 	bl	8002ffe <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80032d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	2302      	movs	r3, #2
 80032e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e6:	2300      	movs	r3, #0
 80032e8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032ea:	2307      	movs	r3, #7
 80032ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032f2:	4619      	mov	r1, r3
 80032f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032f8:	f001 f91c 	bl	8004534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032fc:	23c0      	movs	r3, #192	; 0xc0
 80032fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003308:	2300      	movs	r3, #0
 800330a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800330c:	2307      	movs	r3, #7
 800330e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003310:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003314:	4619      	mov	r1, r3
 8003316:	4820      	ldr	r0, [pc, #128]	; (8003398 <HAL_UART_MspInit+0x1d8>)
 8003318:	f001 f90c 	bl	8004534 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800331c:	4b1f      	ldr	r3, [pc, #124]	; (800339c <HAL_UART_MspInit+0x1dc>)
 800331e:	4a20      	ldr	r2, [pc, #128]	; (80033a0 <HAL_UART_MspInit+0x1e0>)
 8003320:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <HAL_UART_MspInit+0x1dc>)
 8003324:	220f      	movs	r2, #15
 8003326:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003328:	4b1c      	ldr	r3, [pc, #112]	; (800339c <HAL_UART_MspInit+0x1dc>)
 800332a:	2210      	movs	r2, #16
 800332c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800332e:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_UART_MspInit+0x1dc>)
 8003330:	2200      	movs	r2, #0
 8003332:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_UART_MspInit+0x1dc>)
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800333a:	4b18      	ldr	r3, [pc, #96]	; (800339c <HAL_UART_MspInit+0x1dc>)
 800333c:	2200      	movs	r2, #0
 800333e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003340:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_UART_MspInit+0x1dc>)
 8003342:	2200      	movs	r2, #0
 8003344:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_UART_MspInit+0x1dc>)
 8003348:	2200      	movs	r2, #0
 800334a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <HAL_UART_MspInit+0x1dc>)
 800334e:	2200      	movs	r2, #0
 8003350:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003352:	4812      	ldr	r0, [pc, #72]	; (800339c <HAL_UART_MspInit+0x1dc>)
 8003354:	f000 fcfe 	bl	8003d54 <HAL_DMA_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 800335e:	f7ff fe20 	bl	8002fa2 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <HAL_UART_MspInit+0x1dc>)
 8003366:	67da      	str	r2, [r3, #124]	; 0x7c
 8003368:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_UART_MspInit+0x1dc>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2100      	movs	r1, #0
 8003372:	2024      	movs	r0, #36	; 0x24
 8003374:	f000 fc8b 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003378:	2024      	movs	r0, #36	; 0x24
 800337a:	f000 fca2 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3770      	adds	r7, #112	; 0x70
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40008000 	.word	0x40008000
 800338c:	200004fc 	.word	0x200004fc
 8003390:	40020008 	.word	0x40020008
 8003394:	40013800 	.word	0x40013800
 8003398:	48000400 	.word	0x48000400
 800339c:	2000055c 	.word	0x2000055c
 80033a0:	4002001c 	.word	0x4002001c

080033a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b096      	sub	sp, #88	; 0x58
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033ac:	f107 0308 	add.w	r3, r7, #8
 80033b0:	2250      	movs	r2, #80	; 0x50
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f008 fc95 	bl	800bce4 <memset>
  if(hrtc->Instance==RTC)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a19      	ldr	r2, [pc, #100]	; (8003424 <HAL_RTC_MspInit+0x80>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d12b      	bne.n	800341c <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80033c4:	f001 fae8 	bl	8004998 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80033c8:	f001 fae6 	bl	8004998 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 80033cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033d0:	f7ff fdee 	bl	8002fb0 <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80033da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033de:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033e0:	f107 0308 	add.w	r3, r7, #8
 80033e4:	4618      	mov	r0, r3
 80033e6:	f002 fe9a 	bl	800611e <HAL_RCCEx_PeriphCLKConfig>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 80033f0:	f7ff fdd7 	bl	8002fa2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033f4:	f7ff fdf2 	bl	8002fdc <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80033f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80033fc:	f7ff fe31 	bl	8003062 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003400:	2200      	movs	r2, #0
 8003402:	2100      	movs	r1, #0
 8003404:	2003      	movs	r0, #3
 8003406:	f000 fc42 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800340a:	2003      	movs	r0, #3
 800340c:	f000 fc59 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_RTC_MspInit+0x80>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a03      	ldr	r2, [pc, #12]	; (8003424 <HAL_RTC_MspInit+0x80>)
 8003416:	f023 0307 	bic.w	r3, r3, #7
 800341a:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800341c:	bf00      	nop
 800341e:	3758      	adds	r7, #88	; 0x58
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40002800 	.word	0x40002800

08003428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003436:	b480      	push	{r7}
 8003438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800343a:	e7fe      	b.n	800343a <HardFault_Handler+0x4>

0800343c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003440:	e7fe      	b.n	8003440 <MemManage_Handler+0x4>

08003442 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003442:	b480      	push	{r7}
 8003444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003446:	e7fe      	b.n	8003446 <BusFault_Handler+0x4>

08003448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800344c:	e7fe      	b.n	800344c <UsageFault_Handler+0x4>

0800344e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800347c:	f000 fa84 	bl	8003988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}

08003484 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003488:	f001 faec 	bl	8004a64 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}

08003490 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003494:	f7fe ff82 	bl	800239c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}

0800349c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80034a0:	f000 ff8a 	bl	80043b8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <DMA1_Channel1_IRQHandler+0x10>)
 80034be:	f000 fe2a 	bl	8004116 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200004fc 	.word	0x200004fc

080034cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034d0:	4802      	ldr	r0, [pc, #8]	; (80034dc <DMA1_Channel2_IRQHandler+0x10>)
 80034d2:	f000 fe20 	bl	8004116 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	2000055c 	.word	0x2000055c

080034e0 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034f4:	4802      	ldr	r0, [pc, #8]	; (8003500 <USART1_IRQHandler+0x10>)
 80034f6:	f003 fc25 	bl	8006d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000468 	.word	0x20000468

08003504 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003508:	4802      	ldr	r0, [pc, #8]	; (8003514 <LPUART1_IRQHandler+0x10>)
 800350a:	f003 fc1b 	bl	8006d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	200003d4 	.word	0x200003d4

08003518 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800352a:	f7fd febf 	bl	80012ac <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}

08003532 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003536:	f7fd ff13 	bl	8001360 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}

0800353e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003542:	f001 f97f 	bl	8004844 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}

0800354a <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 800355c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003560:	f001 f958 	bl	8004814 <HAL_GPIO_EXTI_IRQHandler>
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}

08003568 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	807b      	strh	r3, [r7, #2]
 8003574:	4613      	mov	r3, r2
 8003576:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8003578:	787b      	ldrb	r3, [r7, #1]
 800357a:	3b01      	subs	r3, #1
 800357c:	2b04      	cmp	r3, #4
 800357e:	d83e      	bhi.n	80035fe <logRegion+0x96>
 8003580:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <logRegion+0x20>)
 8003582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003586:	bf00      	nop
 8003588:	0800359d 	.word	0x0800359d
 800358c:	080035b1 	.word	0x080035b1
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080035d7 	.word	0x080035d7
 8003598:	080035eb 	.word	0x080035eb
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 800359c:	f107 0308 	add.w	r3, r7, #8
 80035a0:	4a22      	ldr	r2, [pc, #136]	; (800362c <logRegion+0xc4>)
 80035a2:	461c      	mov	r4, r3
 80035a4:	4615      	mov	r5, r2
 80035a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035aa:	682b      	ldr	r3, [r5, #0]
 80035ac:	7023      	strb	r3, [r4, #0]
      break;
 80035ae:	e02f      	b.n	8003610 <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <logRegion+0xc8>)
 80035b6:	461c      	mov	r4, r3
 80035b8:	4615      	mov	r5, r2
 80035ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035be:	682b      	ldr	r3, [r5, #0]
 80035c0:	6023      	str	r3, [r4, #0]
      break;
 80035c2:	e025      	b.n	8003610 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 80035c4:	f107 0308 	add.w	r3, r7, #8
 80035c8:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <logRegion+0xcc>)
 80035ca:	461c      	mov	r4, r3
 80035cc:	4613      	mov	r3, r2
 80035ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035d0:	c407      	stmia	r4!, {r0, r1, r2}
 80035d2:	8023      	strh	r3, [r4, #0]
      break;
 80035d4:	e01c      	b.n	8003610 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	4a17      	ldr	r2, [pc, #92]	; (8003638 <logRegion+0xd0>)
 80035dc:	461c      	mov	r4, r3
 80035de:	4615      	mov	r5, r2
 80035e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	8023      	strh	r3, [r4, #0]
      break;
 80035e8:	e012      	b.n	8003610 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 80035ea:	f107 0308 	add.w	r3, r7, #8
 80035ee:	4a13      	ldr	r2, [pc, #76]	; (800363c <logRegion+0xd4>)
 80035f0:	461c      	mov	r4, r3
 80035f2:	4615      	mov	r5, r2
 80035f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	7023      	strb	r3, [r4, #0]
      break;
 80035fc:	e008      	b.n	8003610 <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 80035fe:	f107 0308 	add.w	r3, r7, #8
 8003602:	4a0f      	ldr	r2, [pc, #60]	; (8003640 <logRegion+0xd8>)
 8003604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003608:	6018      	str	r0, [r3, #0]
 800360a:	3304      	adds	r3, #4
 800360c:	7019      	strb	r1, [r3, #0]
      break;
 800360e:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 8003610:	8879      	ldrh	r1, [r7, #2]
 8003612:	f107 0308 	add.w	r3, r7, #8
 8003616:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <logRegion+0xdc>)
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f008 fb83 	bl	800bd24 <sniprintf>
 800361e:	4603      	mov	r3, r0
 8003620:	b29b      	uxth	r3, r3
}
 8003622:	4618      	mov	r0, r3
 8003624:	3728      	adds	r7, #40	; 0x28
 8003626:	46bd      	mov	sp, r7
 8003628:	bdb0      	pop	{r4, r5, r7, pc}
 800362a:	bf00      	nop
 800362c:	0800d7d8 	.word	0x0800d7d8
 8003630:	0800d7ec 	.word	0x0800d7ec
 8003634:	0800d800 	.word	0x0800d800
 8003638:	0800d810 	.word	0x0800d810
 800363c:	0800d824 	.word	0x0800d824
 8003640:	0800d838 	.word	0x0800d838
 8003644:	0800d840 	.word	0x0800d840

08003648 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d00a      	beq.n	800366e <levelToString+0x26>
 8003658:	2b03      	cmp	r3, #3
 800365a:	dc0a      	bgt.n	8003672 <levelToString+0x2a>
 800365c:	2b01      	cmp	r3, #1
 800365e:	d002      	beq.n	8003666 <levelToString+0x1e>
 8003660:	2b02      	cmp	r3, #2
 8003662:	d002      	beq.n	800366a <levelToString+0x22>
 8003664:	e005      	b.n	8003672 <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <levelToString+0x38>)
 8003668:	e004      	b.n	8003674 <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <levelToString+0x3c>)
 800366c:	e002      	b.n	8003674 <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <levelToString+0x40>)
 8003670:	e000      	b.n	8003674 <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <levelToString+0x44>)
  }
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	0800d844 	.word	0x0800d844
 8003684:	0800d84c 	.word	0x0800d84c
 8003688:	0800d854 	.word	0x0800d854
 800368c:	0800d85c 	.word	0x0800d85c

08003690 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
 800369c:	4613      	mov	r3, r2
 800369e:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 80036a0:	887c      	ldrh	r4, [r7, #2]
 80036a2:	787b      	ldrb	r3, [r7, #1]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ffcf 	bl	8003648 <levelToString>
 80036aa:	4603      	mov	r3, r0
 80036ac:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <logLevel+0x34>)
 80036ae:	4621      	mov	r1, r4
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f008 fb37 	bl	800bd24 <sniprintf>
 80036b6:	4603      	mov	r3, r0
 80036b8:	b29b      	uxth	r3, r3
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}
 80036c2:	bf00      	nop
 80036c4:	0800d864 	.word	0x0800d864

080036c8 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 80036c8:	b40c      	push	{r2, r3}
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b0c4      	sub	sp, #272	; 0x110
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4602      	mov	r2, r0
 80036d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036d6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036e0:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80036e4:	460a      	mov	r2, r1
 80036e6:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80036ee:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036f2:	f107 020c 	add.w	r2, r7, #12
 80036f6:	18d0      	adds	r0, r2, r3
 80036f8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036fc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003700:	b299      	uxth	r1, r3
 8003702:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003706:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	f7ff ffbf 	bl	8003690 <logLevel>
 8003712:	4603      	mov	r3, r0
 8003714:	461a      	mov	r2, r3
 8003716:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800371a:	4413      	add	r3, r2
 800371c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8003720:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003724:	f107 020c 	add.w	r2, r7, #12
 8003728:	18d0      	adds	r0, r2, r3
 800372a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800372e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003732:	b299      	uxth	r1, r3
 8003734:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003738:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	f7ff ff12 	bl	8003568 <logRegion>
 8003744:	4603      	mov	r3, r0
 8003746:	461a      	mov	r2, r3
 8003748:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800374c:	4413      	add	r3, r2
 800374e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 8003752:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8003756:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800375a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800375e:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8003760:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003764:	f107 020c 	add.w	r2, r7, #12
 8003768:	18d0      	adds	r0, r2, r3
 800376a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800376e:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8003772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003780:	f008 fb30 	bl	800bde4 <vsniprintf>
 8003784:	4603      	mov	r3, r0
 8003786:	b29a      	uxth	r2, r3
 8003788:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800378c:	4413      	add	r3, r2
 800378e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 8003792:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800379c:	461a      	mov	r2, r3
 800379e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037a6:	210d      	movs	r1, #13
 80037a8:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 80037aa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 80037b4:	461a      	mov	r2, r3
 80037b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037be:	210a      	movs	r1, #10
 80037c0:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 80037c2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 80037cc:	461a      	mov	r2, r3
 80037ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037d6:	2100      	movs	r1, #0
 80037d8:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 80037da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037de:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d805      	bhi.n	80037f4 <logApplication+0x12c>
  {
    printf("%s", logString);
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	4619      	mov	r1, r3
 80037ee:	4805      	ldr	r0, [pc, #20]	; (8003804 <logApplication+0x13c>)
 80037f0:	f008 fa80 	bl	800bcf4 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80037f4:	bf00      	nop
 80037f6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80037fa:	46bd      	mov	sp, r7
 80037fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003800:	b002      	add	sp, #8
 8003802:	4770      	bx	lr
 8003804:	0800d864 	.word	0x0800d864

08003808 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800380c:	4b26      	ldr	r3, [pc, #152]	; (80038a8 <SystemInit+0xa0>)
 800380e:	2200      	movs	r2, #0
 8003810:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003812:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <SystemInit+0xa0>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <SystemInit+0xa0>)
 800381a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800381e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003836:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800383a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800383c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003846:	4b19      	ldr	r3, [pc, #100]	; (80038ac <SystemInit+0xa4>)
 8003848:	4013      	ands	r3, r2
 800384a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800384c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003858:	f023 0305 	bic.w	r3, r3, #5
 800385c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003868:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003878:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <SystemInit+0xa8>)
 800387a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800387c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003880:	4a0b      	ldr	r2, [pc, #44]	; (80038b0 <SystemInit+0xa8>)
 8003882:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800388e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003892:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	e000ed00 	.word	0xe000ed00
 80038ac:	faf6fefb 	.word	0xfaf6fefb
 80038b0:	22041000 	.word	0x22041000

080038b4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6053      	str	r3, [r2, #4]
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e0042000 	.word	0xe0042000

080038d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038de:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <HAL_Init+0x3c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <HAL_Init+0x3c>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ea:	2003      	movs	r0, #3
 80038ec:	f000 f9c4 	bl	8003c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038f0:	2000      	movs	r0, #0
 80038f2:	f000 f80f 	bl	8003914 <HAL_InitTick>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	71fb      	strb	r3, [r7, #7]
 8003900:	e001      	b.n	8003906 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003902:	f7ff fbf9 	bl	80030f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003906:	79fb      	ldrb	r3, [r7, #7]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	58004000 	.word	0x58004000

08003914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003920:	4b17      	ldr	r3, [pc, #92]	; (8003980 <HAL_InitTick+0x6c>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d024      	beq.n	8003972 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003928:	f002 f968 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b14      	ldr	r3, [pc, #80]	; (8003980 <HAL_InitTick+0x6c>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	4619      	mov	r1, r3
 8003934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003938:	fbb3 f3f1 	udiv	r3, r3, r1
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f9de 	bl	8003d02 <HAL_SYSTICK_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10f      	bne.n	800396c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b0f      	cmp	r3, #15
 8003950:	d809      	bhi.n	8003966 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003952:	2200      	movs	r2, #0
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	f04f 30ff 	mov.w	r0, #4294967295
 800395a:	f000 f998 	bl	8003c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800395e:	4a09      	ldr	r2, [pc, #36]	; (8003984 <HAL_InitTick+0x70>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	e007      	b.n	8003976 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e004      	b.n	8003976 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
 8003970:	e001      	b.n	8003976 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000020 	.word	0x20000020
 8003984:	2000001c 	.word	0x2000001c

08003988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_IncTick+0x20>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_IncTick+0x24>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4413      	add	r3, r2
 8003998:	4a04      	ldr	r2, [pc, #16]	; (80039ac <HAL_IncTick+0x24>)
 800399a:	6013      	str	r3, [r2, #0]
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000020 	.word	0x20000020
 80039ac:	200005e0 	.word	0x200005e0

080039b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return uwTick;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <HAL_GetTick+0x14>)
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	200005e0 	.word	0x200005e0

080039c8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_GetTickPrio+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	2000001c 	.word	0x2000001c

080039e0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80039e4:	f7ff ff66 	bl	80038b4 <LL_DBGMCU_EnableDBGSleepMode>
}
 80039e8:	bf00      	nop
 80039ea:	bd80      	pop	{r7, pc}

080039ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <__NVIC_SetPriorityGrouping+0x44>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a1e:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <__NVIC_SetPriorityGrouping+0x44>)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	60d3      	str	r3, [r2, #12]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <__NVIC_GetPriorityGrouping+0x18>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	f003 0307 	and.w	r3, r3, #7
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	db0b      	blt.n	8003a7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	f003 021f 	and.w	r2, r3, #31
 8003a68:	4907      	ldr	r1, [pc, #28]	; (8003a88 <__NVIC_EnableIRQ+0x38>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	2001      	movs	r0, #1
 8003a72:	fa00 f202 	lsl.w	r2, r0, r2
 8003a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	e000e100 	.word	0xe000e100

08003a8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	db12      	blt.n	8003ac4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	f003 021f 	and.w	r2, r3, #31
 8003aa4:	490a      	ldr	r1, [pc, #40]	; (8003ad0 <__NVIC_DisableIRQ+0x44>)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	2001      	movs	r0, #1
 8003aae:	fa00 f202 	lsl.w	r2, r0, r2
 8003ab2:	3320      	adds	r3, #32
 8003ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ab8:	f3bf 8f4f 	dsb	sy
}
 8003abc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003abe:	f3bf 8f6f 	isb	sy
}
 8003ac2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000e100 	.word	0xe000e100

08003ad4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	db0c      	blt.n	8003b00 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	f003 021f 	and.w	r2, r3, #31
 8003aec:	4907      	ldr	r1, [pc, #28]	; (8003b0c <__NVIC_SetPendingIRQ+0x38>)
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2001      	movs	r0, #1
 8003af6:	fa00 f202 	lsl.w	r2, r0, r2
 8003afa:	3340      	adds	r3, #64	; 0x40
 8003afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000e100 	.word	0xe000e100

08003b10 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	db0c      	blt.n	8003b3c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	f003 021f 	and.w	r2, r3, #31
 8003b28:	4907      	ldr	r1, [pc, #28]	; (8003b48 <__NVIC_ClearPendingIRQ+0x38>)
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2001      	movs	r0, #1
 8003b32:	fa00 f202 	lsl.w	r2, r0, r2
 8003b36:	3360      	adds	r3, #96	; 0x60
 8003b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000e100 	.word	0xe000e100

08003b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	6039      	str	r1, [r7, #0]
 8003b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	db0a      	blt.n	8003b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	490c      	ldr	r1, [pc, #48]	; (8003b98 <__NVIC_SetPriority+0x4c>)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	0112      	lsls	r2, r2, #4
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	440b      	add	r3, r1
 8003b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b74:	e00a      	b.n	8003b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	4908      	ldr	r1, [pc, #32]	; (8003b9c <__NVIC_SetPriority+0x50>)
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	3b04      	subs	r3, #4
 8003b84:	0112      	lsls	r2, r2, #4
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	440b      	add	r3, r1
 8003b8a:	761a      	strb	r2, [r3, #24]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	e000e100 	.word	0xe000e100
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b089      	sub	sp, #36	; 0x24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f1c3 0307 	rsb	r3, r3, #7
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	bf28      	it	cs
 8003bbe:	2304      	movcs	r3, #4
 8003bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d902      	bls.n	8003bd0 <NVIC_EncodePriority+0x30>
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3b03      	subs	r3, #3
 8003bce:	e000      	b.n	8003bd2 <NVIC_EncodePriority+0x32>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43da      	mvns	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	401a      	ands	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003be8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf2:	43d9      	mvns	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf8:	4313      	orrs	r3, r2
         );
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3724      	adds	r7, #36	; 0x24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003c0c:	f3bf 8f4f 	dsb	sy
}
 8003c10:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <__NVIC_SystemReset+0x24>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003c1a:	4904      	ldr	r1, [pc, #16]	; (8003c2c <__NVIC_SystemReset+0x24>)
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <__NVIC_SystemReset+0x28>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c22:	f3bf 8f4f 	dsb	sy
}
 8003c26:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003c28:	bf00      	nop
 8003c2a:	e7fd      	b.n	8003c28 <__NVIC_SystemReset+0x20>
 8003c2c:	e000ed00 	.word	0xe000ed00
 8003c30:	05fa0004 	.word	0x05fa0004

08003c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c44:	d301      	bcc.n	8003c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00f      	b.n	8003c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <SysTick_Config+0x40>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c52:	210f      	movs	r1, #15
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	f7ff ff78 	bl	8003b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <SysTick_Config+0x40>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c62:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <SysTick_Config+0x40>)
 8003c64:	2207      	movs	r2, #7
 8003c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	e000e010 	.word	0xe000e010

08003c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff feb3 	bl	80039ec <__NVIC_SetPriorityGrouping>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9c:	f7ff feca 	bl	8003a34 <__NVIC_GetPriorityGrouping>
 8003ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff ff7a 	bl	8003ba0 <NVIC_EncodePriority>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff49 	bl	8003b4c <__NVIC_SetPriority>
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff febd 	bl	8003a50 <__NVIC_EnableIRQ>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fecd 	bl	8003a8c <__NVIC_DisableIRQ>
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003cfe:	f7ff ff83 	bl	8003c08 <__NVIC_SystemReset>

08003d02 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ff92 	bl	8003c34 <SysTick_Config>
 8003d10:	4603      	mov	r3, r0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	4603      	mov	r3, r0
 8003d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fed3 	bl	8003ad4 <__NVIC_SetPendingIRQ>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fee3 	bl	8003b10 <__NVIC_ClearPendingIRQ>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e08e      	b.n	8003e84 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_DMA_Init+0x138>)
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d80f      	bhi.n	8003d92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b45      	ldr	r3, [pc, #276]	; (8003e90 <HAL_DMA_Init+0x13c>)
 8003d7a:	4413      	add	r3, r2
 8003d7c:	4a45      	ldr	r2, [pc, #276]	; (8003e94 <HAL_DMA_Init+0x140>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	009a      	lsls	r2, r3, #2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a42      	ldr	r2, [pc, #264]	; (8003e98 <HAL_DMA_Init+0x144>)
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d90:	e00e      	b.n	8003db0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <HAL_DMA_Init+0x148>)
 8003d9a:	4413      	add	r3, r2
 8003d9c:	4a3d      	ldr	r2, [pc, #244]	; (8003e94 <HAL_DMA_Init+0x140>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	009a      	lsls	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a3c      	ldr	r2, [pc, #240]	; (8003ea0 <HAL_DMA_Init+0x14c>)
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa74 	bl	80042f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e10:	d102      	bne.n	8003e18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e20:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003e24:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e2e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d010      	beq.n	8003e5a <HAL_DMA_Init+0x106>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d80c      	bhi.n	8003e5a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fa93 	bl	800436c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	e008      	b.n	8003e6c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40020407 	.word	0x40020407
 8003e90:	bffdfff8 	.word	0xbffdfff8
 8003e94:	cccccccd 	.word	0xcccccccd
 8003e98:	40020000 	.word	0x40020000
 8003e9c:	bffdfbf8 	.word	0xbffdfbf8
 8003ea0:	40020400 	.word	0x40020400

08003ea4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_DMA_Start_IT+0x20>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e066      	b.n	8003f92 <HAL_DMA_Start_IT+0xee>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d155      	bne.n	8003f84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f9b9 	bl	8004274 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 020e 	orr.w	r2, r2, #14
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	e00f      	b.n	8003f3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 020a 	orr.w	r2, r2, #10
 8003f3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0201 	orr.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e005      	b.n	8003f90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e04f      	b.n	800404c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d008      	beq.n	8003fca <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2204      	movs	r2, #4
 8003fbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e040      	b.n	800404c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 020e 	bic.w	r2, r2, #14
 8003fd8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0201 	bic.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f003 021c 	and.w	r2, r3, #28
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f202 	lsl.w	r2, r1, r2
 800400c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004016:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00c      	beq.n	800403a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800402e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004038:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d005      	beq.n	800407c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2204      	movs	r2, #4
 8004074:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	e047      	b.n	800410c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 020e 	bic.w	r2, r2, #14
 800408a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	f003 021c 	and.w	r2, r3, #28
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	2101      	movs	r1, #1
 80040ba:	fa01 f202 	lsl.w	r2, r1, r2
 80040be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
    }
  }
  return status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f003 031c 	and.w	r3, r3, #28
 8004136:	2204      	movs	r2, #4
 8004138:	409a      	lsls	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d026      	beq.n	8004190 <HAL_DMA_IRQHandler+0x7a>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d021      	beq.n	8004190 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0204 	bic.w	r2, r2, #4
 8004168:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	f003 021c 	and.w	r2, r3, #28
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	2104      	movs	r1, #4
 8004178:	fa01 f202 	lsl.w	r2, r1, r2
 800417c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	2b00      	cmp	r3, #0
 8004184:	d071      	beq.n	800426a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800418e:	e06c      	b.n	800426a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004194:	f003 031c 	and.w	r3, r3, #28
 8004198:	2202      	movs	r2, #2
 800419a:	409a      	lsls	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d02e      	beq.n	8004202 <HAL_DMA_IRQHandler+0xec>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d029      	beq.n	8004202 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 020a 	bic.w	r2, r2, #10
 80041ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d8:	f003 021c 	and.w	r2, r3, #28
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	2102      	movs	r1, #2
 80041e2:	fa01 f202 	lsl.w	r2, r1, r2
 80041e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d038      	beq.n	800426a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004200:	e033      	b.n	800426a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f003 031c 	and.w	r3, r3, #28
 800420a:	2208      	movs	r2, #8
 800420c:	409a      	lsls	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d02a      	beq.n	800426c <HAL_DMA_IRQHandler+0x156>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d025      	beq.n	800426c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 020e 	bic.w	r2, r2, #14
 800422e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	f003 021c 	and.w	r2, r3, #28
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	2101      	movs	r1, #1
 800423e:	fa01 f202 	lsl.w	r2, r1, r2
 8004242:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800426a:	bf00      	nop
 800426c:	bf00      	nop
}
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800428a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800429c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f003 021c 	and.w	r2, r3, #28
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2101      	movs	r1, #1
 80042ac:	fa01 f202 	lsl.w	r2, r1, r2
 80042b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d108      	bne.n	80042d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042d2:	e007      	b.n	80042e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	60da      	str	r2, [r3, #12]
}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	4b17      	ldr	r3, [pc, #92]	; (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004300:	429a      	cmp	r2, r3
 8004302:	d80a      	bhi.n	800431a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004310:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6493      	str	r3, [r2, #72]	; 0x48
 8004318:	e007      	b.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	089b      	lsrs	r3, r3, #2
 8004320:	009a      	lsls	r2, r3, #2
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004324:	4413      	add	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	3b08      	subs	r3, #8
 8004332:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004340:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	2201      	movs	r2, #1
 800434a:	409a      	lsls	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40020407 	.word	0x40020407
 8004360:	4002081c 	.word	0x4002081c
 8004364:	cccccccd 	.word	0xcccccccd
 8004368:	40020880 	.word	0x40020880

0800436c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800437c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	461a      	mov	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004390:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b01      	subs	r3, #1
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2201      	movs	r2, #1
 800439c:	409a      	lsls	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	1000823f 	.word	0x1000823f
 80043b4:	40020940 	.word	0x40020940

080043b8 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80043c4:	4b41      	ldr	r3, [pc, #260]	; (80044cc <HAL_FLASH_IRQHandler+0x114>)
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80043cc:	4013      	ands	r3, r2
 80043ce:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 80043d0:	4b3e      	ldr	r3, [pc, #248]	; (80044cc <HAL_FLASH_IRQHandler+0x114>)
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	4b3e      	ldr	r3, [pc, #248]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	43db      	mvns	r3, r3
 80043da:	493c      	ldr	r1, [pc, #240]	; (80044cc <HAL_FLASH_IRQHandler+0x114>)
 80043dc:	4013      	ands	r3, r2
 80043de:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 80043e0:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <HAL_FLASH_IRQHandler+0x11c>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 80043ec:	4b38      	ldr	r3, [pc, #224]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	e008      	b.n	8004406 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 80043f4:	4b36      	ldr	r3, [pc, #216]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 8004400:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d022      	beq.n	8004452 <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800440c:	4b30      	ldr	r3, [pc, #192]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	4313      	orrs	r3, r2
 8004414:	4a2e      	ldr	r2, [pc, #184]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 8004416:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <HAL_FLASH_IRQHandler+0x7a>
 8004422:	4b2a      	ldr	r3, [pc, #168]	; (80044cc <HAL_FLASH_IRQHandler+0x114>)
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800442c:	4927      	ldr	r1, [pc, #156]	; (80044cc <HAL_FLASH_IRQHandler+0x114>)
 800442e:	4313      	orrs	r3, r2
 8004430:	618b      	str	r3, [r1, #24]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <HAL_FLASH_IRQHandler+0x8e>
 800443c:	4a23      	ldr	r2, [pc, #140]	; (80044cc <HAL_FLASH_IRQHandler+0x114>)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004444:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004446:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 8004448:	2200      	movs	r2, #0
 800444a:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f84d 	bl	80044ec <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004452:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <HAL_FLASH_IRQHandler+0x114>)
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	d124      	bne.n	80044a8 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800445e:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <HAL_FLASH_IRQHandler+0x114>)
 8004460:	2201      	movs	r2, #1
 8004462:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8004464:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d117      	bne.n	800449c <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800446c:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	3b01      	subs	r3, #1
 8004472:	4a17      	ldr	r2, [pc, #92]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 8004474:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 8004476:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	3301      	adds	r3, #1
 8004484:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 8004486:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f837 	bl	8004500 <FLASH_PageErase>
 8004492:	e006      	b.n	80044a2 <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 8004496:	2200      	movs	r2, #0
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	e002      	b.n	80044a2 <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f818 	bl	80044d8 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d108      	bne.n	80044c2 <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_FLASH_IRQHandler+0x114>)
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	4a05      	ldr	r2, [pc, #20]	; (80044cc <HAL_FLASH_IRQHandler+0x114>)
 80044b6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80044ba:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <HAL_FLASH_IRQHandler+0x118>)
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
  }
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	58004000 	.word	0x58004000
 80044d0:	200005e4 	.word	0x200005e4
 80044d4:	00040001 	.word	0x00040001

080044d8 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <FLASH_PageErase+0x30>)
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4313      	orrs	r3, r2
 8004516:	4a06      	ldr	r2, [pc, #24]	; (8004530 <FLASH_PageErase+0x30>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451c:	f043 0302 	orr.w	r3, r3, #2
 8004520:	6153      	str	r3, [r2, #20]
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	58004000 	.word	0x58004000

08004534 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004542:	e14c      	b.n	80047de <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	2101      	movs	r1, #1
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	fa01 f303 	lsl.w	r3, r1, r3
 8004550:	4013      	ands	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 813e 	beq.w	80047d8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d005      	beq.n	8004574 <HAL_GPIO_Init+0x40>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d130      	bne.n	80045d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	2203      	movs	r2, #3
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045aa:	2201      	movs	r2, #1
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4013      	ands	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	f003 0201 	and.w	r2, r3, #1
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d017      	beq.n	8004612 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	2203      	movs	r2, #3
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d123      	bne.n	8004666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	08da      	lsrs	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3208      	adds	r2, #8
 8004626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800462a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	220f      	movs	r2, #15
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4013      	ands	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	08da      	lsrs	r2, r3, #3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3208      	adds	r2, #8
 8004660:	6939      	ldr	r1, [r7, #16]
 8004662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	2203      	movs	r2, #3
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0203 	and.w	r2, r3, #3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 8098 	beq.w	80047d8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80046a8:	4a54      	ldr	r2, [pc, #336]	; (80047fc <HAL_GPIO_Init+0x2c8>)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	089b      	lsrs	r3, r3, #2
 80046ae:	3302      	adds	r3, #2
 80046b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	220f      	movs	r2, #15
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4013      	ands	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046d2:	d019      	beq.n	8004708 <HAL_GPIO_Init+0x1d4>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a4a      	ldr	r2, [pc, #296]	; (8004800 <HAL_GPIO_Init+0x2cc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <HAL_GPIO_Init+0x1d0>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a49      	ldr	r2, [pc, #292]	; (8004804 <HAL_GPIO_Init+0x2d0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00d      	beq.n	8004700 <HAL_GPIO_Init+0x1cc>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a48      	ldr	r2, [pc, #288]	; (8004808 <HAL_GPIO_Init+0x2d4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d007      	beq.n	80046fc <HAL_GPIO_Init+0x1c8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a47      	ldr	r2, [pc, #284]	; (800480c <HAL_GPIO_Init+0x2d8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d101      	bne.n	80046f8 <HAL_GPIO_Init+0x1c4>
 80046f4:	2304      	movs	r3, #4
 80046f6:	e008      	b.n	800470a <HAL_GPIO_Init+0x1d6>
 80046f8:	2307      	movs	r3, #7
 80046fa:	e006      	b.n	800470a <HAL_GPIO_Init+0x1d6>
 80046fc:	2303      	movs	r3, #3
 80046fe:	e004      	b.n	800470a <HAL_GPIO_Init+0x1d6>
 8004700:	2302      	movs	r3, #2
 8004702:	e002      	b.n	800470a <HAL_GPIO_Init+0x1d6>
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <HAL_GPIO_Init+0x1d6>
 8004708:	2300      	movs	r3, #0
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	f002 0203 	and.w	r2, r2, #3
 8004710:	0092      	lsls	r2, r2, #2
 8004712:	4093      	lsls	r3, r2
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800471a:	4938      	ldr	r1, [pc, #224]	; (80047fc <HAL_GPIO_Init+0x2c8>)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	089b      	lsrs	r3, r3, #2
 8004720:	3302      	adds	r3, #2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004728:	4b39      	ldr	r3, [pc, #228]	; (8004810 <HAL_GPIO_Init+0x2dc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	43db      	mvns	r3, r3
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4013      	ands	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800474c:	4a30      	ldr	r2, [pc, #192]	; (8004810 <HAL_GPIO_Init+0x2dc>)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004752:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <HAL_GPIO_Init+0x2dc>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	43db      	mvns	r3, r3
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004776:	4a26      	ldr	r2, [pc, #152]	; (8004810 <HAL_GPIO_Init+0x2dc>)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800477c:	4b24      	ldr	r3, [pc, #144]	; (8004810 <HAL_GPIO_Init+0x2dc>)
 800477e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	43db      	mvns	r3, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047a2:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <HAL_GPIO_Init+0x2dc>)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80047aa:	4b19      	ldr	r3, [pc, #100]	; (8004810 <HAL_GPIO_Init+0x2dc>)
 80047ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4013      	ands	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047d0:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <HAL_GPIO_Init+0x2dc>)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3301      	adds	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f47f aeab 	bne.w	8004544 <HAL_GPIO_Init+0x10>
  }
}
 80047ee:	bf00      	nop
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40010000 	.word	0x40010000
 8004800:	48000400 	.word	0x48000400
 8004804:	48000800 	.word	0x48000800
 8004808:	48000c00 	.word	0x48000c00
 800480c:	48001000 	.word	0x48001000
 8004810:	58000800 	.word	0x58000800

08004814 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800481e:	4b08      	ldr	r3, [pc, #32]	; (8004840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d006      	beq.n	8004838 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800482a:	4a05      	ldr	r2, [pc, #20]	; (8004840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fd fa46 	bl	8001cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	58000800 	.word	0x58000800

08004844 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <HAL_HSEM_IRQHandler+0x30>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004850:	4b08      	ldr	r3, [pc, #32]	; (8004874 <HAL_HSEM_IRQHandler+0x30>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	43db      	mvns	r3, r3
 8004858:	4906      	ldr	r1, [pc, #24]	; (8004874 <HAL_HSEM_IRQHandler+0x30>)
 800485a:	4013      	ands	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800485e:	4a05      	ldr	r2, [pc, #20]	; (8004874 <HAL_HSEM_IRQHandler+0x30>)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f807 	bl	8004878 <HAL_HSEM_FreeCallback>
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	58001500 	.word	0x58001500

08004878 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01e      	beq.n	80048dc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <HAL_IPCC_Init+0x60>)
 80048a0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fe fc62 	bl	8003178 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80048b4:	68b8      	ldr	r0, [r7, #8]
 80048b6:	f000 f85b 	bl	8004970 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f82c 	bl	8004924 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80048da:	e001      	b.n	80048e0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	58000c00 	.word	0x58000c00

080048f0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	4613      	mov	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e00f      	b.n	8004952 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <IPCC_SetDefaultCallbacks+0x44>)
 800493c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3306      	adds	r3, #6
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	4a08      	ldr	r2, [pc, #32]	; (800496c <IPCC_SetDefaultCallbacks+0x48>)
 800494a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3301      	adds	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b05      	cmp	r3, #5
 8004956:	d9ec      	bls.n	8004932 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	080048f1 	.word	0x080048f1
 800496c:	0800490b 	.word	0x0800490b

08004970 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004984:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	223f      	movs	r2, #63	; 0x3f
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a04      	ldr	r2, [pc, #16]	; (80049b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a6:	6013      	str	r3, [r2, #0]
}
 80049a8:	bf00      	nop
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	58000400 	.word	0x58000400

080049b8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <LL_EXTI_ReadFlag_0_31+0x1c>)
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4013      	ands	r3, r2
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	58000800 	.word	0x58000800

080049e8 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 80049f0:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <LL_EXTI_ReadFlag_32_63+0x1c>)
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4013      	ands	r3, r2
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	58000800 	.word	0x58000800

08004a08 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004a10:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	60d3      	str	r3, [r2, #12]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	58000800 	.word	0x58000800

08004a28 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004a30:	4a04      	ldr	r2, [pc, #16]	; (8004a44 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	58000800 	.word	0x58000800

08004a48 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	58000400 	.word	0x58000400

08004a64 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8004a68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004a6c:	f7ff ffac 	bl	80049c8 <LL_EXTI_ReadFlag_0_31>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004a76:	f7ff ff9f 	bl	80049b8 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004a7a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004a7e:	f7ff ffc3 	bl	8004a08 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 8004a82:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004a86:	f7ff ff9f 	bl	80049c8 <LL_EXTI_ReadFlag_0_31>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8004a90:	f000 f811 	bl	8004ab6 <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8004a94:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004a98:	f7ff ffb6 	bl	8004a08 <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 8004a9c:	2002      	movs	r0, #2
 8004a9e:	f7ff ffa3 	bl	80049e8 <LL_EXTI_ReadFlag_32_63>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004aa8:	f000 f80c 	bl	8004ac4 <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8004aac:	2002      	movs	r0, #2
 8004aae:	f7ff ffbb 	bl	8004a28 <LL_EXTI_ClearFlag_32_63>
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae4:	d101      	bne.n	8004aea <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <LL_RCC_HSE_Enable>:
{
 8004af6:	b480      	push	{r7}
 8004af8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
}
 8004b0a:	bf00      	nop
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_RCC_HSE_Disable>:
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b26:	6013      	str	r3, [r2, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <LL_RCC_HSE_IsReady>:
{
 8004b32:	b480      	push	{r7}
 8004b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b44:	d101      	bne.n	8004b4a <LL_RCC_HSE_IsReady+0x18>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <LL_RCC_HSE_IsReady+0x1a>
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <LL_RCC_HSI_Enable>:
{
 8004b56:	b480      	push	{r7}
 8004b58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b68:	6013      	str	r3, [r2, #0]
}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <LL_RCC_HSI_Disable>:
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b86:	6013      	str	r3, [r2, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <LL_RCC_HSI_IsReady>:
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba4:	d101      	bne.n	8004baa <LL_RCC_HSI_IsReady+0x18>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <LL_RCC_HSI_IsReady+0x1a>
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	604b      	str	r3, [r1, #4]
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <LL_RCC_HSI48_Enable>:
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <LL_RCC_HSI48_Disable>:
{
 8004c02:	b480      	push	{r7}
 8004c04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004c1a:	bf00      	nop
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_RCC_HSI48_IsReady>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d101      	bne.n	8004c3c <LL_RCC_HSI48_IsReady+0x18>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <LL_RCC_HSI48_IsReady+0x1a>
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <LL_RCC_LSE_Enable>:
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_RCC_LSE_Disable>:
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c7a:	f023 0301 	bic.w	r3, r3, #1
 8004c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c82:	bf00      	nop
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <LL_RCC_LSE_EnableBypass>:
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c9c:	f043 0304 	orr.w	r3, r3, #4
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <LL_RCC_LSE_DisableBypass>:
{
 8004cae:	b480      	push	{r7}
 8004cb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cbe:	f023 0304 	bic.w	r3, r3, #4
 8004cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004cc6:	bf00      	nop
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <LL_RCC_LSE_IsReady>:
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d101      	bne.n	8004ce8 <LL_RCC_LSE_IsReady+0x18>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <LL_RCC_LSE_IsReady+0x1a>
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <LL_RCC_LSI1_Enable>:
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d0c:	bf00      	nop
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <LL_RCC_LSI1_Disable>:
{
 8004d16:	b480      	push	{r7}
 8004d18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d2e:	bf00      	nop
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <LL_RCC_LSI1_IsReady>:
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d101      	bne.n	8004d50 <LL_RCC_LSI1_IsReady+0x18>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <LL_RCC_LSI1_IsReady+0x1a>
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <LL_RCC_LSI2_Enable>:
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d6c:	f043 0304 	orr.w	r3, r3, #4
 8004d70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_RCC_LSI2_Disable>:
{
 8004d7e:	b480      	push	{r7}
 8004d80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d8e:	f023 0304 	bic.w	r3, r3, #4
 8004d92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d96:	bf00      	nop
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_RCC_LSI2_IsReady>:
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d101      	bne.n	8004db8 <LL_RCC_LSI2_IsReady+0x18>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <LL_RCC_LSI2_IsReady+0x1a>
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <LL_RCC_LSI2_SetTrimming>:
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd4:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <LL_RCC_MSI_Enable>:
{
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	6013      	str	r3, [r2, #0]
}
 8004e06:	bf00      	nop
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <LL_RCC_MSI_Disable>:
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	6013      	str	r3, [r2, #0]
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LL_RCC_MSI_IsReady>:
{
 8004e2e:	b480      	push	{r7}
 8004e30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d101      	bne.n	8004e44 <LL_RCC_MSI_IsReady+0x16>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <LL_RCC_MSI_IsReady+0x18>
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LL_RCC_MSI_SetRange>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_RCC_MSI_GetRange>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e88:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2bb0      	cmp	r3, #176	; 0xb0
 8004e8e:	d901      	bls.n	8004e94 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004e90:	23b0      	movs	r3, #176	; 0xb0
 8004e92:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004e94:	687b      	ldr	r3, [r7, #4]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	604b      	str	r3, [r1, #4]
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <LL_RCC_SetSysClkSource>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f023 0203 	bic.w	r2, r3, #3
 8004ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	608b      	str	r3, [r1, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <LL_RCC_GetSysClkSource>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <LL_RCC_SetAHBPrescaler>:
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	608b      	str	r3, [r1, #8]
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <LL_RCC_SetAHB4Prescaler>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f70:	f023 020f 	bic.w	r2, r3, #15
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	091b      	lsrs	r3, r3, #4
 8004f78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <LL_RCC_SetAPB1Prescaler>:
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <LL_RCC_SetAPB2Prescaler>:
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	608b      	str	r3, [r1, #8]
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <LL_RCC_GetAHBPrescaler>:
{
 8004fde:	b480      	push	{r7}
 8004fe0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <LL_RCC_GetAHB4Prescaler>:
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005008:	4618      	mov	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <LL_RCC_GetAPB1Prescaler>:
{
 8005012:	b480      	push	{r7}
 8005014:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005020:	4618      	mov	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <LL_RCC_GetAPB2Prescaler>:
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800502e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <LL_RCC_PLL_Enable>:
{
 8005042:	b480      	push	{r7}
 8005044:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005054:	6013      	str	r3, [r2, #0]
}
 8005056:	bf00      	nop
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_RCC_PLL_Disable>:
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800506e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005072:	6013      	str	r3, [r2, #0]
}
 8005074:	bf00      	nop
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <LL_RCC_PLL_IsReady>:
{
 800507e:	b480      	push	{r7}
 8005080:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005090:	d101      	bne.n	8005096 <LL_RCC_PLL_IsReady+0x18>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <LL_RCC_PLL_IsReady+0x1a>
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <LL_RCC_PLL_GetN>:
{
 80050a2:	b480      	push	{r7}
 80050a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80050a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <LL_RCC_PLL_GetR>:
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80050c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <LL_RCC_PLL_GetDivider>:
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <LL_RCC_PLL_GetMainSource>:
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80050f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f003 0303 	and.w	r3, r3, #3
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005116:	d101      	bne.n	800511c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800512c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005130:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800513c:	d101      	bne.n	8005142 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800514e:	b480      	push	{r7}
 8005150:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005156:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800515a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800515e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005162:	d101      	bne.n	8005168 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005186:	d101      	bne.n	800518c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005188:	2301      	movs	r3, #1
 800518a:	e000      	b.n	800518e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800519c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051aa:	d101      	bne.n	80051b0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b08d      	sub	sp, #52	; 0x34
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e363      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 808d 	beq.w	80052f6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051dc:	f7ff fe8a 	bl	8004ef4 <LL_RCC_GetSysClkSource>
 80051e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051e2:	f7ff ff83 	bl	80050ec <LL_RCC_PLL_GetMainSource>
 80051e6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_RCC_OscConfig+0x3e>
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	2b0c      	cmp	r3, #12
 80051f2:	d147      	bne.n	8005284 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d144      	bne.n	8005284 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e347      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800520a:	f7ff fe35 	bl	8004e78 <LL_RCC_MSI_GetRange>
 800520e:	4603      	mov	r3, r0
 8005210:	429c      	cmp	r4, r3
 8005212:	d914      	bls.n	800523e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fd2f 	bl	8005c7c <RCC_SetFlashLatencyFromMSIRange>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e336      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fe0f 	bl	8004e50 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff fe33 	bl	8004ea2 <LL_RCC_MSI_SetCalibTrimming>
 800523c:	e013      	b.n	8005266 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fe04 	bl	8004e50 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff fe28 	bl	8004ea2 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fd10 	bl	8005c7c <RCC_SetFlashLatencyFromMSIRange>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e317      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005266:	f000 fcc9 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 800526a:	4603      	mov	r3, r0
 800526c:	4aa4      	ldr	r2, [pc, #656]	; (8005500 <HAL_RCC_OscConfig+0x344>)
 800526e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005270:	4ba4      	ldr	r3, [pc, #656]	; (8005504 <HAL_RCC_OscConfig+0x348>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe fb4d 	bl	8003914 <HAL_InitTick>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d039      	beq.n	80052f4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e308      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01e      	beq.n	80052ca <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800528c:	f7ff fdb1 	bl	8004df2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005290:	f7fe fb8e 	bl	80039b0 <HAL_GetTick>
 8005294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005298:	f7fe fb8a 	bl	80039b0 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e2f5      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80052aa:	f7ff fdc0 	bl	8004e2e <LL_RCC_MSI_IsReady>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0f1      	beq.n	8005298 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fdc9 	bl	8004e50 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff fded 	bl	8004ea2 <LL_RCC_MSI_SetCalibTrimming>
 80052c8:	e015      	b.n	80052f6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052ca:	f7ff fda1 	bl	8004e10 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052ce:	f7fe fb6f 	bl	80039b0 <HAL_GetTick>
 80052d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052d6:	f7fe fb6b 	bl	80039b0 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e2d6      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80052e8:	f7ff fda1 	bl	8004e2e <LL_RCC_MSI_IsReady>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f1      	bne.n	80052d6 <HAL_RCC_OscConfig+0x11a>
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80052f4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d047      	beq.n	8005392 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005302:	f7ff fdf7 	bl	8004ef4 <LL_RCC_GetSysClkSource>
 8005306:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005308:	f7ff fef0 	bl	80050ec <LL_RCC_PLL_GetMainSource>
 800530c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d005      	beq.n	8005320 <HAL_RCC_OscConfig+0x164>
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	2b0c      	cmp	r3, #12
 8005318:	d108      	bne.n	800532c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2b03      	cmp	r3, #3
 800531e:	d105      	bne.n	800532c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d134      	bne.n	8005392 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e2b4      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005334:	d102      	bne.n	800533c <HAL_RCC_OscConfig+0x180>
 8005336:	f7ff fbde 	bl	8004af6 <LL_RCC_HSE_Enable>
 800533a:	e001      	b.n	8005340 <HAL_RCC_OscConfig+0x184>
 800533c:	f7ff fbea 	bl	8004b14 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d012      	beq.n	800536e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fe fb32 	bl	80039b0 <HAL_GetTick>
 800534c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005350:	f7fe fb2e 	bl	80039b0 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e299      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005362:	f7ff fbe6 	bl	8004b32 <LL_RCC_HSE_IsReady>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f1      	beq.n	8005350 <HAL_RCC_OscConfig+0x194>
 800536c:	e011      	b.n	8005392 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fe fb1f 	bl	80039b0 <HAL_GetTick>
 8005372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005376:	f7fe fb1b 	bl	80039b0 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b64      	cmp	r3, #100	; 0x64
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e286      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005388:	f7ff fbd3 	bl	8004b32 <LL_RCC_HSE_IsReady>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f1      	bne.n	8005376 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d04c      	beq.n	8005438 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800539e:	f7ff fda9 	bl	8004ef4 <LL_RCC_GetSysClkSource>
 80053a2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053a4:	f7ff fea2 	bl	80050ec <LL_RCC_PLL_GetMainSource>
 80053a8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_OscConfig+0x200>
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d10e      	bne.n	80053d4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d10b      	bne.n	80053d4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e266      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fbf2 	bl	8004bb6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80053d2:	e031      	b.n	8005438 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d019      	beq.n	8005410 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053dc:	f7ff fbbb 	bl	8004b56 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7fe fae6 	bl	80039b0 <HAL_GetTick>
 80053e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e8:	f7fe fae2 	bl	80039b0 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e24d      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80053fa:	f7ff fbca 	bl	8004b92 <LL_RCC_HSI_IsReady>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f1      	beq.n	80053e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fbd4 	bl	8004bb6 <LL_RCC_HSI_SetCalibTrimming>
 800540e:	e013      	b.n	8005438 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005410:	f7ff fbb0 	bl	8004b74 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fe facc 	bl	80039b0 <HAL_GetTick>
 8005418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800541c:	f7fe fac8 	bl	80039b0 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e233      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800542e:	f7ff fbb0 	bl	8004b92 <LL_RCC_HSI_IsReady>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f1      	bne.n	800541c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80a3 	beq.w	8005598 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d076      	beq.n	8005548 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b00      	cmp	r3, #0
 8005464:	d046      	beq.n	80054f4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005466:	f7ff fc67 	bl	8004d38 <LL_RCC_LSI1_IsReady>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d113      	bne.n	8005498 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005470:	f7ff fc40 	bl	8004cf4 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005474:	f7fe fa9c 	bl	80039b0 <HAL_GetTick>
 8005478:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800547c:	f7fe fa98 	bl	80039b0 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e203      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800548e:	f7ff fc53 	bl	8004d38 <LL_RCC_LSI1_IsReady>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f1      	beq.n	800547c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005498:	f7ff fc60 	bl	8004d5c <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fe fa88 	bl	80039b0 <HAL_GetTick>
 80054a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80054a4:	f7fe fa84 	bl	80039b0 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e1ef      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80054b6:	f7ff fc73 	bl	8004da0 <LL_RCC_LSI2_IsReady>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f1      	beq.n	80054a4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff fc7d 	bl	8004dc4 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80054ca:	f7ff fc24 	bl	8004d16 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fe fa6f 	bl	80039b0 <HAL_GetTick>
 80054d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80054d6:	f7fe fa6b 	bl	80039b0 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e1d6      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80054e8:	f7ff fc26 	bl	8004d38 <LL_RCC_LSI1_IsReady>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f1      	bne.n	80054d6 <HAL_RCC_OscConfig+0x31a>
 80054f2:	e051      	b.n	8005598 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80054f4:	f7ff fbfe 	bl	8004cf4 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fe fa5a 	bl	80039b0 <HAL_GetTick>
 80054fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80054fe:	e00c      	b.n	800551a <HAL_RCC_OscConfig+0x35e>
 8005500:	20000018 	.word	0x20000018
 8005504:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005508:	f7fe fa52 	bl	80039b0 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e1bd      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800551a:	f7ff fc0d 	bl	8004d38 <LL_RCC_LSI1_IsReady>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0f1      	beq.n	8005508 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005524:	f7ff fc2b 	bl	8004d7e <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800552a:	f7fe fa41 	bl	80039b0 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b03      	cmp	r3, #3
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e1ac      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800553c:	f7ff fc30 	bl	8004da0 <LL_RCC_LSI2_IsReady>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f1      	bne.n	800552a <HAL_RCC_OscConfig+0x36e>
 8005546:	e027      	b.n	8005598 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005548:	f7ff fc19 	bl	8004d7e <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554c:	f7fe fa30 	bl	80039b0 <HAL_GetTick>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005554:	f7fe fa2c 	bl	80039b0 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b03      	cmp	r3, #3
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e197      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005566:	f7ff fc1b 	bl	8004da0 <LL_RCC_LSI2_IsReady>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1f1      	bne.n	8005554 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005570:	f7ff fbd1 	bl	8004d16 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005574:	f7fe fa1c 	bl	80039b0 <HAL_GetTick>
 8005578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800557c:	f7fe fa18 	bl	80039b0 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e183      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800558e:	f7ff fbd3 	bl	8004d38 <LL_RCC_LSI1_IsReady>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1f1      	bne.n	800557c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d05b      	beq.n	800565c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a4:	4ba7      	ldr	r3, [pc, #668]	; (8005844 <HAL_RCC_OscConfig+0x688>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d114      	bne.n	80055da <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80055b0:	f7ff f9f2 	bl	8004998 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055b4:	f7fe f9fc 	bl	80039b0 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055bc:	f7fe f9f8 	bl	80039b0 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e163      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ce:	4b9d      	ldr	r3, [pc, #628]	; (8005844 <HAL_RCC_OscConfig+0x688>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d102      	bne.n	80055e8 <HAL_RCC_OscConfig+0x42c>
 80055e2:	f7ff fb31 	bl	8004c48 <LL_RCC_LSE_Enable>
 80055e6:	e00c      	b.n	8005602 <HAL_RCC_OscConfig+0x446>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b05      	cmp	r3, #5
 80055ee:	d104      	bne.n	80055fa <HAL_RCC_OscConfig+0x43e>
 80055f0:	f7ff fb4c 	bl	8004c8c <LL_RCC_LSE_EnableBypass>
 80055f4:	f7ff fb28 	bl	8004c48 <LL_RCC_LSE_Enable>
 80055f8:	e003      	b.n	8005602 <HAL_RCC_OscConfig+0x446>
 80055fa:	f7ff fb36 	bl	8004c6a <LL_RCC_LSE_Disable>
 80055fe:	f7ff fb56 	bl	8004cae <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d014      	beq.n	8005634 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560a:	f7fe f9d1 	bl	80039b0 <HAL_GetTick>
 800560e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005610:	e00a      	b.n	8005628 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005612:	f7fe f9cd 	bl	80039b0 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e136      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005628:	f7ff fb52 	bl	8004cd0 <LL_RCC_LSE_IsReady>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0ef      	beq.n	8005612 <HAL_RCC_OscConfig+0x456>
 8005632:	e013      	b.n	800565c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fe f9bc 	bl	80039b0 <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800563a:	e00a      	b.n	8005652 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800563c:	f7fe f9b8 	bl	80039b0 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	f241 3288 	movw	r2, #5000	; 0x1388
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e121      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005652:	f7ff fb3d 	bl	8004cd0 <LL_RCC_LSE_IsReady>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1ef      	bne.n	800563c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d02c      	beq.n	80056c2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	2b00      	cmp	r3, #0
 800566e:	d014      	beq.n	800569a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005670:	f7ff fab6 	bl	8004be0 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fe f99c 	bl	80039b0 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800567c:	f7fe f998 	bl	80039b0 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e103      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800568e:	f7ff fac9 	bl	8004c24 <LL_RCC_HSI48_IsReady>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f1      	beq.n	800567c <HAL_RCC_OscConfig+0x4c0>
 8005698:	e013      	b.n	80056c2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800569a:	f7ff fab2 	bl	8004c02 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569e:	f7fe f987 	bl	80039b0 <HAL_GetTick>
 80056a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a6:	f7fe f983 	bl	80039b0 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e0ee      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80056b8:	f7ff fab4 	bl	8004c24 <LL_RCC_HSI48_IsReady>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f1      	bne.n	80056a6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80e4 	beq.w	8005894 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056cc:	f7ff fc12 	bl	8004ef4 <LL_RCC_GetSysClkSource>
 80056d0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80056d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	2b02      	cmp	r3, #2
 80056e0:	f040 80b4 	bne.w	800584c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 0203 	and.w	r2, r3, #3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d123      	bne.n	800573a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d11c      	bne.n	800573a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800570c:	429a      	cmp	r2, r3
 800570e:	d114      	bne.n	800573a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d10d      	bne.n	800573a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005728:	429a      	cmp	r2, r3
 800572a:	d106      	bne.n	800573a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005736:	429a      	cmp	r2, r3
 8005738:	d05d      	beq.n	80057f6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b0c      	cmp	r3, #12
 800573e:	d058      	beq.n	80057f2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0a1      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005752:	f7ff fc85 	bl	8005060 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005756:	f7fe f92b 	bl	80039b0 <HAL_GetTick>
 800575a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575e:	f7fe f927 	bl	80039b0 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e092      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1ef      	bne.n	800575e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800577e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	4b30      	ldr	r3, [pc, #192]	; (8005848 <HAL_RCC_OscConfig+0x68c>)
 8005786:	4013      	ands	r3, r2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005790:	4311      	orrs	r1, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005796:	0212      	lsls	r2, r2, #8
 8005798:	4311      	orrs	r1, r2
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800579e:	4311      	orrs	r1, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057a4:	4311      	orrs	r1, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057aa:	430a      	orrs	r2, r1
 80057ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057b4:	f7ff fc45 	bl	8005042 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057c8:	f7fe f8f2 	bl	80039b0 <HAL_GetTick>
 80057cc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d0:	f7fe f8ee 	bl	80039b0 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e059      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ef      	beq.n	80057d0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057f0:	e050      	b.n	8005894 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e04f      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d147      	bne.n	8005894 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005804:	f7ff fc1d 	bl	8005042 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005816:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005818:	f7fe f8ca 	bl	80039b0 <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005820:	f7fe f8c6 	bl	80039b0 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e031      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0ef      	beq.n	8005820 <HAL_RCC_OscConfig+0x664>
 8005840:	e028      	b.n	8005894 <HAL_RCC_OscConfig+0x6d8>
 8005842:	bf00      	nop
 8005844:	58000400 	.word	0x58000400
 8005848:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b0c      	cmp	r3, #12
 8005850:	d01e      	beq.n	8005890 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005852:	f7ff fc05 	bl	8005060 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005856:	f7fe f8ab 	bl	80039b0 <HAL_GetTick>
 800585a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585e:	f7fe f8a7 	bl	80039b0 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e012      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1ef      	bne.n	800585e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800587e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <HAL_RCC_OscConfig+0x6e4>)
 800588a:	4013      	ands	r3, r2
 800588c:	60cb      	str	r3, [r1, #12]
 800588e:	e001      	b.n	8005894 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3734      	adds	r7, #52	; 0x34
 800589a:	46bd      	mov	sp, r7
 800589c:	bd90      	pop	{r4, r7, pc}
 800589e:	bf00      	nop
 80058a0:	eefefffc 	.word	0xeefefffc

080058a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e12d      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058b8:	4b98      	ldr	r3, [pc, #608]	; (8005b1c <HAL_RCC_ClockConfig+0x278>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d91b      	bls.n	80058fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c6:	4b95      	ldr	r3, [pc, #596]	; (8005b1c <HAL_RCC_ClockConfig+0x278>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f023 0207 	bic.w	r2, r3, #7
 80058ce:	4993      	ldr	r1, [pc, #588]	; (8005b1c <HAL_RCC_ClockConfig+0x278>)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d6:	f7fe f86b 	bl	80039b0 <HAL_GetTick>
 80058da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058de:	f7fe f867 	bl	80039b0 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e111      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f0:	4b8a      	ldr	r3, [pc, #552]	; (8005b1c <HAL_RCC_ClockConfig+0x278>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d1ef      	bne.n	80058de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d016      	beq.n	8005938 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fafc 	bl	8004f0c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005914:	f7fe f84c 	bl	80039b0 <HAL_GetTick>
 8005918:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800591a:	e008      	b.n	800592e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800591c:	f7fe f848 	bl	80039b0 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e0f2      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800592e:	f7ff fbe9 	bl	8005104 <LL_RCC_IsActiveFlag_HPRE>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f1      	beq.n	800591c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d016      	beq.n	8005972 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff faf3 	bl	8004f34 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800594e:	f7fe f82f 	bl	80039b0 <HAL_GetTick>
 8005952:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005954:	e008      	b.n	8005968 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005956:	f7fe f82b 	bl	80039b0 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e0d5      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005968:	f7ff fbde 	bl	8005128 <LL_RCC_IsActiveFlag_C2HPRE>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f1      	beq.n	8005956 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d016      	beq.n	80059ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff faec 	bl	8004f60 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005988:	f7fe f812 	bl	80039b0 <HAL_GetTick>
 800598c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005990:	f7fe f80e 	bl	80039b0 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e0b8      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80059a2:	f7ff fbd4 	bl	800514e <LL_RCC_IsActiveFlag_SHDHPRE>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f1      	beq.n	8005990 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d016      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fae6 	bl	8004f8e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059c2:	f7fd fff5 	bl	80039b0 <HAL_GetTick>
 80059c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059ca:	f7fd fff1 	bl	80039b0 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e09b      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80059dc:	f7ff fbca 	bl	8005174 <LL_RCC_IsActiveFlag_PPRE1>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f1      	beq.n	80059ca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d017      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fadc 	bl	8004fb6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059fe:	f7fd ffd7 	bl	80039b0 <HAL_GetTick>
 8005a02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a06:	f7fd ffd3 	bl	80039b0 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e07d      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a18:	f7ff fbbe 	bl	8005198 <LL_RCC_IsActiveFlag_PPRE2>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f1      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d043      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d106      	bne.n	8005a44 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005a36:	f7ff f87c 	bl	8004b32 <LL_RCC_HSE_IsReady>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d11e      	bne.n	8005a7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e067      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d106      	bne.n	8005a5a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005a4c:	f7ff fb17 	bl	800507e <LL_RCC_PLL_IsReady>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d113      	bne.n	8005a7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e05c      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005a62:	f7ff f9e4 	bl	8004e2e <LL_RCC_MSI_IsReady>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d108      	bne.n	8005a7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e051      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005a70:	f7ff f88f 	bl	8004b92 <LL_RCC_HSI_IsReady>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e04a      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fa22 	bl	8004ecc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a88:	f7fd ff92 	bl	80039b0 <HAL_GetTick>
 8005a8c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8e:	e00a      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a90:	f7fd ff8e 	bl	80039b0 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e036      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa6:	f7ff fa25 	bl	8004ef4 <LL_RCC_GetSysClkSource>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d1ec      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ab6:	4b19      	ldr	r3, [pc, #100]	; (8005b1c <HAL_RCC_ClockConfig+0x278>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d21b      	bcs.n	8005afc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <HAL_RCC_ClockConfig+0x278>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f023 0207 	bic.w	r2, r3, #7
 8005acc:	4913      	ldr	r1, [pc, #76]	; (8005b1c <HAL_RCC_ClockConfig+0x278>)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad4:	f7fd ff6c 	bl	80039b0 <HAL_GetTick>
 8005ad8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005adc:	f7fd ff68 	bl	80039b0 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e012      	b.n	8005b14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aee:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <HAL_RCC_ClockConfig+0x278>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d1ef      	bne.n	8005adc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005afc:	f000 f87e 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005b00:	4603      	mov	r3, r0
 8005b02:	4a07      	ldr	r2, [pc, #28]	; (8005b20 <HAL_RCC_ClockConfig+0x27c>)
 8005b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005b06:	f7fd ff5f 	bl	80039c8 <HAL_GetTickPrio>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fd ff01 	bl	8003914 <HAL_InitTick>
 8005b12:	4603      	mov	r3, r0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	58004000 	.word	0x58004000
 8005b20:	20000018 	.word	0x20000018

08005b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b2a:	f7ff f9e3 	bl	8004ef4 <LL_RCC_GetSysClkSource>
 8005b2e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005b36:	f7ff f99f 	bl	8004e78 <LL_RCC_MSI_GetRange>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	091b      	lsrs	r3, r3, #4
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	4a2b      	ldr	r2, [pc, #172]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e04b      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d102      	bne.n	8005b58 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b52:	4b28      	ldr	r3, [pc, #160]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	e045      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d10a      	bne.n	8005b74 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b5e:	f7fe ffb8 	bl	8004ad2 <LL_RCC_HSE_IsEnabledDiv2>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d102      	bne.n	8005b6e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005b68:	4b22      	ldr	r3, [pc, #136]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	e03a      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005b6e:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	e037      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005b74:	f7ff faba 	bl	80050ec <LL_RCC_PLL_GetMainSource>
 8005b78:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d003      	beq.n	8005b88 <HAL_RCC_GetSysClockFreq+0x64>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d003      	beq.n	8005b8e <HAL_RCC_GetSysClockFreq+0x6a>
 8005b86:	e00d      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005b88:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b8a:	60bb      	str	r3, [r7, #8]
        break;
 8005b8c:	e015      	b.n	8005bba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b8e:	f7fe ffa0 	bl	8004ad2 <LL_RCC_HSE_IsEnabledDiv2>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d102      	bne.n	8005b9e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005b98:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b9a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005b9c:	e00d      	b.n	8005bba <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005b9e:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005ba0:	60bb      	str	r3, [r7, #8]
        break;
 8005ba2:	e00a      	b.n	8005bba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005ba4:	f7ff f968 	bl	8004e78 <LL_RCC_MSI_GetRange>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	091b      	lsrs	r3, r3, #4
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	4a0f      	ldr	r2, [pc, #60]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb6:	60bb      	str	r3, [r7, #8]
        break;
 8005bb8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005bba:	f7ff fa72 	bl	80050a2 <LL_RCC_PLL_GetN>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	fb03 f402 	mul.w	r4, r3, r2
 8005bc6:	f7ff fa85 	bl	80050d4 <LL_RCC_PLL_GetDivider>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	3301      	adds	r3, #1
 8005bd0:	fbb4 f4f3 	udiv	r4, r4, r3
 8005bd4:	f7ff fa72 	bl	80050bc <LL_RCC_PLL_GetR>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	0f5b      	lsrs	r3, r3, #29
 8005bdc:	3301      	adds	r3, #1
 8005bde:	fbb4 f3f3 	udiv	r3, r4, r3
 8005be2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005be4:	68fb      	ldr	r3, [r7, #12]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd90      	pop	{r4, r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	0800d8f4 	.word	0x0800d8f4
 8005bf4:	00f42400 	.word	0x00f42400
 8005bf8:	01e84800 	.word	0x01e84800

08005bfc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bfc:	b598      	push	{r3, r4, r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005c00:	f7ff ff90 	bl	8005b24 <HAL_RCC_GetSysClockFreq>
 8005c04:	4604      	mov	r4, r0
 8005c06:	f7ff f9ea 	bl	8004fde <LL_RCC_GetAHBPrescaler>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	091b      	lsrs	r3, r3, #4
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	4a03      	ldr	r2, [pc, #12]	; (8005c20 <HAL_RCC_GetHCLKFreq+0x24>)
 8005c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c18:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	bd98      	pop	{r3, r4, r7, pc}
 8005c20:	0800d894 	.word	0x0800d894

08005c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c24:	b598      	push	{r3, r4, r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005c28:	f7ff ffe8 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	f7ff f9f0 	bl	8005012 <LL_RCC_GetAPB1Prescaler>
 8005c32:	4603      	mov	r3, r0
 8005c34:	0a1b      	lsrs	r3, r3, #8
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	4a04      	ldr	r2, [pc, #16]	; (8005c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd98      	pop	{r3, r4, r7, pc}
 8005c4c:	0800d8d4 	.word	0x0800d8d4

08005c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c50:	b598      	push	{r3, r4, r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005c54:	f7ff ffd2 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005c58:	4604      	mov	r4, r0
 8005c5a:	f7ff f9e6 	bl	800502a <LL_RCC_GetAPB2Prescaler>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	0adb      	lsrs	r3, r3, #11
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	4a04      	ldr	r2, [pc, #16]	; (8005c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6c:	f003 031f 	and.w	r3, r3, #31
 8005c70:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	bd98      	pop	{r3, r4, r7, pc}
 8005c78:	0800d8d4 	.word	0x0800d8d4

08005c7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005c7c:	b590      	push	{r4, r7, lr}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2bb0      	cmp	r3, #176	; 0xb0
 8005c88:	d903      	bls.n	8005c92 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e007      	b.n	8005ca2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	091b      	lsrs	r3, r3, #4
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	4a11      	ldr	r2, [pc, #68]	; (8005ce0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005ca2:	f7ff f9a8 	bl	8004ff6 <LL_RCC_GetAHB4Prescaler>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	4a0d      	ldr	r2, [pc, #52]	; (8005ce4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cba:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4a0a      	ldr	r2, [pc, #40]	; (8005ce8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc4:	0c9c      	lsrs	r4, r3, #18
 8005cc6:	f7fe febf 	bl	8004a48 <HAL_PWREx_GetVoltageRange>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 f80c 	bl	8005cec <RCC_SetFlashLatency>
 8005cd4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd90      	pop	{r4, r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	0800d8f4 	.word	0x0800d8f4
 8005ce4:	0800d894 	.word	0x0800d894
 8005ce8:	431bde83 	.word	0x431bde83

08005cec <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b093      	sub	sp, #76	; 0x4c
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005cf6:	4b37      	ldr	r3, [pc, #220]	; (8005dd4 <RCC_SetFlashLatency+0xe8>)
 8005cf8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005cfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005d02:	4a35      	ldr	r2, [pc, #212]	; (8005dd8 <RCC_SetFlashLatency+0xec>)
 8005d04:	f107 031c 	add.w	r3, r7, #28
 8005d08:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005d0e:	4b33      	ldr	r3, [pc, #204]	; (8005ddc <RCC_SetFlashLatency+0xf0>)
 8005d10:	f107 040c 	add.w	r4, r7, #12
 8005d14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d24:	d11a      	bne.n	8005d5c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005d26:	2300      	movs	r3, #0
 8005d28:	643b      	str	r3, [r7, #64]	; 0x40
 8005d2a:	e013      	b.n	8005d54 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	3348      	adds	r3, #72	; 0x48
 8005d32:	443b      	add	r3, r7
 8005d34:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d807      	bhi.n	8005d4e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	3348      	adds	r3, #72	; 0x48
 8005d44:	443b      	add	r3, r7
 8005d46:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005d4a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005d4c:	e020      	b.n	8005d90 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d50:	3301      	adds	r3, #1
 8005d52:	643b      	str	r3, [r7, #64]	; 0x40
 8005d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d9e8      	bls.n	8005d2c <RCC_SetFlashLatency+0x40>
 8005d5a:	e019      	b.n	8005d90 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d60:	e013      	b.n	8005d8a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	3348      	adds	r3, #72	; 0x48
 8005d68:	443b      	add	r3, r7
 8005d6a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d807      	bhi.n	8005d84 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	3348      	adds	r3, #72	; 0x48
 8005d7a:	443b      	add	r3, r7
 8005d7c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005d80:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005d82:	e005      	b.n	8005d90 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d86:	3301      	adds	r3, #1
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d9e8      	bls.n	8005d62 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005d90:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <RCC_SetFlashLatency+0xf4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f023 0207 	bic.w	r2, r3, #7
 8005d98:	4911      	ldr	r1, [pc, #68]	; (8005de0 <RCC_SetFlashLatency+0xf4>)
 8005d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005da0:	f7fd fe06 	bl	80039b0 <HAL_GetTick>
 8005da4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005da6:	e008      	b.n	8005dba <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005da8:	f7fd fe02 	bl	80039b0 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e007      	b.n	8005dca <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005dba:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <RCC_SetFlashLatency+0xf4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d1ef      	bne.n	8005da8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	374c      	adds	r7, #76	; 0x4c
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd90      	pop	{r4, r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	0800d868 	.word	0x0800d868
 8005dd8:	0800d878 	.word	0x0800d878
 8005ddc:	0800d884 	.word	0x0800d884
 8005de0:	58004000 	.word	0x58004000

08005de4 <LL_RCC_LSE_IsEnabled>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <LL_RCC_LSE_IsEnabled+0x18>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <LL_RCC_LSE_IsEnabled+0x1a>
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <LL_RCC_LSE_IsReady>:
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d101      	bne.n	8005e20 <LL_RCC_LSE_IsReady+0x18>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e000      	b.n	8005e22 <LL_RCC_LSE_IsReady+0x1a>
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <LL_RCC_SetRFWKPClockSource>:
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <LL_RCC_SetSMPSClockSource>:
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	f023 0203 	bic.w	r2, r3, #3
 8005e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <LL_RCC_SetSMPSPrescaler>:
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <LL_RCC_SetUSARTClockSource>:
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb8:	f023 0203 	bic.w	r2, r3, #3
 8005ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <LL_RCC_SetLPUARTClockSource>:
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <LL_RCC_SetI2CClockSource>:
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	091b      	lsrs	r3, r3, #4
 8005f14:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	401a      	ands	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <LL_RCC_SetLPTIMClockSource>:
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	041b      	lsls	r3, r3, #16
 8005f50:	43db      	mvns	r3, r3
 8005f52:	401a      	ands	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	041b      	lsls	r3, r3, #16
 8005f58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <LL_RCC_SetSAIClockSource>:
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <LL_RCC_SetRNGClockSource>:
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005faa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <LL_RCC_SetCLK48ClockSource>:
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <LL_RCC_SetUSBClockSource>:
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff ffe3 	bl	8005fc6 <LL_RCC_SetCLK48ClockSource>
}
 8006000:	bf00      	nop
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <LL_RCC_SetADCClockSource>:
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006018:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800601c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <LL_RCC_SetRTCClockSource>:
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800603c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <LL_RCC_GetRTCClockSource>:
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006070:	4618      	mov	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <LL_RCC_ForceBackupDomainReset>:
{
 800607a:	b480      	push	{r7}
 800607c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800607e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800608a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006092:	bf00      	nop
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <LL_RCC_ReleaseBackupDomainReset>:
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80060a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <LL_RCC_PLLSAI1_Enable>:
{
 80060be:	b480      	push	{r7}
 80060c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80060c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060d0:	6013      	str	r3, [r2, #0]
}
 80060d2:	bf00      	nop
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_RCC_PLLSAI1_Disable>:
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80060e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060ee:	6013      	str	r3, [r2, #0]
}
 80060f0:	bf00      	nop
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <LL_RCC_PLLSAI1_IsReady>:
{
 80060fa:	b480      	push	{r7}
 80060fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800610c:	d101      	bne.n	8006112 <LL_RCC_PLLSAI1_IsReady+0x18>
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b088      	sub	sp, #32
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006126:	2300      	movs	r3, #0
 8006128:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800612a:	2300      	movs	r3, #0
 800612c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d034      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006142:	d021      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006144:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006148:	d81b      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800614a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800614e:	d01d      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006150:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006154:	d815      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00b      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800615a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800615e:	d110      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800616a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800616e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006170:	e00d      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3304      	adds	r3, #4
 8006176:	4618      	mov	r0, r3
 8006178:	f000 f947 	bl	800640a <RCCEx_PLLSAI1_ConfigNP>
 800617c:	4603      	mov	r3, r0
 800617e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006180:	e005      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	77fb      	strb	r3, [r7, #31]
        break;
 8006186:	e002      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006188:	bf00      	nop
 800618a:	e000      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800618c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618e:	7ffb      	ldrb	r3, [r7, #31]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d105      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fee8 	bl	8005f6e <LL_RCC_SetSAIClockSource>
 800619e:	e001      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a0:	7ffb      	ldrb	r3, [r7, #31]
 80061a2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d046      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80061b0:	f7ff ff56 	bl	8006060 <LL_RCC_GetRTCClockSource>
 80061b4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d03c      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80061c0:	f7fe fbea 	bl	8004998 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d105      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff ff30 	bl	8006034 <LL_RCC_SetRTCClockSource>
 80061d4:	e02e      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80061d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80061e0:	f7ff ff4b 	bl	800607a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80061e4:	f7ff ff5a 	bl	800609c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80061f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006200:	f7ff fdf0 	bl	8005de4 <LL_RCC_LSE_IsEnabled>
 8006204:	4603      	mov	r3, r0
 8006206:	2b01      	cmp	r3, #1
 8006208:	d114      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800620a:	f7fd fbd1 	bl	80039b0 <HAL_GetTick>
 800620e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006210:	e00b      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006212:	f7fd fbcd 	bl	80039b0 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006220:	4293      	cmp	r3, r2
 8006222:	d902      	bls.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	77fb      	strb	r3, [r7, #31]
              break;
 8006228:	e004      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800622a:	f7ff fded 	bl	8005e08 <LL_RCC_LSE_IsReady>
 800622e:	4603      	mov	r3, r0
 8006230:	2b01      	cmp	r3, #1
 8006232:	d1ee      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006234:	7ffb      	ldrb	r3, [r7, #31]
 8006236:	77bb      	strb	r3, [r7, #30]
 8006238:	e001      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623a:	7ffb      	ldrb	r3, [r7, #31]
 800623c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff fe2a 	bl	8005ea8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fe35 	bl	8005ed4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0310 	and.w	r3, r3, #16
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fe5d 	bl	8005f3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fe52 	bl	8005f3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0304 	and.w	r3, r3, #4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d004      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff fe2a 	bl	8005f00 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff fe1f 	bl	8005f00 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d022      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fe8d 	bl	8005ff2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062e0:	d107      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80062e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062f0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062fa:	d10b      	bne.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f8dd 	bl	80064c0 <RCCEx_PLLSAI1_ConfigNQ>
 8006306:	4603      	mov	r3, r0
 8006308:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800630a:	7ffb      	ldrb	r3, [r7, #31]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006310:	7ffb      	ldrb	r3, [r7, #31]
 8006312:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800631c:	2b00      	cmp	r3, #0
 800631e:	d02b      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006328:	d008      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006332:	d003      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	2b00      	cmp	r3, #0
 800633a:	d105      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff fe2a 	bl	8005f9a <LL_RCC_SetRNGClockSource>
 8006346:	e00a      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	2000      	movs	r0, #0
 8006354:	f7ff fe21 	bl	8005f9a <LL_RCC_SetRNGClockSource>
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff fe34 	bl	8005fc6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006366:	d107      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006376:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006380:	2b00      	cmp	r3, #0
 8006382:	d022      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff fe3d 	bl	8006008 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006396:	d107      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063b0:	d10b      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3304      	adds	r3, #4
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 f8dd 	bl	8006576 <RCCEx_PLLSAI1_ConfigNR>
 80063bc:	4603      	mov	r3, r0
 80063be:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80063c0:	7ffb      	ldrb	r3, [r7, #31]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80063c6:	7ffb      	ldrb	r3, [r7, #31]
 80063c8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fd26 	bl	8005e2c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d009      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff fd45 	bl	8005e80 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff fd2c 	bl	8005e58 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006400:	7fbb      	ldrb	r3, [r7, #30]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006416:	f7ff fe61 	bl	80060dc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800641a:	f7fd fac9 	bl	80039b0 <HAL_GetTick>
 800641e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006420:	e009      	b.n	8006436 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006422:	f7fd fac5 	bl	80039b0 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d902      	bls.n	8006436 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	73fb      	strb	r3, [r7, #15]
      break;
 8006434:	e004      	b.n	8006440 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006436:	f7ff fe60 	bl	80060fa <LL_RCC_PLLSAI1_IsReady>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f0      	bne.n	8006422 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d137      	bne.n	80064b6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	021b      	lsls	r3, r3, #8
 8006456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800645a:	4313      	orrs	r3, r2
 800645c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800645e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006470:	4313      	orrs	r3, r2
 8006472:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006474:	f7ff fe23 	bl	80060be <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006478:	f7fd fa9a 	bl	80039b0 <HAL_GetTick>
 800647c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800647e:	e009      	b.n	8006494 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006480:	f7fd fa96 	bl	80039b0 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d902      	bls.n	8006494 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	73fb      	strb	r3, [r7, #15]
        break;
 8006492:	e004      	b.n	800649e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006494:	f7ff fe31 	bl	80060fa <LL_RCC_PLLSAI1_IsReady>
 8006498:	4603      	mov	r3, r0
 800649a:	2b01      	cmp	r3, #1
 800649c:	d1f0      	bne.n	8006480 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d108      	bne.n	80064b6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80064a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064b2:	4313      	orrs	r3, r2
 80064b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80064cc:	f7ff fe06 	bl	80060dc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80064d0:	f7fd fa6e 	bl	80039b0 <HAL_GetTick>
 80064d4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80064d6:	e009      	b.n	80064ec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064d8:	f7fd fa6a 	bl	80039b0 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d902      	bls.n	80064ec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	73fb      	strb	r3, [r7, #15]
      break;
 80064ea:	e004      	b.n	80064f6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80064ec:	f7ff fe05 	bl	80060fa <LL_RCC_PLLSAI1_IsReady>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1f0      	bne.n	80064d8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d137      	bne.n	800656c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80064fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006510:	4313      	orrs	r3, r2
 8006512:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006526:	4313      	orrs	r3, r2
 8006528:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800652a:	f7ff fdc8 	bl	80060be <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800652e:	f7fd fa3f 	bl	80039b0 <HAL_GetTick>
 8006532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006534:	e009      	b.n	800654a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006536:	f7fd fa3b 	bl	80039b0 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d902      	bls.n	800654a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	73fb      	strb	r3, [r7, #15]
        break;
 8006548:	e004      	b.n	8006554 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800654a:	f7ff fdd6 	bl	80060fa <LL_RCC_PLLSAI1_IsReady>
 800654e:	4603      	mov	r3, r0
 8006550:	2b01      	cmp	r3, #1
 8006552:	d1f0      	bne.n	8006536 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d108      	bne.n	800656c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800655a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006568:	4313      	orrs	r3, r2
 800656a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006582:	f7ff fdab 	bl	80060dc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006586:	f7fd fa13 	bl	80039b0 <HAL_GetTick>
 800658a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800658c:	e009      	b.n	80065a2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800658e:	f7fd fa0f 	bl	80039b0 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d902      	bls.n	80065a2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	73fb      	strb	r3, [r7, #15]
      break;
 80065a0:	e004      	b.n	80065ac <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80065a2:	f7ff fdaa 	bl	80060fa <LL_RCC_PLLSAI1_IsReady>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f0      	bne.n	800658e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d137      	bne.n	8006622 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80065b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	021b      	lsls	r3, r3, #8
 80065c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065c6:	4313      	orrs	r3, r2
 80065c8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80065ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065dc:	4313      	orrs	r3, r2
 80065de:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80065e0:	f7ff fd6d 	bl	80060be <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e4:	f7fd f9e4 	bl	80039b0 <HAL_GetTick>
 80065e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065ea:	e009      	b.n	8006600 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065ec:	f7fd f9e0 	bl	80039b0 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d902      	bls.n	8006600 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	73fb      	strb	r3, [r7, #15]
        break;
 80065fe:	e004      	b.n	800660a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006600:	f7ff fd7b 	bl	80060fa <LL_RCC_PLLSAI1_IsReady>
 8006604:	4603      	mov	r3, r0
 8006606:	2b01      	cmp	r3, #1
 8006608:	d1f0      	bne.n	80065ec <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d108      	bne.n	8006622 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006614:	691a      	ldr	r2, [r3, #16]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800661e:	4313      	orrs	r3, r2
 8006620:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e09f      	b.n	800677e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fc fea6 	bl	80033a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006660:	4b49      	ldr	r3, [pc, #292]	; (8006788 <HAL_RTC_Init+0x15c>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b10      	cmp	r3, #16
 800666a:	d07e      	beq.n	800676a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	22ca      	movs	r2, #202	; 0xca
 8006672:	625a      	str	r2, [r3, #36]	; 0x24
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2253      	movs	r2, #83	; 0x53
 800667a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f8ab 	bl	80067d8 <RTC_EnterInitMode>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2204      	movs	r2, #4
 8006694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
 800669c:	e067      	b.n	800676e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6812      	ldr	r2, [r2, #0]
 80066a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6899      	ldr	r1, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	68d2      	ldr	r2, [r2, #12]
 80066d8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6919      	ldr	r1, [r3, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	041a      	lsls	r2, r3, #16
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066fc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0203 	bic.w	r2, r2, #3
 800670c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d113      	bne.n	800675c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f829 	bl	800678c <HAL_RTC_WaitForSynchro>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00d      	beq.n	800675c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	22ff      	movs	r2, #255	; 0xff
 8006746:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2204      	movs	r2, #4
 800674c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e010      	b.n	800677e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	22ff      	movs	r2, #255	; 0xff
 8006762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	73fb      	strb	r3, [r7, #15]
 8006768:	e001      	b.n	800676e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800676e:	7bfb      	ldrb	r3, [r7, #15]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d103      	bne.n	800677c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	40002800 	.word	0x40002800

0800678c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067a2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80067a4:	f7fd f904 	bl	80039b0 <HAL_GetTick>
 80067a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80067aa:	e009      	b.n	80067c0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ac:	f7fd f900 	bl	80039b0 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ba:	d901      	bls.n	80067c0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e007      	b.n	80067d0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0ee      	beq.n	80067ac <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d119      	bne.n	8006822 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f04f 32ff 	mov.w	r2, #4294967295
 80067f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80067f8:	f7fd f8da 	bl	80039b0 <HAL_GetTick>
 80067fc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067fe:	e009      	b.n	8006814 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006800:	f7fd f8d6 	bl	80039b0 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800680e:	d901      	bls.n	8006814 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e007      	b.n	8006824 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0ee      	beq.n	8006800 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006842:	2302      	movs	r3, #2
 8006844:	e0a8      	b.n	8006998 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	22ca      	movs	r2, #202	; 0xca
 800685c:	625a      	str	r2, [r3, #36]	; 0x24
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2253      	movs	r2, #83	; 0x53
 8006864:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006870:	2b00      	cmp	r3, #0
 8006872:	d020      	beq.n	80068b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006874:	f7fd f89c 	bl	80039b0 <HAL_GetTick>
 8006878:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800687a:	e015      	b.n	80068a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800687c:	f7fd f898 	bl	80039b0 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800688a:	d90d      	bls.n	80068a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	22ff      	movs	r2, #255	; 0xff
 8006892:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2203      	movs	r2, #3
 8006898:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e077      	b.n	8006998 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e2      	bne.n	800687c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068c4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80068d6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80068d8:	f7fd f86a 	bl	80039b0 <HAL_GetTick>
 80068dc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80068de:	e015      	b.n	800690c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068e0:	f7fd f866 	bl	80039b0 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ee:	d90d      	bls.n	800690c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	22ff      	movs	r2, #255	; 0xff
 80068f6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2203      	movs	r2, #3
 80068fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e045      	b.n	8006998 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0e2      	beq.n	80068e0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0207 	bic.w	r2, r2, #7
 8006930:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6899      	ldr	r1, [r3, #8]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	430a      	orrs	r2, r1
 8006940:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006942:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006948:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800694a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800694e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006952:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a12      	ldr	r2, [pc, #72]	; (80069a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800695c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800696c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800697c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	22ff      	movs	r2, #255	; 0xff
 8006984:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	58000800 	.word	0x58000800

080069a4 <LL_RCC_GetUSARTClockSource>:
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80069ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4013      	ands	r3, r2
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <LL_RCC_GetLPUARTClockSource>:
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80069cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4013      	ands	r3, r2
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e042      	b.n	8006a7c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d106      	bne.n	8006a0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7fc fbd9 	bl	80031c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2224      	movs	r2, #36	; 0x24
 8006a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fcd0 	bl	80073cc <UART_SetConfig>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e022      	b.n	8006a7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 feec 	bl	800781c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 ff73 	bl	8007960 <UART_CheckIdleState>
 8006a7a:	4603      	mov	r3, r0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b091      	sub	sp, #68	; 0x44
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d178      	bne.n	8006b8e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_UART_Transmit_IT+0x24>
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e071      	b.n	8006b90 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	88fa      	ldrh	r2, [r7, #6]
 8006ab6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	88fa      	ldrh	r2, [r7, #6]
 8006abe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2221      	movs	r2, #33	; 0x21
 8006ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ae0:	d12a      	bne.n	8006b38 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aea:	d107      	bne.n	8006afc <HAL_UART_Transmit_IT+0x78>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a29      	ldr	r2, [pc, #164]	; (8006b9c <HAL_UART_Transmit_IT+0x118>)
 8006af8:	679a      	str	r2, [r3, #120]	; 0x78
 8006afa:	e002      	b.n	8006b02 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4a28      	ldr	r2, [pc, #160]	; (8006ba0 <HAL_UART_Transmit_IT+0x11c>)
 8006b00:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3308      	adds	r3, #8
 8006b08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3308      	adds	r3, #8
 8006b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b22:	637a      	str	r2, [r7, #52]	; 0x34
 8006b24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e5      	bne.n	8006b02 <HAL_UART_Transmit_IT+0x7e>
 8006b36:	e028      	b.n	8006b8a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b40:	d107      	bne.n	8006b52 <HAL_UART_Transmit_IT+0xce>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d103      	bne.n	8006b52 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4a15      	ldr	r2, [pc, #84]	; (8006ba4 <HAL_UART_Transmit_IT+0x120>)
 8006b4e:	679a      	str	r2, [r3, #120]	; 0x78
 8006b50:	e002      	b.n	8006b58 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <HAL_UART_Transmit_IT+0x124>)
 8006b56:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	613b      	str	r3, [r7, #16]
   return(result);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b76:	623b      	str	r3, [r7, #32]
 8006b78:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	69f9      	ldr	r1, [r7, #28]
 8006b7c:	6a3a      	ldr	r2, [r7, #32]
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e6      	bne.n	8006b58 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e000      	b.n	8006b90 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006b8e:	2302      	movs	r3, #2
  }
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3744      	adds	r7, #68	; 0x44
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	080082db 	.word	0x080082db
 8006ba0:	080081fb 	.word	0x080081fb
 8006ba4:	08008139 	.word	0x08008139
 8006ba8:	08008081 	.word	0x08008081

08006bac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08a      	sub	sp, #40	; 0x28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d137      	bne.n	8006c34 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <HAL_UART_Receive_IT+0x24>
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e030      	b.n	8006c36 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <HAL_UART_Receive_IT+0x94>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d01f      	beq.n	8006c24 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d018      	beq.n	8006c24 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	623b      	str	r3, [r7, #32]
 8006c12:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c14:	69f9      	ldr	r1, [r7, #28]
 8006c16:	6a3a      	ldr	r2, [r7, #32]
 8006c18:	e841 2300 	strex	r3, r2, [r1]
 8006c1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e6      	bne.n	8006bf2 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	461a      	mov	r2, r3
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 ffae 	bl	8007b8c <UART_Start_Receive_IT>
 8006c30:	4603      	mov	r3, r0
 8006c32:	e000      	b.n	8006c36 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3728      	adds	r7, #40	; 0x28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40008000 	.word	0x40008000

08006c44 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08a      	sub	sp, #40	; 0x28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d167      	bne.n	8006d2c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <HAL_UART_Transmit_DMA+0x24>
 8006c62:	88fb      	ldrh	r3, [r7, #6]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e060      	b.n	8006d2e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	88fa      	ldrh	r2, [r7, #6]
 8006c76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	88fa      	ldrh	r2, [r7, #6]
 8006c7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2221      	movs	r2, #33	; 0x21
 8006c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d028      	beq.n	8006cec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c9e:	4a26      	ldr	r2, [pc, #152]	; (8006d38 <HAL_UART_Transmit_DMA+0xf4>)
 8006ca0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ca6:	4a25      	ldr	r2, [pc, #148]	; (8006d3c <HAL_UART_Transmit_DMA+0xf8>)
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cae:	4a24      	ldr	r2, [pc, #144]	; (8006d40 <HAL_UART_Transmit_DMA+0xfc>)
 8006cb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3328      	adds	r3, #40	; 0x28
 8006cca:	461a      	mov	r2, r3
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	f7fd f8e9 	bl	8003ea4 <HAL_DMA_Start_IT>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d009      	beq.n	8006cec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2210      	movs	r2, #16
 8006cdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e020      	b.n	8006d2e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2240      	movs	r2, #64	; 0x40
 8006cf2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	613b      	str	r3, [r7, #16]
   return(result);
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3308      	adds	r3, #8
 8006d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d14:	623a      	str	r2, [r7, #32]
 8006d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	69f9      	ldr	r1, [r7, #28]
 8006d1a:	6a3a      	ldr	r2, [r7, #32]
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e5      	bne.n	8006cf4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e000      	b.n	8006d2e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006d2c:	2302      	movs	r3, #2
  }
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3728      	adds	r7, #40	; 0x28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	08007f1f 	.word	0x08007f1f
 8006d3c:	08007fb9 	.word	0x08007fb9
 8006d40:	08007fd5 	.word	0x08007fd5

08006d44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b0ba      	sub	sp, #232	; 0xe8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d72:	4013      	ands	r3, r2
 8006d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d11b      	bne.n	8006db8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d015      	beq.n	8006db8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d105      	bne.n	8006da4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d009      	beq.n	8006db8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 82e3 	beq.w	8007374 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
      }
      return;
 8006db6:	e2dd      	b.n	8007374 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8123 	beq.w	8007008 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006dc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006dc6:	4b8d      	ldr	r3, [pc, #564]	; (8006ffc <HAL_UART_IRQHandler+0x2b8>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006dce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006dd2:	4b8b      	ldr	r3, [pc, #556]	; (8007000 <HAL_UART_IRQHandler+0x2bc>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 8116 	beq.w	8007008 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d011      	beq.n	8006e0c <HAL_UART_IRQHandler+0xc8>
 8006de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e02:	f043 0201 	orr.w	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d011      	beq.n	8006e3c <HAL_UART_IRQHandler+0xf8>
 8006e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e32:	f043 0204 	orr.w	r2, r3, #4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d011      	beq.n	8006e6c <HAL_UART_IRQHandler+0x128>
 8006e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00b      	beq.n	8006e6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2204      	movs	r2, #4
 8006e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e62:	f043 0202 	orr.w	r2, r3, #2
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d017      	beq.n	8006ea8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006e84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006e88:	4b5c      	ldr	r3, [pc, #368]	; (8006ffc <HAL_UART_IRQHandler+0x2b8>)
 8006e8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2208      	movs	r2, #8
 8006e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9e:	f043 0208 	orr.w	r2, r3, #8
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d012      	beq.n	8006eda <HAL_UART_IRQHandler+0x196>
 8006eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00c      	beq.n	8006eda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ec8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed0:	f043 0220 	orr.w	r2, r3, #32
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 8249 	beq.w	8007378 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d013      	beq.n	8006f1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d105      	bne.n	8006f0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d007      	beq.n	8006f1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b40      	cmp	r3, #64	; 0x40
 8006f30:	d005      	beq.n	8006f3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d054      	beq.n	8006fe8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 ff87 	bl	8007e52 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d146      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3308      	adds	r3, #8
 8006f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1d9      	bne.n	8006f52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d017      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fae:	4a15      	ldr	r2, [pc, #84]	; (8007004 <HAL_UART_IRQHandler+0x2c0>)
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fd f84d 	bl	8004058 <HAL_DMA_Abort_IT>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d019      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd6:	e00f      	b.n	8006ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f9e1 	bl	80073a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fde:	e00b      	b.n	8006ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f9dd 	bl	80073a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe6:	e007      	b.n	8006ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f9d9 	bl	80073a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006ff6:	e1bf      	b.n	8007378 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff8:	bf00      	nop
    return;
 8006ffa:	e1bd      	b.n	8007378 <HAL_UART_IRQHandler+0x634>
 8006ffc:	10000001 	.word	0x10000001
 8007000:	04000120 	.word	0x04000120
 8007004:	08008055 	.word	0x08008055

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800700c:	2b01      	cmp	r3, #1
 800700e:	f040 8153 	bne.w	80072b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007016:	f003 0310 	and.w	r3, r3, #16
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 814c 	beq.w	80072b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 8145 	beq.w	80072b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2210      	movs	r2, #16
 8007034:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b40      	cmp	r3, #64	; 0x40
 8007042:	f040 80bb 	bne.w	80071bc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 818f 	beq.w	800737c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007064:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007068:	429a      	cmp	r2, r3
 800706a:	f080 8187 	bcs.w	800737c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007074:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	f040 8087 	bne.w	800719a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1da      	bne.n	800708c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3308      	adds	r3, #8
 80070dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070e0:	e853 3f00 	ldrex	r3, [r3]
 80070e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070e8:	f023 0301 	bic.w	r3, r3, #1
 80070ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3308      	adds	r3, #8
 80070f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007102:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800710c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e1      	bne.n	80070d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3308      	adds	r3, #8
 8007118:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007136:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007138:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800713c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e3      	bne.n	8007112 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007168:	f023 0310 	bic.w	r3, r3, #16
 800716c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800717a:	65bb      	str	r3, [r7, #88]	; 0x58
 800717c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007180:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e4      	bne.n	8007158 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007194:	4618      	mov	r0, r3
 8007196:	f7fc ff00 	bl	8003f9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2202      	movs	r2, #2
 800719e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f8fd 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071ba:	e0df      	b.n	800737c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80d1 	beq.w	8007380 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80071de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 80cc 	beq.w	8007380 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800720a:	647b      	str	r3, [r7, #68]	; 0x44
 800720c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e4      	bne.n	80071e8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3308      	adds	r3, #8
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	623b      	str	r3, [r7, #32]
   return(result);
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3308      	adds	r3, #8
 8007242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007246:	633a      	str	r2, [r7, #48]	; 0x30
 8007248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800724c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e1      	bne.n	800721e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	60fb      	str	r3, [r7, #12]
   return(result);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0310 	bic.w	r3, r3, #16
 8007282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007290:	61fb      	str	r3, [r7, #28]
 8007292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	69b9      	ldr	r1, [r7, #24]
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	617b      	str	r3, [r7, #20]
   return(result);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e4      	bne.n	800726e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f87f 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072b6:	e063      	b.n	8007380 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00e      	beq.n	80072e2 <HAL_UART_IRQHandler+0x59e>
 80072c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f001 fdba 	bl	8008e54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072e0:	e051      	b.n	8007386 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80072e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d014      	beq.n	8007318 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80072ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d105      	bne.n	8007306 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80072fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d008      	beq.n	8007318 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800730a:	2b00      	cmp	r3, #0
 800730c:	d03a      	beq.n	8007384 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
    }
    return;
 8007316:	e035      	b.n	8007384 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d009      	beq.n	8007338 <HAL_UART_IRQHandler+0x5f4>
 8007324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 f847 	bl	80083c4 <UART_EndTransmit_IT>
    return;
 8007336:	e026      	b.n	8007386 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d009      	beq.n	8007358 <HAL_UART_IRQHandler+0x614>
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007348:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 fd93 	bl	8008e7c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007356:	e016      	b.n	8007386 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d010      	beq.n	8007386 <HAL_UART_IRQHandler+0x642>
 8007364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007368:	2b00      	cmp	r3, #0
 800736a:	da0c      	bge.n	8007386 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 fd7b 	bl	8008e68 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007372:	e008      	b.n	8007386 <HAL_UART_IRQHandler+0x642>
      return;
 8007374:	bf00      	nop
 8007376:	e006      	b.n	8007386 <HAL_UART_IRQHandler+0x642>
    return;
 8007378:	bf00      	nop
 800737a:	e004      	b.n	8007386 <HAL_UART_IRQHandler+0x642>
      return;
 800737c:	bf00      	nop
 800737e:	e002      	b.n	8007386 <HAL_UART_IRQHandler+0x642>
      return;
 8007380:	bf00      	nop
 8007382:	e000      	b.n	8007386 <HAL_UART_IRQHandler+0x642>
    return;
 8007384:	bf00      	nop
  }
}
 8007386:	37e8      	adds	r7, #232	; 0xe8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073d0:	b08c      	sub	sp, #48	; 0x30
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	431a      	orrs	r2, r3
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4baf      	ldr	r3, [pc, #700]	; (80076b8 <UART_SetConfig+0x2ec>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007404:	430b      	orrs	r3, r1
 8007406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4aa4      	ldr	r2, [pc, #656]	; (80076bc <UART_SetConfig+0x2f0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d004      	beq.n	8007438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007434:	4313      	orrs	r3, r2
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007442:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	6812      	ldr	r2, [r2, #0]
 800744a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800744c:	430b      	orrs	r3, r1
 800744e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	f023 010f 	bic.w	r1, r3, #15
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a95      	ldr	r2, [pc, #596]	; (80076c0 <UART_SetConfig+0x2f4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d125      	bne.n	80074bc <UART_SetConfig+0xf0>
 8007470:	2003      	movs	r0, #3
 8007472:	f7ff fa97 	bl	80069a4 <LL_RCC_GetUSARTClockSource>
 8007476:	4603      	mov	r3, r0
 8007478:	2b03      	cmp	r3, #3
 800747a:	d81b      	bhi.n	80074b4 <UART_SetConfig+0xe8>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0xb8>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	08007495 	.word	0x08007495
 8007488:	080074a5 	.word	0x080074a5
 800748c:	0800749d 	.word	0x0800749d
 8007490:	080074ad 	.word	0x080074ad
 8007494:	2301      	movs	r3, #1
 8007496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800749a:	e042      	b.n	8007522 <UART_SetConfig+0x156>
 800749c:	2302      	movs	r3, #2
 800749e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a2:	e03e      	b.n	8007522 <UART_SetConfig+0x156>
 80074a4:	2304      	movs	r3, #4
 80074a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074aa:	e03a      	b.n	8007522 <UART_SetConfig+0x156>
 80074ac:	2308      	movs	r3, #8
 80074ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074b2:	e036      	b.n	8007522 <UART_SetConfig+0x156>
 80074b4:	2310      	movs	r3, #16
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ba:	e032      	b.n	8007522 <UART_SetConfig+0x156>
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a7e      	ldr	r2, [pc, #504]	; (80076bc <UART_SetConfig+0x2f0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d12a      	bne.n	800751c <UART_SetConfig+0x150>
 80074c6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80074ca:	f7ff fa7b 	bl	80069c4 <LL_RCC_GetLPUARTClockSource>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074d4:	d01a      	beq.n	800750c <UART_SetConfig+0x140>
 80074d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074da:	d81b      	bhi.n	8007514 <UART_SetConfig+0x148>
 80074dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074e0:	d00c      	beq.n	80074fc <UART_SetConfig+0x130>
 80074e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074e6:	d815      	bhi.n	8007514 <UART_SetConfig+0x148>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <UART_SetConfig+0x128>
 80074ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074f0:	d008      	beq.n	8007504 <UART_SetConfig+0x138>
 80074f2:	e00f      	b.n	8007514 <UART_SetConfig+0x148>
 80074f4:	2300      	movs	r3, #0
 80074f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074fa:	e012      	b.n	8007522 <UART_SetConfig+0x156>
 80074fc:	2302      	movs	r3, #2
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007502:	e00e      	b.n	8007522 <UART_SetConfig+0x156>
 8007504:	2304      	movs	r3, #4
 8007506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800750a:	e00a      	b.n	8007522 <UART_SetConfig+0x156>
 800750c:	2308      	movs	r3, #8
 800750e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007512:	e006      	b.n	8007522 <UART_SetConfig+0x156>
 8007514:	2310      	movs	r3, #16
 8007516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800751a:	e002      	b.n	8007522 <UART_SetConfig+0x156>
 800751c:	2310      	movs	r3, #16
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a65      	ldr	r2, [pc, #404]	; (80076bc <UART_SetConfig+0x2f0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	f040 8097 	bne.w	800765c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800752e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007532:	2b08      	cmp	r3, #8
 8007534:	d823      	bhi.n	800757e <UART_SetConfig+0x1b2>
 8007536:	a201      	add	r2, pc, #4	; (adr r2, 800753c <UART_SetConfig+0x170>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	08007561 	.word	0x08007561
 8007540:	0800757f 	.word	0x0800757f
 8007544:	08007569 	.word	0x08007569
 8007548:	0800757f 	.word	0x0800757f
 800754c:	0800756f 	.word	0x0800756f
 8007550:	0800757f 	.word	0x0800757f
 8007554:	0800757f 	.word	0x0800757f
 8007558:	0800757f 	.word	0x0800757f
 800755c:	08007577 	.word	0x08007577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007560:	f7fe fb60 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 8007564:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007566:	e010      	b.n	800758a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007568:	4b56      	ldr	r3, [pc, #344]	; (80076c4 <UART_SetConfig+0x2f8>)
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800756c:	e00d      	b.n	800758a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800756e:	f7fe fad9 	bl	8005b24 <HAL_RCC_GetSysClockFreq>
 8007572:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007574:	e009      	b.n	800758a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007576:	f248 0306 	movw	r3, #32774	; 0x8006
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800757c:	e005      	b.n	800758a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007588:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 812b 	beq.w	80077e8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	4a4c      	ldr	r2, [pc, #304]	; (80076c8 <UART_SetConfig+0x2fc>)
 8007598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800759c:	461a      	mov	r2, r3
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d305      	bcc.n	80075c2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d903      	bls.n	80075ca <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075c8:	e10e      	b.n	80077e8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	2200      	movs	r2, #0
 80075ce:	60bb      	str	r3, [r7, #8]
 80075d0:	60fa      	str	r2, [r7, #12]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	4a3c      	ldr	r2, [pc, #240]	; (80076c8 <UART_SetConfig+0x2fc>)
 80075d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2200      	movs	r2, #0
 80075e0:	603b      	str	r3, [r7, #0]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075ec:	f7f8 fe28 	bl	8000240 <__aeabi_uldivmod>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4610      	mov	r0, r2
 80075f6:	4619      	mov	r1, r3
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	020b      	lsls	r3, r1, #8
 8007602:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007606:	0202      	lsls	r2, r0, #8
 8007608:	6979      	ldr	r1, [r7, #20]
 800760a:	6849      	ldr	r1, [r1, #4]
 800760c:	0849      	lsrs	r1, r1, #1
 800760e:	2000      	movs	r0, #0
 8007610:	460c      	mov	r4, r1
 8007612:	4605      	mov	r5, r0
 8007614:	eb12 0804 	adds.w	r8, r2, r4
 8007618:	eb43 0905 	adc.w	r9, r3, r5
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	469a      	mov	sl, r3
 8007624:	4693      	mov	fp, r2
 8007626:	4652      	mov	r2, sl
 8007628:	465b      	mov	r3, fp
 800762a:	4640      	mov	r0, r8
 800762c:	4649      	mov	r1, r9
 800762e:	f7f8 fe07 	bl	8000240 <__aeabi_uldivmod>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4613      	mov	r3, r2
 8007638:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007640:	d308      	bcc.n	8007654 <UART_SetConfig+0x288>
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007648:	d204      	bcs.n	8007654 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6a3a      	ldr	r2, [r7, #32]
 8007650:	60da      	str	r2, [r3, #12]
 8007652:	e0c9      	b.n	80077e8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800765a:	e0c5      	b.n	80077e8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007664:	d16d      	bne.n	8007742 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800766a:	3b01      	subs	r3, #1
 800766c:	2b07      	cmp	r3, #7
 800766e:	d82d      	bhi.n	80076cc <UART_SetConfig+0x300>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <UART_SetConfig+0x2ac>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	08007699 	.word	0x08007699
 800767c:	080076a1 	.word	0x080076a1
 8007680:	080076cd 	.word	0x080076cd
 8007684:	080076a7 	.word	0x080076a7
 8007688:	080076cd 	.word	0x080076cd
 800768c:	080076cd 	.word	0x080076cd
 8007690:	080076cd 	.word	0x080076cd
 8007694:	080076af 	.word	0x080076af
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007698:	f7fe fada 	bl	8005c50 <HAL_RCC_GetPCLK2Freq>
 800769c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800769e:	e01b      	b.n	80076d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a0:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <UART_SetConfig+0x2f8>)
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076a4:	e018      	b.n	80076d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076a6:	f7fe fa3d 	bl	8005b24 <HAL_RCC_GetSysClockFreq>
 80076aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076ac:	e014      	b.n	80076d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ae:	f248 0306 	movw	r3, #32774	; 0x8006
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076b4:	e010      	b.n	80076d8 <UART_SetConfig+0x30c>
 80076b6:	bf00      	nop
 80076b8:	cfff69f3 	.word	0xcfff69f3
 80076bc:	40008000 	.word	0x40008000
 80076c0:	40013800 	.word	0x40013800
 80076c4:	00f42400 	.word	0x00f42400
 80076c8:	0800d934 	.word	0x0800d934
      default:
        pclk = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 8084 	beq.w	80077e8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	4a4b      	ldr	r2, [pc, #300]	; (8007814 <UART_SetConfig+0x448>)
 80076e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80076f2:	005a      	lsls	r2, r3, #1
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	441a      	add	r2, r3
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	fbb2 f3f3 	udiv	r3, r2, r3
 8007704:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	2b0f      	cmp	r3, #15
 800770a:	d916      	bls.n	800773a <UART_SetConfig+0x36e>
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007712:	d212      	bcs.n	800773a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	b29b      	uxth	r3, r3
 8007718:	f023 030f 	bic.w	r3, r3, #15
 800771c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	b29b      	uxth	r3, r3
 8007724:	f003 0307 	and.w	r3, r3, #7
 8007728:	b29a      	uxth	r2, r3
 800772a:	8bfb      	ldrh	r3, [r7, #30]
 800772c:	4313      	orrs	r3, r2
 800772e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	8bfa      	ldrh	r2, [r7, #30]
 8007736:	60da      	str	r2, [r3, #12]
 8007738:	e056      	b.n	80077e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007740:	e052      	b.n	80077e8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007746:	3b01      	subs	r3, #1
 8007748:	2b07      	cmp	r3, #7
 800774a:	d822      	bhi.n	8007792 <UART_SetConfig+0x3c6>
 800774c:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <UART_SetConfig+0x388>)
 800774e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007752:	bf00      	nop
 8007754:	08007775 	.word	0x08007775
 8007758:	0800777d 	.word	0x0800777d
 800775c:	08007793 	.word	0x08007793
 8007760:	08007783 	.word	0x08007783
 8007764:	08007793 	.word	0x08007793
 8007768:	08007793 	.word	0x08007793
 800776c:	08007793 	.word	0x08007793
 8007770:	0800778b 	.word	0x0800778b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007774:	f7fe fa6c 	bl	8005c50 <HAL_RCC_GetPCLK2Freq>
 8007778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800777a:	e010      	b.n	800779e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800777c:	4b26      	ldr	r3, [pc, #152]	; (8007818 <UART_SetConfig+0x44c>)
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007780:	e00d      	b.n	800779e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007782:	f7fe f9cf 	bl	8005b24 <HAL_RCC_GetSysClockFreq>
 8007786:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007788:	e009      	b.n	800779e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800778a:	f248 0306 	movw	r3, #32774	; 0x8006
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007790:	e005      	b.n	800779e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800779c:	bf00      	nop
    }

    if (pclk != 0U)
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d021      	beq.n	80077e8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	4a1a      	ldr	r2, [pc, #104]	; (8007814 <UART_SetConfig+0x448>)
 80077aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ae:	461a      	mov	r2, r3
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	085b      	lsrs	r3, r3, #1
 80077bc:	441a      	add	r2, r3
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	2b0f      	cmp	r3, #15
 80077cc:	d909      	bls.n	80077e2 <UART_SetConfig+0x416>
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d4:	d205      	bcs.n	80077e2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	b29a      	uxth	r2, r3
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60da      	str	r2, [r3, #12]
 80077e0:	e002      	b.n	80077e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2200      	movs	r2, #0
 80077fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2200      	movs	r2, #0
 8007802:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007804:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007808:	4618      	mov	r0, r3
 800780a:	3730      	adds	r7, #48	; 0x30
 800780c:	46bd      	mov	sp, r7
 800780e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007812:	bf00      	nop
 8007814:	0800d934 	.word	0x0800d934
 8007818:	00f42400 	.word	0x00f42400

0800781c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00a      	beq.n	8007846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00a      	beq.n	800788a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	f003 0308 	and.w	r3, r3, #8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b0:	f003 0310 	and.w	r3, r3, #16
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00a      	beq.n	80078ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01a      	beq.n	8007932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800791a:	d10a      	bne.n	8007932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	605a      	str	r2, [r3, #4]
  }
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af02      	add	r7, sp, #8
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007970:	f7fc f81e 	bl	80039b0 <HAL_GetTick>
 8007974:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b08      	cmp	r3, #8
 8007982:	d10e      	bne.n	80079a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f832 	bl	80079fc <UART_WaitOnFlagUntilTimeout>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e028      	b.n	80079f4 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d10e      	bne.n	80079ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f81c 	bl	80079fc <UART_WaitOnFlagUntilTimeout>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e012      	b.n	80079f4 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2220      	movs	r2, #32
 80079da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b09c      	sub	sp, #112	; 0x70
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a0c:	e0a9      	b.n	8007b62 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	f000 80a5 	beq.w	8007b62 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a18:	f7fb ffca 	bl	80039b0 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d302      	bcc.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x32>
 8007a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d140      	bne.n	8007ab0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a42:	667b      	str	r3, [r7, #100]	; 0x64
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a4e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e6      	bne.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3308      	adds	r3, #8
 8007a66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a72:	f023 0301 	bic.w	r3, r3, #1
 8007a76:	663b      	str	r3, [r7, #96]	; 0x60
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a80:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e5      	bne.n	8007a60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e069      	b.n	8007b84 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d051      	beq.n	8007b62 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007acc:	d149      	bne.n	8007b62 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ad6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007aec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af6:	637b      	str	r3, [r7, #52]	; 0x34
 8007af8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e6      	bne.n	8007ad8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	613b      	str	r3, [r7, #16]
   return(result);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b2a:	623a      	str	r2, [r7, #32]
 8007b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	69f9      	ldr	r1, [r7, #28]
 8007b30:	6a3a      	ldr	r2, [r7, #32]
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e5      	bne.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e010      	b.n	8007b84 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69da      	ldr	r2, [r3, #28]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	bf0c      	ite	eq
 8007b72:	2301      	moveq	r3, #1
 8007b74:	2300      	movne	r3, #0
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	f43f af46 	beq.w	8007a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3770      	adds	r7, #112	; 0x70
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b0a3      	sub	sp, #140	; 0x8c
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	88fa      	ldrh	r2, [r7, #6]
 8007ba4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	88fa      	ldrh	r2, [r7, #6]
 8007bac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bbe:	d10e      	bne.n	8007bde <UART_Start_Receive_IT+0x52>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d105      	bne.n	8007bd4 <UART_Start_Receive_IT+0x48>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007bce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bd2:	e02d      	b.n	8007c30 <UART_Start_Receive_IT+0xa4>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	22ff      	movs	r2, #255	; 0xff
 8007bd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bdc:	e028      	b.n	8007c30 <UART_Start_Receive_IT+0xa4>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10d      	bne.n	8007c02 <UART_Start_Receive_IT+0x76>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d104      	bne.n	8007bf8 <UART_Start_Receive_IT+0x6c>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	22ff      	movs	r2, #255	; 0xff
 8007bf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bf6:	e01b      	b.n	8007c30 <UART_Start_Receive_IT+0xa4>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	227f      	movs	r2, #127	; 0x7f
 8007bfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c00:	e016      	b.n	8007c30 <UART_Start_Receive_IT+0xa4>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c0a:	d10d      	bne.n	8007c28 <UART_Start_Receive_IT+0x9c>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <UART_Start_Receive_IT+0x92>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	227f      	movs	r2, #127	; 0x7f
 8007c18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c1c:	e008      	b.n	8007c30 <UART_Start_Receive_IT+0xa4>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	223f      	movs	r2, #63	; 0x3f
 8007c22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c26:	e003      	b.n	8007c30 <UART_Start_Receive_IT+0xa4>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2222      	movs	r2, #34	; 0x22
 8007c3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3308      	adds	r3, #8
 8007c46:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c52:	f043 0301 	orr.w	r3, r3, #1
 8007c56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007c64:	673a      	str	r2, [r7, #112]	; 0x70
 8007c66:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007c6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007c72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e3      	bne.n	8007c40 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c80:	d14f      	bne.n	8007d22 <UART_Start_Receive_IT+0x196>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c88:	88fa      	ldrh	r2, [r7, #6]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d349      	bcc.n	8007d22 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c96:	d107      	bne.n	8007ca8 <UART_Start_Receive_IT+0x11c>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d103      	bne.n	8007ca8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4a47      	ldr	r2, [pc, #284]	; (8007dc0 <UART_Start_Receive_IT+0x234>)
 8007ca4:	675a      	str	r2, [r3, #116]	; 0x74
 8007ca6:	e002      	b.n	8007cae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4a46      	ldr	r2, [pc, #280]	; (8007dc4 <UART_Start_Receive_IT+0x238>)
 8007cac:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d01a      	beq.n	8007cec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cda:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ce0:	e841 2300 	strex	r3, r2, [r1]
 8007ce4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e4      	bne.n	8007cb6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d0c:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d0e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e5      	bne.n	8007cec <UART_Start_Receive_IT+0x160>
 8007d20:	e046      	b.n	8007db0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2a:	d107      	bne.n	8007d3c <UART_Start_Receive_IT+0x1b0>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4a24      	ldr	r2, [pc, #144]	; (8007dc8 <UART_Start_Receive_IT+0x23c>)
 8007d38:	675a      	str	r2, [r3, #116]	; 0x74
 8007d3a:	e002      	b.n	8007d42 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4a23      	ldr	r2, [pc, #140]	; (8007dcc <UART_Start_Receive_IT+0x240>)
 8007d40:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d019      	beq.n	8007d7e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d5e:	677b      	str	r3, [r7, #116]	; 0x74
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e6      	bne.n	8007d4a <UART_Start_Receive_IT+0x1be>
 8007d7c:	e018      	b.n	8007db0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	e853 3f00 	ldrex	r3, [r3]
 8007d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f043 0320 	orr.w	r3, r3, #32
 8007d92:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d9c:	623b      	str	r3, [r7, #32]
 8007d9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	69f9      	ldr	r1, [r7, #28]
 8007da2:	6a3a      	ldr	r2, [r7, #32]
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e6      	bne.n	8007d7e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	378c      	adds	r7, #140	; 0x8c
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	08008aed 	.word	0x08008aed
 8007dc4:	0800878d 	.word	0x0800878d
 8007dc8:	080085d5 	.word	0x080085d5
 8007dcc:	0800841d 	.word	0x0800841d

08007dd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b08f      	sub	sp, #60	; 0x3c
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007df8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e6      	bne.n	8007dd8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e20:	633b      	str	r3, [r7, #48]	; 0x30
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3308      	adds	r3, #8
 8007e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e2a:	61ba      	str	r2, [r7, #24]
 8007e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6979      	ldr	r1, [r7, #20]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	613b      	str	r3, [r7, #16]
   return(result);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e5      	bne.n	8007e0a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007e46:	bf00      	nop
 8007e48:	373c      	adds	r7, #60	; 0x3c
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b095      	sub	sp, #84	; 0x54
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	461a      	mov	r2, r3
 8007e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e78:	643b      	str	r3, [r7, #64]	; 0x40
 8007e7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e80:	e841 2300 	strex	r3, r2, [r1]
 8007e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1e6      	bne.n	8007e5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3308      	adds	r3, #8
 8007e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	e853 3f00 	ldrex	r3, [r3]
 8007e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ea2:	f023 0301 	bic.w	r3, r3, #1
 8007ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3308      	adds	r3, #8
 8007eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e3      	bne.n	8007e8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d118      	bne.n	8007efe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f023 0310 	bic.w	r3, r3, #16
 8007ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eea:	61bb      	str	r3, [r7, #24]
 8007eec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6979      	ldr	r1, [r7, #20]
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e6      	bne.n	8007ecc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007f12:	bf00      	nop
 8007f14:	3754      	adds	r7, #84	; 0x54
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b090      	sub	sp, #64	; 0x40
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0320 	and.w	r3, r3, #32
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d137      	bne.n	8007faa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3308      	adds	r3, #8
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	623b      	str	r3, [r7, #32]
   return(result);
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f58:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3308      	adds	r3, #8
 8007f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f62:	633a      	str	r2, [r7, #48]	; 0x30
 8007f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e5      	bne.n	8007f42 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f94:	61fb      	str	r3, [r7, #28]
 8007f96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	69b9      	ldr	r1, [r7, #24]
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	e841 2300 	strex	r3, r2, [r1]
 8007fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e6      	bne.n	8007f76 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fa8:	e002      	b.n	8007fb0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007faa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007fac:	f7fa fe2a 	bl	8002c04 <HAL_UART_TxCpltCallback>
}
 8007fb0:	bf00      	nop
 8007fb2:	3740      	adds	r7, #64	; 0x40
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7ff f9e0 	bl	800738c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fcc:	bf00      	nop
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffc:	2b80      	cmp	r3, #128	; 0x80
 8007ffe:	d109      	bne.n	8008014 <UART_DMAError+0x40>
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	2b21      	cmp	r3, #33	; 0x21
 8008004:	d106      	bne.n	8008014 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2200      	movs	r2, #0
 800800a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800800e:	6978      	ldr	r0, [r7, #20]
 8008010:	f7ff fede 	bl	8007dd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801e:	2b40      	cmp	r3, #64	; 0x40
 8008020:	d109      	bne.n	8008036 <UART_DMAError+0x62>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b22      	cmp	r3, #34	; 0x22
 8008026:	d106      	bne.n	8008036 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2200      	movs	r2, #0
 800802c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008030:	6978      	ldr	r0, [r7, #20]
 8008032:	f7ff ff0e 	bl	8007e52 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803c:	f043 0210 	orr.w	r2, r3, #16
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008046:	6978      	ldr	r0, [r7, #20]
 8008048:	f7ff f9aa 	bl	80073a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800804c:	bf00      	nop
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008060:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f7ff f994 	bl	80073a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008078:	bf00      	nop
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b08f      	sub	sp, #60	; 0x3c
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808e:	2b21      	cmp	r3, #33	; 0x21
 8008090:	d14c      	bne.n	800812c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008098:	b29b      	uxth	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d132      	bne.n	8008104 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	e853 3f00 	ldrex	r3, [r3]
 80080aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b2:	637b      	str	r3, [r7, #52]	; 0x34
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080be:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080c4:	e841 2300 	strex	r3, r2, [r1]
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e6      	bne.n	800809e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e4:	633b      	str	r3, [r7, #48]	; 0x30
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	61bb      	str	r3, [r7, #24]
 80080f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6979      	ldr	r1, [r7, #20]
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	613b      	str	r3, [r7, #16]
   return(result);
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e6      	bne.n	80080d0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008102:	e013      	b.n	800812c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800812c:	bf00      	nop
 800812e:	373c      	adds	r7, #60	; 0x3c
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008138:	b480      	push	{r7}
 800813a:	b091      	sub	sp, #68	; 0x44
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008146:	2b21      	cmp	r3, #33	; 0x21
 8008148:	d151      	bne.n	80081ee <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d132      	bne.n	80081bc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	623b      	str	r3, [r7, #32]
   return(result);
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800816a:	63bb      	str	r3, [r7, #56]	; 0x38
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	633b      	str	r3, [r7, #48]	; 0x30
 8008176:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800817a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e6      	bne.n	8008156 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	60fb      	str	r3, [r7, #12]
   return(result);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a6:	61fb      	str	r3, [r7, #28]
 80081a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	69b9      	ldr	r1, [r7, #24]
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	617b      	str	r3, [r7, #20]
   return(result);
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e6      	bne.n	8008188 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80081ba:	e018      	b.n	80081ee <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80081c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081d0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d6:	1c9a      	adds	r2, r3, #2
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80081ee:	bf00      	nop
 80081f0:	3744      	adds	r7, #68	; 0x44
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b091      	sub	sp, #68	; 0x44
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008208:	2b21      	cmp	r3, #33	; 0x21
 800820a:	d160      	bne.n	80082ce <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008212:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008214:	e057      	b.n	80082c6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800821c:	b29b      	uxth	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d133      	bne.n	800828a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	623b      	str	r3, [r7, #32]
   return(result);
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008238:	63bb      	str	r3, [r7, #56]	; 0x38
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008242:	633a      	str	r2, [r7, #48]	; 0x30
 8008244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e5      	bne.n	8008222 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	e853 3f00 	ldrex	r3, [r3]
 8008262:	60fb      	str	r3, [r7, #12]
   return(result);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800826a:	637b      	str	r3, [r7, #52]	; 0x34
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	461a      	mov	r2, r3
 8008272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008278:	69b9      	ldr	r1, [r7, #24]
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	e841 2300 	strex	r3, r2, [r1]
 8008280:	617b      	str	r3, [r7, #20]
   return(result);
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e6      	bne.n	8008256 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008288:	e021      	b.n	80082ce <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008294:	2b00      	cmp	r3, #0
 8008296:	d013      	beq.n	80082c0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829c:	781a      	ldrb	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80082c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80082c2:	3b01      	subs	r3, #1
 80082c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80082c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1a4      	bne.n	8008216 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80082cc:	e7ff      	b.n	80082ce <UART_TxISR_8BIT_FIFOEN+0xd4>
 80082ce:	bf00      	nop
 80082d0:	3744      	adds	r7, #68	; 0x44
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80082da:	b480      	push	{r7}
 80082dc:	b091      	sub	sp, #68	; 0x44
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e8:	2b21      	cmp	r3, #33	; 0x21
 80082ea:	d165      	bne.n	80083b8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80082f4:	e05c      	b.n	80083b0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d133      	bne.n	800836a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3308      	adds	r3, #8
 8008308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	61fb      	str	r3, [r7, #28]
   return(result);
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008318:	637b      	str	r3, [r7, #52]	; 0x34
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3308      	adds	r3, #8
 8008320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e5      	bne.n	8008302 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	60bb      	str	r3, [r7, #8]
   return(result);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800834a:	633b      	str	r3, [r7, #48]	; 0x30
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6979      	ldr	r1, [r7, #20]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	613b      	str	r3, [r7, #16]
   return(result);
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e6      	bne.n	8008336 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008368:	e026      	b.n	80083b8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008374:	2b00      	cmp	r3, #0
 8008376:	d018      	beq.n	80083aa <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800837c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800838c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008392:	1c9a      	adds	r2, r3, #2
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800839e:	b29b      	uxth	r3, r3
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80083aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80083ac:	3b01      	subs	r3, #1
 80083ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80083b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d19f      	bne.n	80082f6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80083b6:	e7ff      	b.n	80083b8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80083b8:	bf00      	nop
 80083ba:	3744      	adds	r7, #68	; 0x44
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083e0:	61fb      	str	r3, [r7, #28]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	61bb      	str	r3, [r7, #24]
 80083ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	6979      	ldr	r1, [r7, #20]
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	613b      	str	r3, [r7, #16]
   return(result);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e6      	bne.n	80083cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7fa fbf9 	bl	8002c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008412:	bf00      	nop
 8008414:	3720      	adds	r7, #32
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b09c      	sub	sp, #112	; 0x70
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800842a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008434:	2b22      	cmp	r3, #34	; 0x22
 8008436:	f040 80be 	bne.w	80085b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008444:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008448:	b2d9      	uxtb	r1, r3
 800844a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800844e:	b2da      	uxtb	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008454:	400a      	ands	r2, r1
 8008456:	b2d2      	uxtb	r2, r2
 8008458:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800846a:	b29b      	uxth	r3, r3
 800846c:	3b01      	subs	r3, #1
 800846e:	b29a      	uxth	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800847c:	b29b      	uxth	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	f040 80a1 	bne.w	80085c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008494:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008498:	66bb      	str	r3, [r7, #104]	; 0x68
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80084a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e6      	bne.n	8008484 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3308      	adds	r3, #8
 80084bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	e853 3f00 	ldrex	r3, [r3]
 80084c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c8:	f023 0301 	bic.w	r3, r3, #1
 80084cc:	667b      	str	r3, [r7, #100]	; 0x64
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3308      	adds	r3, #8
 80084d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084d6:	647a      	str	r2, [r7, #68]	; 0x44
 80084d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1e5      	bne.n	80084b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2220      	movs	r2, #32
 80084ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a33      	ldr	r2, [pc, #204]	; (80085d0 <UART_RxISR_8BIT+0x1b4>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d01f      	beq.n	8008548 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d018      	beq.n	8008548 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	623b      	str	r3, [r7, #32]
   return(result);
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800852a:	663b      	str	r3, [r7, #96]	; 0x60
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008534:	633b      	str	r3, [r7, #48]	; 0x30
 8008536:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800853a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853c:	e841 2300 	strex	r3, r2, [r1]
 8008540:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1e6      	bne.n	8008516 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800854c:	2b01      	cmp	r3, #1
 800854e:	d12e      	bne.n	80085ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	60fb      	str	r3, [r7, #12]
   return(result);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0310 	bic.w	r3, r3, #16
 800856a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008574:	61fb      	str	r3, [r7, #28]
 8008576:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	69b9      	ldr	r1, [r7, #24]
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	617b      	str	r3, [r7, #20]
   return(result);
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e6      	bne.n	8008556 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	f003 0310 	and.w	r3, r3, #16
 8008592:	2b10      	cmp	r3, #16
 8008594:	d103      	bne.n	800859e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2210      	movs	r2, #16
 800859c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fe ff04 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085ac:	e00b      	b.n	80085c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7fa fafa 	bl	8002ba8 <HAL_UART_RxCpltCallback>
}
 80085b4:	e007      	b.n	80085c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699a      	ldr	r2, [r3, #24]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0208 	orr.w	r2, r2, #8
 80085c4:	619a      	str	r2, [r3, #24]
}
 80085c6:	bf00      	nop
 80085c8:	3770      	adds	r7, #112	; 0x70
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	40008000 	.word	0x40008000

080085d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b09c      	sub	sp, #112	; 0x70
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ec:	2b22      	cmp	r3, #34	; 0x22
 80085ee:	f040 80be 	bne.w	800876e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008600:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008602:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008606:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800860a:	4013      	ands	r3, r2
 800860c:	b29a      	uxth	r2, r3
 800860e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008610:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008616:	1c9a      	adds	r2, r3, #2
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008622:	b29b      	uxth	r3, r3
 8008624:	3b01      	subs	r3, #1
 8008626:	b29a      	uxth	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008634:	b29b      	uxth	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	f040 80a1 	bne.w	800877e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800864a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800864c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008650:	667b      	str	r3, [r7, #100]	; 0x64
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800865a:	657b      	str	r3, [r7, #84]	; 0x54
 800865c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008660:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e6      	bne.n	800863c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	f023 0301 	bic.w	r3, r3, #1
 8008684:	663b      	str	r3, [r7, #96]	; 0x60
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800868e:	643a      	str	r2, [r7, #64]	; 0x40
 8008690:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e5      	bne.n	800866e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a33      	ldr	r2, [pc, #204]	; (8008788 <UART_RxISR_16BIT+0x1b4>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d01f      	beq.n	8008700 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d018      	beq.n	8008700 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	61fb      	str	r3, [r7, #28]
   return(result);
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	461a      	mov	r2, r3
 80086ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086ee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e6      	bne.n	80086ce <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008704:	2b01      	cmp	r3, #1
 8008706:	d12e      	bne.n	8008766 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	60bb      	str	r3, [r7, #8]
   return(result);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f023 0310 	bic.w	r3, r3, #16
 8008722:	65bb      	str	r3, [r7, #88]	; 0x58
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800872c:	61bb      	str	r3, [r7, #24]
 800872e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6979      	ldr	r1, [r7, #20]
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	613b      	str	r3, [r7, #16]
   return(result);
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e6      	bne.n	800870e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f003 0310 	and.w	r3, r3, #16
 800874a:	2b10      	cmp	r3, #16
 800874c:	d103      	bne.n	8008756 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2210      	movs	r2, #16
 8008754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7fe fe28 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008764:	e00b      	b.n	800877e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7fa fa1e 	bl	8002ba8 <HAL_UART_RxCpltCallback>
}
 800876c:	e007      	b.n	800877e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	699a      	ldr	r2, [r3, #24]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f042 0208 	orr.w	r2, r2, #8
 800877c:	619a      	str	r2, [r3, #24]
}
 800877e:	bf00      	nop
 8008780:	3770      	adds	r7, #112	; 0x70
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	40008000 	.word	0x40008000

0800878c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b0ac      	sub	sp, #176	; 0xb0
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800879a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087c2:	2b22      	cmp	r3, #34	; 0x22
 80087c4:	f040 8182 	bne.w	8008acc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80087ce:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087d2:	e125      	b.n	8008a20 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80087e2:	b2d9      	uxtb	r1, r3
 80087e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ee:	400a      	ands	r2, r1
 80087f0:	b2d2      	uxtb	r2, r2
 80087f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008804:	b29b      	uxth	r3, r3
 8008806:	3b01      	subs	r3, #1
 8008808:	b29a      	uxth	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800881a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800881e:	f003 0307 	and.w	r3, r3, #7
 8008822:	2b00      	cmp	r3, #0
 8008824:	d053      	beq.n	80088ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	d011      	beq.n	8008856 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008832:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2201      	movs	r2, #1
 8008844:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884c:	f043 0201 	orr.w	r2, r3, #1
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d011      	beq.n	8008886 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00b      	beq.n	8008886 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2202      	movs	r2, #2
 8008874:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800887c:	f043 0204 	orr.w	r2, r3, #4
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d011      	beq.n	80088b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00b      	beq.n	80088b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2204      	movs	r2, #4
 80088a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ac:	f043 0202 	orr.w	r2, r3, #2
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d006      	beq.n	80088ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7fe fd6d 	bl	80073a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f040 80a2 	bne.w	8008a20 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088e4:	e853 3f00 	ldrex	r3, [r3]
 80088e8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80088ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	461a      	mov	r2, r3
 80088fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008900:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008904:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800890c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e4      	bne.n	80088dc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3308      	adds	r3, #8
 8008918:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008928:	f023 0301 	bic.w	r3, r3, #1
 800892c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3308      	adds	r3, #8
 8008936:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800893a:	66ba      	str	r2, [r7, #104]	; 0x68
 800893c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008940:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008942:	e841 2300 	strex	r3, r2, [r1]
 8008946:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1e1      	bne.n	8008912 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a5f      	ldr	r2, [pc, #380]	; (8008ae4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d021      	beq.n	80089b0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01a      	beq.n	80089b0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008982:	e853 3f00 	ldrex	r3, [r3]
 8008986:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800898a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800898e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800899c:	657b      	str	r3, [r7, #84]	; 0x54
 800899e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e4      	bne.n	800897a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d130      	bne.n	8008a1a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	f023 0310 	bic.w	r3, r3, #16
 80089d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089e0:	643b      	str	r3, [r7, #64]	; 0x40
 80089e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e4      	bne.n	80089be <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d103      	bne.n	8008a0a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2210      	movs	r2, #16
 8008a08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7fe fcce 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
 8008a18:	e002      	b.n	8008a20 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7fa f8c4 	bl	8002ba8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a20:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d006      	beq.n	8008a36 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f47f aecf 	bne.w	80087d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a3c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d049      	beq.n	8008adc <UART_RxISR_8BIT_FIFOEN+0x350>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a4e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d242      	bcs.n	8008adc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3308      	adds	r3, #8
 8008a76:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e3      	bne.n	8008a56 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a15      	ldr	r2, [pc, #84]	; (8008ae8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008a92:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f043 0320 	orr.w	r3, r3, #32
 8008aa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ab6:	61bb      	str	r3, [r7, #24]
 8008ab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	6979      	ldr	r1, [r7, #20]
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e4      	bne.n	8008a94 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aca:	e007      	b.n	8008adc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699a      	ldr	r2, [r3, #24]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0208 	orr.w	r2, r2, #8
 8008ada:	619a      	str	r2, [r3, #24]
}
 8008adc:	bf00      	nop
 8008ade:	37b0      	adds	r7, #176	; 0xb0
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40008000 	.word	0x40008000
 8008ae8:	0800841d 	.word	0x0800841d

08008aec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b0ae      	sub	sp, #184	; 0xb8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008afa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b22:	2b22      	cmp	r3, #34	; 0x22
 8008b24:	f040 8186 	bne.w	8008e34 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b2e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b32:	e129      	b.n	8008d88 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008b46:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008b4a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008b4e:	4013      	ands	r3, r2
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5c:	1c9a      	adds	r2, r3, #2
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b82:	f003 0307 	and.w	r3, r3, #7
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d053      	beq.n	8008c32 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d011      	beq.n	8008bba <UART_RxISR_16BIT_FIFOEN+0xce>
 8008b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bb0:	f043 0201 	orr.w	r2, r3, #1
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d011      	beq.n	8008bea <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00b      	beq.n	8008bea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008be0:	f043 0204 	orr.w	r2, r3, #4
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bee:	f003 0304 	and.w	r3, r3, #4
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d011      	beq.n	8008c1a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2204      	movs	r2, #4
 8008c08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c10:	f043 0202 	orr.w	r2, r3, #2
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d006      	beq.n	8008c32 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7fe fbbb 	bl	80073a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f040 80a4 	bne.w	8008d88 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c48:	e853 3f00 	ldrex	r3, [r3]
 8008c4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c66:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e2      	bne.n	8008c40 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c90:	f023 0301 	bic.w	r3, r3, #1
 8008c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008ca2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ca4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ca8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e1      	bne.n	8008c7a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a5f      	ldr	r2, [pc, #380]	; (8008e4c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d021      	beq.n	8008d18 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d01a      	beq.n	8008d18 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cea:	e853 3f00 	ldrex	r3, [r3]
 8008cee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d0c:	e841 2300 	strex	r3, r2, [r1]
 8008d10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1e4      	bne.n	8008ce2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d130      	bne.n	8008d82 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2e:	e853 3f00 	ldrex	r3, [r3]
 8008d32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d36:	f023 0310 	bic.w	r3, r3, #16
 8008d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d48:	647b      	str	r3, [r7, #68]	; 0x44
 8008d4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e4      	bne.n	8008d26 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	69db      	ldr	r3, [r3, #28]
 8008d62:	f003 0310 	and.w	r3, r3, #16
 8008d66:	2b10      	cmp	r3, #16
 8008d68:	d103      	bne.n	8008d72 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2210      	movs	r2, #16
 8008d70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7fe fb1a 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
 8008d80:	e002      	b.n	8008d88 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7f9 ff10 	bl	8002ba8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d88:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d006      	beq.n	8008d9e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008d90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d94:	f003 0320 	and.w	r3, r3, #32
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f47f aecb 	bne.w	8008b34 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008da4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008da8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d049      	beq.n	8008e44 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008db6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d242      	bcs.n	8008e44 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	623b      	str	r3, [r7, #32]
   return(result);
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3308      	adds	r3, #8
 8008dde:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008de2:	633a      	str	r2, [r7, #48]	; 0x30
 8008de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e3      	bne.n	8008dbe <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a15      	ldr	r2, [pc, #84]	; (8008e50 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008dfa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f043 0320 	orr.w	r3, r3, #32
 8008e10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e1e:	61fb      	str	r3, [r7, #28]
 8008e20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e22:	69b9      	ldr	r1, [r7, #24]
 8008e24:	69fa      	ldr	r2, [r7, #28]
 8008e26:	e841 2300 	strex	r3, r2, [r1]
 8008e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1e4      	bne.n	8008dfc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e32:	e007      	b.n	8008e44 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	699a      	ldr	r2, [r3, #24]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0208 	orr.w	r2, r2, #8
 8008e42:	619a      	str	r2, [r3, #24]
}
 8008e44:	bf00      	nop
 8008e46:	37b8      	adds	r7, #184	; 0xb8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	40008000 	.word	0x40008000
 8008e50:	080085d5 	.word	0x080085d5

08008e54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d101      	bne.n	8008ea6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e027      	b.n	8008ef6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2224      	movs	r2, #36	; 0x24
 8008eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f022 0201 	bic.w	r2, r2, #1
 8008ecc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ed4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d101      	bne.n	8008f1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f16:	2302      	movs	r3, #2
 8008f18:	e02d      	b.n	8008f76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2224      	movs	r2, #36	; 0x24
 8008f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0201 	bic.w	r2, r2, #1
 8008f40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f850 	bl	8008ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e02d      	b.n	8008ff2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2224      	movs	r2, #36	; 0x24
 8008fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 0201 	bic.w	r2, r2, #1
 8008fbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f812 	bl	8008ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009008:	2b00      	cmp	r3, #0
 800900a:	d108      	bne.n	800901e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800901c:	e031      	b.n	8009082 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800901e:	2308      	movs	r3, #8
 8009020:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009022:	2308      	movs	r3, #8
 8009024:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	0e5b      	lsrs	r3, r3, #25
 800902e:	b2db      	uxtb	r3, r3
 8009030:	f003 0307 	and.w	r3, r3, #7
 8009034:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	0f5b      	lsrs	r3, r3, #29
 800903e:	b2db      	uxtb	r3, r3
 8009040:	f003 0307 	and.w	r3, r3, #7
 8009044:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009046:	7bbb      	ldrb	r3, [r7, #14]
 8009048:	7b3a      	ldrb	r2, [r7, #12]
 800904a:	4911      	ldr	r1, [pc, #68]	; (8009090 <UARTEx_SetNbDataToProcess+0x94>)
 800904c:	5c8a      	ldrb	r2, [r1, r2]
 800904e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009052:	7b3a      	ldrb	r2, [r7, #12]
 8009054:	490f      	ldr	r1, [pc, #60]	; (8009094 <UARTEx_SetNbDataToProcess+0x98>)
 8009056:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009058:	fb93 f3f2 	sdiv	r3, r3, r2
 800905c:	b29a      	uxth	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	7b7a      	ldrb	r2, [r7, #13]
 8009068:	4909      	ldr	r1, [pc, #36]	; (8009090 <UARTEx_SetNbDataToProcess+0x94>)
 800906a:	5c8a      	ldrb	r2, [r1, r2]
 800906c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009070:	7b7a      	ldrb	r2, [r7, #13]
 8009072:	4908      	ldr	r1, [pc, #32]	; (8009094 <UARTEx_SetNbDataToProcess+0x98>)
 8009074:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009076:	fb93 f3f2 	sdiv	r3, r3, r2
 800907a:	b29a      	uxth	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009082:	bf00      	nop
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	0800d94c 	.word	0x0800d94c
 8009094:	0800d954 	.word	0x0800d954

08009098 <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80090a2:	f7f7 fedf 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80090a6:	f7f7 fe6f 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 80090aa:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f062 0208 	orn	r2, r2, #8
 80090b4:	701a      	strb	r2, [r3, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	705a      	strb	r2, [r3, #1]
 80090ba:	2200      	movs	r2, #0
 80090bc:	709a      	strb	r2, [r3, #2]
 80090be:	2200      	movs	r2, #0
 80090c0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f042 0201 	orr.w	r2, r2, #1
 80090ca:	711a      	strb	r2, [r3, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	715a      	strb	r2, [r3, #5]
 80090d0:	2200      	movs	r2, #0
 80090d2:	719a      	strb	r2, [r3, #6]
 80090d4:	2200      	movs	r2, #0
 80090d6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80090de:	f7f7 fe9b 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80090e2:	f7f7 fe5d 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80090e6:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	689b      	ldr	r3, [r3, #8]

}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <otCoapMessageInitResponse>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	4611      	mov	r1, r2
 8009100:	461a      	mov	r2, r3
 8009102:	460b      	mov	r3, r1
 8009104:	71fb      	strb	r3, [r7, #7]
 8009106:	4613      	mov	r3, r2
 8009108:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800910a:	f7f7 feab 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800910e:	f7f7 fe3b 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 8009112:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	2200      	movs	r2, #0
 8009118:	f062 0227 	orn	r2, r2, #39	; 0x27
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	2200      	movs	r2, #0
 8009120:	705a      	strb	r2, [r3, #1]
 8009122:	2200      	movs	r2, #0
 8009124:	709a      	strb	r2, [r3, #2]
 8009126:	2200      	movs	r2, #0
 8009128:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2200      	movs	r2, #0
 800912e:	f042 0204 	orr.w	r2, r2, #4
 8009132:	711a      	strb	r2, [r3, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	715a      	strb	r2, [r3, #5]
 8009138:	2200      	movs	r2, #0
 800913a:	719a      	strb	r2, [r3, #6]
 800913c:	2200      	movs	r2, #0
 800913e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 800914c:	79fa      	ldrb	r2, [r7, #7]
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 8009152:	79ba      	ldrb	r2, [r7, #6]
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8009158:	f7f7 fe5e 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800915c:	f7f7 fe20 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009160:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	b2db      	uxtb	r3, r3
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <otCoapMessageGetType>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otCoapType otCoapMessageGetType(const otMessage *aMessage)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009178:	f7f7 fe74 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800917c:	f7f7 fe04 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 8009180:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TYPE;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f062 0218 	orn	r2, r2, #24
 800918a:	701a      	strb	r2, [r3, #0]
 800918c:	2200      	movs	r2, #0
 800918e:	705a      	strb	r2, [r3, #1]
 8009190:	2200      	movs	r2, #0
 8009192:	709a      	strb	r2, [r3, #2]
 8009194:	2200      	movs	r2, #0
 8009196:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	f042 0201 	orr.w	r2, r2, #1
 80091a0:	711a      	strb	r2, [r3, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	715a      	strb	r2, [r3, #5]
 80091a6:	2200      	movs	r2, #0
 80091a8:	719a      	strb	r2, [r3, #6]
 80091aa:	2200      	movs	r2, #0
 80091ac:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80091b4:	f7f7 fe30 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80091b8:	f7f7 fdf2 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80091bc:	60f8      	str	r0, [r7, #12]
  return (otCoapType)p_ot_req->Data[0];
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	b2db      	uxtb	r3, r3
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <otCoapStart>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80091d8:	f7f7 fe44 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80091dc:	f7f7 fdd4 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 80091e0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f062 0207 	orn	r2, r2, #7
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	2200      	movs	r2, #0
 80091ee:	705a      	strb	r2, [r3, #1]
 80091f0:	2200      	movs	r2, #0
 80091f2:	709a      	strb	r2, [r3, #2]
 80091f4:	2200      	movs	r2, #0
 80091f6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f042 0201 	orr.w	r2, r2, #1
 8009200:	711a      	strb	r2, [r3, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	715a      	strb	r2, [r3, #5]
 8009206:	2200      	movs	r2, #0
 8009208:	719a      	strb	r2, [r3, #6]
 800920a:	2200      	movs	r2, #0
 800920c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 800920e:	887a      	ldrh	r2, [r7, #2]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009214:	f7f7 fe00 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009218:	f7f7 fdc2 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800921c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	b2db      	uxtb	r3, r3
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009236:	f7f7 fe15 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800923a:	f7f7 fda5 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 800923e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f062 0203 	orn	r2, r2, #3
 8009248:	701a      	strb	r2, [r3, #0]
 800924a:	2200      	movs	r2, #0
 800924c:	705a      	strb	r2, [r3, #1]
 800924e:	2200      	movs	r2, #0
 8009250:	709a      	strb	r2, [r3, #2]
 8009252:	2200      	movs	r2, #0
 8009254:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f042 0201 	orr.w	r2, r2, #1
 800925e:	711a      	strb	r2, [r3, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	715a      	strb	r2, [r3, #5]
 8009264:	2200      	movs	r2, #0
 8009266:	719a      	strb	r2, [r3, #6]
 8009268:	2200      	movs	r2, #0
 800926a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009272:	f7f7 fdd1 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009276:	f7f7 fd93 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800927a:	60f8      	str	r0, [r7, #12]
}
 800927c:	bf00      	nop
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
 8009290:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 8009292:	f7f7 fde7 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009296:	f7f7 fd77 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 800929a:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f042 0201 	orr.w	r2, r2, #1
 80092a8:	705a      	strb	r2, [r3, #1]
 80092aa:	2200      	movs	r2, #0
 80092ac:	709a      	strb	r2, [r3, #2]
 80092ae:	2200      	movs	r2, #0
 80092b0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f042 0203 	orr.w	r2, r2, #3
 80092ba:	711a      	strb	r2, [r3, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	715a      	strb	r2, [r3, #5]
 80092c0:	2200      	movs	r2, #0
 80092c2:	719a      	strb	r2, [r3, #6]
 80092c4:	2200      	movs	r2, #0
 80092c6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 80092da:	f7f7 fd9d 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80092de:	f7f7 fd5f 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80092e2:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	b2db      	uxtb	r3, r3
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3718      	adds	r7, #24
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 80092f8:	f7f7 fdb4 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80092fc:	f7f7 fd44 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 8009300:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f062 0235 	orn	r2, r2, #53	; 0x35
 800930a:	701a      	strb	r2, [r3, #0]
 800930c:	2200      	movs	r2, #0
 800930e:	705a      	strb	r2, [r3, #1]
 8009310:	2200      	movs	r2, #0
 8009312:	709a      	strb	r2, [r3, #2]
 8009314:	2200      	movs	r2, #0
 8009316:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	711a      	strb	r2, [r3, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	715a      	strb	r2, [r3, #5]
 8009322:	2200      	movs	r2, #0
 8009324:	719a      	strb	r2, [r3, #6]
 8009326:	2200      	movs	r2, #0
 8009328:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800932a:	f7f7 fd75 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800932e:	f7f7 fd37 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009332:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <otInstanceFinalize>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009348:	f7f7 fd8c 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800934c:	f7f7 fd1c 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 8009350:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f062 0233 	orn	r2, r2, #51	; 0x33
 800935a:	701a      	strb	r2, [r3, #0]
 800935c:	2200      	movs	r2, #0
 800935e:	705a      	strb	r2, [r3, #1]
 8009360:	2200      	movs	r2, #0
 8009362:	709a      	strb	r2, [r3, #2]
 8009364:	2200      	movs	r2, #0
 8009366:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	711a      	strb	r2, [r3, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	715a      	strb	r2, [r3, #5]
 8009372:	2200      	movs	r2, #0
 8009374:	719a      	strb	r2, [r3, #6]
 8009376:	2200      	movs	r2, #0
 8009378:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800937a:	f7f7 fd4d 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800937e:	f7f7 fd0f 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009382:	60f8      	str	r0, [r7, #12]
}
 8009384:	bf00      	nop
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <otSetStateChangedCallback>:
#endif

#if OPENTHREAD_MTD || OPENTHREAD_FTD
otError otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
    void *aContext)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 8009398:	f7f7 fd64 	bl	8000e64 <Pre_OtCmdProcessing>
  /* Store the callback function */
  otStateChangedCb = aCallback;
 800939c:	4a15      	ldr	r2, [pc, #84]	; (80093f4 <otSetStateChangedCallback+0x68>)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6013      	str	r3, [r2, #0]
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80093a2:	f7f7 fcf1 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 80093a6:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f062 0232 	orn	r2, r2, #50	; 0x32
 80093b0:	701a      	strb	r2, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	705a      	strb	r2, [r3, #1]
 80093b6:	2200      	movs	r2, #0
 80093b8:	709a      	strb	r2, [r3, #2]
 80093ba:	2200      	movs	r2, #0
 80093bc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f042 0201 	orr.w	r2, r2, #1
 80093c6:	711a      	strb	r2, [r3, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	715a      	strb	r2, [r3, #5]
 80093cc:	2200      	movs	r2, #0
 80093ce:	719a      	strb	r2, [r3, #6]
 80093d0:	2200      	movs	r2, #0
 80093d2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aContext;
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80093da:	f7f7 fd1d 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80093de:	f7f7 fcdf 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80093e2:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	b2db      	uxtb	r3, r3
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3718      	adds	r7, #24
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	200005fc 	.word	0x200005fc

080093f8 <otInstanceErasePersistentInfo>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009400:	f7f7 fd30 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009404:	f7f7 fcc0 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 8009408:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f062 022c 	orn	r2, r2, #44	; 0x2c
 8009412:	701a      	strb	r2, [r3, #0]
 8009414:	2200      	movs	r2, #0
 8009416:	705a      	strb	r2, [r3, #1]
 8009418:	2200      	movs	r2, #0
 800941a:	709a      	strb	r2, [r3, #2]
 800941c:	2200      	movs	r2, #0
 800941e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	711a      	strb	r2, [r3, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	715a      	strb	r2, [r3, #5]
 800942a:	2200      	movs	r2, #0
 800942c:	719a      	strb	r2, [r3, #6]
 800942e:	2200      	movs	r2, #0
 8009430:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8009432:	f7f7 fcf1 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009436:	f7f7 fcb3 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800943a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	b2db      	uxtb	r3, r3
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8009456:	f7f7 fd05 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800945a:	f7f7 fc95 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 800945e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 8009468:	701a      	strb	r2, [r3, #0]
 800946a:	2200      	movs	r2, #0
 800946c:	705a      	strb	r2, [r3, #1]
 800946e:	2200      	movs	r2, #0
 8009470:	709a      	strb	r2, [r3, #2]
 8009472:	2200      	movs	r2, #0
 8009474:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f042 0201 	orr.w	r2, r2, #1
 800947e:	711a      	strb	r2, [r3, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	715a      	strb	r2, [r3, #5]
 8009484:	2200      	movs	r2, #0
 8009486:	719a      	strb	r2, [r3, #6]
 8009488:	2200      	movs	r2, #0
 800948a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800948c:	78fa      	ldrb	r2, [r7, #3]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009492:	f7f7 fcc1 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009496:	f7f7 fc83 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800949a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	b2db      	uxtb	r3, r3
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

otError otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80094b6:	f7f7 fcd5 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80094ba:	f7f7 fc65 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 80094be:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f042 0207 	orr.w	r2, r2, #7
 80094c8:	701a      	strb	r2, [r3, #0]
 80094ca:	2200      	movs	r2, #0
 80094cc:	705a      	strb	r2, [r3, #1]
 80094ce:	2200      	movs	r2, #0
 80094d0:	709a      	strb	r2, [r3, #2]
 80094d2:	2200      	movs	r2, #0
 80094d4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f042 0201 	orr.w	r2, r2, #1
 80094de:	711a      	strb	r2, [r3, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	715a      	strb	r2, [r3, #5]
 80094e4:	2200      	movs	r2, #0
 80094e6:	719a      	strb	r2, [r3, #6]
 80094e8:	2200      	movs	r2, #0
 80094ea:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80094f2:	f7f7 fc91 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80094f6:	f7f7 fc53 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80094fa:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	b2db      	uxtb	r3, r3
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

otError otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8009516:	f7f7 fca5 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800951a:	f7f7 fc35 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 800951e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f042 020e 	orr.w	r2, r2, #14
 8009528:	701a      	strb	r2, [r3, #0]
 800952a:	2200      	movs	r2, #0
 800952c:	705a      	strb	r2, [r3, #1]
 800952e:	2200      	movs	r2, #0
 8009530:	709a      	strb	r2, [r3, #2]
 8009532:	2200      	movs	r2, #0
 8009534:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f042 0201 	orr.w	r2, r2, #1
 800953e:	711a      	strb	r2, [r3, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	715a      	strb	r2, [r3, #5]
 8009544:	2200      	movs	r2, #0
 8009546:	719a      	strb	r2, [r3, #6]
 8009548:	2200      	movs	r2, #0
 800954a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800954c:	887a      	ldrh	r2, [r7, #2]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009552:	f7f7 fc61 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009556:	f7f7 fc23 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800955a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	b2db      	uxtb	r3, r3
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009572:	f7f7 fc77 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009576:	f7f7 fc07 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 800957a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	f042 0216 	orr.w	r2, r2, #22
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	2200      	movs	r2, #0
 8009588:	f042 0201 	orr.w	r2, r2, #1
 800958c:	705a      	strb	r2, [r3, #1]
 800958e:	2200      	movs	r2, #0
 8009590:	709a      	strb	r2, [r3, #2]
 8009592:	2200      	movs	r2, #0
 8009594:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f042 0201 	orr.w	r2, r2, #1
 800959e:	711a      	strb	r2, [r3, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	715a      	strb	r2, [r3, #5]
 80095a4:	2200      	movs	r2, #0
 80095a6:	719a      	strb	r2, [r3, #6]
 80095a8:	2200      	movs	r2, #0
 80095aa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80095b2:	f7f7 fc31 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80095b6:	f7f7 fbf3 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80095ba:	60f8      	str	r0, [r7, #12]
}
 80095bc:	bf00      	nop
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80095cc:	f7f7 fc4a 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80095d0:	f7f7 fbda 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 80095d4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f042 0219 	orr.w	r2, r2, #25
 80095de:	701a      	strb	r2, [r3, #0]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f042 0201 	orr.w	r2, r2, #1
 80095e6:	705a      	strb	r2, [r3, #1]
 80095e8:	2200      	movs	r2, #0
 80095ea:	709a      	strb	r2, [r3, #2]
 80095ec:	2200      	movs	r2, #0
 80095ee:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f042 0201 	orr.w	r2, r2, #1
 80095f8:	711a      	strb	r2, [r3, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	715a      	strb	r2, [r3, #5]
 80095fe:	2200      	movs	r2, #0
 8009600:	719a      	strb	r2, [r3, #6]
 8009602:	2200      	movs	r2, #0
 8009604:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800960c:	f7f7 fc04 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009610:	f7f7 fbc6 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009614:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	b29b      	uxth	r3, r3
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <otMessageRead>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	607a      	str	r2, [r7, #4]
 800962e:	461a      	mov	r2, r3
 8009630:	460b      	mov	r3, r1
 8009632:	817b      	strh	r3, [r7, #10]
 8009634:	4613      	mov	r3, r2
 8009636:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 8009638:	f7f7 fc14 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800963c:	f7f7 fba4 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 8009640:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2200      	movs	r2, #0
 8009646:	f042 021f 	orr.w	r2, r2, #31
 800964a:	701a      	strb	r2, [r3, #0]
 800964c:	2200      	movs	r2, #0
 800964e:	f042 0201 	orr.w	r2, r2, #1
 8009652:	705a      	strb	r2, [r3, #1]
 8009654:	2200      	movs	r2, #0
 8009656:	709a      	strb	r2, [r3, #2]
 8009658:	2200      	movs	r2, #0
 800965a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2200      	movs	r2, #0
 8009660:	f042 0204 	orr.w	r2, r2, #4
 8009664:	711a      	strb	r2, [r3, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	715a      	strb	r2, [r3, #5]
 800966a:	2200      	movs	r2, #0
 800966c:	719a      	strb	r2, [r3, #6]
 800966e:	2200      	movs	r2, #0
 8009670:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 8009678:	897a      	ldrh	r2, [r7, #10]
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 8009684:	893a      	ldrh	r2, [r7, #8]
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800968a:	f7f7 fbc5 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800968e:	f7f7 fb87 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009692:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	b29b      	uxth	r3, r3
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 80096a4:	b5b0      	push	{r4, r5, r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 80096ae:	f7f7 fb83 	bl	8000db8 <THREAD_Get_NotificationPayloadBuffer>
 80096b2:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	2b48      	cmp	r3, #72	; 0x48
 80096bc:	f200 8543 	bhi.w	800a146 <OpenThread_CallBack_Processing+0xaa2>
 80096c0:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <OpenThread_CallBack_Processing+0x24>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	08009a33 	.word	0x08009a33
 80096cc:	08009aeb 	.word	0x08009aeb
 80096d0:	08009b43 	.word	0x08009b43
 80096d4:	08009bef 	.word	0x08009bef
 80096d8:	08009bfb 	.word	0x08009bfb
 80096dc:	08009c19 	.word	0x08009c19
 80096e0:	0800a147 	.word	0x0800a147
 80096e4:	08009c43 	.word	0x08009c43
 80096e8:	08009c5d 	.word	0x08009c5d
 80096ec:	08009c91 	.word	0x08009c91
 80096f0:	08009caf 	.word	0x08009caf
 80096f4:	08009ccd 	.word	0x08009ccd
 80096f8:	0800a147 	.word	0x0800a147
 80096fc:	08009cf7 	.word	0x08009cf7
 8009700:	08009d59 	.word	0x08009d59
 8009704:	08009d7f 	.word	0x08009d7f
 8009708:	08009d9f 	.word	0x08009d9f
 800970c:	08009dbd 	.word	0x08009dbd
 8009710:	0800a147 	.word	0x0800a147
 8009714:	08009de5 	.word	0x08009de5
 8009718:	08009e0d 	.word	0x08009e0d
 800971c:	0800a147 	.word	0x0800a147
 8009720:	08009e2b 	.word	0x08009e2b
 8009724:	08009e4f 	.word	0x08009e4f
 8009728:	08009e79 	.word	0x08009e79
 800972c:	08009859 	.word	0x08009859
 8009730:	0800987d 	.word	0x0800987d
 8009734:	080098a1 	.word	0x080098a1
 8009738:	080098cb 	.word	0x080098cb
 800973c:	0800a147 	.word	0x0800a147
 8009740:	08009e99 	.word	0x08009e99
 8009744:	0800a147 	.word	0x0800a147
 8009748:	0800a147 	.word	0x0800a147
 800974c:	0800a147 	.word	0x0800a147
 8009750:	0800a147 	.word	0x0800a147
 8009754:	0800a147 	.word	0x0800a147
 8009758:	08009b21 	.word	0x08009b21
 800975c:	08009b81 	.word	0x08009b81
 8009760:	08009ba7 	.word	0x08009ba7
 8009764:	08009bcd 	.word	0x08009bcd
 8009768:	08009ebb 	.word	0x08009ebb
 800976c:	08009ef9 	.word	0x08009ef9
 8009770:	08009f11 	.word	0x08009f11
 8009774:	08009a4f 	.word	0x08009a4f
 8009778:	08009ab5 	.word	0x08009ab5
 800977c:	0800a147 	.word	0x0800a147
 8009780:	080098f5 	.word	0x080098f5
 8009784:	08009915 	.word	0x08009915
 8009788:	08009935 	.word	0x08009935
 800978c:	08009955 	.word	0x08009955
 8009790:	08009977 	.word	0x08009977
 8009794:	08009999 	.word	0x08009999
 8009798:	0800a147 	.word	0x0800a147
 800979c:	0800a147 	.word	0x0800a147
 80097a0:	080097ed 	.word	0x080097ed
 80097a4:	08009811 	.word	0x08009811
 80097a8:	08009835 	.word	0x08009835
 80097ac:	0800a147 	.word	0x0800a147
 80097b0:	0800a147 	.word	0x0800a147
 80097b4:	080099bb 	.word	0x080099bb
 80097b8:	080099d9 	.word	0x080099d9
 80097bc:	0800a147 	.word	0x0800a147
 80097c0:	08009a0b 	.word	0x08009a0b
 80097c4:	08009acd 	.word	0x08009acd
 80097c8:	08009f3f 	.word	0x08009f3f
 80097cc:	08009f5d 	.word	0x08009f5d
 80097d0:	08009f7b 	.word	0x08009f7b
 80097d4:	08009ff9 	.word	0x08009ff9
 80097d8:	0800a027 	.word	0x0800a027
 80097dc:	0800a06b 	.word	0x0800a06b
 80097e0:	0800a0d5 	.word	0x0800a0d5
 80097e4:	0800a113 	.word	0x0800a113
 80097e8:	0800a09f 	.word	0x0800a09f
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 80097ec:	4b9f      	ldr	r3, [pc, #636]	; (8009a6c <OpenThread_CallBack_Processing+0x3c8>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 84ab 	beq.w	800a14c <OpenThread_CallBack_Processing+0xaa8>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 80097f6:	4b9d      	ldr	r3, [pc, #628]	; (8009a6c <OpenThread_CallBack_Processing+0x3c8>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	6892      	ldr	r2, [r2, #8]
 80097fe:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 8009804:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800980a:	4798      	blx	r3
    }
    break;
 800980c:	f000 bc9e 	b.w	800a14c <OpenThread_CallBack_Processing+0xaa8>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 8009810:	4b97      	ldr	r3, [pc, #604]	; (8009a70 <OpenThread_CallBack_Processing+0x3cc>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 849b 	beq.w	800a150 <OpenThread_CallBack_Processing+0xaac>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800981a:	4b95      	ldr	r3, [pc, #596]	; (8009a70 <OpenThread_CallBack_Processing+0x3cc>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	6892      	ldr	r2, [r2, #8]
 8009822:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 8009828:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800982e:	4798      	blx	r3
    }
    break;
 8009830:	f000 bc8e 	b.w	800a150 <OpenThread_CallBack_Processing+0xaac>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 8009834:	4b8f      	ldr	r3, [pc, #572]	; (8009a74 <OpenThread_CallBack_Processing+0x3d0>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 848b 	beq.w	800a154 <OpenThread_CallBack_Processing+0xab0>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800983e:	4b8d      	ldr	r3, [pc, #564]	; (8009a74 <OpenThread_CallBack_Processing+0x3d0>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	6892      	ldr	r2, [r2, #8]
 8009846:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 8009848:	683a      	ldr	r2, [r7, #0]
 800984a:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800984c:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 8009852:	4798      	blx	r3
    }
    break;
 8009854:	f000 bc7e 	b.w	800a154 <OpenThread_CallBack_Processing+0xab0>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 8009858:	4b87      	ldr	r3, [pc, #540]	; (8009a78 <OpenThread_CallBack_Processing+0x3d4>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 847b 	beq.w	800a158 <OpenThread_CallBack_Processing+0xab4>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8009862:	4b85      	ldr	r3, [pc, #532]	; (8009a78 <OpenThread_CallBack_Processing+0x3d4>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	6892      	ldr	r2, [r2, #8]
 800986a:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8009870:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 8009876:	4798      	blx	r3
    }
    break;
 8009878:	f000 bc6e 	b.w	800a158 <OpenThread_CallBack_Processing+0xab4>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 800987c:	4b7f      	ldr	r3, [pc, #508]	; (8009a7c <OpenThread_CallBack_Processing+0x3d8>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 846b 	beq.w	800a15c <OpenThread_CallBack_Processing+0xab8>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8009886:	4b7d      	ldr	r3, [pc, #500]	; (8009a7c <OpenThread_CallBack_Processing+0x3d8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	6892      	ldr	r2, [r2, #8]
 800988e:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 8009894:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800989a:	4798      	blx	r3
    }
    break;
 800989c:	f000 bc5e 	b.w	800a15c <OpenThread_CallBack_Processing+0xab8>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 80098a0:	4b77      	ldr	r3, [pc, #476]	; (8009a80 <OpenThread_CallBack_Processing+0x3dc>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 845b 	beq.w	800a160 <OpenThread_CallBack_Processing+0xabc>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 80098aa:	4b75      	ldr	r3, [pc, #468]	; (8009a80 <OpenThread_CallBack_Processing+0x3dc>)
 80098ac:	681c      	ldr	r4, [r3, #0]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 80098b8:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 80098be:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 80098c4:	47a0      	blx	r4
    }
    break;
 80098c6:	f000 bc4b 	b.w	800a160 <OpenThread_CallBack_Processing+0xabc>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 80098ca:	4b6e      	ldr	r3, [pc, #440]	; (8009a84 <OpenThread_CallBack_Processing+0x3e0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f000 8448 	beq.w	800a164 <OpenThread_CallBack_Processing+0xac0>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 80098d4:	4b6b      	ldr	r3, [pc, #428]	; (8009a84 <OpenThread_CallBack_Processing+0x3e0>)
 80098d6:	681c      	ldr	r4, [r3, #0]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 80098e2:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 80098e8:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 80098ee:	47a0      	blx	r4
    }
    break;
 80098f0:	f000 bc38 	b.w	800a164 <OpenThread_CallBack_Processing+0xac0>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 80098f4:	4b64      	ldr	r3, [pc, #400]	; (8009a88 <OpenThread_CallBack_Processing+0x3e4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8435 	beq.w	800a168 <OpenThread_CallBack_Processing+0xac4>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 80098fe:	4b62      	ldr	r3, [pc, #392]	; (8009a88 <OpenThread_CallBack_Processing+0x3e4>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	6892      	ldr	r2, [r2, #8]
 8009906:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800990c:	4611      	mov	r1, r2
 800990e:	4798      	blx	r3
    }
    break;
 8009910:	f000 bc2a 	b.w	800a168 <OpenThread_CallBack_Processing+0xac4>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 8009914:	4b5d      	ldr	r3, [pc, #372]	; (8009a8c <OpenThread_CallBack_Processing+0x3e8>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8427 	beq.w	800a16c <OpenThread_CallBack_Processing+0xac8>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800991e:	4b5b      	ldr	r3, [pc, #364]	; (8009a8c <OpenThread_CallBack_Processing+0x3e8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	6892      	ldr	r2, [r2, #8]
 8009926:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800992c:	4611      	mov	r1, r2
 800992e:	4798      	blx	r3
    }
    break;
 8009930:	f000 bc1c 	b.w	800a16c <OpenThread_CallBack_Processing+0xac8>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 8009934:	4b56      	ldr	r3, [pc, #344]	; (8009a90 <OpenThread_CallBack_Processing+0x3ec>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 8419 	beq.w	800a170 <OpenThread_CallBack_Processing+0xacc>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800993e:	4b54      	ldr	r3, [pc, #336]	; (8009a90 <OpenThread_CallBack_Processing+0x3ec>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	6892      	ldr	r2, [r2, #8]
 8009946:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800994c:	4611      	mov	r1, r2
 800994e:	4798      	blx	r3
    }
    break;
 8009950:	f000 bc0e 	b.w	800a170 <OpenThread_CallBack_Processing+0xacc>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 8009954:	4b4f      	ldr	r3, [pc, #316]	; (8009a94 <OpenThread_CallBack_Processing+0x3f0>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 840b 	beq.w	800a174 <OpenThread_CallBack_Processing+0xad0>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 800995e:	4b4d      	ldr	r3, [pc, #308]	; (8009a94 <OpenThread_CallBack_Processing+0x3f0>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	6892      	ldr	r2, [r2, #8]
 8009966:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800996c:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 8009972:	4798      	blx	r3
    }
    break;
 8009974:	e3fe      	b.n	800a174 <OpenThread_CallBack_Processing+0xad0>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 8009976:	4b48      	ldr	r3, [pc, #288]	; (8009a98 <OpenThread_CallBack_Processing+0x3f4>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 83fc 	beq.w	800a178 <OpenThread_CallBack_Processing+0xad4>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 8009980:	4b45      	ldr	r3, [pc, #276]	; (8009a98 <OpenThread_CallBack_Processing+0x3f4>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	6892      	ldr	r2, [r2, #8]
 8009988:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 800998e:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 8009994:	4798      	blx	r3
    }
    break;
 8009996:	e3ef      	b.n	800a178 <OpenThread_CallBack_Processing+0xad4>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 8009998:	4b3f      	ldr	r3, [pc, #252]	; (8009a98 <OpenThread_CallBack_Processing+0x3f4>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 83ed 	beq.w	800a17c <OpenThread_CallBack_Processing+0xad8>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 80099a2:	4b3e      	ldr	r3, [pc, #248]	; (8009a9c <OpenThread_CallBack_Processing+0x3f8>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	6892      	ldr	r2, [r2, #8]
 80099aa:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 80099b0:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 80099b6:	4798      	blx	r3
    }
    break;
 80099b8:	e3e0      	b.n	800a17c <OpenThread_CallBack_Processing+0xad8>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 80099ba:	4b39      	ldr	r3, [pc, #228]	; (8009aa0 <OpenThread_CallBack_Processing+0x3fc>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 83de 	beq.w	800a180 <OpenThread_CallBack_Processing+0xadc>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 80099c4:	4b36      	ldr	r3, [pc, #216]	; (8009aa0 <OpenThread_CallBack_Processing+0x3fc>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	6892      	ldr	r2, [r2, #8]
 80099cc:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 80099d2:	4611      	mov	r1, r2
 80099d4:	4798      	blx	r3
    }
    break;
 80099d6:	e3d3      	b.n	800a180 <OpenThread_CallBack_Processing+0xadc>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 80099d8:	4b32      	ldr	r3, [pc, #200]	; (8009aa4 <OpenThread_CallBack_Processing+0x400>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 83d1 	beq.w	800a184 <OpenThread_CallBack_Processing+0xae0>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 80099e2:	4b30      	ldr	r3, [pc, #192]	; (8009aa4 <OpenThread_CallBack_Processing+0x400>)
 80099e4:	681c      	ldr	r4, [r3, #0]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 80099f0:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 80099f6:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 80099fc:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	462b      	mov	r3, r5
 8009a06:	47a0      	blx	r4
    }
    break;
 8009a08:	e3bc      	b.n	800a184 <OpenThread_CallBack_Processing+0xae0>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 8009a0a:	4b27      	ldr	r3, [pc, #156]	; (8009aa8 <OpenThread_CallBack_Processing+0x404>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 83ba 	beq.w	800a188 <OpenThread_CallBack_Processing+0xae4>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009a14:	4b24      	ldr	r3, [pc, #144]	; (8009aa8 <OpenThread_CallBack_Processing+0x404>)
 8009a16:	681c      	ldr	r4, [r3, #0]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009a22:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009a28:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 8009a2e:	47a0      	blx	r4
    }
    break;
 8009a30:	e3aa      	b.n	800a188 <OpenThread_CallBack_Processing+0xae4>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 8009a32:	4b1e      	ldr	r3, [pc, #120]	; (8009aac <OpenThread_CallBack_Processing+0x408>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 83a8 	beq.w	800a18c <OpenThread_CallBack_Processing+0xae8>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8009a3c:	4b1b      	ldr	r3, [pc, #108]	; (8009aac <OpenThread_CallBack_Processing+0x408>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 8009a48:	4611      	mov	r1, r2
 8009a4a:	4798      	blx	r3
    }
    break;
 8009a4c:	e39e      	b.n	800a18c <OpenThread_CallBack_Processing+0xae8>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 8009a4e:	4b18      	ldr	r3, [pc, #96]	; (8009ab0 <OpenThread_CallBack_Processing+0x40c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f000 839c 	beq.w	800a190 <OpenThread_CallBack_Processing+0xaec>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 8009a58:	4b15      	ldr	r3, [pc, #84]	; (8009ab0 <OpenThread_CallBack_Processing+0x40c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	6892      	ldr	r2, [r2, #8]
 8009a60:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 8009a66:	4611      	mov	r1, r2
 8009a68:	4798      	blx	r3
    }
    break;
 8009a6a:	e391      	b.n	800a190 <OpenThread_CallBack_Processing+0xaec>
 8009a6c:	20000690 	.word	0x20000690
 8009a70:	20000698 	.word	0x20000698
 8009a74:	20000694 	.word	0x20000694
 8009a78:	20000624 	.word	0x20000624
 8009a7c:	20000620 	.word	0x20000620
 8009a80:	20000628 	.word	0x20000628
 8009a84:	2000061c 	.word	0x2000061c
 8009a88:	2000069c 	.word	0x2000069c
 8009a8c:	200006a0 	.word	0x200006a0
 8009a90:	200006a4 	.word	0x200006a4
 8009a94:	200006ac 	.word	0x200006ac
 8009a98:	200006a8 	.word	0x200006a8
 8009a9c:	200006b0 	.word	0x200006b0
 8009aa0:	200006bc 	.word	0x200006bc
 8009aa4:	200006b8 	.word	0x200006b8
 8009aa8:	200006b4 	.word	0x200006b4
 8009aac:	200005fc 	.word	0x200005fc
 8009ab0:	2000062c 	.word	0x2000062c
  case MSG_M0TOM4_THREAD_DETACH_GRACEFULLY_CB:
    if (otDetachGracefullyCb != NULL)
 8009ab4:	4b97      	ldr	r3, [pc, #604]	; (8009d14 <OpenThread_CallBack_Processing+0x670>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 836b 	beq.w	800a194 <OpenThread_CallBack_Processing+0xaf0>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 8009abe:	4b95      	ldr	r3, [pc, #596]	; (8009d14 <OpenThread_CallBack_Processing+0x670>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	6892      	ldr	r2, [r2, #8]
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	4798      	blx	r3
    }
    break;
 8009aca:	e363      	b.n	800a194 <OpenThread_CallBack_Processing+0xaf0>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 8009acc:	4b92      	ldr	r3, [pc, #584]	; (8009d18 <OpenThread_CallBack_Processing+0x674>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 8361 	beq.w	800a198 <OpenThread_CallBack_Processing+0xaf4>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 8009ad6:	4b90      	ldr	r3, [pc, #576]	; (8009d18 <OpenThread_CallBack_Processing+0x674>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	6892      	ldr	r2, [r2, #8]
 8009ade:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4798      	blx	r3
    }
    break;
 8009ae8:	e356      	b.n	800a198 <OpenThread_CallBack_Processing+0xaf4>
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	461a      	mov	r2, r3
 8009af0:	4b8a      	ldr	r3, [pc, #552]	; (8009d1c <OpenThread_CallBack_Processing+0x678>)
 8009af2:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 8009af4:	4b89      	ldr	r3, [pc, #548]	; (8009d1c <OpenThread_CallBack_Processing+0x678>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	4a89      	ldr	r2, [pc, #548]	; (8009d20 <OpenThread_CallBack_Processing+0x67c>)
 8009afc:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 8009afe:	4b88      	ldr	r3, [pc, #544]	; (8009d20 <OpenThread_CallBack_Processing+0x67c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 834a 	beq.w	800a19c <OpenThread_CallBack_Processing+0xaf8>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8009b08:	4b85      	ldr	r3, [pc, #532]	; (8009d20 <OpenThread_CallBack_Processing+0x67c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a83      	ldr	r2, [pc, #524]	; (8009d1c <OpenThread_CallBack_Processing+0x678>)
 8009b0e:	6812      	ldr	r2, [r2, #0]
 8009b10:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8009b16:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 8009b1c:	4798      	blx	r3
    }
    break;
 8009b1e:	e33d      	b.n	800a19c <OpenThread_CallBack_Processing+0xaf8>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 8009b20:	4b80      	ldr	r3, [pc, #512]	; (8009d24 <OpenThread_CallBack_Processing+0x680>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 833b 	beq.w	800a1a0 <OpenThread_CallBack_Processing+0xafc>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009b2a:	4b7e      	ldr	r3, [pc, #504]	; (8009d24 <OpenThread_CallBack_Processing+0x680>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	6892      	ldr	r2, [r2, #8]
 8009b32:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009b38:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8009b3e:	4798      	blx	r3
    }
    break;
 8009b40:	e32e      	b.n	800a1a0 <OpenThread_CallBack_Processing+0xafc>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	461a      	mov	r2, r3
 8009b48:	4b77      	ldr	r3, [pc, #476]	; (8009d28 <OpenThread_CallBack_Processing+0x684>)
 8009b4a:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 8009b4c:	4b76      	ldr	r3, [pc, #472]	; (8009d28 <OpenThread_CallBack_Processing+0x684>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	4a76      	ldr	r2, [pc, #472]	; (8009d2c <OpenThread_CallBack_Processing+0x688>)
 8009b54:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 8009b56:	4b75      	ldr	r3, [pc, #468]	; (8009d2c <OpenThread_CallBack_Processing+0x688>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f000 8322 	beq.w	800a1a4 <OpenThread_CallBack_Processing+0xb00>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009b60:	4b72      	ldr	r3, [pc, #456]	; (8009d2c <OpenThread_CallBack_Processing+0x688>)
 8009b62:	681c      	ldr	r4, [r3, #0]
 8009b64:	4b70      	ldr	r3, [pc, #448]	; (8009d28 <OpenThread_CallBack_Processing+0x684>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009b6e:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009b74:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	47a0      	blx	r4
    }
    break;
 8009b7e:	e311      	b.n	800a1a4 <OpenThread_CallBack_Processing+0xb00>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 8009b80:	4b6b      	ldr	r3, [pc, #428]	; (8009d30 <OpenThread_CallBack_Processing+0x68c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 830f 	beq.w	800a1a8 <OpenThread_CallBack_Processing+0xb04>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8009b8a:	4b69      	ldr	r3, [pc, #420]	; (8009d30 <OpenThread_CallBack_Processing+0x68c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	6892      	ldr	r2, [r2, #8]
 8009b92:	2a00      	cmp	r2, #0
 8009b94:	bf14      	ite	ne
 8009b96:	2201      	movne	r2, #1
 8009b98:	2200      	moveq	r2, #0
 8009b9a:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	4798      	blx	r3
    }
    break;
 8009ba4:	e300      	b.n	800a1a8 <OpenThread_CallBack_Processing+0xb04>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 8009ba6:	4b62      	ldr	r3, [pc, #392]	; (8009d30 <OpenThread_CallBack_Processing+0x68c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 82fe 	beq.w	800a1ac <OpenThread_CallBack_Processing+0xb08>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8009bb0:	4b5f      	ldr	r3, [pc, #380]	; (8009d30 <OpenThread_CallBack_Processing+0x68c>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	6892      	ldr	r2, [r2, #8]
 8009bb8:	2a00      	cmp	r2, #0
 8009bba:	bf14      	ite	ne
 8009bbc:	2201      	movne	r2, #1
 8009bbe:	2200      	moveq	r2, #0
 8009bc0:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	4798      	blx	r3
    }
    break;
 8009bca:	e2ef      	b.n	800a1ac <OpenThread_CallBack_Processing+0xb08>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 8009bcc:	4b59      	ldr	r3, [pc, #356]	; (8009d34 <OpenThread_CallBack_Processing+0x690>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 82ed 	beq.w	800a1b0 <OpenThread_CallBack_Processing+0xb0c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 8009bd6:	4b57      	ldr	r3, [pc, #348]	; (8009d34 <OpenThread_CallBack_Processing+0x690>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	6892      	ldr	r2, [r2, #8]
 8009bde:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 8009be4:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 8009bea:	4798      	blx	r3
    }
    break;
 8009bec:	e2e0      	b.n	800a1b0 <OpenThread_CallBack_Processing+0xb0c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 8009bee:	2001      	movs	r0, #1
 8009bf0:	f000 fb45 	bl	800a27e <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 8009bf4:	f7fa f881 	bl	8003cfa <HAL_NVIC_SystemReset>
    break;
 8009bf8:	e317      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 8009bfa:	4b4f      	ldr	r3, [pc, #316]	; (8009d38 <OpenThread_CallBack_Processing+0x694>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 82d8 	beq.w	800a1b4 <OpenThread_CallBack_Processing+0xb10>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8009c04:	4b4c      	ldr	r3, [pc, #304]	; (8009d38 <OpenThread_CallBack_Processing+0x694>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	6892      	ldr	r2, [r2, #8]
 8009c0c:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8009c12:	4611      	mov	r1, r2
 8009c14:	4798      	blx	r3
    }
    break;
 8009c16:	e2cd      	b.n	800a1b4 <OpenThread_CallBack_Processing+0xb10>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 8009c18:	4b48      	ldr	r3, [pc, #288]	; (8009d3c <OpenThread_CallBack_Processing+0x698>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 82cb 	beq.w	800a1b8 <OpenThread_CallBack_Processing+0xb14>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009c22:	4b46      	ldr	r3, [pc, #280]	; (8009d3c <OpenThread_CallBack_Processing+0x698>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	6892      	ldr	r2, [r2, #8]
 8009c2a:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009c30:	2a00      	cmp	r2, #0
 8009c32:	bf14      	ite	ne
 8009c34:	2201      	movne	r2, #1
 8009c36:	2200      	moveq	r2, #0
 8009c38:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 8009c3e:	4798      	blx	r3
    }
    break;
 8009c40:	e2ba      	b.n	800a1b8 <OpenThread_CallBack_Processing+0xb14>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 8009c42:	4b3f      	ldr	r3, [pc, #252]	; (8009d40 <OpenThread_CallBack_Processing+0x69c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 82b8 	beq.w	800a1bc <OpenThread_CallBack_Processing+0xb18>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 8009c4c:	4b3c      	ldr	r3, [pc, #240]	; (8009d40 <OpenThread_CallBack_Processing+0x69c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 8009c54:	4611      	mov	r1, r2
 8009c56:	2000      	movs	r0, #0
 8009c58:	4798      	blx	r3
    }
    break;
 8009c5a:	e2af      	b.n	800a1bc <OpenThread_CallBack_Processing+0xb18>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 8009c5c:	4b39      	ldr	r3, [pc, #228]	; (8009d44 <OpenThread_CallBack_Processing+0x6a0>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 82ad 	beq.w	800a1c0 <OpenThread_CallBack_Processing+0xb1c>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8009c66:	4b37      	ldr	r3, [pc, #220]	; (8009d44 <OpenThread_CallBack_Processing+0x6a0>)
 8009c68:	681c      	ldr	r4, [r3, #0]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8009c74:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8009c7a:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8009c80:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	462b      	mov	r3, r5
 8009c8c:	47a0      	blx	r4
    }
    break;
 8009c8e:	e297      	b.n	800a1c0 <OpenThread_CallBack_Processing+0xb1c>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 8009c90:	4b2d      	ldr	r3, [pc, #180]	; (8009d48 <OpenThread_CallBack_Processing+0x6a4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 8295 	beq.w	800a1c4 <OpenThread_CallBack_Processing+0xb20>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8009c9a:	4b2b      	ldr	r3, [pc, #172]	; (8009d48 <OpenThread_CallBack_Processing+0x6a4>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	6892      	ldr	r2, [r2, #8]
 8009ca2:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8009ca4:	683a      	ldr	r2, [r7, #0]
 8009ca6:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8009ca8:	4611      	mov	r1, r2
 8009caa:	4798      	blx	r3
    }
    break;
 8009cac:	e28a      	b.n	800a1c4 <OpenThread_CallBack_Processing+0xb20>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 8009cae:	4b27      	ldr	r3, [pc, #156]	; (8009d4c <OpenThread_CallBack_Processing+0x6a8>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 8288 	beq.w	800a1c8 <OpenThread_CallBack_Processing+0xb24>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8009cb8:	4b24      	ldr	r3, [pc, #144]	; (8009d4c <OpenThread_CallBack_Processing+0x6a8>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	6892      	ldr	r2, [r2, #8]
 8009cc0:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4798      	blx	r3
    }
    break;
 8009cca:	e27d      	b.n	800a1c8 <OpenThread_CallBack_Processing+0xb24>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 8009ccc:	4b20      	ldr	r3, [pc, #128]	; (8009d50 <OpenThread_CallBack_Processing+0x6ac>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 827b 	beq.w	800a1cc <OpenThread_CallBack_Processing+0xb28>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8009cd6:	4b1e      	ldr	r3, [pc, #120]	; (8009d50 <OpenThread_CallBack_Processing+0x6ac>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	6892      	ldr	r2, [r2, #8]
 8009cde:	4610      	mov	r0, r2
          p_notification->Data[1],
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8009ce4:	2a00      	cmp	r2, #0
 8009ce6:	bf14      	ite	ne
 8009ce8:	2201      	movne	r2, #1
 8009cea:	2200      	moveq	r2, #0
 8009cec:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8009cf2:	4798      	blx	r3
    }
    break;
 8009cf4:	e26a      	b.n	800a1cc <OpenThread_CallBack_Processing+0xb28>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 8009cf6:	4b17      	ldr	r3, [pc, #92]	; (8009d54 <OpenThread_CallBack_Processing+0x6b0>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 8268 	beq.w	800a1d0 <OpenThread_CallBack_Processing+0xb2c>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 8009d00:	4b14      	ldr	r3, [pc, #80]	; (8009d54 <OpenThread_CallBack_Processing+0x6b0>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	683a      	ldr	r2, [r7, #0]
 8009d06:	6892      	ldr	r2, [r2, #8]
 8009d08:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 8009d0e:	4611      	mov	r1, r2
 8009d10:	4798      	blx	r3
    }
    break;
 8009d12:	e25d      	b.n	800a1d0 <OpenThread_CallBack_Processing+0xb2c>
 8009d14:	20000630 	.word	0x20000630
 8009d18:	20000634 	.word	0x20000634
 8009d1c:	20000678 	.word	0x20000678
 8009d20:	2000066c 	.word	0x2000066c
 8009d24:	20000670 	.word	0x20000670
 8009d28:	2000067c 	.word	0x2000067c
 8009d2c:	20000674 	.word	0x20000674
 8009d30:	20000684 	.word	0x20000684
 8009d34:	20000680 	.word	0x20000680
 8009d38:	20000604 	.word	0x20000604
 8009d3c:	20000608 	.word	0x20000608
 8009d40:	20000600 	.word	0x20000600
 8009d44:	2000060c 	.word	0x2000060c
 8009d48:	20000610 	.word	0x20000610
 8009d4c:	20000614 	.word	0x20000614
 8009d50:	20000618 	.word	0x20000618
 8009d54:	20000638 	.word	0x20000638
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 8009d58:	4b95      	ldr	r3, [pc, #596]	; (8009fb0 <OpenThread_CallBack_Processing+0x90c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 8239 	beq.w	800a1d4 <OpenThread_CallBack_Processing+0xb30>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8009d62:	4b93      	ldr	r3, [pc, #588]	; (8009fb0 <OpenThread_CallBack_Processing+0x90c>)
 8009d64:	681c      	ldr	r4, [r3, #0]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8009d6e:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8009d74:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8009d7a:	47a0      	blx	r4
    }
    break;
 8009d7c:	e22a      	b.n	800a1d4 <OpenThread_CallBack_Processing+0xb30>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 8009d7e:	4b8d      	ldr	r3, [pc, #564]	; (8009fb4 <OpenThread_CallBack_Processing+0x910>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 8228 	beq.w	800a1d8 <OpenThread_CallBack_Processing+0xb34>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 8009d88:	4b8a      	ldr	r3, [pc, #552]	; (8009fb4 <OpenThread_CallBack_Processing+0x910>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	6892      	ldr	r2, [r2, #8]
 8009d90:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 8009d9a:	4798      	blx	r3
    }
    break;
 8009d9c:	e21c      	b.n	800a1d8 <OpenThread_CallBack_Processing+0xb34>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 8009d9e:	4b86      	ldr	r3, [pc, #536]	; (8009fb8 <OpenThread_CallBack_Processing+0x914>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 821a 	beq.w	800a1dc <OpenThread_CallBack_Processing+0xb38>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 8009da8:	4b83      	ldr	r3, [pc, #524]	; (8009fb8 <OpenThread_CallBack_Processing+0x914>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	6892      	ldr	r2, [r2, #8]
 8009db0:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 8009db6:	4611      	mov	r1, r2
 8009db8:	4798      	blx	r3
    }
    break;
 8009dba:	e20f      	b.n	800a1dc <OpenThread_CallBack_Processing+0xb38>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 8009dbc:	4b7f      	ldr	r3, [pc, #508]	; (8009fbc <OpenThread_CallBack_Processing+0x918>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 820d 	beq.w	800a1e0 <OpenThread_CallBack_Processing+0xb3c>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 8009dc6:	4b7d      	ldr	r3, [pc, #500]	; (8009fbc <OpenThread_CallBack_Processing+0x918>)
 8009dc8:	681c      	ldr	r4, [r3, #0]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 8009dd4:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 8009dda:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 8009de0:	47a0      	blx	r4
    }
    break;
 8009de2:	e1fd      	b.n	800a1e0 <OpenThread_CallBack_Processing+0xb3c>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 8009de4:	4b76      	ldr	r3, [pc, #472]	; (8009fc0 <OpenThread_CallBack_Processing+0x91c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 81fb 	beq.w	800a1e4 <OpenThread_CallBack_Processing+0xb40>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8009dee:	4b74      	ldr	r3, [pc, #464]	; (8009fc0 <OpenThread_CallBack_Processing+0x91c>)
 8009df0:	681c      	ldr	r4, [r3, #0]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8009dfc:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8009e02:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8009e08:	47a0      	blx	r4
    }
    break;
 8009e0a:	e1eb      	b.n	800a1e4 <OpenThread_CallBack_Processing+0xb40>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 8009e0c:	4b6d      	ldr	r3, [pc, #436]	; (8009fc4 <OpenThread_CallBack_Processing+0x920>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 81e9 	beq.w	800a1e8 <OpenThread_CallBack_Processing+0xb44>
    {
      otJoinerCb((otError) p_notification->Data[0],
 8009e16:	4b6b      	ldr	r3, [pc, #428]	; (8009fc4 <OpenThread_CallBack_Processing+0x920>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	6892      	ldr	r2, [r2, #8]
 8009e1e:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 8009e24:	4611      	mov	r1, r2
 8009e26:	4798      	blx	r3
    }
    break;
 8009e28:	e1de      	b.n	800a1e8 <OpenThread_CallBack_Processing+0xb44>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 8009e2a:	4b67      	ldr	r3, [pc, #412]	; (8009fc8 <OpenThread_CallBack_Processing+0x924>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 81dc 	beq.w	800a1ec <OpenThread_CallBack_Processing+0xb48>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8009e34:	4b64      	ldr	r3, [pc, #400]	; (8009fc8 <OpenThread_CallBack_Processing+0x924>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	6892      	ldr	r2, [r2, #8]
 8009e3c:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8009e42:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8009e48:	b2d2      	uxtb	r2, r2
 8009e4a:	4798      	blx	r3
    }
    break;
 8009e4c:	e1ce      	b.n	800a1ec <OpenThread_CallBack_Processing+0xb48>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 8009e4e:	4b5f      	ldr	r3, [pc, #380]	; (8009fcc <OpenThread_CallBack_Processing+0x928>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f000 81cc 	beq.w	800a1f0 <OpenThread_CallBack_Processing+0xb4c>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009e58:	4b5c      	ldr	r3, [pc, #368]	; (8009fcc <OpenThread_CallBack_Processing+0x928>)
 8009e5a:	681c      	ldr	r4, [r3, #0]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009e66:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009e6c:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	47a0      	blx	r4
    }
    break;
 8009e76:	e1bb      	b.n	800a1f0 <OpenThread_CallBack_Processing+0xb4c>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 8009e78:	4b55      	ldr	r3, [pc, #340]	; (8009fd0 <OpenThread_CallBack_Processing+0x92c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 81b9 	beq.w	800a1f4 <OpenThread_CallBack_Processing+0xb50>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8009e82:	4b53      	ldr	r3, [pc, #332]	; (8009fd0 <OpenThread_CallBack_Processing+0x92c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	6892      	ldr	r2, [r2, #8]
 8009e8a:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8009e90:	b252      	sxtb	r2, r2
 8009e92:	4611      	mov	r1, r2
 8009e94:	4798      	blx	r3
    }
    break;
 8009e96:	e1ad      	b.n	800a1f4 <OpenThread_CallBack_Processing+0xb50>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 8009e98:	4b4e      	ldr	r3, [pc, #312]	; (8009fd4 <OpenThread_CallBack_Processing+0x930>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 81ab 	beq.w	800a1f8 <OpenThread_CallBack_Processing+0xb54>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 8009ea2:	4b4c      	ldr	r3, [pc, #304]	; (8009fd4 <OpenThread_CallBack_Processing+0x930>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	6892      	ldr	r2, [r2, #8]
 8009eaa:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 8009eb0:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 8009eb6:	4798      	blx	r3
    }
    break;
 8009eb8:	e19e      	b.n	800a1f8 <OpenThread_CallBack_Processing+0xb54>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	4b45      	ldr	r3, [pc, #276]	; (8009fd8 <OpenThread_CallBack_Processing+0x934>)
 8009ec2:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 8009ec4:	4b44      	ldr	r3, [pc, #272]	; (8009fd8 <OpenThread_CallBack_Processing+0x934>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	4a44      	ldr	r2, [pc, #272]	; (8009fdc <OpenThread_CallBack_Processing+0x938>)
 8009ecc:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 8009ece:	4b43      	ldr	r3, [pc, #268]	; (8009fdc <OpenThread_CallBack_Processing+0x938>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f000 8192 	beq.w	800a1fc <OpenThread_CallBack_Processing+0xb58>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 8009ed8:	4b40      	ldr	r3, [pc, #256]	; (8009fdc <OpenThread_CallBack_Processing+0x938>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a3e      	ldr	r2, [pc, #248]	; (8009fd8 <OpenThread_CallBack_Processing+0x934>)
 8009ede:	6812      	ldr	r2, [r2, #0]
 8009ee0:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 8009ee6:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 8009eec:	4798      	blx	r3
 8009eee:	4603      	mov	r3, r0
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	609a      	str	r2, [r3, #8]
      }
      break;
 8009ef6:	e181      	b.n	800a1fc <OpenThread_CallBack_Processing+0xb58>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 8009ef8:	4b39      	ldr	r3, [pc, #228]	; (8009fe0 <OpenThread_CallBack_Processing+0x93c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 817f 	beq.w	800a200 <OpenThread_CallBack_Processing+0xb5c>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 8009f02:	4b37      	ldr	r3, [pc, #220]	; (8009fe0 <OpenThread_CallBack_Processing+0x93c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	6892      	ldr	r2, [r2, #8]
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	4798      	blx	r3
    }
    break;
 8009f0e:	e177      	b.n	800a200 <OpenThread_CallBack_Processing+0xb5c>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 8009f10:	4b34      	ldr	r3, [pc, #208]	; (8009fe4 <OpenThread_CallBack_Processing+0x940>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 8175 	beq.w	800a204 <OpenThread_CallBack_Processing+0xb60>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 8009f1a:	4b32      	ldr	r3, [pc, #200]	; (8009fe4 <OpenThread_CallBack_Processing+0x940>)
 8009f1c:	6819      	ldr	r1, [r3, #0]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 8009f28:	2200      	movs	r2, #0
 8009f2a:	461c      	mov	r4, r3
 8009f2c:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	4622      	mov	r2, r4
 8009f38:	462b      	mov	r3, r5
 8009f3a:	4788      	blx	r1
    }
    break;
 8009f3c:	e162      	b.n	800a204 <OpenThread_CallBack_Processing+0xb60>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 8009f3e:	4b2a      	ldr	r3, [pc, #168]	; (8009fe8 <OpenThread_CallBack_Processing+0x944>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f000 8160 	beq.w	800a208 <OpenThread_CallBack_Processing+0xb64>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 8009f48:	4b27      	ldr	r3, [pc, #156]	; (8009fe8 <OpenThread_CallBack_Processing+0x944>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	6892      	ldr	r2, [r2, #8]
 8009f50:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 8009f56:	4611      	mov	r1, r2
 8009f58:	4798      	blx	r3
    }
    break;
 8009f5a:	e155      	b.n	800a208 <OpenThread_CallBack_Processing+0xb64>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 8009f5c:	4b23      	ldr	r3, [pc, #140]	; (8009fec <OpenThread_CallBack_Processing+0x948>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 8153 	beq.w	800a20c <OpenThread_CallBack_Processing+0xb68>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 8009f66:	4b21      	ldr	r3, [pc, #132]	; (8009fec <OpenThread_CallBack_Processing+0x948>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	6892      	ldr	r2, [r2, #8]
 8009f6e:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 8009f74:	4611      	mov	r1, r2
 8009f76:	4798      	blx	r3
    }
    break;
 8009f78:	e148      	b.n	800a20c <OpenThread_CallBack_Processing+0xb68>
//      otTcpBytesAckedCb((otTcpEndpoint *) p_notification->Data[0],
//          (size_t) p_notification->Data[1]);
//    }
//    break;
  case MSG_M0TOM4_TCP_DISCONNECTED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009f82:	4a1b      	ldr	r2, [pc, #108]	; (8009ff0 <OpenThread_CallBack_Processing+0x94c>)
 8009f84:	6013      	str	r3, [r2, #0]

    otTcpDisconnectedCb = mySTTcpEndpointHandlerContext->mDisconnectedCallback;
 8009f86:	4b1a      	ldr	r3, [pc, #104]	; (8009ff0 <OpenThread_CallBack_Processing+0x94c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	4a19      	ldr	r2, [pc, #100]	; (8009ff4 <OpenThread_CallBack_Processing+0x950>)
 8009f8e:	6013      	str	r3, [r2, #0]

    if (otTcpDisconnectedCb != NULL)
 8009f90:	4b18      	ldr	r3, [pc, #96]	; (8009ff4 <OpenThread_CallBack_Processing+0x950>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 813b 	beq.w	800a210 <OpenThread_CallBack_Processing+0xb6c>
    {
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 8009f9a:	4b16      	ldr	r3, [pc, #88]	; (8009ff4 <OpenThread_CallBack_Processing+0x950>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	6892      	ldr	r2, [r2, #8]
 8009fa2:	4610      	mov	r0, r2
          (otTcpDisconnectedReason) p_notification->Data[1]);
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	68d2      	ldr	r2, [r2, #12]
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 8009fa8:	b2d2      	uxtb	r2, r2
 8009faa:	4611      	mov	r1, r2
 8009fac:	4798      	blx	r3
    }
    break;
 8009fae:	e12f      	b.n	800a210 <OpenThread_CallBack_Processing+0xb6c>
 8009fb0:	20000644 	.word	0x20000644
 8009fb4:	20000648 	.word	0x20000648
 8009fb8:	2000063c 	.word	0x2000063c
 8009fbc:	20000640 	.word	0x20000640
 8009fc0:	2000064c 	.word	0x2000064c
 8009fc4:	20000650 	.word	0x20000650
 8009fc8:	20000654 	.word	0x20000654
 8009fcc:	20000658 	.word	0x20000658
 8009fd0:	2000065c 	.word	0x2000065c
 8009fd4:	20000660 	.word	0x20000660
 8009fd8:	20000668 	.word	0x20000668
 8009fdc:	20000664 	.word	0x20000664
 8009fe0:	20000688 	.word	0x20000688
 8009fe4:	2000068c 	.word	0x2000068c
 8009fe8:	200006c0 	.word	0x200006c0
 8009fec:	200006c4 	.word	0x200006c4
 8009ff0:	200006c8 	.word	0x200006c8
 8009ff4:	200006d0 	.word	0x200006d0
  case MSG_M0TOM4_TCP_ESTABLISHED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a000:	4a8d      	ldr	r2, [pc, #564]	; (800a238 <OpenThread_CallBack_Processing+0xb94>)
 800a002:	6013      	str	r3, [r2, #0]

    otTcpEstablishedCb = mySTTcpEndpointHandlerContext->mEstablishedCallback;
 800a004:	4b8c      	ldr	r3, [pc, #560]	; (800a238 <OpenThread_CallBack_Processing+0xb94>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	4a8c      	ldr	r2, [pc, #560]	; (800a23c <OpenThread_CallBack_Processing+0xb98>)
 800a00c:	6013      	str	r3, [r2, #0]

    if (otTcpEstablishedCb != NULL)
 800a00e:	4b8b      	ldr	r3, [pc, #556]	; (800a23c <OpenThread_CallBack_Processing+0xb98>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 80fe 	beq.w	800a214 <OpenThread_CallBack_Processing+0xb70>
    {
      otTcpEstablishedCb((otTcpEndpoint *) p_notification->Data[0]);
 800a018:	4b88      	ldr	r3, [pc, #544]	; (800a23c <OpenThread_CallBack_Processing+0xb98>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	6892      	ldr	r2, [r2, #8]
 800a020:	4610      	mov	r0, r2
 800a022:	4798      	blx	r3
    }
    break;
 800a024:	e0f6      	b.n	800a214 <OpenThread_CallBack_Processing+0xb70>
  case MSG_M0TOM4_TCP_RECEIVE_AVAILABLE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a02e:	4a82      	ldr	r2, [pc, #520]	; (800a238 <OpenThread_CallBack_Processing+0xb94>)
 800a030:	6013      	str	r3, [r2, #0]

    otTcpReceiveAvailableCb = mySTTcpEndpointHandlerContext->mReceiveAvailableCallback;
 800a032:	4b81      	ldr	r3, [pc, #516]	; (800a238 <OpenThread_CallBack_Processing+0xb94>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	4a81      	ldr	r2, [pc, #516]	; (800a240 <OpenThread_CallBack_Processing+0xb9c>)
 800a03a:	6013      	str	r3, [r2, #0]

    if (otTcpReceiveAvailableCb != NULL)
 800a03c:	4b80      	ldr	r3, [pc, #512]	; (800a240 <OpenThread_CallBack_Processing+0xb9c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 80e9 	beq.w	800a218 <OpenThread_CallBack_Processing+0xb74>
    {
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800a046:	4b7e      	ldr	r3, [pc, #504]	; (800a240 <OpenThread_CallBack_Processing+0xb9c>)
 800a048:	681c      	ldr	r4, [r3, #0]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	4618      	mov	r0, r3
          (size_t) p_notification->Data[1],
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	68d9      	ldr	r1, [r3, #12]
          (bool) p_notification->Data[2],
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	691b      	ldr	r3, [r3, #16]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bf14      	ite	ne
 800a05c:	2301      	movne	r3, #1
 800a05e:	2300      	moveq	r3, #0
 800a060:	b2da      	uxtb	r2, r3
          (size_t) p_notification->Data[3]);
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	695b      	ldr	r3, [r3, #20]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800a066:	47a0      	blx	r4
    }
    break;
 800a068:	e0d6      	b.n	800a218 <OpenThread_CallBack_Processing+0xb74>
  case MSG_M0TOM4_TCP_SEND_DONE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a072:	4a71      	ldr	r2, [pc, #452]	; (800a238 <OpenThread_CallBack_Processing+0xb94>)
 800a074:	6013      	str	r3, [r2, #0]

    otTcpSendDoneCb = mySTTcpEndpointHandlerContext->mSendDoneCallback;
 800a076:	4b70      	ldr	r3, [pc, #448]	; (800a238 <OpenThread_CallBack_Processing+0xb94>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	4a71      	ldr	r2, [pc, #452]	; (800a244 <OpenThread_CallBack_Processing+0xba0>)
 800a07e:	6013      	str	r3, [r2, #0]

    if (otTcpSendDoneCb != NULL)
 800a080:	4b70      	ldr	r3, [pc, #448]	; (800a244 <OpenThread_CallBack_Processing+0xba0>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 80c9 	beq.w	800a21c <OpenThread_CallBack_Processing+0xb78>
    {
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800a08a:	4b6e      	ldr	r3, [pc, #440]	; (800a244 <OpenThread_CallBack_Processing+0xba0>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	6892      	ldr	r2, [r2, #8]
 800a092:	4610      	mov	r0, r2
          (otLinkedBuffer *) p_notification->Data[1]);
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	68d2      	ldr	r2, [r2, #12]
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800a098:	4611      	mov	r1, r2
 800a09a:	4798      	blx	r3
    }
    break;
 800a09c:	e0be      	b.n	800a21c <OpenThread_CallBack_Processing+0xb78>
//    {
//      otTcpSendReadyCb((otTcpEndpoint *) p_notification->Data[0]);
//    }
//    break;
  case MSG_M0TOM4_TCP_FORWARD_PROGRESS_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a0a6:	4a64      	ldr	r2, [pc, #400]	; (800a238 <OpenThread_CallBack_Processing+0xb94>)
 800a0a8:	6013      	str	r3, [r2, #0]

    mForwardProgressCallback = mySTTcpEndpointHandlerContext->mForwardProgressCallback;
 800a0aa:	4b63      	ldr	r3, [pc, #396]	; (800a238 <OpenThread_CallBack_Processing+0xb94>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	4a65      	ldr	r2, [pc, #404]	; (800a248 <OpenThread_CallBack_Processing+0xba4>)
 800a0b2:	6013      	str	r3, [r2, #0]

    if (mForwardProgressCallback != NULL)
 800a0b4:	4b64      	ldr	r3, [pc, #400]	; (800a248 <OpenThread_CallBack_Processing+0xba4>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 80b1 	beq.w	800a220 <OpenThread_CallBack_Processing+0xb7c>
    {
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800a0be:	4b62      	ldr	r3, [pc, #392]	; (800a248 <OpenThread_CallBack_Processing+0xba4>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	6892      	ldr	r2, [r2, #8]
 800a0c6:	4610      	mov	r0, r2
          (size_t) p_notification->Data[1],
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	68d1      	ldr	r1, [r2, #12]
          (size_t) p_notification->Data[2]);
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	6912      	ldr	r2, [r2, #16]
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800a0d0:	4798      	blx	r3
    }
    break;
 800a0d2:	e0a5      	b.n	800a220 <OpenThread_CallBack_Processing+0xb7c>
  case MSG_M0TOM4_TCP_ACCEPT_READY_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	4a5c      	ldr	r2, [pc, #368]	; (800a24c <OpenThread_CallBack_Processing+0xba8>)
 800a0dc:	6013      	str	r3, [r2, #0]

    otTcpAcceptReadyCb = mySTTcpListenerHandlerContext->mAcceptReadyCallback;
 800a0de:	4b5b      	ldr	r3, [pc, #364]	; (800a24c <OpenThread_CallBack_Processing+0xba8>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	4a5a      	ldr	r2, [pc, #360]	; (800a250 <OpenThread_CallBack_Processing+0xbac>)
 800a0e6:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptReadyCb != NULL)
 800a0e8:	4b59      	ldr	r3, [pc, #356]	; (800a250 <OpenThread_CallBack_Processing+0xbac>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 8099 	beq.w	800a224 <OpenThread_CallBack_Processing+0xb80>
    {
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800a0f2:	4b57      	ldr	r3, [pc, #348]	; (800a250 <OpenThread_CallBack_Processing+0xbac>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	6892      	ldr	r2, [r2, #8]
 800a0fa:	4610      	mov	r0, r2
          (const otSockAddr *) p_notification->Data[1],
 800a0fc:	683a      	ldr	r2, [r7, #0]
 800a0fe:	68d2      	ldr	r2, [r2, #12]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800a100:	4611      	mov	r1, r2
          (otTcpEndpoint **) p_notification->Data[2]);
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	6912      	ldr	r2, [r2, #16]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800a106:	4798      	blx	r3
 800a108:	4603      	mov	r3, r0
 800a10a:	461a      	mov	r2, r3
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	609a      	str	r2, [r3, #8]
    }
    break;
 800a110:	e088      	b.n	800a224 <OpenThread_CallBack_Processing+0xb80>
  case MSG_M0TOM4_TCP_ACCEPT_DONE_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	4a4c      	ldr	r2, [pc, #304]	; (800a24c <OpenThread_CallBack_Processing+0xba8>)
 800a11a:	6013      	str	r3, [r2, #0]

    otTcpAcceptDoneCb = mySTTcpListenerHandlerContext->mAcceptDoneCallback;
 800a11c:	4b4b      	ldr	r3, [pc, #300]	; (800a24c <OpenThread_CallBack_Processing+0xba8>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	4a4c      	ldr	r2, [pc, #304]	; (800a254 <OpenThread_CallBack_Processing+0xbb0>)
 800a124:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptDoneCb != NULL)
 800a126:	4b4b      	ldr	r3, [pc, #300]	; (800a254 <OpenThread_CallBack_Processing+0xbb0>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d07c      	beq.n	800a228 <OpenThread_CallBack_Processing+0xb84>
    {
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800a12e:	4b49      	ldr	r3, [pc, #292]	; (800a254 <OpenThread_CallBack_Processing+0xbb0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	6892      	ldr	r2, [r2, #8]
 800a136:	4610      	mov	r0, r2
          (otTcpEndpoint *) p_notification->Data[1],
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	68d2      	ldr	r2, [r2, #12]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800a13c:	4611      	mov	r1, r2
          (const otSockAddr *) p_notification->Data[2]);
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	6912      	ldr	r2, [r2, #16]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800a142:	4798      	blx	r3
    }
    break;
 800a144:	e070      	b.n	800a228 <OpenThread_CallBack_Processing+0xb84>
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	71fb      	strb	r3, [r7, #7]
    break;
 800a14a:	e06e      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a14c:	bf00      	nop
 800a14e:	e06c      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a150:	bf00      	nop
 800a152:	e06a      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a154:	bf00      	nop
 800a156:	e068      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a158:	bf00      	nop
 800a15a:	e066      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a15c:	bf00      	nop
 800a15e:	e064      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a160:	bf00      	nop
 800a162:	e062      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a164:	bf00      	nop
 800a166:	e060      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a168:	bf00      	nop
 800a16a:	e05e      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a16c:	bf00      	nop
 800a16e:	e05c      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a170:	bf00      	nop
 800a172:	e05a      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a174:	bf00      	nop
 800a176:	e058      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a178:	bf00      	nop
 800a17a:	e056      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a17c:	bf00      	nop
 800a17e:	e054      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a180:	bf00      	nop
 800a182:	e052      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a184:	bf00      	nop
 800a186:	e050      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a188:	bf00      	nop
 800a18a:	e04e      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a18c:	bf00      	nop
 800a18e:	e04c      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a190:	bf00      	nop
 800a192:	e04a      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a194:	bf00      	nop
 800a196:	e048      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a198:	bf00      	nop
 800a19a:	e046      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a19c:	bf00      	nop
 800a19e:	e044      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1a0:	bf00      	nop
 800a1a2:	e042      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1a4:	bf00      	nop
 800a1a6:	e040      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1a8:	bf00      	nop
 800a1aa:	e03e      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1ac:	bf00      	nop
 800a1ae:	e03c      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1b0:	bf00      	nop
 800a1b2:	e03a      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1b4:	bf00      	nop
 800a1b6:	e038      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1b8:	bf00      	nop
 800a1ba:	e036      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1bc:	bf00      	nop
 800a1be:	e034      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1c0:	bf00      	nop
 800a1c2:	e032      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1c4:	bf00      	nop
 800a1c6:	e030      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1c8:	bf00      	nop
 800a1ca:	e02e      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1cc:	bf00      	nop
 800a1ce:	e02c      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1d0:	bf00      	nop
 800a1d2:	e02a      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1d4:	bf00      	nop
 800a1d6:	e028      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1d8:	bf00      	nop
 800a1da:	e026      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1dc:	bf00      	nop
 800a1de:	e024      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1e0:	bf00      	nop
 800a1e2:	e022      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1e4:	bf00      	nop
 800a1e6:	e020      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1e8:	bf00      	nop
 800a1ea:	e01e      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1ec:	bf00      	nop
 800a1ee:	e01c      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1f0:	bf00      	nop
 800a1f2:	e01a      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1f4:	bf00      	nop
 800a1f6:	e018      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a1f8:	bf00      	nop
 800a1fa:	e016      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
      break;
 800a1fc:	bf00      	nop
 800a1fe:	e014      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a200:	bf00      	nop
 800a202:	e012      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a204:	bf00      	nop
 800a206:	e010      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a208:	bf00      	nop
 800a20a:	e00e      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a20c:	bf00      	nop
 800a20e:	e00c      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a210:	bf00      	nop
 800a212:	e00a      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a214:	bf00      	nop
 800a216:	e008      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a218:	bf00      	nop
 800a21a:	e006      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a21c:	bf00      	nop
 800a21e:	e004      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a220:	bf00      	nop
 800a222:	e002      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a224:	bf00      	nop
 800a226:	e000      	b.n	800a22a <OpenThread_CallBack_Processing+0xb86>
    break;
 800a228:	bf00      	nop
  }

  TL_THREAD_SendAck();
 800a22a:	f000 fbdf 	bl	800a9ec <TL_THREAD_SendAck>
  return status;
 800a22e:	79fb      	ldrb	r3, [r7, #7]

}
 800a230:	4618      	mov	r0, r3
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bdb0      	pop	{r4, r5, r7, pc}
 800a238:	200006c8 	.word	0x200006c8
 800a23c:	200006d4 	.word	0x200006d4
 800a240:	200006d8 	.word	0x200006d8
 800a244:	200006dc 	.word	0x200006dc
 800a248:	200006e8 	.word	0x200006e8
 800a24c:	200006cc 	.word	0x200006cc
 800a250:	200006e0 	.word	0x200006e0
 800a254:	200006e4 	.word	0x200006e4

0800a258 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a25e:	1d3b      	adds	r3, r7, #4
 800a260:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2200      	movs	r2, #0
 800a266:	2100      	movs	r1, #0
 800a268:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800a26c:	f000 f938 	bl	800a4e0 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	330b      	adds	r3, #11
 800a274:	78db      	ldrb	r3, [r3, #3]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b088      	sub	sp, #32
 800a282:	af00      	add	r7, sp, #0
 800a284:	4603      	mov	r3, r0
 800a286:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a288:	f107 030c 	add.w	r3, r7, #12
 800a28c:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800a28e:	79fb      	ldrb	r3, [r7, #7]
 800a290:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800a292:	f107 020c 	add.w	r2, r7, #12
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	2101      	movs	r1, #1
 800a29a:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800a29e:	f000 f91f 	bl	800a4e0 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	330b      	adds	r3, #11
 800a2a6:	78db      	ldrb	r3, [r3, #3]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3720      	adds	r7, #32
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b08b      	sub	sp, #44	; 0x2c
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a2d8:	4b4a      	ldr	r3, [pc, #296]	; (800a404 <SHCI_GetWirelessFwInfo+0x154>)
 800a2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a2e0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a2ea:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a44      	ldr	r2, [pc, #272]	; (800a408 <SHCI_GetWirelessFwInfo+0x158>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d10f      	bne.n	800a31c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	617b      	str	r3, [r7, #20]
 800a31a:	e01a      	b.n	800a352 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a324:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a328:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	0e1b      	lsrs	r3, r3, #24
 800a356:	b2da      	uxtb	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	0c1b      	lsrs	r3, r3, #16
 800a360:	b2da      	uxtb	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a368:	0a1b      	lsrs	r3, r3, #8
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	091b      	lsrs	r3, r3, #4
 800a374:	b2db      	uxtb	r3, r3
 800a376:	f003 030f 	and.w	r3, r3, #15
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	b2db      	uxtb	r3, r3
 800a384:	f003 030f 	and.w	r3, r3, #15
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	0e1b      	lsrs	r3, r3, #24
 800a392:	b2da      	uxtb	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	0c1b      	lsrs	r3, r3, #16
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	0a1b      	lsrs	r3, r3, #8
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	0e1b      	lsrs	r3, r3, #24
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	0c1b      	lsrs	r3, r3, #16
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	0a1b      	lsrs	r3, r3, #8
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	0e1b      	lsrs	r3, r3, #24
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	0c1b      	lsrs	r3, r3, #16
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	b2da      	uxtb	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	372c      	adds	r7, #44	; 0x2c
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	58004000 	.word	0x58004000
 800a408:	a94656b9 	.word	0xa94656b9

0800a40c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	4a08      	ldr	r2, [pc, #32]	; (800a43c <shci_init+0x30>)
 800a41c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a41e:	4a08      	ldr	r2, [pc, #32]	; (800a440 <shci_init+0x34>)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a424:	4806      	ldr	r0, [pc, #24]	; (800a440 <shci_init+0x34>)
 800a426:	f000 f911 	bl	800a64c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 f894 	bl	800a55c <TlInit>

  return;
 800a434:	bf00      	nop
}
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	2000070c 	.word	0x2000070c
 800a440:	200006ec 	.word	0x200006ec

0800a444 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a44a:	4822      	ldr	r0, [pc, #136]	; (800a4d4 <shci_user_evt_proc+0x90>)
 800a44c:	f000 ff62 	bl	800b314 <LST_is_empty>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d12b      	bne.n	800a4ae <shci_user_evt_proc+0x6a>
 800a456:	4b20      	ldr	r3, [pc, #128]	; (800a4d8 <shci_user_evt_proc+0x94>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d027      	beq.n	800a4ae <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a45e:	f107 030c 	add.w	r3, r7, #12
 800a462:	4619      	mov	r1, r3
 800a464:	481b      	ldr	r0, [pc, #108]	; (800a4d4 <shci_user_evt_proc+0x90>)
 800a466:	f000 ffe4 	bl	800b432 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a46a:	4b1c      	ldr	r3, [pc, #112]	; (800a4dc <shci_user_evt_proc+0x98>)
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00c      	beq.n	800a48c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a476:	2301      	movs	r3, #1
 800a478:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a47a:	4b18      	ldr	r3, [pc, #96]	; (800a4dc <shci_user_evt_proc+0x98>)
 800a47c:	69db      	ldr	r3, [r3, #28]
 800a47e:	1d3a      	adds	r2, r7, #4
 800a480:	4610      	mov	r0, r2
 800a482:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a484:	793a      	ldrb	r2, [r7, #4]
 800a486:	4b14      	ldr	r3, [pc, #80]	; (800a4d8 <shci_user_evt_proc+0x94>)
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	e002      	b.n	800a492 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a48c:	4b12      	ldr	r3, [pc, #72]	; (800a4d8 <shci_user_evt_proc+0x94>)
 800a48e:	2201      	movs	r2, #1
 800a490:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a492:	4b11      	ldr	r3, [pc, #68]	; (800a4d8 <shci_user_evt_proc+0x94>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d004      	beq.n	800a4a4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 fb21 	bl	800aae4 <TL_MM_EvtDone>
 800a4a2:	e004      	b.n	800a4ae <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	480a      	ldr	r0, [pc, #40]	; (800a4d4 <shci_user_evt_proc+0x90>)
 800a4aa:	f000 ff55 	bl	800b358 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a4ae:	4809      	ldr	r0, [pc, #36]	; (800a4d4 <shci_user_evt_proc+0x90>)
 800a4b0:	f000 ff30 	bl	800b314 <LST_is_empty>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d107      	bne.n	800a4ca <shci_user_evt_proc+0x86>
 800a4ba:	4b07      	ldr	r3, [pc, #28]	; (800a4d8 <shci_user_evt_proc+0x94>)
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a4c2:	4804      	ldr	r0, [pc, #16]	; (800a4d4 <shci_user_evt_proc+0x90>)
 800a4c4:	f7f7 fbb0 	bl	8001c28 <shci_notify_asynch_evt>
  }


  return;
 800a4c8:	bf00      	nop
 800a4ca:	bf00      	nop
}
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000090 	.word	0x20000090
 800a4d8:	200000a0 	.word	0x200000a0
 800a4dc:	200006ec 	.word	0x200006ec

0800a4e0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60ba      	str	r2, [r7, #8]
 800a4e8:	607b      	str	r3, [r7, #4]
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	81fb      	strh	r3, [r7, #14]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	f000 f864 	bl	800a5c0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a4f8:	4b16      	ldr	r3, [pc, #88]	; (800a554 <shci_send+0x74>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	89fa      	ldrh	r2, [r7, #14]
 800a4fe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a502:	4b14      	ldr	r3, [pc, #80]	; (800a554 <shci_send+0x74>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	7b7a      	ldrb	r2, [r7, #13]
 800a508:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a50a:	4b12      	ldr	r3, [pc, #72]	; (800a554 <shci_send+0x74>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	330c      	adds	r3, #12
 800a510:	7b7a      	ldrb	r2, [r7, #13]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	4618      	mov	r0, r3
 800a516:	f001 fbd7 	bl	800bcc8 <memcpy>

  shciContext.io.Send(0,0);
 800a51a:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <shci_send+0x78>)
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	2100      	movs	r1, #0
 800a520:	2000      	movs	r0, #0
 800a522:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a524:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a528:	f7f7 fb95 	bl	8001c56 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f103 0008 	add.w	r0, r3, #8
 800a532:	4b08      	ldr	r3, [pc, #32]	; (800a554 <shci_send+0x74>)
 800a534:	6819      	ldr	r1, [r3, #0]
 800a536:	4b07      	ldr	r3, [pc, #28]	; (800a554 <shci_send+0x74>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	789b      	ldrb	r3, [r3, #2]
 800a53c:	3303      	adds	r3, #3
 800a53e:	461a      	mov	r2, r3
 800a540:	f001 fbc2 	bl	800bcc8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a544:	2001      	movs	r0, #1
 800a546:	f000 f83b 	bl	800a5c0 <Cmd_SetStatus>

  return;
 800a54a:	bf00      	nop
}
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	2000009c 	.word	0x2000009c
 800a558:	200006ec 	.word	0x200006ec

0800a55c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a564:	4a10      	ldr	r2, [pc, #64]	; (800a5a8 <TlInit+0x4c>)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a56a:	4810      	ldr	r0, [pc, #64]	; (800a5ac <TlInit+0x50>)
 800a56c:	f000 fec2 	bl	800b2f4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a570:	2001      	movs	r0, #1
 800a572:	f000 f825 	bl	800a5c0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a576:	4b0e      	ldr	r3, [pc, #56]	; (800a5b0 <TlInit+0x54>)
 800a578:	2201      	movs	r2, #1
 800a57a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a57c:	4b0d      	ldr	r3, [pc, #52]	; (800a5b4 <TlInit+0x58>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00c      	beq.n	800a59e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a588:	4b0b      	ldr	r3, [pc, #44]	; (800a5b8 <TlInit+0x5c>)
 800a58a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a58c:	4b0b      	ldr	r3, [pc, #44]	; (800a5bc <TlInit+0x60>)
 800a58e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a590:	4b08      	ldr	r3, [pc, #32]	; (800a5b4 <TlInit+0x58>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f107 020c 	add.w	r2, r7, #12
 800a598:	4610      	mov	r0, r2
 800a59a:	4798      	blx	r3
  }

  return;
 800a59c:	bf00      	nop
 800a59e:	bf00      	nop
}
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	2000009c 	.word	0x2000009c
 800a5ac:	20000090 	.word	0x20000090
 800a5b0:	200000a0 	.word	0x200000a0
 800a5b4:	200006ec 	.word	0x200006ec
 800a5b8:	0800a611 	.word	0x0800a611
 800a5bc:	0800a629 	.word	0x0800a629

0800a5c0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a5ca:	79fb      	ldrb	r3, [r7, #7]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10b      	bne.n	800a5e8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a5d0:	4b0d      	ldr	r3, [pc, #52]	; (800a608 <Cmd_SetStatus+0x48>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d003      	beq.n	800a5e0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a5d8:	4b0b      	ldr	r3, [pc, #44]	; (800a608 <Cmd_SetStatus+0x48>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2000      	movs	r0, #0
 800a5de:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <Cmd_SetStatus+0x4c>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a5e6:	e00b      	b.n	800a600 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a5e8:	4b08      	ldr	r3, [pc, #32]	; (800a60c <Cmd_SetStatus+0x4c>)
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <Cmd_SetStatus+0x48>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d004      	beq.n	800a600 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a5f6:	4b04      	ldr	r3, [pc, #16]	; (800a608 <Cmd_SetStatus+0x48>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	4798      	blx	r3
  return;
 800a5fe:	bf00      	nop
 800a600:	bf00      	nop
}
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	2000070c 	.word	0x2000070c
 800a60c:	20000098 	.word	0x20000098

0800a610 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a618:	2000      	movs	r0, #0
 800a61a:	f7f7 fb11 	bl	8001c40 <shci_cmd_resp_release>

  return;
 800a61e:	bf00      	nop
}
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a630:	6879      	ldr	r1, [r7, #4]
 800a632:	4805      	ldr	r0, [pc, #20]	; (800a648 <TlUserEvtReceived+0x20>)
 800a634:	f000 feb6 	bl	800b3a4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a638:	4803      	ldr	r0, [pc, #12]	; (800a648 <TlUserEvtReceived+0x20>)
 800a63a:	f7f7 faf5 	bl	8001c28 <shci_notify_asynch_evt>

  return;
 800a63e:	bf00      	nop
}
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20000090 	.word	0x20000090

0800a64c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a05      	ldr	r2, [pc, #20]	; (800a66c <shci_register_io_bus+0x20>)
 800a658:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a04      	ldr	r2, [pc, #16]	; (800a670 <shci_register_io_bus+0x24>)
 800a65e:	611a      	str	r2, [r3, #16]

  return;
 800a660:	bf00      	nop
}
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	0800a879 	.word	0x0800a879
 800a670:	0800a8cd 	.word	0x0800a8cd

0800a674 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a680:	f7f6 fbf0 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a684:	f7f6 fb80 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 800a688:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a692:	701a      	strb	r2, [r3, #0]
 800a694:	2200      	movs	r2, #0
 800a696:	705a      	strb	r2, [r3, #1]
 800a698:	2200      	movs	r2, #0
 800a69a:	709a      	strb	r2, [r3, #2]
 800a69c:	2200      	movs	r2, #0
 800a69e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f042 0201 	orr.w	r2, r2, #1
 800a6a8:	711a      	strb	r2, [r3, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	715a      	strb	r2, [r3, #5]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	719a      	strb	r2, [r3, #6]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a6bc:	f7f6 fbac 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a6c0:	f7f6 fb6e 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a6c4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	b2db      	uxtb	r3, r3
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <otThreadSetNetworkKey>:
  return (otNetworkKeyRef)p_ot_req->Data[0];
}
#endif

otError otThreadSetNetworkKey(otInstance *aInstance, const otNetworkKey *aKey)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a6de:	f7f6 fbc1 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a6e2:	f7f6 fb51 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 800a6e6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_KEY;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f042 026f 	orr.w	r2, r2, #111	; 0x6f
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	705a      	strb	r2, [r3, #1]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	709a      	strb	r2, [r3, #2]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f042 0201 	orr.w	r2, r2, #1
 800a706:	711a      	strb	r2, [r3, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	715a      	strb	r2, [r3, #5]
 800a70c:	2200      	movs	r2, #0
 800a70e:	719a      	strb	r2, [r3, #6]
 800a710:	2200      	movs	r2, #0
 800a712:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a71a:	f7f6 fb7d 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a71e:	f7f6 fb3f 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a722:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	b2db      	uxtb	r3, r3
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a73a:	f7f6 fb93 	bl	8000e64 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a73e:	f7f6 fb23 	bl	8000d88 <THREAD_Get_OTCmdPayloadBuffer>
 800a742:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f062 0279 	orn	r2, r2, #121	; 0x79
 800a74c:	701a      	strb	r2, [r3, #0]
 800a74e:	2200      	movs	r2, #0
 800a750:	705a      	strb	r2, [r3, #1]
 800a752:	2200      	movs	r2, #0
 800a754:	709a      	strb	r2, [r3, #2]
 800a756:	2200      	movs	r2, #0
 800a758:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	711a      	strb	r2, [r3, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	715a      	strb	r2, [r3, #5]
 800a764:	2200      	movs	r2, #0
 800a766:	719a      	strb	r2, [r3, #6]
 800a768:	2200      	movs	r2, #0
 800a76a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a76c:	f7f6 fb54 	bl	8000e18 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a770:	f7f6 fb16 	bl	8000da0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a774:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	b2db      	uxtb	r3, r3
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a788:	f7f6 fe34 	bl	80013f4 <HW_IPCC_Enable>

  return;
 800a78c:	bf00      	nop
}
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <TL_Init>:


void TL_Init( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a794:	4b10      	ldr	r3, [pc, #64]	; (800a7d8 <TL_Init+0x48>)
 800a796:	4a11      	ldr	r2, [pc, #68]	; (800a7dc <TL_Init+0x4c>)
 800a798:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a79a:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <TL_Init+0x48>)
 800a79c:	4a10      	ldr	r2, [pc, #64]	; (800a7e0 <TL_Init+0x50>)
 800a79e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a7a0:	4b0d      	ldr	r3, [pc, #52]	; (800a7d8 <TL_Init+0x48>)
 800a7a2:	4a10      	ldr	r2, [pc, #64]	; (800a7e4 <TL_Init+0x54>)
 800a7a4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a7a6:	4b0c      	ldr	r3, [pc, #48]	; (800a7d8 <TL_Init+0x48>)
 800a7a8:	4a0f      	ldr	r2, [pc, #60]	; (800a7e8 <TL_Init+0x58>)
 800a7aa:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a7ac:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <TL_Init+0x48>)
 800a7ae:	4a0f      	ldr	r2, [pc, #60]	; (800a7ec <TL_Init+0x5c>)
 800a7b0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <TL_Init+0x48>)
 800a7b4:	4a0e      	ldr	r2, [pc, #56]	; (800a7f0 <TL_Init+0x60>)
 800a7b6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a7b8:	4b07      	ldr	r3, [pc, #28]	; (800a7d8 <TL_Init+0x48>)
 800a7ba:	4a0e      	ldr	r2, [pc, #56]	; (800a7f4 <TL_Init+0x64>)
 800a7bc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a7be:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <TL_Init+0x48>)
 800a7c0:	4a0d      	ldr	r2, [pc, #52]	; (800a7f8 <TL_Init+0x68>)
 800a7c2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a7c4:	4b04      	ldr	r3, [pc, #16]	; (800a7d8 <TL_Init+0x48>)
 800a7c6:	4a0d      	ldr	r2, [pc, #52]	; (800a7fc <TL_Init+0x6c>)
 800a7c8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a7ca:	4b03      	ldr	r3, [pc, #12]	; (800a7d8 <TL_Init+0x48>)
 800a7cc:	4a0c      	ldr	r2, [pc, #48]	; (800a800 <TL_Init+0x70>)
 800a7ce:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a7d0:	f7f6 fe24 	bl	800141c <HW_IPCC_Init>

  return;
 800a7d4:	bf00      	nop
}
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20030000 	.word	0x20030000
 800a7dc:	20030038 	.word	0x20030038
 800a7e0:	20030058 	.word	0x20030058
 800a7e4:	20030068 	.word	0x20030068
 800a7e8:	20030078 	.word	0x20030078
 800a7ec:	20030080 	.word	0x20030080
 800a7f0:	20030088 	.word	0x20030088
 800a7f4:	20030090 	.word	0x20030090
 800a7f8:	200300ac 	.word	0x200300ac
 800a7fc:	200300b0 	.word	0x200300b0
 800a800:	200300bc 	.word	0x200300bc

0800a804 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a80a:	e01c      	b.n	800a846 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a80c:	1d3b      	adds	r3, r7, #4
 800a80e:	4619      	mov	r1, r3
 800a810:	4812      	ldr	r0, [pc, #72]	; (800a85c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a812:	f000 fe0e 	bl	800b432 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	7a5b      	ldrb	r3, [r3, #9]
 800a81a:	2b0f      	cmp	r3, #15
 800a81c:	d003      	beq.n	800a826 <HW_IPCC_BLE_RxEvtNot+0x22>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	7a5b      	ldrb	r3, [r3, #9]
 800a822:	2b0e      	cmp	r3, #14
 800a824:	d105      	bne.n	800a832 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4619      	mov	r1, r3
 800a82a:	2002      	movs	r0, #2
 800a82c:	f000 f9be 	bl	800abac <OutputDbgTrace>
 800a830:	e004      	b.n	800a83c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4619      	mov	r1, r3
 800a836:	2003      	movs	r0, #3
 800a838:	f000 f9b8 	bl	800abac <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a83c:	4b08      	ldr	r3, [pc, #32]	; (800a860 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	4610      	mov	r0, r2
 800a844:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a846:	4805      	ldr	r0, [pc, #20]	; (800a85c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a848:	f000 fd64 	bl	800b314 <LST_is_empty>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d0dc      	beq.n	800a80c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a852:	bf00      	nop
}
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	200300d8 	.word	0x200300d8
 800a860:	20000718 	.word	0x20000718

0800a864 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a868:	4b02      	ldr	r3, [pc, #8]	; (800a874 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4798      	blx	r3

  return;
 800a86e:	bf00      	nop
}
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	2000071c 	.word	0x2000071c

0800a878 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a884:	480d      	ldr	r0, [pc, #52]	; (800a8bc <TL_SYS_Init+0x44>)
 800a886:	f000 fd35 	bl	800b2f4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a88a:	4b0d      	ldr	r3, [pc, #52]	; (800a8c0 <TL_SYS_Init+0x48>)
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	689a      	ldr	r2, [r3, #8]
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	4a08      	ldr	r2, [pc, #32]	; (800a8bc <TL_SYS_Init+0x44>)
 800a89c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a89e:	f7f6 fdeb 	bl	8001478 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a07      	ldr	r2, [pc, #28]	; (800a8c4 <TL_SYS_Init+0x4c>)
 800a8a8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	4a06      	ldr	r2, [pc, #24]	; (800a8c8 <TL_SYS_Init+0x50>)
 800a8b0:	6013      	str	r3, [r2, #0]

  return 0;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	200300e0 	.word	0x200300e0
 800a8c0:	20030000 	.word	0x20030000
 800a8c4:	20000720 	.word	0x20000720
 800a8c8:	20000724 	.word	0x20000724

0800a8cc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a8d8:	4b09      	ldr	r3, [pc, #36]	; (800a900 <TL_SYS_SendCmd+0x34>)
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2210      	movs	r2, #16
 800a8e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a8e2:	4b07      	ldr	r3, [pc, #28]	; (800a900 <TL_SYS_SendCmd+0x34>)
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	2004      	movs	r0, #4
 800a8ec:	f000 f95e 	bl	800abac <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a8f0:	f7f6 fdcc 	bl	800148c <HW_IPCC_SYS_SendCmd>

  return 0;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	20030000 	.word	0x20030000

0800a904 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a908:	4b07      	ldr	r3, [pc, #28]	; (800a928 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4619      	mov	r1, r3
 800a910:	2005      	movs	r0, #5
 800a912:	f000 f94b 	bl	800abac <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a916:	4b05      	ldr	r3, [pc, #20]	; (800a92c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a03      	ldr	r2, [pc, #12]	; (800a928 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a91c:	68d2      	ldr	r2, [r2, #12]
 800a91e:	6812      	ldr	r2, [r2, #0]
 800a920:	4610      	mov	r0, r2
 800a922:	4798      	blx	r3

  return;
 800a924:	bf00      	nop
}
 800a926:	bd80      	pop	{r7, pc}
 800a928:	20030000 	.word	0x20030000
 800a92c:	20000720 	.word	0x20000720

0800a930 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a936:	e00e      	b.n	800a956 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a938:	1d3b      	adds	r3, r7, #4
 800a93a:	4619      	mov	r1, r3
 800a93c:	480b      	ldr	r0, [pc, #44]	; (800a96c <HW_IPCC_SYS_EvtNot+0x3c>)
 800a93e:	f000 fd78 	bl	800b432 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4619      	mov	r1, r3
 800a946:	2006      	movs	r0, #6
 800a948:	f000 f930 	bl	800abac <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a94c:	4b08      	ldr	r3, [pc, #32]	; (800a970 <HW_IPCC_SYS_EvtNot+0x40>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	4610      	mov	r0, r2
 800a954:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a956:	4805      	ldr	r0, [pc, #20]	; (800a96c <HW_IPCC_SYS_EvtNot+0x3c>)
 800a958:	f000 fcdc 	bl	800b314 <LST_is_empty>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d0ea      	beq.n	800a938 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a962:	bf00      	nop
}
 800a964:	3708      	adds	r7, #8
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	200300e0 	.word	0x200300e0
 800a970:	20000724 	.word	0x20000724

0800a974 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800a97c:	4b0c      	ldr	r3, [pc, #48]	; (800a9b0 <TL_THREAD_Init+0x3c>)
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	689a      	ldr	r2, [r3, #8]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800a9a2:	f7f6 fd99 	bl	80014d8 <HW_IPCC_THREAD_Init>

  return;
 800a9a6:	bf00      	nop
}
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20030000 	.word	0x20030000

0800a9b4 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <TL_OT_SendCmd+0x18>)
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	2208      	movs	r2, #8
 800a9c0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800a9c2:	f7f6 fd97 	bl	80014f4 <HW_IPCC_OT_SendCmd>

  return;
 800a9c6:	bf00      	nop
}
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20030000 	.word	0x20030000

0800a9d0 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800a9d4:	4b04      	ldr	r3, [pc, #16]	; (800a9e8 <TL_CLI_SendCmd+0x18>)
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	220a      	movs	r2, #10
 800a9dc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800a9de:	f7f6 fd97 	bl	8001510 <HW_IPCC_CLI_SendCmd>

  return;
 800a9e2:	bf00      	nop
}
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20030000 	.word	0x20030000

0800a9ec <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a9f0:	4b04      	ldr	r3, [pc, #16]	; (800aa04 <TL_THREAD_SendAck+0x18>)
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	220d      	movs	r2, #13
 800a9f8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800a9fa:	f7f6 fd93 	bl	8001524 <HW_IPCC_THREAD_SendAck>

  return;
 800a9fe:	bf00      	nop
}
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20030000 	.word	0x20030000

0800aa08 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800aa0c:	4b04      	ldr	r3, [pc, #16]	; (800aa20 <TL_THREAD_CliSendAck+0x18>)
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	220d      	movs	r2, #13
 800aa14:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800aa16:	f7f6 fd93 	bl	8001540 <HW_IPCC_THREAD_CliSendAck>

  return;
 800aa1a:	bf00      	nop
}
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20030000 	.word	0x20030000

0800aa24 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800aa28:	4b03      	ldr	r3, [pc, #12]	; (800aa38 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7f6 f9f8 	bl	8000e24 <TL_OT_CmdEvtReceived>

  return;
 800aa34:	bf00      	nop
}
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	20030000 	.word	0x20030000

0800aa3c <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800aa40:	4b03      	ldr	r3, [pc, #12]	; (800aa50 <HW_IPCC_THREAD_EvtNot+0x14>)
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7f6 f9fc 	bl	8000e44 <TL_THREAD_NotReceived>

  return;
 800aa4c:	bf00      	nop
}
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20030000 	.word	0x20030000

0800aa54 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800aa58:	4b03      	ldr	r3, [pc, #12]	; (800aa68 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7f6 fac6 	bl	8000ff0 <TL_THREAD_CliNotReceived>

  return;
 800aa64:	bf00      	nop
}
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	20030000 	.word	0x20030000

0800aa6c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800aa74:	4817      	ldr	r0, [pc, #92]	; (800aad4 <TL_MM_Init+0x68>)
 800aa76:	f000 fc3d 	bl	800b2f4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800aa7a:	4817      	ldr	r0, [pc, #92]	; (800aad8 <TL_MM_Init+0x6c>)
 800aa7c:	f000 fc3a 	bl	800b2f4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800aa80:	4b16      	ldr	r3, [pc, #88]	; (800aadc <TL_MM_Init+0x70>)
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	4a16      	ldr	r2, [pc, #88]	; (800aae0 <TL_MM_Init+0x74>)
 800aa86:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800aa88:	4b15      	ldr	r3, [pc, #84]	; (800aae0 <TL_MM_Init+0x74>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	6892      	ldr	r2, [r2, #8]
 800aa90:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800aa92:	4b13      	ldr	r3, [pc, #76]	; (800aae0 <TL_MM_Init+0x74>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	68d2      	ldr	r2, [r2, #12]
 800aa9a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800aa9c:	4b10      	ldr	r3, [pc, #64]	; (800aae0 <TL_MM_Init+0x74>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a0c      	ldr	r2, [pc, #48]	; (800aad4 <TL_MM_Init+0x68>)
 800aaa2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800aaa4:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <TL_MM_Init+0x74>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	6812      	ldr	r2, [r2, #0]
 800aaac:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800aaae:	4b0c      	ldr	r3, [pc, #48]	; (800aae0 <TL_MM_Init+0x74>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	6852      	ldr	r2, [r2, #4]
 800aab6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800aab8:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <TL_MM_Init+0x74>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	6912      	ldr	r2, [r2, #16]
 800aac0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800aac2:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <TL_MM_Init+0x74>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	6952      	ldr	r2, [r2, #20]
 800aaca:	619a      	str	r2, [r3, #24]

  return;
 800aacc:	bf00      	nop
}
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	200300c8 	.word	0x200300c8
 800aad8:	20000710 	.word	0x20000710
 800aadc:	20030000 	.word	0x20030000
 800aae0:	20000728 	.word	0x20000728

0800aae4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	4807      	ldr	r0, [pc, #28]	; (800ab0c <TL_MM_EvtDone+0x28>)
 800aaf0:	f000 fc58 	bl	800b3a4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800aaf4:	6879      	ldr	r1, [r7, #4]
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	f000 f858 	bl	800abac <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800aafc:	4804      	ldr	r0, [pc, #16]	; (800ab10 <TL_MM_EvtDone+0x2c>)
 800aafe:	f7f6 fd51 	bl	80015a4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ab02:	bf00      	nop
}
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000710 	.word	0x20000710
 800ab10:	0800ab15 	.word	0x0800ab15

0800ab14 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ab1a:	e00c      	b.n	800ab36 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ab1c:	1d3b      	adds	r3, r7, #4
 800ab1e:	4619      	mov	r1, r3
 800ab20:	480a      	ldr	r0, [pc, #40]	; (800ab4c <SendFreeBuf+0x38>)
 800ab22:	f000 fc86 	bl	800b432 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ab26:	4b0a      	ldr	r3, [pc, #40]	; (800ab50 <SendFreeBuf+0x3c>)
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f000 fc37 	bl	800b3a4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ab36:	4805      	ldr	r0, [pc, #20]	; (800ab4c <SendFreeBuf+0x38>)
 800ab38:	f000 fbec 	bl	800b314 <LST_is_empty>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d0ec      	beq.n	800ab1c <SendFreeBuf+0x8>
  }

  return;
 800ab42:	bf00      	nop
}
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20000710 	.word	0x20000710
 800ab50:	20030000 	.word	0x20030000

0800ab54 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800ab58:	4805      	ldr	r0, [pc, #20]	; (800ab70 <TL_TRACES_Init+0x1c>)
 800ab5a:	f000 fbcb 	bl	800b2f4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800ab5e:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <TL_TRACES_Init+0x20>)
 800ab60:	695b      	ldr	r3, [r3, #20]
 800ab62:	4a03      	ldr	r2, [pc, #12]	; (800ab70 <TL_TRACES_Init+0x1c>)
 800ab64:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800ab66:	f7f6 fd53 	bl	8001610 <HW_IPCC_TRACES_Init>

  return;
 800ab6a:	bf00      	nop
}
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	200300d0 	.word	0x200300d0
 800ab74:	20030000 	.word	0x20030000

0800ab78 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ab7e:	e008      	b.n	800ab92 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ab80:	1d3b      	adds	r3, r7, #4
 800ab82:	4619      	mov	r1, r3
 800ab84:	4808      	ldr	r0, [pc, #32]	; (800aba8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ab86:	f000 fc54 	bl	800b432 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7f7 f86d 	bl	8001c6c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ab92:	4805      	ldr	r0, [pc, #20]	; (800aba8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ab94:	f000 fbbe 	bl	800b314 <LST_is_empty>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0f0      	beq.n	800ab80 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ab9e:	bf00      	nop
}
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	200300d0 	.word	0x200300d0

0800abac <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	6039      	str	r1, [r7, #0]
 800abb6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800abb8:	79fb      	ldrb	r3, [r7, #7]
 800abba:	2b06      	cmp	r3, #6
 800abbc:	d845      	bhi.n	800ac4a <OutputDbgTrace+0x9e>
 800abbe:	a201      	add	r2, pc, #4	; (adr r2, 800abc4 <OutputDbgTrace+0x18>)
 800abc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc4:	0800abe1 	.word	0x0800abe1
 800abc8:	0800ac05 	.word	0x0800ac05
 800abcc:	0800ac0b 	.word	0x0800ac0b
 800abd0:	0800ac1f 	.word	0x0800ac1f
 800abd4:	0800ac2b 	.word	0x0800ac2b
 800abd8:	0800ac31 	.word	0x0800ac31
 800abdc:	0800ac3f 	.word	0x0800ac3f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	7a5b      	ldrb	r3, [r3, #9]
 800abe8:	2bff      	cmp	r3, #255	; 0xff
 800abea:	d005      	beq.n	800abf8 <OutputDbgTrace+0x4c>
 800abec:	2bff      	cmp	r3, #255	; 0xff
 800abee:	dc05      	bgt.n	800abfc <OutputDbgTrace+0x50>
 800abf0:	2b0e      	cmp	r3, #14
 800abf2:	d005      	beq.n	800ac00 <OutputDbgTrace+0x54>
 800abf4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800abf6:	e001      	b.n	800abfc <OutputDbgTrace+0x50>
          break;
 800abf8:	bf00      	nop
 800abfa:	e027      	b.n	800ac4c <OutputDbgTrace+0xa0>
          break;
 800abfc:	bf00      	nop
 800abfe:	e025      	b.n	800ac4c <OutputDbgTrace+0xa0>
          break;
 800ac00:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ac02:	e023      	b.n	800ac4c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ac08:	e020      	b.n	800ac4c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	7a5b      	ldrb	r3, [r3, #9]
 800ac12:	2b0e      	cmp	r3, #14
 800ac14:	d001      	beq.n	800ac1a <OutputDbgTrace+0x6e>
 800ac16:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ac18:	e000      	b.n	800ac1c <OutputDbgTrace+0x70>
          break;
 800ac1a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ac1c:	e016      	b.n	800ac4c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	7a5b      	ldrb	r3, [r3, #9]
 800ac26:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ac28:	e010      	b.n	800ac4c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ac2e:	e00d      	b.n	800ac4c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	7a5b      	ldrb	r3, [r3, #9]
 800ac38:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ac3a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ac3c:	e006      	b.n	800ac4c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	7a5b      	ldrb	r3, [r3, #9]
 800ac46:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ac48:	e000      	b.n	800ac4c <OutputDbgTrace+0xa0>

    default:
      break;
 800ac4a:	bf00      	nop
  }

  return;
 800ac4c:	bf00      	nop
}
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac5e:	f3ef 8310 	mrs	r3, PRIMASK
 800ac62:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac64:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800ac66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac68:	b672      	cpsid	i
}
 800ac6a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800ac6c:	1cbb      	adds	r3, r7, #2
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4812      	ldr	r0, [pc, #72]	; (800acbc <DbgTrace_TxCpltCallback+0x64>)
 800ac72:	f000 fe56 	bl	800b922 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800ac76:	1cbb      	adds	r3, r7, #2
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4810      	ldr	r0, [pc, #64]	; (800acbc <DbgTrace_TxCpltCallback+0x64>)
 800ac7c:	f000 ff42 	bl	800bb04 <CircularQueue_Sense>
 800ac80:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00c      	beq.n	800aca2 <DbgTrace_TxCpltCallback+0x4a>
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	f383 8810 	msr	PRIMASK, r3
}
 800ac92:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800ac94:	887b      	ldrh	r3, [r7, #2]
 800ac96:	4a0a      	ldr	r2, [pc, #40]	; (800acc0 <DbgTrace_TxCpltCallback+0x68>)
 800ac98:	4619      	mov	r1, r3
 800ac9a:	6938      	ldr	r0, [r7, #16]
 800ac9c:	f7f7 f801 	bl	8001ca2 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800aca0:	e008      	b.n	800acb4 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800aca2:	4b08      	ldr	r3, [pc, #32]	; (800acc4 <DbgTrace_TxCpltCallback+0x6c>)
 800aca4:	2201      	movs	r2, #1
 800aca6:	701a      	strb	r2, [r3, #0]
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f383 8810 	msr	PRIMASK, r3
}
 800acb2:	bf00      	nop
}
 800acb4:	bf00      	nop
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	2000072c 	.word	0x2000072c
 800acc0:	0800ac59 	.word	0x0800ac59
 800acc4:	20000021 	.word	0x20000021

0800acc8 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800acce:	f7f6 ffe2 	bl	8001c96 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800acd2:	2302      	movs	r3, #2
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	2300      	movs	r3, #0
 800acd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800acdc:	4903      	ldr	r1, [pc, #12]	; (800acec <DbgTraceInit+0x24>)
 800acde:	4804      	ldr	r0, [pc, #16]	; (800acf0 <DbgTraceInit+0x28>)
 800ace0:	f000 fbc6 	bl	800b470 <CircularQueue_Init>
#endif 
#endif
  return;
 800ace4:	bf00      	nop
}
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	2000074c 	.word	0x2000074c
 800acf0:	2000072c 	.word	0x2000072c

0800acf4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	68b9      	ldr	r1, [r7, #8]
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f000 f805 	bl	800ad14 <DbgTraceWrite>
 800ad0a:	4603      	mov	r3, r0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b08a      	sub	sp, #40	; 0x28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ad20:	2300      	movs	r3, #0
 800ad22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad24:	f3ef 8310 	mrs	r3, PRIMASK
 800ad28:	61bb      	str	r3, [r7, #24]
  return(result);
 800ad2a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ad2c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad34:	d102      	bne.n	800ad3c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
 800ad3a:	e037      	b.n	800adac <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d006      	beq.n	800ad50 <DbgTraceWrite+0x3c>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d003      	beq.n	800ad50 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ad48:	f04f 33ff 	mov.w	r3, #4294967295
 800ad4c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad4e:	e02d      	b.n	800adac <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d02a      	beq.n	800adac <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800ad5a:	b672      	cpsid	i
}
 800ad5c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	2301      	movs	r3, #1
 800ad64:	68b9      	ldr	r1, [r7, #8]
 800ad66:	4814      	ldr	r0, [pc, #80]	; (800adb8 <DbgTraceWrite+0xa4>)
 800ad68:	f000 fbb4 	bl	800b4d4 <CircularQueue_Add>
 800ad6c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d015      	beq.n	800ada0 <DbgTraceWrite+0x8c>
 800ad74:	4b11      	ldr	r3, [pc, #68]	; (800adbc <DbgTraceWrite+0xa8>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d010      	beq.n	800ada0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800ad7e:	4b0f      	ldr	r3, [pc, #60]	; (800adbc <DbgTraceWrite+0xa8>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	701a      	strb	r2, [r3, #0]
 800ad84:	6a3b      	ldr	r3, [r7, #32]
 800ad86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f383 8810 	msr	PRIMASK, r3
}
 800ad8e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	4a0a      	ldr	r2, [pc, #40]	; (800adc0 <DbgTraceWrite+0xac>)
 800ad96:	4619      	mov	r1, r3
 800ad98:	69f8      	ldr	r0, [r7, #28]
 800ad9a:	f7f6 ff82 	bl	8001ca2 <DbgOutputTraces>
 800ad9e:	e005      	b.n	800adac <DbgTraceWrite+0x98>
 800ada0:	6a3b      	ldr	r3, [r7, #32]
 800ada2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f383 8810 	msr	PRIMASK, r3
}
 800adaa:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3728      	adds	r7, #40	; 0x28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	2000072c 	.word	0x2000072c
 800adbc:	20000021 	.word	0x20000021
 800adc0:	0800ac59 	.word	0x0800ac59

0800adc4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800adce:	4b0f      	ldr	r3, [pc, #60]	; (800ae0c <OTP_Read+0x48>)
 800add0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800add2:	e002      	b.n	800adda <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	3b08      	subs	r3, #8
 800add8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	3307      	adds	r3, #7
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	79fa      	ldrb	r2, [r7, #7]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d003      	beq.n	800adee <OTP_Read+0x2a>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	4a09      	ldr	r2, [pc, #36]	; (800ae10 <OTP_Read+0x4c>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d1f2      	bne.n	800add4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3307      	adds	r3, #7
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	79fa      	ldrb	r2, [r7, #7]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d001      	beq.n	800adfe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800adfa:	2300      	movs	r3, #0
 800adfc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800adfe:	68fb      	ldr	r3, [r7, #12]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	1fff73f8 	.word	0x1fff73f8
 800ae10:	1fff7000 	.word	0x1fff7000

0800ae14 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ae14:	b480      	push	{r7}
 800ae16:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ae18:	4b05      	ldr	r3, [pc, #20]	; (800ae30 <UTIL_LPM_Init+0x1c>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ae1e:	4b05      	ldr	r3, [pc, #20]	; (800ae34 <UTIL_LPM_Init+0x20>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ae24:	bf00      	nop
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	2000174c 	.word	0x2000174c
 800ae34:	20001750 	.word	0x20001750

0800ae38 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b087      	sub	sp, #28
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae44:	f3ef 8310 	mrs	r3, PRIMASK
 800ae48:	613b      	str	r3, [r7, #16]
  return(result);
 800ae4a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ae4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae4e:	b672      	cpsid	i
}
 800ae50:	bf00      	nop
  
  switch( state )
 800ae52:	78fb      	ldrb	r3, [r7, #3]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d008      	beq.n	800ae6a <UTIL_LPM_SetStopMode+0x32>
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d10e      	bne.n	800ae7a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800ae5c:	4b0d      	ldr	r3, [pc, #52]	; (800ae94 <UTIL_LPM_SetStopMode+0x5c>)
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	4a0b      	ldr	r2, [pc, #44]	; (800ae94 <UTIL_LPM_SetStopMode+0x5c>)
 800ae66:	6013      	str	r3, [r2, #0]
      break;
 800ae68:	e008      	b.n	800ae7c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	43da      	mvns	r2, r3
 800ae6e:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <UTIL_LPM_SetStopMode+0x5c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4013      	ands	r3, r2
 800ae74:	4a07      	ldr	r2, [pc, #28]	; (800ae94 <UTIL_LPM_SetStopMode+0x5c>)
 800ae76:	6013      	str	r3, [r2, #0]
      break;
 800ae78:	e000      	b.n	800ae7c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800ae7a:	bf00      	nop
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f383 8810 	msr	PRIMASK, r3
}
 800ae86:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ae88:	bf00      	nop
 800ae8a:	371c      	adds	r7, #28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	2000174c 	.word	0x2000174c

0800ae98 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b087      	sub	sp, #28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	460b      	mov	r3, r1
 800aea2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aea4:	f3ef 8310 	mrs	r3, PRIMASK
 800aea8:	613b      	str	r3, [r7, #16]
  return(result);
 800aeaa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800aeac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aeae:	b672      	cpsid	i
}
 800aeb0:	bf00      	nop
  
  switch(state)
 800aeb2:	78fb      	ldrb	r3, [r7, #3]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d008      	beq.n	800aeca <UTIL_LPM_SetOffMode+0x32>
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d10e      	bne.n	800aeda <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800aebc:	4b0d      	ldr	r3, [pc, #52]	; (800aef4 <UTIL_LPM_SetOffMode+0x5c>)
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	4a0b      	ldr	r2, [pc, #44]	; (800aef4 <UTIL_LPM_SetOffMode+0x5c>)
 800aec6:	6013      	str	r3, [r2, #0]
      break;
 800aec8:	e008      	b.n	800aedc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	43da      	mvns	r2, r3
 800aece:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <UTIL_LPM_SetOffMode+0x5c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4013      	ands	r3, r2
 800aed4:	4a07      	ldr	r2, [pc, #28]	; (800aef4 <UTIL_LPM_SetOffMode+0x5c>)
 800aed6:	6013      	str	r3, [r2, #0]
      break;
 800aed8:	e000      	b.n	800aedc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800aeda:	bf00      	nop
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f383 8810 	msr	PRIMASK, r3
}
 800aee6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800aee8:	bf00      	nop
 800aeea:	371c      	adds	r7, #28
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	20001750 	.word	0x20001750

0800aef8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b090      	sub	sp, #64	; 0x40
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800af00:	4b73      	ldr	r3, [pc, #460]	; (800b0d0 <UTIL_SEQ_Run+0x1d8>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800af06:	4b72      	ldr	r3, [pc, #456]	; (800b0d0 <UTIL_SEQ_Run+0x1d8>)
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4013      	ands	r3, r2
 800af0e:	4a70      	ldr	r2, [pc, #448]	; (800b0d0 <UTIL_SEQ_Run+0x1d8>)
 800af10:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800af12:	4b70      	ldr	r3, [pc, #448]	; (800b0d4 <UTIL_SEQ_Run+0x1dc>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800af18:	4b6f      	ldr	r3, [pc, #444]	; (800b0d8 <UTIL_SEQ_Run+0x1e0>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800af1e:	4b6f      	ldr	r3, [pc, #444]	; (800b0dc <UTIL_SEQ_Run+0x1e4>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800af24:	4b6e      	ldr	r3, [pc, #440]	; (800b0e0 <UTIL_SEQ_Run+0x1e8>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800af2a:	e08d      	b.n	800b048 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800af30:	e002      	b.n	800af38 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800af32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af34:	3301      	adds	r3, #1
 800af36:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800af38:	4a6a      	ldr	r2, [pc, #424]	; (800b0e4 <UTIL_SEQ_Run+0x1ec>)
 800af3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af3c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af42:	401a      	ands	r2, r3
 800af44:	4b62      	ldr	r3, [pc, #392]	; (800b0d0 <UTIL_SEQ_Run+0x1d8>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4013      	ands	r3, r2
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0f1      	beq.n	800af32 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800af4e:	4a65      	ldr	r2, [pc, #404]	; (800b0e4 <UTIL_SEQ_Run+0x1ec>)
 800af50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	401a      	ands	r2, r3
 800af5a:	4b5d      	ldr	r3, [pc, #372]	; (800b0d0 <UTIL_SEQ_Run+0x1d8>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4013      	ands	r3, r2
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800af62:	4a60      	ldr	r2, [pc, #384]	; (800b0e4 <UTIL_SEQ_Run+0x1ec>)
 800af64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af66:	00db      	lsls	r3, r3, #3
 800af68:	4413      	add	r3, r2
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	4013      	ands	r3, r2
 800af70:	2b00      	cmp	r3, #0
 800af72:	d106      	bne.n	800af82 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800af74:	4a5b      	ldr	r2, [pc, #364]	; (800b0e4 <UTIL_SEQ_Run+0x1ec>)
 800af76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af78:	00db      	lsls	r3, r3, #3
 800af7a:	4413      	add	r3, r2
 800af7c:	f04f 32ff 	mov.w	r2, #4294967295
 800af80:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800af82:	4a58      	ldr	r2, [pc, #352]	; (800b0e4 <UTIL_SEQ_Run+0x1ec>)
 800af84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af86:	00db      	lsls	r3, r3, #3
 800af88:	4413      	add	r3, r2
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	4013      	ands	r3, r2
 800af90:	4618      	mov	r0, r3
 800af92:	f000 f973 	bl	800b27c <SEQ_BitPosition>
 800af96:	4603      	mov	r3, r0
 800af98:	461a      	mov	r2, r3
 800af9a:	4b53      	ldr	r3, [pc, #332]	; (800b0e8 <UTIL_SEQ_Run+0x1f0>)
 800af9c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800af9e:	4a51      	ldr	r2, [pc, #324]	; (800b0e4 <UTIL_SEQ_Run+0x1ec>)
 800afa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa2:	00db      	lsls	r3, r3, #3
 800afa4:	4413      	add	r3, r2
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	4b4f      	ldr	r3, [pc, #316]	; (800b0e8 <UTIL_SEQ_Run+0x1f0>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2101      	movs	r1, #1
 800afae:	fa01 f303 	lsl.w	r3, r1, r3
 800afb2:	43db      	mvns	r3, r3
 800afb4:	401a      	ands	r2, r3
 800afb6:	494b      	ldr	r1, [pc, #300]	; (800b0e4 <UTIL_SEQ_Run+0x1ec>)
 800afb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afba:	00db      	lsls	r3, r3, #3
 800afbc:	440b      	add	r3, r1
 800afbe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afc0:	f3ef 8310 	mrs	r3, PRIMASK
 800afc4:	61bb      	str	r3, [r7, #24]
  return(result);
 800afc6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800afc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800afca:	b672      	cpsid	i
}
 800afcc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800afce:	4b46      	ldr	r3, [pc, #280]	; (800b0e8 <UTIL_SEQ_Run+0x1f0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2201      	movs	r2, #1
 800afd4:	fa02 f303 	lsl.w	r3, r2, r3
 800afd8:	43da      	mvns	r2, r3
 800afda:	4b3e      	ldr	r3, [pc, #248]	; (800b0d4 <UTIL_SEQ_Run+0x1dc>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4013      	ands	r3, r2
 800afe0:	4a3c      	ldr	r2, [pc, #240]	; (800b0d4 <UTIL_SEQ_Run+0x1dc>)
 800afe2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800afe4:	2302      	movs	r3, #2
 800afe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afe8:	e013      	b.n	800b012 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800afea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afec:	3b01      	subs	r3, #1
 800afee:	4a3d      	ldr	r2, [pc, #244]	; (800b0e4 <UTIL_SEQ_Run+0x1ec>)
 800aff0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800aff4:	4b3c      	ldr	r3, [pc, #240]	; (800b0e8 <UTIL_SEQ_Run+0x1f0>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2201      	movs	r2, #1
 800affa:	fa02 f303 	lsl.w	r3, r2, r3
 800affe:	43da      	mvns	r2, r3
 800b000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b002:	3b01      	subs	r3, #1
 800b004:	400a      	ands	r2, r1
 800b006:	4937      	ldr	r1, [pc, #220]	; (800b0e4 <UTIL_SEQ_Run+0x1ec>)
 800b008:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b00e:	3b01      	subs	r3, #1
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1e8      	bne.n	800afea <UTIL_SEQ_Run+0xf2>
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	f383 8810 	msr	PRIMASK, r3
}
 800b022:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b024:	4b30      	ldr	r3, [pc, #192]	; (800b0e8 <UTIL_SEQ_Run+0x1f0>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a30      	ldr	r2, [pc, #192]	; (800b0ec <UTIL_SEQ_Run+0x1f4>)
 800b02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b02e:	4798      	blx	r3

    local_taskset = TaskSet;
 800b030:	4b28      	ldr	r3, [pc, #160]	; (800b0d4 <UTIL_SEQ_Run+0x1dc>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b036:	4b28      	ldr	r3, [pc, #160]	; (800b0d8 <UTIL_SEQ_Run+0x1e0>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b03c:	4b27      	ldr	r3, [pc, #156]	; (800b0dc <UTIL_SEQ_Run+0x1e4>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b042:	4b27      	ldr	r3, [pc, #156]	; (800b0e0 <UTIL_SEQ_Run+0x1e8>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	401a      	ands	r2, r3
 800b04e:	4b20      	ldr	r3, [pc, #128]	; (800b0d0 <UTIL_SEQ_Run+0x1d8>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4013      	ands	r3, r2
 800b054:	2b00      	cmp	r3, #0
 800b056:	d005      	beq.n	800b064 <UTIL_SEQ_Run+0x16c>
 800b058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05c:	4013      	ands	r3, r2
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f43f af64 	beq.w	800af2c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b064:	4b20      	ldr	r3, [pc, #128]	; (800b0e8 <UTIL_SEQ_Run+0x1f0>)
 800b066:	f04f 32ff 	mov.w	r2, #4294967295
 800b06a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b06c:	f000 f8f8 	bl	800b260 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b070:	f3ef 8310 	mrs	r3, PRIMASK
 800b074:	613b      	str	r3, [r7, #16]
  return(result);
 800b076:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b078:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b07a:	b672      	cpsid	i
}
 800b07c:	bf00      	nop
  local_taskset = TaskSet;
 800b07e:	4b15      	ldr	r3, [pc, #84]	; (800b0d4 <UTIL_SEQ_Run+0x1dc>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b084:	4b14      	ldr	r3, [pc, #80]	; (800b0d8 <UTIL_SEQ_Run+0x1e0>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b08a:	4b14      	ldr	r3, [pc, #80]	; (800b0dc <UTIL_SEQ_Run+0x1e4>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	401a      	ands	r2, r3
 800b096:	4b0e      	ldr	r3, [pc, #56]	; (800b0d0 <UTIL_SEQ_Run+0x1d8>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4013      	ands	r3, r2
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d107      	bne.n	800b0b0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b0a0:	4b0f      	ldr	r3, [pc, #60]	; (800b0e0 <UTIL_SEQ_Run+0x1e8>)
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b0ac:	f7f6 fd8a 	bl	8001bc4 <UTIL_SEQ_Idle>
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f383 8810 	msr	PRIMASK, r3
}
 800b0ba:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b0bc:	f000 f8d7 	bl	800b26e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b0c0:	4a03      	ldr	r2, [pc, #12]	; (800b0d0 <UTIL_SEQ_Run+0x1d8>)
 800b0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c4:	6013      	str	r3, [r2, #0]

  return;
 800b0c6:	bf00      	nop
}
 800b0c8:	3740      	adds	r7, #64	; 0x40
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000028 	.word	0x20000028
 800b0d4:	20001754 	.word	0x20001754
 800b0d8:	20001758 	.word	0x20001758
 800b0dc:	20000024 	.word	0x20000024
 800b0e0:	2000175c 	.word	0x2000175c
 800b0e4:	200017e4 	.word	0x200017e4
 800b0e8:	20001760 	.word	0x20001760
 800b0ec:	20001764 	.word	0x20001764

0800b0f0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0fc:	f3ef 8310 	mrs	r3, PRIMASK
 800b100:	617b      	str	r3, [r7, #20]
  return(result);
 800b102:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b104:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b106:	b672      	cpsid	i
}
 800b108:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f000 f8b6 	bl	800b27c <SEQ_BitPosition>
 800b110:	4603      	mov	r3, r0
 800b112:	4619      	mov	r1, r3
 800b114:	4a06      	ldr	r2, [pc, #24]	; (800b130 <UTIL_SEQ_RegTask+0x40>)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	f383 8810 	msr	PRIMASK, r3
}
 800b126:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b128:	bf00      	nop
}
 800b12a:	3720      	adds	r7, #32
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	20001764 	.word	0x20001764

0800b134 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b13e:	f3ef 8310 	mrs	r3, PRIMASK
 800b142:	60fb      	str	r3, [r7, #12]
  return(result);
 800b144:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b146:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b148:	b672      	cpsid	i
}
 800b14a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b14c:	4b0d      	ldr	r3, [pc, #52]	; (800b184 <UTIL_SEQ_SetTask+0x50>)
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4313      	orrs	r3, r2
 800b154:	4a0b      	ldr	r2, [pc, #44]	; (800b184 <UTIL_SEQ_SetTask+0x50>)
 800b156:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b158:	4a0b      	ldr	r2, [pc, #44]	; (800b188 <UTIL_SEQ_SetTask+0x54>)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	431a      	orrs	r2, r3
 800b164:	4908      	ldr	r1, [pc, #32]	; (800b188 <UTIL_SEQ_SetTask+0x54>)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	f383 8810 	msr	PRIMASK, r3
}
 800b176:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b178:	bf00      	nop
}
 800b17a:	371c      	adds	r7, #28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr
 800b184:	20001754 	.word	0x20001754
 800b188:	200017e4 	.word	0x200017e4

0800b18c <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b18c:	b480      	push	{r7}
 800b18e:	b087      	sub	sp, #28
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b194:	f3ef 8310 	mrs	r3, PRIMASK
 800b198:	60fb      	str	r3, [r7, #12]
  return(result);
 800b19a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b19c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b19e:	b672      	cpsid	i
}
 800b1a0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b1a2:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <UTIL_SEQ_SetEvt+0x3c>)
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	4a07      	ldr	r2, [pc, #28]	; (800b1c8 <UTIL_SEQ_SetEvt+0x3c>)
 800b1ac:	6013      	str	r3, [r2, #0]
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	f383 8810 	msr	PRIMASK, r3
}
 800b1b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b1ba:	bf00      	nop
}
 800b1bc:	371c      	adds	r7, #28
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	20001758 	.word	0x20001758

0800b1cc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b1d4:	4b1f      	ldr	r3, [pc, #124]	; (800b254 <UTIL_SEQ_WaitEvt+0x88>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b1da:	4b1e      	ldr	r3, [pc, #120]	; (800b254 <UTIL_SEQ_WaitEvt+0x88>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e2:	d102      	bne.n	800b1ea <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	61fb      	str	r3, [r7, #28]
 800b1e8:	e005      	b.n	800b1f6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800b1ea:	4b1a      	ldr	r3, [pc, #104]	; (800b254 <UTIL_SEQ_WaitEvt+0x88>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b1f6:	4b18      	ldr	r3, [pc, #96]	; (800b258 <UTIL_SEQ_WaitEvt+0x8c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b1fc:	4a16      	ldr	r2, [pc, #88]	; (800b258 <UTIL_SEQ_WaitEvt+0x8c>)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800b202:	e003      	b.n	800b20c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	69f8      	ldr	r0, [r7, #28]
 800b208:	f7f6 fce4 	bl	8001bd4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800b20c:	4b13      	ldr	r3, [pc, #76]	; (800b25c <UTIL_SEQ_WaitEvt+0x90>)
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4013      	ands	r3, r2
 800b214:	2b00      	cmp	r3, #0
 800b216:	d0f5      	beq.n	800b204 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b218:	4a0e      	ldr	r2, [pc, #56]	; (800b254 <UTIL_SEQ_WaitEvt+0x88>)
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b21e:	f3ef 8310 	mrs	r3, PRIMASK
 800b222:	60bb      	str	r3, [r7, #8]
  return(result);
 800b224:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b228:	b672      	cpsid	i
}
 800b22a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	43da      	mvns	r2, r3
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <UTIL_SEQ_WaitEvt+0x90>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4013      	ands	r3, r2
 800b236:	4a09      	ldr	r2, [pc, #36]	; (800b25c <UTIL_SEQ_WaitEvt+0x90>)
 800b238:	6013      	str	r3, [r2, #0]
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f383 8810 	msr	PRIMASK, r3
}
 800b244:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b246:	4a04      	ldr	r2, [pc, #16]	; (800b258 <UTIL_SEQ_WaitEvt+0x8c>)
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	6013      	str	r3, [r2, #0]
  return;
 800b24c:	bf00      	nop
}
 800b24e:	3720      	adds	r7, #32
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	20001760 	.word	0x20001760
 800b258:	2000175c 	.word	0x2000175c
 800b25c:	20001758 	.word	0x20001758

0800b260 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b260:	b480      	push	{r7}
 800b262:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b264:	bf00      	nop
}
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr

0800b26e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b26e:	b480      	push	{r7}
 800b270:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b272:	bf00      	nop
}
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b284:	2300      	movs	r3, #0
 800b286:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	0c1b      	lsrs	r3, r3, #16
 800b290:	041b      	lsls	r3, r3, #16
 800b292:	2b00      	cmp	r3, #0
 800b294:	d104      	bne.n	800b2a0 <SEQ_BitPosition+0x24>
 800b296:	2310      	movs	r3, #16
 800b298:	73fb      	strb	r3, [r7, #15]
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	041b      	lsls	r3, r3, #16
 800b29e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d105      	bne.n	800b2b6 <SEQ_BitPosition+0x3a>
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	73fb      	strb	r3, [r7, #15]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	021b      	lsls	r3, r3, #8
 800b2b4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d105      	bne.n	800b2cc <SEQ_BitPosition+0x50>
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	73fb      	strb	r3, [r7, #15]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	011b      	lsls	r3, r3, #4
 800b2ca:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	0f1b      	lsrs	r3, r3, #28
 800b2d0:	4a07      	ldr	r2, [pc, #28]	; (800b2f0 <SEQ_BitPosition+0x74>)
 800b2d2:	5cd2      	ldrb	r2, [r2, r3]
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
 800b2dc:	f1c3 031f 	rsb	r3, r3, #31
 800b2e0:	b2db      	uxtb	r3, r3
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3714      	adds	r7, #20
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	0800d95c 	.word	0x0800d95c

0800b2f4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	605a      	str	r2, [r3, #4]
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b314:	b480      	push	{r7}
 800b316:	b087      	sub	sp, #28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b31c:	f3ef 8310 	mrs	r3, PRIMASK
 800b320:	60fb      	str	r3, [r7, #12]
  return(result);
 800b322:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b324:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b326:	b672      	cpsid	i
}
 800b328:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	429a      	cmp	r2, r3
 800b332:	d102      	bne.n	800b33a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b334:	2301      	movs	r3, #1
 800b336:	75fb      	strb	r3, [r7, #23]
 800b338:	e001      	b.n	800b33e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b33a:	2300      	movs	r3, #0
 800b33c:	75fb      	strb	r3, [r7, #23]
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	f383 8810 	msr	PRIMASK, r3
}
 800b348:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	371c      	adds	r7, #28
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b358:	b480      	push	{r7}
 800b35a:	b087      	sub	sp, #28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b362:	f3ef 8310 	mrs	r3, PRIMASK
 800b366:	60fb      	str	r3, [r7, #12]
  return(result);
 800b368:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b36a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b36c:	b672      	cpsid	i
}
 800b36e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	605a      	str	r2, [r3, #4]
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	f383 8810 	msr	PRIMASK, r3
}
 800b396:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b398:	bf00      	nop
 800b39a:	371c      	adds	r7, #28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b3b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b3b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3b8:	b672      	cpsid	i
}
 800b3ba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	601a      	str	r2, [r3, #0]
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	f383 8810 	msr	PRIMASK, r3
}
 800b3e2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b3e4:	bf00      	nop
 800b3e6:	371c      	adds	r7, #28
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b3fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b400:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b402:	b672      	cpsid	i
}
 800b404:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	6812      	ldr	r2, [r2, #0]
 800b40e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	6852      	ldr	r2, [r2, #4]
 800b418:	605a      	str	r2, [r3, #4]
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	f383 8810 	msr	PRIMASK, r3
}
 800b424:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b426:	bf00      	nop
 800b428:	371c      	adds	r7, #28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b086      	sub	sp, #24
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b43c:	f3ef 8310 	mrs	r3, PRIMASK
 800b440:	60fb      	str	r3, [r7, #12]
  return(result);
 800b442:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b444:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b446:	b672      	cpsid	i
}
 800b448:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4618      	mov	r0, r3
 800b458:	f7ff ffca 	bl	800b3f0 <LST_remove_node>
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	f383 8810 	msr	PRIMASK, r3
}
 800b466:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b468:	bf00      	nop
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	887a      	ldrh	r2, [r7, #2]
 800b4a6:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	7e3a      	ldrb	r2, [r7, #24]
 800b4ac:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800b4ae:	7e3b      	ldrb	r3, [r7, #24]
 800b4b0:	f003 0302 	and.w	r3, r3, #2
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d006      	beq.n	800b4c6 <CircularQueue_Init+0x56>
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	891b      	ldrh	r3, [r3, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800b4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c4:	e000      	b.n	800b4c8 <CircularQueue_Init+0x58>
  }
  return 0;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3714      	adds	r7, #20
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08e      	sub	sp, #56	; 0x38
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	603b      	str	r3, [r7, #0]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	891b      	ldrh	r3, [r3, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d101      	bne.n	800b50c <CircularQueue_Add+0x38>
 800b508:	2302      	movs	r3, #2
 800b50a:	e000      	b.n	800b50e <CircularQueue_Add+0x3a>
 800b50c:	2300      	movs	r3, #0
 800b50e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d02a      	beq.n	800b56e <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	891b      	ldrh	r3, [r3, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d123      	bne.n	800b568 <CircularQueue_Add+0x94>
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	4413      	add	r3, r2
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6819      	ldr	r1, [r3, #0]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	1c58      	adds	r0, r3, #1
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	4298      	cmp	r0, r3
 800b53e:	d306      	bcc.n	800b54e <CircularQueue_Add+0x7a>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6918      	ldr	r0, [r3, #16]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	1ac3      	subs	r3, r0, r3
 800b54a:	3301      	adds	r3, #1
 800b54c:	e002      	b.n	800b554 <CircularQueue_Add+0x80>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	3301      	adds	r3, #1
 800b554:	440b      	add	r3, r1
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	b29b      	uxth	r3, r3
 800b55a:	021b      	lsls	r3, r3, #8
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	4413      	add	r3, r2
 800b560:	b29b      	uxth	r3, r3
 800b562:	3302      	adds	r3, #2
 800b564:	b29b      	uxth	r3, r3
 800b566:	e001      	b.n	800b56c <CircularQueue_Add+0x98>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	891b      	ldrh	r3, [r3, #8]
 800b56c:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	891b      	ldrh	r3, [r3, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	891b      	ldrh	r3, [r3, #8]
 800b57a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	691a      	ldr	r2, [r3, #16]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	429a      	cmp	r2, r3
 800b586:	d307      	bcc.n	800b598 <CircularQueue_Add+0xc4>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6919      	ldr	r1, [r3, #16]
 800b590:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b592:	440b      	add	r3, r1
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	e000      	b.n	800b59a <CircularQueue_Add+0xc6>
 800b598:	2300      	movs	r3, #0
 800b59a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b59c:	88fa      	ldrh	r2, [r7, #6]
 800b59e:	7ffb      	ldrb	r3, [r7, #31]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	fb02 f303 	mul.w	r3, r2, r3
 800b5aa:	69ba      	ldr	r2, [r7, #24]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d80b      	bhi.n	800b5c8 <CircularQueue_Add+0xf4>
 800b5b0:	88fa      	ldrh	r2, [r7, #6]
 800b5b2:	7ffb      	ldrb	r3, [r7, #31]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5be:	fb01 f202 	mul.w	r2, r1, r2
 800b5c2:	1a9b      	subs	r3, r3, r2
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	e000      	b.n	800b5ca <CircularQueue_Add+0xf6>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b5cc:	7dfa      	ldrb	r2, [r7, #23]
 800b5ce:	7ffb      	ldrb	r3, [r7, #31]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	bf8c      	ite	hi
 800b5d4:	2301      	movhi	r3, #1
 800b5d6:	2300      	movls	r3, #0
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b5dc:	7fbb      	ldrb	r3, [r7, #30]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d008      	beq.n	800b5f4 <CircularQueue_Add+0x120>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	7f1b      	ldrb	r3, [r3, #28]
 800b5e6:	f003 0301 	and.w	r3, r3, #1
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <CircularQueue_Add+0x120>
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	e000      	b.n	800b5f6 <CircularQueue_Add+0x122>
 800b5f4:	8bbb      	ldrh	r3, [r7, #28]
 800b5f6:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b5f8:	7fbb      	ldrb	r3, [r7, #30]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d008      	beq.n	800b610 <CircularQueue_Add+0x13c>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	7f1b      	ldrb	r3, [r3, #28]
 800b602:	f003 0302 	and.w	r3, r3, #2
 800b606:	2b00      	cmp	r3, #0
 800b608:	d002      	beq.n	800b610 <CircularQueue_Add+0x13c>
 800b60a:	7ffb      	ldrb	r3, [r7, #31]
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	e000      	b.n	800b612 <CircularQueue_Add+0x13e>
 800b610:	8bbb      	ldrh	r3, [r7, #28]
 800b612:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b614:	88fb      	ldrh	r3, [r7, #6]
 800b616:	2b00      	cmp	r3, #0
 800b618:	f000 817e 	beq.w	800b918 <CircularQueue_Add+0x444>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	695a      	ldr	r2, [r3, #20]
 800b620:	88f9      	ldrh	r1, [r7, #6]
 800b622:	7ffb      	ldrb	r3, [r7, #31]
 800b624:	440b      	add	r3, r1
 800b626:	4619      	mov	r1, r3
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	fb01 f303 	mul.w	r3, r1, r3
 800b62e:	441a      	add	r2, r3
 800b630:	8bbb      	ldrh	r3, [r7, #28]
 800b632:	441a      	add	r2, r3
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	429a      	cmp	r2, r3
 800b63a:	f200 816d 	bhi.w	800b918 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b63e:	2300      	movs	r3, #0
 800b640:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b642:	e14a      	b.n	800b8da <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	691a      	ldr	r2, [r3, #16]
 800b648:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b64a:	441a      	add	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	429a      	cmp	r2, r3
 800b652:	d307      	bcc.n	800b664 <CircularQueue_Add+0x190>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	691a      	ldr	r2, [r3, #16]
 800b658:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b65a:	441a      	add	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	e003      	b.n	800b66c <CircularQueue_Add+0x198>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	691a      	ldr	r2, [r3, #16]
 800b668:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b66a:	4413      	add	r3, r2
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	891b      	ldrh	r3, [r3, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d130      	bne.n	800b6e0 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	1c59      	adds	r1, r3, #1
 800b686:	6339      	str	r1, [r7, #48]	; 0x30
 800b688:	4413      	add	r3, r2
 800b68a:	88fa      	ldrh	r2, [r7, #6]
 800b68c:	b2d2      	uxtb	r2, r2
 800b68e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b696:	429a      	cmp	r2, r3
 800b698:	d304      	bcc.n	800b6a4 <CircularQueue_Add+0x1d0>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	e000      	b.n	800b6a6 <CircularQueue_Add+0x1d2>
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a6:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b6a8:	88fb      	ldrh	r3, [r7, #6]
 800b6aa:	0a1b      	lsrs	r3, r3, #8
 800b6ac:	b298      	uxth	r0, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b4:	1c59      	adds	r1, r3, #1
 800b6b6:	6339      	str	r1, [r7, #48]	; 0x30
 800b6b8:	4413      	add	r3, r2
 800b6ba:	b2c2      	uxtb	r2, r0
 800b6bc:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d304      	bcc.n	800b6d2 <CircularQueue_Add+0x1fe>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	e000      	b.n	800b6d4 <CircularQueue_Add+0x200>
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	1c9a      	adds	r2, r3, #2
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b6e0:	88fa      	ldrh	r2, [r7, #6]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6859      	ldr	r1, [r3, #4]
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e8:	1acb      	subs	r3, r1, r3
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	bf28      	it	cs
 800b6ee:	4613      	movcs	r3, r2
 800b6f0:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b6f2:	88fb      	ldrh	r3, [r7, #6]
 800b6f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d007      	beq.n	800b70a <CircularQueue_Add+0x236>
 800b6fa:	88fb      	ldrh	r3, [r7, #6]
 800b6fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d225      	bcs.n	800b74e <CircularQueue_Add+0x27a>
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	7f1b      	ldrb	r3, [r3, #28]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d121      	bne.n	800b74e <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	18d0      	adds	r0, r2, r3
 800b712:	88fb      	ldrh	r3, [r7, #6]
 800b714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b716:	fb02 f303 	mul.w	r3, r2, r3
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	4413      	add	r3, r2
 800b71e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b720:	4619      	mov	r1, r3
 800b722:	f000 fad1 	bl	800bcc8 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	695a      	ldr	r2, [r3, #20]
 800b72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72c:	441a      	add	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b732:	2300      	movs	r3, #0
 800b734:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b73a:	88fa      	ldrh	r2, [r7, #6]
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b742:	7ffb      	ldrb	r3, [r7, #31]
 800b744:	b29a      	uxth	r2, r3
 800b746:	88fb      	ldrh	r3, [r7, #6]
 800b748:	4413      	add	r3, r2
 800b74a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b74c:	e0a4      	b.n	800b898 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 80a1 	beq.w	800b898 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	7f1b      	ldrb	r3, [r3, #28]
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d03a      	beq.n	800b7d8 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	891b      	ldrh	r3, [r3, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10d      	bne.n	800b786 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	3b02      	subs	r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	22ff      	movs	r2, #255	; 0xff
 800b776:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	3b01      	subs	r3, #1
 800b780:	4413      	add	r3, r2
 800b782:	22ff      	movs	r2, #255	; 0xff
 800b784:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	695a      	ldr	r2, [r3, #20]
 800b78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78c:	441a      	add	r2, r3
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b792:	2300      	movs	r3, #0
 800b794:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b796:	88fb      	ldrh	r3, [r7, #6]
 800b798:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b79a:	2300      	movs	r3, #0
 800b79c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	891b      	ldrh	r3, [r3, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d16f      	bne.n	800b886 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	1c59      	adds	r1, r3, #1
 800b7ae:	6339      	str	r1, [r7, #48]	; 0x30
 800b7b0:	4413      	add	r3, r2
 800b7b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7b4:	b2d2      	uxtb	r2, r2
 800b7b6:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ba:	0a18      	lsrs	r0, r3, #8
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c2:	1c59      	adds	r1, r3, #1
 800b7c4:	6339      	str	r1, [r7, #48]	; 0x30
 800b7c6:	4413      	add	r3, r2
 800b7c8:	b2c2      	uxtb	r2, r0
 800b7ca:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	1c9a      	adds	r2, r3, #2
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	615a      	str	r2, [r3, #20]
 800b7d6:	e056      	b.n	800b886 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	7f1b      	ldrb	r3, [r3, #28]
 800b7dc:	f003 0302 	and.w	r3, r3, #2
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d050      	beq.n	800b886 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	891b      	ldrh	r3, [r3, #8]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d14a      	bne.n	800b882 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f2:	3b02      	subs	r3, #2
 800b7f4:	4413      	add	r3, r2
 800b7f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f8:	b2d2      	uxtb	r2, r2
 800b7fa:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	0a19      	lsrs	r1, r3, #8
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b806:	3b01      	subs	r3, #1
 800b808:	4413      	add	r3, r2
 800b80a:	b2ca      	uxtb	r2, r1
 800b80c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	18d0      	adds	r0, r2, r3
 800b816:	88fb      	ldrh	r3, [r7, #6]
 800b818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b81a:	fb02 f303 	mul.w	r3, r2, r3
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	4413      	add	r3, r2
 800b822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b824:	4619      	mov	r1, r3
 800b826:	f000 fa4f 	bl	800bcc8 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	695a      	ldr	r2, [r3, #20]
 800b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b830:	441a      	add	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b838:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b83a:	88fa      	ldrh	r2, [r7, #6]
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	699b      	ldr	r3, [r3, #24]
 800b846:	1c5a      	adds	r2, r3, #1
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b84c:	2300      	movs	r3, #0
 800b84e:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b856:	1c59      	adds	r1, r3, #1
 800b858:	6339      	str	r1, [r7, #48]	; 0x30
 800b85a:	4413      	add	r3, r2
 800b85c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b85e:	b2d2      	uxtb	r2, r2
 800b860:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b864:	0a18      	lsrs	r0, r3, #8
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86c:	1c59      	adds	r1, r3, #1
 800b86e:	6339      	str	r1, [r7, #48]	; 0x30
 800b870:	4413      	add	r3, r2
 800b872:	b2c2      	uxtb	r2, r0
 800b874:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	695b      	ldr	r3, [r3, #20]
 800b87a:	1c9a      	adds	r2, r3, #2
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	615a      	str	r2, [r3, #20]
 800b880:	e001      	b.n	800b886 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b882:	2300      	movs	r3, #0
 800b884:	e049      	b.n	800b91a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b886:	7ffb      	ldrb	r3, [r7, #31]
 800b888:	b29a      	uxth	r2, r3
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	4413      	add	r3, r2
 800b890:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d015      	beq.n	800b8ca <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a4:	18d0      	adds	r0, r2, r3
 800b8a6:	88fb      	ldrh	r3, [r7, #6]
 800b8a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8aa:	fb03 f202 	mul.w	r2, r3, r2
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	4413      	add	r3, r2
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	f000 fa05 	bl	800bcc8 <memcpy>
        q->byteCount += NbBytesToCopy;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	695a      	ldr	r2, [r3, #20]
 800b8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c4:	441a      	add	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	699b      	ldr	r3, [r3, #24]
 800b8ce:	1c5a      	adds	r2, r3, #1
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	f4ff aeb0 	bcc.w	800b644 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6919      	ldr	r1, [r3, #16]
 800b8ec:	7ffb      	ldrb	r3, [r7, #31]
 800b8ee:	4419      	add	r1, r3
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	4299      	cmp	r1, r3
 800b8f6:	d307      	bcc.n	800b908 <CircularQueue_Add+0x434>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6919      	ldr	r1, [r3, #16]
 800b8fc:	7ffb      	ldrb	r3, [r7, #31]
 800b8fe:	4419      	add	r1, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	1acb      	subs	r3, r1, r3
 800b906:	e003      	b.n	800b910 <CircularQueue_Add+0x43c>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6919      	ldr	r1, [r3, #16]
 800b90c:	7ffb      	ldrb	r3, [r7, #31]
 800b90e:	440b      	add	r3, r1
 800b910:	4413      	add	r3, r2
 800b912:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b914:	6a3b      	ldr	r3, [r7, #32]
 800b916:	e000      	b.n	800b91a <CircularQueue_Add+0x446>
    return NULL;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3738      	adds	r7, #56	; 0x38
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b930:	2300      	movs	r3, #0
 800b932:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	891b      	ldrh	r3, [r3, #8]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <CircularQueue_Remove+0x1e>
 800b93c:	2302      	movs	r3, #2
 800b93e:	e000      	b.n	800b942 <CircularQueue_Remove+0x20>
 800b940:	2300      	movs	r3, #0
 800b942:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	695b      	ldr	r3, [r3, #20]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 80cc 	beq.w	800baea <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	891b      	ldrh	r3, [r3, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d121      	bne.n	800b99e <CircularQueue_Remove+0x7c>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	4413      	add	r3, r2
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	b29a      	uxth	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6819      	ldr	r1, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	1c58      	adds	r0, r3, #1
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	4298      	cmp	r0, r3
 800b978:	d306      	bcc.n	800b988 <CircularQueue_Remove+0x66>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	68d8      	ldr	r0, [r3, #12]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	1ac3      	subs	r3, r0, r3
 800b984:	3301      	adds	r3, #1
 800b986:	e002      	b.n	800b98e <CircularQueue_Remove+0x6c>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	3301      	adds	r3, #1
 800b98e:	440b      	add	r3, r1
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	b29b      	uxth	r3, r3
 800b994:	021b      	lsls	r3, r3, #8
 800b996:	b29b      	uxth	r3, r3
 800b998:	4413      	add	r3, r2
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	e001      	b.n	800b9a2 <CircularQueue_Remove+0x80>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	891b      	ldrh	r3, [r3, #8]
 800b9a2:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	7f1b      	ldrb	r3, [r3, #28]
 800b9a8:	f003 0301 	and.w	r3, r3, #1
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d057      	beq.n	800ba60 <CircularQueue_Remove+0x13e>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	7f1b      	ldrb	r3, [r3, #28]
 800b9b4:	f003 0302 	and.w	r3, r3, #2
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d151      	bne.n	800ba60 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b9bc:	897b      	ldrh	r3, [r7, #10]
 800b9be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d103      	bne.n	800b9ce <CircularQueue_Remove+0xac>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	891b      	ldrh	r3, [r3, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d012      	beq.n	800b9f4 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	68da      	ldr	r2, [r3, #12]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d942      	bls.n	800ba60 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	891b      	ldrh	r3, [r3, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d03e      	beq.n	800ba60 <CircularQueue_Remove+0x13e>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	8912      	ldrh	r2, [r2, #8]
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d235      	bcs.n	800ba60 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	695a      	ldr	r2, [r3, #20]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68d9      	ldr	r1, [r3, #12]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	1acb      	subs	r3, r1, r3
 800ba02:	441a      	add	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	891b      	ldrh	r3, [r3, #8]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d121      	bne.n	800ba5a <CircularQueue_Remove+0x138>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	4413      	add	r3, r2
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6819      	ldr	r1, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	1c58      	adds	r0, r3, #1
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	4298      	cmp	r0, r3
 800ba34:	d306      	bcc.n	800ba44 <CircularQueue_Remove+0x122>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68d8      	ldr	r0, [r3, #12]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	1ac3      	subs	r3, r0, r3
 800ba40:	3301      	adds	r3, #1
 800ba42:	e002      	b.n	800ba4a <CircularQueue_Remove+0x128>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	440b      	add	r3, r1
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	021b      	lsls	r3, r3, #8
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	4413      	add	r3, r2
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	e001      	b.n	800ba5e <CircularQueue_Remove+0x13c>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	891b      	ldrh	r3, [r3, #8]
 800ba5e:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68d9      	ldr	r1, [r3, #12]
 800ba68:	7a7b      	ldrb	r3, [r7, #9]
 800ba6a:	4419      	add	r1, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	4299      	cmp	r1, r3
 800ba72:	d307      	bcc.n	800ba84 <CircularQueue_Remove+0x162>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	68d9      	ldr	r1, [r3, #12]
 800ba78:	7a7b      	ldrb	r3, [r7, #9]
 800ba7a:	4419      	add	r1, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	1acb      	subs	r3, r1, r3
 800ba82:	e003      	b.n	800ba8c <CircularQueue_Remove+0x16a>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68d9      	ldr	r1, [r3, #12]
 800ba88:	7a7b      	ldrb	r3, [r7, #9]
 800ba8a:	440b      	add	r3, r1
 800ba8c:	4413      	add	r3, r2
 800ba8e:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	8979      	ldrh	r1, [r7, #10]
 800ba96:	7a7a      	ldrb	r2, [r7, #9]
 800ba98:	440a      	add	r2, r1
 800ba9a:	1a9a      	subs	r2, r3, r2
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	695b      	ldr	r3, [r3, #20]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d01b      	beq.n	800bae0 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	68da      	ldr	r2, [r3, #12]
 800baac:	897b      	ldrh	r3, [r7, #10]
 800baae:	441a      	add	r2, r3
 800bab0:	7a7b      	ldrb	r3, [r7, #9]
 800bab2:	441a      	add	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d309      	bcc.n	800bad0 <CircularQueue_Remove+0x1ae>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	68da      	ldr	r2, [r3, #12]
 800bac0:	897b      	ldrh	r3, [r7, #10]
 800bac2:	441a      	add	r2, r3
 800bac4:	7a7b      	ldrb	r3, [r7, #9]
 800bac6:	441a      	add	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	e005      	b.n	800badc <CircularQueue_Remove+0x1ba>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	68da      	ldr	r2, [r3, #12]
 800bad4:	897b      	ldrh	r3, [r7, #10]
 800bad6:	441a      	add	r2, r3
 800bad8:	7a7b      	ldrb	r3, [r7, #9]
 800bada:	4413      	add	r3, r2
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	1e5a      	subs	r2, r3, #1
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	897a      	ldrh	r2, [r7, #10]
 800baf4:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800baf6:	68fb      	ldr	r3, [r7, #12]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b087      	sub	sp, #28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800bb12:	2300      	movs	r3, #0
 800bb14:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	891b      	ldrh	r3, [r3, #8]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d101      	bne.n	800bb22 <CircularQueue_Sense+0x1e>
 800bb1e:	2302      	movs	r3, #2
 800bb20:	e000      	b.n	800bb24 <CircularQueue_Sense+0x20>
 800bb22:	2300      	movs	r3, #0
 800bb24:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 8090 	beq.w	800bc58 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	891b      	ldrh	r3, [r3, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d121      	bne.n	800bb8a <CircularQueue_Sense+0x86>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	4413      	add	r3, r2
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6819      	ldr	r1, [r3, #0]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	1c58      	adds	r0, r3, #1
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	4298      	cmp	r0, r3
 800bb64:	d306      	bcc.n	800bb74 <CircularQueue_Sense+0x70>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	68d8      	ldr	r0, [r3, #12]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	1ac3      	subs	r3, r0, r3
 800bb70:	3301      	adds	r3, #1
 800bb72:	e002      	b.n	800bb7a <CircularQueue_Sense+0x76>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	440b      	add	r3, r1
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	4413      	add	r3, r2
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	e001      	b.n	800bb8e <CircularQueue_Sense+0x8a>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	891b      	ldrh	r3, [r3, #8]
 800bb8e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7f1b      	ldrb	r3, [r3, #28]
 800bb94:	f003 0301 	and.w	r3, r3, #1
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d048      	beq.n	800bc2e <CircularQueue_Sense+0x12a>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	7f1b      	ldrb	r3, [r3, #28]
 800bba0:	f003 0302 	and.w	r3, r3, #2
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d142      	bne.n	800bc2e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bba8:	8a7b      	ldrh	r3, [r7, #18]
 800bbaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d103      	bne.n	800bbba <CircularQueue_Sense+0xb6>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	891b      	ldrh	r3, [r3, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d012      	beq.n	800bbe0 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68da      	ldr	r2, [r3, #12]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d933      	bls.n	800bc2e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	891b      	ldrh	r3, [r3, #8]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d02f      	beq.n	800bc2e <CircularQueue_Sense+0x12a>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	8912      	ldrh	r2, [r2, #8]
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d226      	bcs.n	800bc2e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	891b      	ldrh	r3, [r3, #8]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d11d      	bne.n	800bc28 <CircularQueue_Sense+0x124>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6819      	ldr	r1, [r3, #0]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	1c58      	adds	r0, r3, #1
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	4298      	cmp	r0, r3
 800bc06:	d305      	bcc.n	800bc14 <CircularQueue_Sense+0x110>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	1ac3      	subs	r3, r0, r3
 800bc10:	3301      	adds	r3, #1
 800bc12:	e001      	b.n	800bc18 <CircularQueue_Sense+0x114>
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3301      	adds	r3, #1
 800bc18:	440b      	add	r3, r1
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	021b      	lsls	r3, r3, #8
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	4413      	add	r3, r2
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	e001      	b.n	800bc2c <CircularQueue_Sense+0x128>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	891b      	ldrh	r3, [r3, #8]
 800bc2c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	7af9      	ldrb	r1, [r7, #11]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	4419      	add	r1, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	4299      	cmp	r1, r3
 800bc3e:	d306      	bcc.n	800bc4e <CircularQueue_Sense+0x14a>
 800bc40:	7af9      	ldrb	r1, [r7, #11]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4419      	add	r1, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	1acb      	subs	r3, r1, r3
 800bc4c:	e002      	b.n	800bc54 <CircularQueue_Sense+0x150>
 800bc4e:	7af9      	ldrb	r1, [r7, #11]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	440b      	add	r3, r1
 800bc54:	4413      	add	r3, r2
 800bc56:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	8a7a      	ldrh	r2, [r7, #18]
 800bc62:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800bc64:	697b      	ldr	r3, [r7, #20]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	371c      	adds	r7, #28
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
	...

0800bc74 <__errno>:
 800bc74:	4b01      	ldr	r3, [pc, #4]	; (800bc7c <__errno+0x8>)
 800bc76:	6818      	ldr	r0, [r3, #0]
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	2000002c 	.word	0x2000002c

0800bc80 <__libc_init_array>:
 800bc80:	b570      	push	{r4, r5, r6, lr}
 800bc82:	4d0d      	ldr	r5, [pc, #52]	; (800bcb8 <__libc_init_array+0x38>)
 800bc84:	4c0d      	ldr	r4, [pc, #52]	; (800bcbc <__libc_init_array+0x3c>)
 800bc86:	1b64      	subs	r4, r4, r5
 800bc88:	10a4      	asrs	r4, r4, #2
 800bc8a:	2600      	movs	r6, #0
 800bc8c:	42a6      	cmp	r6, r4
 800bc8e:	d109      	bne.n	800bca4 <__libc_init_array+0x24>
 800bc90:	4d0b      	ldr	r5, [pc, #44]	; (800bcc0 <__libc_init_array+0x40>)
 800bc92:	4c0c      	ldr	r4, [pc, #48]	; (800bcc4 <__libc_init_array+0x44>)
 800bc94:	f001 f9d8 	bl	800d048 <_init>
 800bc98:	1b64      	subs	r4, r4, r5
 800bc9a:	10a4      	asrs	r4, r4, #2
 800bc9c:	2600      	movs	r6, #0
 800bc9e:	42a6      	cmp	r6, r4
 800bca0:	d105      	bne.n	800bcae <__libc_init_array+0x2e>
 800bca2:	bd70      	pop	{r4, r5, r6, pc}
 800bca4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca8:	4798      	blx	r3
 800bcaa:	3601      	adds	r6, #1
 800bcac:	e7ee      	b.n	800bc8c <__libc_init_array+0xc>
 800bcae:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcb2:	4798      	blx	r3
 800bcb4:	3601      	adds	r6, #1
 800bcb6:	e7f2      	b.n	800bc9e <__libc_init_array+0x1e>
 800bcb8:	0800da0c 	.word	0x0800da0c
 800bcbc:	0800da0c 	.word	0x0800da0c
 800bcc0:	0800da0c 	.word	0x0800da0c
 800bcc4:	0800da10 	.word	0x0800da10

0800bcc8 <memcpy>:
 800bcc8:	440a      	add	r2, r1
 800bcca:	4291      	cmp	r1, r2
 800bccc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcd0:	d100      	bne.n	800bcd4 <memcpy+0xc>
 800bcd2:	4770      	bx	lr
 800bcd4:	b510      	push	{r4, lr}
 800bcd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcde:	4291      	cmp	r1, r2
 800bce0:	d1f9      	bne.n	800bcd6 <memcpy+0xe>
 800bce2:	bd10      	pop	{r4, pc}

0800bce4 <memset>:
 800bce4:	4402      	add	r2, r0
 800bce6:	4603      	mov	r3, r0
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d100      	bne.n	800bcee <memset+0xa>
 800bcec:	4770      	bx	lr
 800bcee:	f803 1b01 	strb.w	r1, [r3], #1
 800bcf2:	e7f9      	b.n	800bce8 <memset+0x4>

0800bcf4 <iprintf>:
 800bcf4:	b40f      	push	{r0, r1, r2, r3}
 800bcf6:	4b0a      	ldr	r3, [pc, #40]	; (800bd20 <iprintf+0x2c>)
 800bcf8:	b513      	push	{r0, r1, r4, lr}
 800bcfa:	681c      	ldr	r4, [r3, #0]
 800bcfc:	b124      	cbz	r4, 800bd08 <iprintf+0x14>
 800bcfe:	69a3      	ldr	r3, [r4, #24]
 800bd00:	b913      	cbnz	r3, 800bd08 <iprintf+0x14>
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 f8d4 	bl	800beb0 <__sinit>
 800bd08:	ab05      	add	r3, sp, #20
 800bd0a:	9a04      	ldr	r2, [sp, #16]
 800bd0c:	68a1      	ldr	r1, [r4, #8]
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	4620      	mov	r0, r4
 800bd12:	f000 fb87 	bl	800c424 <_vfiprintf_r>
 800bd16:	b002      	add	sp, #8
 800bd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd1c:	b004      	add	sp, #16
 800bd1e:	4770      	bx	lr
 800bd20:	2000002c 	.word	0x2000002c

0800bd24 <sniprintf>:
 800bd24:	b40c      	push	{r2, r3}
 800bd26:	b530      	push	{r4, r5, lr}
 800bd28:	4b17      	ldr	r3, [pc, #92]	; (800bd88 <sniprintf+0x64>)
 800bd2a:	1e0c      	subs	r4, r1, #0
 800bd2c:	681d      	ldr	r5, [r3, #0]
 800bd2e:	b09d      	sub	sp, #116	; 0x74
 800bd30:	da08      	bge.n	800bd44 <sniprintf+0x20>
 800bd32:	238b      	movs	r3, #139	; 0x8b
 800bd34:	602b      	str	r3, [r5, #0]
 800bd36:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3a:	b01d      	add	sp, #116	; 0x74
 800bd3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd40:	b002      	add	sp, #8
 800bd42:	4770      	bx	lr
 800bd44:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd48:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd4c:	bf14      	ite	ne
 800bd4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd52:	4623      	moveq	r3, r4
 800bd54:	9304      	str	r3, [sp, #16]
 800bd56:	9307      	str	r3, [sp, #28]
 800bd58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd5c:	9002      	str	r0, [sp, #8]
 800bd5e:	9006      	str	r0, [sp, #24]
 800bd60:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd66:	ab21      	add	r3, sp, #132	; 0x84
 800bd68:	a902      	add	r1, sp, #8
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	f000 fa2f 	bl	800c1d0 <_svfiprintf_r>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	bfbc      	itt	lt
 800bd76:	238b      	movlt	r3, #139	; 0x8b
 800bd78:	602b      	strlt	r3, [r5, #0]
 800bd7a:	2c00      	cmp	r4, #0
 800bd7c:	d0dd      	beq.n	800bd3a <sniprintf+0x16>
 800bd7e:	9b02      	ldr	r3, [sp, #8]
 800bd80:	2200      	movs	r2, #0
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	e7d9      	b.n	800bd3a <sniprintf+0x16>
 800bd86:	bf00      	nop
 800bd88:	2000002c 	.word	0x2000002c

0800bd8c <_vsniprintf_r>:
 800bd8c:	b530      	push	{r4, r5, lr}
 800bd8e:	4614      	mov	r4, r2
 800bd90:	2c00      	cmp	r4, #0
 800bd92:	b09b      	sub	sp, #108	; 0x6c
 800bd94:	4605      	mov	r5, r0
 800bd96:	461a      	mov	r2, r3
 800bd98:	da05      	bge.n	800bda6 <_vsniprintf_r+0x1a>
 800bd9a:	238b      	movs	r3, #139	; 0x8b
 800bd9c:	6003      	str	r3, [r0, #0]
 800bd9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bda2:	b01b      	add	sp, #108	; 0x6c
 800bda4:	bd30      	pop	{r4, r5, pc}
 800bda6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bdaa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bdae:	bf14      	ite	ne
 800bdb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bdb4:	4623      	moveq	r3, r4
 800bdb6:	9302      	str	r3, [sp, #8]
 800bdb8:	9305      	str	r3, [sp, #20]
 800bdba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdbe:	9100      	str	r1, [sp, #0]
 800bdc0:	9104      	str	r1, [sp, #16]
 800bdc2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bdc6:	4669      	mov	r1, sp
 800bdc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bdca:	f000 fa01 	bl	800c1d0 <_svfiprintf_r>
 800bdce:	1c43      	adds	r3, r0, #1
 800bdd0:	bfbc      	itt	lt
 800bdd2:	238b      	movlt	r3, #139	; 0x8b
 800bdd4:	602b      	strlt	r3, [r5, #0]
 800bdd6:	2c00      	cmp	r4, #0
 800bdd8:	d0e3      	beq.n	800bda2 <_vsniprintf_r+0x16>
 800bdda:	9b00      	ldr	r3, [sp, #0]
 800bddc:	2200      	movs	r2, #0
 800bdde:	701a      	strb	r2, [r3, #0]
 800bde0:	e7df      	b.n	800bda2 <_vsniprintf_r+0x16>
	...

0800bde4 <vsniprintf>:
 800bde4:	b507      	push	{r0, r1, r2, lr}
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	4613      	mov	r3, r2
 800bdea:	460a      	mov	r2, r1
 800bdec:	4601      	mov	r1, r0
 800bdee:	4803      	ldr	r0, [pc, #12]	; (800bdfc <vsniprintf+0x18>)
 800bdf0:	6800      	ldr	r0, [r0, #0]
 800bdf2:	f7ff ffcb 	bl	800bd8c <_vsniprintf_r>
 800bdf6:	b003      	add	sp, #12
 800bdf8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdfc:	2000002c 	.word	0x2000002c

0800be00 <std>:
 800be00:	2300      	movs	r3, #0
 800be02:	b510      	push	{r4, lr}
 800be04:	4604      	mov	r4, r0
 800be06:	e9c0 3300 	strd	r3, r3, [r0]
 800be0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be0e:	6083      	str	r3, [r0, #8]
 800be10:	8181      	strh	r1, [r0, #12]
 800be12:	6643      	str	r3, [r0, #100]	; 0x64
 800be14:	81c2      	strh	r2, [r0, #14]
 800be16:	6183      	str	r3, [r0, #24]
 800be18:	4619      	mov	r1, r3
 800be1a:	2208      	movs	r2, #8
 800be1c:	305c      	adds	r0, #92	; 0x5c
 800be1e:	f7ff ff61 	bl	800bce4 <memset>
 800be22:	4b05      	ldr	r3, [pc, #20]	; (800be38 <std+0x38>)
 800be24:	6263      	str	r3, [r4, #36]	; 0x24
 800be26:	4b05      	ldr	r3, [pc, #20]	; (800be3c <std+0x3c>)
 800be28:	62a3      	str	r3, [r4, #40]	; 0x28
 800be2a:	4b05      	ldr	r3, [pc, #20]	; (800be40 <std+0x40>)
 800be2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be2e:	4b05      	ldr	r3, [pc, #20]	; (800be44 <std+0x44>)
 800be30:	6224      	str	r4, [r4, #32]
 800be32:	6323      	str	r3, [r4, #48]	; 0x30
 800be34:	bd10      	pop	{r4, pc}
 800be36:	bf00      	nop
 800be38:	0800c9cd 	.word	0x0800c9cd
 800be3c:	0800c9ef 	.word	0x0800c9ef
 800be40:	0800ca27 	.word	0x0800ca27
 800be44:	0800ca4b 	.word	0x0800ca4b

0800be48 <_cleanup_r>:
 800be48:	4901      	ldr	r1, [pc, #4]	; (800be50 <_cleanup_r+0x8>)
 800be4a:	f000 b8af 	b.w	800bfac <_fwalk_reent>
 800be4e:	bf00      	nop
 800be50:	0800cd25 	.word	0x0800cd25

0800be54 <__sfmoreglue>:
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	2268      	movs	r2, #104	; 0x68
 800be58:	1e4d      	subs	r5, r1, #1
 800be5a:	4355      	muls	r5, r2
 800be5c:	460e      	mov	r6, r1
 800be5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be62:	f000 f8e5 	bl	800c030 <_malloc_r>
 800be66:	4604      	mov	r4, r0
 800be68:	b140      	cbz	r0, 800be7c <__sfmoreglue+0x28>
 800be6a:	2100      	movs	r1, #0
 800be6c:	e9c0 1600 	strd	r1, r6, [r0]
 800be70:	300c      	adds	r0, #12
 800be72:	60a0      	str	r0, [r4, #8]
 800be74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be78:	f7ff ff34 	bl	800bce4 <memset>
 800be7c:	4620      	mov	r0, r4
 800be7e:	bd70      	pop	{r4, r5, r6, pc}

0800be80 <__sfp_lock_acquire>:
 800be80:	4801      	ldr	r0, [pc, #4]	; (800be88 <__sfp_lock_acquire+0x8>)
 800be82:	f000 b8b3 	b.w	800bfec <__retarget_lock_acquire_recursive>
 800be86:	bf00      	nop
 800be88:	200017f5 	.word	0x200017f5

0800be8c <__sfp_lock_release>:
 800be8c:	4801      	ldr	r0, [pc, #4]	; (800be94 <__sfp_lock_release+0x8>)
 800be8e:	f000 b8ae 	b.w	800bfee <__retarget_lock_release_recursive>
 800be92:	bf00      	nop
 800be94:	200017f5 	.word	0x200017f5

0800be98 <__sinit_lock_acquire>:
 800be98:	4801      	ldr	r0, [pc, #4]	; (800bea0 <__sinit_lock_acquire+0x8>)
 800be9a:	f000 b8a7 	b.w	800bfec <__retarget_lock_acquire_recursive>
 800be9e:	bf00      	nop
 800bea0:	200017f6 	.word	0x200017f6

0800bea4 <__sinit_lock_release>:
 800bea4:	4801      	ldr	r0, [pc, #4]	; (800beac <__sinit_lock_release+0x8>)
 800bea6:	f000 b8a2 	b.w	800bfee <__retarget_lock_release_recursive>
 800beaa:	bf00      	nop
 800beac:	200017f6 	.word	0x200017f6

0800beb0 <__sinit>:
 800beb0:	b510      	push	{r4, lr}
 800beb2:	4604      	mov	r4, r0
 800beb4:	f7ff fff0 	bl	800be98 <__sinit_lock_acquire>
 800beb8:	69a3      	ldr	r3, [r4, #24]
 800beba:	b11b      	cbz	r3, 800bec4 <__sinit+0x14>
 800bebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bec0:	f7ff bff0 	b.w	800bea4 <__sinit_lock_release>
 800bec4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bec8:	6523      	str	r3, [r4, #80]	; 0x50
 800beca:	4b13      	ldr	r3, [pc, #76]	; (800bf18 <__sinit+0x68>)
 800becc:	4a13      	ldr	r2, [pc, #76]	; (800bf1c <__sinit+0x6c>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bed2:	42a3      	cmp	r3, r4
 800bed4:	bf04      	itt	eq
 800bed6:	2301      	moveq	r3, #1
 800bed8:	61a3      	streq	r3, [r4, #24]
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 f820 	bl	800bf20 <__sfp>
 800bee0:	6060      	str	r0, [r4, #4]
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 f81c 	bl	800bf20 <__sfp>
 800bee8:	60a0      	str	r0, [r4, #8]
 800beea:	4620      	mov	r0, r4
 800beec:	f000 f818 	bl	800bf20 <__sfp>
 800bef0:	2200      	movs	r2, #0
 800bef2:	60e0      	str	r0, [r4, #12]
 800bef4:	2104      	movs	r1, #4
 800bef6:	6860      	ldr	r0, [r4, #4]
 800bef8:	f7ff ff82 	bl	800be00 <std>
 800befc:	68a0      	ldr	r0, [r4, #8]
 800befe:	2201      	movs	r2, #1
 800bf00:	2109      	movs	r1, #9
 800bf02:	f7ff ff7d 	bl	800be00 <std>
 800bf06:	68e0      	ldr	r0, [r4, #12]
 800bf08:	2202      	movs	r2, #2
 800bf0a:	2112      	movs	r1, #18
 800bf0c:	f7ff ff78 	bl	800be00 <std>
 800bf10:	2301      	movs	r3, #1
 800bf12:	61a3      	str	r3, [r4, #24]
 800bf14:	e7d2      	b.n	800bebc <__sinit+0xc>
 800bf16:	bf00      	nop
 800bf18:	0800d96c 	.word	0x0800d96c
 800bf1c:	0800be49 	.word	0x0800be49

0800bf20 <__sfp>:
 800bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf22:	4607      	mov	r7, r0
 800bf24:	f7ff ffac 	bl	800be80 <__sfp_lock_acquire>
 800bf28:	4b1e      	ldr	r3, [pc, #120]	; (800bfa4 <__sfp+0x84>)
 800bf2a:	681e      	ldr	r6, [r3, #0]
 800bf2c:	69b3      	ldr	r3, [r6, #24]
 800bf2e:	b913      	cbnz	r3, 800bf36 <__sfp+0x16>
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7ff ffbd 	bl	800beb0 <__sinit>
 800bf36:	3648      	adds	r6, #72	; 0x48
 800bf38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	d503      	bpl.n	800bf48 <__sfp+0x28>
 800bf40:	6833      	ldr	r3, [r6, #0]
 800bf42:	b30b      	cbz	r3, 800bf88 <__sfp+0x68>
 800bf44:	6836      	ldr	r6, [r6, #0]
 800bf46:	e7f7      	b.n	800bf38 <__sfp+0x18>
 800bf48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf4c:	b9d5      	cbnz	r5, 800bf84 <__sfp+0x64>
 800bf4e:	4b16      	ldr	r3, [pc, #88]	; (800bfa8 <__sfp+0x88>)
 800bf50:	60e3      	str	r3, [r4, #12]
 800bf52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf56:	6665      	str	r5, [r4, #100]	; 0x64
 800bf58:	f000 f847 	bl	800bfea <__retarget_lock_init_recursive>
 800bf5c:	f7ff ff96 	bl	800be8c <__sfp_lock_release>
 800bf60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf68:	6025      	str	r5, [r4, #0]
 800bf6a:	61a5      	str	r5, [r4, #24]
 800bf6c:	2208      	movs	r2, #8
 800bf6e:	4629      	mov	r1, r5
 800bf70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf74:	f7ff feb6 	bl	800bce4 <memset>
 800bf78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf80:	4620      	mov	r0, r4
 800bf82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf84:	3468      	adds	r4, #104	; 0x68
 800bf86:	e7d9      	b.n	800bf3c <__sfp+0x1c>
 800bf88:	2104      	movs	r1, #4
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	f7ff ff62 	bl	800be54 <__sfmoreglue>
 800bf90:	4604      	mov	r4, r0
 800bf92:	6030      	str	r0, [r6, #0]
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d1d5      	bne.n	800bf44 <__sfp+0x24>
 800bf98:	f7ff ff78 	bl	800be8c <__sfp_lock_release>
 800bf9c:	230c      	movs	r3, #12
 800bf9e:	603b      	str	r3, [r7, #0]
 800bfa0:	e7ee      	b.n	800bf80 <__sfp+0x60>
 800bfa2:	bf00      	nop
 800bfa4:	0800d96c 	.word	0x0800d96c
 800bfa8:	ffff0001 	.word	0xffff0001

0800bfac <_fwalk_reent>:
 800bfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	4688      	mov	r8, r1
 800bfb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfb8:	2700      	movs	r7, #0
 800bfba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfbe:	f1b9 0901 	subs.w	r9, r9, #1
 800bfc2:	d505      	bpl.n	800bfd0 <_fwalk_reent+0x24>
 800bfc4:	6824      	ldr	r4, [r4, #0]
 800bfc6:	2c00      	cmp	r4, #0
 800bfc8:	d1f7      	bne.n	800bfba <_fwalk_reent+0xe>
 800bfca:	4638      	mov	r0, r7
 800bfcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfd0:	89ab      	ldrh	r3, [r5, #12]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d907      	bls.n	800bfe6 <_fwalk_reent+0x3a>
 800bfd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	d003      	beq.n	800bfe6 <_fwalk_reent+0x3a>
 800bfde:	4629      	mov	r1, r5
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	47c0      	blx	r8
 800bfe4:	4307      	orrs	r7, r0
 800bfe6:	3568      	adds	r5, #104	; 0x68
 800bfe8:	e7e9      	b.n	800bfbe <_fwalk_reent+0x12>

0800bfea <__retarget_lock_init_recursive>:
 800bfea:	4770      	bx	lr

0800bfec <__retarget_lock_acquire_recursive>:
 800bfec:	4770      	bx	lr

0800bfee <__retarget_lock_release_recursive>:
 800bfee:	4770      	bx	lr

0800bff0 <sbrk_aligned>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	4e0e      	ldr	r6, [pc, #56]	; (800c02c <sbrk_aligned+0x3c>)
 800bff4:	460c      	mov	r4, r1
 800bff6:	6831      	ldr	r1, [r6, #0]
 800bff8:	4605      	mov	r5, r0
 800bffa:	b911      	cbnz	r1, 800c002 <sbrk_aligned+0x12>
 800bffc:	f000 fcd6 	bl	800c9ac <_sbrk_r>
 800c000:	6030      	str	r0, [r6, #0]
 800c002:	4621      	mov	r1, r4
 800c004:	4628      	mov	r0, r5
 800c006:	f000 fcd1 	bl	800c9ac <_sbrk_r>
 800c00a:	1c43      	adds	r3, r0, #1
 800c00c:	d00a      	beq.n	800c024 <sbrk_aligned+0x34>
 800c00e:	1cc4      	adds	r4, r0, #3
 800c010:	f024 0403 	bic.w	r4, r4, #3
 800c014:	42a0      	cmp	r0, r4
 800c016:	d007      	beq.n	800c028 <sbrk_aligned+0x38>
 800c018:	1a21      	subs	r1, r4, r0
 800c01a:	4628      	mov	r0, r5
 800c01c:	f000 fcc6 	bl	800c9ac <_sbrk_r>
 800c020:	3001      	adds	r0, #1
 800c022:	d101      	bne.n	800c028 <sbrk_aligned+0x38>
 800c024:	f04f 34ff 	mov.w	r4, #4294967295
 800c028:	4620      	mov	r0, r4
 800c02a:	bd70      	pop	{r4, r5, r6, pc}
 800c02c:	200017fc 	.word	0x200017fc

0800c030 <_malloc_r>:
 800c030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c034:	1ccd      	adds	r5, r1, #3
 800c036:	f025 0503 	bic.w	r5, r5, #3
 800c03a:	3508      	adds	r5, #8
 800c03c:	2d0c      	cmp	r5, #12
 800c03e:	bf38      	it	cc
 800c040:	250c      	movcc	r5, #12
 800c042:	2d00      	cmp	r5, #0
 800c044:	4607      	mov	r7, r0
 800c046:	db01      	blt.n	800c04c <_malloc_r+0x1c>
 800c048:	42a9      	cmp	r1, r5
 800c04a:	d905      	bls.n	800c058 <_malloc_r+0x28>
 800c04c:	230c      	movs	r3, #12
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	2600      	movs	r6, #0
 800c052:	4630      	mov	r0, r6
 800c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c058:	4e2e      	ldr	r6, [pc, #184]	; (800c114 <_malloc_r+0xe4>)
 800c05a:	f000 ff31 	bl	800cec0 <__malloc_lock>
 800c05e:	6833      	ldr	r3, [r6, #0]
 800c060:	461c      	mov	r4, r3
 800c062:	bb34      	cbnz	r4, 800c0b2 <_malloc_r+0x82>
 800c064:	4629      	mov	r1, r5
 800c066:	4638      	mov	r0, r7
 800c068:	f7ff ffc2 	bl	800bff0 <sbrk_aligned>
 800c06c:	1c43      	adds	r3, r0, #1
 800c06e:	4604      	mov	r4, r0
 800c070:	d14d      	bne.n	800c10e <_malloc_r+0xde>
 800c072:	6834      	ldr	r4, [r6, #0]
 800c074:	4626      	mov	r6, r4
 800c076:	2e00      	cmp	r6, #0
 800c078:	d140      	bne.n	800c0fc <_malloc_r+0xcc>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	4631      	mov	r1, r6
 800c07e:	4638      	mov	r0, r7
 800c080:	eb04 0803 	add.w	r8, r4, r3
 800c084:	f000 fc92 	bl	800c9ac <_sbrk_r>
 800c088:	4580      	cmp	r8, r0
 800c08a:	d13a      	bne.n	800c102 <_malloc_r+0xd2>
 800c08c:	6821      	ldr	r1, [r4, #0]
 800c08e:	3503      	adds	r5, #3
 800c090:	1a6d      	subs	r5, r5, r1
 800c092:	f025 0503 	bic.w	r5, r5, #3
 800c096:	3508      	adds	r5, #8
 800c098:	2d0c      	cmp	r5, #12
 800c09a:	bf38      	it	cc
 800c09c:	250c      	movcc	r5, #12
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff ffa5 	bl	800bff0 <sbrk_aligned>
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	d02b      	beq.n	800c102 <_malloc_r+0xd2>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	442b      	add	r3, r5
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	e00e      	b.n	800c0d0 <_malloc_r+0xa0>
 800c0b2:	6822      	ldr	r2, [r4, #0]
 800c0b4:	1b52      	subs	r2, r2, r5
 800c0b6:	d41e      	bmi.n	800c0f6 <_malloc_r+0xc6>
 800c0b8:	2a0b      	cmp	r2, #11
 800c0ba:	d916      	bls.n	800c0ea <_malloc_r+0xba>
 800c0bc:	1961      	adds	r1, r4, r5
 800c0be:	42a3      	cmp	r3, r4
 800c0c0:	6025      	str	r5, [r4, #0]
 800c0c2:	bf18      	it	ne
 800c0c4:	6059      	strne	r1, [r3, #4]
 800c0c6:	6863      	ldr	r3, [r4, #4]
 800c0c8:	bf08      	it	eq
 800c0ca:	6031      	streq	r1, [r6, #0]
 800c0cc:	5162      	str	r2, [r4, r5]
 800c0ce:	604b      	str	r3, [r1, #4]
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	f104 060b 	add.w	r6, r4, #11
 800c0d6:	f000 fef9 	bl	800cecc <__malloc_unlock>
 800c0da:	f026 0607 	bic.w	r6, r6, #7
 800c0de:	1d23      	adds	r3, r4, #4
 800c0e0:	1af2      	subs	r2, r6, r3
 800c0e2:	d0b6      	beq.n	800c052 <_malloc_r+0x22>
 800c0e4:	1b9b      	subs	r3, r3, r6
 800c0e6:	50a3      	str	r3, [r4, r2]
 800c0e8:	e7b3      	b.n	800c052 <_malloc_r+0x22>
 800c0ea:	6862      	ldr	r2, [r4, #4]
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	bf0c      	ite	eq
 800c0f0:	6032      	streq	r2, [r6, #0]
 800c0f2:	605a      	strne	r2, [r3, #4]
 800c0f4:	e7ec      	b.n	800c0d0 <_malloc_r+0xa0>
 800c0f6:	4623      	mov	r3, r4
 800c0f8:	6864      	ldr	r4, [r4, #4]
 800c0fa:	e7b2      	b.n	800c062 <_malloc_r+0x32>
 800c0fc:	4634      	mov	r4, r6
 800c0fe:	6876      	ldr	r6, [r6, #4]
 800c100:	e7b9      	b.n	800c076 <_malloc_r+0x46>
 800c102:	230c      	movs	r3, #12
 800c104:	603b      	str	r3, [r7, #0]
 800c106:	4638      	mov	r0, r7
 800c108:	f000 fee0 	bl	800cecc <__malloc_unlock>
 800c10c:	e7a1      	b.n	800c052 <_malloc_r+0x22>
 800c10e:	6025      	str	r5, [r4, #0]
 800c110:	e7de      	b.n	800c0d0 <_malloc_r+0xa0>
 800c112:	bf00      	nop
 800c114:	200017f8 	.word	0x200017f8

0800c118 <__ssputs_r>:
 800c118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c11c:	688e      	ldr	r6, [r1, #8]
 800c11e:	429e      	cmp	r6, r3
 800c120:	4682      	mov	sl, r0
 800c122:	460c      	mov	r4, r1
 800c124:	4690      	mov	r8, r2
 800c126:	461f      	mov	r7, r3
 800c128:	d838      	bhi.n	800c19c <__ssputs_r+0x84>
 800c12a:	898a      	ldrh	r2, [r1, #12]
 800c12c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c130:	d032      	beq.n	800c198 <__ssputs_r+0x80>
 800c132:	6825      	ldr	r5, [r4, #0]
 800c134:	6909      	ldr	r1, [r1, #16]
 800c136:	eba5 0901 	sub.w	r9, r5, r1
 800c13a:	6965      	ldr	r5, [r4, #20]
 800c13c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c144:	3301      	adds	r3, #1
 800c146:	444b      	add	r3, r9
 800c148:	106d      	asrs	r5, r5, #1
 800c14a:	429d      	cmp	r5, r3
 800c14c:	bf38      	it	cc
 800c14e:	461d      	movcc	r5, r3
 800c150:	0553      	lsls	r3, r2, #21
 800c152:	d531      	bpl.n	800c1b8 <__ssputs_r+0xa0>
 800c154:	4629      	mov	r1, r5
 800c156:	f7ff ff6b 	bl	800c030 <_malloc_r>
 800c15a:	4606      	mov	r6, r0
 800c15c:	b950      	cbnz	r0, 800c174 <__ssputs_r+0x5c>
 800c15e:	230c      	movs	r3, #12
 800c160:	f8ca 3000 	str.w	r3, [sl]
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c174:	6921      	ldr	r1, [r4, #16]
 800c176:	464a      	mov	r2, r9
 800c178:	f7ff fda6 	bl	800bcc8 <memcpy>
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c186:	81a3      	strh	r3, [r4, #12]
 800c188:	6126      	str	r6, [r4, #16]
 800c18a:	6165      	str	r5, [r4, #20]
 800c18c:	444e      	add	r6, r9
 800c18e:	eba5 0509 	sub.w	r5, r5, r9
 800c192:	6026      	str	r6, [r4, #0]
 800c194:	60a5      	str	r5, [r4, #8]
 800c196:	463e      	mov	r6, r7
 800c198:	42be      	cmp	r6, r7
 800c19a:	d900      	bls.n	800c19e <__ssputs_r+0x86>
 800c19c:	463e      	mov	r6, r7
 800c19e:	6820      	ldr	r0, [r4, #0]
 800c1a0:	4632      	mov	r2, r6
 800c1a2:	4641      	mov	r1, r8
 800c1a4:	f000 fe72 	bl	800ce8c <memmove>
 800c1a8:	68a3      	ldr	r3, [r4, #8]
 800c1aa:	1b9b      	subs	r3, r3, r6
 800c1ac:	60a3      	str	r3, [r4, #8]
 800c1ae:	6823      	ldr	r3, [r4, #0]
 800c1b0:	4433      	add	r3, r6
 800c1b2:	6023      	str	r3, [r4, #0]
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	e7db      	b.n	800c170 <__ssputs_r+0x58>
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	f000 fed9 	bl	800cf70 <_realloc_r>
 800c1be:	4606      	mov	r6, r0
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d1e1      	bne.n	800c188 <__ssputs_r+0x70>
 800c1c4:	6921      	ldr	r1, [r4, #16]
 800c1c6:	4650      	mov	r0, sl
 800c1c8:	f000 fe86 	bl	800ced8 <_free_r>
 800c1cc:	e7c7      	b.n	800c15e <__ssputs_r+0x46>
	...

0800c1d0 <_svfiprintf_r>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	4698      	mov	r8, r3
 800c1d6:	898b      	ldrh	r3, [r1, #12]
 800c1d8:	061b      	lsls	r3, r3, #24
 800c1da:	b09d      	sub	sp, #116	; 0x74
 800c1dc:	4607      	mov	r7, r0
 800c1de:	460d      	mov	r5, r1
 800c1e0:	4614      	mov	r4, r2
 800c1e2:	d50e      	bpl.n	800c202 <_svfiprintf_r+0x32>
 800c1e4:	690b      	ldr	r3, [r1, #16]
 800c1e6:	b963      	cbnz	r3, 800c202 <_svfiprintf_r+0x32>
 800c1e8:	2140      	movs	r1, #64	; 0x40
 800c1ea:	f7ff ff21 	bl	800c030 <_malloc_r>
 800c1ee:	6028      	str	r0, [r5, #0]
 800c1f0:	6128      	str	r0, [r5, #16]
 800c1f2:	b920      	cbnz	r0, 800c1fe <_svfiprintf_r+0x2e>
 800c1f4:	230c      	movs	r3, #12
 800c1f6:	603b      	str	r3, [r7, #0]
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fc:	e0d1      	b.n	800c3a2 <_svfiprintf_r+0x1d2>
 800c1fe:	2340      	movs	r3, #64	; 0x40
 800c200:	616b      	str	r3, [r5, #20]
 800c202:	2300      	movs	r3, #0
 800c204:	9309      	str	r3, [sp, #36]	; 0x24
 800c206:	2320      	movs	r3, #32
 800c208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c20c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c210:	2330      	movs	r3, #48	; 0x30
 800c212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3bc <_svfiprintf_r+0x1ec>
 800c216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c21a:	f04f 0901 	mov.w	r9, #1
 800c21e:	4623      	mov	r3, r4
 800c220:	469a      	mov	sl, r3
 800c222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c226:	b10a      	cbz	r2, 800c22c <_svfiprintf_r+0x5c>
 800c228:	2a25      	cmp	r2, #37	; 0x25
 800c22a:	d1f9      	bne.n	800c220 <_svfiprintf_r+0x50>
 800c22c:	ebba 0b04 	subs.w	fp, sl, r4
 800c230:	d00b      	beq.n	800c24a <_svfiprintf_r+0x7a>
 800c232:	465b      	mov	r3, fp
 800c234:	4622      	mov	r2, r4
 800c236:	4629      	mov	r1, r5
 800c238:	4638      	mov	r0, r7
 800c23a:	f7ff ff6d 	bl	800c118 <__ssputs_r>
 800c23e:	3001      	adds	r0, #1
 800c240:	f000 80aa 	beq.w	800c398 <_svfiprintf_r+0x1c8>
 800c244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c246:	445a      	add	r2, fp
 800c248:	9209      	str	r2, [sp, #36]	; 0x24
 800c24a:	f89a 3000 	ldrb.w	r3, [sl]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f000 80a2 	beq.w	800c398 <_svfiprintf_r+0x1c8>
 800c254:	2300      	movs	r3, #0
 800c256:	f04f 32ff 	mov.w	r2, #4294967295
 800c25a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c25e:	f10a 0a01 	add.w	sl, sl, #1
 800c262:	9304      	str	r3, [sp, #16]
 800c264:	9307      	str	r3, [sp, #28]
 800c266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c26a:	931a      	str	r3, [sp, #104]	; 0x68
 800c26c:	4654      	mov	r4, sl
 800c26e:	2205      	movs	r2, #5
 800c270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c274:	4851      	ldr	r0, [pc, #324]	; (800c3bc <_svfiprintf_r+0x1ec>)
 800c276:	f7f3 ff93 	bl	80001a0 <memchr>
 800c27a:	9a04      	ldr	r2, [sp, #16]
 800c27c:	b9d8      	cbnz	r0, 800c2b6 <_svfiprintf_r+0xe6>
 800c27e:	06d0      	lsls	r0, r2, #27
 800c280:	bf44      	itt	mi
 800c282:	2320      	movmi	r3, #32
 800c284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c288:	0711      	lsls	r1, r2, #28
 800c28a:	bf44      	itt	mi
 800c28c:	232b      	movmi	r3, #43	; 0x2b
 800c28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c292:	f89a 3000 	ldrb.w	r3, [sl]
 800c296:	2b2a      	cmp	r3, #42	; 0x2a
 800c298:	d015      	beq.n	800c2c6 <_svfiprintf_r+0xf6>
 800c29a:	9a07      	ldr	r2, [sp, #28]
 800c29c:	4654      	mov	r4, sl
 800c29e:	2000      	movs	r0, #0
 800c2a0:	f04f 0c0a 	mov.w	ip, #10
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2aa:	3b30      	subs	r3, #48	; 0x30
 800c2ac:	2b09      	cmp	r3, #9
 800c2ae:	d94e      	bls.n	800c34e <_svfiprintf_r+0x17e>
 800c2b0:	b1b0      	cbz	r0, 800c2e0 <_svfiprintf_r+0x110>
 800c2b2:	9207      	str	r2, [sp, #28]
 800c2b4:	e014      	b.n	800c2e0 <_svfiprintf_r+0x110>
 800c2b6:	eba0 0308 	sub.w	r3, r0, r8
 800c2ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	46a2      	mov	sl, r4
 800c2c4:	e7d2      	b.n	800c26c <_svfiprintf_r+0x9c>
 800c2c6:	9b03      	ldr	r3, [sp, #12]
 800c2c8:	1d19      	adds	r1, r3, #4
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	9103      	str	r1, [sp, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	bfbb      	ittet	lt
 800c2d2:	425b      	neglt	r3, r3
 800c2d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c2d8:	9307      	strge	r3, [sp, #28]
 800c2da:	9307      	strlt	r3, [sp, #28]
 800c2dc:	bfb8      	it	lt
 800c2de:	9204      	strlt	r2, [sp, #16]
 800c2e0:	7823      	ldrb	r3, [r4, #0]
 800c2e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c2e4:	d10c      	bne.n	800c300 <_svfiprintf_r+0x130>
 800c2e6:	7863      	ldrb	r3, [r4, #1]
 800c2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ea:	d135      	bne.n	800c358 <_svfiprintf_r+0x188>
 800c2ec:	9b03      	ldr	r3, [sp, #12]
 800c2ee:	1d1a      	adds	r2, r3, #4
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	9203      	str	r2, [sp, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	bfb8      	it	lt
 800c2f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2fc:	3402      	adds	r4, #2
 800c2fe:	9305      	str	r3, [sp, #20]
 800c300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3cc <_svfiprintf_r+0x1fc>
 800c304:	7821      	ldrb	r1, [r4, #0]
 800c306:	2203      	movs	r2, #3
 800c308:	4650      	mov	r0, sl
 800c30a:	f7f3 ff49 	bl	80001a0 <memchr>
 800c30e:	b140      	cbz	r0, 800c322 <_svfiprintf_r+0x152>
 800c310:	2340      	movs	r3, #64	; 0x40
 800c312:	eba0 000a 	sub.w	r0, r0, sl
 800c316:	fa03 f000 	lsl.w	r0, r3, r0
 800c31a:	9b04      	ldr	r3, [sp, #16]
 800c31c:	4303      	orrs	r3, r0
 800c31e:	3401      	adds	r4, #1
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c326:	4826      	ldr	r0, [pc, #152]	; (800c3c0 <_svfiprintf_r+0x1f0>)
 800c328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c32c:	2206      	movs	r2, #6
 800c32e:	f7f3 ff37 	bl	80001a0 <memchr>
 800c332:	2800      	cmp	r0, #0
 800c334:	d038      	beq.n	800c3a8 <_svfiprintf_r+0x1d8>
 800c336:	4b23      	ldr	r3, [pc, #140]	; (800c3c4 <_svfiprintf_r+0x1f4>)
 800c338:	bb1b      	cbnz	r3, 800c382 <_svfiprintf_r+0x1b2>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	3307      	adds	r3, #7
 800c33e:	f023 0307 	bic.w	r3, r3, #7
 800c342:	3308      	adds	r3, #8
 800c344:	9303      	str	r3, [sp, #12]
 800c346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c348:	4433      	add	r3, r6
 800c34a:	9309      	str	r3, [sp, #36]	; 0x24
 800c34c:	e767      	b.n	800c21e <_svfiprintf_r+0x4e>
 800c34e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c352:	460c      	mov	r4, r1
 800c354:	2001      	movs	r0, #1
 800c356:	e7a5      	b.n	800c2a4 <_svfiprintf_r+0xd4>
 800c358:	2300      	movs	r3, #0
 800c35a:	3401      	adds	r4, #1
 800c35c:	9305      	str	r3, [sp, #20]
 800c35e:	4619      	mov	r1, r3
 800c360:	f04f 0c0a 	mov.w	ip, #10
 800c364:	4620      	mov	r0, r4
 800c366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c36a:	3a30      	subs	r2, #48	; 0x30
 800c36c:	2a09      	cmp	r2, #9
 800c36e:	d903      	bls.n	800c378 <_svfiprintf_r+0x1a8>
 800c370:	2b00      	cmp	r3, #0
 800c372:	d0c5      	beq.n	800c300 <_svfiprintf_r+0x130>
 800c374:	9105      	str	r1, [sp, #20]
 800c376:	e7c3      	b.n	800c300 <_svfiprintf_r+0x130>
 800c378:	fb0c 2101 	mla	r1, ip, r1, r2
 800c37c:	4604      	mov	r4, r0
 800c37e:	2301      	movs	r3, #1
 800c380:	e7f0      	b.n	800c364 <_svfiprintf_r+0x194>
 800c382:	ab03      	add	r3, sp, #12
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	462a      	mov	r2, r5
 800c388:	4b0f      	ldr	r3, [pc, #60]	; (800c3c8 <_svfiprintf_r+0x1f8>)
 800c38a:	a904      	add	r1, sp, #16
 800c38c:	4638      	mov	r0, r7
 800c38e:	f3af 8000 	nop.w
 800c392:	1c42      	adds	r2, r0, #1
 800c394:	4606      	mov	r6, r0
 800c396:	d1d6      	bne.n	800c346 <_svfiprintf_r+0x176>
 800c398:	89ab      	ldrh	r3, [r5, #12]
 800c39a:	065b      	lsls	r3, r3, #25
 800c39c:	f53f af2c 	bmi.w	800c1f8 <_svfiprintf_r+0x28>
 800c3a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3a2:	b01d      	add	sp, #116	; 0x74
 800c3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a8:	ab03      	add	r3, sp, #12
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	462a      	mov	r2, r5
 800c3ae:	4b06      	ldr	r3, [pc, #24]	; (800c3c8 <_svfiprintf_r+0x1f8>)
 800c3b0:	a904      	add	r1, sp, #16
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	f000 f9d4 	bl	800c760 <_printf_i>
 800c3b8:	e7eb      	b.n	800c392 <_svfiprintf_r+0x1c2>
 800c3ba:	bf00      	nop
 800c3bc:	0800d9d0 	.word	0x0800d9d0
 800c3c0:	0800d9da 	.word	0x0800d9da
 800c3c4:	00000000 	.word	0x00000000
 800c3c8:	0800c119 	.word	0x0800c119
 800c3cc:	0800d9d6 	.word	0x0800d9d6

0800c3d0 <__sfputc_r>:
 800c3d0:	6893      	ldr	r3, [r2, #8]
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	b410      	push	{r4}
 800c3d8:	6093      	str	r3, [r2, #8]
 800c3da:	da08      	bge.n	800c3ee <__sfputc_r+0x1e>
 800c3dc:	6994      	ldr	r4, [r2, #24]
 800c3de:	42a3      	cmp	r3, r4
 800c3e0:	db01      	blt.n	800c3e6 <__sfputc_r+0x16>
 800c3e2:	290a      	cmp	r1, #10
 800c3e4:	d103      	bne.n	800c3ee <__sfputc_r+0x1e>
 800c3e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ea:	f000 bb33 	b.w	800ca54 <__swbuf_r>
 800c3ee:	6813      	ldr	r3, [r2, #0]
 800c3f0:	1c58      	adds	r0, r3, #1
 800c3f2:	6010      	str	r0, [r2, #0]
 800c3f4:	7019      	strb	r1, [r3, #0]
 800c3f6:	4608      	mov	r0, r1
 800c3f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <__sfputs_r>:
 800c3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c400:	4606      	mov	r6, r0
 800c402:	460f      	mov	r7, r1
 800c404:	4614      	mov	r4, r2
 800c406:	18d5      	adds	r5, r2, r3
 800c408:	42ac      	cmp	r4, r5
 800c40a:	d101      	bne.n	800c410 <__sfputs_r+0x12>
 800c40c:	2000      	movs	r0, #0
 800c40e:	e007      	b.n	800c420 <__sfputs_r+0x22>
 800c410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c414:	463a      	mov	r2, r7
 800c416:	4630      	mov	r0, r6
 800c418:	f7ff ffda 	bl	800c3d0 <__sfputc_r>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d1f3      	bne.n	800c408 <__sfputs_r+0xa>
 800c420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c424 <_vfiprintf_r>:
 800c424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c428:	460d      	mov	r5, r1
 800c42a:	b09d      	sub	sp, #116	; 0x74
 800c42c:	4614      	mov	r4, r2
 800c42e:	4698      	mov	r8, r3
 800c430:	4606      	mov	r6, r0
 800c432:	b118      	cbz	r0, 800c43c <_vfiprintf_r+0x18>
 800c434:	6983      	ldr	r3, [r0, #24]
 800c436:	b90b      	cbnz	r3, 800c43c <_vfiprintf_r+0x18>
 800c438:	f7ff fd3a 	bl	800beb0 <__sinit>
 800c43c:	4b89      	ldr	r3, [pc, #548]	; (800c664 <_vfiprintf_r+0x240>)
 800c43e:	429d      	cmp	r5, r3
 800c440:	d11b      	bne.n	800c47a <_vfiprintf_r+0x56>
 800c442:	6875      	ldr	r5, [r6, #4]
 800c444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c446:	07d9      	lsls	r1, r3, #31
 800c448:	d405      	bmi.n	800c456 <_vfiprintf_r+0x32>
 800c44a:	89ab      	ldrh	r3, [r5, #12]
 800c44c:	059a      	lsls	r2, r3, #22
 800c44e:	d402      	bmi.n	800c456 <_vfiprintf_r+0x32>
 800c450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c452:	f7ff fdcb 	bl	800bfec <__retarget_lock_acquire_recursive>
 800c456:	89ab      	ldrh	r3, [r5, #12]
 800c458:	071b      	lsls	r3, r3, #28
 800c45a:	d501      	bpl.n	800c460 <_vfiprintf_r+0x3c>
 800c45c:	692b      	ldr	r3, [r5, #16]
 800c45e:	b9eb      	cbnz	r3, 800c49c <_vfiprintf_r+0x78>
 800c460:	4629      	mov	r1, r5
 800c462:	4630      	mov	r0, r6
 800c464:	f000 fb5a 	bl	800cb1c <__swsetup_r>
 800c468:	b1c0      	cbz	r0, 800c49c <_vfiprintf_r+0x78>
 800c46a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c46c:	07dc      	lsls	r4, r3, #31
 800c46e:	d50e      	bpl.n	800c48e <_vfiprintf_r+0x6a>
 800c470:	f04f 30ff 	mov.w	r0, #4294967295
 800c474:	b01d      	add	sp, #116	; 0x74
 800c476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47a:	4b7b      	ldr	r3, [pc, #492]	; (800c668 <_vfiprintf_r+0x244>)
 800c47c:	429d      	cmp	r5, r3
 800c47e:	d101      	bne.n	800c484 <_vfiprintf_r+0x60>
 800c480:	68b5      	ldr	r5, [r6, #8]
 800c482:	e7df      	b.n	800c444 <_vfiprintf_r+0x20>
 800c484:	4b79      	ldr	r3, [pc, #484]	; (800c66c <_vfiprintf_r+0x248>)
 800c486:	429d      	cmp	r5, r3
 800c488:	bf08      	it	eq
 800c48a:	68f5      	ldreq	r5, [r6, #12]
 800c48c:	e7da      	b.n	800c444 <_vfiprintf_r+0x20>
 800c48e:	89ab      	ldrh	r3, [r5, #12]
 800c490:	0598      	lsls	r0, r3, #22
 800c492:	d4ed      	bmi.n	800c470 <_vfiprintf_r+0x4c>
 800c494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c496:	f7ff fdaa 	bl	800bfee <__retarget_lock_release_recursive>
 800c49a:	e7e9      	b.n	800c470 <_vfiprintf_r+0x4c>
 800c49c:	2300      	movs	r3, #0
 800c49e:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a0:	2320      	movs	r3, #32
 800c4a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4aa:	2330      	movs	r3, #48	; 0x30
 800c4ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c670 <_vfiprintf_r+0x24c>
 800c4b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4b4:	f04f 0901 	mov.w	r9, #1
 800c4b8:	4623      	mov	r3, r4
 800c4ba:	469a      	mov	sl, r3
 800c4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c0:	b10a      	cbz	r2, 800c4c6 <_vfiprintf_r+0xa2>
 800c4c2:	2a25      	cmp	r2, #37	; 0x25
 800c4c4:	d1f9      	bne.n	800c4ba <_vfiprintf_r+0x96>
 800c4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ca:	d00b      	beq.n	800c4e4 <_vfiprintf_r+0xc0>
 800c4cc:	465b      	mov	r3, fp
 800c4ce:	4622      	mov	r2, r4
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f7ff ff93 	bl	800c3fe <__sfputs_r>
 800c4d8:	3001      	adds	r0, #1
 800c4da:	f000 80aa 	beq.w	800c632 <_vfiprintf_r+0x20e>
 800c4de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4e0:	445a      	add	r2, fp
 800c4e2:	9209      	str	r2, [sp, #36]	; 0x24
 800c4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 80a2 	beq.w	800c632 <_vfiprintf_r+0x20e>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4f8:	f10a 0a01 	add.w	sl, sl, #1
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	9307      	str	r3, [sp, #28]
 800c500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c504:	931a      	str	r3, [sp, #104]	; 0x68
 800c506:	4654      	mov	r4, sl
 800c508:	2205      	movs	r2, #5
 800c50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50e:	4858      	ldr	r0, [pc, #352]	; (800c670 <_vfiprintf_r+0x24c>)
 800c510:	f7f3 fe46 	bl	80001a0 <memchr>
 800c514:	9a04      	ldr	r2, [sp, #16]
 800c516:	b9d8      	cbnz	r0, 800c550 <_vfiprintf_r+0x12c>
 800c518:	06d1      	lsls	r1, r2, #27
 800c51a:	bf44      	itt	mi
 800c51c:	2320      	movmi	r3, #32
 800c51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c522:	0713      	lsls	r3, r2, #28
 800c524:	bf44      	itt	mi
 800c526:	232b      	movmi	r3, #43	; 0x2b
 800c528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c52c:	f89a 3000 	ldrb.w	r3, [sl]
 800c530:	2b2a      	cmp	r3, #42	; 0x2a
 800c532:	d015      	beq.n	800c560 <_vfiprintf_r+0x13c>
 800c534:	9a07      	ldr	r2, [sp, #28]
 800c536:	4654      	mov	r4, sl
 800c538:	2000      	movs	r0, #0
 800c53a:	f04f 0c0a 	mov.w	ip, #10
 800c53e:	4621      	mov	r1, r4
 800c540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c544:	3b30      	subs	r3, #48	; 0x30
 800c546:	2b09      	cmp	r3, #9
 800c548:	d94e      	bls.n	800c5e8 <_vfiprintf_r+0x1c4>
 800c54a:	b1b0      	cbz	r0, 800c57a <_vfiprintf_r+0x156>
 800c54c:	9207      	str	r2, [sp, #28]
 800c54e:	e014      	b.n	800c57a <_vfiprintf_r+0x156>
 800c550:	eba0 0308 	sub.w	r3, r0, r8
 800c554:	fa09 f303 	lsl.w	r3, r9, r3
 800c558:	4313      	orrs	r3, r2
 800c55a:	9304      	str	r3, [sp, #16]
 800c55c:	46a2      	mov	sl, r4
 800c55e:	e7d2      	b.n	800c506 <_vfiprintf_r+0xe2>
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	1d19      	adds	r1, r3, #4
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	9103      	str	r1, [sp, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	bfbb      	ittet	lt
 800c56c:	425b      	neglt	r3, r3
 800c56e:	f042 0202 	orrlt.w	r2, r2, #2
 800c572:	9307      	strge	r3, [sp, #28]
 800c574:	9307      	strlt	r3, [sp, #28]
 800c576:	bfb8      	it	lt
 800c578:	9204      	strlt	r2, [sp, #16]
 800c57a:	7823      	ldrb	r3, [r4, #0]
 800c57c:	2b2e      	cmp	r3, #46	; 0x2e
 800c57e:	d10c      	bne.n	800c59a <_vfiprintf_r+0x176>
 800c580:	7863      	ldrb	r3, [r4, #1]
 800c582:	2b2a      	cmp	r3, #42	; 0x2a
 800c584:	d135      	bne.n	800c5f2 <_vfiprintf_r+0x1ce>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	1d1a      	adds	r2, r3, #4
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	9203      	str	r2, [sp, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	bfb8      	it	lt
 800c592:	f04f 33ff 	movlt.w	r3, #4294967295
 800c596:	3402      	adds	r4, #2
 800c598:	9305      	str	r3, [sp, #20]
 800c59a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c680 <_vfiprintf_r+0x25c>
 800c59e:	7821      	ldrb	r1, [r4, #0]
 800c5a0:	2203      	movs	r2, #3
 800c5a2:	4650      	mov	r0, sl
 800c5a4:	f7f3 fdfc 	bl	80001a0 <memchr>
 800c5a8:	b140      	cbz	r0, 800c5bc <_vfiprintf_r+0x198>
 800c5aa:	2340      	movs	r3, #64	; 0x40
 800c5ac:	eba0 000a 	sub.w	r0, r0, sl
 800c5b0:	fa03 f000 	lsl.w	r0, r3, r0
 800c5b4:	9b04      	ldr	r3, [sp, #16]
 800c5b6:	4303      	orrs	r3, r0
 800c5b8:	3401      	adds	r4, #1
 800c5ba:	9304      	str	r3, [sp, #16]
 800c5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c0:	482c      	ldr	r0, [pc, #176]	; (800c674 <_vfiprintf_r+0x250>)
 800c5c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5c6:	2206      	movs	r2, #6
 800c5c8:	f7f3 fdea 	bl	80001a0 <memchr>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d03f      	beq.n	800c650 <_vfiprintf_r+0x22c>
 800c5d0:	4b29      	ldr	r3, [pc, #164]	; (800c678 <_vfiprintf_r+0x254>)
 800c5d2:	bb1b      	cbnz	r3, 800c61c <_vfiprintf_r+0x1f8>
 800c5d4:	9b03      	ldr	r3, [sp, #12]
 800c5d6:	3307      	adds	r3, #7
 800c5d8:	f023 0307 	bic.w	r3, r3, #7
 800c5dc:	3308      	adds	r3, #8
 800c5de:	9303      	str	r3, [sp, #12]
 800c5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e2:	443b      	add	r3, r7
 800c5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e6:	e767      	b.n	800c4b8 <_vfiprintf_r+0x94>
 800c5e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	2001      	movs	r0, #1
 800c5f0:	e7a5      	b.n	800c53e <_vfiprintf_r+0x11a>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	3401      	adds	r4, #1
 800c5f6:	9305      	str	r3, [sp, #20]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	f04f 0c0a 	mov.w	ip, #10
 800c5fe:	4620      	mov	r0, r4
 800c600:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c604:	3a30      	subs	r2, #48	; 0x30
 800c606:	2a09      	cmp	r2, #9
 800c608:	d903      	bls.n	800c612 <_vfiprintf_r+0x1ee>
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d0c5      	beq.n	800c59a <_vfiprintf_r+0x176>
 800c60e:	9105      	str	r1, [sp, #20]
 800c610:	e7c3      	b.n	800c59a <_vfiprintf_r+0x176>
 800c612:	fb0c 2101 	mla	r1, ip, r1, r2
 800c616:	4604      	mov	r4, r0
 800c618:	2301      	movs	r3, #1
 800c61a:	e7f0      	b.n	800c5fe <_vfiprintf_r+0x1da>
 800c61c:	ab03      	add	r3, sp, #12
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	462a      	mov	r2, r5
 800c622:	4b16      	ldr	r3, [pc, #88]	; (800c67c <_vfiprintf_r+0x258>)
 800c624:	a904      	add	r1, sp, #16
 800c626:	4630      	mov	r0, r6
 800c628:	f3af 8000 	nop.w
 800c62c:	4607      	mov	r7, r0
 800c62e:	1c78      	adds	r0, r7, #1
 800c630:	d1d6      	bne.n	800c5e0 <_vfiprintf_r+0x1bc>
 800c632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c634:	07d9      	lsls	r1, r3, #31
 800c636:	d405      	bmi.n	800c644 <_vfiprintf_r+0x220>
 800c638:	89ab      	ldrh	r3, [r5, #12]
 800c63a:	059a      	lsls	r2, r3, #22
 800c63c:	d402      	bmi.n	800c644 <_vfiprintf_r+0x220>
 800c63e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c640:	f7ff fcd5 	bl	800bfee <__retarget_lock_release_recursive>
 800c644:	89ab      	ldrh	r3, [r5, #12]
 800c646:	065b      	lsls	r3, r3, #25
 800c648:	f53f af12 	bmi.w	800c470 <_vfiprintf_r+0x4c>
 800c64c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c64e:	e711      	b.n	800c474 <_vfiprintf_r+0x50>
 800c650:	ab03      	add	r3, sp, #12
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	462a      	mov	r2, r5
 800c656:	4b09      	ldr	r3, [pc, #36]	; (800c67c <_vfiprintf_r+0x258>)
 800c658:	a904      	add	r1, sp, #16
 800c65a:	4630      	mov	r0, r6
 800c65c:	f000 f880 	bl	800c760 <_printf_i>
 800c660:	e7e4      	b.n	800c62c <_vfiprintf_r+0x208>
 800c662:	bf00      	nop
 800c664:	0800d990 	.word	0x0800d990
 800c668:	0800d9b0 	.word	0x0800d9b0
 800c66c:	0800d970 	.word	0x0800d970
 800c670:	0800d9d0 	.word	0x0800d9d0
 800c674:	0800d9da 	.word	0x0800d9da
 800c678:	00000000 	.word	0x00000000
 800c67c:	0800c3ff 	.word	0x0800c3ff
 800c680:	0800d9d6 	.word	0x0800d9d6

0800c684 <_printf_common>:
 800c684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c688:	4616      	mov	r6, r2
 800c68a:	4699      	mov	r9, r3
 800c68c:	688a      	ldr	r2, [r1, #8]
 800c68e:	690b      	ldr	r3, [r1, #16]
 800c690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c694:	4293      	cmp	r3, r2
 800c696:	bfb8      	it	lt
 800c698:	4613      	movlt	r3, r2
 800c69a:	6033      	str	r3, [r6, #0]
 800c69c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c6a0:	4607      	mov	r7, r0
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	b10a      	cbz	r2, 800c6aa <_printf_common+0x26>
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	6033      	str	r3, [r6, #0]
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	0699      	lsls	r1, r3, #26
 800c6ae:	bf42      	ittt	mi
 800c6b0:	6833      	ldrmi	r3, [r6, #0]
 800c6b2:	3302      	addmi	r3, #2
 800c6b4:	6033      	strmi	r3, [r6, #0]
 800c6b6:	6825      	ldr	r5, [r4, #0]
 800c6b8:	f015 0506 	ands.w	r5, r5, #6
 800c6bc:	d106      	bne.n	800c6cc <_printf_common+0x48>
 800c6be:	f104 0a19 	add.w	sl, r4, #25
 800c6c2:	68e3      	ldr	r3, [r4, #12]
 800c6c4:	6832      	ldr	r2, [r6, #0]
 800c6c6:	1a9b      	subs	r3, r3, r2
 800c6c8:	42ab      	cmp	r3, r5
 800c6ca:	dc26      	bgt.n	800c71a <_printf_common+0x96>
 800c6cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c6d0:	1e13      	subs	r3, r2, #0
 800c6d2:	6822      	ldr	r2, [r4, #0]
 800c6d4:	bf18      	it	ne
 800c6d6:	2301      	movne	r3, #1
 800c6d8:	0692      	lsls	r2, r2, #26
 800c6da:	d42b      	bmi.n	800c734 <_printf_common+0xb0>
 800c6dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6e0:	4649      	mov	r1, r9
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	47c0      	blx	r8
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	d01e      	beq.n	800c728 <_printf_common+0xa4>
 800c6ea:	6823      	ldr	r3, [r4, #0]
 800c6ec:	68e5      	ldr	r5, [r4, #12]
 800c6ee:	6832      	ldr	r2, [r6, #0]
 800c6f0:	f003 0306 	and.w	r3, r3, #6
 800c6f4:	2b04      	cmp	r3, #4
 800c6f6:	bf08      	it	eq
 800c6f8:	1aad      	subeq	r5, r5, r2
 800c6fa:	68a3      	ldr	r3, [r4, #8]
 800c6fc:	6922      	ldr	r2, [r4, #16]
 800c6fe:	bf0c      	ite	eq
 800c700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c704:	2500      	movne	r5, #0
 800c706:	4293      	cmp	r3, r2
 800c708:	bfc4      	itt	gt
 800c70a:	1a9b      	subgt	r3, r3, r2
 800c70c:	18ed      	addgt	r5, r5, r3
 800c70e:	2600      	movs	r6, #0
 800c710:	341a      	adds	r4, #26
 800c712:	42b5      	cmp	r5, r6
 800c714:	d11a      	bne.n	800c74c <_printf_common+0xc8>
 800c716:	2000      	movs	r0, #0
 800c718:	e008      	b.n	800c72c <_printf_common+0xa8>
 800c71a:	2301      	movs	r3, #1
 800c71c:	4652      	mov	r2, sl
 800c71e:	4649      	mov	r1, r9
 800c720:	4638      	mov	r0, r7
 800c722:	47c0      	blx	r8
 800c724:	3001      	adds	r0, #1
 800c726:	d103      	bne.n	800c730 <_printf_common+0xac>
 800c728:	f04f 30ff 	mov.w	r0, #4294967295
 800c72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c730:	3501      	adds	r5, #1
 800c732:	e7c6      	b.n	800c6c2 <_printf_common+0x3e>
 800c734:	18e1      	adds	r1, r4, r3
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	2030      	movs	r0, #48	; 0x30
 800c73a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c73e:	4422      	add	r2, r4
 800c740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c748:	3302      	adds	r3, #2
 800c74a:	e7c7      	b.n	800c6dc <_printf_common+0x58>
 800c74c:	2301      	movs	r3, #1
 800c74e:	4622      	mov	r2, r4
 800c750:	4649      	mov	r1, r9
 800c752:	4638      	mov	r0, r7
 800c754:	47c0      	blx	r8
 800c756:	3001      	adds	r0, #1
 800c758:	d0e6      	beq.n	800c728 <_printf_common+0xa4>
 800c75a:	3601      	adds	r6, #1
 800c75c:	e7d9      	b.n	800c712 <_printf_common+0x8e>
	...

0800c760 <_printf_i>:
 800c760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c764:	7e0f      	ldrb	r7, [r1, #24]
 800c766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c768:	2f78      	cmp	r7, #120	; 0x78
 800c76a:	4691      	mov	r9, r2
 800c76c:	4680      	mov	r8, r0
 800c76e:	460c      	mov	r4, r1
 800c770:	469a      	mov	sl, r3
 800c772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c776:	d807      	bhi.n	800c788 <_printf_i+0x28>
 800c778:	2f62      	cmp	r7, #98	; 0x62
 800c77a:	d80a      	bhi.n	800c792 <_printf_i+0x32>
 800c77c:	2f00      	cmp	r7, #0
 800c77e:	f000 80d8 	beq.w	800c932 <_printf_i+0x1d2>
 800c782:	2f58      	cmp	r7, #88	; 0x58
 800c784:	f000 80a3 	beq.w	800c8ce <_printf_i+0x16e>
 800c788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c78c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c790:	e03a      	b.n	800c808 <_printf_i+0xa8>
 800c792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c796:	2b15      	cmp	r3, #21
 800c798:	d8f6      	bhi.n	800c788 <_printf_i+0x28>
 800c79a:	a101      	add	r1, pc, #4	; (adr r1, 800c7a0 <_printf_i+0x40>)
 800c79c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7a0:	0800c7f9 	.word	0x0800c7f9
 800c7a4:	0800c80d 	.word	0x0800c80d
 800c7a8:	0800c789 	.word	0x0800c789
 800c7ac:	0800c789 	.word	0x0800c789
 800c7b0:	0800c789 	.word	0x0800c789
 800c7b4:	0800c789 	.word	0x0800c789
 800c7b8:	0800c80d 	.word	0x0800c80d
 800c7bc:	0800c789 	.word	0x0800c789
 800c7c0:	0800c789 	.word	0x0800c789
 800c7c4:	0800c789 	.word	0x0800c789
 800c7c8:	0800c789 	.word	0x0800c789
 800c7cc:	0800c919 	.word	0x0800c919
 800c7d0:	0800c83d 	.word	0x0800c83d
 800c7d4:	0800c8fb 	.word	0x0800c8fb
 800c7d8:	0800c789 	.word	0x0800c789
 800c7dc:	0800c789 	.word	0x0800c789
 800c7e0:	0800c93b 	.word	0x0800c93b
 800c7e4:	0800c789 	.word	0x0800c789
 800c7e8:	0800c83d 	.word	0x0800c83d
 800c7ec:	0800c789 	.word	0x0800c789
 800c7f0:	0800c789 	.word	0x0800c789
 800c7f4:	0800c903 	.word	0x0800c903
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	1d1a      	adds	r2, r3, #4
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	602a      	str	r2, [r5, #0]
 800c800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c808:	2301      	movs	r3, #1
 800c80a:	e0a3      	b.n	800c954 <_printf_i+0x1f4>
 800c80c:	6820      	ldr	r0, [r4, #0]
 800c80e:	6829      	ldr	r1, [r5, #0]
 800c810:	0606      	lsls	r6, r0, #24
 800c812:	f101 0304 	add.w	r3, r1, #4
 800c816:	d50a      	bpl.n	800c82e <_printf_i+0xce>
 800c818:	680e      	ldr	r6, [r1, #0]
 800c81a:	602b      	str	r3, [r5, #0]
 800c81c:	2e00      	cmp	r6, #0
 800c81e:	da03      	bge.n	800c828 <_printf_i+0xc8>
 800c820:	232d      	movs	r3, #45	; 0x2d
 800c822:	4276      	negs	r6, r6
 800c824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c828:	485e      	ldr	r0, [pc, #376]	; (800c9a4 <_printf_i+0x244>)
 800c82a:	230a      	movs	r3, #10
 800c82c:	e019      	b.n	800c862 <_printf_i+0x102>
 800c82e:	680e      	ldr	r6, [r1, #0]
 800c830:	602b      	str	r3, [r5, #0]
 800c832:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c836:	bf18      	it	ne
 800c838:	b236      	sxthne	r6, r6
 800c83a:	e7ef      	b.n	800c81c <_printf_i+0xbc>
 800c83c:	682b      	ldr	r3, [r5, #0]
 800c83e:	6820      	ldr	r0, [r4, #0]
 800c840:	1d19      	adds	r1, r3, #4
 800c842:	6029      	str	r1, [r5, #0]
 800c844:	0601      	lsls	r1, r0, #24
 800c846:	d501      	bpl.n	800c84c <_printf_i+0xec>
 800c848:	681e      	ldr	r6, [r3, #0]
 800c84a:	e002      	b.n	800c852 <_printf_i+0xf2>
 800c84c:	0646      	lsls	r6, r0, #25
 800c84e:	d5fb      	bpl.n	800c848 <_printf_i+0xe8>
 800c850:	881e      	ldrh	r6, [r3, #0]
 800c852:	4854      	ldr	r0, [pc, #336]	; (800c9a4 <_printf_i+0x244>)
 800c854:	2f6f      	cmp	r7, #111	; 0x6f
 800c856:	bf0c      	ite	eq
 800c858:	2308      	moveq	r3, #8
 800c85a:	230a      	movne	r3, #10
 800c85c:	2100      	movs	r1, #0
 800c85e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c862:	6865      	ldr	r5, [r4, #4]
 800c864:	60a5      	str	r5, [r4, #8]
 800c866:	2d00      	cmp	r5, #0
 800c868:	bfa2      	ittt	ge
 800c86a:	6821      	ldrge	r1, [r4, #0]
 800c86c:	f021 0104 	bicge.w	r1, r1, #4
 800c870:	6021      	strge	r1, [r4, #0]
 800c872:	b90e      	cbnz	r6, 800c878 <_printf_i+0x118>
 800c874:	2d00      	cmp	r5, #0
 800c876:	d04d      	beq.n	800c914 <_printf_i+0x1b4>
 800c878:	4615      	mov	r5, r2
 800c87a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c87e:	fb03 6711 	mls	r7, r3, r1, r6
 800c882:	5dc7      	ldrb	r7, [r0, r7]
 800c884:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c888:	4637      	mov	r7, r6
 800c88a:	42bb      	cmp	r3, r7
 800c88c:	460e      	mov	r6, r1
 800c88e:	d9f4      	bls.n	800c87a <_printf_i+0x11a>
 800c890:	2b08      	cmp	r3, #8
 800c892:	d10b      	bne.n	800c8ac <_printf_i+0x14c>
 800c894:	6823      	ldr	r3, [r4, #0]
 800c896:	07de      	lsls	r6, r3, #31
 800c898:	d508      	bpl.n	800c8ac <_printf_i+0x14c>
 800c89a:	6923      	ldr	r3, [r4, #16]
 800c89c:	6861      	ldr	r1, [r4, #4]
 800c89e:	4299      	cmp	r1, r3
 800c8a0:	bfde      	ittt	le
 800c8a2:	2330      	movle	r3, #48	; 0x30
 800c8a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c8a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c8ac:	1b52      	subs	r2, r2, r5
 800c8ae:	6122      	str	r2, [r4, #16]
 800c8b0:	f8cd a000 	str.w	sl, [sp]
 800c8b4:	464b      	mov	r3, r9
 800c8b6:	aa03      	add	r2, sp, #12
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	4640      	mov	r0, r8
 800c8bc:	f7ff fee2 	bl	800c684 <_printf_common>
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	d14c      	bne.n	800c95e <_printf_i+0x1fe>
 800c8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c8:	b004      	add	sp, #16
 800c8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ce:	4835      	ldr	r0, [pc, #212]	; (800c9a4 <_printf_i+0x244>)
 800c8d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c8d4:	6829      	ldr	r1, [r5, #0]
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c8dc:	6029      	str	r1, [r5, #0]
 800c8de:	061d      	lsls	r5, r3, #24
 800c8e0:	d514      	bpl.n	800c90c <_printf_i+0x1ac>
 800c8e2:	07df      	lsls	r7, r3, #31
 800c8e4:	bf44      	itt	mi
 800c8e6:	f043 0320 	orrmi.w	r3, r3, #32
 800c8ea:	6023      	strmi	r3, [r4, #0]
 800c8ec:	b91e      	cbnz	r6, 800c8f6 <_printf_i+0x196>
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	f023 0320 	bic.w	r3, r3, #32
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	2310      	movs	r3, #16
 800c8f8:	e7b0      	b.n	800c85c <_printf_i+0xfc>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	f043 0320 	orr.w	r3, r3, #32
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	2378      	movs	r3, #120	; 0x78
 800c904:	4828      	ldr	r0, [pc, #160]	; (800c9a8 <_printf_i+0x248>)
 800c906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c90a:	e7e3      	b.n	800c8d4 <_printf_i+0x174>
 800c90c:	0659      	lsls	r1, r3, #25
 800c90e:	bf48      	it	mi
 800c910:	b2b6      	uxthmi	r6, r6
 800c912:	e7e6      	b.n	800c8e2 <_printf_i+0x182>
 800c914:	4615      	mov	r5, r2
 800c916:	e7bb      	b.n	800c890 <_printf_i+0x130>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	6826      	ldr	r6, [r4, #0]
 800c91c:	6961      	ldr	r1, [r4, #20]
 800c91e:	1d18      	adds	r0, r3, #4
 800c920:	6028      	str	r0, [r5, #0]
 800c922:	0635      	lsls	r5, r6, #24
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	d501      	bpl.n	800c92c <_printf_i+0x1cc>
 800c928:	6019      	str	r1, [r3, #0]
 800c92a:	e002      	b.n	800c932 <_printf_i+0x1d2>
 800c92c:	0670      	lsls	r0, r6, #25
 800c92e:	d5fb      	bpl.n	800c928 <_printf_i+0x1c8>
 800c930:	8019      	strh	r1, [r3, #0]
 800c932:	2300      	movs	r3, #0
 800c934:	6123      	str	r3, [r4, #16]
 800c936:	4615      	mov	r5, r2
 800c938:	e7ba      	b.n	800c8b0 <_printf_i+0x150>
 800c93a:	682b      	ldr	r3, [r5, #0]
 800c93c:	1d1a      	adds	r2, r3, #4
 800c93e:	602a      	str	r2, [r5, #0]
 800c940:	681d      	ldr	r5, [r3, #0]
 800c942:	6862      	ldr	r2, [r4, #4]
 800c944:	2100      	movs	r1, #0
 800c946:	4628      	mov	r0, r5
 800c948:	f7f3 fc2a 	bl	80001a0 <memchr>
 800c94c:	b108      	cbz	r0, 800c952 <_printf_i+0x1f2>
 800c94e:	1b40      	subs	r0, r0, r5
 800c950:	6060      	str	r0, [r4, #4]
 800c952:	6863      	ldr	r3, [r4, #4]
 800c954:	6123      	str	r3, [r4, #16]
 800c956:	2300      	movs	r3, #0
 800c958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c95c:	e7a8      	b.n	800c8b0 <_printf_i+0x150>
 800c95e:	6923      	ldr	r3, [r4, #16]
 800c960:	462a      	mov	r2, r5
 800c962:	4649      	mov	r1, r9
 800c964:	4640      	mov	r0, r8
 800c966:	47d0      	blx	sl
 800c968:	3001      	adds	r0, #1
 800c96a:	d0ab      	beq.n	800c8c4 <_printf_i+0x164>
 800c96c:	6823      	ldr	r3, [r4, #0]
 800c96e:	079b      	lsls	r3, r3, #30
 800c970:	d413      	bmi.n	800c99a <_printf_i+0x23a>
 800c972:	68e0      	ldr	r0, [r4, #12]
 800c974:	9b03      	ldr	r3, [sp, #12]
 800c976:	4298      	cmp	r0, r3
 800c978:	bfb8      	it	lt
 800c97a:	4618      	movlt	r0, r3
 800c97c:	e7a4      	b.n	800c8c8 <_printf_i+0x168>
 800c97e:	2301      	movs	r3, #1
 800c980:	4632      	mov	r2, r6
 800c982:	4649      	mov	r1, r9
 800c984:	4640      	mov	r0, r8
 800c986:	47d0      	blx	sl
 800c988:	3001      	adds	r0, #1
 800c98a:	d09b      	beq.n	800c8c4 <_printf_i+0x164>
 800c98c:	3501      	adds	r5, #1
 800c98e:	68e3      	ldr	r3, [r4, #12]
 800c990:	9903      	ldr	r1, [sp, #12]
 800c992:	1a5b      	subs	r3, r3, r1
 800c994:	42ab      	cmp	r3, r5
 800c996:	dcf2      	bgt.n	800c97e <_printf_i+0x21e>
 800c998:	e7eb      	b.n	800c972 <_printf_i+0x212>
 800c99a:	2500      	movs	r5, #0
 800c99c:	f104 0619 	add.w	r6, r4, #25
 800c9a0:	e7f5      	b.n	800c98e <_printf_i+0x22e>
 800c9a2:	bf00      	nop
 800c9a4:	0800d9e1 	.word	0x0800d9e1
 800c9a8:	0800d9f2 	.word	0x0800d9f2

0800c9ac <_sbrk_r>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	4d06      	ldr	r5, [pc, #24]	; (800c9c8 <_sbrk_r+0x1c>)
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	4608      	mov	r0, r1
 800c9b6:	602b      	str	r3, [r5, #0]
 800c9b8:	f7f3 fe4c 	bl	8000654 <_sbrk>
 800c9bc:	1c43      	adds	r3, r0, #1
 800c9be:	d102      	bne.n	800c9c6 <_sbrk_r+0x1a>
 800c9c0:	682b      	ldr	r3, [r5, #0]
 800c9c2:	b103      	cbz	r3, 800c9c6 <_sbrk_r+0x1a>
 800c9c4:	6023      	str	r3, [r4, #0]
 800c9c6:	bd38      	pop	{r3, r4, r5, pc}
 800c9c8:	20001800 	.word	0x20001800

0800c9cc <__sread>:
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d4:	f000 fafc 	bl	800cfd0 <_read_r>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	bfab      	itete	ge
 800c9dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c9de:	89a3      	ldrhlt	r3, [r4, #12]
 800c9e0:	181b      	addge	r3, r3, r0
 800c9e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c9e6:	bfac      	ite	ge
 800c9e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c9ea:	81a3      	strhlt	r3, [r4, #12]
 800c9ec:	bd10      	pop	{r4, pc}

0800c9ee <__swrite>:
 800c9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f2:	461f      	mov	r7, r3
 800c9f4:	898b      	ldrh	r3, [r1, #12]
 800c9f6:	05db      	lsls	r3, r3, #23
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	4616      	mov	r6, r2
 800c9fe:	d505      	bpl.n	800ca0c <__swrite+0x1e>
 800ca00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca04:	2302      	movs	r3, #2
 800ca06:	2200      	movs	r2, #0
 800ca08:	f000 f9c8 	bl	800cd9c <_lseek_r>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca16:	81a3      	strh	r3, [r4, #12]
 800ca18:	4632      	mov	r2, r6
 800ca1a:	463b      	mov	r3, r7
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca22:	f000 b869 	b.w	800caf8 <_write_r>

0800ca26 <__sseek>:
 800ca26:	b510      	push	{r4, lr}
 800ca28:	460c      	mov	r4, r1
 800ca2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca2e:	f000 f9b5 	bl	800cd9c <_lseek_r>
 800ca32:	1c43      	adds	r3, r0, #1
 800ca34:	89a3      	ldrh	r3, [r4, #12]
 800ca36:	bf15      	itete	ne
 800ca38:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca42:	81a3      	strheq	r3, [r4, #12]
 800ca44:	bf18      	it	ne
 800ca46:	81a3      	strhne	r3, [r4, #12]
 800ca48:	bd10      	pop	{r4, pc}

0800ca4a <__sclose>:
 800ca4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca4e:	f000 b8d3 	b.w	800cbf8 <_close_r>
	...

0800ca54 <__swbuf_r>:
 800ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca56:	460e      	mov	r6, r1
 800ca58:	4614      	mov	r4, r2
 800ca5a:	4605      	mov	r5, r0
 800ca5c:	b118      	cbz	r0, 800ca66 <__swbuf_r+0x12>
 800ca5e:	6983      	ldr	r3, [r0, #24]
 800ca60:	b90b      	cbnz	r3, 800ca66 <__swbuf_r+0x12>
 800ca62:	f7ff fa25 	bl	800beb0 <__sinit>
 800ca66:	4b21      	ldr	r3, [pc, #132]	; (800caec <__swbuf_r+0x98>)
 800ca68:	429c      	cmp	r4, r3
 800ca6a:	d12b      	bne.n	800cac4 <__swbuf_r+0x70>
 800ca6c:	686c      	ldr	r4, [r5, #4]
 800ca6e:	69a3      	ldr	r3, [r4, #24]
 800ca70:	60a3      	str	r3, [r4, #8]
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	071a      	lsls	r2, r3, #28
 800ca76:	d52f      	bpl.n	800cad8 <__swbuf_r+0x84>
 800ca78:	6923      	ldr	r3, [r4, #16]
 800ca7a:	b36b      	cbz	r3, 800cad8 <__swbuf_r+0x84>
 800ca7c:	6923      	ldr	r3, [r4, #16]
 800ca7e:	6820      	ldr	r0, [r4, #0]
 800ca80:	1ac0      	subs	r0, r0, r3
 800ca82:	6963      	ldr	r3, [r4, #20]
 800ca84:	b2f6      	uxtb	r6, r6
 800ca86:	4283      	cmp	r3, r0
 800ca88:	4637      	mov	r7, r6
 800ca8a:	dc04      	bgt.n	800ca96 <__swbuf_r+0x42>
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	4628      	mov	r0, r5
 800ca90:	f000 f948 	bl	800cd24 <_fflush_r>
 800ca94:	bb30      	cbnz	r0, 800cae4 <__swbuf_r+0x90>
 800ca96:	68a3      	ldr	r3, [r4, #8]
 800ca98:	3b01      	subs	r3, #1
 800ca9a:	60a3      	str	r3, [r4, #8]
 800ca9c:	6823      	ldr	r3, [r4, #0]
 800ca9e:	1c5a      	adds	r2, r3, #1
 800caa0:	6022      	str	r2, [r4, #0]
 800caa2:	701e      	strb	r6, [r3, #0]
 800caa4:	6963      	ldr	r3, [r4, #20]
 800caa6:	3001      	adds	r0, #1
 800caa8:	4283      	cmp	r3, r0
 800caaa:	d004      	beq.n	800cab6 <__swbuf_r+0x62>
 800caac:	89a3      	ldrh	r3, [r4, #12]
 800caae:	07db      	lsls	r3, r3, #31
 800cab0:	d506      	bpl.n	800cac0 <__swbuf_r+0x6c>
 800cab2:	2e0a      	cmp	r6, #10
 800cab4:	d104      	bne.n	800cac0 <__swbuf_r+0x6c>
 800cab6:	4621      	mov	r1, r4
 800cab8:	4628      	mov	r0, r5
 800caba:	f000 f933 	bl	800cd24 <_fflush_r>
 800cabe:	b988      	cbnz	r0, 800cae4 <__swbuf_r+0x90>
 800cac0:	4638      	mov	r0, r7
 800cac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cac4:	4b0a      	ldr	r3, [pc, #40]	; (800caf0 <__swbuf_r+0x9c>)
 800cac6:	429c      	cmp	r4, r3
 800cac8:	d101      	bne.n	800cace <__swbuf_r+0x7a>
 800caca:	68ac      	ldr	r4, [r5, #8]
 800cacc:	e7cf      	b.n	800ca6e <__swbuf_r+0x1a>
 800cace:	4b09      	ldr	r3, [pc, #36]	; (800caf4 <__swbuf_r+0xa0>)
 800cad0:	429c      	cmp	r4, r3
 800cad2:	bf08      	it	eq
 800cad4:	68ec      	ldreq	r4, [r5, #12]
 800cad6:	e7ca      	b.n	800ca6e <__swbuf_r+0x1a>
 800cad8:	4621      	mov	r1, r4
 800cada:	4628      	mov	r0, r5
 800cadc:	f000 f81e 	bl	800cb1c <__swsetup_r>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d0cb      	beq.n	800ca7c <__swbuf_r+0x28>
 800cae4:	f04f 37ff 	mov.w	r7, #4294967295
 800cae8:	e7ea      	b.n	800cac0 <__swbuf_r+0x6c>
 800caea:	bf00      	nop
 800caec:	0800d990 	.word	0x0800d990
 800caf0:	0800d9b0 	.word	0x0800d9b0
 800caf4:	0800d970 	.word	0x0800d970

0800caf8 <_write_r>:
 800caf8:	b538      	push	{r3, r4, r5, lr}
 800cafa:	4d07      	ldr	r5, [pc, #28]	; (800cb18 <_write_r+0x20>)
 800cafc:	4604      	mov	r4, r0
 800cafe:	4608      	mov	r0, r1
 800cb00:	4611      	mov	r1, r2
 800cb02:	2200      	movs	r2, #0
 800cb04:	602a      	str	r2, [r5, #0]
 800cb06:	461a      	mov	r2, r3
 800cb08:	f7fe f8f4 	bl	800acf4 <_write>
 800cb0c:	1c43      	adds	r3, r0, #1
 800cb0e:	d102      	bne.n	800cb16 <_write_r+0x1e>
 800cb10:	682b      	ldr	r3, [r5, #0]
 800cb12:	b103      	cbz	r3, 800cb16 <_write_r+0x1e>
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	bd38      	pop	{r3, r4, r5, pc}
 800cb18:	20001800 	.word	0x20001800

0800cb1c <__swsetup_r>:
 800cb1c:	4b32      	ldr	r3, [pc, #200]	; (800cbe8 <__swsetup_r+0xcc>)
 800cb1e:	b570      	push	{r4, r5, r6, lr}
 800cb20:	681d      	ldr	r5, [r3, #0]
 800cb22:	4606      	mov	r6, r0
 800cb24:	460c      	mov	r4, r1
 800cb26:	b125      	cbz	r5, 800cb32 <__swsetup_r+0x16>
 800cb28:	69ab      	ldr	r3, [r5, #24]
 800cb2a:	b913      	cbnz	r3, 800cb32 <__swsetup_r+0x16>
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f7ff f9bf 	bl	800beb0 <__sinit>
 800cb32:	4b2e      	ldr	r3, [pc, #184]	; (800cbec <__swsetup_r+0xd0>)
 800cb34:	429c      	cmp	r4, r3
 800cb36:	d10f      	bne.n	800cb58 <__swsetup_r+0x3c>
 800cb38:	686c      	ldr	r4, [r5, #4]
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb40:	0719      	lsls	r1, r3, #28
 800cb42:	d42c      	bmi.n	800cb9e <__swsetup_r+0x82>
 800cb44:	06dd      	lsls	r5, r3, #27
 800cb46:	d411      	bmi.n	800cb6c <__swsetup_r+0x50>
 800cb48:	2309      	movs	r3, #9
 800cb4a:	6033      	str	r3, [r6, #0]
 800cb4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb50:	81a3      	strh	r3, [r4, #12]
 800cb52:	f04f 30ff 	mov.w	r0, #4294967295
 800cb56:	e03e      	b.n	800cbd6 <__swsetup_r+0xba>
 800cb58:	4b25      	ldr	r3, [pc, #148]	; (800cbf0 <__swsetup_r+0xd4>)
 800cb5a:	429c      	cmp	r4, r3
 800cb5c:	d101      	bne.n	800cb62 <__swsetup_r+0x46>
 800cb5e:	68ac      	ldr	r4, [r5, #8]
 800cb60:	e7eb      	b.n	800cb3a <__swsetup_r+0x1e>
 800cb62:	4b24      	ldr	r3, [pc, #144]	; (800cbf4 <__swsetup_r+0xd8>)
 800cb64:	429c      	cmp	r4, r3
 800cb66:	bf08      	it	eq
 800cb68:	68ec      	ldreq	r4, [r5, #12]
 800cb6a:	e7e6      	b.n	800cb3a <__swsetup_r+0x1e>
 800cb6c:	0758      	lsls	r0, r3, #29
 800cb6e:	d512      	bpl.n	800cb96 <__swsetup_r+0x7a>
 800cb70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb72:	b141      	cbz	r1, 800cb86 <__swsetup_r+0x6a>
 800cb74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb78:	4299      	cmp	r1, r3
 800cb7a:	d002      	beq.n	800cb82 <__swsetup_r+0x66>
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	f000 f9ab 	bl	800ced8 <_free_r>
 800cb82:	2300      	movs	r3, #0
 800cb84:	6363      	str	r3, [r4, #52]	; 0x34
 800cb86:	89a3      	ldrh	r3, [r4, #12]
 800cb88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb8c:	81a3      	strh	r3, [r4, #12]
 800cb8e:	2300      	movs	r3, #0
 800cb90:	6063      	str	r3, [r4, #4]
 800cb92:	6923      	ldr	r3, [r4, #16]
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	f043 0308 	orr.w	r3, r3, #8
 800cb9c:	81a3      	strh	r3, [r4, #12]
 800cb9e:	6923      	ldr	r3, [r4, #16]
 800cba0:	b94b      	cbnz	r3, 800cbb6 <__swsetup_r+0x9a>
 800cba2:	89a3      	ldrh	r3, [r4, #12]
 800cba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbac:	d003      	beq.n	800cbb6 <__swsetup_r+0x9a>
 800cbae:	4621      	mov	r1, r4
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	f000 f92b 	bl	800ce0c <__smakebuf_r>
 800cbb6:	89a0      	ldrh	r0, [r4, #12]
 800cbb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbbc:	f010 0301 	ands.w	r3, r0, #1
 800cbc0:	d00a      	beq.n	800cbd8 <__swsetup_r+0xbc>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	60a3      	str	r3, [r4, #8]
 800cbc6:	6963      	ldr	r3, [r4, #20]
 800cbc8:	425b      	negs	r3, r3
 800cbca:	61a3      	str	r3, [r4, #24]
 800cbcc:	6923      	ldr	r3, [r4, #16]
 800cbce:	b943      	cbnz	r3, 800cbe2 <__swsetup_r+0xc6>
 800cbd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbd4:	d1ba      	bne.n	800cb4c <__swsetup_r+0x30>
 800cbd6:	bd70      	pop	{r4, r5, r6, pc}
 800cbd8:	0781      	lsls	r1, r0, #30
 800cbda:	bf58      	it	pl
 800cbdc:	6963      	ldrpl	r3, [r4, #20]
 800cbde:	60a3      	str	r3, [r4, #8]
 800cbe0:	e7f4      	b.n	800cbcc <__swsetup_r+0xb0>
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	e7f7      	b.n	800cbd6 <__swsetup_r+0xba>
 800cbe6:	bf00      	nop
 800cbe8:	2000002c 	.word	0x2000002c
 800cbec:	0800d990 	.word	0x0800d990
 800cbf0:	0800d9b0 	.word	0x0800d9b0
 800cbf4:	0800d970 	.word	0x0800d970

0800cbf8 <_close_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4d06      	ldr	r5, [pc, #24]	; (800cc14 <_close_r+0x1c>)
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	4604      	mov	r4, r0
 800cc00:	4608      	mov	r0, r1
 800cc02:	602b      	str	r3, [r5, #0]
 800cc04:	f7f3 fcf2 	bl	80005ec <_close>
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	d102      	bne.n	800cc12 <_close_r+0x1a>
 800cc0c:	682b      	ldr	r3, [r5, #0]
 800cc0e:	b103      	cbz	r3, 800cc12 <_close_r+0x1a>
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	bd38      	pop	{r3, r4, r5, pc}
 800cc14:	20001800 	.word	0x20001800

0800cc18 <__sflush_r>:
 800cc18:	898a      	ldrh	r2, [r1, #12]
 800cc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc1e:	4605      	mov	r5, r0
 800cc20:	0710      	lsls	r0, r2, #28
 800cc22:	460c      	mov	r4, r1
 800cc24:	d458      	bmi.n	800ccd8 <__sflush_r+0xc0>
 800cc26:	684b      	ldr	r3, [r1, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	dc05      	bgt.n	800cc38 <__sflush_r+0x20>
 800cc2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	dc02      	bgt.n	800cc38 <__sflush_r+0x20>
 800cc32:	2000      	movs	r0, #0
 800cc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc3a:	2e00      	cmp	r6, #0
 800cc3c:	d0f9      	beq.n	800cc32 <__sflush_r+0x1a>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc44:	682f      	ldr	r7, [r5, #0]
 800cc46:	602b      	str	r3, [r5, #0]
 800cc48:	d032      	beq.n	800ccb0 <__sflush_r+0x98>
 800cc4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc4c:	89a3      	ldrh	r3, [r4, #12]
 800cc4e:	075a      	lsls	r2, r3, #29
 800cc50:	d505      	bpl.n	800cc5e <__sflush_r+0x46>
 800cc52:	6863      	ldr	r3, [r4, #4]
 800cc54:	1ac0      	subs	r0, r0, r3
 800cc56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc58:	b10b      	cbz	r3, 800cc5e <__sflush_r+0x46>
 800cc5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc5c:	1ac0      	subs	r0, r0, r3
 800cc5e:	2300      	movs	r3, #0
 800cc60:	4602      	mov	r2, r0
 800cc62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc64:	6a21      	ldr	r1, [r4, #32]
 800cc66:	4628      	mov	r0, r5
 800cc68:	47b0      	blx	r6
 800cc6a:	1c43      	adds	r3, r0, #1
 800cc6c:	89a3      	ldrh	r3, [r4, #12]
 800cc6e:	d106      	bne.n	800cc7e <__sflush_r+0x66>
 800cc70:	6829      	ldr	r1, [r5, #0]
 800cc72:	291d      	cmp	r1, #29
 800cc74:	d82c      	bhi.n	800ccd0 <__sflush_r+0xb8>
 800cc76:	4a2a      	ldr	r2, [pc, #168]	; (800cd20 <__sflush_r+0x108>)
 800cc78:	40ca      	lsrs	r2, r1
 800cc7a:	07d6      	lsls	r6, r2, #31
 800cc7c:	d528      	bpl.n	800ccd0 <__sflush_r+0xb8>
 800cc7e:	2200      	movs	r2, #0
 800cc80:	6062      	str	r2, [r4, #4]
 800cc82:	04d9      	lsls	r1, r3, #19
 800cc84:	6922      	ldr	r2, [r4, #16]
 800cc86:	6022      	str	r2, [r4, #0]
 800cc88:	d504      	bpl.n	800cc94 <__sflush_r+0x7c>
 800cc8a:	1c42      	adds	r2, r0, #1
 800cc8c:	d101      	bne.n	800cc92 <__sflush_r+0x7a>
 800cc8e:	682b      	ldr	r3, [r5, #0]
 800cc90:	b903      	cbnz	r3, 800cc94 <__sflush_r+0x7c>
 800cc92:	6560      	str	r0, [r4, #84]	; 0x54
 800cc94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc96:	602f      	str	r7, [r5, #0]
 800cc98:	2900      	cmp	r1, #0
 800cc9a:	d0ca      	beq.n	800cc32 <__sflush_r+0x1a>
 800cc9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cca0:	4299      	cmp	r1, r3
 800cca2:	d002      	beq.n	800ccaa <__sflush_r+0x92>
 800cca4:	4628      	mov	r0, r5
 800cca6:	f000 f917 	bl	800ced8 <_free_r>
 800ccaa:	2000      	movs	r0, #0
 800ccac:	6360      	str	r0, [r4, #52]	; 0x34
 800ccae:	e7c1      	b.n	800cc34 <__sflush_r+0x1c>
 800ccb0:	6a21      	ldr	r1, [r4, #32]
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	47b0      	blx	r6
 800ccb8:	1c41      	adds	r1, r0, #1
 800ccba:	d1c7      	bne.n	800cc4c <__sflush_r+0x34>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d0c4      	beq.n	800cc4c <__sflush_r+0x34>
 800ccc2:	2b1d      	cmp	r3, #29
 800ccc4:	d001      	beq.n	800ccca <__sflush_r+0xb2>
 800ccc6:	2b16      	cmp	r3, #22
 800ccc8:	d101      	bne.n	800ccce <__sflush_r+0xb6>
 800ccca:	602f      	str	r7, [r5, #0]
 800cccc:	e7b1      	b.n	800cc32 <__sflush_r+0x1a>
 800ccce:	89a3      	ldrh	r3, [r4, #12]
 800ccd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccd4:	81a3      	strh	r3, [r4, #12]
 800ccd6:	e7ad      	b.n	800cc34 <__sflush_r+0x1c>
 800ccd8:	690f      	ldr	r7, [r1, #16]
 800ccda:	2f00      	cmp	r7, #0
 800ccdc:	d0a9      	beq.n	800cc32 <__sflush_r+0x1a>
 800ccde:	0793      	lsls	r3, r2, #30
 800cce0:	680e      	ldr	r6, [r1, #0]
 800cce2:	bf08      	it	eq
 800cce4:	694b      	ldreq	r3, [r1, #20]
 800cce6:	600f      	str	r7, [r1, #0]
 800cce8:	bf18      	it	ne
 800ccea:	2300      	movne	r3, #0
 800ccec:	eba6 0807 	sub.w	r8, r6, r7
 800ccf0:	608b      	str	r3, [r1, #8]
 800ccf2:	f1b8 0f00 	cmp.w	r8, #0
 800ccf6:	dd9c      	ble.n	800cc32 <__sflush_r+0x1a>
 800ccf8:	6a21      	ldr	r1, [r4, #32]
 800ccfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccfc:	4643      	mov	r3, r8
 800ccfe:	463a      	mov	r2, r7
 800cd00:	4628      	mov	r0, r5
 800cd02:	47b0      	blx	r6
 800cd04:	2800      	cmp	r0, #0
 800cd06:	dc06      	bgt.n	800cd16 <__sflush_r+0xfe>
 800cd08:	89a3      	ldrh	r3, [r4, #12]
 800cd0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd0e:	81a3      	strh	r3, [r4, #12]
 800cd10:	f04f 30ff 	mov.w	r0, #4294967295
 800cd14:	e78e      	b.n	800cc34 <__sflush_r+0x1c>
 800cd16:	4407      	add	r7, r0
 800cd18:	eba8 0800 	sub.w	r8, r8, r0
 800cd1c:	e7e9      	b.n	800ccf2 <__sflush_r+0xda>
 800cd1e:	bf00      	nop
 800cd20:	20400001 	.word	0x20400001

0800cd24 <_fflush_r>:
 800cd24:	b538      	push	{r3, r4, r5, lr}
 800cd26:	690b      	ldr	r3, [r1, #16]
 800cd28:	4605      	mov	r5, r0
 800cd2a:	460c      	mov	r4, r1
 800cd2c:	b913      	cbnz	r3, 800cd34 <_fflush_r+0x10>
 800cd2e:	2500      	movs	r5, #0
 800cd30:	4628      	mov	r0, r5
 800cd32:	bd38      	pop	{r3, r4, r5, pc}
 800cd34:	b118      	cbz	r0, 800cd3e <_fflush_r+0x1a>
 800cd36:	6983      	ldr	r3, [r0, #24]
 800cd38:	b90b      	cbnz	r3, 800cd3e <_fflush_r+0x1a>
 800cd3a:	f7ff f8b9 	bl	800beb0 <__sinit>
 800cd3e:	4b14      	ldr	r3, [pc, #80]	; (800cd90 <_fflush_r+0x6c>)
 800cd40:	429c      	cmp	r4, r3
 800cd42:	d11b      	bne.n	800cd7c <_fflush_r+0x58>
 800cd44:	686c      	ldr	r4, [r5, #4]
 800cd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0ef      	beq.n	800cd2e <_fflush_r+0xa>
 800cd4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd50:	07d0      	lsls	r0, r2, #31
 800cd52:	d404      	bmi.n	800cd5e <_fflush_r+0x3a>
 800cd54:	0599      	lsls	r1, r3, #22
 800cd56:	d402      	bmi.n	800cd5e <_fflush_r+0x3a>
 800cd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd5a:	f7ff f947 	bl	800bfec <__retarget_lock_acquire_recursive>
 800cd5e:	4628      	mov	r0, r5
 800cd60:	4621      	mov	r1, r4
 800cd62:	f7ff ff59 	bl	800cc18 <__sflush_r>
 800cd66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd68:	07da      	lsls	r2, r3, #31
 800cd6a:	4605      	mov	r5, r0
 800cd6c:	d4e0      	bmi.n	800cd30 <_fflush_r+0xc>
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	059b      	lsls	r3, r3, #22
 800cd72:	d4dd      	bmi.n	800cd30 <_fflush_r+0xc>
 800cd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd76:	f7ff f93a 	bl	800bfee <__retarget_lock_release_recursive>
 800cd7a:	e7d9      	b.n	800cd30 <_fflush_r+0xc>
 800cd7c:	4b05      	ldr	r3, [pc, #20]	; (800cd94 <_fflush_r+0x70>)
 800cd7e:	429c      	cmp	r4, r3
 800cd80:	d101      	bne.n	800cd86 <_fflush_r+0x62>
 800cd82:	68ac      	ldr	r4, [r5, #8]
 800cd84:	e7df      	b.n	800cd46 <_fflush_r+0x22>
 800cd86:	4b04      	ldr	r3, [pc, #16]	; (800cd98 <_fflush_r+0x74>)
 800cd88:	429c      	cmp	r4, r3
 800cd8a:	bf08      	it	eq
 800cd8c:	68ec      	ldreq	r4, [r5, #12]
 800cd8e:	e7da      	b.n	800cd46 <_fflush_r+0x22>
 800cd90:	0800d990 	.word	0x0800d990
 800cd94:	0800d9b0 	.word	0x0800d9b0
 800cd98:	0800d970 	.word	0x0800d970

0800cd9c <_lseek_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d07      	ldr	r5, [pc, #28]	; (800cdbc <_lseek_r+0x20>)
 800cda0:	4604      	mov	r4, r0
 800cda2:	4608      	mov	r0, r1
 800cda4:	4611      	mov	r1, r2
 800cda6:	2200      	movs	r2, #0
 800cda8:	602a      	str	r2, [r5, #0]
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f7f3 fc45 	bl	800063a <_lseek>
 800cdb0:	1c43      	adds	r3, r0, #1
 800cdb2:	d102      	bne.n	800cdba <_lseek_r+0x1e>
 800cdb4:	682b      	ldr	r3, [r5, #0]
 800cdb6:	b103      	cbz	r3, 800cdba <_lseek_r+0x1e>
 800cdb8:	6023      	str	r3, [r4, #0]
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
 800cdbc:	20001800 	.word	0x20001800

0800cdc0 <__swhatbuf_r>:
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	460e      	mov	r6, r1
 800cdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdc8:	2900      	cmp	r1, #0
 800cdca:	b096      	sub	sp, #88	; 0x58
 800cdcc:	4614      	mov	r4, r2
 800cdce:	461d      	mov	r5, r3
 800cdd0:	da08      	bge.n	800cde4 <__swhatbuf_r+0x24>
 800cdd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	602a      	str	r2, [r5, #0]
 800cdda:	061a      	lsls	r2, r3, #24
 800cddc:	d410      	bmi.n	800ce00 <__swhatbuf_r+0x40>
 800cdde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cde2:	e00e      	b.n	800ce02 <__swhatbuf_r+0x42>
 800cde4:	466a      	mov	r2, sp
 800cde6:	f000 f905 	bl	800cff4 <_fstat_r>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	dbf1      	blt.n	800cdd2 <__swhatbuf_r+0x12>
 800cdee:	9a01      	ldr	r2, [sp, #4]
 800cdf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cdf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cdf8:	425a      	negs	r2, r3
 800cdfa:	415a      	adcs	r2, r3
 800cdfc:	602a      	str	r2, [r5, #0]
 800cdfe:	e7ee      	b.n	800cdde <__swhatbuf_r+0x1e>
 800ce00:	2340      	movs	r3, #64	; 0x40
 800ce02:	2000      	movs	r0, #0
 800ce04:	6023      	str	r3, [r4, #0]
 800ce06:	b016      	add	sp, #88	; 0x58
 800ce08:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce0c <__smakebuf_r>:
 800ce0c:	898b      	ldrh	r3, [r1, #12]
 800ce0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce10:	079d      	lsls	r5, r3, #30
 800ce12:	4606      	mov	r6, r0
 800ce14:	460c      	mov	r4, r1
 800ce16:	d507      	bpl.n	800ce28 <__smakebuf_r+0x1c>
 800ce18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce1c:	6023      	str	r3, [r4, #0]
 800ce1e:	6123      	str	r3, [r4, #16]
 800ce20:	2301      	movs	r3, #1
 800ce22:	6163      	str	r3, [r4, #20]
 800ce24:	b002      	add	sp, #8
 800ce26:	bd70      	pop	{r4, r5, r6, pc}
 800ce28:	ab01      	add	r3, sp, #4
 800ce2a:	466a      	mov	r2, sp
 800ce2c:	f7ff ffc8 	bl	800cdc0 <__swhatbuf_r>
 800ce30:	9900      	ldr	r1, [sp, #0]
 800ce32:	4605      	mov	r5, r0
 800ce34:	4630      	mov	r0, r6
 800ce36:	f7ff f8fb 	bl	800c030 <_malloc_r>
 800ce3a:	b948      	cbnz	r0, 800ce50 <__smakebuf_r+0x44>
 800ce3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce40:	059a      	lsls	r2, r3, #22
 800ce42:	d4ef      	bmi.n	800ce24 <__smakebuf_r+0x18>
 800ce44:	f023 0303 	bic.w	r3, r3, #3
 800ce48:	f043 0302 	orr.w	r3, r3, #2
 800ce4c:	81a3      	strh	r3, [r4, #12]
 800ce4e:	e7e3      	b.n	800ce18 <__smakebuf_r+0xc>
 800ce50:	4b0d      	ldr	r3, [pc, #52]	; (800ce88 <__smakebuf_r+0x7c>)
 800ce52:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	6020      	str	r0, [r4, #0]
 800ce58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce5c:	81a3      	strh	r3, [r4, #12]
 800ce5e:	9b00      	ldr	r3, [sp, #0]
 800ce60:	6163      	str	r3, [r4, #20]
 800ce62:	9b01      	ldr	r3, [sp, #4]
 800ce64:	6120      	str	r0, [r4, #16]
 800ce66:	b15b      	cbz	r3, 800ce80 <__smakebuf_r+0x74>
 800ce68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f000 f8d3 	bl	800d018 <_isatty_r>
 800ce72:	b128      	cbz	r0, 800ce80 <__smakebuf_r+0x74>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	f023 0303 	bic.w	r3, r3, #3
 800ce7a:	f043 0301 	orr.w	r3, r3, #1
 800ce7e:	81a3      	strh	r3, [r4, #12]
 800ce80:	89a0      	ldrh	r0, [r4, #12]
 800ce82:	4305      	orrs	r5, r0
 800ce84:	81a5      	strh	r5, [r4, #12]
 800ce86:	e7cd      	b.n	800ce24 <__smakebuf_r+0x18>
 800ce88:	0800be49 	.word	0x0800be49

0800ce8c <memmove>:
 800ce8c:	4288      	cmp	r0, r1
 800ce8e:	b510      	push	{r4, lr}
 800ce90:	eb01 0402 	add.w	r4, r1, r2
 800ce94:	d902      	bls.n	800ce9c <memmove+0x10>
 800ce96:	4284      	cmp	r4, r0
 800ce98:	4623      	mov	r3, r4
 800ce9a:	d807      	bhi.n	800ceac <memmove+0x20>
 800ce9c:	1e43      	subs	r3, r0, #1
 800ce9e:	42a1      	cmp	r1, r4
 800cea0:	d008      	beq.n	800ceb4 <memmove+0x28>
 800cea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceaa:	e7f8      	b.n	800ce9e <memmove+0x12>
 800ceac:	4402      	add	r2, r0
 800ceae:	4601      	mov	r1, r0
 800ceb0:	428a      	cmp	r2, r1
 800ceb2:	d100      	bne.n	800ceb6 <memmove+0x2a>
 800ceb4:	bd10      	pop	{r4, pc}
 800ceb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cebe:	e7f7      	b.n	800ceb0 <memmove+0x24>

0800cec0 <__malloc_lock>:
 800cec0:	4801      	ldr	r0, [pc, #4]	; (800cec8 <__malloc_lock+0x8>)
 800cec2:	f7ff b893 	b.w	800bfec <__retarget_lock_acquire_recursive>
 800cec6:	bf00      	nop
 800cec8:	200017f4 	.word	0x200017f4

0800cecc <__malloc_unlock>:
 800cecc:	4801      	ldr	r0, [pc, #4]	; (800ced4 <__malloc_unlock+0x8>)
 800cece:	f7ff b88e 	b.w	800bfee <__retarget_lock_release_recursive>
 800ced2:	bf00      	nop
 800ced4:	200017f4 	.word	0x200017f4

0800ced8 <_free_r>:
 800ced8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ceda:	2900      	cmp	r1, #0
 800cedc:	d044      	beq.n	800cf68 <_free_r+0x90>
 800cede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cee2:	9001      	str	r0, [sp, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f1a1 0404 	sub.w	r4, r1, #4
 800ceea:	bfb8      	it	lt
 800ceec:	18e4      	addlt	r4, r4, r3
 800ceee:	f7ff ffe7 	bl	800cec0 <__malloc_lock>
 800cef2:	4a1e      	ldr	r2, [pc, #120]	; (800cf6c <_free_r+0x94>)
 800cef4:	9801      	ldr	r0, [sp, #4]
 800cef6:	6813      	ldr	r3, [r2, #0]
 800cef8:	b933      	cbnz	r3, 800cf08 <_free_r+0x30>
 800cefa:	6063      	str	r3, [r4, #4]
 800cefc:	6014      	str	r4, [r2, #0]
 800cefe:	b003      	add	sp, #12
 800cf00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf04:	f7ff bfe2 	b.w	800cecc <__malloc_unlock>
 800cf08:	42a3      	cmp	r3, r4
 800cf0a:	d908      	bls.n	800cf1e <_free_r+0x46>
 800cf0c:	6825      	ldr	r5, [r4, #0]
 800cf0e:	1961      	adds	r1, r4, r5
 800cf10:	428b      	cmp	r3, r1
 800cf12:	bf01      	itttt	eq
 800cf14:	6819      	ldreq	r1, [r3, #0]
 800cf16:	685b      	ldreq	r3, [r3, #4]
 800cf18:	1949      	addeq	r1, r1, r5
 800cf1a:	6021      	streq	r1, [r4, #0]
 800cf1c:	e7ed      	b.n	800cefa <_free_r+0x22>
 800cf1e:	461a      	mov	r2, r3
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	b10b      	cbz	r3, 800cf28 <_free_r+0x50>
 800cf24:	42a3      	cmp	r3, r4
 800cf26:	d9fa      	bls.n	800cf1e <_free_r+0x46>
 800cf28:	6811      	ldr	r1, [r2, #0]
 800cf2a:	1855      	adds	r5, r2, r1
 800cf2c:	42a5      	cmp	r5, r4
 800cf2e:	d10b      	bne.n	800cf48 <_free_r+0x70>
 800cf30:	6824      	ldr	r4, [r4, #0]
 800cf32:	4421      	add	r1, r4
 800cf34:	1854      	adds	r4, r2, r1
 800cf36:	42a3      	cmp	r3, r4
 800cf38:	6011      	str	r1, [r2, #0]
 800cf3a:	d1e0      	bne.n	800cefe <_free_r+0x26>
 800cf3c:	681c      	ldr	r4, [r3, #0]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	6053      	str	r3, [r2, #4]
 800cf42:	4421      	add	r1, r4
 800cf44:	6011      	str	r1, [r2, #0]
 800cf46:	e7da      	b.n	800cefe <_free_r+0x26>
 800cf48:	d902      	bls.n	800cf50 <_free_r+0x78>
 800cf4a:	230c      	movs	r3, #12
 800cf4c:	6003      	str	r3, [r0, #0]
 800cf4e:	e7d6      	b.n	800cefe <_free_r+0x26>
 800cf50:	6825      	ldr	r5, [r4, #0]
 800cf52:	1961      	adds	r1, r4, r5
 800cf54:	428b      	cmp	r3, r1
 800cf56:	bf04      	itt	eq
 800cf58:	6819      	ldreq	r1, [r3, #0]
 800cf5a:	685b      	ldreq	r3, [r3, #4]
 800cf5c:	6063      	str	r3, [r4, #4]
 800cf5e:	bf04      	itt	eq
 800cf60:	1949      	addeq	r1, r1, r5
 800cf62:	6021      	streq	r1, [r4, #0]
 800cf64:	6054      	str	r4, [r2, #4]
 800cf66:	e7ca      	b.n	800cefe <_free_r+0x26>
 800cf68:	b003      	add	sp, #12
 800cf6a:	bd30      	pop	{r4, r5, pc}
 800cf6c:	200017f8 	.word	0x200017f8

0800cf70 <_realloc_r>:
 800cf70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf74:	4680      	mov	r8, r0
 800cf76:	4614      	mov	r4, r2
 800cf78:	460e      	mov	r6, r1
 800cf7a:	b921      	cbnz	r1, 800cf86 <_realloc_r+0x16>
 800cf7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf80:	4611      	mov	r1, r2
 800cf82:	f7ff b855 	b.w	800c030 <_malloc_r>
 800cf86:	b92a      	cbnz	r2, 800cf94 <_realloc_r+0x24>
 800cf88:	f7ff ffa6 	bl	800ced8 <_free_r>
 800cf8c:	4625      	mov	r5, r4
 800cf8e:	4628      	mov	r0, r5
 800cf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf94:	f000 f850 	bl	800d038 <_malloc_usable_size_r>
 800cf98:	4284      	cmp	r4, r0
 800cf9a:	4607      	mov	r7, r0
 800cf9c:	d802      	bhi.n	800cfa4 <_realloc_r+0x34>
 800cf9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfa2:	d812      	bhi.n	800cfca <_realloc_r+0x5a>
 800cfa4:	4621      	mov	r1, r4
 800cfa6:	4640      	mov	r0, r8
 800cfa8:	f7ff f842 	bl	800c030 <_malloc_r>
 800cfac:	4605      	mov	r5, r0
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d0ed      	beq.n	800cf8e <_realloc_r+0x1e>
 800cfb2:	42bc      	cmp	r4, r7
 800cfb4:	4622      	mov	r2, r4
 800cfb6:	4631      	mov	r1, r6
 800cfb8:	bf28      	it	cs
 800cfba:	463a      	movcs	r2, r7
 800cfbc:	f7fe fe84 	bl	800bcc8 <memcpy>
 800cfc0:	4631      	mov	r1, r6
 800cfc2:	4640      	mov	r0, r8
 800cfc4:	f7ff ff88 	bl	800ced8 <_free_r>
 800cfc8:	e7e1      	b.n	800cf8e <_realloc_r+0x1e>
 800cfca:	4635      	mov	r5, r6
 800cfcc:	e7df      	b.n	800cf8e <_realloc_r+0x1e>
	...

0800cfd0 <_read_r>:
 800cfd0:	b538      	push	{r3, r4, r5, lr}
 800cfd2:	4d07      	ldr	r5, [pc, #28]	; (800cff0 <_read_r+0x20>)
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	4608      	mov	r0, r1
 800cfd8:	4611      	mov	r1, r2
 800cfda:	2200      	movs	r2, #0
 800cfdc:	602a      	str	r2, [r5, #0]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	f7f3 fae7 	bl	80005b2 <_read>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	d102      	bne.n	800cfee <_read_r+0x1e>
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	b103      	cbz	r3, 800cfee <_read_r+0x1e>
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	bd38      	pop	{r3, r4, r5, pc}
 800cff0:	20001800 	.word	0x20001800

0800cff4 <_fstat_r>:
 800cff4:	b538      	push	{r3, r4, r5, lr}
 800cff6:	4d07      	ldr	r5, [pc, #28]	; (800d014 <_fstat_r+0x20>)
 800cff8:	2300      	movs	r3, #0
 800cffa:	4604      	mov	r4, r0
 800cffc:	4608      	mov	r0, r1
 800cffe:	4611      	mov	r1, r2
 800d000:	602b      	str	r3, [r5, #0]
 800d002:	f7f3 faff 	bl	8000604 <_fstat>
 800d006:	1c43      	adds	r3, r0, #1
 800d008:	d102      	bne.n	800d010 <_fstat_r+0x1c>
 800d00a:	682b      	ldr	r3, [r5, #0]
 800d00c:	b103      	cbz	r3, 800d010 <_fstat_r+0x1c>
 800d00e:	6023      	str	r3, [r4, #0]
 800d010:	bd38      	pop	{r3, r4, r5, pc}
 800d012:	bf00      	nop
 800d014:	20001800 	.word	0x20001800

0800d018 <_isatty_r>:
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	4d06      	ldr	r5, [pc, #24]	; (800d034 <_isatty_r+0x1c>)
 800d01c:	2300      	movs	r3, #0
 800d01e:	4604      	mov	r4, r0
 800d020:	4608      	mov	r0, r1
 800d022:	602b      	str	r3, [r5, #0]
 800d024:	f7f3 fafe 	bl	8000624 <_isatty>
 800d028:	1c43      	adds	r3, r0, #1
 800d02a:	d102      	bne.n	800d032 <_isatty_r+0x1a>
 800d02c:	682b      	ldr	r3, [r5, #0]
 800d02e:	b103      	cbz	r3, 800d032 <_isatty_r+0x1a>
 800d030:	6023      	str	r3, [r4, #0]
 800d032:	bd38      	pop	{r3, r4, r5, pc}
 800d034:	20001800 	.word	0x20001800

0800d038 <_malloc_usable_size_r>:
 800d038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d03c:	1f18      	subs	r0, r3, #4
 800d03e:	2b00      	cmp	r3, #0
 800d040:	bfbc      	itt	lt
 800d042:	580b      	ldrlt	r3, [r1, r0]
 800d044:	18c0      	addlt	r0, r0, r3
 800d046:	4770      	bx	lr

0800d048 <_init>:
 800d048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04a:	bf00      	nop
 800d04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d04e:	bc08      	pop	{r3}
 800d050:	469e      	mov	lr, r3
 800d052:	4770      	bx	lr

0800d054 <_fini>:
 800d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d056:	bf00      	nop
 800d058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d05a:	bc08      	pop	{r3}
 800d05c:	469e      	mov	lr, r3
 800d05e:	4770      	bx	lr
