
Thread_Coap_Generic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1b0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  0800e2f0  0800e2f0  0001e2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800edc8  0800edc8  0001edc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800edd0  0800edd0  0001edd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800edd4  0800edd4  0001edd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000008  0800edd8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000094  0800ee64  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000018f8  200000a8  0800ee75  000200a8  2**2
                  ALLOC
  9 ._user_heap_stack 00002800  200019a0  0800ee75  000219a0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000000c0  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000b82  200300e8  200300e8  00030000  2**2
                  ALLOC
 14 .debug_info   0003534c  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006e52  00000000  00000000  00055421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002d50  00000000  00000000  0005c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002a68  00000000  00000000  0005efc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00031b0d  00000000  00000000  00061a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003796a  00000000  00000000  0009353d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00112f6c  00000000  00000000  000caea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001dde13  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c3e0  00000000  00000000  001dde64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a8 	.word	0x200000a8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e2d8 	.word	0x0800e2d8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ac 	.word	0x200000ac
 800017c:	0800e2d8 	.word	0x0800e2d8

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8000560:	23ff      	movs	r3, #255	; 0xff
 8000562:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000564:	2300      	movs	r3, #0
 8000566:	81fb      	strh	r3, [r7, #14]
 8000568:	e021      	b.n	80005ae <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 800056a:	89fb      	ldrh	r3, [r7, #14]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4413      	add	r3, r2
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	7b7b      	ldrb	r3, [r7, #13]
 8000574:	4053      	eors	r3, r2
 8000576:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000578:	2308      	movs	r3, #8
 800057a:	733b      	strb	r3, [r7, #12]
 800057c:	e011      	b.n	80005a2 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800057e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000582:	2b00      	cmp	r3, #0
 8000584:	da07      	bge.n	8000596 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000586:	7b7b      	ldrb	r3, [r7, #13]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b25b      	sxtb	r3, r3
 800058c:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000590:	b25b      	sxtb	r3, r3
 8000592:	737b      	strb	r3, [r7, #13]
 8000594:	e002      	b.n	800059c <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000596:	7b7b      	ldrb	r3, [r7, #13]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800059c:	7b3b      	ldrb	r3, [r7, #12]
 800059e:	3b01      	subs	r3, #1
 80005a0:	733b      	strb	r3, [r7, #12]
 80005a2:	7b3b      	ldrb	r3, [r7, #12]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1ea      	bne.n	800057e <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80005a8:	89fb      	ldrh	r3, [r7, #14]
 80005aa:	3301      	adds	r3, #1
 80005ac:	81fb      	strh	r3, [r7, #14]
 80005ae:	89fa      	ldrh	r2, [r7, #14]
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d3d9      	bcc.n	800056a <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80005b6:	7b7b      	ldrb	r3, [r7, #13]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
 80005d0:	4613      	mov	r3, r2
 80005d2:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	4619      	mov	r1, r3
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ffbb 	bl	8000554 <sensirion_common_generate_crc>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	787b      	ldrb	r3, [r7, #1]
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d002      	beq.n	80005ee <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	e000      	b.n	80005f0 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <sensirion_i2c_read_words_as_bytes>:
    }
    return idx;
}

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	; 0x58
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	4613      	mov	r3, r2
 8000606:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000608:	88bb      	ldrh	r3, [r7, #4]
 800060a:	461a      	mov	r2, r3
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	4413      	add	r3, r2
 8000610:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800061a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f8a2 	bl	800076c <sensirion_i2c_read>
 8000628:	4603      	mov	r3, r0
 800062a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 800062e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000636:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800063a:	e047      	b.n	80006cc <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800063c:	2300      	movs	r3, #0
 800063e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000642:	2300      	movs	r3, #0
 8000644:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000648:	e039      	b.n	80006be <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800064a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800064e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000650:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8000652:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000656:	3302      	adds	r3, #2
 8000658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800065a:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	2102      	movs	r1, #2
 8000662:	f7ff ffaf 	bl	80005c4 <sensirion_common_check_crc>
 8000666:	4603      	mov	r3, r0
 8000668:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 800066c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000674:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000678:	e028      	b.n	80006cc <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 800067a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800067e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000680:	441a      	add	r2, r3
 8000682:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000686:	1c59      	adds	r1, r3, #1
 8000688:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 800068c:	4619      	mov	r1, r3
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	440b      	add	r3, r1
 8000692:	7812      	ldrb	r2, [r2, #0]
 8000694:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000696:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800069a:	3301      	adds	r3, #1
 800069c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800069e:	441a      	add	r2, r3
 80006a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80006a4:	1c59      	adds	r1, r3, #1
 80006a6:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80006aa:	4619      	mov	r1, r3
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	440b      	add	r3, r1
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80006b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80006b8:	3303      	adds	r3, #3
 80006ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80006be:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80006c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d3bf      	bcc.n	800064a <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3758      	adds	r7, #88	; 0x58
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80006e4:	88ba      	ldrh	r2, [r7, #4]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	6839      	ldr	r1, [r7, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff84 	bl	80005f8 <sensirion_i2c_read_words_as_bytes>
 80006f0:	4603      	mov	r3, r0
 80006f2:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 80006f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <sensirion_i2c_read_words+0x2e>
        return ret;
 80006fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000700:	e020      	b.n	8000744 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e017      	b.n	8000738 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	4413      	add	r3, r2
 8000710:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	b21a      	sxth	r2, r3
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	3301      	adds	r3, #1
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b219      	sxth	r1, r3
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	4413      	add	r3, r2
 800072e:	b28a      	uxth	r2, r1
 8000730:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	3301      	adds	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	b29b      	uxth	r3, r3
 800073c:	88ba      	ldrh	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d8e2      	bhi.n	8000708 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(I2C_HandleTypeDef* i2c_handle) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	i2c = i2c_handle;
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <sensirion_i2c_init+0x1c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	200000c4 	.word	0x200000c4

0800076c <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af02      	add	r7, sp, #8
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Receive(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <sensirion_i2c_read+0x34>)
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	b29b      	uxth	r3, r3
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	b299      	uxth	r1, r3
 8000788:	88bb      	ldrh	r3, [r7, #4]
 800078a:	2205      	movs	r2, #5
 800078c:	9200      	str	r2, [sp, #0]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	f004 fb70 	bl	8004e74 <HAL_I2C_Master_Receive>
 8000794:	4603      	mov	r3, r0
 8000796:	b25b      	sxtb	r3, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000c4 	.word	0x200000c4

080007a4 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Transmit(i2c, (uint16_t)(address<<1), (uint8_t*)data, count,5);
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <sensirion_i2c_write+0x34>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	b299      	uxth	r1, r3
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	2205      	movs	r2, #5
 80007c4:	9200      	str	r2, [sp, #0]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	f004 fa60 	bl	8004c8c <HAL_I2C_Master_Transmit>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b25b      	sxtb	r3, r3
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000c4 	.word	0x200000c4

080007dc <sht4x_measure>:
        return ret;
    sensirion_sleep_usec(sht4x_cmd_measure_delay_us);
    return sht4x_read(temperature, humidity);
}

int16_t sht4x_measure(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    return sensirion_i2c_write(SHT4X_ADDRESS, &sht4x_cmd_measure, 1);
 80007e0:	2201      	movs	r2, #1
 80007e2:	4904      	ldr	r1, [pc, #16]	; (80007f4 <sht4x_measure+0x18>)
 80007e4:	2044      	movs	r0, #68	; 0x44
 80007e6:	f7ff ffdd 	bl	80007a4 <sensirion_i2c_write>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b21b      	sxth	r3, r3
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008

080007f8 <sht4x_read>:

int16_t sht4x_read(int32_t* temperature, int32_t* humidity) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHT4X_ADDRESS, words,
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2202      	movs	r2, #2
 8000808:	4619      	mov	r1, r3
 800080a:	2044      	movs	r0, #68	; 0x44
 800080c:	f7ff ff62 	bl	80006d4 <sensirion_i2c_read_words>
 8000810:	4603      	mov	r3, r0
 8000812:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 65535 - 45
     * Relative Humidity = 125 * (S_RH / 65535) - 6
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 8000814:	893b      	ldrh	r3, [r7, #8]
 8000816:	461a      	mov	r2, r3
 8000818:	f245 5373 	movw	r3, #21875	; 0x5573
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	135b      	asrs	r3, r3, #13
 8000822:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 8000826:	3bc8      	subs	r3, #200	; 0xc8
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	6013      	str	r3, [r2, #0]
    *humidity = ((15625 * (int32_t)words[1]) >> 13) - 6000;
 800082c:	897b      	ldrh	r3, [r7, #10]
 800082e:	461a      	mov	r2, r3
 8000830:	f643 5309 	movw	r3, #15625	; 0x3d09
 8000834:	fb02 f303 	mul.w	r3, r2, r3
 8000838:	135b      	asrs	r3, r3, #13
 800083a:	f5a3 53bb 	sub.w	r3, r3, #5984	; 0x1760
 800083e:	3b10      	subs	r3, #16
 8000840:	683a      	ldr	r2, [r7, #0]
 8000842:	6013      	str	r3, [r2, #0]

    return ret;
 8000844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <sht4x_enable_low_power_mode>:
    uint32_t serial;

    return sht4x_read_serial(&serial);
}

void sht4x_enable_low_power_mode(uint8_t enable_low_power_mode) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
    if (enable_low_power_mode) {
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d007      	beq.n	8000870 <sht4x_enable_low_power_mode+0x20>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_LPM;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <sht4x_enable_low_power_mode+0x3c>)
 8000862:	22e0      	movs	r2, #224	; 0xe0
 8000864:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_LPM_USEC;
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <sht4x_enable_low_power_mode+0x40>)
 8000868:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800086c:	801a      	strh	r2, [r3, #0]
    } else {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
    }
}
 800086e:	e006      	b.n	800087e <sht4x_enable_low_power_mode+0x2e>
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <sht4x_enable_low_power_mode+0x3c>)
 8000872:	22fd      	movs	r2, #253	; 0xfd
 8000874:	701a      	strb	r2, [r3, #0]
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <sht4x_enable_low_power_mode+0x40>)
 8000878:	f242 7210 	movw	r2, #10000	; 0x2710
 800087c:	801a      	strh	r2, [r3, #0]
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008
 8000890:	2000000a 	.word	0x2000000a

08000894 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000894:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000896:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000898:	3304      	adds	r3, #4

0800089a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800089e:	d3f9      	bcc.n	8000894 <CopyDataInit>
  bx lr
 80008a0:	4770      	bx	lr

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80008a2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80008a4:	3004      	adds	r0, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80008a6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>
  bx lr
 80008aa:	4770      	bx	lr

080008ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80008ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b0:	f003 f978 	bl	8003ba4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <LoopForever+0x8>)
 80008b6:	490c      	ldr	r1, [pc, #48]	; (80008e8 <LoopForever+0xc>)
 80008b8:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <LoopForever+0x10>)
 80008ba:	2300      	movs	r3, #0
 80008bc:	f7ff ffed 	bl	800089a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <LoopForever+0x14>)
 80008c2:	490c      	ldr	r1, [pc, #48]	; (80008f4 <LoopForever+0x18>)
 80008c4:	2300      	movs	r3, #0
 80008c6:	f7ff ffee 	bl	80008a6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <LoopForever+0x1c>)
 80008cc:	490b      	ldr	r1, [pc, #44]	; (80008fc <LoopForever+0x20>)
 80008ce:	2300      	movs	r3, #0
 80008d0:	f7ff ffe9 	bl	80008a6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008d4:	f00c fb1c 	bl	800cf10 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80008d8:	f002 fbb6 	bl	8003048 <main>

080008dc <LoopForever>:

LoopForever:
  b LoopForever
 80008dc:	e7fe      	b.n	80008dc <LoopForever>
 80008de:	0000      	.short	0x0000
  ldr   r0, =_estack
 80008e0:	20024000 	.word	0x20024000
  INIT_DATA _sdata, _edata, _sidata
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000094 	.word	0x20000094
 80008ec:	0800edd8 	.word	0x0800edd8
  INIT_BSS _sbss, _ebss
 80008f0:	200000a8 	.word	0x200000a8
 80008f4:	200019a0 	.word	0x200019a0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80008f8:	200300e8 	.word	0x200300e8
 80008fc:	20030c6a 	.word	0x20030c6a

08000900 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_IRQHandler>

08000902 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	e00a      	b.n	800092a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000914:	f3af 8000 	nop.w
 8000918:	4601      	mov	r1, r0
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	60ba      	str	r2, [r7, #8]
 8000920:	b2ca      	uxtb	r2, r1
 8000922:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3301      	adds	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	429a      	cmp	r2, r3
 8000930:	dbf0      	blt.n	8000914 <_read+0x12>
  }

  return len;
 8000932:	687b      	ldr	r3, [r7, #4]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <_close>:
  }
  return len;
}

int _close(int file)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000964:	605a      	str	r2, [r3, #4]
  return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <_isatty>:

int _isatty(int file)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800097c:	2301      	movs	r3, #1
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800098a:	b480      	push	{r7}
 800098c:	b085      	sub	sp, #20
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ac:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <_sbrk+0x5c>)
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <_sbrk+0x60>)
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <_sbrk+0x64>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <_sbrk+0x68>)
 80009c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d207      	bcs.n	80009e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d4:	f00c fa96 	bl	800cf04 <__errno>
 80009d8:	4603      	mov	r3, r0
 80009da:	220c      	movs	r2, #12
 80009dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	e009      	b.n	80009f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <_sbrk+0x64>)
 80009f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f6:	68fb      	ldr	r3, [r7, #12]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20024000 	.word	0x20024000
 8000a04:	00002000 	.word	0x00002000
 8000a08:	200000c8 	.word	0x200000c8
 8000a0c:	200019a0 	.word	0x200019a0

08000a10 <otCoapSendResponse>:
 * @retval OT_ERROR_NONE     Successfully enqueued the CoAP response message.
 * @retval OT_ERROR_NO_BUFS  Insufficient buffers available to send the CoAP response.
 *
 */
static inline otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
    // NOLINTNEXTLINE(modernize-use-nullptr)
    return otCoapSendResponseWithParameters(aInstance, aMessage, aMessageInfo, NULL);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f009 fc54 	bl	800a2d0 <otCoapSendResponseWithParameters>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <APP_THREAD_Init>:
const uint8_t device_type = 1;

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_THREAD_INIT_1 */

  /* USER CODE END APP_THREAD_INIT_1 */
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f00b fb43 	bl	800c0c8 <UTIL_LPM_SetStopMode>
  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8000a42:	f000 fa1b 	bl	8000e7c <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8000a46:	481d      	ldr	r0, [pc, #116]	; (8000abc <APP_THREAD_Init+0x88>)
 8000a48:	f000 fc34 	bl	80012b4 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f00b fb6a 	bl	800c128 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8000a54:	f000 fd54 	bl	8001500 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8000a58:	f000 fd3a 	bl	80014d0 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8000a5c:	f00a fcb6 	bl	800b3cc <SHCI_C2_THREAD_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
 8000a64:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <APP_THREAD_Init+0x8c>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f00b fc89 	bl	800c380 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN INIT TASKS */
  APP_THREAD_SetSleepyEndDeviceMode();
 8000a6e:	f000 f8e7 	bl	8000c40 <APP_THREAD_SetSleepyEndDeviceMode>
  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 8000a72:	f000 f939 	bl	8000ce8 <APP_THREAD_DeviceConfig>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <APP_THREAD_Init+0x90>)
 8000a7c:	f004 f898 	bl	8004bb0 <HAL_GPIO_WritePin>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &coapMessageTimerId, hw_ts_Repeated, APP_THREAD_SendCoapMsg);
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <APP_THREAD_Init+0x94>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	4911      	ldr	r1, [pc, #68]	; (8000acc <APP_THREAD_Init+0x98>)
 8000a86:	2000      	movs	r0, #0
 8000a88:	f001 ffd6 	bl	8002a38 <HW_TS_Create>
  HW_TS_Start(coapMessageTimerId, coapMessageIntervalMs);
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <APP_THREAD_Init+0x98>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	f642 0205 	movw	r2, #10245	; 0x2805
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 f8cc 	bl	8002c34 <HW_TS_Start>
  //APP_THREAD_InitPayloadWrite();

  otLinkGetFactoryAssignedIeeeEui64(NULL, &eui64);
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <APP_THREAD_Init+0x9c>)
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f009 fd59 	bl	800a556 <otLinkGetFactoryAssignedIeeeEui64>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_ENABLE);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f00b fb0e 	bl	800c0c8 <UTIL_LPM_SetStopMode>

  /* Allow the 802_15_4 IP to enter in low power mode */
  SHCI_C2_RADIO_AllowLowPower(THREAD_IP,TRUE);
 8000aac:	2101      	movs	r1, #1
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f00a fcb8 	bl	800b424 <SHCI_C2_RADIO_AllowLowPower>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200300e8 	.word	0x200300e8
 8000ac0:	08001595 	.word	0x08001595
 8000ac4:	48000800 	.word	0x48000800
 8000ac8:	080010e1 	.word	0x080010e1
 8000acc:	200002e4 	.word	0x200002e4
 8000ad0:	20000418 	.word	0x20000418

08000ad4 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b16      	cmp	r3, #22
 8000ae2:	f200 8081 	bhi.w	8000be8 <APP_THREAD_Error+0x114>
 8000ae6:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <APP_THREAD_Error+0x18>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000b49 	.word	0x08000b49
 8000af0:	08000b53 	.word	0x08000b53
 8000af4:	08000b5d 	.word	0x08000b5d
 8000af8:	08000b67 	.word	0x08000b67
 8000afc:	08000b71 	.word	0x08000b71
 8000b00:	08000b7b 	.word	0x08000b7b
 8000b04:	08000b85 	.word	0x08000b85
 8000b08:	08000b8f 	.word	0x08000b8f
 8000b0c:	08000ba3 	.word	0x08000ba3
 8000b10:	08000bad 	.word	0x08000bad
 8000b14:	08000bb7 	.word	0x08000bb7
 8000b18:	08000bc1 	.word	0x08000bc1
 8000b1c:	08000be9 	.word	0x08000be9
 8000b20:	08000bcb 	.word	0x08000bcb
 8000b24:	08000bd5 	.word	0x08000bd5
 8000b28:	08000be9 	.word	0x08000be9
 8000b2c:	08000be9 	.word	0x08000be9
 8000b30:	08000be9 	.word	0x08000be9
 8000b34:	08000be9 	.word	0x08000be9
 8000b38:	08000be9 	.word	0x08000be9
 8000b3c:	08000bdf 	.word	0x08000bdf
 8000b40:	08000be9 	.word	0x08000be9
 8000b44:	08000b99 	.word	0x08000b99
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8000b48:	6839      	ldr	r1, [r7, #0]
 8000b4a:	482c      	ldr	r0, [pc, #176]	; (8000bfc <APP_THREAD_Error+0x128>)
 8000b4c:	f000 f982 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000b50:	e04f      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8000b52:	6839      	ldr	r1, [r7, #0]
 8000b54:	482a      	ldr	r0, [pc, #168]	; (8000c00 <APP_THREAD_Error+0x12c>)
 8000b56:	f000 f97d 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000b5a:	e04a      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8000b5c:	6839      	ldr	r1, [r7, #0]
 8000b5e:	4829      	ldr	r0, [pc, #164]	; (8000c04 <APP_THREAD_Error+0x130>)
 8000b60:	f000 f978 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000b64:	e045      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8000b66:	6839      	ldr	r1, [r7, #0]
 8000b68:	4827      	ldr	r0, [pc, #156]	; (8000c08 <APP_THREAD_Error+0x134>)
 8000b6a:	f000 f973 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000b6e:	e040      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8000b70:	6839      	ldr	r1, [r7, #0]
 8000b72:	4826      	ldr	r0, [pc, #152]	; (8000c0c <APP_THREAD_Error+0x138>)
 8000b74:	f000 f96e 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000b78:	e03b      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8000b7a:	6839      	ldr	r1, [r7, #0]
 8000b7c:	4824      	ldr	r0, [pc, #144]	; (8000c10 <APP_THREAD_Error+0x13c>)
 8000b7e:	f000 f969 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000b82:	e036      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8000b84:	6839      	ldr	r1, [r7, #0]
 8000b86:	4823      	ldr	r0, [pc, #140]	; (8000c14 <APP_THREAD_Error+0x140>)
 8000b88:	f000 f964 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000b8c:	e031      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_SET_NETWORK_KEY :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_NETWORK_KEY ",ErrCode);
 8000b8e:	6839      	ldr	r1, [r7, #0]
 8000b90:	4821      	ldr	r0, [pc, #132]	; (8000c18 <APP_THREAD_Error+0x144>)
 8000b92:	f000 f95f 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000b96:	e02c      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8000b98:	6839      	ldr	r1, [r7, #0]
 8000b9a:	4820      	ldr	r0, [pc, #128]	; (8000c1c <APP_THREAD_Error+0x148>)
 8000b9c:	f000 f95a 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000ba0:	e027      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  /* USER CODE BEGIN APP_THREAD_Error_2 */
  case ERR_THREAD_COAP_START :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ",ErrCode);
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	481e      	ldr	r0, [pc, #120]	; (8000c20 <APP_THREAD_Error+0x14c>)
 8000ba6:	f000 f955 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000baa:	e022      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_ADD_RESSOURCE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",ErrCode);
 8000bac:	6839      	ldr	r1, [r7, #0]
 8000bae:	481d      	ldr	r0, [pc, #116]	; (8000c24 <APP_THREAD_Error+0x150>)
 8000bb0:	f000 f950 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000bb4:	e01d      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MESSAGE_READ :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ",ErrCode);
 8000bb6:	6839      	ldr	r1, [r7, #0]
 8000bb8:	481b      	ldr	r0, [pc, #108]	; (8000c28 <APP_THREAD_Error+0x154>)
 8000bba:	f000 f94b 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000bbe:	e018      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_RESPONSE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",ErrCode);
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	481a      	ldr	r0, [pc, #104]	; (8000c2c <APP_THREAD_Error+0x158>)
 8000bc4:	f000 f946 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000bc8:	e013      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_APPEND :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ",ErrCode);
 8000bca:	6839      	ldr	r1, [r7, #0]
 8000bcc:	4818      	ldr	r0, [pc, #96]	; (8000c30 <APP_THREAD_Error+0x15c>)
 8000bce:	f000 f941 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000bd2:	e00e      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_COAP_SEND_REQUEST :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ",ErrCode);
 8000bd4:	6839      	ldr	r1, [r7, #0]
 8000bd6:	4817      	ldr	r0, [pc, #92]	; (8000c34 <APP_THREAD_Error+0x160>)
 8000bd8:	f000 f93c 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000bdc:	e009      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  case ERR_THREAD_MSG_COMPARE_FAILED:
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MSG_COMPARE_FAILED ",ErrCode);
 8000bde:	6839      	ldr	r1, [r7, #0]
 8000be0:	4815      	ldr	r0, [pc, #84]	; (8000c38 <APP_THREAD_Error+0x164>)
 8000be2:	f000 f937 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000be6:	e004      	b.n	8000bf2 <APP_THREAD_Error+0x11e>
  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	4814      	ldr	r0, [pc, #80]	; (8000c3c <APP_THREAD_Error+0x168>)
 8000bec:	f000 f932 	bl	8000e54 <APP_THREAD_TraceError>
    break;
 8000bf0:	bf00      	nop
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	0800e2fc 	.word	0x0800e2fc
 8000c00:	0800e320 	.word	0x0800e320
 8000c04:	0800e344 	.word	0x0800e344
 8000c08:	0800e364 	.word	0x0800e364
 8000c0c:	0800e384 	.word	0x0800e384
 8000c10:	0800e3a4 	.word	0x0800e3a4
 8000c14:	0800e3c0 	.word	0x0800e3c0
 8000c18:	0800e3ec 	.word	0x0800e3ec
 8000c1c:	0800e410 	.word	0x0800e410
 8000c20:	0800e434 	.word	0x0800e434
 8000c24:	0800e454 	.word	0x0800e454
 8000c28:	0800e47c 	.word	0x0800e47c
 8000c2c:	0800e4a0 	.word	0x0800e4a0
 8000c30:	0800e4c8 	.word	0x0800e4c8
 8000c34:	0800e4e8 	.word	0x0800e4e8
 8000c38:	0800e510 	.word	0x0800e510
 8000c3c:	0800e538 	.word	0x0800e538

08000c40 <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  otError   error = OT_ERROR_NONE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	71fb      	strb	r3, [r7, #7]

  /* Set the pool period to 5 sec. It means that when the device will enter
   * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
   * This message will act as keep alive message.
   */
  otLinkSetPollPeriod(NULL, 2000);
 8000c4a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f009 fcdd 	bl	800a60e <otLinkSetPollPeriod>

  /* Set the sleepy end device mode */
  OT_LinkMode.mRxOnWhenIdle = 0;
 8000c54:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000c56:	7813      	ldrb	r3, [r2, #0]
 8000c58:	f36f 0300 	bfc	r3, #0, #1
 8000c5c:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mDeviceType = 0;
 8000c5e:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000c60:	7813      	ldrb	r3, [r2, #0]
 8000c62:	f36f 0341 	bfc	r3, #1, #1
 8000c66:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mNetworkData = 1U;
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000c6a:	7813      	ldrb	r3, [r2, #0]
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	7013      	strb	r3, [r2, #0]

  error = otThreadSetLinkMode(NULL,OT_LinkMode);
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <APP_THREAD_SetSleepyEndDeviceMode+0xa0>)
 8000c74:	7819      	ldrb	r1, [r3, #0]
 8000c76:	2000      	movs	r0, #0
 8000c78:	f00a fe04 	bl	800b884 <otThreadSetLinkMode>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d004      	beq.n	8000c90 <APP_THREAD_SetSleepyEndDeviceMode+0x50>
    APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	2011      	movs	r0, #17
 8000c8c:	f7ff ff22 	bl	8000ad4 <APP_THREAD_Error>
   * to modify its mode to MTD.
   * As a result, you need to first detach from the network before switching from FTD to MTD at runtime,
   * then reattach.
   *
   */
  if (sleepyEndDeviceFlag == FALSE)
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <APP_THREAD_SetSleepyEndDeviceMode+0xa4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d11e      	bne.n	8000cd6 <APP_THREAD_SetSleepyEndDeviceMode+0x96>
  {
    error = otThreadSetEnabled(NULL, false);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f00a fdc2 	bl	800b824 <otThreadSetEnabled>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d004      	beq.n	8000cb4 <APP_THREAD_SetSleepyEndDeviceMode+0x74>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4619      	mov	r1, r3
 8000cae:	2011      	movs	r0, #17
 8000cb0:	f7ff ff10 	bl	8000ad4 <APP_THREAD_Error>
    error = otThreadSetEnabled(NULL, true);
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f00a fdb4 	bl	800b824 <otThreadSetEnabled>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d004      	beq.n	8000cd0 <APP_THREAD_SetSleepyEndDeviceMode+0x90>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2011      	movs	r0, #17
 8000ccc:	f7ff ff02 	bl	8000ad4 <APP_THREAD_Error>
    sleepyEndDeviceFlag = TRUE;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <APP_THREAD_SetSleepyEndDeviceMode+0xa4>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000cc 	.word	0x200000cc
 8000ce4:	200000d0 	.word	0x200000d0

08000ce8 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b087      	sub	sp, #28
 8000cec:	af00      	add	r7, sp, #0
  otError error;
  otNetworkKey networkKey = {{0xb3, 0x08, 0x8e, 0x0c, 0x4c, 0x97, 0x70, 0xa9,
 8000cee:	4b42      	ldr	r3, [pc, #264]	; (8000df8 <APP_THREAD_DeviceConfig+0x110>)
 8000cf0:	1d3c      	adds	r4, r7, #4
 8000cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          0xca, 0x86, 0x85, 0xab, 0x99, 0xda, 0xc9, 0x51}};

  error = otInstanceErasePersistentInfo(NULL);
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f009 fba3 	bl	800a444 <otInstanceErasePersistentInfo>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000d02:	7dfb      	ldrb	r3, [r7, #23]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d004      	beq.n	8000d12 <APP_THREAD_DeviceConfig+0x2a>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	2006      	movs	r0, #6
 8000d0e:	f7ff fee1 	bl	8000ad4 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f009 fb3a 	bl	800a38c <otInstanceFinalize>
  otInstanceInitSingle();
 8000d18:	f009 fb11 	bl	800a33e <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4937      	ldr	r1, [pc, #220]	; (8000dfc <APP_THREAD_DeviceConfig+0x114>)
 8000d20:	2000      	movs	r0, #0
 8000d22:	f009 fb59 	bl	800a3d8 <otSetStateChangedCallback>
 8000d26:	4603      	mov	r3, r0
 8000d28:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000d2a:	7dfb      	ldrb	r3, [r7, #23]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d004      	beq.n	8000d3a <APP_THREAD_DeviceConfig+0x52>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	4619      	mov	r1, r3
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff fecd 	bl	8000ad4 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8000d3a:	210e      	movs	r1, #14
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f009 fbda 	bl	800a4f6 <otLinkSetChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d004      	beq.n	8000d56 <APP_THREAD_DeviceConfig+0x6e>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	2002      	movs	r0, #2
 8000d52:	f7ff febf 	bl	8000ad4 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8000d56:	f241 1111 	movw	r1, #4369	; 0x1111
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f009 fc27 	bl	800a5ae <otLinkSetPanId>
 8000d60:	4603      	mov	r3, r0
 8000d62:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d004      	beq.n	8000d74 <APP_THREAD_DeviceConfig+0x8c>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f7ff feb0 	bl	8000ad4 <APP_THREAD_Error>
  }
  error = otThreadSetNetworkKey(NULL, &networkKey);
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f00a fdc4 	bl	800b906 <otThreadSetNetworkKey>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000d82:	7dfb      	ldrb	r3, [r7, #23]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d004      	beq.n	8000d92 <APP_THREAD_DeviceConfig+0xaa>
  {
    APP_THREAD_Error(ERR_THREAD_SET_NETWORK_KEY,error);
 8000d88:	7dfb      	ldrb	r3, [r7, #23]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	2007      	movs	r0, #7
 8000d8e:	f7ff fea1 	bl	8000ad4 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8000d92:	2101      	movs	r1, #1
 8000d94:	2000      	movs	r0, #0
 8000d96:	f009 fb7e 	bl	800a496 <otIp6SetEnabled>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <APP_THREAD_DeviceConfig+0xc6>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	4619      	mov	r1, r3
 8000da8:	2004      	movs	r0, #4
 8000daa:	f7ff fe93 	bl	8000ad4 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8000dae:	2101      	movs	r1, #1
 8000db0:	2000      	movs	r0, #0
 8000db2:	f00a fd37 	bl	800b824 <otThreadSetEnabled>
 8000db6:	4603      	mov	r3, r0
 8000db8:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d004      	beq.n	8000dca <APP_THREAD_DeviceConfig+0xe2>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8000dc0:	7dfb      	ldrb	r3, [r7, #23]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2005      	movs	r0, #5
 8000dc6:	f7ff fe85 	bl	8000ad4 <APP_THREAD_Error>
  }
  /* USER CODE BEGIN DEVICECONFIG */
  /* Start the COAP server */
  error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8000dca:	f241 6133 	movw	r1, #5683	; 0x1633
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f009 fa22 	bl	800a218 <otCoapStart>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	75fb      	strb	r3, [r7, #23]
  if (error != OT_ERROR_NONE)
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <APP_THREAD_DeviceConfig+0x100>
  {
    APP_THREAD_Error(ERR_THREAD_COAP_START,error);
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	4619      	mov	r1, r3
 8000de2:	2008      	movs	r0, #8
 8000de4:	f7ff fe76 	bl	8000ad4 <APP_THREAD_Error>
  }
  /* Add COAP resources */
  otCoapAddResource(NULL, &OT_Ressource);
 8000de8:	4905      	ldr	r1, [pc, #20]	; (8000e00 <APP_THREAD_DeviceConfig+0x118>)
 8000dea:	2000      	movs	r0, #0
 8000dec:	f009 fa44 	bl	800a278 <otCoapAddResource>

  /* USER CODE END DEVICECONFIG */
}
 8000df0:	bf00      	nop
 8000df2:	371c      	adds	r7, #28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	0800e548 	.word	0x0800e548
 8000dfc:	08000e05 	.word	0x08000e05
 8000e00:	2000000c 	.word	0x2000000c

08000e04 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */
  
  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d016      	beq.n	8000e46 <APP_THREAD_StateNotif+0x42>
  {
    switch (otThreadGetDeviceRole(NULL))
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f00a fda3 	bl	800b964 <otThreadGetDeviceRole>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d812      	bhi.n	8000e4a <APP_THREAD_StateNotif+0x46>
 8000e24:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <APP_THREAD_StateNotif+0x28>)
 8000e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2a:	bf00      	nop
 8000e2c:	08000e4b 	.word	0x08000e4b
 8000e30:	08000e4b 	.word	0x08000e4b
 8000e34:	08000e41 	.word	0x08000e41
 8000e38:	08000e4b 	.word	0x08000e4b
 8000e3c:	08000e4b 	.word	0x08000e4b
       /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */

       break;
    case OT_DEVICE_ROLE_CHILD:
       /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
    	APP_THREAD_SetSleepyEndDeviceMode();
 8000e40:	f7ff fefe 	bl	8000c40 <APP_THREAD_SetSleepyEndDeviceMode>
       break;
 8000e44:	e002      	b.n	8000e4c <APP_THREAD_StateNotif+0x48>
    default:
       /* USER CODE BEGIN DEFAULT */
       /* USER CODE END DEFAULT */
       break;
    }
  }
 8000e46:	bf00      	nop
 8000e48:	e000      	b.n	8000e4c <APP_THREAD_StateNotif+0x48>
       break;
 8000e4a:	bf00      	nop
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <APP_THREAD_TraceError+0x24>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f002 fdfb 	bl	8003a64 <logApplication>

  /* USER CODE END TRACE_ERROR */
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	0800e558 	.word	0x0800e558

08000e7c <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f00a faea 	bl	800b460 <SHCI_GetWirelessFwInfo>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d004      	beq.n	8000e9c <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8000e92:	2101      	movs	r1, #1
 8000e94:	2016      	movs	r0, #22
 8000e96:	f7ff fe1d 	bl	8000ad4 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8000e9a:	e07c      	b.n	8000f96 <APP_THREAD_CheckWirelessFirmwareInfo+0x11a>
    APP_DBG("*****************WIRELESS COPROCESSOR FW*******************");
 8000e9c:	4a40      	ldr	r2, [pc, #256]	; (8000fa0 <APP_THREAD_CheckWirelessFirmwareInfo+0x124>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f002 fddf 	bl	8003a64 <logApplication>
    APP_DBG("STACK VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	785b      	ldrb	r3, [r3, #1]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	789b      	ldrb	r3, [r3, #2]
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	9200      	str	r2, [sp, #0]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <APP_THREAD_CheckWirelessFirmwareInfo+0x128>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f002 fdcf 	bl	8003a64 <logApplication>
    APP_DBG("Version release type: %d", p_wireless_info->VersionReleaseType);
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	791b      	ldrb	r3, [r3, #4]
 8000eca:	4a37      	ldr	r2, [pc, #220]	; (8000fa8 <APP_THREAD_CheckWirelessFirmwareInfo+0x12c>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f002 fdc8 	bl	8003a64 <logApplication>
    APP_DBG("Version branch type: %d", p_wireless_info->VersionBranch);
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	78db      	ldrb	r3, [r3, #3]
 8000ed8:	4a34      	ldr	r2, [pc, #208]	; (8000fac <APP_THREAD_CheckWirelessFirmwareInfo+0x130>)
 8000eda:	2101      	movs	r1, #1
 8000edc:	2000      	movs	r0, #0
 8000ede:	f002 fdc1 	bl	8003a64 <logApplication>
    APP_DBG("FUS VERSION ID = %d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	7a9b      	ldrb	r3, [r3, #10]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	7adb      	ldrb	r3, [r3, #11]
 8000eec:	461a      	mov	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	7b1b      	ldrb	r3, [r3, #12]
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	9200      	str	r2, [sp, #0]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4a2d      	ldr	r2, [pc, #180]	; (8000fb0 <APP_THREAD_CheckWirelessFirmwareInfo+0x134>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	2000      	movs	r0, #0
 8000efe:	f002 fdb1 	bl	8003a64 <logApplication>
    APP_DBG("Stack type: %d", p_wireless_info->StackType);
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	7a5b      	ldrb	r3, [r3, #9]
 8000f06:	4a2b      	ldr	r2, [pc, #172]	; (8000fb4 <APP_THREAD_CheckWirelessFirmwareInfo+0x138>)
 8000f08:	2101      	movs	r1, #1
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f002 fdaa 	bl	8003a64 <logApplication>
    APP_DBG("MEMSIZE flash: %d", p_wireless_info->MemorySizeFlash);
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	7a1b      	ldrb	r3, [r3, #8]
 8000f14:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <APP_THREAD_CheckWirelessFirmwareInfo+0x13c>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f002 fda3 	bl	8003a64 <logApplication>
    APP_DBG("MEMSIZE sram1: %d", p_wireless_info->MemorySizeSram1);
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	79db      	ldrb	r3, [r3, #7]
 8000f22:	4a26      	ldr	r2, [pc, #152]	; (8000fbc <APP_THREAD_CheckWirelessFirmwareInfo+0x140>)
 8000f24:	2101      	movs	r1, #1
 8000f26:	2000      	movs	r0, #0
 8000f28:	f002 fd9c 	bl	8003a64 <logApplication>
    APP_DBG("MEMSIZE sram2a: %d", p_wireless_info->MemorySizeSram2A);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	799b      	ldrb	r3, [r3, #6]
 8000f30:	4a23      	ldr	r2, [pc, #140]	; (8000fc0 <APP_THREAD_CheckWirelessFirmwareInfo+0x144>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	2000      	movs	r0, #0
 8000f36:	f002 fd95 	bl	8003a64 <logApplication>
    APP_DBG("MEMSIZE sram2b: %d", p_wireless_info->MemorySizeSram2B);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	795b      	ldrb	r3, [r3, #5]
 8000f3e:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <APP_THREAD_CheckWirelessFirmwareInfo+0x148>)
 8000f40:	2101      	movs	r1, #1
 8000f42:	2000      	movs	r0, #0
 8000f44:	f002 fd8e 	bl	8003a64 <logApplication>
    switch(p_wireless_info->StackType)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	7a5b      	ldrb	r3, [r3, #9]
 8000f4c:	2b50      	cmp	r3, #80	; 0x50
 8000f4e:	d012      	beq.n	8000f76 <APP_THREAD_CheckWirelessFirmwareInfo+0xfa>
 8000f50:	2b50      	cmp	r3, #80	; 0x50
 8000f52:	dc16      	bgt.n	8000f82 <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
 8000f54:	2b10      	cmp	r3, #16
 8000f56:	d002      	beq.n	8000f5e <APP_THREAD_CheckWirelessFirmwareInfo+0xe2>
 8000f58:	2b11      	cmp	r3, #17
 8000f5a:	d006      	beq.n	8000f6a <APP_THREAD_CheckWirelessFirmwareInfo+0xee>
 8000f5c:	e011      	b.n	8000f82 <APP_THREAD_CheckWirelessFirmwareInfo+0x106>
      APP_DBG("FW Type : Thread FTD");
 8000f5e:	4a1a      	ldr	r2, [pc, #104]	; (8000fc8 <APP_THREAD_CheckWirelessFirmwareInfo+0x14c>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	2000      	movs	r0, #0
 8000f64:	f002 fd7e 	bl	8003a64 <logApplication>
      break;
 8000f68:	e010      	b.n	8000f8c <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Thread MTD");
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <APP_THREAD_CheckWirelessFirmwareInfo+0x150>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f002 fd78 	bl	8003a64 <logApplication>
      break;
 8000f74:	e00a      	b.n	8000f8c <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8000f76:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <APP_THREAD_CheckWirelessFirmwareInfo+0x154>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f002 fd72 	bl	8003a64 <logApplication>
      break;
 8000f80:	e004      	b.n	8000f8c <APP_THREAD_CheckWirelessFirmwareInfo+0x110>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8000f82:	2101      	movs	r1, #1
 8000f84:	2016      	movs	r0, #22
 8000f86:	f7ff fda5 	bl	8000ad4 <APP_THREAD_Error>
      break;
 8000f8a:	bf00      	nop
    APP_DBG("**********************************************************");
 8000f8c:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <APP_THREAD_CheckWirelessFirmwareInfo+0x158>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	2000      	movs	r0, #0
 8000f92:	f002 fd67 	bl	8003a64 <logApplication>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	0800e57c 	.word	0x0800e57c
 8000fa4:	0800e5b8 	.word	0x0800e5b8
 8000fa8:	0800e5d4 	.word	0x0800e5d4
 8000fac:	0800e5f0 	.word	0x0800e5f0
 8000fb0:	0800e608 	.word	0x0800e608
 8000fb4:	0800e624 	.word	0x0800e624
 8000fb8:	0800e634 	.word	0x0800e634
 8000fbc:	0800e648 	.word	0x0800e648
 8000fc0:	0800e65c 	.word	0x0800e65c
 8000fc4:	0800e670 	.word	0x0800e670
 8000fc8:	0800e684 	.word	0x0800e684
 8000fcc:	0800e69c 	.word	0x0800e69c
 8000fd0:	0800e6b4 	.word	0x0800e6b4
 8000fd4:	0800e6e0 	.word	0x0800e6e0

08000fd8 <APP_THREAD_CoapPermissionsRequestHandler>:
 * @retval None
 */
static void APP_THREAD_CoapPermissionsRequestHandler(void *pContext,
		otMessage *pMessage, const otMessageInfo *pMessageInfo)

{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]

  
  APP_DBG(" **********************************************************************************"
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4a38      	ldr	r2, [pc, #224]	; (80010c8 <APP_THREAD_CoapPermissionsRequestHandler+0xf0>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	2000      	movs	r0, #0
 8000fec:	f002 fd3a 	bl	8003a64 <logApplication>
		  "******************************************************************************"
		  "***********************************************************************",pContext);
  /* USER CODE BEGIN APP_THREAD_CoapRequestHandler */
  //GPIO_PinOutSet(IP_LED_PORT, IP_LED_PIN);
  //printIPv6Addr(&aMessageInfo->mPeerAddr);
  brAddr = pMessageInfo->mPeerAddr;
 8000ff0:	4a36      	ldr	r2, [pc, #216]	; (80010cc <APP_THREAD_CoapPermissionsRequestHandler+0xf4>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4614      	mov	r4, r2
 8000ff6:	3310      	adds	r3, #16
 8000ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  otError error = OT_ERROR_NONE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	77fb      	strb	r3, [r7, #31]
  otMessage *responseMessage;
  otCoapCode responseCode = OT_COAP_CODE_CHANGED;
 8001002:	2344      	movs	r3, #68	; 0x44
 8001004:	77bb      	strb	r3, [r7, #30]
  otCoapCode messageCode = otCoapMessageGetCode(pMessage);
 8001006:	68b8      	ldr	r0, [r7, #8]
 8001008:	f009 f810 	bl	800a02c <otCoapMessageGetCode>
 800100c:	4603      	mov	r3, r0
 800100e:	777b      	strb	r3, [r7, #29]

  responseMessage = otCoapNewMessage((otInstance*) pContext, NULL);
 8001010:	2100      	movs	r1, #0
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f008 fea2 	bl	8009d5c <otCoapNewMessage>
 8001018:	61b8      	str	r0, [r7, #24]

  otCoapMessageInitResponse(responseMessage, pMessage,
 800101a:	7fbb      	ldrb	r3, [r7, #30]
 800101c:	2202      	movs	r2, #2
 800101e:	68b9      	ldr	r1, [r7, #8]
 8001020:	69b8      	ldr	r0, [r7, #24]
 8001022:	f008 fefe 	bl	8009e22 <otCoapMessageInitResponse>
                            OT_COAP_TYPE_ACKNOWLEDGMENT, responseCode);
  otCoapMessageSetToken(responseMessage, otCoapMessageGetToken(pMessage),
 8001026:	68b8      	ldr	r0, [r7, #8]
 8001028:	f009 f88c 	bl	800a144 <otCoapMessageGetToken>
 800102c:	4604      	mov	r4, r0
 800102e:	68b8      	ldr	r0, [r7, #8]
 8001030:	f009 f85a 	bl	800a0e8 <otCoapMessageGetTokenLength>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	4621      	mov	r1, r4
 800103a:	69b8      	ldr	r0, [r7, #24]
 800103c:	f008 ff2f 	bl	8009e9e <otCoapMessageSetToken>
                        otCoapMessageGetTokenLength(pMessage));
  otCoapMessageSetPayloadMarker(responseMessage);
 8001040:	69b8      	ldr	r0, [r7, #24]
 8001042:	f008 ffc5 	bl	8009fd0 <otCoapMessageSetPayloadMarker>


  uint16_t offset = otMessageGetOffset(pMessage);
 8001046:	68b8      	ldr	r0, [r7, #8]
 8001048:	f009 fb3d 	bl	800a6c6 <otMessageGetOffset>
 800104c:	4603      	mov	r3, r0
 800104e:	82fb      	strh	r3, [r7, #22]
  otMessageRead(pMessage, offset, resource_name, sizeof(resource_name)-1);
 8001050:	8af9      	ldrh	r1, [r7, #22]
 8001052:	231f      	movs	r3, #31
 8001054:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <APP_THREAD_CoapPermissionsRequestHandler+0xf8>)
 8001056:	68b8      	ldr	r0, [r7, #8]
 8001058:	f009 fb9e 	bl	800a798 <otMessageRead>
  //otCliOutputFormat("Unique resource ID: %s\n", resource_name);

  if (OT_COAP_CODE_GET == messageCode)
 800105c:	7f7b      	ldrb	r3, [r7, #29]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10e      	bne.n	8001080 <APP_THREAD_CoapPermissionsRequestHandler+0xa8>
  {

      error = otMessageAppend(responseMessage, "ack", 3);
 8001062:	2203      	movs	r2, #3
 8001064:	491b      	ldr	r1, [pc, #108]	; (80010d4 <APP_THREAD_CoapPermissionsRequestHandler+0xfc>)
 8001066:	69b8      	ldr	r0, [r7, #24]
 8001068:	f009 fb5d 	bl	800a726 <otMessageAppend>
 800106c:	4603      	mov	r3, r0
 800106e:	77fb      	strb	r3, [r7, #31]
      error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	69b9      	ldr	r1, [r7, #24]
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f7ff fccb 	bl	8000a10 <otCoapSendResponse>
 800107a:	4603      	mov	r3, r0
 800107c:	77fb      	strb	r3, [r7, #31]
 800107e:	e011      	b.n	80010a4 <APP_THREAD_CoapPermissionsRequestHandler+0xcc>
                                 pMessageInfo);
  }
  else
  {
      error = otMessageAppend(responseMessage, "nack", 4);
 8001080:	2204      	movs	r2, #4
 8001082:	4915      	ldr	r1, [pc, #84]	; (80010d8 <APP_THREAD_CoapPermissionsRequestHandler+0x100>)
 8001084:	69b8      	ldr	r0, [r7, #24]
 8001086:	f009 fb4e 	bl	800a726 <otMessageAppend>
 800108a:	4603      	mov	r3, r0
 800108c:	77fb      	strb	r3, [r7, #31]
      otCoapMessageSetCode(responseMessage, OT_COAP_CODE_METHOD_NOT_ALLOWED);
 800108e:	2185      	movs	r1, #133	; 0x85
 8001090:	69b8      	ldr	r0, [r7, #24]
 8001092:	f008 fff9 	bl	800a088 <otCoapMessageSetCode>
      error = otCoapSendResponse((otInstance*) pContext, responseMessage,
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	69b9      	ldr	r1, [r7, #24]
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff fcb8 	bl	8000a10 <otCoapSendResponse>
 80010a0:	4603      	mov	r3, r0
 80010a2:	77fb      	strb	r3, [r7, #31]
                                 pMessageInfo);
  }

  if (error != OT_ERROR_NONE && responseMessage != NULL)
 80010a4:	7ffb      	ldrb	r3, [r7, #31]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <APP_THREAD_CoapPermissionsRequestHandler+0xde>
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <APP_THREAD_CoapPermissionsRequestHandler+0xde>
  {
      otMessageFree(responseMessage);
 80010b0:	69b8      	ldr	r0, [r7, #24]
 80010b2:	f009 fadb 	bl	800a66c <otMessageFree>
  }


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2102      	movs	r1, #2
 80010ba:	4808      	ldr	r0, [pc, #32]	; (80010dc <APP_THREAD_CoapPermissionsRequestHandler+0x104>)
 80010bc:	f003 fd78 	bl	8004bb0 <HAL_GPIO_WritePin>
}
 80010c0:	bf00      	nop
 80010c2:	3724      	adds	r7, #36	; 0x24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	0800e804 	.word	0x0800e804
 80010cc:	20000408 	.word	0x20000408
 80010d0:	200003e8 	.word	0x200003e8
 80010d4:	0800e9d8 	.word	0x0800e9d8
 80010d8:	0800e9dc 	.word	0x0800e9dc
 80010dc:	48000800 	.word	0x48000800

080010e0 <APP_THREAD_SendCoapMsg>:
/**
 * @brief Task associated to the push button.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(char *buf, bool require_ack) {
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	b0a5      	sub	sp, #148	; 0x94
 80010e4:	af0c      	add	r7, sp, #48	; 0x30
 80010e6:	6178      	str	r0, [r7, #20]
 80010e8:	460b      	mov	r3, r1
 80010ea:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2102      	movs	r1, #2
 80010f0:	4868      	ldr	r0, [pc, #416]	; (8001294 <APP_THREAD_SendCoapMsg+0x1b4>)
 80010f2:	f003 fd5d 	bl	8004bb0 <HAL_GPIO_WritePin>
	int8_t rssi;
	sht4x_measure();
 80010f6:	f7ff fb71 	bl	80007dc <sht4x_measure>
	otThreadGetParentLastRssi(NULL, &rssi);
 80010fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010fe:	4619      	mov	r1, r3
 8001100:	2000      	movs	r0, #0
 8001102:	f00a fc58 	bl	800b9b6 <otThreadGetParentLastRssi>
	 * opt_buf (uint32_t): light levels in lux
	 * vdd_meas (uint32_t): supply voltage in mV
	 * rssi (int8_t): last rssi from parent
	 * appCoapSendTxCtr (uint32_t): total CoAP transmissions
	 */
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 8001106:	2301      	movs	r3, #1
 8001108:	469e      	mov	lr, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <APP_THREAD_SendCoapMsg+0x1b8>)
 800110c:	781b      	ldrb	r3, [r3, #0]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 800110e:	4619      	mov	r1, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 8001110:	4b61      	ldr	r3, [pc, #388]	; (8001298 <APP_THREAD_SendCoapMsg+0x1b8>)
 8001112:	785b      	ldrb	r3, [r3, #1]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 8001114:	4618      	mov	r0, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 8001116:	4b60      	ldr	r3, [pc, #384]	; (8001298 <APP_THREAD_SendCoapMsg+0x1b8>)
 8001118:	789b      	ldrb	r3, [r3, #2]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 800111a:	461c      	mov	r4, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 800111c:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <APP_THREAD_SendCoapMsg+0x1b8>)
 800111e:	78db      	ldrb	r3, [r3, #3]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 8001120:	461d      	mov	r5, r3
			eui64.m8[0], eui64.m8[1], eui64.m8[02], eui64.m8[3], eui64.m8[4],
 8001122:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <APP_THREAD_SendCoapMsg+0x1b8>)
 8001124:	791b      	ldrb	r3, [r3, #4]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 8001126:	461e      	mov	r6, r3
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 8001128:	4b5b      	ldr	r3, [pc, #364]	; (8001298 <APP_THREAD_SendCoapMsg+0x1b8>)
 800112a:	795b      	ldrb	r3, [r3, #5]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 800112c:	60fb      	str	r3, [r7, #12]
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 800112e:	4b5a      	ldr	r3, [pc, #360]	; (8001298 <APP_THREAD_SendCoapMsg+0x1b8>)
 8001130:	799b      	ldrb	r3, [r3, #6]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 8001132:	60bb      	str	r3, [r7, #8]
			eui64.m8[5], eui64.m8[6], eui64.m8[7], sensor_data.temp_main,
 8001134:	4b58      	ldr	r3, [pc, #352]	; (8001298 <APP_THREAD_SendCoapMsg+0x1b8>)
 8001136:	79db      	ldrb	r3, [r3, #7]
	snprintf(tmp_tx_buf, 254, "%d,%x%x%x%x%x%x%x%x,%ld,%ld,%d", device_type,
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b58      	ldr	r3, [pc, #352]	; (800129c <APP_THREAD_SendCoapMsg+0x1bc>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4a57      	ldr	r2, [pc, #348]	; (800129c <APP_THREAD_SendCoapMsg+0x1bc>)
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	603a      	str	r2, [r7, #0]
 8001144:	f997 c054 	ldrsb.w	ip, [r7, #84]	; 0x54
 8001148:	4662      	mov	r2, ip
 800114a:	920a      	str	r2, [sp, #40]	; 0x28
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	9209      	str	r2, [sp, #36]	; 0x24
 8001150:	9308      	str	r3, [sp, #32]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	9207      	str	r2, [sp, #28]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	9206      	str	r2, [sp, #24]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	9305      	str	r3, [sp, #20]
 800115e:	9604      	str	r6, [sp, #16]
 8001160:	9503      	str	r5, [sp, #12]
 8001162:	9402      	str	r4, [sp, #8]
 8001164:	9001      	str	r0, [sp, #4]
 8001166:	9100      	str	r1, [sp, #0]
 8001168:	4673      	mov	r3, lr
 800116a:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <APP_THREAD_SendCoapMsg+0x1c0>)
 800116c:	21fe      	movs	r1, #254	; 0xfe
 800116e:	484d      	ldr	r0, [pc, #308]	; (80012a4 <APP_THREAD_SendCoapMsg+0x1c4>)
 8001170:	f00b ff20 	bl	800cfb4 <sniprintf>
			sensor_data.humidity, rssi);
	buf = tmp_tx_buf;
 8001174:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <APP_THREAD_SendCoapMsg+0x1c4>)
 8001176:	617b      	str	r3, [r7, #20]
	APP_DBG("In appthread handler*");
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <APP_THREAD_SendCoapMsg+0x1c8>)
 800117a:	2101      	movs	r1, #1
 800117c:	2000      	movs	r0, #0
 800117e:	f002 fc71 	bl	8003a64 <logApplication>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8001182:	2101      	movs	r1, #1
 8001184:	4843      	ldr	r0, [pc, #268]	; (8001294 <APP_THREAD_SendCoapMsg+0x1b4>)
 8001186:	f003 fd2b 	bl	8004be0 <HAL_GPIO_TogglePin>
	otError error = OT_ERROR_NONE;
 800118a:	2300      	movs	r3, #0
 800118c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	otMessage *message = NULL;
 8001190:	2300      	movs	r3, #0
 8001192:	65bb      	str	r3, [r7, #88]	; 0x58
	otMessageInfo messageInfo;
	uint16_t payloadLength = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	// Default parameters
	otCoapType coapType =
			require_ack ?
					OT_COAP_TYPE_CONFIRMABLE : OT_COAP_TYPE_NON_CONFIRMABLE;
 800119a:	7cfb      	ldrb	r3, [r7, #19]
 800119c:	f083 0301 	eor.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
	otCoapType coapType =
 80011a2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	otIp6Address coapDestinationIp = brAddr;
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <APP_THREAD_SendCoapMsg+0x1cc>)
 80011a8:	f107 0418 	add.w	r4, r7, #24
 80011ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	message = otCoapNewMessage(NULL, NULL);
 80011b2:	2100      	movs	r1, #0
 80011b4:	2000      	movs	r0, #0
 80011b6:	f008 fdd1 	bl	8009d5c <otCoapNewMessage>
 80011ba:	65b8      	str	r0, [r7, #88]	; 0x58

	otCoapMessageInit(message, coapType, OT_COAP_CODE_PUT);
 80011bc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80011c0:	2203      	movs	r2, #3
 80011c2:	4619      	mov	r1, r3
 80011c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80011c6:	f008 fdf7 	bl	8009db8 <otCoapMessageInit>
	otCoapMessageGenerateToken(message, OT_COAP_DEFAULT_TOKEN_LENGTH);
 80011ca:	2102      	movs	r1, #2
 80011cc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80011ce:	f008 fe9d 	bl	8009f0c <otCoapMessageGenerateToken>
	error = otCoapMessageAppendUriPathOptions(message, resource_name);
 80011d2:	4937      	ldr	r1, [pc, #220]	; (80012b0 <APP_THREAD_SendCoapMsg+0x1d0>)
 80011d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80011d6:	f008 fec9 	bl	8009f6c <otCoapMessageAppendUriPathOptions>
 80011da:	4603      	mov	r3, r0
 80011dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	payloadLength = strlen(buf);
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f7fe ffd7 	bl	8000194 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	if (payloadLength > 0) {
 80011ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <APP_THREAD_SendCoapMsg+0x120>
		error = otCoapMessageSetPayloadMarker(message);
 80011f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80011f6:	f008 feeb 	bl	8009fd0 <otCoapMessageSetPayloadMarker>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	}

	// Embed content into message if given
	if (payloadLength > 0) {
 8001200:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <APP_THREAD_SendCoapMsg+0x13c>
		error = otMessageAppend(message, buf, payloadLength);
 8001208:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800120c:	461a      	mov	r2, r3
 800120e:	6979      	ldr	r1, [r7, #20]
 8001210:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001212:	f009 fa88 	bl	800a726 <otMessageAppend>
 8001216:	4603      	mov	r3, r0
 8001218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	memset(&messageInfo, 0, sizeof(messageInfo));
 800121c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001220:	222c      	movs	r2, #44	; 0x2c
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f00b fea5 	bl	800cf74 <memset>
	messageInfo.mPeerAddr = coapDestinationIp;
 800122a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	messageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8001238:	f241 6333 	movw	r3, #5683	; 0x1633
 800123c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	error = otCoapSendRequestWithParameters(NULL, message, &messageInfo, NULL,
 8001240:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001244:	2300      	movs	r3, #0
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	2300      	movs	r3, #0
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001250:	2000      	movs	r0, #0
 8001252:	f008 ffa4 	bl	800a19e <otCoapSendRequestWithParameters>
 8001256:	4603      	mov	r3, r0
 8001258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			NULL,
			NULL);

	if ((error != OT_ERROR_NONE) && (message != NULL)) {
 800125c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <APP_THREAD_SendCoapMsg+0x190>
 8001264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <APP_THREAD_SendCoapMsg+0x190>
		otMessageFree(message);
 800126a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800126c:	f009 f9fe 	bl	800a66c <otMessageFree>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2102      	movs	r1, #2
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <APP_THREAD_SendCoapMsg+0x1b4>)
 8001276:	f003 fc9b 	bl	8004bb0 <HAL_GPIO_WritePin>
	sht4x_read(sensor_data.temp_main, sensor_data.humidity);
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <APP_THREAD_SendCoapMsg+0x1bc>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	461a      	mov	r2, r3
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <APP_THREAD_SendCoapMsg+0x1bc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	4610      	mov	r0, r2
 8001288:	f7ff fab6 	bl	80007f8 <sht4x_read>
}
 800128c:	bf00      	nop
 800128e:	3764      	adds	r7, #100	; 0x64
 8001290:	46bd      	mov	sp, r7
 8001292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001294:	48000800 	.word	0x48000800
 8001298:	20000418 	.word	0x20000418
 800129c:	20000774 	.word	0x20000774
 80012a0:	0800eab4 	.word	0x0800eab4
 80012a4:	200002e8 	.word	0x200002e8
 80012a8:	0800ead4 	.word	0x0800ead4
 80012ac:	20000408 	.word	0x20000408
 80012b0:	200003e8 	.word	0x200003e8

080012b4 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200002d8 	.word	0x200002d8

080012d4 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	330c      	adds	r3, #12
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	200002d8 	.word	0x200002d8

080012ec <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	330b      	adds	r3, #11
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	200002d8 	.word	0x200002d8

08001304 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	330b      	adds	r3, #11
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	200002dc 	.word	0x200002dc

0800131c <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <Ot_Cmd_Transfer_Common+0x44>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800132c:	725a      	strb	r2, [r3, #9]
 800132e:	2200      	movs	r2, #0
 8001330:	f042 0202 	orr.w	r2, r2, #2
 8001334:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <Ot_Cmd_Transfer_Common+0x44>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	330c      	adds	r3, #12
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	3302      	adds	r3, #2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <Ot_Cmd_Transfer_Common+0x44>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 800134e:	f00a fc79 	bl	800bc44 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8001352:	f000 f834 	bl	80013be <Wait_Getting_Ack_From_M0>

}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200002d8 	.word	0x200002d8

08001364 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  Ot_Cmd_Transfer_Common();
 8001368:	f7ff ffd8 	bl	800131c <Ot_Cmd_Transfer_Common>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8001378:	f000 f828 	bl	80013cc <Receive_Ack_From_M0>

  /* Does not allow OpenThread M0 to M4 notification */
  g_ot_notification_allowed = 0U;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <TL_OT_CmdEvtReceived+0x1c>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000424 	.word	0x20000424

08001390 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <TL_THREAD_NotReceived+0x1c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800139e:	f000 f81d 	bl	80013dc <Receive_Notification_From_M0>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002dc 	.word	0x200002dc

080013b0 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80013b4:	2004      	movs	r0, #4
 80013b6:	f00b f851 	bl	800c45c <UTIL_SEQ_WaitEvt>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}

080013be <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 80013c2:	2002      	movs	r0, #2
 80013c4:	f00b f84a 	bl	800c45c <UTIL_SEQ_WaitEvt>
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 80013d0:	2002      	movs	r0, #2
 80013d2:	f00b f823 	bl	800c41c <UTIL_SEQ_SetEvt>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <Receive_Notification_From_M0+0x1c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <Receive_Notification_From_M0+0x1c>)
 80013e8:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4,CFG_SCH_PRIO_0);
 80013ea:	2100      	movs	r1, #0
 80013ec:	2001      	movs	r0, #1
 80013ee:	f00a ffe9 	bl	800c3c4 <UTIL_SEQ_SetTask>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200002e0 	.word	0x200002e0

080013fc <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <RxCpltCallback+0x4c>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	b29b      	uxth	r3, r3
 8001406:	2bff      	cmp	r3, #255	; 0xff
 8001408:	d816      	bhi.n	8001438 <RxCpltCallback+0x3c>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <RxCpltCallback+0x4c>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	b291      	uxth	r1, r2
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <RxCpltCallback+0x4c>)
 8001416:	8011      	strh	r1, [r2, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <RxCpltCallback+0x50>)
 800141c:	7819      	ldrb	r1, [r3, #0]
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <RxCpltCallback+0x54>)
 8001420:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <RxCpltCallback+0x50>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b0d      	cmp	r3, #13
 8001428:	d106      	bne.n	8001438 <RxCpltCallback+0x3c>
    {
      CptReceiveCmdFromUser = 1U;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <RxCpltCallback+0x58>)
 800142c:	2201      	movs	r2, #1
 800142e:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      UTIL_SEQ_SetTask(1U << CFG_TASK_SEND_CLI_TO_M0, CFG_SCH_PRIO_0);
 8001430:	2100      	movs	r1, #0
 8001432:	2002      	movs	r0, #2
 8001434:	f00a ffc6 	bl	800c3c4 <UTIL_SEQ_SetTask>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <RxCpltCallback+0x5c>)
 800143a:	2201      	movs	r2, #1
 800143c:	4903      	ldr	r1, [pc, #12]	; (800144c <RxCpltCallback+0x50>)
 800143e:	2002      	movs	r0, #2
 8001440:	f001 fc8c 	bl	8002d5c <HW_UART_Receive_IT>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200002d4 	.word	0x200002d4
 800144c:	200000d4 	.word	0x200000d4
 8001450:	200001d4 	.word	0x200001d4
 8001454:	200002d6 	.word	0x200002d6
 8001458:	080013fd 	.word	0x080013fd

0800145c <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8001460:	22ff      	movs	r2, #255	; 0xff
 8001462:	2100      	movs	r1, #0
 8001464:	4812      	ldr	r0, [pc, #72]	; (80014b0 <Send_CLI_To_M0+0x54>)
 8001466:	f00b fd85 	bl	800cf74 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <Send_CLI_To_M0+0x58>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	4911      	ldr	r1, [pc, #68]	; (80014b8 <Send_CLI_To_M0+0x5c>)
 8001474:	480e      	ldr	r0, [pc, #56]	; (80014b0 <Send_CLI_To_M0+0x54>)
 8001476:	f00b fd6f 	bl	800cf58 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <Send_CLI_To_M0+0x58>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <Send_CLI_To_M0+0x60>)
 8001484:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <Send_CLI_To_M0+0x60>)
 8001488:	2200      	movs	r2, #0
 800148a:	725a      	strb	r2, [r3, #9]
 800148c:	2200      	movs	r2, #0
 800148e:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <Send_CLI_To_M0+0x64>)
 8001492:	2200      	movs	r2, #0
 8001494:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <Send_CLI_To_M0+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 800149c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a0:	2100      	movs	r1, #0
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <Send_CLI_To_M0+0x5c>)
 80014a4:	f00b fd66 	bl	800cf74 <memset>

  TL_CLI_SendCmd();
 80014a8:	f00a fbda 	bl	800bc60 <TL_CLI_SendCmd>
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2003030c 	.word	0x2003030c
 80014b4:	200002d4 	.word	0x200002d4
 80014b8:	200001d4 	.word	0x200001d4
 80014bc:	20030300 	.word	0x20030300
 80014c0:	200002d6 	.word	0x200002d6

080014c4 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 80014c8:	f00a fbe6 	bl	800bc98 <TL_THREAD_CliSendAck>

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SEND_CLI_TO_M0, UTIL_SEQ_RFU,Send_CLI_To_M0);
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <APP_THREAD_Init_UART_CLI+0x24>)
 80014d6:	2100      	movs	r1, #0
 80014d8:	2002      	movs	r0, #2
 80014da:	f00a ff51 	bl	800c380 <UTIL_SEQ_RegTask>
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_LPUART1_UART_Init();
 80014de:	f001 fe61 	bl	80031a4 <MX_LPUART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <APP_THREAD_Init_UART_CLI+0x28>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	4905      	ldr	r1, [pc, #20]	; (80014fc <APP_THREAD_Init_UART_CLI+0x2c>)
 80014e8:	2002      	movs	r0, #2
 80014ea:	f001 fc37 	bl	8002d5c <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	0800145d 	.word	0x0800145d
 80014f8:	080013fd 	.word	0x080013fd
 80014fc:	200000d4 	.word	0x200000d4

08001500 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001506:	4a09      	ldr	r2, [pc, #36]	; (800152c <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8001508:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800150c:	4a08      	ldr	r2, [pc, #32]	; (8001530 <APP_THREAD_TL_THREAD_INIT+0x30>)
 800150e:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <APP_THREAD_TL_THREAD_INIT+0x34>)
 8001514:	605a      	str	r2, [r3, #4]
  ThreadConfigBuffer.p_ThreadCliNotBuffer = (uint8_t*)&ThreadCliNotBuffer;
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <APP_THREAD_TL_THREAD_INIT+0x38>)
 800151a:	60da      	str	r2, [r3, #12]

  TL_THREAD_Init( &ThreadConfigBuffer );
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800151e:	f00a fb71 	bl	800bc04 <TL_THREAD_Init>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20030028 	.word	0x20030028
 800152c:	200300e8 	.word	0x200300e8
 8001530:	200301f4 	.word	0x200301f4
 8001534:	20030300 	.word	0x20030300
 8001538:	2003040c 	.word	0x2003040c

0800153c <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	7adb      	ldrb	r3, [r3, #11]
 800154c:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	330c      	adds	r3, #12
 8001552:	490b      	ldr	r1, [pc, #44]	; (8001580 <TL_THREAD_CliNotReceived+0x44>)
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe fe13 	bl	8000180 <strcmp>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d009      	beq.n	8001574 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f103 010c 	add.w	r1, r3, #12
 8001566:	7afb      	ldrb	r3, [r7, #11]
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <TL_THREAD_CliNotReceived+0x48>)
 800156c:	2002      	movs	r0, #2
 800156e:	f001 fc2f 	bl	8002dd0 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 8001572:	e001      	b.n	8001578 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 8001574:	f7ff ffa6 	bl	80014c4 <Send_CLI_Ack_For_OT>
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	0800eb04 	.word	0x0800eb04
 8001584:	08001589 	.word	0x08001589

08001588 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 800158c:	f7ff ff9a 	bl	80014c4 <Send_CLI_Ack_For_OT>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00d      	beq.n	80015bc <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d904      	bls.n	80015b2 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80015a8:	2100      	movs	r1, #0
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff fa92 	bl	8000ad4 <APP_THREAD_Error>
 80015b0:	e001      	b.n	80015b6 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 80015b2:	f009 f931 	bl	800a818 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 80015b6:	4b02      	ldr	r3, [pc, #8]	; (80015c0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
  }
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200002e0 	.word	0x200002e0

080015c4 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <LL_PWR_EnableBootC2+0x1c>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <LL_PWR_EnableBootC2+0x1c>)
 80015ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	58000400 	.word	0x58000400

080015e4 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80015ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80015f2:	4905      	ldr	r1, [pc, #20]	; (8001608 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	58000800 	.word	0x58000800

0800160c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	4904      	ldr	r1, [pc, #16]	; (800162c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4313      	orrs	r3, r2
 800161e:	620b      	str	r3, [r1, #32]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	58000800 	.word	0x58000800

08001630 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800163e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4313      	orrs	r3, r2
 8001646:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001654:	68fb      	ldr	r3, [r7, #12]
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800166a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001672:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800167e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001682:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800168c:	68fb      	ldr	r3, [r7, #12]
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f043 0201 	orr.w	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	601a      	str	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	041b      	lsls	r3, r3, #16
 80016ec:	43db      	mvns	r3, r3
 80016ee:	401a      	ands	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	605a      	str	r2, [r3, #4]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	605a      	str	r2, [r3, #4]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	43db      	mvns	r3, r3
 8001736:	401a      	ands	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	605a      	str	r2, [r3, #4]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	609a      	str	r2, [r3, #8]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	041a      	lsls	r2, r3, #16
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	4013      	ands	r3, r2
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d101      	bne.n	80017c0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4013      	ands	r3, r2
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d101      	bne.n	80017ea <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80017fc:	2102      	movs	r1, #2
 80017fe:	482a      	ldr	r0, [pc, #168]	; (80018a8 <HW_IPCC_Rx_Handler+0xb0>)
 8001800:	f7ff ffe5 	bl	80017ce <LL_C2_IPCC_IsActiveFlag_CHx>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HW_IPCC_Rx_Handler+0x26>
 800180a:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HW_IPCC_Rx_Handler+0xb0>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	43db      	mvns	r3, r3
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001818:	f000 f8f8 	bl	8001a0c <HW_IPCC_SYS_EvtHandler>
 800181c:	e041      	b.n	80018a2 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800181e:	2104      	movs	r1, #4
 8001820:	4821      	ldr	r0, [pc, #132]	; (80018a8 <HW_IPCC_Rx_Handler+0xb0>)
 8001822:	f7ff ffd4 	bl	80017ce <LL_C2_IPCC_IsActiveFlag_CHx>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <HW_IPCC_Rx_Handler+0x48>
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HW_IPCC_Rx_Handler+0xb0>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	43db      	mvns	r3, r3
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 800183a:	f000 f941 	bl	8001ac0 <HW_IPCC_THREAD_NotEvtHandler>
 800183e:	e030      	b.n	80018a2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8001840:	2110      	movs	r1, #16
 8001842:	4819      	ldr	r0, [pc, #100]	; (80018a8 <HW_IPCC_Rx_Handler+0xb0>)
 8001844:	f7ff ffc3 	bl	80017ce <LL_C2_IPCC_IsActiveFlag_CHx>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <HW_IPCC_Rx_Handler+0x6a>
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HW_IPCC_Rx_Handler+0xb0>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	43db      	mvns	r3, r3
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 800185c:	f000 f93c 	bl	8001ad8 <HW_IPCC_THREAD_CliNotEvtHandler>
 8001860:	e01f      	b.n	80018a2 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001862:	2101      	movs	r1, #1
 8001864:	4810      	ldr	r0, [pc, #64]	; (80018a8 <HW_IPCC_Rx_Handler+0xb0>)
 8001866:	f7ff ffb2 	bl	80017ce <LL_C2_IPCC_IsActiveFlag_CHx>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HW_IPCC_Rx_Handler+0x8a>
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HW_IPCC_Rx_Handler+0xb0>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 800187c:	f000 f88a 	bl	8001994 <HW_IPCC_BLE_EvtHandler>
 8001880:	e00f      	b.n	80018a2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001882:	2108      	movs	r1, #8
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <HW_IPCC_Rx_Handler+0xb0>)
 8001886:	f7ff ffa2 	bl	80017ce <LL_C2_IPCC_IsActiveFlag_CHx>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d009      	beq.n	80018a4 <HW_IPCC_Rx_Handler+0xac>
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HW_IPCC_Rx_Handler+0xb0>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	43db      	mvns	r3, r3
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 800189e:	f000 f967 	bl	8001b70 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80018a2:	bf00      	nop
 80018a4:	bf00      	nop
}
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58000c00 	.word	0x58000c00

080018ac <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80018b0:	2102      	movs	r1, #2
 80018b2:	4822      	ldr	r0, [pc, #136]	; (800193c <HW_IPCC_Tx_Handler+0x90>)
 80018b4:	f7ff ff76 	bl	80017a4 <LL_C1_IPCC_IsActiveFlag_CHx>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HW_IPCC_Tx_Handler+0x26>
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <HW_IPCC_Tx_Handler+0x90>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80018cc:	f000 f892 	bl	80019f4 <HW_IPCC_SYS_CmdEvtHandler>
 80018d0:	e031      	b.n	8001936 <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 80018d2:	2104      	movs	r1, #4
 80018d4:	4819      	ldr	r0, [pc, #100]	; (800193c <HW_IPCC_Tx_Handler+0x90>)
 80018d6:	f7ff ff65 	bl	80017a4 <LL_C1_IPCC_IsActiveFlag_CHx>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d109      	bne.n	80018f4 <HW_IPCC_Tx_Handler+0x48>
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <HW_IPCC_Tx_Handler+0x90>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 80018ee:	f000 f8db 	bl	8001aa8 <HW_IPCC_OT_CmdEvtHandler>
 80018f2:	e020      	b.n	8001936 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80018f4:	2108      	movs	r1, #8
 80018f6:	4811      	ldr	r0, [pc, #68]	; (800193c <HW_IPCC_Tx_Handler+0x90>)
 80018f8:	f7ff ff54 	bl	80017a4 <LL_C1_IPCC_IsActiveFlag_CHx>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HW_IPCC_Tx_Handler+0x6a>
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HW_IPCC_Tx_Handler+0x90>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	43db      	mvns	r3, r3
 8001908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001910:	f000 f910 	bl	8001b34 <HW_IPCC_MM_FreeBufHandler>
 8001914:	e00f      	b.n	8001936 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001916:	2120      	movs	r1, #32
 8001918:	4808      	ldr	r0, [pc, #32]	; (800193c <HW_IPCC_Tx_Handler+0x90>)
 800191a:	f7ff ff43 	bl	80017a4 <LL_C1_IPCC_IsActiveFlag_CHx>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d109      	bne.n	8001938 <HW_IPCC_Tx_Handler+0x8c>
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HW_IPCC_Tx_Handler+0x90>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	43db      	mvns	r3, r3
 800192a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001932:	f000 f83b 	bl	80019ac <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001936:	bf00      	nop
 8001938:	bf00      	nop
}
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58000c00 	.word	0x58000c00

08001940 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001944:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001948:	f7ff fe8b 	bl	8001662 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800194c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001950:	f7ff fe5c 	bl	800160c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001954:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001958:	f7ff fe44 	bl	80015e4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800195c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800195e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001960:	f7ff fe30 	bl	80015c4 <LL_PWR_EnableBootC2>

  return;
 8001964:	bf00      	nop
}
 8001966:	bd80      	pop	{r7, pc}

08001968 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800196c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001970:	f7ff fe5e 	bl	8001630 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001974:	4806      	ldr	r0, [pc, #24]	; (8001990 <HW_IPCC_Init+0x28>)
 8001976:	f7ff fea0 	bl	80016ba <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <HW_IPCC_Init+0x28>)
 800197c:	f7ff fe8d 	bl	800169a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001980:	202c      	movs	r0, #44	; 0x2c
 8001982:	f002 fb6c 	bl	800405e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001986:	202d      	movs	r0, #45	; 0x2d
 8001988:	f002 fb69 	bl	800405e <HAL_NVIC_EnableIRQ>

  return;
 800198c:	bf00      	nop
}
 800198e:	bd80      	pop	{r7, pc}
 8001990:	58000c00 	.word	0x58000c00

08001994 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001998:	f00a f87c 	bl	800ba94 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800199c:	2101      	movs	r1, #1
 800199e:	4802      	ldr	r0, [pc, #8]	; (80019a8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80019a0:	f7ff fee3 	bl	800176a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80019a4:	bf00      	nop
}
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	58000c00 	.word	0x58000c00

080019ac <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80019b0:	2120      	movs	r1, #32
 80019b2:	4803      	ldr	r0, [pc, #12]	; (80019c0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80019b4:	f7ff fea4 	bl	8001700 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80019b8:	f00a f89c 	bl	800baf4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80019bc:	bf00      	nop
}
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	58000c00 	.word	0x58000c00

080019c4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80019c8:	2102      	movs	r1, #2
 80019ca:	4802      	ldr	r0, [pc, #8]	; (80019d4 <HW_IPCC_SYS_Init+0x10>)
 80019cc:	f7ff feaa 	bl	8001724 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80019d0:	bf00      	nop
}
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	58000c00 	.word	0x58000c00

080019d8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80019dc:	2102      	movs	r1, #2
 80019de:	4804      	ldr	r0, [pc, #16]	; (80019f0 <HW_IPCC_SYS_SendCmd+0x18>)
 80019e0:	f7ff fed1 	bl	8001786 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80019e4:	2102      	movs	r1, #2
 80019e6:	4802      	ldr	r0, [pc, #8]	; (80019f0 <HW_IPCC_SYS_SendCmd+0x18>)
 80019e8:	f7ff fe77 	bl	80016da <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80019ec:	bf00      	nop
}
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	58000c00 	.word	0x58000c00

080019f4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80019f8:	2102      	movs	r1, #2
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80019fc:	f7ff fe80 	bl	8001700 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001a00:	f00a f8c8 	bl	800bb94 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001a04:	bf00      	nop
}
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	58000c00 	.word	0x58000c00

08001a0c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001a10:	f00a f8d6 	bl	800bbc0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001a14:	2102      	movs	r1, #2
 8001a16:	4802      	ldr	r0, [pc, #8]	; (8001a20 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001a18:	f7ff fea7 	bl	800176a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001a1c:	bf00      	nop
}
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	58000c00 	.word	0x58000c00

08001a24 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001a28:	2104      	movs	r1, #4
 8001a2a:	4804      	ldr	r0, [pc, #16]	; (8001a3c <HW_IPCC_THREAD_Init+0x18>)
 8001a2c:	f7ff fe7a 	bl	8001724 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001a30:	2110      	movs	r1, #16
 8001a32:	4802      	ldr	r0, [pc, #8]	; (8001a3c <HW_IPCC_THREAD_Init+0x18>)
 8001a34:	f7ff fe76 	bl	8001724 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001a38:	bf00      	nop
}
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	58000c00 	.word	0x58000c00

08001a40 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001a44:	2104      	movs	r1, #4
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <HW_IPCC_OT_SendCmd+0x18>)
 8001a48:	f7ff fe9d 	bl	8001786 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001a4c:	2104      	movs	r1, #4
 8001a4e:	4802      	ldr	r0, [pc, #8]	; (8001a58 <HW_IPCC_OT_SendCmd+0x18>)
 8001a50:	f7ff fe43 	bl	80016da <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001a54:	bf00      	nop
}
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	58000c00 	.word	0x58000c00

08001a5c <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8001a60:	2110      	movs	r1, #16
 8001a62:	4802      	ldr	r0, [pc, #8]	; (8001a6c <HW_IPCC_CLI_SendCmd+0x10>)
 8001a64:	f7ff fe8f 	bl	8001786 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001a68:	bf00      	nop
}
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	58000c00 	.word	0x58000c00

08001a70 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001a74:	2104      	movs	r1, #4
 8001a76:	4804      	ldr	r0, [pc, #16]	; (8001a88 <HW_IPCC_THREAD_SendAck+0x18>)
 8001a78:	f7ff fe77 	bl	800176a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	4802      	ldr	r0, [pc, #8]	; (8001a88 <HW_IPCC_THREAD_SendAck+0x18>)
 8001a80:	f7ff fe50 	bl	8001724 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001a84:	bf00      	nop
}
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	58000c00 	.word	0x58000c00

08001a8c <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001a90:	2110      	movs	r1, #16
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001a94:	f7ff fe69 	bl	800176a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001a98:	2110      	movs	r1, #16
 8001a9a:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8001a9c:	f7ff fe42 	bl	8001724 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001aa0:	bf00      	nop
}
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	58000c00 	.word	0x58000c00

08001aa8 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8001aac:	2104      	movs	r1, #4
 8001aae:	4803      	ldr	r0, [pc, #12]	; (8001abc <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8001ab0:	f7ff fe26 	bl	8001700 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8001ab4:	f00a f8fe 	bl	800bcb4 <HW_IPCC_OT_CmdEvtNot>

  return;
 8001ab8:	bf00      	nop
}
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	58000c00 	.word	0x58000c00

08001ac0 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8001ac4:	2104      	movs	r1, #4
 8001ac6:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8001ac8:	f7ff fe3e 	bl	8001748 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8001acc:	f00a f8fe 	bl	800bccc <HW_IPCC_THREAD_EvtNot>

  return;
 8001ad0:	bf00      	nop
}
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	58000c00 	.word	0x58000c00

08001ad8 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8001adc:	2110      	movs	r1, #16
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8001ae0:	f7ff fe32 	bl	8001748 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8001ae4:	f00a f8fe 	bl	800bce4 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8001ae8:	bf00      	nop
}
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	58000c00 	.word	0x58000c00

08001af0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001af8:	2108      	movs	r1, #8
 8001afa:	480c      	ldr	r0, [pc, #48]	; (8001b2c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001afc:	f7ff fe52 	bl	80017a4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b0c:	2108      	movs	r1, #8
 8001b0e:	4807      	ldr	r0, [pc, #28]	; (8001b2c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001b10:	f7ff fde3 	bl	80016da <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001b14:	e006      	b.n	8001b24 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b1a:	2108      	movs	r1, #8
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001b1e:	f7ff fe32 	bl	8001786 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001b22:	bf00      	nop
}
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	58000c00 	.word	0x58000c00
 8001b30:	20000420 	.word	0x20000420

08001b34 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b38:	2108      	movs	r1, #8
 8001b3a:	4806      	ldr	r0, [pc, #24]	; (8001b54 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001b3c:	f7ff fde0 	bl	8001700 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001b46:	2108      	movs	r1, #8
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001b4a:	f7ff fe1c 	bl	8001786 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001b4e:	bf00      	nop
}
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	58000c00 	.word	0x58000c00
 8001b58:	20000420 	.word	0x20000420

08001b5c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001b60:	2108      	movs	r1, #8
 8001b62:	4802      	ldr	r0, [pc, #8]	; (8001b6c <HW_IPCC_TRACES_Init+0x10>)
 8001b64:	f7ff fdde 	bl	8001724 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001b68:	bf00      	nop
}
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	58000c00 	.word	0x58000c00

08001b70 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001b74:	f00a f948 	bl	800be08 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001b78:	2108      	movs	r1, #8
 8001b7a:	4802      	ldr	r0, [pc, #8]	; (8001b84 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001b7c:	f7ff fdf5 	bl	800176a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001b80:	bf00      	nop
}
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	58000c00 	.word	0x58000c00

08001b88 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <LL_C2_PWR_SetPowerMode+0x28>)
 8001b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	4905      	ldr	r1, [pc, #20]	; (8001bb0 <LL_C2_PWR_SetPowerMode+0x28>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	58000400 	.word	0x58000400

08001bb4 <LL_EXTI_EnableIT_32_63>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <LL_EXTI_EnableIT_32_63+0x24>)
 8001bbe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001bc2:	4905      	ldr	r1, [pc, #20]	; (8001bd8 <LL_EXTI_EnableIT_32_63+0x24>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	58000800 	.word	0x58000800

08001bdc <LL_C2_EXTI_EnableIT_32_63>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8001be6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8001bea:	4905      	ldr	r1, [pc, #20]	; (8001c00 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	58000800 	.word	0x58000800

08001c04 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c10:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001c12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c1e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	cafecafe 	.word	0xcafecafe

08001c40 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	22ff      	movs	r2, #255	; 0xff
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	22ca      	movs	r2, #202	; 0xca
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2253      	movs	r2, #83	; 0x53
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 0207 	bic.w	r2, r3, #7
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <MX_APPE_Config+0x18>)
 8001cce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cd2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001cd4:	f000 f83e 	bl	8001d54 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001cd8:	f000 f843 	bl	8001d62 <Config_HSE>

  return;
 8001cdc:	bf00      	nop
}
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	58004000 	.word	0x58004000

08001ce4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001ce8:	f000 f84f 	bl	8001d8a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001cec:	f000 f868 	bl	8001dc0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001cf0:	4908      	ldr	r1, [pc, #32]	; (8001d14 <MX_APPE_Init+0x30>)
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f000 fdc6 	bl	8002884 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8001cf8:	f000 f81c 	bl	8001d34 <Init_Debug>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f00a f9e2 	bl	800c0c8 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001d04:	2101      	movs	r1, #1
 8001d06:	2001      	movs	r0, #1
 8001d08:	f00a fa0e 	bl	800c128 <UTIL_LPM_SetOffMode>
//  Led_Init();
 // Button_Init();

  
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001d0c:	f000 f866 	bl	8001ddc <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001d10:	bf00      	nop
}
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000750 	.word	0x20000750

08001d18 <Init_Smps>:

void Init_Smps(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001d1c:	bf00      	nop
}
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <Init_Exti>:

void Init_Exti(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001d2a:	2050      	movs	r0, #80	; 0x50
 8001d2c:	f7ff ff42 	bl	8001bb4 <LL_EXTI_EnableIT_32_63>

  return;
 8001d30:	bf00      	nop
}
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001d38:	f002 f820 	bl	8003d7c <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001d3c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001d40:	f7ff ff38 	bl	8001bb4 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001d44:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001d48:	f7ff ff48 	bl	8001bdc <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001d4c:	f00a f904 	bl	800bf58 <DbgTraceInit>
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 8001d50:	bf00      	nop
}
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <Reset_Device>:
static void Reset_Device(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001d58:	bf00      	nop
}
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f00a f973 	bl	800c054 <OTP_Read>
 8001d6e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	799b      	ldrb	r3, [r3, #6]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff42 	bl	8001c04 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
}
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <System_Init>:

static void System_Init(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0
  Init_Smps();
 8001d8e:	f7ff ffc3 	bl	8001d18 <Init_Smps>

  Init_Exti();
 8001d92:	f7ff ffc8 	bl	8001d26 <Init_Exti>

  Init_Rtc();
 8001d96:	f000 f803 	bl	8001da0 <Init_Rtc>

  return;
 8001d9a:	bf00      	nop
}
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <Init_Rtc+0x1c>)
 8001da6:	f7ff ff6c 	bl	8001c82 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001daa:	2100      	movs	r1, #0
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <Init_Rtc+0x1c>)
 8001dae:	f7ff ff78 	bl	8001ca2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001db2:	4802      	ldr	r0, [pc, #8]	; (8001dbc <Init_Rtc+0x1c>)
 8001db4:	f7ff ff58 	bl	8001c68 <LL_RTC_EnableWriteProtection>

  return;
 8001db8:	bf00      	nop
}
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40002800 	.word	0x40002800

08001dc0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001dc4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001dc8:	f7ff ff3a 	bl	8001c40 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001dcc:	f00a f96a 	bl	800c0a4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001dd0:	2004      	movs	r0, #4
 8001dd2:	f7ff fed9 	bl	8001b88 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001dd6:	bf00      	nop
}
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001de2:	f009 fe1d 	bl	800ba20 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001de6:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <appe_Tl_Init+0x50>)
 8001de8:	2100      	movs	r1, #0
 8001dea:	2004      	movs	r0, #4
 8001dec:	f00a fac8 	bl	800c380 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <appe_Tl_Init+0x54>)
 8001df2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <appe_Tl_Init+0x58>)
 8001df6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480e      	ldr	r0, [pc, #56]	; (8001e38 <appe_Tl_Init+0x5c>)
 8001dfe:	f009 fbdd 	bl	800b5bc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <appe_Tl_Init+0x60>)
 8001e08:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <appe_Tl_Init+0x64>)
 8001e0c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001e0e:	f240 533c 	movw	r3, #1340	; 0x53c
 8001e12:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f009 ff6f 	bl	800bcfc <TL_MM_Init>

  TL_Enable();
 8001e1e:	f009 fdf9 	bl	800ba14 <TL_Enable>

  return;
 8001e22:	bf00      	nop
}
 8001e24:	3720      	adds	r7, #32
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	0800b5f5 	.word	0x0800b5f5
 8001e30:	20030a54 	.word	0x20030a54
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e5b 	.word	0x08001e5b
 8001e3c:	20030b60 	.word	0x20030b60
 8001e40:	20030518 	.word	0x20030518

08001e44 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001e4e:	bf00      	nop
}
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	330b      	adds	r3, #11
 8001e68:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8001e74:	d004      	beq.n	8001e80 <APPE_SysUserEvtRx+0x26>
 8001e76:	f249 2201 	movw	r2, #37377	; 0x9201
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d003      	beq.n	8001e86 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001e7e:	e008      	b.n	8001e92 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001e80:	f000 f834 	bl	8001eec <APPE_SysEvtReadyProcessing>
         break;
 8001e84:	e005      	b.n	8001e92 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	789b      	ldrb	r3, [r3, #2]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f806 	bl	8001e9c <APPE_SysEvtError>
         break;
 8001e90:	bf00      	nop
  }
  return;
 8001e92:	bf00      	nop
}
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b7d      	cmp	r3, #125	; 0x7d
 8001eaa:	d002      	beq.n	8001eb2 <APPE_SysEvtError+0x16>
 8001eac:	2b7e      	cmp	r3, #126	; 0x7e
 8001eae:	d006      	beq.n	8001ebe <APPE_SysEvtError+0x22>
 8001eb0:	e00b      	b.n	8001eca <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <APPE_SysEvtError+0x44>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f001 fdd4 	bl	8003a64 <logApplication>
       break;
 8001ebc:	e00c      	b.n	8001ed8 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <APPE_SysEvtError+0x48>)
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f001 fdce 	bl	8003a64 <logApplication>
       break;
 8001ec8:	e006      	b.n	8001ed8 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <APPE_SysEvtError+0x4c>)
 8001ece:	2101      	movs	r1, #1
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f001 fdc7 	bl	8003a64 <logApplication>
       break;
 8001ed6:	bf00      	nop
  }
  return;
 8001ed8:	bf00      	nop
}
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	0800eb08 	.word	0x0800eb08
 8001ee4:	0800eb2c 	.word	0x0800eb2c
 8001ee8:	0800eb4c 	.word	0x0800eb4c

08001eec <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8001ef0:	f009 ff78 	bl	800bde4 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001ef4:	f7fe fd9e 	bl	8000a34 <APP_THREAD_Init>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2001      	movs	r0, #1
 8001efc:	f00a f8e4 	bl	800c0c8 <UTIL_LPM_SetStopMode>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001f00:	2100      	movs	r1, #0
 8001f02:	2001      	movs	r0, #1
 8001f04:	f00a f910 	bl	800c128 <UTIL_LPM_SetOffMode>
  return;
 8001f08:	bf00      	nop
}
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f00a f938 	bl	800c188 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001f20:	bf00      	nop
}
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d003      	beq.n	8001f44 <UTIL_SEQ_EvtIdle+0x18>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d00c      	beq.n	8001f5c <UTIL_SEQ_EvtIdle+0x30>
 8001f42:	e012      	b.n	8001f6a <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if (g_ot_notification_allowed == 1U)
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <UTIL_SEQ_EvtIdle+0x50>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d103      	bne.n	8001f54 <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f00a f91b 	bl	800c188 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 8001f52:	e00f      	b.n	8001f74 <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f00a f917 	bl	800c188 <UTIL_SEQ_Run>
    break;
 8001f5a:	e00b      	b.n	8001f74 <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8001f5c:	2004      	movs	r0, #4
 8001f5e:	f00a fa5d 	bl	800c41c <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f00a f910 	bl	800c188 <UTIL_SEQ_Run>
    break;
 8001f68:	e004      	b.n	8001f74 <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6e:	f00a f90b 	bl	800c188 <UTIL_SEQ_Run>
    break;
 8001f72:	bf00      	nop
  }
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000424 	.word	0x20000424

08001f80 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2004      	movs	r0, #4
 8001f8c:	f00a fa1a 	bl	800c3c4 <UTIL_SEQ_SetTask>
  return;
 8001f90:	bf00      	nop
}
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f00a fa3b 	bl	800c41c <UTIL_SEQ_SetEvt>
  return;
 8001fa6:	bf00      	nop
}
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f00a fa50 	bl	800c45c <UTIL_SEQ_WaitEvt>
  return;
 8001fbc:	bf00      	nop
}
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
#if (CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	330b      	adds	r3, #11
 8001fd0:	1c99      	adds	r1, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7a9b      	ldrb	r3, [r3, #10]
 8001fd6:	3b02      	subs	r3, #2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f009 ffe2 	bl	800bfa4 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f009 fec7 	bl	800bd74 <TL_MM_EvtDone>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if (CFG_DEBUG_TRACE != 0)
void DbgOutputInit(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
	MX_LPUART1_UART_Init();
 8001ff2:	f001 f8d7 	bl	80031a4 <MX_LPUART1_UART_Init>
  return;
 8001ff6:	bf00      	nop
#endif /* CFG_DEBUG_TRACE_UART */
}
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	460b      	mov	r3, r1
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8002008:	897a      	ldrh	r2, [r7, #10]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68f9      	ldr	r1, [r7, #12]
 800200e:	2002      	movs	r0, #2
 8002010:	f000 ff18 	bl	8002e44 <HW_UART_Transmit_DMA>

  return;
 8002014:	bf00      	nop
}
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	80fb      	strh	r3, [r7, #6]
  APP_DBG("*** HAL_GPIO_EXTI_Callback  GPIO_Pin = %d ****", GPIO_Pin);
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <HAL_GPIO_EXTI_Callback+0x3c>)
 800202a:	2101      	movs	r1, #1
 800202c:	2000      	movs	r0, #0
 800202e:	f001 fd19 	bl	8003a64 <logApplication>
  switch(GPIO_Pin)
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_EXTI_Callback+0x26>
 800203a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800203e:	d005      	beq.n	800204c <HAL_GPIO_EXTI_Callback+0x30>
        break;
     case BUTTON_USER2_PIN: /* SW button 2 */
        break;

     default:
        break;
 8002040:	e005      	b.n	800204e <HAL_GPIO_EXTI_Callback+0x32>
        UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_1);
 8002042:	2101      	movs	r1, #1
 8002044:	2008      	movs	r0, #8
 8002046:	f00a f9bd 	bl	800c3c4 <UTIL_SEQ_SetTask>
        break;
 800204a:	e000      	b.n	800204e <HAL_GPIO_EXTI_Callback+0x32>
        break;
 800204c:	bf00      	nop
  }
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	0800eb6c 	.word	0x0800eb6c

0800205c <LL_EXTI_EnableIT_0_31>:
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <LL_EXTI_EnableIT_0_31+0x24>)
 8002066:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800206a:	4905      	ldr	r1, [pc, #20]	; (8002080 <LL_EXTI_EnableIT_0_31+0x24>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	58000800 	.word	0x58000800

08002084 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4904      	ldr	r1, [pc, #16]	; (80020a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	58000800 	.word	0x58000800

080020a8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <ReadRtcSsrValue+0x3c>)
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <ReadRtcSsrValue+0x3c>)
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80020be:	e005      	b.n	80020cc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <ReadRtcSsrValue+0x3c>)
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1f5      	bne.n	80020c0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80020d4:	683b      	ldr	r3, [r7, #0]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40002800 	.word	0x40002800

080020e8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	460a      	mov	r2, r1
 80020f2:	71fb      	strb	r3, [r7, #7]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80020f8:	79ba      	ldrb	r2, [r7, #6]
 80020fa:	491d      	ldr	r1, [pc, #116]	; (8002170 <LinkTimerAfter+0x88>)
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	3315      	adds	r3, #21
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b06      	cmp	r3, #6
 8002110:	d009      	beq.n	8002126 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	4916      	ldr	r1, [pc, #88]	; (8002170 <LinkTimerAfter+0x88>)
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	3314      	adds	r3, #20
 8002122:	79fa      	ldrb	r2, [r7, #7]
 8002124:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002126:	79fa      	ldrb	r2, [r7, #7]
 8002128:	4911      	ldr	r1, [pc, #68]	; (8002170 <LinkTimerAfter+0x88>)
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	3315      	adds	r3, #21
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	490c      	ldr	r1, [pc, #48]	; (8002170 <LinkTimerAfter+0x88>)
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	3314      	adds	r3, #20
 800214a:	79ba      	ldrb	r2, [r7, #6]
 800214c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800214e:	79ba      	ldrb	r2, [r7, #6]
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <LinkTimerAfter+0x88>)
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	3315      	adds	r3, #21
 800215e:	79fa      	ldrb	r2, [r7, #7]
 8002160:	701a      	strb	r2, [r3, #0]

  return;
 8002162:	bf00      	nop
}
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000428 	.word	0x20000428

08002174 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	460a      	mov	r2, r1
 800217e:	71fb      	strb	r3, [r7, #7]
 8002180:	4613      	mov	r3, r2
 8002182:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <LinkTimerBefore+0xb8>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	79ba      	ldrb	r2, [r7, #6]
 800218c:	429a      	cmp	r2, r3
 800218e:	d032      	beq.n	80021f6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002190:	79ba      	ldrb	r2, [r7, #6]
 8002192:	4927      	ldr	r1, [pc, #156]	; (8002230 <LinkTimerBefore+0xbc>)
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	3314      	adds	r3, #20
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	4922      	ldr	r1, [pc, #136]	; (8002230 <LinkTimerBefore+0xbc>)
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	3315      	adds	r3, #21
 80021b4:	79fa      	ldrb	r2, [r7, #7]
 80021b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80021b8:	79fa      	ldrb	r2, [r7, #7]
 80021ba:	491d      	ldr	r1, [pc, #116]	; (8002230 <LinkTimerBefore+0xbc>)
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	3315      	adds	r3, #21
 80021c8:	79ba      	ldrb	r2, [r7, #6]
 80021ca:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80021cc:	79fa      	ldrb	r2, [r7, #7]
 80021ce:	4918      	ldr	r1, [pc, #96]	; (8002230 <LinkTimerBefore+0xbc>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	3314      	adds	r3, #20
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80021e0:	79ba      	ldrb	r2, [r7, #6]
 80021e2:	4913      	ldr	r1, [pc, #76]	; (8002230 <LinkTimerBefore+0xbc>)
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	3314      	adds	r3, #20
 80021f0:	79fa      	ldrb	r2, [r7, #7]
 80021f2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80021f4:	e014      	b.n	8002220 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80021f6:	79fa      	ldrb	r2, [r7, #7]
 80021f8:	490d      	ldr	r1, [pc, #52]	; (8002230 <LinkTimerBefore+0xbc>)
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	3315      	adds	r3, #21
 8002206:	79ba      	ldrb	r2, [r7, #6]
 8002208:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800220a:	79ba      	ldrb	r2, [r7, #6]
 800220c:	4908      	ldr	r1, [pc, #32]	; (8002230 <LinkTimerBefore+0xbc>)
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	3314      	adds	r3, #20
 800221a:	79fa      	ldrb	r2, [r7, #7]
 800221c:	701a      	strb	r2, [r3, #0]
  return;
 800221e:	bf00      	nop
}
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	200004b8 	.word	0x200004b8
 8002230:	20000428 	.word	0x20000428

08002234 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800223e:	4b4e      	ldr	r3, [pc, #312]	; (8002378 <linkTimer+0x144>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b06      	cmp	r3, #6
 8002246:	d118      	bne.n	800227a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002248:	4b4b      	ldr	r3, [pc, #300]	; (8002378 <linkTimer+0x144>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b4b      	ldr	r3, [pc, #300]	; (800237c <linkTimer+0x148>)
 8002250:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002252:	4a49      	ldr	r2, [pc, #292]	; (8002378 <linkTimer+0x144>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002258:	79fa      	ldrb	r2, [r7, #7]
 800225a:	4949      	ldr	r1, [pc, #292]	; (8002380 <linkTimer+0x14c>)
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	3315      	adds	r3, #21
 8002268:	2206      	movs	r2, #6
 800226a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800226c:	4b45      	ldr	r3, [pc, #276]	; (8002384 <linkTimer+0x150>)
 800226e:	f04f 32ff 	mov.w	r2, #4294967295
 8002272:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	81fb      	strh	r3, [r7, #14]
 8002278:	e078      	b.n	800236c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800227a:	f000 f909 	bl	8002490 <ReturnTimeElapsed>
 800227e:	4603      	mov	r3, r0
 8002280:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002282:	79fa      	ldrb	r2, [r7, #7]
 8002284:	493e      	ldr	r1, [pc, #248]	; (8002380 <linkTimer+0x14c>)
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	3308      	adds	r3, #8
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	89fb      	ldrh	r3, [r7, #14]
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	4419      	add	r1, r3
 800229a:	4839      	ldr	r0, [pc, #228]	; (8002380 <linkTimer+0x14c>)
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4403      	add	r3, r0
 80022a6:	3308      	adds	r3, #8
 80022a8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80022aa:	79fa      	ldrb	r2, [r7, #7]
 80022ac:	4934      	ldr	r1, [pc, #208]	; (8002380 <linkTimer+0x14c>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	3308      	adds	r3, #8
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80022be:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <linkTimer+0x144>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	4a2e      	ldr	r2, [pc, #184]	; (8002380 <linkTimer+0x14c>)
 80022c8:	460b      	mov	r3, r1
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	440b      	add	r3, r1
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	3308      	adds	r3, #8
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d337      	bcc.n	800234c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80022dc:	4b26      	ldr	r3, [pc, #152]	; (8002378 <linkTimer+0x144>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80022e2:	7b7a      	ldrb	r2, [r7, #13]
 80022e4:	4926      	ldr	r1, [pc, #152]	; (8002380 <linkTimer+0x14c>)
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	3315      	adds	r3, #21
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80022f6:	e013      	b.n	8002320 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80022f8:	7b7a      	ldrb	r2, [r7, #13]
 80022fa:	4921      	ldr	r1, [pc, #132]	; (8002380 <linkTimer+0x14c>)
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	3315      	adds	r3, #21
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800230c:	7b7a      	ldrb	r2, [r7, #13]
 800230e:	491c      	ldr	r1, [pc, #112]	; (8002380 <linkTimer+0x14c>)
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	3315      	adds	r3, #21
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002320:	7b3b      	ldrb	r3, [r7, #12]
 8002322:	2b06      	cmp	r3, #6
 8002324:	d00b      	beq.n	800233e <linkTimer+0x10a>
 8002326:	7b3a      	ldrb	r2, [r7, #12]
 8002328:	4915      	ldr	r1, [pc, #84]	; (8002380 <linkTimer+0x14c>)
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	3308      	adds	r3, #8
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	429a      	cmp	r2, r3
 800233c:	d2dc      	bcs.n	80022f8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800233e:	7b7a      	ldrb	r2, [r7, #13]
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fecf 	bl	80020e8 <LinkTimerAfter>
 800234a:	e00f      	b.n	800236c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <linkTimer+0x144>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff0c 	bl	8002174 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <linkTimer+0x144>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <linkTimer+0x148>)
 8002364:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002366:	4a04      	ldr	r2, [pc, #16]	; (8002378 <linkTimer+0x144>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800236c:	89fb      	ldrh	r3, [r7, #14]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200004b8 	.word	0x200004b8
 800237c:	200004b9 	.word	0x200004b9
 8002380:	20000428 	.word	0x20000428
 8002384:	200004bc 	.word	0x200004bc

08002388 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	460a      	mov	r2, r1
 8002392:	71fb      	strb	r3, [r7, #7]
 8002394:	4613      	mov	r3, r2
 8002396:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002398:	4b39      	ldr	r3, [pc, #228]	; (8002480 <UnlinkTimer+0xf8>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	79fa      	ldrb	r2, [r7, #7]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d111      	bne.n	80023c8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80023a4:	4b36      	ldr	r3, [pc, #216]	; (8002480 <UnlinkTimer+0xf8>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b36      	ldr	r3, [pc, #216]	; (8002484 <UnlinkTimer+0xfc>)
 80023ac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80023ae:	79fa      	ldrb	r2, [r7, #7]
 80023b0:	4935      	ldr	r1, [pc, #212]	; (8002488 <UnlinkTimer+0x100>)
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	440b      	add	r3, r1
 80023bc:	3315      	adds	r3, #21
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b2f      	ldr	r3, [pc, #188]	; (8002480 <UnlinkTimer+0xf8>)
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	e03e      	b.n	8002446 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80023c8:	79fa      	ldrb	r2, [r7, #7]
 80023ca:	492f      	ldr	r1, [pc, #188]	; (8002488 <UnlinkTimer+0x100>)
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	3314      	adds	r3, #20
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80023dc:	79fa      	ldrb	r2, [r7, #7]
 80023de:	492a      	ldr	r1, [pc, #168]	; (8002488 <UnlinkTimer+0x100>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	3315      	adds	r3, #21
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80023f0:	79f9      	ldrb	r1, [r7, #7]
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	4824      	ldr	r0, [pc, #144]	; (8002488 <UnlinkTimer+0x100>)
 80023f6:	460b      	mov	r3, r1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	440b      	add	r3, r1
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4403      	add	r3, r0
 8002400:	3315      	adds	r3, #21
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b2d8      	uxtb	r0, r3
 8002406:	4920      	ldr	r1, [pc, #128]	; (8002488 <UnlinkTimer+0x100>)
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	3315      	adds	r3, #21
 8002414:	4602      	mov	r2, r0
 8002416:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002418:	7bbb      	ldrb	r3, [r7, #14]
 800241a:	2b06      	cmp	r3, #6
 800241c:	d013      	beq.n	8002446 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800241e:	79f9      	ldrb	r1, [r7, #7]
 8002420:	7bba      	ldrb	r2, [r7, #14]
 8002422:	4819      	ldr	r0, [pc, #100]	; (8002488 <UnlinkTimer+0x100>)
 8002424:	460b      	mov	r3, r1
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	440b      	add	r3, r1
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4403      	add	r3, r0
 800242e:	3314      	adds	r3, #20
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b2d8      	uxtb	r0, r3
 8002434:	4914      	ldr	r1, [pc, #80]	; (8002488 <UnlinkTimer+0x100>)
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	3314      	adds	r3, #20
 8002442:	4602      	mov	r2, r0
 8002444:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002446:	79fa      	ldrb	r2, [r7, #7]
 8002448:	490f      	ldr	r1, [pc, #60]	; (8002488 <UnlinkTimer+0x100>)
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	330c      	adds	r3, #12
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <UnlinkTimer+0xf8>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b06      	cmp	r3, #6
 8002462:	d107      	bne.n	8002474 <UnlinkTimer+0xec>
 8002464:	79bb      	ldrb	r3, [r7, #6]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <UnlinkTimer+0x104>)
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	601a      	str	r2, [r3, #0]
  }

  return;
 8002472:	bf00      	nop
 8002474:	bf00      	nop
}
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	200004b8 	.word	0x200004b8
 8002484:	200004b9 	.word	0x200004b9
 8002488:	20000428 	.word	0x20000428
 800248c:	200004bc 	.word	0x200004bc

08002490 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <ReturnTimeElapsed+0x70>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249e:	d026      	beq.n	80024ee <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80024a0:	f7ff fe02 	bl	80020a8 <ReadRtcSsrValue>
 80024a4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <ReturnTimeElapsed+0x70>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d805      	bhi.n	80024bc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <ReturnTimeElapsed+0x70>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	e00a      	b.n	80024d2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <ReturnTimeElapsed+0x74>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80024c8:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <ReturnTimeElapsed+0x70>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <ReturnTimeElapsed+0x78>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <ReturnTimeElapsed+0x7c>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	40d3      	lsrs	r3, r2
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	e001      	b.n	80024f2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	b29b      	uxth	r3, r3
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200004bc 	.word	0x200004bc
 8002504:	200004c4 	.word	0x200004c4
 8002508:	200004c2 	.word	0x200004c2
 800250c:	200004c1 	.word	0x200004c1

08002510 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d108      	bne.n	8002532 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002520:	f7ff fdc2 	bl	80020a8 <ReadRtcSsrValue>
 8002524:	4603      	mov	r3, r0
 8002526:	4a21      	ldr	r2, [pc, #132]	; (80025ac <RestartWakeupCounter+0x9c>)
 8002528:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800252a:	2003      	movs	r0, #3
 800252c:	f001 fdc3 	bl	80040b6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002530:	e039      	b.n	80025a6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d803      	bhi.n	8002540 <RestartWakeupCounter+0x30>
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <RestartWakeupCounter+0xa0>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d002      	beq.n	8002546 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	3b01      	subs	r3, #1
 8002544:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002546:	bf00      	nop
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <RestartWakeupCounter+0xa4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f8      	beq.n	8002548 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <RestartWakeupCounter+0xa4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <RestartWakeupCounter+0xa4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002566:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <RestartWakeupCounter+0xa8>)
 800256a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800256e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002570:	2003      	movs	r0, #3
 8002572:	f001 fdae 	bl	80040d2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <RestartWakeupCounter+0xac>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	0c1b      	lsrs	r3, r3, #16
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	88fa      	ldrh	r2, [r7, #6]
 8002580:	490e      	ldr	r1, [pc, #56]	; (80025bc <RestartWakeupCounter+0xac>)
 8002582:	4313      	orrs	r3, r2
 8002584:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002586:	f7ff fd8f 	bl	80020a8 <ReadRtcSsrValue>
 800258a:	4603      	mov	r3, r0
 800258c:	4a07      	ldr	r2, [pc, #28]	; (80025ac <RestartWakeupCounter+0x9c>)
 800258e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <RestartWakeupCounter+0xa4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <RestartWakeupCounter+0xa4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800259e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80025a0:	f3af 8000 	nop.w
  return ;
 80025a4:	bf00      	nop
}
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200004bc 	.word	0x200004bc
 80025b0:	200004c1 	.word	0x200004c1
 80025b4:	20000750 	.word	0x20000750
 80025b8:	58000800 	.word	0x58000800
 80025bc:	40002800 	.word	0x40002800

080025c0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80025c6:	4b45      	ldr	r3, [pc, #276]	; (80026dc <RescheduleTimerList+0x11c>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d2:	d107      	bne.n	80025e4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80025d4:	bf00      	nop
 80025d6:	4b42      	ldr	r3, [pc, #264]	; (80026e0 <RescheduleTimerList+0x120>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f8      	bne.n	80025d6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80025e4:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <RescheduleTimerList+0x120>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <RescheduleTimerList+0x120>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <RescheduleTimerList+0x124>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	493a      	ldr	r1, [pc, #232]	; (80026e8 <RescheduleTimerList+0x128>)
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	3308      	adds	r3, #8
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800260e:	f7ff ff3f 	bl	8002490 <ReturnTimeElapsed>
 8002612:	4603      	mov	r3, r0
 8002614:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	429a      	cmp	r2, r3
 800261c:	d205      	bcs.n	800262a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002622:	4b32      	ldr	r3, [pc, #200]	; (80026ec <RescheduleTimerList+0x12c>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	e04d      	b.n	80026c6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	4a30      	ldr	r2, [pc, #192]	; (80026f0 <RescheduleTimerList+0x130>)
 800262e:	8812      	ldrh	r2, [r2, #0]
 8002630:	b292      	uxth	r2, r2
 8002632:	4413      	add	r3, r2
 8002634:	461a      	mov	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4293      	cmp	r3, r2
 800263a:	d906      	bls.n	800264a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800263c:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <RescheduleTimerList+0x130>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <RescheduleTimerList+0x12c>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e03d      	b.n	80026c6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	b29a      	uxth	r2, r3
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <RescheduleTimerList+0x12c>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800265a:	e034      	b.n	80026c6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	4922      	ldr	r1, [pc, #136]	; (80026e8 <RescheduleTimerList+0x128>)
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	3308      	adds	r3, #8
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	429a      	cmp	r2, r3
 8002672:	d20a      	bcs.n	800268a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	491c      	ldr	r1, [pc, #112]	; (80026e8 <RescheduleTimerList+0x128>)
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	440b      	add	r3, r1
 8002682:	3308      	adds	r3, #8
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e013      	b.n	80026b2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	4916      	ldr	r1, [pc, #88]	; (80026e8 <RescheduleTimerList+0x128>)
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	3308      	adds	r3, #8
 800269a:	6819      	ldr	r1, [r3, #0]
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	1ac9      	subs	r1, r1, r3
 80026a2:	4811      	ldr	r0, [pc, #68]	; (80026e8 <RescheduleTimerList+0x128>)
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4403      	add	r3, r0
 80026ae:	3308      	adds	r3, #8
 80026b0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	490c      	ldr	r1, [pc, #48]	; (80026e8 <RescheduleTimerList+0x128>)
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	440b      	add	r3, r1
 80026c0:	3315      	adds	r3, #21
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d1c7      	bne.n	800265c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80026cc:	89bb      	ldrh	r3, [r7, #12]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff ff1e 	bl	8002510 <RestartWakeupCounter>

  return ;
 80026d4:	bf00      	nop
}
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40002800 	.word	0x40002800
 80026e0:	20000750 	.word	0x20000750
 80026e4:	200004b8 	.word	0x200004b8
 80026e8:	20000428 	.word	0x20000428
 80026ec:	200004c0 	.word	0x200004c0
 80026f0:	200004c6 	.word	0x200004c6

080026f4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fa:	f3ef 8310 	mrs	r3, PRIMASK
 80026fe:	617b      	str	r3, [r7, #20]
  return(result);
 8002700:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002708:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	22ca      	movs	r2, #202	; 0xca
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
 8002710:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2253      	movs	r2, #83	; 0x53
 8002716:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002718:	4b55      	ldr	r3, [pc, #340]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	4b54      	ldr	r3, [pc, #336]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002726:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002728:	4b52      	ldr	r3, [pc, #328]	; (8002874 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002730:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002734:	4950      	ldr	r1, [pc, #320]	; (8002878 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	440b      	add	r3, r1
 8002740:	330c      	adds	r3, #12
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d16e      	bne.n	8002828 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800274a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800274e:	494a      	ldr	r1, [pc, #296]	; (8002878 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800275e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002762:	4945      	ldr	r1, [pc, #276]	; (8002878 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	3310      	adds	r3, #16
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002774:	4b41      	ldr	r3, [pc, #260]	; (800287c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d04c      	beq.n	8002818 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800277e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002782:	493d      	ldr	r1, [pc, #244]	; (8002878 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	330d      	adds	r3, #13
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d124      	bne.n	80027e2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002798:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fdf2 	bl	8002388 <UnlinkTimer>
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f383 8810 	msr	PRIMASK, r3
}
 80027ae:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80027b0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027b4:	4930      	ldr	r1, [pc, #192]	; (8002878 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	3304      	adds	r3, #4
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fa32 	bl	8002c34 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80027d0:	4b27      	ldr	r3, [pc, #156]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	22ca      	movs	r2, #202	; 0xca
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2253      	movs	r2, #83	; 0x53
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
 80027e0:	e012      	b.n	8002808 <HW_TS_RTC_Wakeup_Handler+0x114>
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f383 8810 	msr	PRIMASK, r3
}
 80027ec:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80027ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f99a 	bl	8002b2c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	22ca      	movs	r2, #202	; 0xca
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2253      	movs	r2, #83	; 0x53
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	4619      	mov	r1, r3
 8002810:	69b8      	ldr	r0, [r7, #24]
 8002812:	f000 fa95 	bl	8002d40 <HW_TS_RTC_Int_AppNot>
 8002816:	e022      	b.n	800285e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002818:	f7ff fed2 	bl	80025c0 <RescheduleTimerList>
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f383 8810 	msr	PRIMASK, r3
}
 8002826:	e01a      	b.n	800285e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002828:	bf00      	nop
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f8      	beq.n	800282a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002838:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002848:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800284c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f383 8810 	msr	PRIMASK, r3
}
 800285c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	22ff      	movs	r2, #255	; 0xff
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002866:	bf00      	nop
}
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000750 	.word	0x20000750
 8002874:	200004b8 	.word	0x200004b8
 8002878:	20000428 	.word	0x20000428
 800287c:	200004c0 	.word	0x200004c0
 8002880:	58000800 	.word	0x58000800

08002884 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002890:	4b5e      	ldr	r3, [pc, #376]	; (8002a0c <HW_TS_Init+0x188>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	22ca      	movs	r2, #202	; 0xca
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
 8002898:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <HW_TS_Init+0x188>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2253      	movs	r2, #83	; 0x53
 800289e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80028a0:	4b5b      	ldr	r3, [pc, #364]	; (8002a10 <HW_TS_Init+0x18c>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	4a5a      	ldr	r2, [pc, #360]	; (8002a10 <HW_TS_Init+0x18c>)
 80028a6:	f043 0320 	orr.w	r3, r3, #32
 80028aa:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80028ac:	4b58      	ldr	r3, [pc, #352]	; (8002a10 <HW_TS_Init+0x18c>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f1c3 0304 	rsb	r3, r3, #4
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b55      	ldr	r3, [pc, #340]	; (8002a14 <HW_TS_Init+0x190>)
 80028c0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80028c2:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HW_TS_Init+0x18c>)
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80028ca:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80028ce:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	fa92 f2a2 	rbit	r2, r2
 80028d6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	2a00      	cmp	r2, #0
 80028e0:	d101      	bne.n	80028e6 <HW_TS_Init+0x62>
  {
    return 32U;
 80028e2:	2220      	movs	r2, #32
 80028e4:	e003      	b.n	80028ee <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	fab2 f282 	clz	r2, r2
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	40d3      	lsrs	r3, r2
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b48      	ldr	r3, [pc, #288]	; (8002a18 <HW_TS_Init+0x194>)
 80028f8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80028fa:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <HW_TS_Init+0x18c>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002904:	b29b      	uxth	r3, r3
 8002906:	3301      	adds	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	4b44      	ldr	r3, [pc, #272]	; (8002a1c <HW_TS_Init+0x198>)
 800290c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800290e:	4b43      	ldr	r3, [pc, #268]	; (8002a1c <HW_TS_Init+0x198>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	3b01      	subs	r3, #1
 8002914:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <HW_TS_Init+0x194>)
 8002916:	7812      	ldrb	r2, [r2, #0]
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002920:	4a3c      	ldr	r2, [pc, #240]	; (8002a14 <HW_TS_Init+0x190>)
 8002922:	7812      	ldrb	r2, [r2, #0]
 8002924:	40d3      	lsrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800292e:	4293      	cmp	r3, r2
 8002930:	d904      	bls.n	800293c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <HW_TS_Init+0x19c>)
 8002934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002938:	801a      	strh	r2, [r3, #0]
 800293a:	e003      	b.n	8002944 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	b29a      	uxth	r2, r3
 8002940:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <HW_TS_Init+0x19c>)
 8002942:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002944:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002948:	f7ff fb9c 	bl	8002084 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800294c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002950:	f7ff fb84 	bl	800205c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d13d      	bne.n	80029d6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800295a:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <HW_TS_Init+0x1a0>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002960:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <HW_TS_Init+0x1a4>)
 8002962:	f04f 32ff 	mov.w	r2, #4294967295
 8002966:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002968:	2300      	movs	r3, #0
 800296a:	77fb      	strb	r3, [r7, #31]
 800296c:	e00c      	b.n	8002988 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800296e:	7ffa      	ldrb	r2, [r7, #31]
 8002970:	492e      	ldr	r1, [pc, #184]	; (8002a2c <HW_TS_Init+0x1a8>)
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	330c      	adds	r3, #12
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002982:	7ffb      	ldrb	r3, [r7, #31]
 8002984:	3301      	adds	r3, #1
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	7ffb      	ldrb	r3, [r7, #31]
 800298a:	2b05      	cmp	r3, #5
 800298c:	d9ef      	bls.n	800296e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800298e:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <HW_TS_Init+0x1ac>)
 8002990:	2206      	movs	r2, #6
 8002992:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HW_TS_Init+0x188>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <HW_TS_Init+0x188>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HW_TS_Init+0x188>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HW_TS_Init+0x188>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80029b4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80029b6:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <HW_TS_Init+0x1b0>)
 80029b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80029bc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80029be:	2003      	movs	r0, #3
 80029c0:	f001 fb87 	bl	80040d2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HW_TS_Init+0x188>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HW_TS_Init+0x188>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	e009      	b.n	80029ea <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HW_TS_Init+0x188>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80029e4:	2003      	movs	r0, #3
 80029e6:	f001 fb66 	bl	80040b6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HW_TS_Init+0x188>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	22ff      	movs	r2, #255	; 0xff
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80029f2:	2200      	movs	r2, #0
 80029f4:	2103      	movs	r1, #3
 80029f6:	2003      	movs	r0, #3
 80029f8:	f001 fb17 	bl	800402a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80029fc:	2003      	movs	r0, #3
 80029fe:	f001 fb2e 	bl	800405e <HAL_NVIC_EnableIRQ>

  return;
 8002a02:	bf00      	nop
}
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000750 	.word	0x20000750
 8002a10:	40002800 	.word	0x40002800
 8002a14:	200004c1 	.word	0x200004c1
 8002a18:	200004c2 	.word	0x200004c2
 8002a1c:	200004c4 	.word	0x200004c4
 8002a20:	200004c6 	.word	0x200004c6
 8002a24:	200004c0 	.word	0x200004c0
 8002a28:	200004bc 	.word	0x200004bc
 8002a2c:	20000428 	.word	0x20000428
 8002a30:	200004b8 	.word	0x200004b8
 8002a34:	58000800 	.word	0x58000800

08002a38 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b08b      	sub	sp, #44	; 0x2c
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a52:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a54:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002a56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a58:	b672      	cpsid	i
}
 8002a5a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002a5c:	e004      	b.n	8002a68 <HW_TS_Create+0x30>
  {
    loop++;
 8002a5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a62:	3301      	adds	r3, #1
 8002a64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002a68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d80c      	bhi.n	8002a8a <HW_TS_Create+0x52>
 8002a70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002a74:	492c      	ldr	r1, [pc, #176]	; (8002b28 <HW_TS_Create+0xf0>)
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	330c      	adds	r3, #12
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e9      	bne.n	8002a5e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002a8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d038      	beq.n	8002b04 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002a92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002a96:	4924      	ldr	r1, [pc, #144]	; (8002b28 <HW_TS_Create+0xf0>)
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f383 8810 	msr	PRIMASK, r3
}
 8002ab2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002ab4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ab8:	491b      	ldr	r1, [pc, #108]	; (8002b28 <HW_TS_Create+0xf0>)
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3310      	adds	r3, #16
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002aca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ace:	4916      	ldr	r1, [pc, #88]	; (8002b28 <HW_TS_Create+0xf0>)
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	330d      	adds	r3, #13
 8002adc:	79fa      	ldrb	r2, [r7, #7]
 8002ade:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ae4:	4910      	ldr	r1, [pc, #64]	; (8002b28 <HW_TS_Create+0xf0>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002afa:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b02:	e008      	b.n	8002b16 <HW_TS_Create+0xde>
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f383 8810 	msr	PRIMASK, r3
}
 8002b0e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	372c      	adds	r7, #44	; 0x2c
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000428 	.word	0x20000428

08002b2c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b36:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002b3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b40:	b672      	cpsid	i
}
 8002b42:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002b44:	2003      	movs	r0, #3
 8002b46:	f001 fa98 	bl	800407a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002b4a:	4b34      	ldr	r3, [pc, #208]	; (8002c1c <HW_TS_Stop+0xf0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	22ca      	movs	r2, #202	; 0xca
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24
 8002b52:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <HW_TS_Stop+0xf0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2253      	movs	r2, #83	; 0x53
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002b5a:	79fa      	ldrb	r2, [r7, #7]
 8002b5c:	4930      	ldr	r1, [pc, #192]	; (8002c20 <HW_TS_Stop+0xf4>)
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	330c      	adds	r3, #12
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d142      	bne.n	8002bf8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fc06 	bl	8002388 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002b7c:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <HW_TS_Stop+0xf8>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	2b06      	cmp	r3, #6
 8002b86:	d12f      	bne.n	8002be8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HW_TS_Stop+0xfc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b94:	d107      	bne.n	8002ba6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002b96:	bf00      	nop
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HW_TS_Stop+0xf0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f8      	bne.n	8002b98 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HW_TS_Stop+0xf0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HW_TS_Stop+0xf0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002bb6:	bf00      	nop
 8002bb8:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HW_TS_Stop+0xf0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f8      	beq.n	8002bb8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HW_TS_Stop+0xf0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HW_TS_Stop+0xf0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002bd6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HW_TS_Stop+0x100>)
 8002bda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002bde:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002be0:	2003      	movs	r0, #3
 8002be2:	f001 fa76 	bl	80040d2 <HAL_NVIC_ClearPendingIRQ>
 8002be6:	e007      	b.n	8002bf8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <HW_TS_Stop+0x104>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	7cfa      	ldrb	r2, [r7, #19]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002bf4:	f7ff fce4 	bl	80025c0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HW_TS_Stop+0xf0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	22ff      	movs	r2, #255	; 0xff
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002c00:	2003      	movs	r0, #3
 8002c02:	f001 fa2c 	bl	800405e <HAL_NVIC_EnableIRQ>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f383 8810 	msr	PRIMASK, r3
}
 8002c10:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002c12:	bf00      	nop
}
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000750 	.word	0x20000750
 8002c20:	20000428 	.word	0x20000428
 8002c24:	200004b8 	.word	0x200004b8
 8002c28:	40002800 	.word	0x40002800
 8002c2c:	58000800 	.word	0x58000800
 8002c30:	200004b9 	.word	0x200004b9

08002c34 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002c40:	79fa      	ldrb	r2, [r7, #7]
 8002c42:	493b      	ldr	r1, [pc, #236]	; (8002d30 <HW_TS_Start+0xfc>)
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	330c      	adds	r3, #12
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d103      	bne.n	8002c60 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff66 	bl	8002b2c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c60:	f3ef 8310 	mrs	r3, PRIMASK
 8002c64:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c66:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002c68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c6a:	b672      	cpsid	i
}
 8002c6c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002c6e:	2003      	movs	r0, #3
 8002c70:	f001 fa03 	bl	800407a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002c74:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <HW_TS_Start+0x100>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	22ca      	movs	r2, #202	; 0xca
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HW_TS_Start+0x100>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2253      	movs	r2, #83	; 0x53
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002c84:	79fa      	ldrb	r2, [r7, #7]
 8002c86:	492a      	ldr	r1, [pc, #168]	; (8002d30 <HW_TS_Start+0xfc>)
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	330c      	adds	r3, #12
 8002c94:	2202      	movs	r2, #2
 8002c96:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002c98:	79fa      	ldrb	r2, [r7, #7]
 8002c9a:	4925      	ldr	r1, [pc, #148]	; (8002d30 <HW_TS_Start+0xfc>)
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002cac:	79fa      	ldrb	r2, [r7, #7]
 8002cae:	4920      	ldr	r1, [pc, #128]	; (8002d30 <HW_TS_Start+0xfc>)
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	3304      	adds	r3, #4
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fab6 	bl	8002234 <linkTimer>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <HW_TS_Start+0x104>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <HW_TS_Start+0x108>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	7c7a      	ldrb	r2, [r7, #17]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d002      	beq.n	8002ce4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002cde:	f7ff fc6f 	bl	80025c0 <RescheduleTimerList>
 8002ce2:	e013      	b.n	8002d0c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	4912      	ldr	r1, [pc, #72]	; (8002d30 <HW_TS_Start+0xfc>)
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	8a7b      	ldrh	r3, [r7, #18]
 8002cf8:	79fa      	ldrb	r2, [r7, #7]
 8002cfa:	1ac9      	subs	r1, r1, r3
 8002cfc:	480c      	ldr	r0, [pc, #48]	; (8002d30 <HW_TS_Start+0xfc>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4403      	add	r3, r0
 8002d08:	3308      	adds	r3, #8
 8002d0a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HW_TS_Start+0x100>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	22ff      	movs	r2, #255	; 0xff
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002d14:	2003      	movs	r0, #3
 8002d16:	f001 f9a2 	bl	800405e <HAL_NVIC_EnableIRQ>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f383 8810 	msr	PRIMASK, r3
}
 8002d24:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002d26:	bf00      	nop
}
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000428 	.word	0x20000428
 8002d34:	20000750 	.word	0x20000750
 8002d38:	200004b8 	.word	0x200004b8
 8002d3c:	200004b9 	.word	0x200004b9

08002d40 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4798      	blx	r3

  return;
 8002d52:	bf00      	nop
}
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	4603      	mov	r3, r0
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HW_UART_Receive_IT+0x1e>
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d00d      	beq.n	8002d94 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002d78:	e019      	b.n	8002dae <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	; (8002db8 <HW_UART_Receive_IT+0x5c>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HW_UART_Receive_IT+0x60>)
 8002d82:	4a0f      	ldr	r2, [pc, #60]	; (8002dc0 <HW_UART_Receive_IT+0x64>)
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	89bb      	ldrh	r3, [r7, #12]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	480b      	ldr	r0, [pc, #44]	; (8002dbc <HW_UART_Receive_IT+0x60>)
 8002d8e:	f004 fd6f 	bl	8007870 <HAL_UART_Receive_IT>
            break;
 8002d92:	e00c      	b.n	8002dae <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8002d94:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <HW_UART_Receive_IT+0x68>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HW_UART_Receive_IT+0x6c>)
 8002d9c:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <HW_UART_Receive_IT+0x70>)
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	89bb      	ldrh	r3, [r7, #12]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	4808      	ldr	r0, [pc, #32]	; (8002dc8 <HW_UART_Receive_IT+0x6c>)
 8002da8:	f004 fd62 	bl	8007870 <HAL_UART_Receive_IT>
            break;
 8002dac:	bf00      	nop
    }

    return;
 8002dae:	bf00      	nop
}
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200004c8 	.word	0x200004c8
 8002dbc:	200005a8 	.word	0x200005a8
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	200004d0 	.word	0x200004d0
 8002dc8:	20000514 	.word	0x20000514
 8002dcc:	40008000 	.word	0x40008000

08002dd0 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	4603      	mov	r3, r0
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	4613      	mov	r3, r2
 8002de0:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <HW_UART_Transmit_IT+0x1e>
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d00d      	beq.n	8002e08 <HW_UART_Transmit_IT+0x38>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002dec:	e019      	b.n	8002e22 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(huart1, USART1);
 8002dee:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <HW_UART_Transmit_IT+0x5c>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <HW_UART_Transmit_IT+0x60>)
 8002df6:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <HW_UART_Transmit_IT+0x64>)
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	89bb      	ldrh	r3, [r7, #12]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	480b      	ldr	r0, [pc, #44]	; (8002e30 <HW_UART_Transmit_IT+0x60>)
 8002e02:	f004 fca1 	bl	8007748 <HAL_UART_Transmit_IT>
            break;
 8002e06:	e00c      	b.n	8002e22 <HW_UART_Transmit_IT+0x52>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8002e08:	4a0b      	ldr	r2, [pc, #44]	; (8002e38 <HW_UART_Transmit_IT+0x68>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HW_UART_Transmit_IT+0x6c>)
 8002e10:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <HW_UART_Transmit_IT+0x70>)
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	89bb      	ldrh	r3, [r7, #12]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	4808      	ldr	r0, [pc, #32]	; (8002e3c <HW_UART_Transmit_IT+0x6c>)
 8002e1c:	f004 fc94 	bl	8007748 <HAL_UART_Transmit_IT>
            break;
 8002e20:	bf00      	nop
    }

    return;
 8002e22:	bf00      	nop
}
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200004cc 	.word	0x200004cc
 8002e30:	200005a8 	.word	0x200005a8
 8002e34:	40013800 	.word	0x40013800
 8002e38:	200004d4 	.word	0x200004d4
 8002e3c:	20000514 	.word	0x20000514
 8002e40:	40008000 	.word	0x40008000

08002e44 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	4603      	mov	r3, r0
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	4613      	mov	r3, r2
 8002e54:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HW_UART_Transmit_DMA+0x26>
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d00f      	beq.n	8002e88 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002e68:	e01d      	b.n	8002ea6 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8002e6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <HW_UART_Transmit_DMA+0xa4>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002e70:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HW_UART_Transmit_DMA+0xa8>)
 8002e72:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HW_UART_Transmit_DMA+0xac>)
 8002e74:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002e76:	89bb      	ldrh	r3, [r7, #12]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	481b      	ldr	r0, [pc, #108]	; (8002eec <HW_UART_Transmit_DMA+0xa8>)
 8002e7e:	f004 fd43 	bl	8007908 <HAL_UART_Transmit_DMA>
 8002e82:	4603      	mov	r3, r0
 8002e84:	75fb      	strb	r3, [r7, #23]
            break;
 8002e86:	e00e      	b.n	8002ea6 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8002e88:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <HW_UART_Transmit_DMA+0xb0>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <HW_UART_Transmit_DMA+0xb4>)
 8002e90:	4a1a      	ldr	r2, [pc, #104]	; (8002efc <HW_UART_Transmit_DMA+0xb8>)
 8002e92:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8002e94:	89bb      	ldrh	r3, [r7, #12]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	4817      	ldr	r0, [pc, #92]	; (8002ef8 <HW_UART_Transmit_DMA+0xb4>)
 8002e9c:	f004 fd34 	bl	8007908 <HAL_UART_Transmit_DMA>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	75fb      	strb	r3, [r7, #23]
            break;
 8002ea4:	bf00      	nop
    }

    switch (hal_status)
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d817      	bhi.n	8002edc <HW_UART_Transmit_DMA+0x98>
 8002eac:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <HW_UART_Transmit_DMA+0x70>)
 8002eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ecb 	.word	0x08002ecb
 8002ebc:	08002ed1 	.word	0x08002ed1
 8002ec0:	08002ed7 	.word	0x08002ed7
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75bb      	strb	r3, [r7, #22]
            break;
 8002ec8:	e009      	b.n	8002ede <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	75bb      	strb	r3, [r7, #22]
            break;
 8002ece:	e006      	b.n	8002ede <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	75bb      	strb	r3, [r7, #22]
            break;
 8002ed4:	e003      	b.n	8002ede <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	75bb      	strb	r3, [r7, #22]
            break;
 8002eda:	e000      	b.n	8002ede <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8002edc:	bf00      	nop
    }

    return hw_status;
 8002ede:	7dbb      	ldrb	r3, [r7, #22]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200004cc 	.word	0x200004cc
 8002eec:	200005a8 	.word	0x200005a8
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	200004d4 	.word	0x200004d4
 8002ef8:	20000514 	.word	0x20000514
 8002efc:	40008000 	.word	0x40008000

08002f00 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <HAL_UART_RxCpltCallback+0x4c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00a      	beq.n	8002f28 <HAL_UART_RxCpltCallback+0x28>
 8002f12:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <HAL_UART_RxCpltCallback+0x50>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d10f      	bne.n	8002f38 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <HAL_UART_RxCpltCallback+0x54>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00d      	beq.n	8002f3c <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_UART_RxCpltCallback+0x54>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4798      	blx	r3
            }
            break;
 8002f26:	e009      	b.n	8002f3c <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_UART_RxCpltCallback+0x58>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_UART_RxCpltCallback+0x58>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4798      	blx	r3
            }
            break;
 8002f36:	e003      	b.n	8002f40 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 8002f38:	bf00      	nop
 8002f3a:	e002      	b.n	8002f42 <HAL_UART_RxCpltCallback+0x42>
            break;
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <HAL_UART_RxCpltCallback+0x42>
            break;
 8002f40:	bf00      	nop
    }

    return;
 8002f42:	bf00      	nop
}
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40008000 	.word	0x40008000
 8002f50:	40013800 	.word	0x40013800
 8002f54:	200004c8 	.word	0x200004c8
 8002f58:	200004d0 	.word	0x200004d0

08002f5c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <HAL_UART_TxCpltCallback+0x4c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00a      	beq.n	8002f84 <HAL_UART_TxCpltCallback+0x28>
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	; (8002fac <HAL_UART_TxCpltCallback+0x50>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10f      	bne.n	8002f94 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <HAL_UART_TxCpltCallback+0x54>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00d      	beq.n	8002f98 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <HAL_UART_TxCpltCallback+0x54>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4798      	blx	r3
            }
            break;
 8002f82:	e009      	b.n	8002f98 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_UART_TxCpltCallback+0x58>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_UART_TxCpltCallback+0x58>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4798      	blx	r3
            }
            break;
 8002f92:	e003      	b.n	8002f9c <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8002f94:	bf00      	nop
 8002f96:	e002      	b.n	8002f9e <HAL_UART_TxCpltCallback+0x42>
            break;
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <HAL_UART_TxCpltCallback+0x42>
            break;
 8002f9c:	bf00      	nop
    }

    return;
 8002f9e:	bf00      	nop
}
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40008000 	.word	0x40008000
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	200004cc 	.word	0x200004cc
 8002fb4:	200004d4 	.word	0x200004d4

08002fb8 <LL_RCC_LSE_SetDriveCapability>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc8:	f023 0218 	bic.w	r2, r3, #24
 8002fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_AHB1_GRP1_EnableClock>:
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4013      	ands	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003008:	68fb      	ldr	r3, [r7, #12]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_AHB2_GRP1_EnableClock>:
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4313      	orrs	r3, r2
 800302c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4013      	ands	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800304c:	f000 fe10 	bl	8003c70 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003050:	f7fe fe3a 	bl	8001cc8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003054:	f000 f81a 	bl	800308c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003058:	f000 f874 	bl	8003144 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 800305c:	f000 f88e 	bl	800317c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003060:	f000 f942 	bl	80032e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003064:	f000 f926 	bl	80032b4 <MX_DMA_Init>
  MX_RF_Init();
 8003068:	f000 f8e8 	bl	800323c <MX_RF_Init>
  MX_RTC_Init();
 800306c:	f000 f8ee 	bl	800324c <MX_RTC_Init>

      /*--[ Scanning Done ]--*/
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003070:	f7fe fe38 	bl	8001ce4 <MX_APPE_Init>




   sensirion_i2c_init(&hi2c1);
 8003074:	4804      	ldr	r0, [pc, #16]	; (8003088 <main+0x40>)
 8003076:	f7fd fb69 	bl	800074c <sensirion_i2c_init>
   sht4x_enable_low_power_mode(1);
 800307a:	2001      	movs	r0, #1
 800307c:	f7fd fbe8 	bl	8000850 <sht4x_enable_low_power_mode>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    MX_APPE_Process();
 8003080:	f7fe ff44 	bl	8001f0c <MX_APPE_Process>
 8003084:	e7fc      	b.n	8003080 <main+0x38>
 8003086:	bf00      	nop
 8003088:	200006fc 	.word	0x200006fc

0800308c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b09a      	sub	sp, #104	; 0x68
 8003090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003092:	f107 0320 	add.w	r3, r7, #32
 8003096:	2248      	movs	r2, #72	; 0x48
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f009 ff6a 	bl	800cf74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	611a      	str	r2, [r3, #16]
 80030ae:	615a      	str	r2, [r3, #20]
 80030b0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80030b2:	f002 fad3 	bl	800565c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f7ff ff7e 	bl	8002fb8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030bc:	4b20      	ldr	r3, [pc, #128]	; (8003140 <SystemClock_Config+0xb4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030c4:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <SystemClock_Config+0xb4>)
 80030c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <SystemClock_Config+0xb4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80030d8:	2307      	movs	r3, #7
 80030da:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80030e2:	2301      	movs	r3, #1
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ec:	2340      	movs	r3, #64	; 0x40
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030f4:	f107 0320 	add.w	r3, r7, #32
 80030f8:	4618      	mov	r0, r3
 80030fa:	f002 fec1 	bl	8005e80 <HAL_RCC_OscConfig>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003104:	f000 f91a 	bl	800333c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003108:	236f      	movs	r3, #111	; 0x6f
 800310a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800310c:	2302      	movs	r3, #2
 800310e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fa1d 	bl	8006568 <HAL_RCC_ClockConfig>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003134:	f000 f902 	bl	800333c <Error_Handler>
  }
}
 8003138:	bf00      	nop
 800313a:	3768      	adds	r7, #104	; 0x68
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	58000400 	.word	0x58000400

08003144 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b094      	sub	sp, #80	; 0x50
 8003148:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800314a:	463b      	mov	r3, r7
 800314c:	2250      	movs	r2, #80	; 0x50
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f009 ff0f 	bl	800cf74 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 8003156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800315a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800315c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003160:	647b      	str	r3, [r7, #68]	; 0x44
  //PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 // PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003162:	463b      	mov	r3, r7
 8003164:	4618      	mov	r0, r3
 8003166:	f003 fe3c 	bl	8006de2 <HAL_RCCEx_PeriphCLKConfig>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8003170:	f000 f8e4 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003174:	bf00      	nop
 8003176:	3750      	adds	r7, #80	; 0x50
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <MX_IPCC_Init+0x20>)
 8003182:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <MX_IPCC_Init+0x24>)
 8003184:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003186:	4805      	ldr	r0, [pc, #20]	; (800319c <MX_IPCC_Init+0x20>)
 8003188:	f002 f9e2 	bl	8005550 <HAL_IPCC_Init>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8003192:	f000 f8d3 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200004d8 	.word	0x200004d8
 80031a0:	58000c00 	.word	0x58000c00

080031a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80031a8:	4b22      	ldr	r3, [pc, #136]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031aa:	4a23      	ldr	r2, [pc, #140]	; (8003238 <MX_LPUART1_UART_Init+0x94>)
 80031ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031b6:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80031c8:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031ca:	220c      	movs	r2, #12
 80031cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031dc:	2200      	movs	r2, #0
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031e0:	4b14      	ldr	r3, [pc, #80]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80031ec:	4811      	ldr	r0, [pc, #68]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 80031ee:	f004 fa5b 	bl	80076a8 <HAL_UART_Init>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80031f8:	f000 f8a0 	bl	800333c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031fc:	2100      	movs	r1, #0
 80031fe:	480d      	ldr	r0, [pc, #52]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 8003200:	f006 fce1 	bl	8009bc6 <HAL_UARTEx_SetTxFifoThreshold>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800320a:	f000 f897 	bl	800333c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800320e:	2100      	movs	r1, #0
 8003210:	4808      	ldr	r0, [pc, #32]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 8003212:	f006 fd16 	bl	8009c42 <HAL_UARTEx_SetRxFifoThreshold>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800321c:	f000 f88e 	bl	800333c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003220:	4804      	ldr	r0, [pc, #16]	; (8003234 <MX_LPUART1_UART_Init+0x90>)
 8003222:	f006 fc97 	bl	8009b54 <HAL_UARTEx_DisableFifoMode>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800322c:	f000 f886 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000514 	.word	0x20000514
 8003238:	40008000 	.word	0x40008000

0800323c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003250:	4b16      	ldr	r3, [pc, #88]	; (80032ac <MX_RTC_Init+0x60>)
 8003252:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <MX_RTC_Init+0x64>)
 8003254:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <MX_RTC_Init+0x60>)
 8003258:	2200      	movs	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <MX_RTC_Init+0x60>)
 800325e:	220f      	movs	r2, #15
 8003260:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <MX_RTC_Init+0x60>)
 8003264:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003268:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <MX_RTC_Init+0x60>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <MX_RTC_Init+0x60>)
 8003272:	2200      	movs	r2, #0
 8003274:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <MX_RTC_Init+0x60>)
 8003278:	2200      	movs	r2, #0
 800327a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <MX_RTC_Init+0x60>)
 800327e:	2200      	movs	r2, #0
 8003280:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003282:	480a      	ldr	r0, [pc, #40]	; (80032ac <MX_RTC_Init+0x60>)
 8003284:	f004 f834 	bl	80072f0 <HAL_RTC_Init>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800328e:	f000 f855 	bl	800333c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	4805      	ldr	r0, [pc, #20]	; (80032ac <MX_RTC_Init+0x60>)
 8003298:	f004 f92a 	bl	80074f0 <HAL_RTCEx_SetWakeUpTimer_IT>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80032a2:	f000 f84b 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000750 	.word	0x20000750
 80032b0:	40002800 	.word	0x40002800

080032b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80032b8:	2004      	movs	r0, #4
 80032ba:	f7ff fe93 	bl	8002fe4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032be:	2001      	movs	r0, #1
 80032c0:	f7ff fe90 	bl	8002fe4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80032c4:	2200      	movs	r2, #0
 80032c6:	2100      	movs	r1, #0
 80032c8:	200b      	movs	r0, #11
 80032ca:	f000 feae 	bl	800402a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80032ce:	200b      	movs	r0, #11
 80032d0:	f000 fec5 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	200c      	movs	r0, #12
 80032da:	f000 fea6 	bl	800402a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80032de:	200c      	movs	r0, #12
 80032e0:	f000 febd 	bl	800405e <HAL_NVIC_EnableIRQ>

}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ee:	2004      	movs	r0, #4
 80032f0:	f7ff fe91 	bl	8003016 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f4:	2001      	movs	r0, #1
 80032f6:	f7ff fe8e 	bl	8003016 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fa:	2002      	movs	r0, #2
 80032fc:	f7ff fe8b 	bl	8003016 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800330e:	2303      	movs	r3, #3
 8003310:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003312:	2301      	movs	r3, #1
 8003314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	4619      	mov	r1, r3
 8003322:	4805      	ldr	r0, [pc, #20]	; (8003338 <MX_GPIO_Init+0x50>)
 8003324:	f001 fad4 	bl	80048d0 <HAL_GPIO_Init>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003328:	2102      	movs	r1, #2
 800332a:	4803      	ldr	r0, [pc, #12]	; (8003338 <MX_GPIO_Init+0x50>)
 800332c:	f001 fc58 	bl	8004be0 <HAL_GPIO_TogglePin>

}
 8003330:	bf00      	nop
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	48000800 	.word	0x48000800

0800333c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_AHB2_GRP1_EnableClock>:
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033bc:	68fb      	ldr	r3, [r7, #12]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <LL_AHB3_GRP1_EnableClock>:
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80033d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4313      	orrs	r3, r2
 80033e0:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4013      	ands	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_APB1_GRP1_EnableClock>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800340a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4313      	orrs	r3, r2
 8003412:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003418:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4013      	ands	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003420:	68fb      	ldr	r3, [r7, #12]
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <LL_APB1_GRP2_EnableClock>:
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800343c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4313      	orrs	r3, r2
 8003444:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4013      	ands	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003452:	68fb      	ldr	r3, [r7, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_APB2_GRP1_EnableClock>:
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800346e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4313      	orrs	r3, r2
 8003476:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4013      	ands	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003484:	68fb      	ldr	r3, [r7, #12]
}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003496:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800349a:	f7ff ff96 	bl	80033ca <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	2001      	movs	r0, #1
 80034a4:	f000 fdc1 	bl	800402a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 80034a8:	2001      	movs	r0, #1
 80034aa:	f000 fdd8 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80034ae:	2200      	movs	r2, #0
 80034b0:	2100      	movs	r1, #0
 80034b2:	2004      	movs	r0, #4
 80034b4:	f000 fdb9 	bl	800402a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80034b8:	2004      	movs	r0, #4
 80034ba:	f000 fdd0 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2100      	movs	r1, #0
 80034c2:	2005      	movs	r0, #5
 80034c4:	f000 fdb1 	bl	800402a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80034c8:	2005      	movs	r0, #5
 80034ca:	f000 fdc8 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2100      	movs	r1, #0
 80034d2:	2015      	movs	r0, #21
 80034d4:	f000 fda9 	bl	800402a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 80034d8:	2015      	movs	r0, #21
 80034da:	f000 fdc0 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	202b      	movs	r0, #43	; 0x2b
 80034e4:	f000 fda1 	bl	800402a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 80034e8:	202b      	movs	r0, #43	; 0x2b
 80034ea:	f000 fdb8 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2100      	movs	r1, #0
 80034f2:	202e      	movs	r0, #46	; 0x2e
 80034f4:	f000 fd99 	bl	800402a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80034f8:	202e      	movs	r0, #46	; 0x2e
 80034fa:	f000 fdb0 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2100      	movs	r1, #0
 8003502:	2036      	movs	r0, #54	; 0x36
 8003504:	f000 fd91 	bl	800402a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003508:	2036      	movs	r0, #54	; 0x36
 800350a:	f000 fda8 	bl	800405e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0d      	ldr	r2, [pc, #52]	; (8003558 <HAL_IPCC_MspInit+0x44>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d113      	bne.n	800354e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003526:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800352a:	f7ff ff4e 	bl	80033ca <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	2100      	movs	r1, #0
 8003532:	202c      	movs	r0, #44	; 0x2c
 8003534:	f000 fd79 	bl	800402a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003538:	202c      	movs	r0, #44	; 0x2c
 800353a:	f000 fd90 	bl	800405e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800353e:	2200      	movs	r2, #0
 8003540:	2100      	movs	r1, #0
 8003542:	202d      	movs	r0, #45	; 0x2d
 8003544:	f000 fd71 	bl	800402a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003548:	202d      	movs	r0, #45	; 0x2d
 800354a:	f000 fd88 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	58000c00 	.word	0x58000c00

0800355c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b09c      	sub	sp, #112	; 0x70
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	2250      	movs	r2, #80	; 0x50
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f009 fcf9 	bl	800cf74 <memset>
  if(huart->Instance==LPUART1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a67      	ldr	r2, [pc, #412]	; (8003724 <HAL_UART_MspInit+0x1c8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d156      	bne.n	800363a <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800358c:	2302      	movs	r3, #2
 800358e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003590:	2300      	movs	r3, #0
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	4618      	mov	r0, r3
 800359a:	f003 fc22 	bl	8006de2 <HAL_RCCEx_PeriphCLKConfig>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80035a4:	f7ff feca 	bl	800333c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80035a8:	2001      	movs	r0, #1
 80035aa:	f7ff ff40 	bl	800342e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ae:	2001      	movs	r0, #1
 80035b0:	f7ff fef2 	bl	8003398 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035b4:	230c      	movs	r3, #12
 80035b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b8:	2302      	movs	r3, #2
 80035ba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c0:	2300      	movs	r3, #0
 80035c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80035c4:	2308      	movs	r3, #8
 80035c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80035cc:	4619      	mov	r1, r3
 80035ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d2:	f001 f97d 	bl	80048d0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 80035d6:	4b54      	ldr	r3, [pc, #336]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 80035d8:	4a54      	ldr	r2, [pc, #336]	; (800372c <HAL_UART_MspInit+0x1d0>)
 80035da:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80035dc:	4b52      	ldr	r3, [pc, #328]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 80035de:	2211      	movs	r2, #17
 80035e0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035e2:	4b51      	ldr	r3, [pc, #324]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 80035e4:	2210      	movs	r2, #16
 80035e6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e8:	4b4f      	ldr	r3, [pc, #316]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035ee:	4b4e      	ldr	r3, [pc, #312]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035f4:	4b4c      	ldr	r3, [pc, #304]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035fa:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003600:	4b49      	ldr	r3, [pc, #292]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003606:	4b48      	ldr	r3, [pc, #288]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800360c:	4846      	ldr	r0, [pc, #280]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 800360e:	f000 fd6f 	bl	80040f0 <HAL_DMA_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003618:	f7ff fe90 	bl	800333c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a42      	ldr	r2, [pc, #264]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 8003620:	67da      	str	r2, [r3, #124]	; 0x7c
 8003622:	4a41      	ldr	r2, [pc, #260]	; (8003728 <HAL_UART_MspInit+0x1cc>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2100      	movs	r1, #0
 800362c:	2025      	movs	r0, #37	; 0x25
 800362e:	f000 fcfc 	bl	800402a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003632:	2025      	movs	r0, #37	; 0x25
 8003634:	f000 fd13 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003638:	e06f      	b.n	800371a <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a3c      	ldr	r2, [pc, #240]	; (8003730 <HAL_UART_MspInit+0x1d4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d16a      	bne.n	800371a <HAL_UART_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003644:	2301      	movs	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	4618      	mov	r0, r3
 8003652:	f003 fbc6 	bl	8006de2 <HAL_RCCEx_PeriphCLKConfig>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_UART_MspInit+0x104>
      Error_Handler();
 800365c:	f7ff fe6e 	bl	800333c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003660:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003664:	f7ff fefc 	bl	8003460 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003668:	2001      	movs	r0, #1
 800366a:	f7ff fe95 	bl	8003398 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	2002      	movs	r0, #2
 8003670:	f7ff fe92 	bl	8003398 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003678:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003682:	2300      	movs	r3, #0
 8003684:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003686:	2307      	movs	r3, #7
 8003688:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800368e:	4619      	mov	r1, r3
 8003690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003694:	f001 f91c 	bl	80048d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003698:	23c0      	movs	r3, #192	; 0xc0
 800369a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036a8:	2307      	movs	r3, #7
 80036aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80036b0:	4619      	mov	r1, r3
 80036b2:	4820      	ldr	r0, [pc, #128]	; (8003734 <HAL_UART_MspInit+0x1d8>)
 80036b4:	f001 f90c 	bl	80048d0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80036b8:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 80036ba:	4a20      	ldr	r2, [pc, #128]	; (800373c <HAL_UART_MspInit+0x1e0>)
 80036bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 80036c0:	220f      	movs	r2, #15
 80036c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036c4:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 80036c6:	2210      	movs	r2, #16
 80036c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036d0:	4b19      	ldr	r3, [pc, #100]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 80036d2:	2280      	movs	r2, #128	; 0x80
 80036d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036d6:	4b18      	ldr	r3, [pc, #96]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 80036d8:	2200      	movs	r2, #0
 80036da:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036dc:	4b16      	ldr	r3, [pc, #88]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 80036de:	2200      	movs	r2, #0
 80036e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80036ee:	4812      	ldr	r0, [pc, #72]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 80036f0:	f000 fcfe 	bl	80040f0 <HAL_DMA_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 80036fa:	f7ff fe1f 	bl	800333c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a0d      	ldr	r2, [pc, #52]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 8003702:	67da      	str	r2, [r3, #124]	; 0x7c
 8003704:	4a0c      	ldr	r2, [pc, #48]	; (8003738 <HAL_UART_MspInit+0x1dc>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800370a:	2200      	movs	r2, #0
 800370c:	2100      	movs	r1, #0
 800370e:	2024      	movs	r0, #36	; 0x24
 8003710:	f000 fc8b 	bl	800402a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003714:	2024      	movs	r0, #36	; 0x24
 8003716:	f000 fca2 	bl	800405e <HAL_NVIC_EnableIRQ>
}
 800371a:	bf00      	nop
 800371c:	3770      	adds	r7, #112	; 0x70
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40008000 	.word	0x40008000
 8003728:	2000063c 	.word	0x2000063c
 800372c:	40020008 	.word	0x40020008
 8003730:	40013800 	.word	0x40013800
 8003734:	48000400 	.word	0x48000400
 8003738:	2000069c 	.word	0x2000069c
 800373c:	4002001c 	.word	0x4002001c

08003740 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b096      	sub	sp, #88	; 0x58
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003748:	f107 0308 	add.w	r3, r7, #8
 800374c:	2250      	movs	r2, #80	; 0x50
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f009 fc0f 	bl	800cf74 <memset>
  if(hrtc->Instance==RTC)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_RTC_MspInit+0x80>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d12b      	bne.n	80037b8 <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003760:	f001 ff7c 	bl	800565c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8003764:	f001 ff7a 	bl	800565c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 8003768:	f44f 7080 	mov.w	r0, #256	; 0x100
 800376c:	f7ff fded 	bl	800334a <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003774:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800377c:	f107 0308 	add.w	r3, r7, #8
 8003780:	4618      	mov	r0, r3
 8003782:	f003 fb2e 	bl	8006de2 <HAL_RCCEx_PeriphCLKConfig>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 800378c:	f7ff fdd6 	bl	800333c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003790:	f7ff fdf1 	bl	8003376 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003794:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003798:	f7ff fe30 	bl	80033fc <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800379c:	2200      	movs	r2, #0
 800379e:	2100      	movs	r1, #0
 80037a0:	2003      	movs	r0, #3
 80037a2:	f000 fc42 	bl	800402a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80037a6:	2003      	movs	r0, #3
 80037a8:	f000 fc59 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <HAL_RTC_MspInit+0x80>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a03      	ldr	r2, [pc, #12]	; (80037c0 <HAL_RTC_MspInit+0x80>)
 80037b2:	f023 0307 	bic.w	r3, r3, #7
 80037b6:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80037b8:	bf00      	nop
 80037ba:	3758      	adds	r7, #88	; 0x58
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40002800 	.word	0x40002800

080037c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037d6:	e7fe      	b.n	80037d6 <HardFault_Handler+0x4>

080037d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037dc:	e7fe      	b.n	80037dc <MemManage_Handler+0x4>

080037de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e2:	e7fe      	b.n	80037e2 <BusFault_Handler+0x4>

080037e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <UsageFault_Handler+0x4>

080037ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003818:	f000 fa84 	bl	8003d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	bd80      	pop	{r7, pc}

08003820 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003824:	f001 ff80 	bl	8005728 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}

0800382c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003830:	f7fe ff60 	bl	80026f4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}

08003838 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800383c:	f000 ff8a 	bl	8004754 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003840:	bf00      	nop
 8003842:	bd80      	pop	{r7, pc}

08003844 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003858:	4802      	ldr	r0, [pc, #8]	; (8003864 <DMA1_Channel1_IRQHandler+0x10>)
 800385a:	f000 fe2a 	bl	80044b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2000063c 	.word	0x2000063c

08003868 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <DMA1_Channel2_IRQHandler+0x10>)
 800386e:	f000 fe20 	bl	80044b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	2000069c 	.word	0x2000069c

0800387c <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <USART1_IRQHandler+0x10>)
 8003892:	f004 f8b9 	bl	8007a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200005a8 	.word	0x200005a8

080038a0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80038a4:	4802      	ldr	r0, [pc, #8]	; (80038b0 <LPUART1_IRQHandler+0x10>)
 80038a6:	f004 f8af 	bl	8007a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000514 	.word	0x20000514

080038b4 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80038c6:	f7fd ff97 	bl	80017f8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}

080038ce <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80038d2:	f7fd ffeb 	bl	80018ac <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}

080038da <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80038de:	f001 f9b1 	bl	8004c44 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER1_PIN);
 80038f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80038fc:	f001 f98a 	bl	8004c14 <HAL_GPIO_EXTI_IRQHandler>
}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}

08003904 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8003904:	b5b0      	push	{r4, r5, r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
 8003910:	4613      	mov	r3, r2
 8003912:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8003914:	787b      	ldrb	r3, [r7, #1]
 8003916:	3b01      	subs	r3, #1
 8003918:	2b04      	cmp	r3, #4
 800391a:	d83e      	bhi.n	800399a <logRegion+0x96>
 800391c:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <logRegion+0x20>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003939 	.word	0x08003939
 8003928:	0800394d 	.word	0x0800394d
 800392c:	08003961 	.word	0x08003961
 8003930:	08003973 	.word	0x08003973
 8003934:	08003987 	.word	0x08003987
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 8003938:	f107 0308 	add.w	r3, r7, #8
 800393c:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <logRegion+0xc4>)
 800393e:	461c      	mov	r4, r3
 8003940:	4615      	mov	r5, r2
 8003942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003946:	682b      	ldr	r3, [r5, #0]
 8003948:	7023      	strb	r3, [r4, #0]
      break;
 800394a:	e02f      	b.n	80039ac <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 800394c:	f107 0308 	add.w	r3, r7, #8
 8003950:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <logRegion+0xc8>)
 8003952:	461c      	mov	r4, r3
 8003954:	4615      	mov	r5, r2
 8003956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800395a:	682b      	ldr	r3, [r5, #0]
 800395c:	6023      	str	r3, [r4, #0]
      break;
 800395e:	e025      	b.n	80039ac <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 8003960:	f107 0308 	add.w	r3, r7, #8
 8003964:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <logRegion+0xcc>)
 8003966:	461c      	mov	r4, r3
 8003968:	4613      	mov	r3, r2
 800396a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800396c:	c407      	stmia	r4!, {r0, r1, r2}
 800396e:	8023      	strh	r3, [r4, #0]
      break;
 8003970:	e01c      	b.n	80039ac <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 8003972:	f107 0308 	add.w	r3, r7, #8
 8003976:	4a17      	ldr	r2, [pc, #92]	; (80039d4 <logRegion+0xd0>)
 8003978:	461c      	mov	r4, r3
 800397a:	4615      	mov	r5, r2
 800397c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800397e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	8023      	strh	r3, [r4, #0]
      break;
 8003984:	e012      	b.n	80039ac <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 8003986:	f107 0308 	add.w	r3, r7, #8
 800398a:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <logRegion+0xd4>)
 800398c:	461c      	mov	r4, r3
 800398e:	4615      	mov	r5, r2
 8003990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003994:	682b      	ldr	r3, [r5, #0]
 8003996:	7023      	strb	r3, [r4, #0]
      break;
 8003998:	e008      	b.n	80039ac <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 800399a:	f107 0308 	add.w	r3, r7, #8
 800399e:	4a0f      	ldr	r2, [pc, #60]	; (80039dc <logRegion+0xd8>)
 80039a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039a4:	6018      	str	r0, [r3, #0]
 80039a6:	3304      	adds	r3, #4
 80039a8:	7019      	strb	r1, [r3, #0]
      break;
 80039aa:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 80039ac:	8879      	ldrh	r1, [r7, #2]
 80039ae:	f107 0308 	add.w	r3, r7, #8
 80039b2:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <logRegion+0xdc>)
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f009 fafd 	bl	800cfb4 <sniprintf>
 80039ba:	4603      	mov	r3, r0
 80039bc:	b29b      	uxth	r3, r3
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3728      	adds	r7, #40	; 0x28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bdb0      	pop	{r4, r5, r7, pc}
 80039c6:	bf00      	nop
 80039c8:	0800eb9c 	.word	0x0800eb9c
 80039cc:	0800ebb0 	.word	0x0800ebb0
 80039d0:	0800ebc4 	.word	0x0800ebc4
 80039d4:	0800ebd4 	.word	0x0800ebd4
 80039d8:	0800ebe8 	.word	0x0800ebe8
 80039dc:	0800ebfc 	.word	0x0800ebfc
 80039e0:	0800ec04 	.word	0x0800ec04

080039e4 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d00a      	beq.n	8003a0a <levelToString+0x26>
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	dc0a      	bgt.n	8003a0e <levelToString+0x2a>
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d002      	beq.n	8003a02 <levelToString+0x1e>
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d002      	beq.n	8003a06 <levelToString+0x22>
 8003a00:	e005      	b.n	8003a0e <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <levelToString+0x38>)
 8003a04:	e004      	b.n	8003a10 <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <levelToString+0x3c>)
 8003a08:	e002      	b.n	8003a10 <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <levelToString+0x40>)
 8003a0c:	e000      	b.n	8003a10 <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <levelToString+0x44>)
  }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	0800ec08 	.word	0x0800ec08
 8003a20:	0800ec10 	.word	0x0800ec10
 8003a24:	0800ec18 	.word	0x0800ec18
 8003a28:	0800ec20 	.word	0x0800ec20

08003a2c <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	807b      	strh	r3, [r7, #2]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8003a3c:	887c      	ldrh	r4, [r7, #2]
 8003a3e:	787b      	ldrb	r3, [r7, #1]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ffcf 	bl	80039e4 <levelToString>
 8003a46:	4603      	mov	r3, r0
 8003a48:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <logLevel+0x34>)
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f009 fab1 	bl	800cfb4 <sniprintf>
 8003a52:	4603      	mov	r3, r0
 8003a54:	b29b      	uxth	r3, r3
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd90      	pop	{r4, r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	0800ec28 	.word	0x0800ec28

08003a64 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8003a64:	b40c      	push	{r2, r3}
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b0c4      	sub	sp, #272	; 0x110
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a72:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a7c:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003a80:	460a      	mov	r2, r1
 8003a82:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8003a8a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003a8e:	f107 020c 	add.w	r2, r7, #12
 8003a92:	18d0      	adds	r0, r2, r3
 8003a94:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003a98:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003a9c:	b299      	uxth	r1, r3
 8003a9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003aa2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f7ff ffbf 	bl	8003a2c <logLevel>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8003abc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003ac0:	f107 020c 	add.w	r2, r7, #12
 8003ac4:	18d0      	adds	r0, r2, r3
 8003ac6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003aca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003ace:	b299      	uxth	r1, r3
 8003ad0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ad4:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f7ff ff12 	bl	8003904 <logRegion>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003ae8:	4413      	add	r3, r2
 8003aea:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 8003aee:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8003af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003afa:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8003afc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003b00:	f107 020c 	add.w	r2, r7, #12
 8003b04:	18d0      	adds	r0, r2, r3
 8003b06:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003b0a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8003b0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003b1c:	f009 faaa 	bl	800d074 <vsniprintf>
 8003b20:	4603      	mov	r3, r0
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003b28:	4413      	add	r3, r2
 8003b2a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 8003b2e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b42:	210d      	movs	r1, #13
 8003b44:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 8003b46:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8003b50:	461a      	mov	r2, r3
 8003b52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b5a:	210a      	movs	r1, #10
 8003b5c:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 8003b5e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b72:	2100      	movs	r1, #0
 8003b74:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 8003b76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b7a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d805      	bhi.n	8003b90 <logApplication+0x12c>
  {
    printf("%s", logString);
 8003b84:	f107 030c 	add.w	r3, r7, #12
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4805      	ldr	r0, [pc, #20]	; (8003ba0 <logApplication+0x13c>)
 8003b8c:	f009 f9fa 	bl	800cf84 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8003b90:	bf00      	nop
 8003b92:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003b96:	46bd      	mov	sp, r7
 8003b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b9c:	b002      	add	sp, #8
 8003b9e:	4770      	bx	lr
 8003ba0:	0800ec28 	.word	0x0800ec28

08003ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003ba8:	4b26      	ldr	r3, [pc, #152]	; (8003c44 <SystemInit+0xa0>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003bae:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <SystemInit+0xa0>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	4a23      	ldr	r2, [pc, #140]	; (8003c44 <SystemInit+0xa0>)
 8003bb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003bd6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003be2:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <SystemInit+0xa4>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf4:	f023 0305 	bic.w	r3, r3, #5
 8003bf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c14:	4a0d      	ldr	r2, [pc, #52]	; (8003c4c <SystemInit+0xa8>)
 8003c16:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1c:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <SystemInit+0xa8>)
 8003c1e:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c34:	2200      	movs	r2, #0
 8003c36:	619a      	str	r2, [r3, #24]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000ed00 	.word	0xe000ed00
 8003c48:	faf6fefb 	.word	0xfaf6fefb
 8003c4c:	22041000 	.word	0x22041000

08003c50 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6053      	str	r3, [r2, #4]
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	e0042000 	.word	0xe0042000

08003c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <HAL_Init+0x3c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a0b      	ldr	r2, [pc, #44]	; (8003cac <HAL_Init+0x3c>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c86:	2003      	movs	r0, #3
 8003c88:	f000 f9c4 	bl	8004014 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f000 f80f 	bl	8003cb0 <HAL_InitTick>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	71fb      	strb	r3, [r7, #7]
 8003c9c:	e001      	b.n	8003ca2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c9e:	f7ff fbf8 	bl	8003492 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	58004000 	.word	0x58004000

08003cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <HAL_InitTick+0x6c>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d024      	beq.n	8003d0e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003cc4:	f002 fdfc 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <HAL_InitTick+0x6c>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 f9de 	bl	800409e <HAL_SYSTICK_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10f      	bne.n	8003d08 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b0f      	cmp	r3, #15
 8003cec:	d809      	bhi.n	8003d02 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf6:	f000 f998 	bl	800402a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HAL_InitTick+0x70>)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	e007      	b.n	8003d12 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
 8003d06:	e004      	b.n	8003d12 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e001      	b.n	8003d12 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000024 	.word	0x20000024
 8003d20:	20000020 	.word	0x20000020

08003d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_IncTick+0x20>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_IncTick+0x24>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4413      	add	r3, r2
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <HAL_IncTick+0x24>)
 8003d36:	6013      	str	r3, [r2, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000024 	.word	0x20000024
 8003d48:	2000077c 	.word	0x2000077c

08003d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <HAL_GetTick+0x14>)
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	2000077c 	.word	0x2000077c

08003d64 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_GetTickPrio+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000020 	.word	0x20000020

08003d7c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003d80:	f7ff ff66 	bl	8003c50 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003d84:	bf00      	nop
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003da4:	4013      	ands	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dba:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	60d3      	str	r3, [r2, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 0307 	and.w	r3, r3, #7
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	db0b      	blt.n	8003e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	4907      	ldr	r1, [pc, #28]	; (8003e24 <__NVIC_EnableIRQ+0x38>)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	e000e100 	.word	0xe000e100

08003e28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	db12      	blt.n	8003e60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	f003 021f 	and.w	r2, r3, #31
 8003e40:	490a      	ldr	r1, [pc, #40]	; (8003e6c <__NVIC_DisableIRQ+0x44>)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	2001      	movs	r0, #1
 8003e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4e:	3320      	adds	r3, #32
 8003e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e54:	f3bf 8f4f 	dsb	sy
}
 8003e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e5a:	f3bf 8f6f 	isb	sy
}
 8003e5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000e100 	.word	0xe000e100

08003e70 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	db0c      	blt.n	8003e9c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	f003 021f 	and.w	r2, r3, #31
 8003e88:	4907      	ldr	r1, [pc, #28]	; (8003ea8 <__NVIC_SetPendingIRQ+0x38>)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2001      	movs	r0, #1
 8003e92:	fa00 f202 	lsl.w	r2, r0, r2
 8003e96:	3340      	adds	r3, #64	; 0x40
 8003e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000e100 	.word	0xe000e100

08003eac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	db0c      	blt.n	8003ed8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	f003 021f 	and.w	r2, r3, #31
 8003ec4:	4907      	ldr	r1, [pc, #28]	; (8003ee4 <__NVIC_ClearPendingIRQ+0x38>)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	2001      	movs	r0, #1
 8003ece:	fa00 f202 	lsl.w	r2, r0, r2
 8003ed2:	3360      	adds	r3, #96	; 0x60
 8003ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000e100 	.word	0xe000e100

08003ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	6039      	str	r1, [r7, #0]
 8003ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	db0a      	blt.n	8003f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	490c      	ldr	r1, [pc, #48]	; (8003f34 <__NVIC_SetPriority+0x4c>)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	0112      	lsls	r2, r2, #4
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f10:	e00a      	b.n	8003f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	4908      	ldr	r1, [pc, #32]	; (8003f38 <__NVIC_SetPriority+0x50>)
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	3b04      	subs	r3, #4
 8003f20:	0112      	lsls	r2, r2, #4
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	440b      	add	r3, r1
 8003f26:	761a      	strb	r2, [r3, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	e000e100 	.word	0xe000e100
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	; 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f1c3 0307 	rsb	r3, r3, #7
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	bf28      	it	cs
 8003f5a:	2304      	movcs	r3, #4
 8003f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3304      	adds	r3, #4
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d902      	bls.n	8003f6c <NVIC_EncodePriority+0x30>
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3b03      	subs	r3, #3
 8003f6a:	e000      	b.n	8003f6e <NVIC_EncodePriority+0x32>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	401a      	ands	r2, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f84:	f04f 31ff 	mov.w	r1, #4294967295
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	43d9      	mvns	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f94:	4313      	orrs	r3, r2
         );
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3724      	adds	r7, #36	; 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003fa8:	f3bf 8f4f 	dsb	sy
}
 8003fac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003fae:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <__NVIC_SystemReset+0x24>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003fb6:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <__NVIC_SystemReset+0x24>)
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <__NVIC_SystemReset+0x28>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fbe:	f3bf 8f4f 	dsb	sy
}
 8003fc2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003fc4:	bf00      	nop
 8003fc6:	e7fd      	b.n	8003fc4 <__NVIC_SystemReset+0x20>
 8003fc8:	e000ed00 	.word	0xe000ed00
 8003fcc:	05fa0004 	.word	0x05fa0004

08003fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe0:	d301      	bcc.n	8003fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e00f      	b.n	8004006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <SysTick_Config+0x40>)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fee:	210f      	movs	r1, #15
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	f7ff ff78 	bl	8003ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <SysTick_Config+0x40>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ffe:	4b04      	ldr	r3, [pc, #16]	; (8004010 <SysTick_Config+0x40>)
 8004000:	2207      	movs	r2, #7
 8004002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	e000e010 	.word	0xe000e010

08004014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff feb3 	bl	8003d88 <__NVIC_SetPriorityGrouping>
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	4603      	mov	r3, r0
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
 8004036:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004038:	f7ff feca 	bl	8003dd0 <__NVIC_GetPriorityGrouping>
 800403c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	6978      	ldr	r0, [r7, #20]
 8004044:	f7ff ff7a 	bl	8003f3c <NVIC_EncodePriority>
 8004048:	4602      	mov	r2, r0
 800404a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800404e:	4611      	mov	r1, r2
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff ff49 	bl	8003ee8 <__NVIC_SetPriority>
}
 8004056:	bf00      	nop
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	4603      	mov	r3, r0
 8004066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff febd 	bl	8003dec <__NVIC_EnableIRQ>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	4603      	mov	r3, r0
 8004082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fecd 	bl	8003e28 <__NVIC_DisableIRQ>
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800409a:	f7ff ff83 	bl	8003fa4 <__NVIC_SystemReset>

0800409e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ff92 	bl	8003fd0 <SysTick_Config>
 80040ac:	4603      	mov	r3, r0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	4603      	mov	r3, r0
 80040be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80040c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff fed3 	bl	8003e70 <__NVIC_SetPendingIRQ>
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b082      	sub	sp, #8
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	4603      	mov	r3, r0
 80040da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80040dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fee3 	bl	8003eac <__NVIC_ClearPendingIRQ>
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e08e      	b.n	8004220 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_DMA_Init+0x138>)
 800410a:	429a      	cmp	r2, r3
 800410c:	d80f      	bhi.n	800412e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	4b45      	ldr	r3, [pc, #276]	; (800422c <HAL_DMA_Init+0x13c>)
 8004116:	4413      	add	r3, r2
 8004118:	4a45      	ldr	r2, [pc, #276]	; (8004230 <HAL_DMA_Init+0x140>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	009a      	lsls	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a42      	ldr	r2, [pc, #264]	; (8004234 <HAL_DMA_Init+0x144>)
 800412a:	641a      	str	r2, [r3, #64]	; 0x40
 800412c:	e00e      	b.n	800414c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	4b40      	ldr	r3, [pc, #256]	; (8004238 <HAL_DMA_Init+0x148>)
 8004136:	4413      	add	r3, r2
 8004138:	4a3d      	ldr	r2, [pc, #244]	; (8004230 <HAL_DMA_Init+0x140>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	009a      	lsls	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a3c      	ldr	r2, [pc, #240]	; (800423c <HAL_DMA_Init+0x14c>)
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fa74 	bl	800468c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041ac:	d102      	bne.n	80041b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80041c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <HAL_DMA_Init+0x106>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d80c      	bhi.n	80041f6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fa93 	bl	8004708 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	e008      	b.n	8004208 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40020407 	.word	0x40020407
 800422c:	bffdfff8 	.word	0xbffdfff8
 8004230:	cccccccd 	.word	0xcccccccd
 8004234:	40020000 	.word	0x40020000
 8004238:	bffdfbf8 	.word	0xbffdfbf8
 800423c:	40020400 	.word	0x40020400

08004240 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_DMA_Start_IT+0x20>
 800425c:	2302      	movs	r3, #2
 800425e:	e066      	b.n	800432e <HAL_DMA_Start_IT+0xee>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d155      	bne.n	8004320 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f9b9 	bl	8004610 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 020e 	orr.w	r2, r2, #14
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e00f      	b.n	80042d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0204 	bic.w	r2, r2, #4
 80042c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 020a 	orr.w	r2, r2, #10
 80042d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e005      	b.n	800432c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004328:	2302      	movs	r3, #2
 800432a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e04f      	b.n	80043e8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d008      	beq.n	8004366 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2204      	movs	r2, #4
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e040      	b.n	80043e8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 020e 	bic.w	r2, r2, #14
 8004374:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004384:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f003 021c 	and.w	r2, r3, #28
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2101      	movs	r1, #1
 80043a4:	fa01 f202 	lsl.w	r2, r1, r2
 80043a8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043b2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043d4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d005      	beq.n	8004418 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2204      	movs	r2, #4
 8004410:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
 8004416:	e047      	b.n	80044a8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 020e 	bic.w	r2, r2, #14
 8004426:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004446:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444c:	f003 021c 	and.w	r2, r3, #28
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	2101      	movs	r1, #1
 8004456:	fa01 f202 	lsl.w	r2, r1, r2
 800445a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004464:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800447c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004486:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	4798      	blx	r3
    }
  }
  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f003 031c 	and.w	r3, r3, #28
 80044d2:	2204      	movs	r2, #4
 80044d4:	409a      	lsls	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d026      	beq.n	800452c <HAL_DMA_IRQHandler+0x7a>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d021      	beq.n	800452c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0204 	bic.w	r2, r2, #4
 8004504:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	f003 021c 	and.w	r2, r3, #28
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2104      	movs	r1, #4
 8004514:	fa01 f202 	lsl.w	r2, r1, r2
 8004518:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	2b00      	cmp	r3, #0
 8004520:	d071      	beq.n	8004606 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800452a:	e06c      	b.n	8004606 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f003 031c 	and.w	r3, r3, #28
 8004534:	2202      	movs	r2, #2
 8004536:	409a      	lsls	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4013      	ands	r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d02e      	beq.n	800459e <HAL_DMA_IRQHandler+0xec>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d029      	beq.n	800459e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10b      	bne.n	8004570 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 020a 	bic.w	r2, r2, #10
 8004566:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	f003 021c 	and.w	r2, r3, #28
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	2102      	movs	r1, #2
 800457e:	fa01 f202 	lsl.w	r2, r1, r2
 8004582:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d038      	beq.n	8004606 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800459c:	e033      	b.n	8004606 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	f003 031c 	and.w	r3, r3, #28
 80045a6:	2208      	movs	r2, #8
 80045a8:	409a      	lsls	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d02a      	beq.n	8004608 <HAL_DMA_IRQHandler+0x156>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d025      	beq.n	8004608 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 020e 	bic.w	r2, r2, #14
 80045ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	f003 021c 	and.w	r2, r3, #28
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	2101      	movs	r1, #1
 80045da:	fa01 f202 	lsl.w	r2, r1, r2
 80045de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004606:	bf00      	nop
 8004608:	bf00      	nop
}
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004626:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004638:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	f003 021c 	and.w	r2, r3, #28
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	2101      	movs	r1, #1
 8004648:	fa01 f202 	lsl.w	r2, r1, r2
 800464c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b10      	cmp	r3, #16
 800465c:	d108      	bne.n	8004670 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800466e:	e007      	b.n	8004680 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	60da      	str	r2, [r3, #12]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	4b17      	ldr	r3, [pc, #92]	; (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800469c:	429a      	cmp	r2, r3
 800469e:	d80a      	bhi.n	80046b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a4:	089b      	lsrs	r3, r3, #2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046ac:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6493      	str	r3, [r2, #72]	; 0x48
 80046b4:	e007      	b.n	80046c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	089b      	lsrs	r3, r3, #2
 80046bc:	009a      	lsls	r2, r3, #2
 80046be:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80046c0:	4413      	add	r3, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3b08      	subs	r3, #8
 80046ce:	4a0c      	ldr	r2, [pc, #48]	; (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a0a      	ldr	r2, [pc, #40]	; (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80046dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2201      	movs	r2, #1
 80046e6:	409a      	lsls	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	40020407 	.word	0x40020407
 80046fc:	4002081c 	.word	0x4002081c
 8004700:	cccccccd 	.word	0xcccccccd
 8004704:	40020880 	.word	0x40020880

08004708 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004718:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	461a      	mov	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a09      	ldr	r2, [pc, #36]	; (8004750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800472c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3b01      	subs	r3, #1
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2201      	movs	r2, #1
 8004738:	409a      	lsls	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	1000823f 	.word	0x1000823f
 8004750:	40020940 	.word	0x40020940

08004754 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 800475a:	f04f 33ff 	mov.w	r3, #4294967295
 800475e:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004760:	4b41      	ldr	r3, [pc, #260]	; (8004868 <HAL_FLASH_IRQHandler+0x114>)
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004768:	4013      	ands	r3, r2
 800476a:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 800476c:	4b3e      	ldr	r3, [pc, #248]	; (8004868 <HAL_FLASH_IRQHandler+0x114>)
 800476e:	695a      	ldr	r2, [r3, #20]
 8004770:	4b3e      	ldr	r3, [pc, #248]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	43db      	mvns	r3, r3
 8004776:	493c      	ldr	r1, [pc, #240]	; (8004868 <HAL_FLASH_IRQHandler+0x114>)
 8004778:	4013      	ands	r3, r2
 800477a:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <HAL_FLASH_IRQHandler+0x11c>)
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 8004788:	4b38      	ldr	r3, [pc, #224]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	e008      	b.n	80047a2 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 8004790:	4b36      	ldr	r3, [pc, #216]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 800479c:	4b33      	ldr	r3, [pc, #204]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d022      	beq.n	80047ee <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80047a8:	4b30      	ldr	r3, [pc, #192]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	4a2e      	ldr	r2, [pc, #184]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 80047b2:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_FLASH_IRQHandler+0x7a>
 80047be:	4b2a      	ldr	r3, [pc, #168]	; (8004868 <HAL_FLASH_IRQHandler+0x114>)
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80047c8:	4927      	ldr	r1, [pc, #156]	; (8004868 <HAL_FLASH_IRQHandler+0x114>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	618b      	str	r3, [r1, #24]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <HAL_FLASH_IRQHandler+0x8e>
 80047d8:	4a23      	ldr	r2, [pc, #140]	; (8004868 <HAL_FLASH_IRQHandler+0x114>)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80047e0:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80047e2:	4b22      	ldr	r3, [pc, #136]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f84d 	bl	8004888 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80047ee:	4b1e      	ldr	r3, [pc, #120]	; (8004868 <HAL_FLASH_IRQHandler+0x114>)
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d124      	bne.n	8004844 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80047fa:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_FLASH_IRQHandler+0x114>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d117      	bne.n	8004838 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004808:	4b18      	ldr	r3, [pc, #96]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	3b01      	subs	r3, #1
 800480e:	4a17      	ldr	r2, [pc, #92]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 8004810:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 8004812:	4b16      	ldr	r3, [pc, #88]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 800481a:	4b14      	ldr	r3, [pc, #80]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	3301      	adds	r3, #1
 8004820:	4a12      	ldr	r2, [pc, #72]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 8004822:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	4618      	mov	r0, r3
 800482a:	f000 f837 	bl	800489c <FLASH_PageErase>
 800482e:	e006      	b.n	800483e <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004830:	4b0e      	ldr	r3, [pc, #56]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
 8004836:	e002      	b.n	800483e <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 800483a:	2200      	movs	r2, #0
 800483c:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f818 	bl	8004874 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d108      	bne.n	800485e <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_FLASH_IRQHandler+0x114>)
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	4a05      	ldr	r2, [pc, #20]	; (8004868 <HAL_FLASH_IRQHandler+0x114>)
 8004852:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004856:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <HAL_FLASH_IRQHandler+0x118>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
  }
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	58004000 	.word	0x58004000
 800486c:	20000780 	.word	0x20000780
 8004870:	00040001 	.word	0x00040001

08004874 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <FLASH_PageErase+0x30>)
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4313      	orrs	r3, r2
 80048b2:	4a06      	ldr	r2, [pc, #24]	; (80048cc <FLASH_PageErase+0x30>)
 80048b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	6153      	str	r3, [r2, #20]
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	58004000 	.word	0x58004000

080048d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048de:	e14c      	b.n	8004b7a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	2101      	movs	r1, #1
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ec:	4013      	ands	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 813e 	beq.w	8004b74 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d005      	beq.n	8004910 <HAL_GPIO_Init+0x40>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d130      	bne.n	8004972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	2203      	movs	r2, #3
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4013      	ands	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004946:	2201      	movs	r2, #1
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43db      	mvns	r3, r3
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4013      	ands	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	f003 0201 	and.w	r2, r3, #1
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b03      	cmp	r3, #3
 800497c:	d017      	beq.n	80049ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	2203      	movs	r2, #3
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4013      	ands	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d123      	bne.n	8004a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	08da      	lsrs	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3208      	adds	r2, #8
 80049c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	220f      	movs	r2, #15
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4013      	ands	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	08da      	lsrs	r2, r3, #3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3208      	adds	r2, #8
 80049fc:	6939      	ldr	r1, [r7, #16]
 80049fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4013      	ands	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 0203 	and.w	r2, r3, #3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8098 	beq.w	8004b74 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a44:	4a54      	ldr	r2, [pc, #336]	; (8004b98 <HAL_GPIO_Init+0x2c8>)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	089b      	lsrs	r3, r3, #2
 8004a4a:	3302      	adds	r3, #2
 8004a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	220f      	movs	r2, #15
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4013      	ands	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a6e:	d019      	beq.n	8004aa4 <HAL_GPIO_Init+0x1d4>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a4a      	ldr	r2, [pc, #296]	; (8004b9c <HAL_GPIO_Init+0x2cc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_GPIO_Init+0x1d0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a49      	ldr	r2, [pc, #292]	; (8004ba0 <HAL_GPIO_Init+0x2d0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00d      	beq.n	8004a9c <HAL_GPIO_Init+0x1cc>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a48      	ldr	r2, [pc, #288]	; (8004ba4 <HAL_GPIO_Init+0x2d4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <HAL_GPIO_Init+0x1c8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a47      	ldr	r2, [pc, #284]	; (8004ba8 <HAL_GPIO_Init+0x2d8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d101      	bne.n	8004a94 <HAL_GPIO_Init+0x1c4>
 8004a90:	2304      	movs	r3, #4
 8004a92:	e008      	b.n	8004aa6 <HAL_GPIO_Init+0x1d6>
 8004a94:	2307      	movs	r3, #7
 8004a96:	e006      	b.n	8004aa6 <HAL_GPIO_Init+0x1d6>
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e004      	b.n	8004aa6 <HAL_GPIO_Init+0x1d6>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e002      	b.n	8004aa6 <HAL_GPIO_Init+0x1d6>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <HAL_GPIO_Init+0x1d6>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	f002 0203 	and.w	r2, r2, #3
 8004aac:	0092      	lsls	r2, r2, #2
 8004aae:	4093      	lsls	r3, r2
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ab6:	4938      	ldr	r1, [pc, #224]	; (8004b98 <HAL_GPIO_Init+0x2c8>)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	089b      	lsrs	r3, r3, #2
 8004abc:	3302      	adds	r3, #2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ac4:	4b39      	ldr	r3, [pc, #228]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	43db      	mvns	r3, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ae8:	4a30      	ldr	r2, [pc, #192]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004aee:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	43db      	mvns	r3, r3
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4013      	ands	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b12:	4a26      	ldr	r2, [pc, #152]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b18:	4b24      	ldr	r3, [pc, #144]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	43db      	mvns	r3, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4013      	ands	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b3e:	4a1b      	ldr	r2, [pc, #108]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004b46:	4b19      	ldr	r3, [pc, #100]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4013      	ands	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b6c:	4a0f      	ldr	r2, [pc, #60]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	3301      	adds	r3, #1
 8004b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f47f aeab 	bne.w	80048e0 <HAL_GPIO_Init+0x10>
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	48000400 	.word	0x48000400
 8004ba0:	48000800 	.word	0x48000800
 8004ba4:	48000c00 	.word	0x48000c00
 8004ba8:	48001000 	.word	0x48001000
 8004bac:	58000800 	.word	0x58000800

08004bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	807b      	strh	r3, [r7, #2]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bc0:	787b      	ldrb	r3, [r7, #1]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bcc:	e002      	b.n	8004bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bce:	887a      	ldrh	r2, [r7, #2]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bf2:	887a      	ldrh	r2, [r7, #2]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	041a      	lsls	r2, r3, #16
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	43d9      	mvns	r1, r3
 8004bfe:	887b      	ldrh	r3, [r7, #2]
 8004c00:	400b      	ands	r3, r1
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	619a      	str	r2, [r3, #24]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d006      	beq.n	8004c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c2a:	4a05      	ldr	r2, [pc, #20]	; (8004c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fd f9f2 	bl	800201c <HAL_GPIO_EXTI_Callback>
  }
}
 8004c38:	bf00      	nop
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	58000800 	.word	0x58000800

08004c44 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <HAL_HSEM_IRQHandler+0x30>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <HAL_HSEM_IRQHandler+0x30>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	4906      	ldr	r1, [pc, #24]	; (8004c74 <HAL_HSEM_IRQHandler+0x30>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004c5e:	4a05      	ldr	r2, [pc, #20]	; (8004c74 <HAL_HSEM_IRQHandler+0x30>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f807 	bl	8004c78 <HAL_HSEM_FreeCallback>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	58001500 	.word	0x58001500

08004c78 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	461a      	mov	r2, r3
 8004c98:	460b      	mov	r3, r1
 8004c9a:	817b      	strh	r3, [r7, #10]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	f040 80da 	bne.w	8004e62 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_I2C_Master_Transmit+0x30>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e0d3      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x1d8>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cc4:	f7ff f842 	bl	8003d4c <HAL_GetTick>
 8004cc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	2319      	movs	r3, #25
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f9e6 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e0be      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2221      	movs	r2, #33	; 0x21
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2210      	movs	r2, #16
 8004cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	893a      	ldrh	r2, [r7, #8]
 8004d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2bff      	cmp	r3, #255	; 0xff
 8004d16:	d90e      	bls.n	8004d36 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	22ff      	movs	r2, #255	; 0xff
 8004d1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	8979      	ldrh	r1, [r7, #10]
 8004d26:	4b51      	ldr	r3, [pc, #324]	; (8004e6c <HAL_I2C_Master_Transmit+0x1e0>)
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fbdc 	bl	80054ec <I2C_TransferConfig>
 8004d34:	e06c      	b.n	8004e10 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	8979      	ldrh	r1, [r7, #10]
 8004d48:	4b48      	ldr	r3, [pc, #288]	; (8004e6c <HAL_I2C_Master_Transmit+0x1e0>)
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fbcb 	bl	80054ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d56:	e05b      	b.n	8004e10 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	6a39      	ldr	r1, [r7, #32]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f9e3 	bl	8005128 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e07b      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d034      	beq.n	8004e10 <HAL_I2C_Master_Transmit+0x184>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d130      	bne.n	8004e10 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2180      	movs	r1, #128	; 0x80
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f975 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e04d      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2bff      	cmp	r3, #255	; 0xff
 8004dd0:	d90e      	bls.n	8004df0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	22ff      	movs	r2, #255	; 0xff
 8004dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	8979      	ldrh	r1, [r7, #10]
 8004de0:	2300      	movs	r3, #0
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fb7f 	bl	80054ec <I2C_TransferConfig>
 8004dee:	e00f      	b.n	8004e10 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	8979      	ldrh	r1, [r7, #10]
 8004e02:	2300      	movs	r3, #0
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fb6e 	bl	80054ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d19e      	bne.n	8004d58 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	6a39      	ldr	r1, [r7, #32]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f9c2 	bl	80051a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e01a      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2220      	movs	r2, #32
 8004e34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6859      	ldr	r1, [r3, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_I2C_Master_Transmit+0x1e4>)
 8004e42:	400b      	ands	r3, r1
 8004e44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e000      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004e62:	2302      	movs	r3, #2
  }
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	80002000 	.word	0x80002000
 8004e70:	fe00e800 	.word	0xfe00e800

08004e74 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	460b      	mov	r3, r1
 8004e82:	817b      	strh	r3, [r7, #10]
 8004e84:	4613      	mov	r3, r2
 8004e86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	f040 80db 	bne.w	800504c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_I2C_Master_Receive+0x30>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e0d4      	b.n	800504e <HAL_I2C_Master_Receive+0x1da>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004eac:	f7fe ff4e 	bl	8003d4c <HAL_GetTick>
 8004eb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	2319      	movs	r3, #25
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f8f2 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e0bf      	b.n	800504e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2222      	movs	r2, #34	; 0x22
 8004ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	893a      	ldrh	r2, [r7, #8]
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2bff      	cmp	r3, #255	; 0xff
 8004efe:	d90e      	bls.n	8004f1e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	22ff      	movs	r2, #255	; 0xff
 8004f04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	8979      	ldrh	r1, [r7, #10]
 8004f0e:	4b52      	ldr	r3, [pc, #328]	; (8005058 <HAL_I2C_Master_Receive+0x1e4>)
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fae8 	bl	80054ec <I2C_TransferConfig>
 8004f1c:	e06d      	b.n	8004ffa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	8979      	ldrh	r1, [r7, #10]
 8004f30:	4b49      	ldr	r3, [pc, #292]	; (8005058 <HAL_I2C_Master_Receive+0x1e4>)
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fad7 	bl	80054ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004f3e:	e05c      	b.n	8004ffa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	6a39      	ldr	r1, [r7, #32]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 f96b 	bl	8005220 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e07c      	b.n	800504e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d034      	beq.n	8004ffa <HAL_I2C_Master_Receive+0x186>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d130      	bne.n	8004ffa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f880 	bl	80050a8 <I2C_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e04d      	b.n	800504e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2bff      	cmp	r3, #255	; 0xff
 8004fba:	d90e      	bls.n	8004fda <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	22ff      	movs	r2, #255	; 0xff
 8004fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	8979      	ldrh	r1, [r7, #10]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fa8a 	bl	80054ec <I2C_TransferConfig>
 8004fd8:	e00f      	b.n	8004ffa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	8979      	ldrh	r1, [r7, #10]
 8004fec:	2300      	movs	r3, #0
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fa79 	bl	80054ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d19d      	bne.n	8004f40 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	6a39      	ldr	r1, [r7, #32]
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f8cd 	bl	80051a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e01a      	b.n	800504e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2220      	movs	r2, #32
 800501e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6859      	ldr	r1, [r3, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b0c      	ldr	r3, [pc, #48]	; (800505c <HAL_I2C_Master_Receive+0x1e8>)
 800502c:	400b      	ands	r3, r1
 800502e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	80002400 	.word	0x80002400
 800505c:	fe00e800 	.word	0xfe00e800

08005060 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b02      	cmp	r3, #2
 8005074:	d103      	bne.n	800507e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2200      	movs	r2, #0
 800507c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b01      	cmp	r3, #1
 800508a:	d007      	beq.n	800509c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	619a      	str	r2, [r3, #24]
  }
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	4613      	mov	r3, r2
 80050b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b8:	e022      	b.n	8005100 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d01e      	beq.n	8005100 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fe fe43 	bl	8003d4c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d113      	bne.n	8005100 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e00f      	b.n	8005120 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4013      	ands	r3, r2
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	429a      	cmp	r2, r3
 800510e:	bf0c      	ite	eq
 8005110:	2301      	moveq	r3, #1
 8005112:	2300      	movne	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	429a      	cmp	r2, r3
 800511c:	d0cd      	beq.n	80050ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005134:	e02c      	b.n	8005190 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f8ea 	bl	8005314 <I2C_IsErrorOccurred>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e02a      	b.n	80051a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d01e      	beq.n	8005190 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005152:	f7fe fdfb 	bl	8003d4c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d113      	bne.n	8005190 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e007      	b.n	80051a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b02      	cmp	r3, #2
 800519c:	d1cb      	bne.n	8005136 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051b4:	e028      	b.n	8005208 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f8aa 	bl	8005314 <I2C_IsErrorOccurred>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e026      	b.n	8005218 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ca:	f7fe fdbf 	bl	8003d4c <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d302      	bcc.n	80051e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d113      	bne.n	8005208 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e4:	f043 0220 	orr.w	r2, r3, #32
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e007      	b.n	8005218 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b20      	cmp	r3, #32
 8005214:	d1cf      	bne.n	80051b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800522c:	e064      	b.n	80052f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f86e 	bl	8005314 <I2C_IsErrorOccurred>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e062      	b.n	8005308 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b20      	cmp	r3, #32
 800524e:	d138      	bne.n	80052c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b04      	cmp	r3, #4
 800525c:	d105      	bne.n	800526a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e04e      	b.n	8005308 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b10      	cmp	r3, #16
 8005276:	d107      	bne.n	8005288 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2210      	movs	r2, #16
 800527e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2204      	movs	r2, #4
 8005284:	645a      	str	r2, [r3, #68]	; 0x44
 8005286:	e002      	b.n	800528e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2220      	movs	r2, #32
 8005294:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6859      	ldr	r1, [r3, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80052a2:	400b      	ands	r3, r1
 80052a4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e022      	b.n	8005308 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c2:	f7fe fd43 	bl	8003d4c <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d302      	bcc.n	80052d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10f      	bne.n	80052f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e007      	b.n	8005308 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b04      	cmp	r3, #4
 8005304:	d193      	bne.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	fe00e800 	.word	0xfe00e800

08005314 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	; 0x28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b00      	cmp	r3, #0
 800533e:	d075      	beq.n	800542c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2210      	movs	r2, #16
 8005346:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005348:	e056      	b.n	80053f8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d052      	beq.n	80053f8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005352:	f7fe fcfb 	bl	8003d4c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	d302      	bcc.n	8005368 <I2C_IsErrorOccurred+0x54>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d147      	bne.n	80053f8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005372:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800537a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538a:	d12e      	bne.n	80053ea <I2C_IsErrorOccurred+0xd6>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005392:	d02a      	beq.n	80053ea <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005394:	7cfb      	ldrb	r3, [r7, #19]
 8005396:	2b20      	cmp	r3, #32
 8005398:	d027      	beq.n	80053ea <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053aa:	f7fe fccf 	bl	8003d4c <HAL_GetTick>
 80053ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053b0:	e01b      	b.n	80053ea <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053b2:	f7fe fccb 	bl	8003d4c <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b19      	cmp	r3, #25
 80053be:	d914      	bls.n	80053ea <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c4:	f043 0220 	orr.w	r2, r3, #32
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d1dc      	bne.n	80053b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b20      	cmp	r3, #32
 8005404:	d003      	beq.n	800540e <I2C_IsErrorOccurred+0xfa>
 8005406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800540a:	2b00      	cmp	r3, #0
 800540c:	d09d      	beq.n	800534a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800540e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005412:	2b00      	cmp	r3, #0
 8005414:	d103      	bne.n	800541e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2220      	movs	r2, #32
 800541c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	f043 0304 	orr.w	r3, r3, #4
 8005424:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800544e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00b      	beq.n	8005478 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	f043 0308 	orr.w	r3, r3, #8
 8005466:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005470:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f043 0302 	orr.w	r3, r3, #2
 8005488:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005492:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800549a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01c      	beq.n	80054dc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff fddc 	bl	8005060 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6859      	ldr	r1, [r3, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <I2C_IsErrorOccurred+0x1d4>)
 80054b4:	400b      	ands	r3, r1
 80054b6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	431a      	orrs	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80054dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3728      	adds	r7, #40	; 0x28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	fe00e800 	.word	0xfe00e800

080054ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	607b      	str	r3, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	817b      	strh	r3, [r7, #10]
 80054fa:	4613      	mov	r3, r2
 80054fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054fe:	897b      	ldrh	r3, [r7, #10]
 8005500:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005504:	7a7b      	ldrb	r3, [r7, #9]
 8005506:	041b      	lsls	r3, r3, #16
 8005508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800550c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	4313      	orrs	r3, r2
 8005516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800551a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	0d5b      	lsrs	r3, r3, #21
 8005526:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800552a:	4b08      	ldr	r3, [pc, #32]	; (800554c <I2C_TransferConfig+0x60>)
 800552c:	430b      	orrs	r3, r1
 800552e:	43db      	mvns	r3, r3
 8005530:	ea02 0103 	and.w	r1, r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	03ff63ff 	.word	0x03ff63ff

08005550 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01e      	beq.n	80055a0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005562:	4b13      	ldr	r3, [pc, #76]	; (80055b0 <HAL_IPCC_Init+0x60>)
 8005564:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fd ffce 	bl	8003514 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005578:	68b8      	ldr	r0, [r7, #8]
 800557a:	f000 f85b 	bl	8005634 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f82c 	bl	80055e8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800559e:	e001      	b.n	80055a4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	58000c00 	.word	0x58000c00

080055b4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	4613      	mov	r3, r2
 80055da:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e00f      	b.n	8005616 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	4a0b      	ldr	r2, [pc, #44]	; (800562c <IPCC_SetDefaultCallbacks+0x44>)
 8005600:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3306      	adds	r3, #6
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	4a08      	ldr	r2, [pc, #32]	; (8005630 <IPCC_SetDefaultCallbacks+0x48>)
 800560e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b05      	cmp	r3, #5
 800561a:	d9ec      	bls.n	80055f6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800561c:	bf00      	nop
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	080055b5 	.word	0x080055b5
 8005630:	080055cf 	.word	0x080055cf

08005634 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005648:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	223f      	movs	r2, #63	; 0x3f
 800564e:	609a      	str	r2, [r3, #8]
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a04      	ldr	r2, [pc, #16]	; (8005678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566a:	6013      	str	r3, [r2, #0]
}
 800566c:	bf00      	nop
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	58000400 	.word	0x58000400

0800567c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8005680:	bf00      	nop
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <LL_EXTI_ReadFlag_0_31+0x1c>)
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4013      	ands	r3, r2
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	58000800 	.word	0x58000800

080056ac <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 80056b4:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <LL_EXTI_ReadFlag_32_63+0x1c>)
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4013      	ands	r3, r2
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	58000800 	.word	0x58000800

080056cc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80056d4:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60d3      	str	r3, [r2, #12]
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	58000800 	.word	0x58000800

080056ec <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80056f4:	4a04      	ldr	r2, [pc, #16]	; (8005708 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	58000800 	.word	0x58000800

0800570c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <HAL_PWREx_GetVoltageRange+0x18>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005718:	4618      	mov	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	58000400 	.word	0x58000400

08005728 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 800572c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005730:	f7ff ffac 	bl	800568c <LL_EXTI_ReadFlag_0_31>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800573a:	f7ff ff9f 	bl	800567c <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800573e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005742:	f7ff ffc3 	bl	80056cc <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 8005746:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800574a:	f7ff ff9f 	bl	800568c <LL_EXTI_ReadFlag_0_31>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8005754:	f000 f811 	bl	800577a <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8005758:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800575c:	f7ff ffb6 	bl	80056cc <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 8005760:	2002      	movs	r0, #2
 8005762:	f7ff ffa3 	bl	80056ac <LL_EXTI_ReadFlag_32_63>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800576c:	f000 f80c 	bl	8005788 <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8005770:	2002      	movs	r0, #2
 8005772:	f7ff ffbb 	bl	80056ec <LL_EXTI_ClearFlag_32_63>
  }
}
 8005776:	bf00      	nop
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800577a:	b480      	push	{r7}
 800577c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800577e:	bf00      	nop
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005796:	b480      	push	{r7}
 8005798:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800579a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057a8:	d101      	bne.n	80057ae <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <LL_RCC_HSE_Enable>:
{
 80057ba:	b480      	push	{r7}
 80057bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80057be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057cc:	6013      	str	r3, [r2, #0]
}
 80057ce:	bf00      	nop
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <LL_RCC_HSE_Disable>:
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80057dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ea:	6013      	str	r3, [r2, #0]
}
 80057ec:	bf00      	nop
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <LL_RCC_HSE_IsReady>:
{
 80057f6:	b480      	push	{r7}
 80057f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80057fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005808:	d101      	bne.n	800580e <LL_RCC_HSE_IsReady+0x18>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <LL_RCC_HSE_IsReady+0x1a>
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <LL_RCC_HSI_Enable>:
{
 800581a:	b480      	push	{r7}
 800581c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800581e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582c:	6013      	str	r3, [r2, #0]
}
 800582e:	bf00      	nop
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <LL_RCC_HSI_Disable>:
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800583c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800584a:	6013      	str	r3, [r2, #0]
}
 800584c:	bf00      	nop
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <LL_RCC_HSI_IsReady>:
{
 8005856:	b480      	push	{r7}
 8005858:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800585a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005868:	d101      	bne.n	800586e <LL_RCC_HSI_IsReady+0x18>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <LL_RCC_HSI_IsReady+0x1a>
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <LL_RCC_HSI_SetCalibTrimming>:
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	061b      	lsls	r3, r3, #24
 8005890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005894:	4313      	orrs	r3, r2
 8005896:	604b      	str	r3, [r1, #4]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <LL_RCC_HSI48_Enable>:
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80058a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058b4:	f043 0301 	orr.w	r3, r3, #1
 80058b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80058bc:	bf00      	nop
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <LL_RCC_HSI48_Disable>:
{
 80058c6:	b480      	push	{r7}
 80058c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80058ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d6:	f023 0301 	bic.w	r3, r3, #1
 80058da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80058de:	bf00      	nop
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <LL_RCC_HSI48_IsReady>:
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80058ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d101      	bne.n	8005900 <LL_RCC_HSI48_IsReady+0x18>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <LL_RCC_HSI48_IsReady+0x1a>
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <LL_RCC_LSE_Enable>:
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005924:	bf00      	nop
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <LL_RCC_LSE_Disable>:
{
 800592e:	b480      	push	{r7}
 8005930:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <LL_RCC_LSE_EnableBypass>:
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005960:	f043 0304 	orr.w	r3, r3, #4
 8005964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <LL_RCC_LSE_DisableBypass>:
{
 8005972:	b480      	push	{r7}
 8005974:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005982:	f023 0304 	bic.w	r3, r3, #4
 8005986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800598a:	bf00      	nop
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <LL_RCC_LSE_IsReady>:
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d101      	bne.n	80059ac <LL_RCC_LSE_IsReady+0x18>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <LL_RCC_LSE_IsReady+0x1a>
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <LL_RCC_LSI1_Enable>:
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80059bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80059d0:	bf00      	nop
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <LL_RCC_LSI1_Disable>:
{
 80059da:	b480      	push	{r7}
 80059dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80059de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80059f2:	bf00      	nop
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <LL_RCC_LSI1_IsReady>:
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d101      	bne.n	8005a14 <LL_RCC_LSI1_IsReady+0x18>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <LL_RCC_LSI1_IsReady+0x1a>
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <LL_RCC_LSI2_Enable>:
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a30:	f043 0304 	orr.w	r3, r3, #4
 8005a34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005a38:	bf00      	nop
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <LL_RCC_LSI2_Disable>:
{
 8005a42:	b480      	push	{r7}
 8005a44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a52:	f023 0304 	bic.w	r3, r3, #4
 8005a56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005a5a:	bf00      	nop
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <LL_RCC_LSI2_IsReady>:
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d101      	bne.n	8005a7c <LL_RCC_LSI2_IsReady+0x18>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <LL_RCC_LSI2_IsReady+0x1a>
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <LL_RCC_LSI2_SetTrimming>:
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a98:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <LL_RCC_MSI_Enable>:
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	6013      	str	r3, [r2, #0]
}
 8005aca:	bf00      	nop
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <LL_RCC_MSI_Disable>:
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	6013      	str	r3, [r2, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <LL_RCC_MSI_IsReady>:
{
 8005af2:	b480      	push	{r7}
 8005af4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d101      	bne.n	8005b08 <LL_RCC_MSI_IsReady+0x16>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <LL_RCC_MSI_IsReady+0x18>
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <LL_RCC_MSI_SetRange>:
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	600b      	str	r3, [r1, #0]
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <LL_RCC_MSI_GetRange>:
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b4c:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2bb0      	cmp	r3, #176	; 0xb0
 8005b52:	d901      	bls.n	8005b58 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005b54:	23b0      	movs	r3, #176	; 0xb0
 8005b56:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005b58:	687b      	ldr	r3, [r7, #4]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b80:	4313      	orrs	r3, r2
 8005b82:	604b      	str	r3, [r1, #4]
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <LL_RCC_SetSysClkSource>:
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f023 0203 	bic.w	r2, r3, #3
 8005ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	608b      	str	r3, [r1, #8]
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <LL_RCC_GetSysClkSource>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <LL_RCC_SetAHBPrescaler>:
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	608b      	str	r3, [r1, #8]
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <LL_RCC_SetAHB4Prescaler>:
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c34:	f023 020f 	bic.w	r2, r3, #15
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	091b      	lsrs	r3, r3, #4
 8005c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <LL_RCC_SetAPB1Prescaler>:
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	608b      	str	r3, [r1, #8]
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <LL_RCC_SetAPB2Prescaler>:
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <LL_RCC_GetAHBPrescaler>:
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <LL_RCC_GetAHB4Prescaler>:
{
 8005cba:	b480      	push	{r7}
 8005cbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <LL_RCC_GetAPB1Prescaler>:
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <LL_RCC_GetAPB2Prescaler>:
{
 8005cee:	b480      	push	{r7}
 8005cf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005d06:	b480      	push	{r7}
 8005d08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d18:	6013      	str	r3, [r2, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d36:	6013      	str	r3, [r2, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005d42:	b480      	push	{r7}
 8005d44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d54:	d101      	bne.n	8005d5a <LL_RCC_PLL_IsReady+0x18>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <LL_RCC_PLL_IsReady+0x1a>
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	0a1b      	lsrs	r3, r3, #8
 8005d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0303 	and.w	r3, r3, #3
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dda:	d101      	bne.n	8005de0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e00:	d101      	bne.n	8005e06 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005e12:	b480      	push	{r7}
 8005e14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e26:	d101      	bne.n	8005e2c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e4a:	d101      	bne.n	8005e50 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e6e:	d101      	bne.n	8005e74 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005e70:	2301      	movs	r3, #1
 8005e72:	e000      	b.n	8005e76 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b08d      	sub	sp, #52	; 0x34
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e363      	b.n	800655a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 808d 	beq.w	8005fba <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ea0:	f7ff fe8a 	bl	8005bb8 <LL_RCC_GetSysClkSource>
 8005ea4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ea6:	f7ff ff83 	bl	8005db0 <LL_RCC_PLL_GetMainSource>
 8005eaa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_RCC_OscConfig+0x3e>
 8005eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb4:	2b0c      	cmp	r3, #12
 8005eb6:	d147      	bne.n	8005f48 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d144      	bne.n	8005f48 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e347      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005ece:	f7ff fe35 	bl	8005b3c <LL_RCC_MSI_GetRange>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	429c      	cmp	r4, r3
 8005ed6:	d914      	bls.n	8005f02 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fd2f 	bl	8006940 <RCC_SetFlashLatencyFromMSIRange>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e336      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fe0f 	bl	8005b14 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fe33 	bl	8005b66 <LL_RCC_MSI_SetCalibTrimming>
 8005f00:	e013      	b.n	8005f2a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fe04 	bl	8005b14 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff fe28 	bl	8005b66 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fd10 	bl	8006940 <RCC_SetFlashLatencyFromMSIRange>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e317      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f2a:	f000 fcc9 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4aa4      	ldr	r2, [pc, #656]	; (80061c4 <HAL_RCC_OscConfig+0x344>)
 8005f32:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f34:	4ba4      	ldr	r3, [pc, #656]	; (80061c8 <HAL_RCC_OscConfig+0x348>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fd feb9 	bl	8003cb0 <HAL_InitTick>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d039      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e308      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01e      	beq.n	8005f8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f50:	f7ff fdb1 	bl	8005ab6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f54:	f7fd fefa 	bl	8003d4c <HAL_GetTick>
 8005f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f5c:	f7fd fef6 	bl	8003d4c <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e2f5      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f6e:	f7ff fdc0 	bl	8005af2 <LL_RCC_MSI_IsReady>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0f1      	beq.n	8005f5c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fdc9 	bl	8005b14 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fded 	bl	8005b66 <LL_RCC_MSI_SetCalibTrimming>
 8005f8c:	e015      	b.n	8005fba <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f8e:	f7ff fda1 	bl	8005ad4 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f92:	f7fd fedb 	bl	8003d4c <HAL_GetTick>
 8005f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f9a:	f7fd fed7 	bl	8003d4c <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e2d6      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005fac:	f7ff fda1 	bl	8005af2 <LL_RCC_MSI_IsReady>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f1      	bne.n	8005f9a <HAL_RCC_OscConfig+0x11a>
 8005fb6:	e000      	b.n	8005fba <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005fb8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d047      	beq.n	8006056 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc6:	f7ff fdf7 	bl	8005bb8 <LL_RCC_GetSysClkSource>
 8005fca:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fcc:	f7ff fef0 	bl	8005db0 <LL_RCC_PLL_GetMainSource>
 8005fd0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d005      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x164>
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	2b0c      	cmp	r3, #12
 8005fdc:	d108      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d105      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d134      	bne.n	8006056 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e2b4      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff8:	d102      	bne.n	8006000 <HAL_RCC_OscConfig+0x180>
 8005ffa:	f7ff fbde 	bl	80057ba <LL_RCC_HSE_Enable>
 8005ffe:	e001      	b.n	8006004 <HAL_RCC_OscConfig+0x184>
 8006000:	f7ff fbea 	bl	80057d8 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d012      	beq.n	8006032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600c:	f7fd fe9e 	bl	8003d4c <HAL_GetTick>
 8006010:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006014:	f7fd fe9a 	bl	8003d4c <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b64      	cmp	r3, #100	; 0x64
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e299      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006026:	f7ff fbe6 	bl	80057f6 <LL_RCC_HSE_IsReady>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0f1      	beq.n	8006014 <HAL_RCC_OscConfig+0x194>
 8006030:	e011      	b.n	8006056 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006032:	f7fd fe8b 	bl	8003d4c <HAL_GetTick>
 8006036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800603a:	f7fd fe87 	bl	8003d4c <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b64      	cmp	r3, #100	; 0x64
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e286      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800604c:	f7ff fbd3 	bl	80057f6 <LL_RCC_HSE_IsReady>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f1      	bne.n	800603a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d04c      	beq.n	80060fc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006062:	f7ff fda9 	bl	8005bb8 <LL_RCC_GetSysClkSource>
 8006066:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006068:	f7ff fea2 	bl	8005db0 <LL_RCC_PLL_GetMainSource>
 800606c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b04      	cmp	r3, #4
 8006072:	d005      	beq.n	8006080 <HAL_RCC_OscConfig+0x200>
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	2b0c      	cmp	r3, #12
 8006078:	d10e      	bne.n	8006098 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d10b      	bne.n	8006098 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e266      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff fbf2 	bl	800587a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006096:	e031      	b.n	80060fc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d019      	beq.n	80060d4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060a0:	f7ff fbbb 	bl	800581a <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a4:	f7fd fe52 	bl	8003d4c <HAL_GetTick>
 80060a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ac:	f7fd fe4e 	bl	8003d4c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e24d      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80060be:	f7ff fbca 	bl	8005856 <LL_RCC_HSI_IsReady>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0f1      	beq.n	80060ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff fbd4 	bl	800587a <LL_RCC_HSI_SetCalibTrimming>
 80060d2:	e013      	b.n	80060fc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060d4:	f7ff fbb0 	bl	8005838 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d8:	f7fd fe38 	bl	8003d4c <HAL_GetTick>
 80060dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060e0:	f7fd fe34 	bl	8003d4c <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e233      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80060f2:	f7ff fbb0 	bl	8005856 <LL_RCC_HSI_IsReady>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f1      	bne.n	80060e0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d106      	bne.n	8006116 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80a3 	beq.w	800625c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d076      	beq.n	800620c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b00      	cmp	r3, #0
 8006128:	d046      	beq.n	80061b8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800612a:	f7ff fc67 	bl	80059fc <LL_RCC_LSI1_IsReady>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d113      	bne.n	800615c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006134:	f7ff fc40 	bl	80059b8 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006138:	f7fd fe08 	bl	8003d4c <HAL_GetTick>
 800613c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006140:	f7fd fe04 	bl	8003d4c <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e203      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006152:	f7ff fc53 	bl	80059fc <LL_RCC_LSI1_IsReady>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f1      	beq.n	8006140 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800615c:	f7ff fc60 	bl	8005a20 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006160:	f7fd fdf4 	bl	8003d4c <HAL_GetTick>
 8006164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006168:	f7fd fdf0 	bl	8003d4c <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b03      	cmp	r3, #3
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e1ef      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800617a:	f7ff fc73 	bl	8005a64 <LL_RCC_LSI2_IsReady>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f1      	beq.n	8006168 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fc7d 	bl	8005a88 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800618e:	f7ff fc24 	bl	80059da <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006192:	f7fd fddb 	bl	8003d4c <HAL_GetTick>
 8006196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800619a:	f7fd fdd7 	bl	8003d4c <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e1d6      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80061ac:	f7ff fc26 	bl	80059fc <LL_RCC_LSI1_IsReady>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f1      	bne.n	800619a <HAL_RCC_OscConfig+0x31a>
 80061b6:	e051      	b.n	800625c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80061b8:	f7ff fbfe 	bl	80059b8 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061bc:	f7fd fdc6 	bl	8003d4c <HAL_GetTick>
 80061c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80061c2:	e00c      	b.n	80061de <HAL_RCC_OscConfig+0x35e>
 80061c4:	2000001c 	.word	0x2000001c
 80061c8:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80061cc:	f7fd fdbe 	bl	8003d4c <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e1bd      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80061de:	f7ff fc0d 	bl	80059fc <LL_RCC_LSI1_IsReady>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0f1      	beq.n	80061cc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80061e8:	f7ff fc2b 	bl	8005a42 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80061ee:	f7fd fdad 	bl	8003d4c <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e1ac      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006200:	f7ff fc30 	bl	8005a64 <LL_RCC_LSI2_IsReady>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f1      	bne.n	80061ee <HAL_RCC_OscConfig+0x36e>
 800620a:	e027      	b.n	800625c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800620c:	f7ff fc19 	bl	8005a42 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006210:	f7fd fd9c 	bl	8003d4c <HAL_GetTick>
 8006214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006218:	f7fd fd98 	bl	8003d4c <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b03      	cmp	r3, #3
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e197      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800622a:	f7ff fc1b 	bl	8005a64 <LL_RCC_LSI2_IsReady>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f1      	bne.n	8006218 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006234:	f7ff fbd1 	bl	80059da <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fd fd88 	bl	8003d4c <HAL_GetTick>
 800623c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006240:	f7fd fd84 	bl	8003d4c <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e183      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006252:	f7ff fbd3 	bl	80059fc <LL_RCC_LSI1_IsReady>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f1      	bne.n	8006240 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d05b      	beq.n	8006320 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006268:	4ba7      	ldr	r3, [pc, #668]	; (8006508 <HAL_RCC_OscConfig+0x688>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d114      	bne.n	800629e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006274:	f7ff f9f2 	bl	800565c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006278:	f7fd fd68 	bl	8003d4c <HAL_GetTick>
 800627c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006280:	f7fd fd64 	bl	8003d4c <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e163      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006292:	4b9d      	ldr	r3, [pc, #628]	; (8006508 <HAL_RCC_OscConfig+0x688>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d102      	bne.n	80062ac <HAL_RCC_OscConfig+0x42c>
 80062a6:	f7ff fb31 	bl	800590c <LL_RCC_LSE_Enable>
 80062aa:	e00c      	b.n	80062c6 <HAL_RCC_OscConfig+0x446>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	d104      	bne.n	80062be <HAL_RCC_OscConfig+0x43e>
 80062b4:	f7ff fb4c 	bl	8005950 <LL_RCC_LSE_EnableBypass>
 80062b8:	f7ff fb28 	bl	800590c <LL_RCC_LSE_Enable>
 80062bc:	e003      	b.n	80062c6 <HAL_RCC_OscConfig+0x446>
 80062be:	f7ff fb36 	bl	800592e <LL_RCC_LSE_Disable>
 80062c2:	f7ff fb56 	bl	8005972 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d014      	beq.n	80062f8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ce:	f7fd fd3d 	bl	8003d4c <HAL_GetTick>
 80062d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80062d4:	e00a      	b.n	80062ec <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d6:	f7fd fd39 	bl	8003d4c <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e136      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80062ec:	f7ff fb52 	bl	8005994 <LL_RCC_LSE_IsReady>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0ef      	beq.n	80062d6 <HAL_RCC_OscConfig+0x456>
 80062f6:	e013      	b.n	8006320 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f8:	f7fd fd28 	bl	8003d4c <HAL_GetTick>
 80062fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f7fd fd24 	bl	8003d4c <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	; 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e121      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006316:	f7ff fb3d 	bl	8005994 <LL_RCC_LSE_IsReady>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1ef      	bne.n	8006300 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d02c      	beq.n	8006386 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	d014      	beq.n	800635e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006334:	f7ff fab6 	bl	80058a4 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006338:	f7fd fd08 	bl	8003d4c <HAL_GetTick>
 800633c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006340:	f7fd fd04 	bl	8003d4c <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e103      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006352:	f7ff fac9 	bl	80058e8 <LL_RCC_HSI48_IsReady>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0f1      	beq.n	8006340 <HAL_RCC_OscConfig+0x4c0>
 800635c:	e013      	b.n	8006386 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800635e:	f7ff fab2 	bl	80058c6 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006362:	f7fd fcf3 	bl	8003d4c <HAL_GetTick>
 8006366:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006368:	e008      	b.n	800637c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800636a:	f7fd fcef 	bl	8003d4c <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d901      	bls.n	800637c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e0ee      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800637c:	f7ff fab4 	bl	80058e8 <LL_RCC_HSI48_IsReady>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f1      	bne.n	800636a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80e4 	beq.w	8006558 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006390:	f7ff fc12 	bl	8005bb8 <LL_RCC_GetSysClkSource>
 8006394:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	f040 80b4 	bne.w	8006510 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f003 0203 	and.w	r2, r3, #3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d123      	bne.n	80063fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d11c      	bne.n	80063fe <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d114      	bne.n	80063fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80063de:	429a      	cmp	r2, r3
 80063e0:	d10d      	bne.n	80063fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d106      	bne.n	80063fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d05d      	beq.n	80064ba <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b0c      	cmp	r3, #12
 8006402:	d058      	beq.n	80064b6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e0a1      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006416:	f7ff fc85 	bl	8005d24 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800641a:	f7fd fc97 	bl	8003d4c <HAL_GetTick>
 800641e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006422:	f7fd fc93 	bl	8003d4c <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e092      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1ef      	bne.n	8006422 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	4b30      	ldr	r3, [pc, #192]	; (800650c <HAL_RCC_OscConfig+0x68c>)
 800644a:	4013      	ands	r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006454:	4311      	orrs	r1, r2
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800645a:	0212      	lsls	r2, r2, #8
 800645c:	4311      	orrs	r1, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006462:	4311      	orrs	r1, r2
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006468:	4311      	orrs	r1, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800646e:	430a      	orrs	r2, r1
 8006470:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006474:	4313      	orrs	r3, r2
 8006476:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006478:	f7ff fc45 	bl	8005d06 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800647c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800648c:	f7fd fc5e 	bl	8003d4c <HAL_GetTick>
 8006490:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006494:	f7fd fc5a 	bl	8003d4c <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e059      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0ef      	beq.n	8006494 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064b4:	e050      	b.n	8006558 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e04f      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d147      	bne.n	8006558 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80064c8:	f7ff fc1d 	bl	8005d06 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064dc:	f7fd fc36 	bl	8003d4c <HAL_GetTick>
 80064e0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e4:	f7fd fc32 	bl	8003d4c <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e031      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0ef      	beq.n	80064e4 <HAL_RCC_OscConfig+0x664>
 8006504:	e028      	b.n	8006558 <HAL_RCC_OscConfig+0x6d8>
 8006506:	bf00      	nop
 8006508:	58000400 	.word	0x58000400
 800650c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b0c      	cmp	r3, #12
 8006514:	d01e      	beq.n	8006554 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006516:	f7ff fc05 	bl	8005d24 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651a:	f7fd fc17 	bl	8003d4c <HAL_GetTick>
 800651e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006522:	f7fd fc13 	bl	8003d4c <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e012      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1ef      	bne.n	8006522 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <HAL_RCC_OscConfig+0x6e4>)
 800654e:	4013      	ands	r3, r2
 8006550:	60cb      	str	r3, [r1, #12]
 8006552:	e001      	b.n	8006558 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3734      	adds	r7, #52	; 0x34
 800655e:	46bd      	mov	sp, r7
 8006560:	bd90      	pop	{r4, r7, pc}
 8006562:	bf00      	nop
 8006564:	eefefffc 	.word	0xeefefffc

08006568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e12d      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800657c:	4b98      	ldr	r3, [pc, #608]	; (80067e0 <HAL_RCC_ClockConfig+0x278>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d91b      	bls.n	80065c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658a:	4b95      	ldr	r3, [pc, #596]	; (80067e0 <HAL_RCC_ClockConfig+0x278>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f023 0207 	bic.w	r2, r3, #7
 8006592:	4993      	ldr	r1, [pc, #588]	; (80067e0 <HAL_RCC_ClockConfig+0x278>)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	4313      	orrs	r3, r2
 8006598:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659a:	f7fd fbd7 	bl	8003d4c <HAL_GetTick>
 800659e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80065a2:	f7fd fbd3 	bl	8003d4c <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e111      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b4:	4b8a      	ldr	r3, [pc, #552]	; (80067e0 <HAL_RCC_ClockConfig+0x278>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d1ef      	bne.n	80065a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7ff fafc 	bl	8005bd0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065d8:	f7fd fbb8 	bl	8003d4c <HAL_GetTick>
 80065dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065e0:	f7fd fbb4 	bl	8003d4c <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e0f2      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80065f2:	f7ff fbe9 	bl	8005dc8 <LL_RCC_IsActiveFlag_HPRE>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0f1      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d016      	beq.n	8006636 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff faf3 	bl	8005bf8 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006612:	f7fd fb9b 	bl	8003d4c <HAL_GetTick>
 8006616:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006618:	e008      	b.n	800662c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800661a:	f7fd fb97 	bl	8003d4c <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b02      	cmp	r3, #2
 8006626:	d901      	bls.n	800662c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e0d5      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800662c:	f7ff fbde 	bl	8005dec <LL_RCC_IsActiveFlag_C2HPRE>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f1      	beq.n	800661a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663e:	2b00      	cmp	r3, #0
 8006640:	d016      	beq.n	8006670 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff faec 	bl	8005c24 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800664c:	f7fd fb7e 	bl	8003d4c <HAL_GetTick>
 8006650:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006652:	e008      	b.n	8006666 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006654:	f7fd fb7a 	bl	8003d4c <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e0b8      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006666:	f7ff fbd4 	bl	8005e12 <LL_RCC_IsActiveFlag_SHDHPRE>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0f1      	beq.n	8006654 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d016      	beq.n	80066aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff fae6 	bl	8005c52 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006686:	f7fd fb61 	bl	8003d4c <HAL_GetTick>
 800668a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800668c:	e008      	b.n	80066a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800668e:	f7fd fb5d 	bl	8003d4c <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e09b      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80066a0:	f7ff fbca 	bl	8005e38 <LL_RCC_IsActiveFlag_PPRE1>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0f1      	beq.n	800668e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d017      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fadc 	bl	8005c7a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066c2:	f7fd fb43 	bl	8003d4c <HAL_GetTick>
 80066c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066ca:	f7fd fb3f 	bl	8003d4c <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e07d      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80066dc:	f7ff fbbe 	bl	8005e5c <LL_RCC_IsActiveFlag_PPRE2>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0f1      	beq.n	80066ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d043      	beq.n	800677a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d106      	bne.n	8006708 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80066fa:	f7ff f87c 	bl	80057f6 <LL_RCC_HSE_IsReady>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d11e      	bne.n	8006742 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e067      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d106      	bne.n	800671e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006710:	f7ff fb17 	bl	8005d42 <LL_RCC_PLL_IsReady>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d113      	bne.n	8006742 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e05c      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006726:	f7ff f9e4 	bl	8005af2 <LL_RCC_MSI_IsReady>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d108      	bne.n	8006742 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e051      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006734:	f7ff f88f 	bl	8005856 <LL_RCC_HSI_IsReady>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e04a      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fa22 	bl	8005b90 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674c:	f7fd fafe 	bl	8003d4c <HAL_GetTick>
 8006750:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006752:	e00a      	b.n	800676a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006754:	f7fd fafa 	bl	8003d4c <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006762:	4293      	cmp	r3, r2
 8006764:	d901      	bls.n	800676a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e036      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800676a:	f7ff fa25 	bl	8005bb8 <LL_RCC_GetSysClkSource>
 800676e:	4602      	mov	r2, r0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	429a      	cmp	r2, r3
 8006778:	d1ec      	bne.n	8006754 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800677a:	4b19      	ldr	r3, [pc, #100]	; (80067e0 <HAL_RCC_ClockConfig+0x278>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d21b      	bcs.n	80067c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006788:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <HAL_RCC_ClockConfig+0x278>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f023 0207 	bic.w	r2, r3, #7
 8006790:	4913      	ldr	r1, [pc, #76]	; (80067e0 <HAL_RCC_ClockConfig+0x278>)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	4313      	orrs	r3, r2
 8006796:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006798:	f7fd fad8 	bl	8003d4c <HAL_GetTick>
 800679c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80067a0:	f7fd fad4 	bl	8003d4c <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e012      	b.n	80067d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b2:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <HAL_RCC_ClockConfig+0x278>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d1ef      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80067c0:	f000 f87e 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 80067c4:	4603      	mov	r3, r0
 80067c6:	4a07      	ldr	r2, [pc, #28]	; (80067e4 <HAL_RCC_ClockConfig+0x27c>)
 80067c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80067ca:	f7fd facb 	bl	8003d64 <HAL_GetTickPrio>
 80067ce:	4603      	mov	r3, r0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fd fa6d 	bl	8003cb0 <HAL_InitTick>
 80067d6:	4603      	mov	r3, r0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	58004000 	.word	0x58004000
 80067e4:	2000001c 	.word	0x2000001c

080067e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067e8:	b590      	push	{r4, r7, lr}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ee:	f7ff f9e3 	bl	8005bb8 <LL_RCC_GetSysClkSource>
 80067f2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80067fa:	f7ff f99f 	bl	8005b3c <LL_RCC_MSI_GetRange>
 80067fe:	4603      	mov	r3, r0
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	4a2b      	ldr	r2, [pc, #172]	; (80068b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e04b      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b04      	cmp	r3, #4
 8006814:	d102      	bne.n	800681c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006816:	4b28      	ldr	r3, [pc, #160]	; (80068b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	e045      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b08      	cmp	r3, #8
 8006820:	d10a      	bne.n	8006838 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006822:	f7fe ffb8 	bl	8005796 <LL_RCC_HSE_IsEnabledDiv2>
 8006826:	4603      	mov	r3, r0
 8006828:	2b01      	cmp	r3, #1
 800682a:	d102      	bne.n	8006832 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800682c:	4b22      	ldr	r3, [pc, #136]	; (80068b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	e03a      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006832:	4b22      	ldr	r3, [pc, #136]	; (80068bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e037      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006838:	f7ff faba 	bl	8005db0 <LL_RCC_PLL_GetMainSource>
 800683c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d003      	beq.n	800684c <HAL_RCC_GetSysClockFreq+0x64>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b03      	cmp	r3, #3
 8006848:	d003      	beq.n	8006852 <HAL_RCC_GetSysClockFreq+0x6a>
 800684a:	e00d      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800684c:	4b1a      	ldr	r3, [pc, #104]	; (80068b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800684e:	60bb      	str	r3, [r7, #8]
        break;
 8006850:	e015      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006852:	f7fe ffa0 	bl	8005796 <LL_RCC_HSE_IsEnabledDiv2>
 8006856:	4603      	mov	r3, r0
 8006858:	2b01      	cmp	r3, #1
 800685a:	d102      	bne.n	8006862 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800685c:	4b16      	ldr	r3, [pc, #88]	; (80068b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800685e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006860:	e00d      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006862:	4b16      	ldr	r3, [pc, #88]	; (80068bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8006864:	60bb      	str	r3, [r7, #8]
        break;
 8006866:	e00a      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006868:	f7ff f968 	bl	8005b3c <LL_RCC_MSI_GetRange>
 800686c:	4603      	mov	r3, r0
 800686e:	091b      	lsrs	r3, r3, #4
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	4a0f      	ldr	r2, [pc, #60]	; (80068b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687a:	60bb      	str	r3, [r7, #8]
        break;
 800687c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800687e:	f7ff fa72 	bl	8005d66 <LL_RCC_PLL_GetN>
 8006882:	4602      	mov	r2, r0
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	fb03 f402 	mul.w	r4, r3, r2
 800688a:	f7ff fa85 	bl	8005d98 <LL_RCC_PLL_GetDivider>
 800688e:	4603      	mov	r3, r0
 8006890:	091b      	lsrs	r3, r3, #4
 8006892:	3301      	adds	r3, #1
 8006894:	fbb4 f4f3 	udiv	r4, r4, r3
 8006898:	f7ff fa72 	bl	8005d80 <LL_RCC_PLL_GetR>
 800689c:	4603      	mov	r3, r0
 800689e:	0f5b      	lsrs	r3, r3, #29
 80068a0:	3301      	adds	r3, #1
 80068a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80068a6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd90      	pop	{r4, r7, pc}
 80068b2:	bf00      	nop
 80068b4:	0800ecb8 	.word	0x0800ecb8
 80068b8:	00f42400 	.word	0x00f42400
 80068bc:	01e84800 	.word	0x01e84800

080068c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068c0:	b598      	push	{r3, r4, r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80068c4:	f7ff ff90 	bl	80067e8 <HAL_RCC_GetSysClockFreq>
 80068c8:	4604      	mov	r4, r0
 80068ca:	f7ff f9ea 	bl	8005ca2 <LL_RCC_GetAHBPrescaler>
 80068ce:	4603      	mov	r3, r0
 80068d0:	091b      	lsrs	r3, r3, #4
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	4a03      	ldr	r2, [pc, #12]	; (80068e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80068d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	bd98      	pop	{r3, r4, r7, pc}
 80068e4:	0800ec58 	.word	0x0800ec58

080068e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068e8:	b598      	push	{r3, r4, r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80068ec:	f7ff ffe8 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 80068f0:	4604      	mov	r4, r0
 80068f2:	f7ff f9f0 	bl	8005cd6 <LL_RCC_GetAPB1Prescaler>
 80068f6:	4603      	mov	r3, r0
 80068f8:	0a1b      	lsrs	r3, r3, #8
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	4a04      	ldr	r2, [pc, #16]	; (8006910 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	fa24 f303 	lsr.w	r3, r4, r3
}
 800690c:	4618      	mov	r0, r3
 800690e:	bd98      	pop	{r3, r4, r7, pc}
 8006910:	0800ec98 	.word	0x0800ec98

08006914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006914:	b598      	push	{r3, r4, r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006918:	f7ff ffd2 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 800691c:	4604      	mov	r4, r0
 800691e:	f7ff f9e6 	bl	8005cee <LL_RCC_GetAPB2Prescaler>
 8006922:	4603      	mov	r3, r0
 8006924:	0adb      	lsrs	r3, r3, #11
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	4a04      	ldr	r2, [pc, #16]	; (800693c <HAL_RCC_GetPCLK2Freq+0x28>)
 800692c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006938:	4618      	mov	r0, r3
 800693a:	bd98      	pop	{r3, r4, r7, pc}
 800693c:	0800ec98 	.word	0x0800ec98

08006940 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006940:	b590      	push	{r4, r7, lr}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2bb0      	cmp	r3, #176	; 0xb0
 800694c:	d903      	bls.n	8006956 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800694e:	4b15      	ldr	r3, [pc, #84]	; (80069a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e007      	b.n	8006966 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	4a11      	ldr	r2, [pc, #68]	; (80069a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006964:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006966:	f7ff f9a8 	bl	8005cba <LL_RCC_GetAHB4Prescaler>
 800696a:	4603      	mov	r3, r0
 800696c:	091b      	lsrs	r3, r3, #4
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	4a0d      	ldr	r2, [pc, #52]	; (80069a8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006984:	fba2 2303 	umull	r2, r3, r2, r3
 8006988:	0c9c      	lsrs	r4, r3, #18
 800698a:	f7fe febf 	bl	800570c <HAL_PWREx_GetVoltageRange>
 800698e:	4603      	mov	r3, r0
 8006990:	4619      	mov	r1, r3
 8006992:	4620      	mov	r0, r4
 8006994:	f000 f80c 	bl	80069b0 <RCC_SetFlashLatency>
 8006998:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd90      	pop	{r4, r7, pc}
 80069a2:	bf00      	nop
 80069a4:	0800ecb8 	.word	0x0800ecb8
 80069a8:	0800ec58 	.word	0x0800ec58
 80069ac:	431bde83 	.word	0x431bde83

080069b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b093      	sub	sp, #76	; 0x4c
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80069ba:	4b37      	ldr	r3, [pc, #220]	; (8006a98 <RCC_SetFlashLatency+0xe8>)
 80069bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80069c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80069c6:	4a35      	ldr	r2, [pc, #212]	; (8006a9c <RCC_SetFlashLatency+0xec>)
 80069c8:	f107 031c 	add.w	r3, r7, #28
 80069cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80069ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80069d2:	4b33      	ldr	r3, [pc, #204]	; (8006aa0 <RCC_SetFlashLatency+0xf0>)
 80069d4:	f107 040c 	add.w	r4, r7, #12
 80069d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80069de:	2300      	movs	r3, #0
 80069e0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e8:	d11a      	bne.n	8006a20 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80069ea:	2300      	movs	r3, #0
 80069ec:	643b      	str	r3, [r7, #64]	; 0x40
 80069ee:	e013      	b.n	8006a18 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80069f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	3348      	adds	r3, #72	; 0x48
 80069f6:	443b      	add	r3, r7
 80069f8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d807      	bhi.n	8006a12 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	3348      	adds	r3, #72	; 0x48
 8006a08:	443b      	add	r3, r7
 8006a0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006a0e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006a10:	e020      	b.n	8006a54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a14:	3301      	adds	r3, #1
 8006a16:	643b      	str	r3, [r7, #64]	; 0x40
 8006a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d9e8      	bls.n	80069f0 <RCC_SetFlashLatency+0x40>
 8006a1e:	e019      	b.n	8006a54 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a24:	e013      	b.n	8006a4e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	3348      	adds	r3, #72	; 0x48
 8006a2c:	443b      	add	r3, r7
 8006a2e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d807      	bhi.n	8006a48 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	3348      	adds	r3, #72	; 0x48
 8006a3e:	443b      	add	r3, r7
 8006a40:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006a44:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006a46:	e005      	b.n	8006a54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d9e8      	bls.n	8006a26 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006a54:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <RCC_SetFlashLatency+0xf4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f023 0207 	bic.w	r2, r3, #7
 8006a5c:	4911      	ldr	r1, [pc, #68]	; (8006aa4 <RCC_SetFlashLatency+0xf4>)
 8006a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a60:	4313      	orrs	r3, r2
 8006a62:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a64:	f7fd f972 	bl	8003d4c <HAL_GetTick>
 8006a68:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006a6a:	e008      	b.n	8006a7e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006a6c:	f7fd f96e 	bl	8003d4c <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d901      	bls.n	8006a7e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e007      	b.n	8006a8e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006a7e:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <RCC_SetFlashLatency+0xf4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d1ef      	bne.n	8006a6c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	374c      	adds	r7, #76	; 0x4c
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd90      	pop	{r4, r7, pc}
 8006a96:	bf00      	nop
 8006a98:	0800ec2c 	.word	0x0800ec2c
 8006a9c:	0800ec3c 	.word	0x0800ec3c
 8006aa0:	0800ec48 	.word	0x0800ec48
 8006aa4:	58004000 	.word	0x58004000

08006aa8 <LL_RCC_LSE_IsEnabled>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <LL_RCC_LSE_IsEnabled+0x18>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e000      	b.n	8006ac2 <LL_RCC_LSE_IsEnabled+0x1a>
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <LL_RCC_LSE_IsReady>:
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d101      	bne.n	8006ae4 <LL_RCC_LSE_IsReady+0x18>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <LL_RCC_LSE_IsReady+0x1a>
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <LL_RCC_SetRFWKPClockSource>:
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <LL_RCC_SetSMPSClockSource>:
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	f023 0203 	bic.w	r2, r3, #3
 8006b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <LL_RCC_SetSMPSPrescaler>:
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <LL_RCC_SetUSARTClockSource>:
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7c:	f023 0203 	bic.w	r2, r3, #3
 8006b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <LL_RCC_SetLPUARTClockSource>:
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <LL_RCC_SetI2CClockSource>:
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	091b      	lsrs	r3, r3, #4
 8006bd8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006bdc:	43db      	mvns	r3, r3
 8006bde:	401a      	ands	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bec:	4313      	orrs	r3, r2
 8006bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <LL_RCC_SetLPTIMClockSource>:
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	0c1b      	lsrs	r3, r3, #16
 8006c12:	041b      	lsls	r3, r3, #16
 8006c14:	43db      	mvns	r3, r3
 8006c16:	401a      	ands	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <LL_RCC_SetSAIClockSource>:
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <LL_RCC_SetRNGClockSource>:
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <LL_RCC_SetCLK48ClockSource>:
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <LL_RCC_SetUSBClockSource>:
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff ffe3 	bl	8006c8a <LL_RCC_SetCLK48ClockSource>
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <LL_RCC_SetADCClockSource>:
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <LL_RCC_SetRTCClockSource>:
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <LL_RCC_GetRTCClockSource>:
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <LL_RCC_ForceBackupDomainReset>:
{
 8006d3e:	b480      	push	{r7}
 8006d40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d56:	bf00      	nop
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d78:	bf00      	nop
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <LL_RCC_PLLSAI1_Enable>:
{
 8006d82:	b480      	push	{r7}
 8006d84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d94:	6013      	str	r3, [r2, #0]
}
 8006d96:	bf00      	nop
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <LL_RCC_PLLSAI1_Disable>:
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006db2:	6013      	str	r3, [r2, #0]
}
 8006db4:	bf00      	nop
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <LL_RCC_PLLSAI1_IsReady>:
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dd0:	d101      	bne.n	8006dd6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b088      	sub	sp, #32
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006dea:	2300      	movs	r3, #0
 8006dec:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006dee:	2300      	movs	r3, #0
 8006df0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d034      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e06:	d021      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006e08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e0c:	d81b      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e12:	d01d      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006e14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e18:	d815      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00b      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e22:	d110      	bne.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e32:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006e34:	e00d      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 f947 	bl	80070ce <RCCEx_PLLSAI1_ConfigNP>
 8006e40:	4603      	mov	r3, r0
 8006e42:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006e44:	e005      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	77fb      	strb	r3, [r7, #31]
        break;
 8006e4a:	e002      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e52:	7ffb      	ldrb	r3, [r7, #31]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d105      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff fee8 	bl	8006c32 <LL_RCC_SetSAIClockSource>
 8006e62:	e001      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e64:	7ffb      	ldrb	r3, [r7, #31]
 8006e66:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d046      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006e74:	f7ff ff56 	bl	8006d24 <LL_RCC_GetRTCClockSource>
 8006e78:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d03c      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006e84:	f7fe fbea 	bl	800565c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d105      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7ff ff30 	bl	8006cf8 <LL_RCC_SetRTCClockSource>
 8006e98:	e02e      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006ea4:	f7ff ff4b 	bl	8006d3e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006ea8:	f7ff ff5a 	bl	8006d60 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006ec4:	f7ff fdf0 	bl	8006aa8 <LL_RCC_LSE_IsEnabled>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d114      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ece:	f7fc ff3d 	bl	8003d4c <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006ed4:	e00b      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed6:	f7fc ff39 	bl	8003d4c <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d902      	bls.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	77fb      	strb	r3, [r7, #31]
              break;
 8006eec:	e004      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006eee:	f7ff fded 	bl	8006acc <LL_RCC_LSE_IsReady>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d1ee      	bne.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006ef8:	7ffb      	ldrb	r3, [r7, #31]
 8006efa:	77bb      	strb	r3, [r7, #30]
 8006efc:	e001      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efe:	7ffb      	ldrb	r3, [r7, #31]
 8006f00:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff fe2a 	bl	8006b6c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fe35 	bl	8006b98 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7ff fe5d 	bl	8006bfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7ff fe52 	bl	8006bfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d004      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff fe2a 	bl	8006bc4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0308 	and.w	r3, r3, #8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff fe1f 	bl	8006bc4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d022      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff fe8d 	bl	8006cb6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fb4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fbe:	d10b      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 f8dd 	bl	8007184 <RCCEx_PLLSAI1_ConfigNQ>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006fce:	7ffb      	ldrb	r3, [r7, #31]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006fd4:	7ffb      	ldrb	r3, [r7, #31]
 8006fd6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d02b      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d008      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff6:	d003      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d105      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff fe2a 	bl	8006c5e <LL_RCC_SetRNGClockSource>
 800700a:	e00a      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	2000      	movs	r0, #0
 8007018:	f7ff fe21 	bl	8006c5e <LL_RCC_SetRNGClockSource>
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f7ff fe34 	bl	8006c8a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007026:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800702a:	d107      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800702c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800703a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007044:	2b00      	cmp	r3, #0
 8007046:	d022      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff fe3d 	bl	8006ccc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705a:	d107      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800705c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800706a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007074:	d10b      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3304      	adds	r3, #4
 800707a:	4618      	mov	r0, r3
 800707c:	f000 f8dd 	bl	800723a <RCCEx_PLLSAI1_ConfigNR>
 8007080:	4603      	mov	r3, r0
 8007082:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007084:	7ffb      	ldrb	r3, [r7, #31]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800708a:	7ffb      	ldrb	r3, [r7, #31]
 800708c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709e:	4618      	mov	r0, r3
 80070a0:	f7ff fd26 	bl	8006af0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fd45 	bl	8006b44 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fd2c 	bl	8006b1c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80070c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3720      	adds	r7, #32
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80070da:	f7ff fe61 	bl	8006da0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070de:	f7fc fe35 	bl	8003d4c <HAL_GetTick>
 80070e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80070e4:	e009      	b.n	80070fa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070e6:	f7fc fe31 	bl	8003d4c <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d902      	bls.n	80070fa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	73fb      	strb	r3, [r7, #15]
      break;
 80070f8:	e004      	b.n	8007104 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80070fa:	f7ff fe60 	bl	8006dbe <LL_RCC_PLLSAI1_IsReady>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1f0      	bne.n	80070e6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d137      	bne.n	800717a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800710a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800711e:	4313      	orrs	r3, r2
 8007120:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007134:	4313      	orrs	r3, r2
 8007136:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007138:	f7ff fe23 	bl	8006d82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800713c:	f7fc fe06 	bl	8003d4c <HAL_GetTick>
 8007140:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007142:	e009      	b.n	8007158 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007144:	f7fc fe02 	bl	8003d4c <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d902      	bls.n	8007158 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	73fb      	strb	r3, [r7, #15]
        break;
 8007156:	e004      	b.n	8007162 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007158:	f7ff fe31 	bl	8006dbe <LL_RCC_PLLSAI1_IsReady>
 800715c:	4603      	mov	r3, r0
 800715e:	2b01      	cmp	r3, #1
 8007160:	d1f0      	bne.n	8007144 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d108      	bne.n	800717a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007176:	4313      	orrs	r3, r2
 8007178:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007190:	f7ff fe06 	bl	8006da0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007194:	f7fc fdda 	bl	8003d4c <HAL_GetTick>
 8007198:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800719a:	e009      	b.n	80071b0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800719c:	f7fc fdd6 	bl	8003d4c <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d902      	bls.n	80071b0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	73fb      	strb	r3, [r7, #15]
      break;
 80071ae:	e004      	b.n	80071ba <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071b0:	f7ff fe05 	bl	8006dbe <LL_RCC_PLLSAI1_IsReady>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1f0      	bne.n	800719c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d137      	bne.n	8007230 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80071c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071d4:	4313      	orrs	r3, r2
 80071d6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80071d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071ea:	4313      	orrs	r3, r2
 80071ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80071ee:	f7ff fdc8 	bl	8006d82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071f2:	f7fc fdab 	bl	8003d4c <HAL_GetTick>
 80071f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80071f8:	e009      	b.n	800720e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071fa:	f7fc fda7 	bl	8003d4c <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d902      	bls.n	800720e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	73fb      	strb	r3, [r7, #15]
        break;
 800720c:	e004      	b.n	8007218 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800720e:	f7ff fdd6 	bl	8006dbe <LL_RCC_PLLSAI1_IsReady>
 8007212:	4603      	mov	r3, r0
 8007214:	2b01      	cmp	r3, #1
 8007216:	d1f0      	bne.n	80071fa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d108      	bne.n	8007230 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800721e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800722c:	4313      	orrs	r3, r2
 800722e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007230:	7bfb      	ldrb	r3, [r7, #15]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007246:	f7ff fdab 	bl	8006da0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800724a:	f7fc fd7f 	bl	8003d4c <HAL_GetTick>
 800724e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007250:	e009      	b.n	8007266 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007252:	f7fc fd7b 	bl	8003d4c <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d902      	bls.n	8007266 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	73fb      	strb	r3, [r7, #15]
      break;
 8007264:	e004      	b.n	8007270 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007266:	f7ff fdaa 	bl	8006dbe <LL_RCC_PLLSAI1_IsReady>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1f0      	bne.n	8007252 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d137      	bne.n	80072e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	021b      	lsls	r3, r3, #8
 8007286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800728a:	4313      	orrs	r3, r2
 800728c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800728e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072a0:	4313      	orrs	r3, r2
 80072a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80072a4:	f7ff fd6d 	bl	8006d82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072a8:	f7fc fd50 	bl	8003d4c <HAL_GetTick>
 80072ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072ae:	e009      	b.n	80072c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072b0:	f7fc fd4c 	bl	8003d4c <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d902      	bls.n	80072c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	73fb      	strb	r3, [r7, #15]
        break;
 80072c2:	e004      	b.n	80072ce <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072c4:	f7ff fd7b 	bl	8006dbe <LL_RCC_PLLSAI1_IsReady>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d1f0      	bne.n	80072b0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d108      	bne.n	80072e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80072d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d8:	691a      	ldr	r2, [r3, #16]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072e2:	4313      	orrs	r3, r2
 80072e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e09f      	b.n	8007442 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fc fa12 	bl	8003740 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007324:	4b49      	ldr	r3, [pc, #292]	; (800744c <HAL_RTC_Init+0x15c>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b10      	cmp	r3, #16
 800732e:	d07e      	beq.n	800742e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	22ca      	movs	r2, #202	; 0xca
 8007336:	625a      	str	r2, [r3, #36]	; 0x24
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2253      	movs	r2, #83	; 0x53
 800733e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f8ab 	bl	800749c <RTC_EnterInitMode>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	22ff      	movs	r2, #255	; 0xff
 8007352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2204      	movs	r2, #4
 8007358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	73fb      	strb	r3, [r7, #15]
 8007360:	e067      	b.n	8007432 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007374:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6899      	ldr	r1, [r3, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	68d2      	ldr	r2, [r2, #12]
 800739c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6919      	ldr	r1, [r3, #16]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	041a      	lsls	r2, r3, #16
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073c0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0203 	bic.w	r2, r2, #3
 80073d0:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	69da      	ldr	r2, [r3, #28]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d113      	bne.n	8007420 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f829 	bl	8007450 <HAL_RTC_WaitForSynchro>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00d      	beq.n	8007420 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	22ff      	movs	r2, #255	; 0xff
 800740a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2204      	movs	r2, #4
 8007410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e010      	b.n	8007442 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	22ff      	movs	r2, #255	; 0xff
 8007426:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]
 800742c:	e001      	b.n	8007432 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d103      	bne.n	8007440 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	40002800 	.word	0x40002800

08007450 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007466:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007468:	f7fc fc70 	bl	8003d4c <HAL_GetTick>
 800746c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800746e:	e009      	b.n	8007484 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007470:	f7fc fc6c 	bl	8003d4c <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800747e:	d901      	bls.n	8007484 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e007      	b.n	8007494 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0ee      	beq.n	8007470 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d119      	bne.n	80074e6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80074bc:	f7fc fc46 	bl	8003d4c <HAL_GetTick>
 80074c0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80074c2:	e009      	b.n	80074d8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80074c4:	f7fc fc42 	bl	8003d4c <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074d2:	d901      	bls.n	80074d8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e007      	b.n	80074e8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0ee      	beq.n	80074c4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007506:	2302      	movs	r3, #2
 8007508:	e0a8      	b.n	800765c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	22ca      	movs	r2, #202	; 0xca
 8007520:	625a      	str	r2, [r3, #36]	; 0x24
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2253      	movs	r2, #83	; 0x53
 8007528:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007534:	2b00      	cmp	r3, #0
 8007536:	d020      	beq.n	800757a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007538:	f7fc fc08 	bl	8003d4c <HAL_GetTick>
 800753c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800753e:	e015      	b.n	800756c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007540:	f7fc fc04 	bl	8003d4c <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800754e:	d90d      	bls.n	800756c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	22ff      	movs	r2, #255	; 0xff
 8007556:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2203      	movs	r2, #3
 800755c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e077      	b.n	800765c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e2      	bne.n	8007540 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007588:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	b2da      	uxtb	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800759a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800759c:	f7fc fbd6 	bl	8003d4c <HAL_GetTick>
 80075a0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80075a2:	e015      	b.n	80075d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80075a4:	f7fc fbd2 	bl	8003d4c <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075b2:	d90d      	bls.n	80075d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	22ff      	movs	r2, #255	; 0xff
 80075ba:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2203      	movs	r2, #3
 80075c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e045      	b.n	800765c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f003 0304 	and.w	r3, r3, #4
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0e2      	beq.n	80075a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0207 	bic.w	r2, r2, #7
 80075f4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6899      	ldr	r1, [r3, #8]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	430a      	orrs	r2, r1
 8007604:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007606:	4b17      	ldr	r3, [pc, #92]	; (8007664 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800760c:	4a15      	ldr	r2, [pc, #84]	; (8007664 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800760e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007612:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007616:	4b13      	ldr	r3, [pc, #76]	; (8007664 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a12      	ldr	r2, [pc, #72]	; (8007664 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800761c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007620:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007630:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007640:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	22ff      	movs	r2, #255	; 0xff
 8007648:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	58000800 	.word	0x58000800

08007668 <LL_RCC_GetUSARTClockSource>:
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007674:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4013      	ands	r3, r2
}
 800767c:	4618      	mov	r0, r3
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <LL_RCC_GetLPUARTClockSource>:
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007694:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4013      	ands	r3, r2
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e042      	b.n	8007740 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d106      	bne.n	80076d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7fb ff45 	bl	800355c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2224      	movs	r2, #36	; 0x24
 80076d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0201 	bic.w	r2, r2, #1
 80076e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fcd0 	bl	8008090 <UART_SetConfig>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e022      	b.n	8007740 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 feec 	bl	80084e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 ff73 	bl	8008624 <UART_CheckIdleState>
 800773e:	4603      	mov	r3, r0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007748:	b480      	push	{r7}
 800774a:	b091      	sub	sp, #68	; 0x44
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775c:	2b20      	cmp	r3, #32
 800775e:	d178      	bne.n	8007852 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_UART_Transmit_IT+0x24>
 8007766:	88fb      	ldrh	r3, [r7, #6]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e071      	b.n	8007854 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	88fa      	ldrh	r2, [r7, #6]
 800777a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	88fa      	ldrh	r2, [r7, #6]
 8007782:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2221      	movs	r2, #33	; 0x21
 8007798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077a4:	d12a      	bne.n	80077fc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ae:	d107      	bne.n	80077c0 <HAL_UART_Transmit_IT+0x78>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d103      	bne.n	80077c0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4a29      	ldr	r2, [pc, #164]	; (8007860 <HAL_UART_Transmit_IT+0x118>)
 80077bc:	679a      	str	r2, [r3, #120]	; 0x78
 80077be:	e002      	b.n	80077c6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4a28      	ldr	r2, [pc, #160]	; (8007864 <HAL_UART_Transmit_IT+0x11c>)
 80077c4:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3308      	adds	r3, #8
 80077e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077e6:	637a      	str	r2, [r7, #52]	; 0x34
 80077e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e5      	bne.n	80077c6 <HAL_UART_Transmit_IT+0x7e>
 80077fa:	e028      	b.n	800784e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007804:	d107      	bne.n	8007816 <HAL_UART_Transmit_IT+0xce>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d103      	bne.n	8007816 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4a15      	ldr	r2, [pc, #84]	; (8007868 <HAL_UART_Transmit_IT+0x120>)
 8007812:	679a      	str	r2, [r3, #120]	; 0x78
 8007814:	e002      	b.n	800781c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	4a14      	ldr	r2, [pc, #80]	; (800786c <HAL_UART_Transmit_IT+0x124>)
 800781a:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	613b      	str	r3, [r7, #16]
   return(result);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783a:	623b      	str	r3, [r7, #32]
 800783c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	69f9      	ldr	r1, [r7, #28]
 8007840:	6a3a      	ldr	r2, [r7, #32]
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	61bb      	str	r3, [r7, #24]
   return(result);
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e6      	bne.n	800781c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	e000      	b.n	8007854 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007852:	2302      	movs	r3, #2
  }
}
 8007854:	4618      	mov	r0, r3
 8007856:	3744      	adds	r7, #68	; 0x44
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	08008f9f 	.word	0x08008f9f
 8007864:	08008ebf 	.word	0x08008ebf
 8007868:	08008dfd 	.word	0x08008dfd
 800786c:	08008d45 	.word	0x08008d45

08007870 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	; 0x28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007884:	2b20      	cmp	r3, #32
 8007886:	d137      	bne.n	80078f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <HAL_UART_Receive_IT+0x24>
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e030      	b.n	80078fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a18      	ldr	r2, [pc, #96]	; (8007904 <HAL_UART_Receive_IT+0x94>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d01f      	beq.n	80078e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d018      	beq.n	80078e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	613b      	str	r3, [r7, #16]
   return(result);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	623b      	str	r3, [r7, #32]
 80078d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	69f9      	ldr	r1, [r7, #28]
 80078da:	6a3a      	ldr	r2, [r7, #32]
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e6      	bne.n	80078b6 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return (UART_Start_Receive_IT(huart, pData, Size));
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	461a      	mov	r2, r3
 80078ec:	68b9      	ldr	r1, [r7, #8]
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 ffae 	bl	8008850 <UART_Start_Receive_IT>
 80078f4:	4603      	mov	r3, r0
 80078f6:	e000      	b.n	80078fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3728      	adds	r7, #40	; 0x28
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	40008000 	.word	0x40008000

08007908 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791c:	2b20      	cmp	r3, #32
 800791e:	d167      	bne.n	80079f0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <HAL_UART_Transmit_DMA+0x24>
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e060      	b.n	80079f2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	88fa      	ldrh	r2, [r7, #6]
 800793a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	88fa      	ldrh	r2, [r7, #6]
 8007942:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2221      	movs	r2, #33	; 0x21
 8007952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800795a:	2b00      	cmp	r3, #0
 800795c:	d028      	beq.n	80079b0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007962:	4a26      	ldr	r2, [pc, #152]	; (80079fc <HAL_UART_Transmit_DMA+0xf4>)
 8007964:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800796a:	4a25      	ldr	r2, [pc, #148]	; (8007a00 <HAL_UART_Transmit_DMA+0xf8>)
 800796c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007972:	4a24      	ldr	r2, [pc, #144]	; (8007a04 <HAL_UART_Transmit_DMA+0xfc>)
 8007974:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800797a:	2200      	movs	r2, #0
 800797c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007986:	4619      	mov	r1, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3328      	adds	r3, #40	; 0x28
 800798e:	461a      	mov	r2, r3
 8007990:	88fb      	ldrh	r3, [r7, #6]
 8007992:	f7fc fc55 	bl	8004240 <HAL_DMA_Start_IT>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d009      	beq.n	80079b0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2210      	movs	r2, #16
 80079a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e020      	b.n	80079f2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2240      	movs	r2, #64	; 0x40
 80079b6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3308      	adds	r3, #8
 80079be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	613b      	str	r3, [r7, #16]
   return(result);
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ce:	627b      	str	r3, [r7, #36]	; 0x24
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3308      	adds	r3, #8
 80079d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d8:	623a      	str	r2, [r7, #32]
 80079da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	69f9      	ldr	r1, [r7, #28]
 80079de:	6a3a      	ldr	r2, [r7, #32]
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e5      	bne.n	80079b8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	e000      	b.n	80079f2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80079f0:	2302      	movs	r3, #2
  }
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3728      	adds	r7, #40	; 0x28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	08008be3 	.word	0x08008be3
 8007a00:	08008c7d 	.word	0x08008c7d
 8007a04:	08008c99 	.word	0x08008c99

08007a08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b0ba      	sub	sp, #232	; 0xe8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a32:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a36:	4013      	ands	r3, r2
 8007a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11b      	bne.n	8007a7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d015      	beq.n	8007a7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d105      	bne.n	8007a68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d009      	beq.n	8007a7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 82e3 	beq.w	8008038 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
      }
      return;
 8007a7a:	e2dd      	b.n	8008038 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 8123 	beq.w	8007ccc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a8a:	4b8d      	ldr	r3, [pc, #564]	; (8007cc0 <HAL_UART_IRQHandler+0x2b8>)
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a96:	4b8b      	ldr	r3, [pc, #556]	; (8007cc4 <HAL_UART_IRQHandler+0x2bc>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 8116 	beq.w	8007ccc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d011      	beq.n	8007ad0 <HAL_UART_IRQHandler+0xc8>
 8007aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2201      	movs	r2, #1
 8007abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac6:	f043 0201 	orr.w	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d011      	beq.n	8007b00 <HAL_UART_IRQHandler+0xf8>
 8007adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2202      	movs	r2, #2
 8007aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af6:	f043 0204 	orr.w	r2, r3, #4
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b04:	f003 0304 	and.w	r3, r3, #4
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d011      	beq.n	8007b30 <HAL_UART_IRQHandler+0x128>
 8007b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2204      	movs	r2, #4
 8007b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b26:	f043 0202 	orr.w	r2, r3, #2
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b34:	f003 0308 	and.w	r3, r3, #8
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d017      	beq.n	8007b6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d105      	bne.n	8007b54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b4c:	4b5c      	ldr	r3, [pc, #368]	; (8007cc0 <HAL_UART_IRQHandler+0x2b8>)
 8007b4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2208      	movs	r2, #8
 8007b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b62:	f043 0208 	orr.w	r2, r3, #8
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d012      	beq.n	8007b9e <HAL_UART_IRQHandler+0x196>
 8007b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00c      	beq.n	8007b9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b94:	f043 0220 	orr.w	r2, r3, #32
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 8249 	beq.w	800803c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bae:	f003 0320 	and.w	r3, r3, #32
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d013      	beq.n	8007bde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d007      	beq.n	8007bde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b40      	cmp	r3, #64	; 0x40
 8007bf4:	d005      	beq.n	8007c02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d054      	beq.n	8007cac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 ff87 	bl	8008b16 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c12:	2b40      	cmp	r3, #64	; 0x40
 8007c14:	d146      	bne.n	8007ca4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c52:	e841 2300 	strex	r3, r2, [r1]
 8007c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1d9      	bne.n	8007c16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d017      	beq.n	8007c9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c72:	4a15      	ldr	r2, [pc, #84]	; (8007cc8 <HAL_UART_IRQHandler+0x2c0>)
 8007c74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fc fbb9 	bl	80043f4 <HAL_DMA_Abort_IT>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d019      	beq.n	8007cbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007c96:	4610      	mov	r0, r2
 8007c98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9a:	e00f      	b.n	8007cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f9e1 	bl	8008064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca2:	e00b      	b.n	8007cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f9dd 	bl	8008064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007caa:	e007      	b.n	8007cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f9d9 	bl	8008064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007cba:	e1bf      	b.n	800803c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbc:	bf00      	nop
    return;
 8007cbe:	e1bd      	b.n	800803c <HAL_UART_IRQHandler+0x634>
 8007cc0:	10000001 	.word	0x10000001
 8007cc4:	04000120 	.word	0x04000120
 8007cc8:	08008d19 	.word	0x08008d19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	f040 8153 	bne.w	8007f7c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 814c 	beq.w	8007f7c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce8:	f003 0310 	and.w	r3, r3, #16
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 8145 	beq.w	8007f7c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2210      	movs	r2, #16
 8007cf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d04:	2b40      	cmp	r3, #64	; 0x40
 8007d06:	f040 80bb 	bne.w	8007e80 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 818f 	beq.w	8008040 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	f080 8187 	bcs.w	8008040 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0320 	and.w	r3, r3, #32
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f040 8087 	bne.w	8007e5e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1da      	bne.n	8007d50 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3308      	adds	r3, #8
 8007da0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dac:	f023 0301 	bic.w	r3, r3, #1
 8007db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3308      	adds	r3, #8
 8007dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e1      	bne.n	8007d9a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3308      	adds	r3, #8
 8007ddc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007dfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007dfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e3      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e2c:	f023 0310 	bic.w	r3, r3, #16
 8007e30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e40:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e4      	bne.n	8007e1c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fc fa6c 	bl	8004336 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2202      	movs	r2, #2
 8007e62:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f8fd 	bl	8008078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e7e:	e0df      	b.n	8008040 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 80d1 	beq.w	8008044 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 80cc 	beq.w	8008044 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ece:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e4      	bne.n	8007eac <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ef8:	f023 0301 	bic.w	r3, r3, #1
 8007efc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3308      	adds	r3, #8
 8007f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e1      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	e853 3f00 	ldrex	r3, [r3]
 8007f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0310 	bic.w	r3, r3, #16
 8007f46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	69b9      	ldr	r1, [r7, #24]
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	617b      	str	r3, [r7, #20]
   return(result);
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e4      	bne.n	8007f32 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f87f 	bl	8008078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f7a:	e063      	b.n	8008044 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00e      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x59e>
 8007f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d008      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fdba 	bl	8009b18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fa4:	e051      	b.n	800804a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d014      	beq.n	8007fdc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d105      	bne.n	8007fca <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d008      	beq.n	8007fdc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d03a      	beq.n	8008048 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4798      	blx	r3
    }
    return;
 8007fda:	e035      	b.n	8008048 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d009      	beq.n	8007ffc <HAL_UART_IRQHandler+0x5f4>
 8007fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f001 f847 	bl	8009088 <UART_EndTransmit_IT>
    return;
 8007ffa:	e026      	b.n	800804a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d009      	beq.n	800801c <HAL_UART_IRQHandler+0x614>
 8008008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800800c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 fd93 	bl	8009b40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800801a:	e016      	b.n	800804a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800801c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d010      	beq.n	800804a <HAL_UART_IRQHandler+0x642>
 8008028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800802c:	2b00      	cmp	r3, #0
 800802e:	da0c      	bge.n	800804a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 fd7b 	bl	8009b2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008036:	e008      	b.n	800804a <HAL_UART_IRQHandler+0x642>
      return;
 8008038:	bf00      	nop
 800803a:	e006      	b.n	800804a <HAL_UART_IRQHandler+0x642>
    return;
 800803c:	bf00      	nop
 800803e:	e004      	b.n	800804a <HAL_UART_IRQHandler+0x642>
      return;
 8008040:	bf00      	nop
 8008042:	e002      	b.n	800804a <HAL_UART_IRQHandler+0x642>
      return;
 8008044:	bf00      	nop
 8008046:	e000      	b.n	800804a <HAL_UART_IRQHandler+0x642>
    return;
 8008048:	bf00      	nop
  }
}
 800804a:	37e8      	adds	r7, #232	; 0xe8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008094:	b08c      	sub	sp, #48	; 0x30
 8008096:	af00      	add	r7, sp, #0
 8008098:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	431a      	orrs	r2, r3
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	431a      	orrs	r2, r3
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	4baf      	ldr	r3, [pc, #700]	; (800837c <UART_SetConfig+0x2ec>)
 80080c0:	4013      	ands	r3, r2
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4aa4      	ldr	r2, [pc, #656]	; (8008380 <UART_SetConfig+0x2f0>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d004      	beq.n	80080fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080f8:	4313      	orrs	r3, r2
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008106:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	6812      	ldr	r2, [r2, #0]
 800810e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008110:	430b      	orrs	r3, r1
 8008112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811a:	f023 010f 	bic.w	r1, r3, #15
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	430a      	orrs	r2, r1
 8008128:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a95      	ldr	r2, [pc, #596]	; (8008384 <UART_SetConfig+0x2f4>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d125      	bne.n	8008180 <UART_SetConfig+0xf0>
 8008134:	2003      	movs	r0, #3
 8008136:	f7ff fa97 	bl	8007668 <LL_RCC_GetUSARTClockSource>
 800813a:	4603      	mov	r3, r0
 800813c:	2b03      	cmp	r3, #3
 800813e:	d81b      	bhi.n	8008178 <UART_SetConfig+0xe8>
 8008140:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <UART_SetConfig+0xb8>)
 8008142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008146:	bf00      	nop
 8008148:	08008159 	.word	0x08008159
 800814c:	08008169 	.word	0x08008169
 8008150:	08008161 	.word	0x08008161
 8008154:	08008171 	.word	0x08008171
 8008158:	2301      	movs	r3, #1
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800815e:	e042      	b.n	80081e6 <UART_SetConfig+0x156>
 8008160:	2302      	movs	r3, #2
 8008162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008166:	e03e      	b.n	80081e6 <UART_SetConfig+0x156>
 8008168:	2304      	movs	r3, #4
 800816a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800816e:	e03a      	b.n	80081e6 <UART_SetConfig+0x156>
 8008170:	2308      	movs	r3, #8
 8008172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008176:	e036      	b.n	80081e6 <UART_SetConfig+0x156>
 8008178:	2310      	movs	r3, #16
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800817e:	e032      	b.n	80081e6 <UART_SetConfig+0x156>
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a7e      	ldr	r2, [pc, #504]	; (8008380 <UART_SetConfig+0x2f0>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d12a      	bne.n	80081e0 <UART_SetConfig+0x150>
 800818a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800818e:	f7ff fa7b 	bl	8007688 <LL_RCC_GetLPUARTClockSource>
 8008192:	4603      	mov	r3, r0
 8008194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008198:	d01a      	beq.n	80081d0 <UART_SetConfig+0x140>
 800819a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800819e:	d81b      	bhi.n	80081d8 <UART_SetConfig+0x148>
 80081a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081a4:	d00c      	beq.n	80081c0 <UART_SetConfig+0x130>
 80081a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081aa:	d815      	bhi.n	80081d8 <UART_SetConfig+0x148>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d003      	beq.n	80081b8 <UART_SetConfig+0x128>
 80081b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081b4:	d008      	beq.n	80081c8 <UART_SetConfig+0x138>
 80081b6:	e00f      	b.n	80081d8 <UART_SetConfig+0x148>
 80081b8:	2300      	movs	r3, #0
 80081ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081be:	e012      	b.n	80081e6 <UART_SetConfig+0x156>
 80081c0:	2302      	movs	r3, #2
 80081c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081c6:	e00e      	b.n	80081e6 <UART_SetConfig+0x156>
 80081c8:	2304      	movs	r3, #4
 80081ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ce:	e00a      	b.n	80081e6 <UART_SetConfig+0x156>
 80081d0:	2308      	movs	r3, #8
 80081d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081d6:	e006      	b.n	80081e6 <UART_SetConfig+0x156>
 80081d8:	2310      	movs	r3, #16
 80081da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081de:	e002      	b.n	80081e6 <UART_SetConfig+0x156>
 80081e0:	2310      	movs	r3, #16
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a65      	ldr	r2, [pc, #404]	; (8008380 <UART_SetConfig+0x2f0>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	f040 8097 	bne.w	8008320 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d823      	bhi.n	8008242 <UART_SetConfig+0x1b2>
 80081fa:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <UART_SetConfig+0x170>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	08008225 	.word	0x08008225
 8008204:	08008243 	.word	0x08008243
 8008208:	0800822d 	.word	0x0800822d
 800820c:	08008243 	.word	0x08008243
 8008210:	08008233 	.word	0x08008233
 8008214:	08008243 	.word	0x08008243
 8008218:	08008243 	.word	0x08008243
 800821c:	08008243 	.word	0x08008243
 8008220:	0800823b 	.word	0x0800823b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008224:	f7fe fb60 	bl	80068e8 <HAL_RCC_GetPCLK1Freq>
 8008228:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800822a:	e010      	b.n	800824e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800822c:	4b56      	ldr	r3, [pc, #344]	; (8008388 <UART_SetConfig+0x2f8>)
 800822e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008230:	e00d      	b.n	800824e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008232:	f7fe fad9 	bl	80067e8 <HAL_RCC_GetSysClockFreq>
 8008236:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008238:	e009      	b.n	800824e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800823a:	f248 0306 	movw	r3, #32774	; 0x8006
 800823e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008240:	e005      	b.n	800824e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800824c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 812b 	beq.w	80084ac <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	4a4c      	ldr	r2, [pc, #304]	; (800838c <UART_SetConfig+0x2fc>)
 800825c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008260:	461a      	mov	r2, r3
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	fbb3 f3f2 	udiv	r3, r3, r2
 8008268:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	4613      	mov	r3, r2
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	4413      	add	r3, r2
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	429a      	cmp	r2, r3
 8008278:	d305      	bcc.n	8008286 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008280:	69ba      	ldr	r2, [r7, #24]
 8008282:	429a      	cmp	r2, r3
 8008284:	d903      	bls.n	800828e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800828c:	e10e      	b.n	80084ac <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	2200      	movs	r2, #0
 8008292:	60bb      	str	r3, [r7, #8]
 8008294:	60fa      	str	r2, [r7, #12]
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	4a3c      	ldr	r2, [pc, #240]	; (800838c <UART_SetConfig+0x2fc>)
 800829c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	2200      	movs	r2, #0
 80082a4:	603b      	str	r3, [r7, #0]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082b0:	f7f7 ffce 	bl	8000250 <__aeabi_uldivmod>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4610      	mov	r0, r2
 80082ba:	4619      	mov	r1, r3
 80082bc:	f04f 0200 	mov.w	r2, #0
 80082c0:	f04f 0300 	mov.w	r3, #0
 80082c4:	020b      	lsls	r3, r1, #8
 80082c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082ca:	0202      	lsls	r2, r0, #8
 80082cc:	6979      	ldr	r1, [r7, #20]
 80082ce:	6849      	ldr	r1, [r1, #4]
 80082d0:	0849      	lsrs	r1, r1, #1
 80082d2:	2000      	movs	r0, #0
 80082d4:	460c      	mov	r4, r1
 80082d6:	4605      	mov	r5, r0
 80082d8:	eb12 0804 	adds.w	r8, r2, r4
 80082dc:	eb43 0905 	adc.w	r9, r3, r5
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	469a      	mov	sl, r3
 80082e8:	4693      	mov	fp, r2
 80082ea:	4652      	mov	r2, sl
 80082ec:	465b      	mov	r3, fp
 80082ee:	4640      	mov	r0, r8
 80082f0:	4649      	mov	r1, r9
 80082f2:	f7f7 ffad 	bl	8000250 <__aeabi_uldivmod>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4613      	mov	r3, r2
 80082fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008304:	d308      	bcc.n	8008318 <UART_SetConfig+0x288>
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830c:	d204      	bcs.n	8008318 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6a3a      	ldr	r2, [r7, #32]
 8008314:	60da      	str	r2, [r3, #12]
 8008316:	e0c9      	b.n	80084ac <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800831e:	e0c5      	b.n	80084ac <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008328:	d16d      	bne.n	8008406 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800832a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800832e:	3b01      	subs	r3, #1
 8008330:	2b07      	cmp	r3, #7
 8008332:	d82d      	bhi.n	8008390 <UART_SetConfig+0x300>
 8008334:	a201      	add	r2, pc, #4	; (adr r2, 800833c <UART_SetConfig+0x2ac>)
 8008336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833a:	bf00      	nop
 800833c:	0800835d 	.word	0x0800835d
 8008340:	08008365 	.word	0x08008365
 8008344:	08008391 	.word	0x08008391
 8008348:	0800836b 	.word	0x0800836b
 800834c:	08008391 	.word	0x08008391
 8008350:	08008391 	.word	0x08008391
 8008354:	08008391 	.word	0x08008391
 8008358:	08008373 	.word	0x08008373
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800835c:	f7fe fada 	bl	8006914 <HAL_RCC_GetPCLK2Freq>
 8008360:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008362:	e01b      	b.n	800839c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008364:	4b08      	ldr	r3, [pc, #32]	; (8008388 <UART_SetConfig+0x2f8>)
 8008366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008368:	e018      	b.n	800839c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800836a:	f7fe fa3d 	bl	80067e8 <HAL_RCC_GetSysClockFreq>
 800836e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008370:	e014      	b.n	800839c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008372:	f248 0306 	movw	r3, #32774	; 0x8006
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008378:	e010      	b.n	800839c <UART_SetConfig+0x30c>
 800837a:	bf00      	nop
 800837c:	cfff69f3 	.word	0xcfff69f3
 8008380:	40008000 	.word	0x40008000
 8008384:	40013800 	.word	0x40013800
 8008388:	00f42400 	.word	0x00f42400
 800838c:	0800ecf8 	.word	0x0800ecf8
      default:
        pclk = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800839a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 8084 	beq.w	80084ac <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	4a4b      	ldr	r2, [pc, #300]	; (80084d8 <UART_SetConfig+0x448>)
 80083aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ae:	461a      	mov	r2, r3
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80083b6:	005a      	lsls	r2, r3, #1
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	085b      	lsrs	r3, r3, #1
 80083be:	441a      	add	r2, r3
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	2b0f      	cmp	r3, #15
 80083ce:	d916      	bls.n	80083fe <UART_SetConfig+0x36e>
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083d6:	d212      	bcs.n	80083fe <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f023 030f 	bic.w	r3, r3, #15
 80083e0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	085b      	lsrs	r3, r3, #1
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f003 0307 	and.w	r3, r3, #7
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	8bfb      	ldrh	r3, [r7, #30]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	8bfa      	ldrh	r2, [r7, #30]
 80083fa:	60da      	str	r2, [r3, #12]
 80083fc:	e056      	b.n	80084ac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008404:	e052      	b.n	80084ac <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800840a:	3b01      	subs	r3, #1
 800840c:	2b07      	cmp	r3, #7
 800840e:	d822      	bhi.n	8008456 <UART_SetConfig+0x3c6>
 8008410:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <UART_SetConfig+0x388>)
 8008412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008416:	bf00      	nop
 8008418:	08008439 	.word	0x08008439
 800841c:	08008441 	.word	0x08008441
 8008420:	08008457 	.word	0x08008457
 8008424:	08008447 	.word	0x08008447
 8008428:	08008457 	.word	0x08008457
 800842c:	08008457 	.word	0x08008457
 8008430:	08008457 	.word	0x08008457
 8008434:	0800844f 	.word	0x0800844f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008438:	f7fe fa6c 	bl	8006914 <HAL_RCC_GetPCLK2Freq>
 800843c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800843e:	e010      	b.n	8008462 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008440:	4b26      	ldr	r3, [pc, #152]	; (80084dc <UART_SetConfig+0x44c>)
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008444:	e00d      	b.n	8008462 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008446:	f7fe f9cf 	bl	80067e8 <HAL_RCC_GetSysClockFreq>
 800844a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800844c:	e009      	b.n	8008462 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800844e:	f248 0306 	movw	r3, #32774	; 0x8006
 8008452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008454:	e005      	b.n	8008462 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008460:	bf00      	nop
    }

    if (pclk != 0U)
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	2b00      	cmp	r3, #0
 8008466:	d021      	beq.n	80084ac <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	4a1a      	ldr	r2, [pc, #104]	; (80084d8 <UART_SetConfig+0x448>)
 800846e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008472:	461a      	mov	r2, r3
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	fbb3 f2f2 	udiv	r2, r3, r2
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	441a      	add	r2, r3
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	fbb2 f3f3 	udiv	r3, r2, r3
 800848a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	2b0f      	cmp	r3, #15
 8008490:	d909      	bls.n	80084a6 <UART_SetConfig+0x416>
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008498:	d205      	bcs.n	80084a6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	b29a      	uxth	r2, r3
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60da      	str	r2, [r3, #12]
 80084a4:	e002      	b.n	80084ac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2200      	movs	r2, #0
 80084c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2200      	movs	r2, #0
 80084c6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80084c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3730      	adds	r7, #48	; 0x30
 80084d0:	46bd      	mov	sp, r7
 80084d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084d6:	bf00      	nop
 80084d8:	0800ecf8 	.word	0x0800ecf8
 80084dc:	00f42400 	.word	0x00f42400

080084e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00a      	beq.n	800854e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008552:	f003 0308 	and.w	r3, r3, #8
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	430a      	orrs	r2, r1
 800856e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01a      	beq.n	80085f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085de:	d10a      	bne.n	80085f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	605a      	str	r2, [r3, #4]
  }
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af02      	add	r7, sp, #8
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008634:	f7fb fb8a 	bl	8003d4c <HAL_GetTick>
 8008638:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	2b08      	cmp	r3, #8
 8008646:	d10e      	bne.n	8008666 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f832 	bl	80086c0 <UART_WaitOnFlagUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e028      	b.n	80086b8 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b04      	cmp	r3, #4
 8008672:	d10e      	bne.n	8008692 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f81c 	bl	80086c0 <UART_WaitOnFlagUntilTimeout>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e012      	b.n	80086b8 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2220      	movs	r2, #32
 8008696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b09c      	sub	sp, #112	; 0x70
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	4613      	mov	r3, r2
 80086ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d0:	e0a9      	b.n	8008826 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d8:	f000 80a5 	beq.w	8008826 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086dc:	f7fb fb36 	bl	8003d4c <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d302      	bcc.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x32>
 80086ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d140      	bne.n	8008774 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008702:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008706:	667b      	str	r3, [r7, #100]	; 0x64
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008712:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008716:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800871e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e6      	bne.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3308      	adds	r3, #8
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	f023 0301 	bic.w	r3, r3, #1
 800873a:	663b      	str	r3, [r7, #96]	; 0x60
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008744:	64ba      	str	r2, [r7, #72]	; 0x48
 8008746:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800874a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e5      	bne.n	8008724 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2220      	movs	r2, #32
 800875c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2220      	movs	r2, #32
 8008764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e069      	b.n	8008848 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b00      	cmp	r3, #0
 8008780:	d051      	beq.n	8008826 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800878c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008790:	d149      	bne.n	8008826 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800879a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a4:	e853 3f00 	ldrex	r3, [r3]
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ba:	637b      	str	r3, [r7, #52]	; 0x34
 80087bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e6      	bne.n	800879c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	613b      	str	r3, [r7, #16]
   return(result);
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f023 0301 	bic.w	r3, r3, #1
 80087e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3308      	adds	r3, #8
 80087ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087ee:	623a      	str	r2, [r7, #32]
 80087f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	69f9      	ldr	r1, [r7, #28]
 80087f4:	6a3a      	ldr	r2, [r7, #32]
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e5      	bne.n	80087ce <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2220      	movs	r2, #32
 8008806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2220      	movs	r2, #32
 800880e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2220      	movs	r2, #32
 8008816:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e010      	b.n	8008848 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69da      	ldr	r2, [r3, #28]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4013      	ands	r3, r2
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	429a      	cmp	r2, r3
 8008834:	bf0c      	ite	eq
 8008836:	2301      	moveq	r3, #1
 8008838:	2300      	movne	r3, #0
 800883a:	b2db      	uxtb	r3, r3
 800883c:	461a      	mov	r2, r3
 800883e:	79fb      	ldrb	r3, [r7, #7]
 8008840:	429a      	cmp	r2, r3
 8008842:	f43f af46 	beq.w	80086d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3770      	adds	r7, #112	; 0x70
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008850:	b480      	push	{r7}
 8008852:	b0a3      	sub	sp, #140	; 0x8c
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4613      	mov	r3, r2
 800885c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	88fa      	ldrh	r2, [r7, #6]
 8008868:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	88fa      	ldrh	r2, [r7, #6]
 8008870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008882:	d10e      	bne.n	80088a2 <UART_Start_Receive_IT+0x52>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d105      	bne.n	8008898 <UART_Start_Receive_IT+0x48>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008892:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008896:	e02d      	b.n	80088f4 <UART_Start_Receive_IT+0xa4>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	22ff      	movs	r2, #255	; 0xff
 800889c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088a0:	e028      	b.n	80088f4 <UART_Start_Receive_IT+0xa4>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10d      	bne.n	80088c6 <UART_Start_Receive_IT+0x76>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d104      	bne.n	80088bc <UART_Start_Receive_IT+0x6c>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	22ff      	movs	r2, #255	; 0xff
 80088b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088ba:	e01b      	b.n	80088f4 <UART_Start_Receive_IT+0xa4>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	227f      	movs	r2, #127	; 0x7f
 80088c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088c4:	e016      	b.n	80088f4 <UART_Start_Receive_IT+0xa4>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088ce:	d10d      	bne.n	80088ec <UART_Start_Receive_IT+0x9c>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d104      	bne.n	80088e2 <UART_Start_Receive_IT+0x92>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	227f      	movs	r2, #127	; 0x7f
 80088dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088e0:	e008      	b.n	80088f4 <UART_Start_Receive_IT+0xa4>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	223f      	movs	r2, #63	; 0x3f
 80088e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088ea:	e003      	b.n	80088f4 <UART_Start_Receive_IT+0xa4>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2222      	movs	r2, #34	; 0x22
 8008900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3308      	adds	r3, #8
 800890a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008916:	f043 0301 	orr.w	r3, r3, #1
 800891a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3308      	adds	r3, #8
 8008924:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008928:	673a      	str	r2, [r7, #112]	; 0x70
 800892a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800892e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008930:	e841 2300 	strex	r3, r2, [r1]
 8008934:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1e3      	bne.n	8008904 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008944:	d14f      	bne.n	80089e6 <UART_Start_Receive_IT+0x196>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800894c:	88fa      	ldrh	r2, [r7, #6]
 800894e:	429a      	cmp	r2, r3
 8008950:	d349      	bcc.n	80089e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800895a:	d107      	bne.n	800896c <UART_Start_Receive_IT+0x11c>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d103      	bne.n	800896c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4a47      	ldr	r2, [pc, #284]	; (8008a84 <UART_Start_Receive_IT+0x234>)
 8008968:	675a      	str	r2, [r3, #116]	; 0x74
 800896a:	e002      	b.n	8008972 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4a46      	ldr	r2, [pc, #280]	; (8008a88 <UART_Start_Receive_IT+0x238>)
 8008970:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01a      	beq.n	80089b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008982:	e853 3f00 	ldrex	r3, [r3]
 8008986:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800898e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800899c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800899e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80089aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e4      	bne.n	800897a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ba:	e853 3f00 	ldrex	r3, [r3]
 80089be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3308      	adds	r3, #8
 80089ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80089d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80089d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e5      	bne.n	80089b0 <UART_Start_Receive_IT+0x160>
 80089e4:	e046      	b.n	8008a74 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ee:	d107      	bne.n	8008a00 <UART_Start_Receive_IT+0x1b0>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d103      	bne.n	8008a00 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4a24      	ldr	r2, [pc, #144]	; (8008a8c <UART_Start_Receive_IT+0x23c>)
 80089fc:	675a      	str	r2, [r3, #116]	; 0x74
 80089fe:	e002      	b.n	8008a06 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4a23      	ldr	r2, [pc, #140]	; (8008a90 <UART_Start_Receive_IT+0x240>)
 8008a04:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d019      	beq.n	8008a42 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	e853 3f00 	ldrex	r3, [r3]
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008a22:	677b      	str	r3, [r7, #116]	; 0x74
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e6      	bne.n	8008a0e <UART_Start_Receive_IT+0x1be>
 8008a40:	e018      	b.n	8008a74 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f043 0320 	orr.w	r3, r3, #32
 8008a56:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a60:	623b      	str	r3, [r7, #32]
 8008a62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a64:	69f9      	ldr	r1, [r7, #28]
 8008a66:	6a3a      	ldr	r2, [r7, #32]
 8008a68:	e841 2300 	strex	r3, r2, [r1]
 8008a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e6      	bne.n	8008a42 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	378c      	adds	r7, #140	; 0x8c
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	080097b1 	.word	0x080097b1
 8008a88:	08009451 	.word	0x08009451
 8008a8c:	08009299 	.word	0x08009299
 8008a90:	080090e1 	.word	0x080090e1

08008a94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b08f      	sub	sp, #60	; 0x3c
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008abc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e6      	bne.n	8008a9c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3308      	adds	r3, #8
 8008aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aee:	61ba      	str	r2, [r7, #24]
 8008af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6979      	ldr	r1, [r7, #20]
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	613b      	str	r3, [r7, #16]
   return(result);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e5      	bne.n	8008ace <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008b0a:	bf00      	nop
 8008b0c:	373c      	adds	r7, #60	; 0x3c
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b095      	sub	sp, #84	; 0x54
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e6      	bne.n	8008b1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3308      	adds	r3, #8
 8008b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b66:	f023 0301 	bic.w	r3, r3, #1
 8008b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3308      	adds	r3, #8
 8008b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b7c:	e841 2300 	strex	r3, r2, [r1]
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e3      	bne.n	8008b50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d118      	bne.n	8008bc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	f023 0310 	bic.w	r3, r3, #16
 8008ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bae:	61bb      	str	r3, [r7, #24]
 8008bb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6979      	ldr	r1, [r7, #20]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	613b      	str	r3, [r7, #16]
   return(result);
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e6      	bne.n	8008b90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008bd6:	bf00      	nop
 8008bd8:	3754      	adds	r7, #84	; 0x54
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b090      	sub	sp, #64	; 0x40
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0320 	and.w	r3, r3, #32
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d137      	bne.n	8008c6e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c00:	2200      	movs	r2, #0
 8008c02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3308      	adds	r3, #8
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	623b      	str	r3, [r7, #32]
   return(result);
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3308      	adds	r3, #8
 8008c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c26:	633a      	str	r2, [r7, #48]	; 0x30
 8008c28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1e5      	bne.n	8008c06 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	461a      	mov	r2, r3
 8008c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	69b9      	ldr	r1, [r7, #24]
 8008c5e:	69fa      	ldr	r2, [r7, #28]
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	617b      	str	r3, [r7, #20]
   return(result);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e6      	bne.n	8008c3a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c6c:	e002      	b.n	8008c74 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008c70:	f7fa f974 	bl	8002f5c <HAL_UART_TxCpltCallback>
}
 8008c74:	bf00      	nop
 8008c76:	3740      	adds	r7, #64	; 0x40
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c88:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7ff f9e0 	bl	8008050 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c90:	bf00      	nop
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cb4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc0:	2b80      	cmp	r3, #128	; 0x80
 8008cc2:	d109      	bne.n	8008cd8 <UART_DMAError+0x40>
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2b21      	cmp	r3, #33	; 0x21
 8008cc8:	d106      	bne.n	8008cd8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008cd2:	6978      	ldr	r0, [r7, #20]
 8008cd4:	f7ff fede 	bl	8008a94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce2:	2b40      	cmp	r3, #64	; 0x40
 8008ce4:	d109      	bne.n	8008cfa <UART_DMAError+0x62>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b22      	cmp	r3, #34	; 0x22
 8008cea:	d106      	bne.n	8008cfa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008cf4:	6978      	ldr	r0, [r7, #20]
 8008cf6:	f7ff ff0e 	bl	8008b16 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d00:	f043 0210 	orr.w	r2, r3, #16
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d0a:	6978      	ldr	r0, [r7, #20]
 8008d0c:	f7ff f9aa 	bl	8008064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d10:	bf00      	nop
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f7ff f994 	bl	8008064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b08f      	sub	sp, #60	; 0x3c
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d52:	2b21      	cmp	r3, #33	; 0x21
 8008d54:	d14c      	bne.n	8008df0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d132      	bne.n	8008dc8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	e853 3f00 	ldrex	r3, [r3]
 8008d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d76:	637b      	str	r3, [r7, #52]	; 0x34
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d82:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d88:	e841 2300 	strex	r3, r2, [r1]
 8008d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e6      	bne.n	8008d62 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da8:	633b      	str	r3, [r7, #48]	; 0x30
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	61bb      	str	r3, [r7, #24]
 8008db4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6979      	ldr	r1, [r7, #20]
 8008db8:	69ba      	ldr	r2, [r7, #24]
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e6      	bne.n	8008d94 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008dc6:	e013      	b.n	8008df0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd8:	1c5a      	adds	r2, r3, #1
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	3b01      	subs	r3, #1
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008df0:	bf00      	nop
 8008df2:	373c      	adds	r7, #60	; 0x3c
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b091      	sub	sp, #68	; 0x44
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0a:	2b21      	cmp	r3, #33	; 0x21
 8008e0c:	d151      	bne.n	8008eb2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d132      	bne.n	8008e80 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	623b      	str	r3, [r7, #32]
   return(result);
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	633b      	str	r3, [r7, #48]	; 0x30
 8008e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e6      	bne.n	8008e1a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e60:	637b      	str	r3, [r7, #52]	; 0x34
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6a:	61fb      	str	r3, [r7, #28]
 8008e6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	69b9      	ldr	r1, [r7, #24]
 8008e70:	69fa      	ldr	r2, [r7, #28]
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	617b      	str	r3, [r7, #20]
   return(result);
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e6      	bne.n	8008e4c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008e7e:	e018      	b.n	8008eb2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e84:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e94:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9a:	1c9a      	adds	r2, r3, #2
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008eb2:	bf00      	nop
 8008eb4:	3744      	adds	r7, #68	; 0x44
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b091      	sub	sp, #68	; 0x44
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ecc:	2b21      	cmp	r3, #33	; 0x21
 8008ece:	d160      	bne.n	8008f92 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ed6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008ed8:	e057      	b.n	8008f8a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d133      	bne.n	8008f4e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3308      	adds	r3, #8
 8008eec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3308      	adds	r3, #8
 8008f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f06:	633a      	str	r2, [r7, #48]	; 0x30
 8008f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e5      	bne.n	8008ee6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	e853 3f00 	ldrex	r3, [r3]
 8008f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f38:	61fb      	str	r3, [r7, #28]
 8008f3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3c:	69b9      	ldr	r1, [r7, #24]
 8008f3e:	69fa      	ldr	r2, [r7, #28]
 8008f40:	e841 2300 	strex	r3, r2, [r1]
 8008f44:	617b      	str	r3, [r7, #20]
   return(result);
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e6      	bne.n	8008f1a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008f4c:	e021      	b.n	8008f92 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69db      	ldr	r3, [r3, #28]
 8008f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d013      	beq.n	8008f84 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f60:	781a      	ldrb	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008f84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f86:	3b01      	subs	r3, #1
 8008f88:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008f8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1a4      	bne.n	8008eda <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008f90:	e7ff      	b.n	8008f92 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008f92:	bf00      	nop
 8008f94:	3744      	adds	r7, #68	; 0x44
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b091      	sub	sp, #68	; 0x44
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fac:	2b21      	cmp	r3, #33	; 0x21
 8008fae:	d165      	bne.n	800907c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008fb8:	e05c      	b.n	8009074 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d133      	bne.n	800902e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3308      	adds	r3, #8
 8008fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	e853 3f00 	ldrex	r3, [r3]
 8008fd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e5      	bne.n	8008fc6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	60bb      	str	r3, [r7, #8]
   return(result);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800900e:	633b      	str	r3, [r7, #48]	; 0x30
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	61bb      	str	r3, [r7, #24]
 800901a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6979      	ldr	r1, [r7, #20]
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	613b      	str	r3, [r7, #16]
   return(result);
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e6      	bne.n	8008ffa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800902c:	e026      	b.n	800907c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009038:	2b00      	cmp	r3, #0
 800903a:	d018      	beq.n	800906e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009040:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009050:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009056:	1c9a      	adds	r2, r3, #2
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009062:	b29b      	uxth	r3, r3
 8009064:	3b01      	subs	r3, #1
 8009066:	b29a      	uxth	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800906e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009070:	3b01      	subs	r3, #1
 8009072:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009074:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009076:	2b00      	cmp	r3, #0
 8009078:	d19f      	bne.n	8008fba <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800907a:	e7ff      	b.n	800907c <UART_TxISR_16BIT_FIFOEN+0xde>
 800907c:	bf00      	nop
 800907e:	3744      	adds	r7, #68	; 0x44
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	e853 3f00 	ldrex	r3, [r3]
 800909c:	60bb      	str	r3, [r7, #8]
   return(result);
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090a4:	61fb      	str	r3, [r7, #28]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	461a      	mov	r2, r3
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	61bb      	str	r3, [r7, #24]
 80090b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	6979      	ldr	r1, [r7, #20]
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	613b      	str	r3, [r7, #16]
   return(result);
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1e6      	bne.n	8009090 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2220      	movs	r2, #32
 80090c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7f9 ff43 	bl	8002f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090d6:	bf00      	nop
 80090d8:	3720      	adds	r7, #32
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b09c      	sub	sp, #112	; 0x70
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f8:	2b22      	cmp	r3, #34	; 0x22
 80090fa:	f040 80be 	bne.w	800927a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009108:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800910c:	b2d9      	uxtb	r1, r3
 800910e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009112:	b2da      	uxtb	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009118:	400a      	ands	r2, r1
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800912e:	b29b      	uxth	r3, r3
 8009130:	3b01      	subs	r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009140:	b29b      	uxth	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	f040 80a1 	bne.w	800928a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800915c:	66bb      	str	r3, [r7, #104]	; 0x68
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009166:	65bb      	str	r3, [r7, #88]	; 0x58
 8009168:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800916c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e6      	bne.n	8009148 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3308      	adds	r3, #8
 8009180:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800918a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918c:	f023 0301 	bic.w	r3, r3, #1
 8009190:	667b      	str	r3, [r7, #100]	; 0x64
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3308      	adds	r3, #8
 8009198:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800919a:	647a      	str	r2, [r7, #68]	; 0x44
 800919c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e5      	bne.n	800917a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a33      	ldr	r2, [pc, #204]	; (8009294 <UART_RxISR_8BIT+0x1b4>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d01f      	beq.n	800920c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d018      	beq.n	800920c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	e853 3f00 	ldrex	r3, [r3]
 80091e6:	623b      	str	r3, [r7, #32]
   return(result);
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091ee:	663b      	str	r3, [r7, #96]	; 0x60
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	461a      	mov	r2, r3
 80091f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091f8:	633b      	str	r3, [r7, #48]	; 0x30
 80091fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009200:	e841 2300 	strex	r3, r2, [r1]
 8009204:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e6      	bne.n	80091da <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009210:	2b01      	cmp	r3, #1
 8009212:	d12e      	bne.n	8009272 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	e853 3f00 	ldrex	r3, [r3]
 8009226:	60fb      	str	r3, [r7, #12]
   return(result);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 0310 	bic.w	r3, r3, #16
 800922e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009238:	61fb      	str	r3, [r7, #28]
 800923a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	69b9      	ldr	r1, [r7, #24]
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	617b      	str	r3, [r7, #20]
   return(result);
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e6      	bne.n	800921a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	69db      	ldr	r3, [r3, #28]
 8009252:	f003 0310 	and.w	r3, r3, #16
 8009256:	2b10      	cmp	r3, #16
 8009258:	d103      	bne.n	8009262 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2210      	movs	r2, #16
 8009260:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7fe ff04 	bl	8008078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009270:	e00b      	b.n	800928a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7f9 fe44 	bl	8002f00 <HAL_UART_RxCpltCallback>
}
 8009278:	e007      	b.n	800928a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	699a      	ldr	r2, [r3, #24]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f042 0208 	orr.w	r2, r2, #8
 8009288:	619a      	str	r2, [r3, #24]
}
 800928a:	bf00      	nop
 800928c:	3770      	adds	r7, #112	; 0x70
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	40008000 	.word	0x40008000

08009298 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b09c      	sub	sp, #112	; 0x70
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092b0:	2b22      	cmp	r3, #34	; 0x22
 80092b2:	f040 80be 	bne.w	8009432 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80092c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80092ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80092ce:	4013      	ands	r3, r2
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092da:	1c9a      	adds	r2, r3, #2
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	3b01      	subs	r3, #1
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f040 80a1 	bne.w	8009442 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800930e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009310:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009314:	667b      	str	r3, [r7, #100]	; 0x64
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800931e:	657b      	str	r3, [r7, #84]	; 0x54
 8009320:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009324:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800932c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e6      	bne.n	8009300 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3308      	adds	r3, #8
 8009338:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009344:	f023 0301 	bic.w	r3, r3, #1
 8009348:	663b      	str	r3, [r7, #96]	; 0x60
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009352:	643a      	str	r2, [r7, #64]	; 0x40
 8009354:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e5      	bne.n	8009332 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a33      	ldr	r2, [pc, #204]	; (800944c <UART_RxISR_16BIT+0x1b4>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d01f      	beq.n	80093c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d018      	beq.n	80093c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	61fb      	str	r3, [r7, #28]
   return(result);
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093b2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e6      	bne.n	8009392 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d12e      	bne.n	800942a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	60bb      	str	r3, [r7, #8]
   return(result);
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f023 0310 	bic.w	r3, r3, #16
 80093e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093f0:	61bb      	str	r3, [r7, #24]
 80093f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f4:	6979      	ldr	r1, [r7, #20]
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	e841 2300 	strex	r3, r2, [r1]
 80093fc:	613b      	str	r3, [r7, #16]
   return(result);
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1e6      	bne.n	80093d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	f003 0310 	and.w	r3, r3, #16
 800940e:	2b10      	cmp	r3, #16
 8009410:	d103      	bne.n	800941a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2210      	movs	r2, #16
 8009418:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7fe fe28 	bl	8008078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009428:	e00b      	b.n	8009442 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7f9 fd68 	bl	8002f00 <HAL_UART_RxCpltCallback>
}
 8009430:	e007      	b.n	8009442 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	699a      	ldr	r2, [r3, #24]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f042 0208 	orr.w	r2, r2, #8
 8009440:	619a      	str	r2, [r3, #24]
}
 8009442:	bf00      	nop
 8009444:	3770      	adds	r7, #112	; 0x70
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	40008000 	.word	0x40008000

08009450 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b0ac      	sub	sp, #176	; 0xb0
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800945e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69db      	ldr	r3, [r3, #28]
 8009468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009486:	2b22      	cmp	r3, #34	; 0x22
 8009488:	f040 8182 	bne.w	8009790 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009492:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009496:	e125      	b.n	80096e4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80094a6:	b2d9      	uxtb	r1, r3
 80094a8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b2:	400a      	ands	r2, r1
 80094b4:	b2d2      	uxtb	r2, r2
 80094b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3b01      	subs	r3, #1
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d053      	beq.n	8009592 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d011      	beq.n	800951a <UART_RxISR_8BIT_FIFOEN+0xca>
 80094f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80094fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00b      	beq.n	800951a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2201      	movs	r2, #1
 8009508:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009510:	f043 0201 	orr.w	r2, r3, #1
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800951a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800951e:	f003 0302 	and.w	r3, r3, #2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d011      	beq.n	800954a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2202      	movs	r2, #2
 8009538:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009540:	f043 0204 	orr.w	r2, r3, #4
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800954a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800954e:	f003 0304 	and.w	r3, r3, #4
 8009552:	2b00      	cmp	r3, #0
 8009554:	d011      	beq.n	800957a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00b      	beq.n	800957a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2204      	movs	r2, #4
 8009568:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009570:	f043 0202 	orr.w	r2, r3, #2
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009580:	2b00      	cmp	r3, #0
 8009582:	d006      	beq.n	8009592 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7fe fd6d 	bl	8008064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009598:	b29b      	uxth	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	f040 80a2 	bne.w	80096e4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80095ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	461a      	mov	r2, r3
 80095be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095c4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80095c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80095d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e4      	bne.n	80095a0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3308      	adds	r3, #8
 80095dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80095e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ec:	f023 0301 	bic.w	r3, r3, #1
 80095f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3308      	adds	r3, #8
 80095fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095fe:	66ba      	str	r2, [r7, #104]	; 0x68
 8009600:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009604:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800960c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e1      	bne.n	80095d6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2220      	movs	r2, #32
 8009616:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a5f      	ldr	r2, [pc, #380]	; (80097a8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d021      	beq.n	8009674 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d01a      	beq.n	8009674 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009646:	e853 3f00 	ldrex	r3, [r3]
 800964a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800964c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800964e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009660:	657b      	str	r3, [r7, #84]	; 0x54
 8009662:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009664:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009666:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009668:	e841 2300 	strex	r3, r2, [r1]
 800966c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800966e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e4      	bne.n	800963e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009678:	2b01      	cmp	r3, #1
 800967a:	d130      	bne.n	80096de <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	f023 0310 	bic.w	r3, r3, #16
 8009696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096a4:	643b      	str	r3, [r7, #64]	; 0x40
 80096a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096ac:	e841 2300 	strex	r3, r2, [r1]
 80096b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e4      	bne.n	8009682 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	f003 0310 	and.w	r3, r3, #16
 80096c2:	2b10      	cmp	r3, #16
 80096c4:	d103      	bne.n	80096ce <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2210      	movs	r2, #16
 80096cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7fe fcce 	bl	8008078 <HAL_UARTEx_RxEventCallback>
 80096dc:	e002      	b.n	80096e4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7f9 fc0e 	bl	8002f00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d006      	beq.n	80096fa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80096ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096f0:	f003 0320 	and.w	r3, r3, #32
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f47f aecf 	bne.w	8009498 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009700:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009704:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009708:	2b00      	cmp	r3, #0
 800970a:	d049      	beq.n	80097a0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009712:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009716:	429a      	cmp	r2, r3
 8009718:	d242      	bcs.n	80097a0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3308      	adds	r3, #8
 8009720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	61fb      	str	r3, [r7, #28]
   return(result);
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	3308      	adds	r3, #8
 800973a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800973e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009740:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e3      	bne.n	800971a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a15      	ldr	r2, [pc, #84]	; (80097ac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009756:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	60bb      	str	r3, [r7, #8]
   return(result);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f043 0320 	orr.w	r3, r3, #32
 800976c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800977a:	61bb      	str	r3, [r7, #24]
 800977c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	6979      	ldr	r1, [r7, #20]
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	613b      	str	r3, [r7, #16]
   return(result);
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e4      	bne.n	8009758 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800978e:	e007      	b.n	80097a0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	699a      	ldr	r2, [r3, #24]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f042 0208 	orr.w	r2, r2, #8
 800979e:	619a      	str	r2, [r3, #24]
}
 80097a0:	bf00      	nop
 80097a2:	37b0      	adds	r7, #176	; 0xb0
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	40008000 	.word	0x40008000
 80097ac:	080090e1 	.word	0x080090e1

080097b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b0ae      	sub	sp, #184	; 0xb8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097be:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	69db      	ldr	r3, [r3, #28]
 80097c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e6:	2b22      	cmp	r3, #34	; 0x22
 80097e8:	f040 8186 	bne.w	8009af8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097f6:	e129      	b.n	8009a4c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800980a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800980e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009812:	4013      	ands	r3, r2
 8009814:	b29a      	uxth	r2, r3
 8009816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800981a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009820:	1c9a      	adds	r2, r3, #2
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800982c:	b29b      	uxth	r3, r3
 800982e:	3b01      	subs	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009842:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009846:	f003 0307 	and.w	r3, r3, #7
 800984a:	2b00      	cmp	r3, #0
 800984c:	d053      	beq.n	80098f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800984e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d011      	beq.n	800987e <UART_RxISR_16BIT_FIFOEN+0xce>
 800985a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800985e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2201      	movs	r2, #1
 800986c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009874:	f043 0201 	orr.w	r2, r3, #1
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800987e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d011      	beq.n	80098ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800988a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00b      	beq.n	80098ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2202      	movs	r2, #2
 800989c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a4:	f043 0204 	orr.w	r2, r3, #4
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80098b2:	f003 0304 	and.w	r3, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d011      	beq.n	80098de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80098ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00b      	beq.n	80098de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2204      	movs	r2, #4
 80098cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d4:	f043 0202 	orr.w	r2, r3, #2
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d006      	beq.n	80098f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7fe fbbb 	bl	8008064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f040 80a4 	bne.w	8009a4c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	461a      	mov	r2, r3
 8009922:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800992a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800992e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009932:	e841 2300 	strex	r3, r2, [r1]
 8009936:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e2      	bne.n	8009904 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3308      	adds	r3, #8
 8009944:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800994e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009954:	f023 0301 	bic.w	r3, r3, #1
 8009958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3308      	adds	r3, #8
 8009962:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009966:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009968:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800996c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800996e:	e841 2300 	strex	r3, r2, [r1]
 8009972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e1      	bne.n	800993e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2220      	movs	r2, #32
 800997e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a5f      	ldr	r2, [pc, #380]	; (8009b10 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d021      	beq.n	80099dc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d01a      	beq.n	80099dc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099ae:	e853 3f00 	ldrex	r3, [r3]
 80099b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80099ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e4      	bne.n	80099a6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d130      	bne.n	8009a46 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f2:	e853 3f00 	ldrex	r3, [r3]
 80099f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fa:	f023 0310 	bic.w	r3, r3, #16
 80099fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8009a0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a14:	e841 2300 	strex	r3, r2, [r1]
 8009a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e4      	bne.n	80099ea <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	f003 0310 	and.w	r3, r3, #16
 8009a2a:	2b10      	cmp	r3, #16
 8009a2c:	d103      	bne.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2210      	movs	r2, #16
 8009a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7fe fb1a 	bl	8008078 <HAL_UARTEx_RxEventCallback>
 8009a44:	e002      	b.n	8009a4c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7f9 fa5a 	bl	8002f00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d006      	beq.n	8009a62 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009a54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a58:	f003 0320 	and.w	r3, r3, #32
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f47f aecb 	bne.w	80097f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a68:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d049      	beq.n	8009b08 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a7a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d242      	bcs.n	8009b08 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3308      	adds	r3, #8
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8c:	e853 3f00 	ldrex	r3, [r3]
 8009a90:	623b      	str	r3, [r7, #32]
   return(result);
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009aa6:	633a      	str	r2, [r7, #48]	; 0x30
 8009aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aae:	e841 2300 	strex	r3, r2, [r1]
 8009ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1e3      	bne.n	8009a82 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a15      	ldr	r2, [pc, #84]	; (8009b14 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009abe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	e853 3f00 	ldrex	r3, [r3]
 8009acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f043 0320 	orr.w	r3, r3, #32
 8009ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ae2:	61fb      	str	r3, [r7, #28]
 8009ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae6:	69b9      	ldr	r1, [r7, #24]
 8009ae8:	69fa      	ldr	r2, [r7, #28]
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	617b      	str	r3, [r7, #20]
   return(result);
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1e4      	bne.n	8009ac0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009af6:	e007      	b.n	8009b08 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	699a      	ldr	r2, [r3, #24]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f042 0208 	orr.w	r2, r2, #8
 8009b06:	619a      	str	r2, [r3, #24]
}
 8009b08:	bf00      	nop
 8009b0a:	37b8      	adds	r7, #184	; 0xb8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	40008000 	.word	0x40008000
 8009b14:	08009299 	.word	0x08009299

08009b18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d101      	bne.n	8009b6a <HAL_UARTEx_DisableFifoMode+0x16>
 8009b66:	2302      	movs	r3, #2
 8009b68:	e027      	b.n	8009bba <HAL_UARTEx_DisableFifoMode+0x66>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2224      	movs	r2, #36	; 0x24
 8009b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0201 	bic.w	r2, r2, #1
 8009b90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2220      	movs	r2, #32
 8009bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d101      	bne.n	8009bde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bda:	2302      	movs	r3, #2
 8009bdc:	e02d      	b.n	8009c3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2224      	movs	r2, #36	; 0x24
 8009bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f022 0201 	bic.w	r2, r2, #1
 8009c04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f850 	bl	8009cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d101      	bne.n	8009c5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c56:	2302      	movs	r3, #2
 8009c58:	e02d      	b.n	8009cb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2224      	movs	r2, #36	; 0x24
 8009c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 0201 	bic.w	r2, r2, #1
 8009c80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f812 	bl	8009cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
	...

08009cc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d108      	bne.n	8009ce2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ce0:	e031      	b.n	8009d46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ce2:	2308      	movs	r3, #8
 8009ce4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ce6:	2308      	movs	r3, #8
 8009ce8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	0e5b      	lsrs	r3, r3, #25
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	f003 0307 	and.w	r3, r3, #7
 8009cf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	0f5b      	lsrs	r3, r3, #29
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	f003 0307 	and.w	r3, r3, #7
 8009d08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	7b3a      	ldrb	r2, [r7, #12]
 8009d0e:	4911      	ldr	r1, [pc, #68]	; (8009d54 <UARTEx_SetNbDataToProcess+0x94>)
 8009d10:	5c8a      	ldrb	r2, [r1, r2]
 8009d12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d16:	7b3a      	ldrb	r2, [r7, #12]
 8009d18:	490f      	ldr	r1, [pc, #60]	; (8009d58 <UARTEx_SetNbDataToProcess+0x98>)
 8009d1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	7b7a      	ldrb	r2, [r7, #13]
 8009d2c:	4909      	ldr	r1, [pc, #36]	; (8009d54 <UARTEx_SetNbDataToProcess+0x94>)
 8009d2e:	5c8a      	ldrb	r2, [r1, r2]
 8009d30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d34:	7b7a      	ldrb	r2, [r7, #13]
 8009d36:	4908      	ldr	r1, [pc, #32]	; (8009d58 <UARTEx_SetNbDataToProcess+0x98>)
 8009d38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d46:	bf00      	nop
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	0800ed10 	.word	0x0800ed10
 8009d58:	0800ed18 	.word	0x0800ed18

08009d5c <otCoapNewMessage>:
#if OPENTHREAD_CONFIG_COAP_API_ENABLE

extern otCoapRequestHandler defaultCoapRequestHandlerCb;

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009d66:	f7f7 fb23 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d6a:	f7f7 fab3 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 8009d6e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f062 0208 	orn	r2, r2, #8
 8009d78:	701a      	strb	r2, [r3, #0]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	705a      	strb	r2, [r3, #1]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	709a      	strb	r2, [r3, #2]
 8009d82:	2200      	movs	r2, #0
 8009d84:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f042 0201 	orr.w	r2, r2, #1
 8009d8e:	711a      	strb	r2, [r3, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	715a      	strb	r2, [r3, #5]
 8009d94:	2200      	movs	r2, #0
 8009d96:	719a      	strb	r2, [r3, #6]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009da2:	f7f7 fadf 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009da6:	f7f7 faa1 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 8009daa:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	689b      	ldr	r3, [r3, #8]

}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <otCoapMessageInit>:

void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	70fb      	strb	r3, [r7, #3]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	70bb      	strb	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8009dc8:	f7f7 faf2 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009dcc:	f7f7 fa82 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 8009dd0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f062 0228 	orn	r2, r2, #40	; 0x28
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	705a      	strb	r2, [r3, #1]
 8009de0:	2200      	movs	r2, #0
 8009de2:	709a      	strb	r2, [r3, #2]
 8009de4:	2200      	movs	r2, #0
 8009de6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f042 0203 	orr.w	r2, r2, #3
 8009df0:	711a      	strb	r2, [r3, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	715a      	strb	r2, [r3, #5]
 8009df6:	2200      	movs	r2, #0
 8009df8:	719a      	strb	r2, [r3, #6]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aType;
 8009e04:	78fa      	ldrb	r2, [r7, #3]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aCode;
 8009e0a:	78ba      	ldrb	r2, [r7, #2]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8009e10:	f7f7 faa8 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e14:	f7f7 fa6a 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e18:	60f8      	str	r0, [r7, #12]
}
 8009e1a:	bf00      	nop
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <otCoapMessageInitResponse>:

otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aType, otCoapCode aCode)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b086      	sub	sp, #24
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	60b9      	str	r1, [r7, #8]
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	461a      	mov	r2, r3
 8009e30:	460b      	mov	r3, r1
 8009e32:	71fb      	strb	r3, [r7, #7]
 8009e34:	4613      	mov	r3, r2
 8009e36:	71bb      	strb	r3, [r7, #6]
  Pre_OtCmdProcessing();
 8009e38:	f7f7 faba 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e3c:	f7f7 fa4a 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 8009e40:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT_RESPONSE;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f062 0227 	orn	r2, r2, #39	; 0x27
 8009e4a:	701a      	strb	r2, [r3, #0]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	705a      	strb	r2, [r3, #1]
 8009e50:	2200      	movs	r2, #0
 8009e52:	709a      	strb	r2, [r3, #2]
 8009e54:	2200      	movs	r2, #0
 8009e56:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f042 0204 	orr.w	r2, r2, #4
 8009e60:	711a      	strb	r2, [r3, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	715a      	strb	r2, [r3, #5]
 8009e66:	2200      	movs	r2, #0
 8009e68:	719a      	strb	r2, [r3, #6]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResponse;
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aRequest;
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aType;
 8009e7a:	79fa      	ldrb	r2, [r7, #7]
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aCode;
 8009e80:	79ba      	ldrb	r2, [r7, #6]
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8009e86:	f7f7 fa6d 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e8a:	f7f7 fa2f 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e8e:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	b2db      	uxtb	r3, r3
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <otCoapMessageSetToken>:

otError otCoapMessageSetToken(otMessage *aMessage, const uint8_t *aToken, uint8_t aTokenLength)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b086      	sub	sp, #24
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	71fb      	strb	r3, [r7, #7]
  Pre_OtCmdProcessing();
 8009eac:	f7f7 fa80 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009eb0:	f7f7 fa10 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 8009eb4:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_TOKEN;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f062 0226 	orn	r2, r2, #38	; 0x26
 8009ebe:	701a      	strb	r2, [r3, #0]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	705a      	strb	r2, [r3, #1]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	709a      	strb	r2, [r3, #2]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f042 0203 	orr.w	r2, r2, #3
 8009ed4:	711a      	strb	r2, [r3, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	715a      	strb	r2, [r3, #5]
 8009eda:	2200      	movs	r2, #0
 8009edc:	719a      	strb	r2, [r3, #6]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aToken;
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTokenLength;
 8009eee:	79fa      	ldrb	r2, [r7, #7]
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8009ef4:	f7f7 fa36 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ef8:	f7f7 f9f8 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 8009efc:	6178      	str	r0, [r7, #20]
  return (otError) p_ot_req->Data[0];
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	b2db      	uxtb	r3, r3
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3718      	adds	r7, #24
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <otCoapMessageGenerateToken>:

void otCoapMessageGenerateToken(otMessage *aMessage, uint8_t aTokenLength)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8009f18:	f7f7 fa4a 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f1c:	f7f7 f9da 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 8009f20:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GENERATE_TOKEN;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f062 0225 	orn	r2, r2, #37	; 0x25
 8009f2a:	701a      	strb	r2, [r3, #0]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	705a      	strb	r2, [r3, #1]
 8009f30:	2200      	movs	r2, #0
 8009f32:	709a      	strb	r2, [r3, #2]
 8009f34:	2200      	movs	r2, #0
 8009f36:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f042 0202 	orr.w	r2, r2, #2
 8009f40:	711a      	strb	r2, [r3, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	715a      	strb	r2, [r3, #5]
 8009f46:	2200      	movs	r2, #0
 8009f48:	719a      	strb	r2, [r3, #6]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8009f54:	78fa      	ldrb	r2, [r7, #3]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8009f5a:	f7f7 fa03 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f5e:	f7f7 f9c5 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f62:	60f8      	str	r0, [r7, #12]
}
 8009f64:	bf00      	nop
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <otCoapMessageAppendUriPathOptions>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009f76:	f7f7 fa1b 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f7a:	f7f7 f9ab 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 8009f7e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_APPEND_URI_PATH_OPTIONS;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f062 0220 	orn	r2, r2, #32
 8009f88:	701a      	strb	r2, [r3, #0]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	705a      	strb	r2, [r3, #1]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	709a      	strb	r2, [r3, #2]
 8009f92:	2200      	movs	r2, #0
 8009f94:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f042 0202 	orr.w	r2, r2, #2
 8009f9e:	711a      	strb	r2, [r3, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	715a      	strb	r2, [r3, #5]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	719a      	strb	r2, [r3, #6]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aUriPath;
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8009fb8:	f7f7 f9d4 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009fbc:	f7f7 f996 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 8009fc0:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	b2db      	uxtb	r3, r3
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009fd8:	f7f7 f9ea 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009fdc:	f7f7 f97a 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 8009fe0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f062 0219 	orn	r2, r2, #25
 8009fea:	701a      	strb	r2, [r3, #0]
 8009fec:	2200      	movs	r2, #0
 8009fee:	705a      	strb	r2, [r3, #1]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	709a      	strb	r2, [r3, #2]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f042 0201 	orr.w	r2, r2, #1
 800a000:	711a      	strb	r2, [r3, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	715a      	strb	r2, [r3, #5]
 800a006:	2200      	movs	r2, #0
 800a008:	719a      	strb	r2, [r3, #6]
 800a00a:	2200      	movs	r2, #0
 800a00c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a014:	f7f7 f9a6 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a018:	f7f7 f968 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a01c:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	b2db      	uxtb	r3, r3
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <otCoapMessageGetCode>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otCoapType)p_ot_req->Data[0];
}

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a034:	f7f7 f9bc 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a038:	f7f7 f94c 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a03c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f062 0217 	orn	r2, r2, #23
 800a046:	701a      	strb	r2, [r3, #0]
 800a048:	2200      	movs	r2, #0
 800a04a:	705a      	strb	r2, [r3, #1]
 800a04c:	2200      	movs	r2, #0
 800a04e:	709a      	strb	r2, [r3, #2]
 800a050:	2200      	movs	r2, #0
 800a052:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	f042 0201 	orr.w	r2, r2, #1
 800a05c:	711a      	strb	r2, [r3, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	715a      	strb	r2, [r3, #5]
 800a062:	2200      	movs	r2, #0
 800a064:	719a      	strb	r2, [r3, #6]
 800a066:	2200      	movs	r2, #0
 800a068:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a070:	f7f7 f978 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a074:	f7f7 f93a 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a078:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	b2db      	uxtb	r3, r3
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <otCoapMessageSetCode>:

void otCoapMessageSetCode(otMessage *aMessage, otCoapCode aCode)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a094:	f7f7 f98c 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a098:	f7f7 f91c 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a09c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_CODE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f062 0216 	orn	r2, r2, #22
 800a0a6:	701a      	strb	r2, [r3, #0]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	705a      	strb	r2, [r3, #1]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	709a      	strb	r2, [r3, #2]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f042 0202 	orr.w	r2, r2, #2
 800a0bc:	711a      	strb	r2, [r3, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	715a      	strb	r2, [r3, #5]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	719a      	strb	r2, [r3, #6]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aCode;
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a0d6:	f7f7 f945 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a0da:	f7f7 f907 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a0de:	60f8      	str	r0, [r7, #12]
}
 800a0e0:	bf00      	nop
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <otCoapMessageGetTokenLength>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t)p_ot_req->Data[0];
}

uint8_t otCoapMessageGetTokenLength(const otMessage *aMessage)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a0f0:	f7f7 f95e 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a0f4:	f7f7 f8ee 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a0f8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN_LENGTH;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f062 0213 	orn	r2, r2, #19
 800a102:	701a      	strb	r2, [r3, #0]
 800a104:	2200      	movs	r2, #0
 800a106:	705a      	strb	r2, [r3, #1]
 800a108:	2200      	movs	r2, #0
 800a10a:	709a      	strb	r2, [r3, #2]
 800a10c:	2200      	movs	r2, #0
 800a10e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f042 0201 	orr.w	r2, r2, #1
 800a118:	711a      	strb	r2, [r3, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	715a      	strb	r2, [r3, #5]
 800a11e:	2200      	movs	r2, #0
 800a120:	719a      	strb	r2, [r3, #6]
 800a122:	2200      	movs	r2, #0
 800a124:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a12c:	f7f7 f91a 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a130:	f7f7 f8dc 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a134:	60f8      	str	r0, [r7, #12]
  return (uint8_t)p_ot_req->Data[0];
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	b2db      	uxtb	r3, r3
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <otCoapMessageGetToken>:

const uint8_t *otCoapMessageGetToken(const otMessage *aMessage)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a14c:	f7f7 f930 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a150:	f7f7 f8c0 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a154:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TOKEN;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	f062 0212 	orn	r2, r2, #18
 800a15e:	701a      	strb	r2, [r3, #0]
 800a160:	2200      	movs	r2, #0
 800a162:	705a      	strb	r2, [r3, #1]
 800a164:	2200      	movs	r2, #0
 800a166:	709a      	strb	r2, [r3, #2]
 800a168:	2200      	movs	r2, #0
 800a16a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	f042 0201 	orr.w	r2, r2, #1
 800a174:	711a      	strb	r2, [r3, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	715a      	strb	r2, [r3, #5]
 800a17a:	2200      	movs	r2, #0
 800a17c:	719a      	strb	r2, [r3, #6]
 800a17e:	2200      	movs	r2, #0
 800a180:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a188:	f7f7 f8ec 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a18c:	f7f7 f8ae 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a190:	60f8      	str	r0, [r7, #12]
  return (uint8_t *)p_ot_req->Data[0];
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	689b      	ldr	r3, [r3, #8]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <otCoapSendRequestWithParameters>:
                                        otMessage *               aMessage,
                                        const otMessageInfo *     aMessageInfo,
                                        otCoapResponseHandler     aHandler,
                                        void *                    aContext,
                                        const otCoapTxParameters *aTxParameters)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b086      	sub	sp, #24
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	60b9      	str	r1, [r7, #8]
 800a1a8:	607a      	str	r2, [r7, #4]
 800a1aa:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 800a1ac:	f7f7 f900 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a1b0:	f7f7 f890 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a1b4:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST_WITH_PARAMETERS;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f062 0209 	orn	r2, r2, #9
 800a1be:	701a      	strb	r2, [r3, #0]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	705a      	strb	r2, [r3, #1]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	709a      	strb	r2, [r3, #2]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=5;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f042 0205 	orr.w	r2, r2, #5
 800a1d4:	711a      	strb	r2, [r3, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	715a      	strb	r2, [r3, #5]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	719a      	strb	r2, [r3, #6]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aHandler;
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aContext;
 800a1f4:	6a3a      	ldr	r2, [r7, #32]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	615a      	str	r2, [r3, #20]
  p_ot_req->Data[4] = (uint32_t) aTxParameters;
 800a1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	619a      	str	r2, [r3, #24]

  Ot_Cmd_Transfer();
 800a200:	f7f7 f8b0 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a204:	f7f7 f872 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a208:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	b2db      	uxtb	r3, r3
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800a224:	f7f7 f8c4 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a228:	f7f7 f854 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a22c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f062 0207 	orn	r2, r2, #7
 800a236:	701a      	strb	r2, [r3, #0]
 800a238:	2200      	movs	r2, #0
 800a23a:	705a      	strb	r2, [r3, #1]
 800a23c:	2200      	movs	r2, #0
 800a23e:	709a      	strb	r2, [r3, #2]
 800a240:	2200      	movs	r2, #0
 800a242:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f042 0201 	orr.w	r2, r2, #1
 800a24c:	711a      	strb	r2, [r3, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	715a      	strb	r2, [r3, #5]
 800a252:	2200      	movs	r2, #0
 800a254:	719a      	strb	r2, [r3, #6]
 800a256:	2200      	movs	r2, #0
 800a258:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 800a25a:	887a      	ldrh	r2, [r7, #2]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a260:	f7f7 f880 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a264:	f7f7 f842 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a268:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	b2db      	uxtb	r3, r3
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}
#endif

void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a282:	f7f7 f895 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a286:	f7f7 f825 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a28a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2200      	movs	r2, #0
 800a290:	f062 0203 	orn	r2, r2, #3
 800a294:	701a      	strb	r2, [r3, #0]
 800a296:	2200      	movs	r2, #0
 800a298:	705a      	strb	r2, [r3, #1]
 800a29a:	2200      	movs	r2, #0
 800a29c:	709a      	strb	r2, [r3, #2]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f042 0201 	orr.w	r2, r2, #1
 800a2aa:	711a      	strb	r2, [r3, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	715a      	strb	r2, [r3, #5]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	719a      	strb	r2, [r3, #6]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a2be:	f7f7 f851 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a2c2:	f7f7 f813 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a2c6:	60f8      	str	r0, [r7, #12]
}
 800a2c8:	bf00      	nop
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <otCoapSendResponseWithParameters>:

otError otCoapSendResponseWithParameters(otInstance *              aInstance,
                                         otMessage *               aMessage,
                                         const otMessageInfo *     aMessageInfo,
                                         const otCoapTxParameters *aTxParameters)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 800a2de:	f7f7 f867 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a2e2:	f7f6 fff7 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a2e6:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE_WITH_PARAMETERS;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	701a      	strb	r2, [r3, #0]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f042 0201 	orr.w	r2, r2, #1
 800a2f4:	705a      	strb	r2, [r3, #1]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	709a      	strb	r2, [r3, #2]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	2200      	movs	r2, #0
 800a302:	f042 0203 	orr.w	r2, r2, #3
 800a306:	711a      	strb	r2, [r3, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	715a      	strb	r2, [r3, #5]
 800a30c:	2200      	movs	r2, #0
 800a30e:	719a      	strb	r2, [r3, #6]
 800a310:	2200      	movs	r2, #0
 800a312:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aTxParameters;
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800a326:	f7f7 f81d 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a32a:	f7f6 ffdf 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a32e:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	b2db      	uxtb	r3, r3
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b082      	sub	sp, #8
 800a342:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 800a344:	f7f7 f834 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a348:	f7f6 ffc4 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a34c:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f062 0235 	orn	r2, r2, #53	; 0x35
 800a356:	701a      	strb	r2, [r3, #0]
 800a358:	2200      	movs	r2, #0
 800a35a:	705a      	strb	r2, [r3, #1]
 800a35c:	2200      	movs	r2, #0
 800a35e:	709a      	strb	r2, [r3, #2]
 800a360:	2200      	movs	r2, #0
 800a362:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	711a      	strb	r2, [r3, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	715a      	strb	r2, [r3, #5]
 800a36e:	2200      	movs	r2, #0
 800a370:	719a      	strb	r2, [r3, #6]
 800a372:	2200      	movs	r2, #0
 800a374:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a376:	f7f6 fff5 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a37a:	f7f6 ffb7 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a37e:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <otInstanceFinalize>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a394:	f7f7 f80c 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a398:	f7f6 ff9c 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a39c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f062 0233 	orn	r2, r2, #51	; 0x33
 800a3a6:	701a      	strb	r2, [r3, #0]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	705a      	strb	r2, [r3, #1]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	709a      	strb	r2, [r3, #2]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	711a      	strb	r2, [r3, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	715a      	strb	r2, [r3, #5]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	719a      	strb	r2, [r3, #6]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a3c6:	f7f6 ffcd 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a3ca:	f7f6 ff8f 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a3ce:	60f8      	str	r0, [r7, #12]
}
 800a3d0:	bf00      	nop
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <otSetStateChangedCallback>:
#endif

#if OPENTHREAD_MTD || OPENTHREAD_FTD
otError otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
    void *aContext)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 800a3e4:	f7f6 ffe4 	bl	80013b0 <Pre_OtCmdProcessing>
  /* Store the callback function */
  otStateChangedCb = aCallback;
 800a3e8:	4a15      	ldr	r2, [pc, #84]	; (800a440 <otSetStateChangedCallback+0x68>)
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	6013      	str	r3, [r2, #0]
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a3ee:	f7f6 ff71 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a3f2:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f062 0232 	orn	r2, r2, #50	; 0x32
 800a3fc:	701a      	strb	r2, [r3, #0]
 800a3fe:	2200      	movs	r2, #0
 800a400:	705a      	strb	r2, [r3, #1]
 800a402:	2200      	movs	r2, #0
 800a404:	709a      	strb	r2, [r3, #2]
 800a406:	2200      	movs	r2, #0
 800a408:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f042 0201 	orr.w	r2, r2, #1
 800a412:	711a      	strb	r2, [r3, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	715a      	strb	r2, [r3, #5]
 800a418:	2200      	movs	r2, #0
 800a41a:	719a      	strb	r2, [r3, #6]
 800a41c:	2200      	movs	r2, #0
 800a41e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aContext;
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a426:	f7f6 ff9d 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a42a:	f7f6 ff5f 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a42e:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	b2db      	uxtb	r3, r3
}
 800a436:	4618      	mov	r0, r3
 800a438:	3718      	adds	r7, #24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20000798 	.word	0x20000798

0800a444 <otInstanceErasePersistentInfo>:

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a44c:	f7f6 ffb0 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a450:	f7f6 ff40 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a454:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f062 022c 	orn	r2, r2, #44	; 0x2c
 800a45e:	701a      	strb	r2, [r3, #0]
 800a460:	2200      	movs	r2, #0
 800a462:	705a      	strb	r2, [r3, #1]
 800a464:	2200      	movs	r2, #0
 800a466:	709a      	strb	r2, [r3, #2]
 800a468:	2200      	movs	r2, #0
 800a46a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	711a      	strb	r2, [r3, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	715a      	strb	r2, [r3, #5]
 800a476:	2200      	movs	r2, #0
 800a478:	719a      	strb	r2, [r3, #6]
 800a47a:	2200      	movs	r2, #0
 800a47c:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a47e:	f7f6 ff71 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a482:	f7f6 ff33 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a486:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	b2db      	uxtb	r3, r3
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <otIp6SetEnabled>:
#if OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE
extern otIp6RegisterMulticastListenersCallback otIp6RegisterMulticastListenersCb;
#endif // OPENTHREAD_FTD && OPENTHREAD_CONFIG_TMF_PROXY_MLR_ENABLE && OPENTHREAD_CONFIG_COMMISSIONER_ENABLE

otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a4a2:	f7f6 ff85 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a4a6:	f7f6 ff15 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a4aa:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800a4b4:	701a      	strb	r2, [r3, #0]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	705a      	strb	r2, [r3, #1]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	709a      	strb	r2, [r3, #2]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f042 0201 	orr.w	r2, r2, #1
 800a4ca:	711a      	strb	r2, [r3, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	715a      	strb	r2, [r3, #5]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	719a      	strb	r2, [r3, #6]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a4d8:	78fa      	ldrb	r2, [r7, #3]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a4de:	f7f6 ff41 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a4e2:	f7f6 ff03 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a4e6:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	b2db      	uxtb	r3, r3
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

otError otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	460b      	mov	r3, r1
 800a500:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a502:	f7f6 ff55 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a506:	f7f6 fee5 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a50a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	f042 0207 	orr.w	r2, r2, #7
 800a514:	701a      	strb	r2, [r3, #0]
 800a516:	2200      	movs	r2, #0
 800a518:	705a      	strb	r2, [r3, #1]
 800a51a:	2200      	movs	r2, #0
 800a51c:	709a      	strb	r2, [r3, #2]
 800a51e:	2200      	movs	r2, #0
 800a520:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	f042 0201 	orr.w	r2, r2, #1
 800a52a:	711a      	strb	r2, [r3, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	715a      	strb	r2, [r3, #5]
 800a530:	2200      	movs	r2, #0
 800a532:	719a      	strb	r2, [r3, #6]
 800a534:	2200      	movs	r2, #0
 800a536:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800a538:	78fa      	ldrb	r2, [r7, #3]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a53e:	f7f6 ff11 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a542:	f7f6 fed3 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a546:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	b2db      	uxtb	r3, r3
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <otLinkGetFactoryAssignedIeeeEui64>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

void otLinkGetFactoryAssignedIeeeEui64(otInstance *aInstance, otExtAddress *aEui64)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a560:	f7f6 ff26 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a564:	f7f6 feb6 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a568:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_GET_FACTORY_ASSIGNED_EUI64;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f042 020c 	orr.w	r2, r2, #12
 800a572:	701a      	strb	r2, [r3, #0]
 800a574:	2200      	movs	r2, #0
 800a576:	705a      	strb	r2, [r3, #1]
 800a578:	2200      	movs	r2, #0
 800a57a:	709a      	strb	r2, [r3, #2]
 800a57c:	2200      	movs	r2, #0
 800a57e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f042 0201 	orr.w	r2, r2, #1
 800a588:	711a      	strb	r2, [r3, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	715a      	strb	r2, [r3, #5]
 800a58e:	2200      	movs	r2, #0
 800a590:	719a      	strb	r2, [r3, #6]
 800a592:	2200      	movs	r2, #0
 800a594:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEui64;
 800a596:	683a      	ldr	r2, [r7, #0]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a59c:	f7f6 fee2 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a5a0:	f7f6 fea4 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a5a4:	60f8      	str	r0, [r7, #12]
}
 800a5a6:	bf00      	nop
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

otError otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800a5ba:	f7f6 fef9 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a5be:	f7f6 fe89 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a5c2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f042 020e 	orr.w	r2, r2, #14
 800a5cc:	701a      	strb	r2, [r3, #0]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	705a      	strb	r2, [r3, #1]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	709a      	strb	r2, [r3, #2]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f042 0201 	orr.w	r2, r2, #1
 800a5e2:	711a      	strb	r2, [r3, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	715a      	strb	r2, [r3, #5]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	719a      	strb	r2, [r3, #6]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800a5f0:	887a      	ldrh	r2, [r7, #2]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a5f6:	f7f6 feb5 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a5fa:	f7f6 fe77 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a5fe:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	b2db      	uxtb	r3, r3
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a618:	f7f6 feca 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a61c:	f7f6 fe5a 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a620:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f042 0210 	orr.w	r2, r2, #16
 800a62a:	701a      	strb	r2, [r3, #0]
 800a62c:	2200      	movs	r2, #0
 800a62e:	705a      	strb	r2, [r3, #1]
 800a630:	2200      	movs	r2, #0
 800a632:	709a      	strb	r2, [r3, #2]
 800a634:	2200      	movs	r2, #0
 800a636:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f042 0201 	orr.w	r2, r2, #1
 800a640:	711a      	strb	r2, [r3, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	715a      	strb	r2, [r3, #5]
 800a646:	2200      	movs	r2, #0
 800a648:	719a      	strb	r2, [r3, #6]
 800a64a:	2200      	movs	r2, #0
 800a64c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a654:	f7f6 fe86 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a658:	f7f6 fe48 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a65c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	b2db      	uxtb	r3, r3
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a674:	f7f6 fe9c 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a678:	f7f6 fe2c 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a67c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f042 0216 	orr.w	r2, r2, #22
 800a686:	701a      	strb	r2, [r3, #0]
 800a688:	2200      	movs	r2, #0
 800a68a:	f042 0201 	orr.w	r2, r2, #1
 800a68e:	705a      	strb	r2, [r3, #1]
 800a690:	2200      	movs	r2, #0
 800a692:	709a      	strb	r2, [r3, #2]
 800a694:	2200      	movs	r2, #0
 800a696:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f042 0201 	orr.w	r2, r2, #1
 800a6a0:	711a      	strb	r2, [r3, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	715a      	strb	r2, [r3, #5]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	719a      	strb	r2, [r3, #6]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a6b4:	f7f6 fe56 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a6b8:	f7f6 fe18 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a6bc:	60f8      	str	r0, [r7, #12]
}
 800a6be:	bf00      	nop
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <otMessageGetOffset>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a6ce:	f7f6 fe6f 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a6d2:	f7f6 fdff 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a6d6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f042 0219 	orr.w	r2, r2, #25
 800a6e0:	701a      	strb	r2, [r3, #0]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f042 0201 	orr.w	r2, r2, #1
 800a6e8:	705a      	strb	r2, [r3, #1]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	709a      	strb	r2, [r3, #2]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f042 0201 	orr.w	r2, r2, #1
 800a6fa:	711a      	strb	r2, [r3, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	715a      	strb	r2, [r3, #5]
 800a700:	2200      	movs	r2, #0
 800a702:	719a      	strb	r2, [r3, #6]
 800a704:	2200      	movs	r2, #0
 800a706:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a70e:	f7f6 fe29 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a712:	f7f6 fdeb 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a716:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	b29b      	uxth	r3, r3
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <otMessageAppend>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b086      	sub	sp, #24
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	60f8      	str	r0, [r7, #12]
 800a72e:	60b9      	str	r1, [r7, #8]
 800a730:	4613      	mov	r3, r2
 800a732:	80fb      	strh	r3, [r7, #6]
  Pre_OtCmdProcessing();
 800a734:	f7f6 fe3c 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a738:	f7f6 fdcc 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a73c:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2200      	movs	r2, #0
 800a742:	f042 021e 	orr.w	r2, r2, #30
 800a746:	701a      	strb	r2, [r3, #0]
 800a748:	2200      	movs	r2, #0
 800a74a:	f042 0201 	orr.w	r2, r2, #1
 800a74e:	705a      	strb	r2, [r3, #1]
 800a750:	2200      	movs	r2, #0
 800a752:	709a      	strb	r2, [r3, #2]
 800a754:	2200      	movs	r2, #0
 800a756:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f042 0203 	orr.w	r2, r2, #3
 800a760:	711a      	strb	r2, [r3, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	715a      	strb	r2, [r3, #5]
 800a766:	2200      	movs	r2, #0
 800a768:	719a      	strb	r2, [r3, #6]
 800a76a:	2200      	movs	r2, #0
 800a76c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aBuf;
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aLength;
 800a77a:	88fa      	ldrh	r2, [r7, #6]
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800a780:	f7f6 fdf0 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a784:	f7f6 fdb2 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a788:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	b2db      	uxtb	r3, r3
}
 800a790:	4618      	mov	r0, r3
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	607a      	str	r2, [r7, #4]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	817b      	strh	r3, [r7, #10]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	813b      	strh	r3, [r7, #8]
  Pre_OtCmdProcessing();
 800a7ac:	f7f6 fe00 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a7b0:	f7f6 fd90 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800a7b4:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f042 021f 	orr.w	r2, r2, #31
 800a7be:	701a      	strb	r2, [r3, #0]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f042 0201 	orr.w	r2, r2, #1
 800a7c6:	705a      	strb	r2, [r3, #1]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	709a      	strb	r2, [r3, #2]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f042 0204 	orr.w	r2, r2, #4
 800a7d8:	711a      	strb	r2, [r3, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	715a      	strb	r2, [r3, #5]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	719a      	strb	r2, [r3, #6]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aOffset;
 800a7ec:	897a      	ldrh	r2, [r7, #10]
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aBuf;
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aLength;
 800a7f8:	893a      	ldrh	r2, [r7, #8]
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800a7fe:	f7f6 fdb1 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a802:	f7f6 fd73 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800a806:	6178      	str	r0, [r7, #20]
  return (uint16_t)p_ot_req->Data[0];
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	b29b      	uxth	r3, r3
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3718      	adds	r7, #24
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800a818:	b5b0      	push	{r4, r5, r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800a822:	f7f6 fd6f 	bl	8001304 <THREAD_Get_NotificationPayloadBuffer>
 800a826:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	2b48      	cmp	r3, #72	; 0x48
 800a830:	f200 8543 	bhi.w	800b2ba <OpenThread_CallBack_Processing+0xaa2>
 800a834:	a201      	add	r2, pc, #4	; (adr r2, 800a83c <OpenThread_CallBack_Processing+0x24>)
 800a836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83a:	bf00      	nop
 800a83c:	0800aba7 	.word	0x0800aba7
 800a840:	0800ac5f 	.word	0x0800ac5f
 800a844:	0800acb7 	.word	0x0800acb7
 800a848:	0800ad63 	.word	0x0800ad63
 800a84c:	0800ad6f 	.word	0x0800ad6f
 800a850:	0800ad8d 	.word	0x0800ad8d
 800a854:	0800b2bb 	.word	0x0800b2bb
 800a858:	0800adb7 	.word	0x0800adb7
 800a85c:	0800add1 	.word	0x0800add1
 800a860:	0800ae05 	.word	0x0800ae05
 800a864:	0800ae23 	.word	0x0800ae23
 800a868:	0800ae41 	.word	0x0800ae41
 800a86c:	0800b2bb 	.word	0x0800b2bb
 800a870:	0800ae6b 	.word	0x0800ae6b
 800a874:	0800aecd 	.word	0x0800aecd
 800a878:	0800aef3 	.word	0x0800aef3
 800a87c:	0800af13 	.word	0x0800af13
 800a880:	0800af31 	.word	0x0800af31
 800a884:	0800b2bb 	.word	0x0800b2bb
 800a888:	0800af59 	.word	0x0800af59
 800a88c:	0800af81 	.word	0x0800af81
 800a890:	0800b2bb 	.word	0x0800b2bb
 800a894:	0800af9f 	.word	0x0800af9f
 800a898:	0800afc3 	.word	0x0800afc3
 800a89c:	0800afed 	.word	0x0800afed
 800a8a0:	0800a9cd 	.word	0x0800a9cd
 800a8a4:	0800a9f1 	.word	0x0800a9f1
 800a8a8:	0800aa15 	.word	0x0800aa15
 800a8ac:	0800aa3f 	.word	0x0800aa3f
 800a8b0:	0800b2bb 	.word	0x0800b2bb
 800a8b4:	0800b00d 	.word	0x0800b00d
 800a8b8:	0800b2bb 	.word	0x0800b2bb
 800a8bc:	0800b2bb 	.word	0x0800b2bb
 800a8c0:	0800b2bb 	.word	0x0800b2bb
 800a8c4:	0800b2bb 	.word	0x0800b2bb
 800a8c8:	0800b2bb 	.word	0x0800b2bb
 800a8cc:	0800ac95 	.word	0x0800ac95
 800a8d0:	0800acf5 	.word	0x0800acf5
 800a8d4:	0800ad1b 	.word	0x0800ad1b
 800a8d8:	0800ad41 	.word	0x0800ad41
 800a8dc:	0800b02f 	.word	0x0800b02f
 800a8e0:	0800b06d 	.word	0x0800b06d
 800a8e4:	0800b085 	.word	0x0800b085
 800a8e8:	0800abc3 	.word	0x0800abc3
 800a8ec:	0800ac29 	.word	0x0800ac29
 800a8f0:	0800b2bb 	.word	0x0800b2bb
 800a8f4:	0800aa69 	.word	0x0800aa69
 800a8f8:	0800aa89 	.word	0x0800aa89
 800a8fc:	0800aaa9 	.word	0x0800aaa9
 800a900:	0800aac9 	.word	0x0800aac9
 800a904:	0800aaeb 	.word	0x0800aaeb
 800a908:	0800ab0d 	.word	0x0800ab0d
 800a90c:	0800b2bb 	.word	0x0800b2bb
 800a910:	0800b2bb 	.word	0x0800b2bb
 800a914:	0800a961 	.word	0x0800a961
 800a918:	0800a985 	.word	0x0800a985
 800a91c:	0800a9a9 	.word	0x0800a9a9
 800a920:	0800b2bb 	.word	0x0800b2bb
 800a924:	0800b2bb 	.word	0x0800b2bb
 800a928:	0800ab2f 	.word	0x0800ab2f
 800a92c:	0800ab4d 	.word	0x0800ab4d
 800a930:	0800b2bb 	.word	0x0800b2bb
 800a934:	0800ab7f 	.word	0x0800ab7f
 800a938:	0800ac41 	.word	0x0800ac41
 800a93c:	0800b0b3 	.word	0x0800b0b3
 800a940:	0800b0d1 	.word	0x0800b0d1
 800a944:	0800b0ef 	.word	0x0800b0ef
 800a948:	0800b16d 	.word	0x0800b16d
 800a94c:	0800b19b 	.word	0x0800b19b
 800a950:	0800b1df 	.word	0x0800b1df
 800a954:	0800b249 	.word	0x0800b249
 800a958:	0800b287 	.word	0x0800b287
 800a95c:	0800b213 	.word	0x0800b213
  {
  case MSG_M0TOM4_BACKBONE_ROUTER_DOMAIN_PREFIX_CB:
    if (otBackboneRouterDomainPrefixCb != NULL)
 800a960:	4b9f      	ldr	r3, [pc, #636]	; (800abe0 <OpenThread_CallBack_Processing+0x3c8>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 84ab 	beq.w	800b2c0 <OpenThread_CallBack_Processing+0xaa8>
    {
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800a96a:	4b9d      	ldr	r3, [pc, #628]	; (800abe0 <OpenThread_CallBack_Processing+0x3c8>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	6892      	ldr	r2, [r2, #8]
 800a972:	4610      	mov	r0, r2
          (otBackboneRouterDomainPrefixEvent) p_notification->Data[1],
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800a978:	b2d1      	uxtb	r1, r2
          (const otIp6Prefix *) p_notification->Data[2]);
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterDomainPrefixCb((void*) p_notification->Data[0],
 800a97e:	4798      	blx	r3
    }
    break;
 800a980:	f000 bc9e 	b.w	800b2c0 <OpenThread_CallBack_Processing+0xaa8>
  case MSG_M0TOM4_BACKBONE_ROUTER_MULTICAST_LISTENER_CB:
    if (otBackboneRouterMulticastListenerCb != NULL)
 800a984:	4b97      	ldr	r3, [pc, #604]	; (800abe4 <OpenThread_CallBack_Processing+0x3cc>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 849b 	beq.w	800b2c4 <OpenThread_CallBack_Processing+0xaac>
    {
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800a98e:	4b95      	ldr	r3, [pc, #596]	; (800abe4 <OpenThread_CallBack_Processing+0x3cc>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	6892      	ldr	r2, [r2, #8]
 800a996:	4610      	mov	r0, r2
          (otBackboneRouterMulticastListenerEvent) p_notification->Data[1],
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800a99c:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterMulticastListenerCb((void*) p_notification->Data[0],
 800a9a2:	4798      	blx	r3
    }
    break;
 800a9a4:	f000 bc8e 	b.w	800b2c4 <OpenThread_CallBack_Processing+0xaac>
  case MSG_M0TOM4_BACKBONE_ROUTER_ND_PROXY_CB:
    if (otBackboneRouterNdProxyCb != NULL)
 800a9a8:	4b8f      	ldr	r3, [pc, #572]	; (800abe8 <OpenThread_CallBack_Processing+0x3d0>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 848b 	beq.w	800b2c8 <OpenThread_CallBack_Processing+0xab0>
    {
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800a9b2:	4b8d      	ldr	r3, [pc, #564]	; (800abe8 <OpenThread_CallBack_Processing+0x3d0>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	6892      	ldr	r2, [r2, #8]
 800a9ba:	4610      	mov	r0, r2
          (otBackboneRouterNdProxyEvent) p_notification->Data[1],
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	68d2      	ldr	r2, [r2, #12]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800a9c0:	b2d1      	uxtb	r1, r2
          (const otIp6Address *) p_notification->Data[2]);
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	6912      	ldr	r2, [r2, #16]
      otBackboneRouterNdProxyCb((void*) p_notification->Data[0],
 800a9c6:	4798      	blx	r3
    }
    break;
 800a9c8:	f000 bc7e 	b.w	800b2c8 <OpenThread_CallBack_Processing+0xab0>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_ENHACK_PROBING_CB:
    if (otLinkMetricsMgmtResponseCb1 != NULL)
 800a9cc:	4b87      	ldr	r3, [pc, #540]	; (800abec <OpenThread_CallBack_Processing+0x3d4>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 847b 	beq.w	800b2cc <OpenThread_CallBack_Processing+0xab4>
    {
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800a9d6:	4b85      	ldr	r3, [pc, #532]	; (800abec <OpenThread_CallBack_Processing+0x3d4>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	6892      	ldr	r2, [r2, #8]
 800a9de:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800a9e4:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb1((const otIp6Address *) p_notification->Data[0],
 800a9ea:	4798      	blx	r3
    }
    break;
 800a9ec:	f000 bc6e 	b.w	800b2cc <OpenThread_CallBack_Processing+0xab4>
  case MSG_M0TOM4_LINK_METRICS_MGMT_RESPONSE_CB:
    if (otLinkMetricsMgmtResponseCb != NULL)
 800a9f0:	4b7f      	ldr	r3, [pc, #508]	; (800abf0 <OpenThread_CallBack_Processing+0x3d8>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 846b 	beq.w	800b2d0 <OpenThread_CallBack_Processing+0xab8>
    {
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800a9fa:	4b7d      	ldr	r3, [pc, #500]	; (800abf0 <OpenThread_CallBack_Processing+0x3d8>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	6892      	ldr	r2, [r2, #8]
 800aa02:	4610      	mov	r0, r2
          (uint8_t) p_notification->Data[1],
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	68d2      	ldr	r2, [r2, #12]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800aa08:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	6912      	ldr	r2, [r2, #16]
      otLinkMetricsMgmtResponseCb((const otIp6Address *) p_notification->Data[0],
 800aa0e:	4798      	blx	r3
    }
    break;
 800aa10:	f000 bc5e 	b.w	800b2d0 <OpenThread_CallBack_Processing+0xab8>
  case MSG_M0TOM4_LINK_METRICS_ENHACK_PROBING_IE_REPORT_CB:
    if (otLinkMetricsEnhAckProbingIeReportCb != NULL)
 800aa14:	4b77      	ldr	r3, [pc, #476]	; (800abf4 <OpenThread_CallBack_Processing+0x3dc>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 845b 	beq.w	800b2d4 <OpenThread_CallBack_Processing+0xabc>
    {
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800aa1e:	4b75      	ldr	r3, [pc, #468]	; (800abf4 <OpenThread_CallBack_Processing+0x3dc>)
 800aa20:	681c      	ldr	r4, [r3, #0]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	b298      	uxth	r0, r3
          (const otExtAddress *) p_notification->Data[1],
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800aa2c:	4619      	mov	r1, r3
          (const otLinkMetricsValues *) p_notification->Data[2],
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800aa32:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsEnhAckProbingIeReportCb((otShortAddress) p_notification->Data[0],
 800aa38:	47a0      	blx	r4
    }
    break;
 800aa3a:	f000 bc4b 	b.w	800b2d4 <OpenThread_CallBack_Processing+0xabc>
  case MSG_M0TOM4_LINK_METRICS_REPORT_CB:
    if (otLinkMetricsReportCb != NULL)
 800aa3e:	4b6e      	ldr	r3, [pc, #440]	; (800abf8 <OpenThread_CallBack_Processing+0x3e0>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 8448 	beq.w	800b2d8 <OpenThread_CallBack_Processing+0xac0>
    {
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800aa48:	4b6b      	ldr	r3, [pc, #428]	; (800abf8 <OpenThread_CallBack_Processing+0x3e0>)
 800aa4a:	681c      	ldr	r4, [r3, #0]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	4618      	mov	r0, r3
          (const otLinkMetricsValues *) p_notification->Data[1],
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	68db      	ldr	r3, [r3, #12]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800aa56:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	691b      	ldr	r3, [r3, #16]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800aa5c:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	695b      	ldr	r3, [r3, #20]
      otLinkMetricsReportCb((const otIp6Address *) p_notification->Data[0],
 800aa62:	47a0      	blx	r4
    }
    break;
 800aa64:	f000 bc38 	b.w	800b2d8 <OpenThread_CallBack_Processing+0xac0>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_ACTIVE:
    if (otDatasetMgmtSetActiveCb != NULL)
 800aa68:	4b64      	ldr	r3, [pc, #400]	; (800abfc <OpenThread_CallBack_Processing+0x3e4>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 8435 	beq.w	800b2dc <OpenThread_CallBack_Processing+0xac4>
    {
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800aa72:	4b62      	ldr	r3, [pc, #392]	; (800abfc <OpenThread_CallBack_Processing+0x3e4>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	6892      	ldr	r2, [r2, #8]
 800aa7a:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetActiveCb((otError) p_notification->Data[0],
 800aa80:	4611      	mov	r1, r2
 800aa82:	4798      	blx	r3
    }
    break;
 800aa84:	f000 bc2a 	b.w	800b2dc <OpenThread_CallBack_Processing+0xac4>
  case MSG_M0TOM4_DATASET_MGMT_SET_CALLBACK_PENDING:
    if (otDatasetMgmtSetPendingCb != NULL)
 800aa88:	4b5d      	ldr	r3, [pc, #372]	; (800ac00 <OpenThread_CallBack_Processing+0x3e8>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 8427 	beq.w	800b2e0 <OpenThread_CallBack_Processing+0xac8>
    {
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800aa92:	4b5b      	ldr	r3, [pc, #364]	; (800ac00 <OpenThread_CallBack_Processing+0x3e8>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	6892      	ldr	r2, [r2, #8]
 800aa9a:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	68d2      	ldr	r2, [r2, #12]
      otDatasetMgmtSetPendingCb((otError) p_notification->Data[0],
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	4798      	blx	r3
    }
    break;
 800aaa4:	f000 bc1c 	b.w	800b2e0 <OpenThread_CallBack_Processing+0xac8>
  case MSG_M0TOM4_DATASET_UPDATER_CB:
    if (otDatasetUpdaterCb != NULL)
 800aaa8:	4b56      	ldr	r3, [pc, #344]	; (800ac04 <OpenThread_CallBack_Processing+0x3ec>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f000 8419 	beq.w	800b2e4 <OpenThread_CallBack_Processing+0xacc>
    {
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800aab2:	4b54      	ldr	r3, [pc, #336]	; (800ac04 <OpenThread_CallBack_Processing+0x3ec>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	6892      	ldr	r2, [r2, #8]
 800aaba:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	68d2      	ldr	r2, [r2, #12]
      otDatasetUpdaterCb((otError) p_notification->Data[0],
 800aac0:	4611      	mov	r1, r2
 800aac2:	4798      	blx	r3
    }
    break;
 800aac4:	f000 bc0e 	b.w	800b2e4 <OpenThread_CallBack_Processing+0xacc>
  case MSG_M0TOM4_DNS_BROWSE_CB:
    if (otDnsBrowseCb != NULL)
 800aac8:	4b4f      	ldr	r3, [pc, #316]	; (800ac08 <OpenThread_CallBack_Processing+0x3f0>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f000 840b 	beq.w	800b2e8 <OpenThread_CallBack_Processing+0xad0>
    {
      otDnsBrowseCb((otError) p_notification->Data[0],
 800aad2:	4b4d      	ldr	r3, [pc, #308]	; (800ac08 <OpenThread_CallBack_Processing+0x3f0>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	6892      	ldr	r2, [r2, #8]
 800aada:	b2d0      	uxtb	r0, r2
          (const otDnsBrowseResponse *) p_notification->Data[1],
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	68d2      	ldr	r2, [r2, #12]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800aae0:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	6912      	ldr	r2, [r2, #16]
      otDnsBrowseCb((otError) p_notification->Data[0],
 800aae6:	4798      	blx	r3
    }
    break;
 800aae8:	e3fe      	b.n	800b2e8 <OpenThread_CallBack_Processing+0xad0>
  case MSG_M0TOM4_DNS_ADDRESS_CB:
    if (otDnsAddressCb != NULL)
 800aaea:	4b48      	ldr	r3, [pc, #288]	; (800ac0c <OpenThread_CallBack_Processing+0x3f4>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f000 83fc 	beq.w	800b2ec <OpenThread_CallBack_Processing+0xad4>
    {
      otDnsAddressCb((otError) p_notification->Data[0],
 800aaf4:	4b45      	ldr	r3, [pc, #276]	; (800ac0c <OpenThread_CallBack_Processing+0x3f4>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	6892      	ldr	r2, [r2, #8]
 800aafc:	b2d0      	uxtb	r0, r2
          (const otDnsAddressResponse *) p_notification->Data[1],
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	68d2      	ldr	r2, [r2, #12]
      otDnsAddressCb((otError) p_notification->Data[0],
 800ab02:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800ab04:	683a      	ldr	r2, [r7, #0]
 800ab06:	6912      	ldr	r2, [r2, #16]
      otDnsAddressCb((otError) p_notification->Data[0],
 800ab08:	4798      	blx	r3
    }
    break;
 800ab0a:	e3ef      	b.n	800b2ec <OpenThread_CallBack_Processing+0xad4>
  case MSG_M0TOM4_DNS_SERVICE_CB:
    if (otDnsAddressCb != NULL)
 800ab0c:	4b3f      	ldr	r3, [pc, #252]	; (800ac0c <OpenThread_CallBack_Processing+0x3f4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 83ed 	beq.w	800b2f0 <OpenThread_CallBack_Processing+0xad8>
    {
      otDnsServiceCb((otError) p_notification->Data[0],
 800ab16:	4b3e      	ldr	r3, [pc, #248]	; (800ac10 <OpenThread_CallBack_Processing+0x3f8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	6892      	ldr	r2, [r2, #8]
 800ab1e:	b2d0      	uxtb	r0, r2
          (const otDnsServiceResponse *) p_notification->Data[1],
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	68d2      	ldr	r2, [r2, #12]
      otDnsServiceCb((otError) p_notification->Data[0],
 800ab24:	4611      	mov	r1, r2
          (void *) p_notification->Data[2]);
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	6912      	ldr	r2, [r2, #16]
      otDnsServiceCb((otError) p_notification->Data[0],
 800ab2a:	4798      	blx	r3
    }
    break;
 800ab2c:	e3e0      	b.n	800b2f0 <OpenThread_CallBack_Processing+0xad8>
#endif // OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE
#endif // OPENTHREAD_CONFIG_NETDATA_PUBLISHER_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_AUTO_START_CB:
    if (otSrpClientAutoStartCb != NULL)
 800ab2e:	4b39      	ldr	r3, [pc, #228]	; (800ac14 <OpenThread_CallBack_Processing+0x3fc>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f000 83de 	beq.w	800b2f4 <OpenThread_CallBack_Processing+0xadc>
    {
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800ab38:	4b36      	ldr	r3, [pc, #216]	; (800ac14 <OpenThread_CallBack_Processing+0x3fc>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	6892      	ldr	r2, [r2, #8]
 800ab40:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	68d2      	ldr	r2, [r2, #12]
      otSrpClientAutoStartCb((const otSockAddr *) p_notification->Data[0],
 800ab46:	4611      	mov	r1, r2
 800ab48:	4798      	blx	r3
    }
    break;
 800ab4a:	e3d3      	b.n	800b2f4 <OpenThread_CallBack_Processing+0xadc>
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#endif // OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#if OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
  case MSG_M0TOM4_SRP_CLIENT_CB:
    if (otSrpClientCb != NULL)
 800ab4c:	4b32      	ldr	r3, [pc, #200]	; (800ac18 <OpenThread_CallBack_Processing+0x400>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f000 83d1 	beq.w	800b2f8 <OpenThread_CallBack_Processing+0xae0>
    {
      otSrpClientCb((otError) p_notification->Data[0],
 800ab56:	4b30      	ldr	r3, [pc, #192]	; (800ac18 <OpenThread_CallBack_Processing+0x400>)
 800ab58:	681c      	ldr	r4, [r3, #0]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	b2d8      	uxtb	r0, r3
          (const otSrpClientHostInfo *) p_notification->Data[1],
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	68db      	ldr	r3, [r3, #12]
      otSrpClientCb((otError) p_notification->Data[0],
 800ab64:	4619      	mov	r1, r3
          (const otSrpClientService *) p_notification->Data[2],
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	691b      	ldr	r3, [r3, #16]
      otSrpClientCb((otError) p_notification->Data[0],
 800ab6a:	461a      	mov	r2, r3
          (const otSrpClientService *) p_notification->Data[3],
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	695b      	ldr	r3, [r3, #20]
      otSrpClientCb((otError) p_notification->Data[0],
 800ab70:	461d      	mov	r5, r3
          (void *) p_notification->Data[4]);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	699b      	ldr	r3, [r3, #24]
      otSrpClientCb((otError) p_notification->Data[0],
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	462b      	mov	r3, r5
 800ab7a:	47a0      	blx	r4
    }
    break;
 800ab7c:	e3bc      	b.n	800b2f8 <OpenThread_CallBack_Processing+0xae0>
    }
    break;
#endif // OPENTHREAD_CONFIG_SRP_SERVER_ENABLE
#if OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CB:
    if (otReceiveDiagnosticGetCb != NULL)
 800ab7e:	4b27      	ldr	r3, [pc, #156]	; (800ac1c <OpenThread_CallBack_Processing+0x404>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 83ba 	beq.w	800b2fc <OpenThread_CallBack_Processing+0xae4>
    {
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800ab88:	4b24      	ldr	r3, [pc, #144]	; (800ac1c <OpenThread_CallBack_Processing+0x404>)
 800ab8a:	681c      	ldr	r4, [r3, #0]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	b2d8      	uxtb	r0, r3
          (otMessage *) p_notification->Data[1],
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	68db      	ldr	r3, [r3, #12]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800ab96:	4619      	mov	r1, r3
          (const otMessageInfo *) p_notification->Data[2],
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	691b      	ldr	r3, [r3, #16]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800ab9c:	461a      	mov	r2, r3
          (void *) p_notification->Data[3]);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	695b      	ldr	r3, [r3, #20]
      otReceiveDiagnosticGetCb((otError) p_notification->Data[0],
 800aba2:	47a0      	blx	r4
    }
    break;
 800aba4:	e3aa      	b.n	800b2fc <OpenThread_CallBack_Processing+0xae4>
#endif // OPENTHREAD_FTD || OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 800aba6:	4b1e      	ldr	r3, [pc, #120]	; (800ac20 <OpenThread_CallBack_Processing+0x408>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 83a8 	beq.w	800b300 <OpenThread_CallBack_Processing+0xae8>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800abb0:	4b1b      	ldr	r3, [pc, #108]	; (800ac20 <OpenThread_CallBack_Processing+0x408>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800abbc:	4611      	mov	r1, r2
 800abbe:	4798      	blx	r3
    }
    break;
 800abc0:	e39e      	b.n	800b300 <OpenThread_CallBack_Processing+0xae8>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 800abc2:	4b18      	ldr	r3, [pc, #96]	; (800ac24 <OpenThread_CallBack_Processing+0x40c>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f000 839c 	beq.w	800b304 <OpenThread_CallBack_Processing+0xaec>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800abcc:	4b15      	ldr	r3, [pc, #84]	; (800ac24 <OpenThread_CallBack_Processing+0x40c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	6892      	ldr	r2, [r2, #8]
 800abd4:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800abda:	4611      	mov	r1, r2
 800abdc:	4798      	blx	r3
    }
    break;
 800abde:	e391      	b.n	800b304 <OpenThread_CallBack_Processing+0xaec>
 800abe0:	2000082c 	.word	0x2000082c
 800abe4:	20000834 	.word	0x20000834
 800abe8:	20000830 	.word	0x20000830
 800abec:	200007c0 	.word	0x200007c0
 800abf0:	200007bc 	.word	0x200007bc
 800abf4:	200007c4 	.word	0x200007c4
 800abf8:	200007b8 	.word	0x200007b8
 800abfc:	20000838 	.word	0x20000838
 800ac00:	2000083c 	.word	0x2000083c
 800ac04:	20000840 	.word	0x20000840
 800ac08:	20000848 	.word	0x20000848
 800ac0c:	20000844 	.word	0x20000844
 800ac10:	2000084c 	.word	0x2000084c
 800ac14:	20000858 	.word	0x20000858
 800ac18:	20000854 	.word	0x20000854
 800ac1c:	20000850 	.word	0x20000850
 800ac20:	20000798 	.word	0x20000798
 800ac24:	200007c8 	.word	0x200007c8
  case MSG_M0TOM4_THREAD_DETACH_GRACEFULLY_CB:
    if (otDetachGracefullyCb != NULL)
 800ac28:	4b97      	ldr	r3, [pc, #604]	; (800ae88 <OpenThread_CallBack_Processing+0x670>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 836b 	beq.w	800b308 <OpenThread_CallBack_Processing+0xaf0>
    {
      otDetachGracefullyCb((void *) p_notification->Data[0]);
 800ac32:	4b95      	ldr	r3, [pc, #596]	; (800ae88 <OpenThread_CallBack_Processing+0x670>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	6892      	ldr	r2, [r2, #8]
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	4798      	blx	r3
    }
    break;
 800ac3e:	e363      	b.n	800b308 <OpenThread_CallBack_Processing+0xaf0>
    }
    break;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_DISCOVERY_REQUEST_CB:
    if (otThreadDiscoveryRequestCb != NULL)
 800ac40:	4b92      	ldr	r3, [pc, #584]	; (800ae8c <OpenThread_CallBack_Processing+0x674>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 8361 	beq.w	800b30c <OpenThread_CallBack_Processing+0xaf4>
    {
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800ac4a:	4b90      	ldr	r3, [pc, #576]	; (800ae8c <OpenThread_CallBack_Processing+0x674>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	6892      	ldr	r2, [r2, #8]
 800ac52:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800ac54:	683a      	ldr	r2, [r7, #0]
 800ac56:	68d2      	ldr	r2, [r2, #12]
      otThreadDiscoveryRequestCb((const otThreadDiscoveryRequestInfo *) p_notification->Data[0],
 800ac58:	4611      	mov	r1, r2
 800ac5a:	4798      	blx	r3
    }
    break;
 800ac5c:	e356      	b.n	800b30c <OpenThread_CallBack_Processing+0xaf4>
#endif // OPENTHREAD_FTD
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	461a      	mov	r2, r3
 800ac64:	4b8a      	ldr	r3, [pc, #552]	; (800ae90 <OpenThread_CallBack_Processing+0x678>)
 800ac66:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 800ac68:	4b89      	ldr	r3, [pc, #548]	; (800ae90 <OpenThread_CallBack_Processing+0x678>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	4a89      	ldr	r2, [pc, #548]	; (800ae94 <OpenThread_CallBack_Processing+0x67c>)
 800ac70:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 800ac72:	4b88      	ldr	r3, [pc, #544]	; (800ae94 <OpenThread_CallBack_Processing+0x67c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f000 834a 	beq.w	800b310 <OpenThread_CallBack_Processing+0xaf8>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800ac7c:	4b85      	ldr	r3, [pc, #532]	; (800ae94 <OpenThread_CallBack_Processing+0x67c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a83      	ldr	r2, [pc, #524]	; (800ae90 <OpenThread_CallBack_Processing+0x678>)
 800ac82:	6812      	ldr	r2, [r2, #0]
 800ac84:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800ac8a:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800ac90:	4798      	blx	r3
    }
    break;
 800ac92:	e33d      	b.n	800b310 <OpenThread_CallBack_Processing+0xaf8>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 800ac94:	4b80      	ldr	r3, [pc, #512]	; (800ae98 <OpenThread_CallBack_Processing+0x680>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 833b 	beq.w	800b314 <OpenThread_CallBack_Processing+0xafc>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800ac9e:	4b7e      	ldr	r3, [pc, #504]	; (800ae98 <OpenThread_CallBack_Processing+0x680>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	6892      	ldr	r2, [r2, #8]
 800aca6:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800acac:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800acb2:	4798      	blx	r3
    }
    break;
 800acb4:	e32e      	b.n	800b314 <OpenThread_CallBack_Processing+0xafc>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	461a      	mov	r2, r3
 800acbc:	4b77      	ldr	r3, [pc, #476]	; (800ae9c <OpenThread_CallBack_Processing+0x684>)
 800acbe:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800acc0:	4b76      	ldr	r3, [pc, #472]	; (800ae9c <OpenThread_CallBack_Processing+0x684>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	4a76      	ldr	r2, [pc, #472]	; (800aea0 <OpenThread_CallBack_Processing+0x688>)
 800acc8:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 800acca:	4b75      	ldr	r3, [pc, #468]	; (800aea0 <OpenThread_CallBack_Processing+0x688>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f000 8322 	beq.w	800b318 <OpenThread_CallBack_Processing+0xb00>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800acd4:	4b72      	ldr	r3, [pc, #456]	; (800aea0 <OpenThread_CallBack_Processing+0x688>)
 800acd6:	681c      	ldr	r4, [r3, #0]
 800acd8:	4b70      	ldr	r3, [pc, #448]	; (800ae9c <OpenThread_CallBack_Processing+0x684>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800ace2:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800ace8:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	47a0      	blx	r4
    }
    break;
 800acf2:	e311      	b.n	800b318 <OpenThread_CallBack_Processing+0xb00>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800acf4:	4b6b      	ldr	r3, [pc, #428]	; (800aea4 <OpenThread_CallBack_Processing+0x68c>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 830f 	beq.w	800b31c <OpenThread_CallBack_Processing+0xb04>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800acfe:	4b69      	ldr	r3, [pc, #420]	; (800aea4 <OpenThread_CallBack_Processing+0x68c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	6892      	ldr	r2, [r2, #8]
 800ad06:	2a00      	cmp	r2, #0
 800ad08:	bf14      	ite	ne
 800ad0a:	2201      	movne	r2, #1
 800ad0c:	2200      	moveq	r2, #0
 800ad0e:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800ad14:	4611      	mov	r1, r2
 800ad16:	4798      	blx	r3
    }
    break;
 800ad18:	e300      	b.n	800b31c <OpenThread_CallBack_Processing+0xb04>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800ad1a:	4b62      	ldr	r3, [pc, #392]	; (800aea4 <OpenThread_CallBack_Processing+0x68c>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 82fe 	beq.w	800b320 <OpenThread_CallBack_Processing+0xb08>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800ad24:	4b5f      	ldr	r3, [pc, #380]	; (800aea4 <OpenThread_CallBack_Processing+0x68c>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	6892      	ldr	r2, [r2, #8]
 800ad2c:	2a00      	cmp	r2, #0
 800ad2e:	bf14      	ite	ne
 800ad30:	2201      	movne	r2, #1
 800ad32:	2200      	moveq	r2, #0
 800ad34:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	4798      	blx	r3
    }
    break;
 800ad3e:	e2ef      	b.n	800b320 <OpenThread_CallBack_Processing+0xb08>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 800ad40:	4b59      	ldr	r3, [pc, #356]	; (800aea8 <OpenThread_CallBack_Processing+0x690>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 82ed 	beq.w	800b324 <OpenThread_CallBack_Processing+0xb0c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800ad4a:	4b57      	ldr	r3, [pc, #348]	; (800aea8 <OpenThread_CallBack_Processing+0x690>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	6892      	ldr	r2, [r2, #8]
 800ad52:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800ad58:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800ad5e:	4798      	blx	r3
    }
    break;
 800ad60:	e2e0      	b.n	800b324 <OpenThread_CallBack_Processing+0xb0c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 800ad62:	2001      	movs	r0, #1
 800ad64:	f000 fb45 	bl	800b3f2 <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 800ad68:	f7f9 f995 	bl	8004096 <HAL_NVIC_SystemReset>
    break;
 800ad6c:	e317      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 800ad6e:	4b4f      	ldr	r3, [pc, #316]	; (800aeac <OpenThread_CallBack_Processing+0x694>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f000 82d8 	beq.w	800b328 <OpenThread_CallBack_Processing+0xb10>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800ad78:	4b4c      	ldr	r3, [pc, #304]	; (800aeac <OpenThread_CallBack_Processing+0x694>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	6892      	ldr	r2, [r2, #8]
 800ad80:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800ad86:	4611      	mov	r1, r2
 800ad88:	4798      	blx	r3
    }
    break;
 800ad8a:	e2cd      	b.n	800b328 <OpenThread_CallBack_Processing+0xb10>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 800ad8c:	4b48      	ldr	r3, [pc, #288]	; (800aeb0 <OpenThread_CallBack_Processing+0x698>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 82cb 	beq.w	800b32c <OpenThread_CallBack_Processing+0xb14>
    {
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800ad96:	4b46      	ldr	r3, [pc, #280]	; (800aeb0 <OpenThread_CallBack_Processing+0x698>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	6892      	ldr	r2, [r2, #8]
 800ad9e:	4610      	mov	r0, r2
          (bool) p_notification->Data[1],
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	68d2      	ldr	r2, [r2, #12]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800ada4:	2a00      	cmp	r2, #0
 800ada6:	bf14      	ite	ne
 800ada8:	2201      	movne	r2, #1
 800adaa:	2200      	moveq	r2, #0
 800adac:	b2d1      	uxtb	r1, r2
          (void *) p_notification->Data[2]);
 800adae:	683a      	ldr	r2, [r7, #0]
 800adb0:	6912      	ldr	r2, [r2, #16]
      otIp6AddressCb((const otIp6AddressInfo *) p_notification->Data[0],
 800adb2:	4798      	blx	r3
    }
    break;
 800adb4:	e2ba      	b.n	800b32c <OpenThread_CallBack_Processing+0xb14>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 800adb6:	4b3f      	ldr	r3, [pc, #252]	; (800aeb4 <OpenThread_CallBack_Processing+0x69c>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 82b8 	beq.w	800b330 <OpenThread_CallBack_Processing+0xb18>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 800adc0:	4b3c      	ldr	r3, [pc, #240]	; (800aeb4 <OpenThread_CallBack_Processing+0x69c>)
 800adc2:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 800adc8:	4611      	mov	r1, r2
 800adca:	2000      	movs	r0, #0
 800adcc:	4798      	blx	r3
    }
    break;
 800adce:	e2af      	b.n	800b330 <OpenThread_CallBack_Processing+0xb18>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_REGISTER_MULTICAST_LISTENERS_CB:
    if (otIp6RegisterMulticastListenersCb != NULL)
 800add0:	4b39      	ldr	r3, [pc, #228]	; (800aeb8 <OpenThread_CallBack_Processing+0x6a0>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 82ad 	beq.w	800b334 <OpenThread_CallBack_Processing+0xb1c>
    {
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800adda:	4b37      	ldr	r3, [pc, #220]	; (800aeb8 <OpenThread_CallBack_Processing+0x6a0>)
 800addc:	681c      	ldr	r4, [r3, #0]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	4618      	mov	r0, r3
          (otError) p_notification->Data[1],
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	68db      	ldr	r3, [r3, #12]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800ade8:	b2d9      	uxtb	r1, r3
          (uint8_t) p_notification->Data[2],
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	691b      	ldr	r3, [r3, #16]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800adee:	b2da      	uxtb	r2, r3
          (const otIp6Address *) p_notification->Data[3],
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	695b      	ldr	r3, [r3, #20]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800adf4:	461d      	mov	r5, r3
          (uint8_t) p_notification->Data[4]);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	699b      	ldr	r3, [r3, #24]
      otIp6RegisterMulticastListenersCb((void *) p_notification->Data[0],
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	462b      	mov	r3, r5
 800ae00:	47a0      	blx	r4
    }
    break;
 800ae02:	e297      	b.n	800b334 <OpenThread_CallBack_Processing+0xb1c>
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 800ae04:	4b2d      	ldr	r3, [pc, #180]	; (800aebc <OpenThread_CallBack_Processing+0x6a4>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 8295 	beq.w	800b338 <OpenThread_CallBack_Processing+0xb20>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800ae0e:	4b2b      	ldr	r3, [pc, #172]	; (800aebc <OpenThread_CallBack_Processing+0x6a4>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	6892      	ldr	r2, [r2, #8]
 800ae16:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	4798      	blx	r3
    }
    break;
 800ae20:	e28a      	b.n	800b338 <OpenThread_CallBack_Processing+0xb20>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 800ae22:	4b27      	ldr	r3, [pc, #156]	; (800aec0 <OpenThread_CallBack_Processing+0x6a8>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f000 8288 	beq.w	800b33c <OpenThread_CallBack_Processing+0xb24>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800ae2c:	4b24      	ldr	r3, [pc, #144]	; (800aec0 <OpenThread_CallBack_Processing+0x6a8>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	6892      	ldr	r2, [r2, #8]
 800ae34:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800ae3a:	4611      	mov	r1, r2
 800ae3c:	4798      	blx	r3
    }
    break;
 800ae3e:	e27d      	b.n	800b33c <OpenThread_CallBack_Processing+0xb24>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 800ae40:	4b20      	ldr	r3, [pc, #128]	; (800aec4 <OpenThread_CallBack_Processing+0x6ac>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f000 827b 	beq.w	800b340 <OpenThread_CallBack_Processing+0xb28>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800ae4a:	4b1e      	ldr	r3, [pc, #120]	; (800aec4 <OpenThread_CallBack_Processing+0x6ac>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	6892      	ldr	r2, [r2, #8]
 800ae52:	4610      	mov	r0, r2
          p_notification->Data[1],
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800ae58:	2a00      	cmp	r2, #0
 800ae5a:	bf14      	ite	ne
 800ae5c:	2201      	movne	r2, #1
 800ae5e:	2200      	moveq	r2, #0
 800ae60:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800ae66:	4798      	blx	r3
    }
    break;
 800ae68:	e26a      	b.n	800b340 <OpenThread_CallBack_Processing+0xb28>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 800ae6a:	4b17      	ldr	r3, [pc, #92]	; (800aec8 <OpenThread_CallBack_Processing+0x6b0>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f000 8268 	beq.w	800b344 <OpenThread_CallBack_Processing+0xb2c>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800ae74:	4b14      	ldr	r3, [pc, #80]	; (800aec8 <OpenThread_CallBack_Processing+0x6b0>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	6892      	ldr	r2, [r2, #8]
 800ae7c:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800ae82:	4611      	mov	r1, r2
 800ae84:	4798      	blx	r3
    }
    break;
 800ae86:	e25d      	b.n	800b344 <OpenThread_CallBack_Processing+0xb2c>
 800ae88:	200007cc 	.word	0x200007cc
 800ae8c:	200007d0 	.word	0x200007d0
 800ae90:	20000814 	.word	0x20000814
 800ae94:	20000808 	.word	0x20000808
 800ae98:	2000080c 	.word	0x2000080c
 800ae9c:	20000818 	.word	0x20000818
 800aea0:	20000810 	.word	0x20000810
 800aea4:	20000820 	.word	0x20000820
 800aea8:	2000081c 	.word	0x2000081c
 800aeac:	200007a0 	.word	0x200007a0
 800aeb0:	200007a4 	.word	0x200007a4
 800aeb4:	2000079c 	.word	0x2000079c
 800aeb8:	200007a8 	.word	0x200007a8
 800aebc:	200007ac 	.word	0x200007ac
 800aec0:	200007b0 	.word	0x200007b0
 800aec4:	200007b4 	.word	0x200007b4
 800aec8:	200007d4 	.word	0x200007d4
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 800aecc:	4b95      	ldr	r3, [pc, #596]	; (800b124 <OpenThread_CallBack_Processing+0x90c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 8239 	beq.w	800b348 <OpenThread_CallBack_Processing+0xb30>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800aed6:	4b93      	ldr	r3, [pc, #588]	; (800b124 <OpenThread_CallBack_Processing+0x90c>)
 800aed8:	681c      	ldr	r4, [r3, #0]
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800aee2:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800aee8:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800aeee:	47a0      	blx	r4
    }
    break;
 800aef0:	e22a      	b.n	800b348 <OpenThread_CallBack_Processing+0xb30>
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 800aef2:	4b8d      	ldr	r3, [pc, #564]	; (800b128 <OpenThread_CallBack_Processing+0x910>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 8228 	beq.w	800b34c <OpenThread_CallBack_Processing+0xb34>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800aefc:	4b8a      	ldr	r3, [pc, #552]	; (800b128 <OpenThread_CallBack_Processing+0x910>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	6892      	ldr	r2, [r2, #8]
 800af04:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800af0e:	4798      	blx	r3
    }
    break;
 800af10:	e21c      	b.n	800b34c <OpenThread_CallBack_Processing+0xb34>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 800af12:	4b86      	ldr	r3, [pc, #536]	; (800b12c <OpenThread_CallBack_Processing+0x914>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 821a 	beq.w	800b350 <OpenThread_CallBack_Processing+0xb38>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800af1c:	4b83      	ldr	r3, [pc, #524]	; (800b12c <OpenThread_CallBack_Processing+0x914>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	6892      	ldr	r2, [r2, #8]
 800af24:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800af2a:	4611      	mov	r1, r2
 800af2c:	4798      	blx	r3
    }
    break;
 800af2e:	e20f      	b.n	800b350 <OpenThread_CallBack_Processing+0xb38>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 800af30:	4b7f      	ldr	r3, [pc, #508]	; (800b130 <OpenThread_CallBack_Processing+0x918>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 820d 	beq.w	800b354 <OpenThread_CallBack_Processing+0xb3c>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800af3a:	4b7d      	ldr	r3, [pc, #500]	; (800b130 <OpenThread_CallBack_Processing+0x918>)
 800af3c:	681c      	ldr	r4, [r3, #0]
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	b2d8      	uxtb	r0, r3
          (otJoinerInfo*) p_notification->Data[1],
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800af48:	4619      	mov	r1, r3
          (otExtAddress*) p_notification->Data[2],
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	691b      	ldr	r3, [r3, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800af4e:	461a      	mov	r2, r3
          (void*) p_notification->Data[3]);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	695b      	ldr	r3, [r3, #20]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800af54:	47a0      	blx	r4
    }
    break;
 800af56:	e1fd      	b.n	800b354 <OpenThread_CallBack_Processing+0xb3c>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 800af58:	4b76      	ldr	r3, [pc, #472]	; (800b134 <OpenThread_CallBack_Processing+0x91c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 81fb 	beq.w	800b358 <OpenThread_CallBack_Processing+0xb40>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800af62:	4b74      	ldr	r3, [pc, #464]	; (800b134 <OpenThread_CallBack_Processing+0x91c>)
 800af64:	681c      	ldr	r4, [r3, #0]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800af70:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800af76:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800af7c:	47a0      	blx	r4
    }
    break;
 800af7e:	e1eb      	b.n	800b358 <OpenThread_CallBack_Processing+0xb40>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 800af80:	4b6d      	ldr	r3, [pc, #436]	; (800b138 <OpenThread_CallBack_Processing+0x920>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 81e9 	beq.w	800b35c <OpenThread_CallBack_Processing+0xb44>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800af8a:	4b6b      	ldr	r3, [pc, #428]	; (800b138 <OpenThread_CallBack_Processing+0x920>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	6892      	ldr	r2, [r2, #8]
 800af92:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 800af98:	4611      	mov	r1, r2
 800af9a:	4798      	blx	r3
    }
    break;
 800af9c:	e1de      	b.n	800b35c <OpenThread_CallBack_Processing+0xb44>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 800af9e:	4b67      	ldr	r3, [pc, #412]	; (800b13c <OpenThread_CallBack_Processing+0x924>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 81dc 	beq.w	800b360 <OpenThread_CallBack_Processing+0xb48>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800afa8:	4b64      	ldr	r3, [pc, #400]	; (800b13c <OpenThread_CallBack_Processing+0x924>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	6892      	ldr	r2, [r2, #8]
 800afb0:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800afb6:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800afbc:	b2d2      	uxtb	r2, r2
 800afbe:	4798      	blx	r3
    }
    break;
 800afc0:	e1ce      	b.n	800b360 <OpenThread_CallBack_Processing+0xb48>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 800afc2:	4b5f      	ldr	r3, [pc, #380]	; (800b140 <OpenThread_CallBack_Processing+0x928>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 81cc 	beq.w	800b364 <OpenThread_CallBack_Processing+0xb4c>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800afcc:	4b5c      	ldr	r3, [pc, #368]	; (800b140 <OpenThread_CallBack_Processing+0x928>)
 800afce:	681c      	ldr	r4, [r3, #0]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800afda:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800afe0:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	47a0      	blx	r4
    }
    break;
 800afea:	e1bb      	b.n	800b364 <OpenThread_CallBack_Processing+0xb4c>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 800afec:	4b55      	ldr	r3, [pc, #340]	; (800b144 <OpenThread_CallBack_Processing+0x92c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 81b9 	beq.w	800b368 <OpenThread_CallBack_Processing+0xb50>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800aff6:	4b53      	ldr	r3, [pc, #332]	; (800b144 <OpenThread_CallBack_Processing+0x92c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	6892      	ldr	r2, [r2, #8]
 800affe:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800b004:	b252      	sxtb	r2, r2
 800b006:	4611      	mov	r1, r2
 800b008:	4798      	blx	r3
    }
    break;
 800b00a:	e1ad      	b.n	800b368 <OpenThread_CallBack_Processing+0xb50>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 800b00c:	4b4e      	ldr	r3, [pc, #312]	; (800b148 <OpenThread_CallBack_Processing+0x930>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 81ab 	beq.w	800b36c <OpenThread_CallBack_Processing+0xb54>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 800b016:	4b4c      	ldr	r3, [pc, #304]	; (800b148 <OpenThread_CallBack_Processing+0x930>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	6892      	ldr	r2, [r2, #8]
 800b01e:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 800b020:	683a      	ldr	r2, [r7, #0]
 800b022:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800b024:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800b02a:	4798      	blx	r3
    }
    break;
 800b02c:	e19e      	b.n	800b36c <OpenThread_CallBack_Processing+0xb54>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	461a      	mov	r2, r3
 800b034:	4b45      	ldr	r3, [pc, #276]	; (800b14c <OpenThread_CallBack_Processing+0x934>)
 800b036:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 800b038:	4b44      	ldr	r3, [pc, #272]	; (800b14c <OpenThread_CallBack_Processing+0x934>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	4a44      	ldr	r2, [pc, #272]	; (800b150 <OpenThread_CallBack_Processing+0x938>)
 800b040:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 800b042:	4b43      	ldr	r3, [pc, #268]	; (800b150 <OpenThread_CallBack_Processing+0x938>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f000 8192 	beq.w	800b370 <OpenThread_CallBack_Processing+0xb58>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800b04c:	4b40      	ldr	r3, [pc, #256]	; (800b150 <OpenThread_CallBack_Processing+0x938>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a3e      	ldr	r2, [pc, #248]	; (800b14c <OpenThread_CallBack_Processing+0x934>)
 800b052:	6812      	ldr	r2, [r2, #0]
 800b054:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800b05a:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800b060:	4798      	blx	r3
 800b062:	4603      	mov	r3, r0
 800b064:	461a      	mov	r2, r3
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	609a      	str	r2, [r3, #8]
      }
      break;
 800b06a:	e181      	b.n	800b370 <OpenThread_CallBack_Processing+0xb58>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 800b06c:	4b39      	ldr	r3, [pc, #228]	; (800b154 <OpenThread_CallBack_Processing+0x93c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 817f 	beq.w	800b374 <OpenThread_CallBack_Processing+0xb5c>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 800b076:	4b37      	ldr	r3, [pc, #220]	; (800b154 <OpenThread_CallBack_Processing+0x93c>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	6892      	ldr	r2, [r2, #8]
 800b07e:	4610      	mov	r0, r2
 800b080:	4798      	blx	r3
    }
    break;
 800b082:	e177      	b.n	800b374 <OpenThread_CallBack_Processing+0xb5c>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 800b084:	4b34      	ldr	r3, [pc, #208]	; (800b158 <OpenThread_CallBack_Processing+0x940>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 8175 	beq.w	800b378 <OpenThread_CallBack_Processing+0xb60>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800b08e:	4b32      	ldr	r3, [pc, #200]	; (800b158 <OpenThread_CallBack_Processing+0x940>)
 800b090:	6819      	ldr	r1, [r3, #0]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	4618      	mov	r0, r3
          (uint64_t)p_notification->Data[1],
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800b09c:	2200      	movs	r2, #0
 800b09e:	461c      	mov	r4, r3
 800b0a0:	4615      	mov	r5, r2
          (otError)p_notification->Data[2]);
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	691b      	ldr	r3, [r3, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	462b      	mov	r3, r5
 800b0ae:	4788      	blx	r1
    }
    break;
 800b0b0:	e162      	b.n	800b378 <OpenThread_CallBack_Processing+0xb60>
    }
    break;
#endif
#if OPENTHREAD_CONFIG_PING_SENDER_ENABLE
  case MSG_M0TOM4_PING_SENDER_REPLY_CALLBACK:
    if (otPingSenderReplyCb != NULL)
 800b0b2:	4b2a      	ldr	r3, [pc, #168]	; (800b15c <OpenThread_CallBack_Processing+0x944>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f000 8160 	beq.w	800b37c <OpenThread_CallBack_Processing+0xb64>
    {
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800b0bc:	4b27      	ldr	r3, [pc, #156]	; (800b15c <OpenThread_CallBack_Processing+0x944>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	6892      	ldr	r2, [r2, #8]
 800b0c4:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b0c6:	683a      	ldr	r2, [r7, #0]
 800b0c8:	68d2      	ldr	r2, [r2, #12]
      otPingSenderReplyCb((const otPingSenderReply *) p_notification->Data[0],
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	4798      	blx	r3
    }
    break;
 800b0ce:	e155      	b.n	800b37c <OpenThread_CallBack_Processing+0xb64>
  case MSG_M0TOM4_PING_SENDER_STATISTICS_CALLBACK:
    if (otPingSenderStatisticsCb != NULL)
 800b0d0:	4b23      	ldr	r3, [pc, #140]	; (800b160 <OpenThread_CallBack_Processing+0x948>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 8153 	beq.w	800b380 <OpenThread_CallBack_Processing+0xb68>
    {
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800b0da:	4b21      	ldr	r3, [pc, #132]	; (800b160 <OpenThread_CallBack_Processing+0x948>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	6892      	ldr	r2, [r2, #8]
 800b0e2:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	68d2      	ldr	r2, [r2, #12]
      otPingSenderStatisticsCb((const otPingSenderStatistics *) p_notification->Data[0],
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	4798      	blx	r3
    }
    break;
 800b0ec:	e148      	b.n	800b380 <OpenThread_CallBack_Processing+0xb68>
//      otTcpBytesAckedCb((otTcpEndpoint *) p_notification->Data[0],
//          (size_t) p_notification->Data[1]);
//    }
//    break;
  case MSG_M0TOM4_TCP_DISCONNECTED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b0f6:	4a1b      	ldr	r2, [pc, #108]	; (800b164 <OpenThread_CallBack_Processing+0x94c>)
 800b0f8:	6013      	str	r3, [r2, #0]

    otTcpDisconnectedCb = mySTTcpEndpointHandlerContext->mDisconnectedCallback;
 800b0fa:	4b1a      	ldr	r3, [pc, #104]	; (800b164 <OpenThread_CallBack_Processing+0x94c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	4a19      	ldr	r2, [pc, #100]	; (800b168 <OpenThread_CallBack_Processing+0x950>)
 800b102:	6013      	str	r3, [r2, #0]

    if (otTcpDisconnectedCb != NULL)
 800b104:	4b18      	ldr	r3, [pc, #96]	; (800b168 <OpenThread_CallBack_Processing+0x950>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 813b 	beq.w	800b384 <OpenThread_CallBack_Processing+0xb6c>
    {
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800b10e:	4b16      	ldr	r3, [pc, #88]	; (800b168 <OpenThread_CallBack_Processing+0x950>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	6892      	ldr	r2, [r2, #8]
 800b116:	4610      	mov	r0, r2
          (otTcpDisconnectedReason) p_notification->Data[1]);
 800b118:	683a      	ldr	r2, [r7, #0]
 800b11a:	68d2      	ldr	r2, [r2, #12]
      otTcpDisconnectedCb((otTcpEndpoint *) p_notification->Data[0],
 800b11c:	b2d2      	uxtb	r2, r2
 800b11e:	4611      	mov	r1, r2
 800b120:	4798      	blx	r3
    }
    break;
 800b122:	e12f      	b.n	800b384 <OpenThread_CallBack_Processing+0xb6c>
 800b124:	200007e0 	.word	0x200007e0
 800b128:	200007e4 	.word	0x200007e4
 800b12c:	200007d8 	.word	0x200007d8
 800b130:	200007dc 	.word	0x200007dc
 800b134:	200007e8 	.word	0x200007e8
 800b138:	200007ec 	.word	0x200007ec
 800b13c:	200007f0 	.word	0x200007f0
 800b140:	200007f4 	.word	0x200007f4
 800b144:	200007f8 	.word	0x200007f8
 800b148:	200007fc 	.word	0x200007fc
 800b14c:	20000804 	.word	0x20000804
 800b150:	20000800 	.word	0x20000800
 800b154:	20000824 	.word	0x20000824
 800b158:	20000828 	.word	0x20000828
 800b15c:	2000085c 	.word	0x2000085c
 800b160:	20000860 	.word	0x20000860
 800b164:	20000864 	.word	0x20000864
 800b168:	2000086c 	.word	0x2000086c
  case MSG_M0TOM4_TCP_ESTABLISHED_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b174:	4a8d      	ldr	r2, [pc, #564]	; (800b3ac <OpenThread_CallBack_Processing+0xb94>)
 800b176:	6013      	str	r3, [r2, #0]

    otTcpEstablishedCb = mySTTcpEndpointHandlerContext->mEstablishedCallback;
 800b178:	4b8c      	ldr	r3, [pc, #560]	; (800b3ac <OpenThread_CallBack_Processing+0xb94>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	4a8c      	ldr	r2, [pc, #560]	; (800b3b0 <OpenThread_CallBack_Processing+0xb98>)
 800b180:	6013      	str	r3, [r2, #0]

    if (otTcpEstablishedCb != NULL)
 800b182:	4b8b      	ldr	r3, [pc, #556]	; (800b3b0 <OpenThread_CallBack_Processing+0xb98>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 80fe 	beq.w	800b388 <OpenThread_CallBack_Processing+0xb70>
    {
      otTcpEstablishedCb((otTcpEndpoint *) p_notification->Data[0]);
 800b18c:	4b88      	ldr	r3, [pc, #544]	; (800b3b0 <OpenThread_CallBack_Processing+0xb98>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	6892      	ldr	r2, [r2, #8]
 800b194:	4610      	mov	r0, r2
 800b196:	4798      	blx	r3
    }
    break;
 800b198:	e0f6      	b.n	800b388 <OpenThread_CallBack_Processing+0xb70>
  case MSG_M0TOM4_TCP_RECEIVE_AVAILABLE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b1a2:	4a82      	ldr	r2, [pc, #520]	; (800b3ac <OpenThread_CallBack_Processing+0xb94>)
 800b1a4:	6013      	str	r3, [r2, #0]

    otTcpReceiveAvailableCb = mySTTcpEndpointHandlerContext->mReceiveAvailableCallback;
 800b1a6:	4b81      	ldr	r3, [pc, #516]	; (800b3ac <OpenThread_CallBack_Processing+0xb94>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	4a81      	ldr	r2, [pc, #516]	; (800b3b4 <OpenThread_CallBack_Processing+0xb9c>)
 800b1ae:	6013      	str	r3, [r2, #0]

    if (otTcpReceiveAvailableCb != NULL)
 800b1b0:	4b80      	ldr	r3, [pc, #512]	; (800b3b4 <OpenThread_CallBack_Processing+0xb9c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 80e9 	beq.w	800b38c <OpenThread_CallBack_Processing+0xb74>
    {
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800b1ba:	4b7e      	ldr	r3, [pc, #504]	; (800b3b4 <OpenThread_CallBack_Processing+0xb9c>)
 800b1bc:	681c      	ldr	r4, [r3, #0]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	4618      	mov	r0, r3
          (size_t) p_notification->Data[1],
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	68d9      	ldr	r1, [r3, #12]
          (bool) p_notification->Data[2],
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	691b      	ldr	r3, [r3, #16]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	bf14      	ite	ne
 800b1d0:	2301      	movne	r3, #1
 800b1d2:	2300      	moveq	r3, #0
 800b1d4:	b2da      	uxtb	r2, r3
          (size_t) p_notification->Data[3]);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	695b      	ldr	r3, [r3, #20]
      otTcpReceiveAvailableCb((otTcpEndpoint *) p_notification->Data[0],
 800b1da:	47a0      	blx	r4
    }
    break;
 800b1dc:	e0d6      	b.n	800b38c <OpenThread_CallBack_Processing+0xb74>
  case MSG_M0TOM4_TCP_SEND_DONE_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b1e6:	4a71      	ldr	r2, [pc, #452]	; (800b3ac <OpenThread_CallBack_Processing+0xb94>)
 800b1e8:	6013      	str	r3, [r2, #0]

    otTcpSendDoneCb = mySTTcpEndpointHandlerContext->mSendDoneCallback;
 800b1ea:	4b70      	ldr	r3, [pc, #448]	; (800b3ac <OpenThread_CallBack_Processing+0xb94>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	4a71      	ldr	r2, [pc, #452]	; (800b3b8 <OpenThread_CallBack_Processing+0xba0>)
 800b1f2:	6013      	str	r3, [r2, #0]

    if (otTcpSendDoneCb != NULL)
 800b1f4:	4b70      	ldr	r3, [pc, #448]	; (800b3b8 <OpenThread_CallBack_Processing+0xba0>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 80c9 	beq.w	800b390 <OpenThread_CallBack_Processing+0xb78>
    {
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800b1fe:	4b6e      	ldr	r3, [pc, #440]	; (800b3b8 <OpenThread_CallBack_Processing+0xba0>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	6892      	ldr	r2, [r2, #8]
 800b206:	4610      	mov	r0, r2
          (otLinkedBuffer *) p_notification->Data[1]);
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	68d2      	ldr	r2, [r2, #12]
      otTcpSendDoneCb((otTcpEndpoint *) p_notification->Data[0],
 800b20c:	4611      	mov	r1, r2
 800b20e:	4798      	blx	r3
    }
    break;
 800b210:	e0be      	b.n	800b390 <OpenThread_CallBack_Processing+0xb78>
//    {
//      otTcpSendReadyCb((otTcpEndpoint *) p_notification->Data[0]);
//    }
//    break;
  case MSG_M0TOM4_TCP_FORWARD_PROGRESS_CALLBACK:
    mySTTcpEndpointHandlerContext = (STTcpEndpointHandlerContextType*) ((otTcpEndpoint *)p_notification->Data[0])->mContext;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b21a:	4a64      	ldr	r2, [pc, #400]	; (800b3ac <OpenThread_CallBack_Processing+0xb94>)
 800b21c:	6013      	str	r3, [r2, #0]

    mForwardProgressCallback = mySTTcpEndpointHandlerContext->mForwardProgressCallback;
 800b21e:	4b63      	ldr	r3, [pc, #396]	; (800b3ac <OpenThread_CallBack_Processing+0xb94>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	4a65      	ldr	r2, [pc, #404]	; (800b3bc <OpenThread_CallBack_Processing+0xba4>)
 800b226:	6013      	str	r3, [r2, #0]

    if (mForwardProgressCallback != NULL)
 800b228:	4b64      	ldr	r3, [pc, #400]	; (800b3bc <OpenThread_CallBack_Processing+0xba4>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 80b1 	beq.w	800b394 <OpenThread_CallBack_Processing+0xb7c>
    {
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800b232:	4b62      	ldr	r3, [pc, #392]	; (800b3bc <OpenThread_CallBack_Processing+0xba4>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	6892      	ldr	r2, [r2, #8]
 800b23a:	4610      	mov	r0, r2
          (size_t) p_notification->Data[1],
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	68d1      	ldr	r1, [r2, #12]
          (size_t) p_notification->Data[2]);
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	6912      	ldr	r2, [r2, #16]
      mForwardProgressCallback((otTcpEndpoint *)p_notification->Data[0],
 800b244:	4798      	blx	r3
    }
    break;
 800b246:	e0a5      	b.n	800b394 <OpenThread_CallBack_Processing+0xb7c>
  case MSG_M0TOM4_TCP_ACCEPT_READY_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	4a5c      	ldr	r2, [pc, #368]	; (800b3c0 <OpenThread_CallBack_Processing+0xba8>)
 800b250:	6013      	str	r3, [r2, #0]

    otTcpAcceptReadyCb = mySTTcpListenerHandlerContext->mAcceptReadyCallback;
 800b252:	4b5b      	ldr	r3, [pc, #364]	; (800b3c0 <OpenThread_CallBack_Processing+0xba8>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	4a5a      	ldr	r2, [pc, #360]	; (800b3c4 <OpenThread_CallBack_Processing+0xbac>)
 800b25a:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptReadyCb != NULL)
 800b25c:	4b59      	ldr	r3, [pc, #356]	; (800b3c4 <OpenThread_CallBack_Processing+0xbac>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 8099 	beq.w	800b398 <OpenThread_CallBack_Processing+0xb80>
    {
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800b266:	4b57      	ldr	r3, [pc, #348]	; (800b3c4 <OpenThread_CallBack_Processing+0xbac>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	683a      	ldr	r2, [r7, #0]
 800b26c:	6892      	ldr	r2, [r2, #8]
 800b26e:	4610      	mov	r0, r2
          (const otSockAddr *) p_notification->Data[1],
 800b270:	683a      	ldr	r2, [r7, #0]
 800b272:	68d2      	ldr	r2, [r2, #12]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800b274:	4611      	mov	r1, r2
          (otTcpEndpoint **) p_notification->Data[2]);
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	6912      	ldr	r2, [r2, #16]
      p_notification->Data[0] = otTcpAcceptReadyCb((otTcpListener *) p_notification->Data[0],
 800b27a:	4798      	blx	r3
 800b27c:	4603      	mov	r3, r0
 800b27e:	461a      	mov	r2, r3
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	609a      	str	r2, [r3, #8]
    }
    break;
 800b284:	e088      	b.n	800b398 <OpenThread_CallBack_Processing+0xb80>
  case MSG_M0TOM4_TCP_ACCEPT_DONE_CALLBACK:
    mySTTcpListenerHandlerContext = (STTcpListenerHandlerContextType*) ((otTcpListener *)p_notification->Data[0])->mContext;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	6a1b      	ldr	r3, [r3, #32]
 800b28c:	4a4c      	ldr	r2, [pc, #304]	; (800b3c0 <OpenThread_CallBack_Processing+0xba8>)
 800b28e:	6013      	str	r3, [r2, #0]

    otTcpAcceptDoneCb = mySTTcpListenerHandlerContext->mAcceptDoneCallback;
 800b290:	4b4b      	ldr	r3, [pc, #300]	; (800b3c0 <OpenThread_CallBack_Processing+0xba8>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	4a4c      	ldr	r2, [pc, #304]	; (800b3c8 <OpenThread_CallBack_Processing+0xbb0>)
 800b298:	6013      	str	r3, [r2, #0]

    if (otTcpAcceptDoneCb != NULL)
 800b29a:	4b4b      	ldr	r3, [pc, #300]	; (800b3c8 <OpenThread_CallBack_Processing+0xbb0>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d07c      	beq.n	800b39c <OpenThread_CallBack_Processing+0xb84>
    {
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800b2a2:	4b49      	ldr	r3, [pc, #292]	; (800b3c8 <OpenThread_CallBack_Processing+0xbb0>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	6892      	ldr	r2, [r2, #8]
 800b2aa:	4610      	mov	r0, r2
          (otTcpEndpoint *) p_notification->Data[1],
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	68d2      	ldr	r2, [r2, #12]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800b2b0:	4611      	mov	r1, r2
          (const otSockAddr *) p_notification->Data[2]);
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	6912      	ldr	r2, [r2, #16]
      otTcpAcceptDoneCb((otTcpListener *) p_notification->Data[0],
 800b2b6:	4798      	blx	r3
    }
    break;
 800b2b8:	e070      	b.n	800b39c <OpenThread_CallBack_Processing+0xb84>
#endif /* OPENTHREAD_CONFIG_TCP_ENABLE */
  default:
    status = HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	71fb      	strb	r3, [r7, #7]
    break;
 800b2be:	e06e      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2c0:	bf00      	nop
 800b2c2:	e06c      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2c4:	bf00      	nop
 800b2c6:	e06a      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2c8:	bf00      	nop
 800b2ca:	e068      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2cc:	bf00      	nop
 800b2ce:	e066      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2d0:	bf00      	nop
 800b2d2:	e064      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2d4:	bf00      	nop
 800b2d6:	e062      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2d8:	bf00      	nop
 800b2da:	e060      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2dc:	bf00      	nop
 800b2de:	e05e      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2e0:	bf00      	nop
 800b2e2:	e05c      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2e4:	bf00      	nop
 800b2e6:	e05a      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2e8:	bf00      	nop
 800b2ea:	e058      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2ec:	bf00      	nop
 800b2ee:	e056      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2f0:	bf00      	nop
 800b2f2:	e054      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2f4:	bf00      	nop
 800b2f6:	e052      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2f8:	bf00      	nop
 800b2fa:	e050      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b2fc:	bf00      	nop
 800b2fe:	e04e      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b300:	bf00      	nop
 800b302:	e04c      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b304:	bf00      	nop
 800b306:	e04a      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b308:	bf00      	nop
 800b30a:	e048      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b30c:	bf00      	nop
 800b30e:	e046      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b310:	bf00      	nop
 800b312:	e044      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b314:	bf00      	nop
 800b316:	e042      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b318:	bf00      	nop
 800b31a:	e040      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b31c:	bf00      	nop
 800b31e:	e03e      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b320:	bf00      	nop
 800b322:	e03c      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b324:	bf00      	nop
 800b326:	e03a      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b328:	bf00      	nop
 800b32a:	e038      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b32c:	bf00      	nop
 800b32e:	e036      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b330:	bf00      	nop
 800b332:	e034      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b334:	bf00      	nop
 800b336:	e032      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b338:	bf00      	nop
 800b33a:	e030      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b33c:	bf00      	nop
 800b33e:	e02e      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b340:	bf00      	nop
 800b342:	e02c      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b344:	bf00      	nop
 800b346:	e02a      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b348:	bf00      	nop
 800b34a:	e028      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b34c:	bf00      	nop
 800b34e:	e026      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b350:	bf00      	nop
 800b352:	e024      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b354:	bf00      	nop
 800b356:	e022      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b358:	bf00      	nop
 800b35a:	e020      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b35c:	bf00      	nop
 800b35e:	e01e      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b360:	bf00      	nop
 800b362:	e01c      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b364:	bf00      	nop
 800b366:	e01a      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b368:	bf00      	nop
 800b36a:	e018      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b36c:	bf00      	nop
 800b36e:	e016      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
      break;
 800b370:	bf00      	nop
 800b372:	e014      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b374:	bf00      	nop
 800b376:	e012      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b378:	bf00      	nop
 800b37a:	e010      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b37c:	bf00      	nop
 800b37e:	e00e      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b380:	bf00      	nop
 800b382:	e00c      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b384:	bf00      	nop
 800b386:	e00a      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b388:	bf00      	nop
 800b38a:	e008      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b38c:	bf00      	nop
 800b38e:	e006      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b390:	bf00      	nop
 800b392:	e004      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b394:	bf00      	nop
 800b396:	e002      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b398:	bf00      	nop
 800b39a:	e000      	b.n	800b39e <OpenThread_CallBack_Processing+0xb86>
    break;
 800b39c:	bf00      	nop
  }

  TL_THREAD_SendAck();
 800b39e:	f000 fc6d 	bl	800bc7c <TL_THREAD_SendAck>
  return status;
 800b3a2:	79fb      	ldrb	r3, [r7, #7]

}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b3ac:	20000864 	.word	0x20000864
 800b3b0:	20000870 	.word	0x20000870
 800b3b4:	20000874 	.word	0x20000874
 800b3b8:	20000878 	.word	0x20000878
 800b3bc:	20000884 	.word	0x20000884
 800b3c0:	20000868 	.word	0x20000868
 800b3c4:	2000087c 	.word	0x2000087c
 800b3c8:	20000880 	.word	0x20000880

0800b3cc <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b3d2:	1d3b      	adds	r3, r7, #4
 800b3d4:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2100      	movs	r1, #0
 800b3dc:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800b3e0:	f000 f956 	bl	800b690 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	330b      	adds	r3, #11
 800b3e8:	78db      	ldrb	r3, [r3, #3]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b088      	sub	sp, #32
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b3fc:	f107 030c 	add.w	r3, r7, #12
 800b400:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800b402:	79fb      	ldrb	r3, [r7, #7]
 800b404:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800b406:	f107 020c 	add.w	r2, r7, #12
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	2101      	movs	r1, #1
 800b40e:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800b412:	f000 f93d 	bl	800b690 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	330b      	adds	r3, #11
 800b41a:	78db      	ldrb	r3, [r3, #3]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3720      	adds	r7, #32
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b088      	sub	sp, #32
 800b428:	af00      	add	r7, sp, #0
 800b42a:	4603      	mov	r3, r0
 800b42c:	460a      	mov	r2, r1
 800b42e:	71fb      	strb	r3, [r7, #7]
 800b430:	4613      	mov	r3, r2
 800b432:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b434:	f107 030c 	add.w	r3, r7, #12
 800b438:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800b43a:	79fb      	ldrb	r3, [r7, #7]
 800b43c:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 800b43e:	79bb      	ldrb	r3, [r7, #6]
 800b440:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 800b442:	f107 020c 	add.w	r2, r7, #12
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	2102      	movs	r1, #2
 800b44a:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 800b44e:	f000 f91f 	bl	800b690 <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	330b      	adds	r3, #11
 800b456:	78db      	ldrb	r3, [r3, #3]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3720      	adds	r7, #32
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800b460:	b480      	push	{r7}
 800b462:	b08b      	sub	sp, #44	; 0x2c
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800b46c:	2300      	movs	r3, #0
 800b46e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800b470:	2300      	movs	r3, #0
 800b472:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800b474:	2300      	movs	r3, #0
 800b476:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800b47c:	2300      	movs	r3, #0
 800b47e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800b488:	4b4a      	ldr	r3, [pc, #296]	; (800b5b4 <SHCI_GetWirelessFwInfo+0x154>)
 800b48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b48c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b490:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b49a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a44      	ldr	r2, [pc, #272]	; (800b5b8 <SHCI_GetWirelessFwInfo+0x158>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d10f      	bne.n	800b4cc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	695b      	ldr	r3, [r3, #20]
 800b4b0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	69db      	ldr	r3, [r3, #28]
 800b4bc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	617b      	str	r3, [r7, #20]
 800b4ca:	e01a      	b.n	800b502 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b4d4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b4d8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	695b      	ldr	r3, [r3, #20]
 800b4e8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	0e1b      	lsrs	r3, r3, #24
 800b506:	b2da      	uxtb	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	0c1b      	lsrs	r3, r3, #16
 800b510:	b2da      	uxtb	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b518:	0a1b      	lsrs	r3, r3, #8
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b522:	091b      	lsrs	r3, r3, #4
 800b524:	b2db      	uxtb	r3, r3
 800b526:	f003 030f 	and.w	r3, r3, #15
 800b52a:	b2da      	uxtb	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	b2db      	uxtb	r3, r3
 800b534:	f003 030f 	and.w	r3, r3, #15
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	0e1b      	lsrs	r3, r3, #24
 800b542:	b2da      	uxtb	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b548:	6a3b      	ldr	r3, [r7, #32]
 800b54a:	0c1b      	lsrs	r3, r3, #16
 800b54c:	b2da      	uxtb	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	0a1b      	lsrs	r3, r3, #8
 800b556:	b2da      	uxtb	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	b2da      	uxtb	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	b2da      	uxtb	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	0e1b      	lsrs	r3, r3, #24
 800b570:	b2da      	uxtb	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	0c1b      	lsrs	r3, r3, #16
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	0a1b      	lsrs	r3, r3, #8
 800b584:	b2da      	uxtb	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	0e1b      	lsrs	r3, r3, #24
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	0c1b      	lsrs	r3, r3, #16
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	372c      	adds	r7, #44	; 0x2c
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	58004000 	.word	0x58004000
 800b5b8:	a94656b9 	.word	0xa94656b9

0800b5bc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	4a08      	ldr	r2, [pc, #32]	; (800b5ec <shci_init+0x30>)
 800b5cc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b5ce:	4a08      	ldr	r2, [pc, #32]	; (800b5f0 <shci_init+0x34>)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b5d4:	4806      	ldr	r0, [pc, #24]	; (800b5f0 <shci_init+0x34>)
 800b5d6:	f000 f911 	bl	800b7fc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 f894 	bl	800b70c <TlInit>

  return;
 800b5e4:	bf00      	nop
}
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	200008a8 	.word	0x200008a8
 800b5f0:	20000888 	.word	0x20000888

0800b5f4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b5fa:	4822      	ldr	r0, [pc, #136]	; (800b684 <shci_user_evt_proc+0x90>)
 800b5fc:	f000 ffd2 	bl	800c5a4 <LST_is_empty>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d12b      	bne.n	800b65e <shci_user_evt_proc+0x6a>
 800b606:	4b20      	ldr	r3, [pc, #128]	; (800b688 <shci_user_evt_proc+0x94>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d027      	beq.n	800b65e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b60e:	f107 030c 	add.w	r3, r7, #12
 800b612:	4619      	mov	r1, r3
 800b614:	481b      	ldr	r0, [pc, #108]	; (800b684 <shci_user_evt_proc+0x90>)
 800b616:	f001 f854 	bl	800c6c2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b61a:	4b1c      	ldr	r3, [pc, #112]	; (800b68c <shci_user_evt_proc+0x98>)
 800b61c:	69db      	ldr	r3, [r3, #28]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00c      	beq.n	800b63c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b626:	2301      	movs	r3, #1
 800b628:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b62a:	4b18      	ldr	r3, [pc, #96]	; (800b68c <shci_user_evt_proc+0x98>)
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	1d3a      	adds	r2, r7, #4
 800b630:	4610      	mov	r0, r2
 800b632:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b634:	793a      	ldrb	r2, [r7, #4]
 800b636:	4b14      	ldr	r3, [pc, #80]	; (800b688 <shci_user_evt_proc+0x94>)
 800b638:	701a      	strb	r2, [r3, #0]
 800b63a:	e002      	b.n	800b642 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b63c:	4b12      	ldr	r3, [pc, #72]	; (800b688 <shci_user_evt_proc+0x94>)
 800b63e:	2201      	movs	r2, #1
 800b640:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b642:	4b11      	ldr	r3, [pc, #68]	; (800b688 <shci_user_evt_proc+0x94>)
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d004      	beq.n	800b654 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 fb91 	bl	800bd74 <TL_MM_EvtDone>
 800b652:	e004      	b.n	800b65e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4619      	mov	r1, r3
 800b658:	480a      	ldr	r0, [pc, #40]	; (800b684 <shci_user_evt_proc+0x90>)
 800b65a:	f000 ffc5 	bl	800c5e8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b65e:	4809      	ldr	r0, [pc, #36]	; (800b684 <shci_user_evt_proc+0x90>)
 800b660:	f000 ffa0 	bl	800c5a4 <LST_is_empty>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d107      	bne.n	800b67a <shci_user_evt_proc+0x86>
 800b66a:	4b07      	ldr	r3, [pc, #28]	; (800b688 <shci_user_evt_proc+0x94>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b672:	4804      	ldr	r0, [pc, #16]	; (800b684 <shci_user_evt_proc+0x90>)
 800b674:	f7f6 fc84 	bl	8001f80 <shci_notify_asynch_evt>
  }


  return;
 800b678:	bf00      	nop
 800b67a:	bf00      	nop
}
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	20000094 	.word	0x20000094
 800b688:	200000a4 	.word	0x200000a4
 800b68c:	20000888 	.word	0x20000888

0800b690 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	60ba      	str	r2, [r7, #8]
 800b698:	607b      	str	r3, [r7, #4]
 800b69a:	4603      	mov	r3, r0
 800b69c:	81fb      	strh	r3, [r7, #14]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	f000 f864 	bl	800b770 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b6a8:	4b16      	ldr	r3, [pc, #88]	; (800b704 <shci_send+0x74>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	89fa      	ldrh	r2, [r7, #14]
 800b6ae:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b6b2:	4b14      	ldr	r3, [pc, #80]	; (800b704 <shci_send+0x74>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	7b7a      	ldrb	r2, [r7, #13]
 800b6b8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b6ba:	4b12      	ldr	r3, [pc, #72]	; (800b704 <shci_send+0x74>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	330c      	adds	r3, #12
 800b6c0:	7b7a      	ldrb	r2, [r7, #13]
 800b6c2:	68b9      	ldr	r1, [r7, #8]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f001 fc47 	bl	800cf58 <memcpy>

  shciContext.io.Send(0,0);
 800b6ca:	4b0f      	ldr	r3, [pc, #60]	; (800b708 <shci_send+0x78>)
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b6d4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b6d8:	f7f6 fc69 	bl	8001fae <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f103 0008 	add.w	r0, r3, #8
 800b6e2:	4b08      	ldr	r3, [pc, #32]	; (800b704 <shci_send+0x74>)
 800b6e4:	6819      	ldr	r1, [r3, #0]
 800b6e6:	4b07      	ldr	r3, [pc, #28]	; (800b704 <shci_send+0x74>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	789b      	ldrb	r3, [r3, #2]
 800b6ec:	3303      	adds	r3, #3
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	f001 fc32 	bl	800cf58 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	f000 f83b 	bl	800b770 <Cmd_SetStatus>

  return;
 800b6fa:	bf00      	nop
}
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	200000a0 	.word	0x200000a0
 800b708:	20000888 	.word	0x20000888

0800b70c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b714:	4a10      	ldr	r2, [pc, #64]	; (800b758 <TlInit+0x4c>)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b71a:	4810      	ldr	r0, [pc, #64]	; (800b75c <TlInit+0x50>)
 800b71c:	f000 ff32 	bl	800c584 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b720:	2001      	movs	r0, #1
 800b722:	f000 f825 	bl	800b770 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b726:	4b0e      	ldr	r3, [pc, #56]	; (800b760 <TlInit+0x54>)
 800b728:	2201      	movs	r2, #1
 800b72a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b72c:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <TlInit+0x58>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00c      	beq.n	800b74e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b738:	4b0b      	ldr	r3, [pc, #44]	; (800b768 <TlInit+0x5c>)
 800b73a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b73c:	4b0b      	ldr	r3, [pc, #44]	; (800b76c <TlInit+0x60>)
 800b73e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b740:	4b08      	ldr	r3, [pc, #32]	; (800b764 <TlInit+0x58>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f107 020c 	add.w	r2, r7, #12
 800b748:	4610      	mov	r0, r2
 800b74a:	4798      	blx	r3
  }

  return;
 800b74c:	bf00      	nop
 800b74e:	bf00      	nop
}
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	200000a0 	.word	0x200000a0
 800b75c:	20000094 	.word	0x20000094
 800b760:	200000a4 	.word	0x200000a4
 800b764:	20000888 	.word	0x20000888
 800b768:	0800b7c1 	.word	0x0800b7c1
 800b76c:	0800b7d9 	.word	0x0800b7d9

0800b770 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	4603      	mov	r3, r0
 800b778:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b77a:	79fb      	ldrb	r3, [r7, #7]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10b      	bne.n	800b798 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b780:	4b0d      	ldr	r3, [pc, #52]	; (800b7b8 <Cmd_SetStatus+0x48>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d003      	beq.n	800b790 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b788:	4b0b      	ldr	r3, [pc, #44]	; (800b7b8 <Cmd_SetStatus+0x48>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2000      	movs	r0, #0
 800b78e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b790:	4b0a      	ldr	r3, [pc, #40]	; (800b7bc <Cmd_SetStatus+0x4c>)
 800b792:	2200      	movs	r2, #0
 800b794:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b796:	e00b      	b.n	800b7b0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b798:	4b08      	ldr	r3, [pc, #32]	; (800b7bc <Cmd_SetStatus+0x4c>)
 800b79a:	2201      	movs	r2, #1
 800b79c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b79e:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <Cmd_SetStatus+0x48>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d004      	beq.n	800b7b0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b7a6:	4b04      	ldr	r3, [pc, #16]	; (800b7b8 <Cmd_SetStatus+0x48>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2001      	movs	r0, #1
 800b7ac:	4798      	blx	r3
  return;
 800b7ae:	bf00      	nop
 800b7b0:	bf00      	nop
}
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	200008a8 	.word	0x200008a8
 800b7bc:	2000009c 	.word	0x2000009c

0800b7c0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	f7f6 fbe5 	bl	8001f98 <shci_cmd_resp_release>

  return;
 800b7ce:	bf00      	nop
}
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
	...

0800b7d8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b7e0:	6879      	ldr	r1, [r7, #4]
 800b7e2:	4805      	ldr	r0, [pc, #20]	; (800b7f8 <TlUserEvtReceived+0x20>)
 800b7e4:	f000 ff26 	bl	800c634 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b7e8:	4803      	ldr	r0, [pc, #12]	; (800b7f8 <TlUserEvtReceived+0x20>)
 800b7ea:	f7f6 fbc9 	bl	8001f80 <shci_notify_asynch_evt>

  return;
 800b7ee:	bf00      	nop
}
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000094 	.word	0x20000094

0800b7fc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a05      	ldr	r2, [pc, #20]	; (800b81c <shci_register_io_bus+0x20>)
 800b808:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a04      	ldr	r2, [pc, #16]	; (800b820 <shci_register_io_bus+0x24>)
 800b80e:	611a      	str	r2, [r3, #16]

  return;
 800b810:	bf00      	nop
}
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr
 800b81c:	0800bb09 	.word	0x0800bb09
 800b820:	0800bb5d 	.word	0x0800bb5d

0800b824 <otThreadSetEnabled>:
#if OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE
extern otThreadAnycastLocatorCallback otThreadAnycastLocatorCb;
#endif // OPENTHREAD_CONFIG_TMF_ANYCAST_LOCATOR_ENABLE

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800b830:	f7f5 fdbe 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b834:	f7f5 fd4e 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b838:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b842:	701a      	strb	r2, [r3, #0]
 800b844:	2200      	movs	r2, #0
 800b846:	705a      	strb	r2, [r3, #1]
 800b848:	2200      	movs	r2, #0
 800b84a:	709a      	strb	r2, [r3, #2]
 800b84c:	2200      	movs	r2, #0
 800b84e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	f042 0201 	orr.w	r2, r2, #1
 800b858:	711a      	strb	r2, [r3, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	715a      	strb	r2, [r3, #5]
 800b85e:	2200      	movs	r2, #0
 800b860:	719a      	strb	r2, [r3, #6]
 800b862:	2200      	movs	r2, #0
 800b864:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800b866:	78fa      	ldrb	r2, [r7, #3]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800b86c:	f7f5 fd7a 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b870:	f7f5 fd3c 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b874:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	b2db      	uxtb	r3, r3
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800b88e:	f7f5 fd8f 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b892:	f7f5 fd1f 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b896:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
 800b8a0:	701a      	strb	r2, [r3, #0]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	705a      	strb	r2, [r3, #1]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	709a      	strb	r2, [r3, #2]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f042 0203 	orr.w	r2, r2, #3
 800b8b6:	711a      	strb	r2, [r3, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	715a      	strb	r2, [r3, #5]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	719a      	strb	r2, [r3, #6]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 800b8c4:	783b      	ldrb	r3, [r7, #0]
 800b8c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mDeviceType;
 800b8d2:	783b      	ldrb	r3, [r7, #0]
 800b8d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	461a      	mov	r2, r3
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mNetworkData;
 800b8e0:	783b      	ldrb	r3, [r7, #0]
 800b8e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 800b8ee:	f7f5 fd39 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b8f2:	f7f5 fcfb 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b8f6:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	b2db      	uxtb	r3, r3
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <otThreadSetNetworkKey>:
  return (otNetworkKeyRef)p_ot_req->Data[0];
}
#endif

otError otThreadSetNetworkKey(otInstance *aInstance, const otNetworkKey *aKey)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b084      	sub	sp, #16
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800b910:	f7f5 fd4e 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b914:	f7f5 fcde 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b918:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_KEY;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f042 026f 	orr.w	r2, r2, #111	; 0x6f
 800b922:	701a      	strb	r2, [r3, #0]
 800b924:	2200      	movs	r2, #0
 800b926:	705a      	strb	r2, [r3, #1]
 800b928:	2200      	movs	r2, #0
 800b92a:	709a      	strb	r2, [r3, #2]
 800b92c:	2200      	movs	r2, #0
 800b92e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	f042 0201 	orr.w	r2, r2, #1
 800b938:	711a      	strb	r2, [r3, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	715a      	strb	r2, [r3, #5]
 800b93e:	2200      	movs	r2, #0
 800b940:	719a      	strb	r2, [r3, #6]
 800b942:	2200      	movs	r2, #0
 800b944:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800b94c:	f7f5 fd0a 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b950:	f7f5 fccc 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b954:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	b2db      	uxtb	r3, r3
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800b96c:	f7f5 fd20 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b970:	f7f5 fcb0 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b974:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f062 0279 	orn	r2, r2, #121	; 0x79
 800b97e:	701a      	strb	r2, [r3, #0]
 800b980:	2200      	movs	r2, #0
 800b982:	705a      	strb	r2, [r3, #1]
 800b984:	2200      	movs	r2, #0
 800b986:	709a      	strb	r2, [r3, #2]
 800b988:	2200      	movs	r2, #0
 800b98a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	711a      	strb	r2, [r3, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	715a      	strb	r2, [r3, #5]
 800b996:	2200      	movs	r2, #0
 800b998:	719a      	strb	r2, [r3, #6]
 800b99a:	2200      	movs	r2, #0
 800b99c:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800b99e:	f7f5 fce1 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b9a2:	f7f5 fca3 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b9a6:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	b2db      	uxtb	r3, r3
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <otThreadGetParentLastRssi>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otThreadGetParentLastRssi(otInstance *aInstance, int8_t *aLastRssi)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b084      	sub	sp, #16
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800b9c0:	f7f5 fcf6 	bl	80013b0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b9c4:	f7f5 fc86 	bl	80012d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b9c8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_PARENT_LAST_RSSI;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f062 0270 	orn	r2, r2, #112	; 0x70
 800b9d2:	701a      	strb	r2, [r3, #0]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	705a      	strb	r2, [r3, #1]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	709a      	strb	r2, [r3, #2]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f042 0201 	orr.w	r2, r2, #1
 800b9e8:	711a      	strb	r2, [r3, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	715a      	strb	r2, [r3, #5]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	719a      	strb	r2, [r3, #6]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aLastRssi;
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800b9fc:	f7f5 fcb2 	bl	8001364 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ba00:	f7f5 fc74 	bl	80012ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800ba04:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	b2db      	uxtb	r3, r3
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ba18:	f7f5 ff92 	bl	8001940 <HW_IPCC_Enable>

  return;
 800ba1c:	bf00      	nop
}
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <TL_Init>:


void TL_Init( void )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ba24:	4b10      	ldr	r3, [pc, #64]	; (800ba68 <TL_Init+0x48>)
 800ba26:	4a11      	ldr	r2, [pc, #68]	; (800ba6c <TL_Init+0x4c>)
 800ba28:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ba2a:	4b0f      	ldr	r3, [pc, #60]	; (800ba68 <TL_Init+0x48>)
 800ba2c:	4a10      	ldr	r2, [pc, #64]	; (800ba70 <TL_Init+0x50>)
 800ba2e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ba30:	4b0d      	ldr	r3, [pc, #52]	; (800ba68 <TL_Init+0x48>)
 800ba32:	4a10      	ldr	r2, [pc, #64]	; (800ba74 <TL_Init+0x54>)
 800ba34:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ba36:	4b0c      	ldr	r3, [pc, #48]	; (800ba68 <TL_Init+0x48>)
 800ba38:	4a0f      	ldr	r2, [pc, #60]	; (800ba78 <TL_Init+0x58>)
 800ba3a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <TL_Init+0x48>)
 800ba3e:	4a0f      	ldr	r2, [pc, #60]	; (800ba7c <TL_Init+0x5c>)
 800ba40:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ba42:	4b09      	ldr	r3, [pc, #36]	; (800ba68 <TL_Init+0x48>)
 800ba44:	4a0e      	ldr	r2, [pc, #56]	; (800ba80 <TL_Init+0x60>)
 800ba46:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ba48:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <TL_Init+0x48>)
 800ba4a:	4a0e      	ldr	r2, [pc, #56]	; (800ba84 <TL_Init+0x64>)
 800ba4c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ba4e:	4b06      	ldr	r3, [pc, #24]	; (800ba68 <TL_Init+0x48>)
 800ba50:	4a0d      	ldr	r2, [pc, #52]	; (800ba88 <TL_Init+0x68>)
 800ba52:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ba54:	4b04      	ldr	r3, [pc, #16]	; (800ba68 <TL_Init+0x48>)
 800ba56:	4a0d      	ldr	r2, [pc, #52]	; (800ba8c <TL_Init+0x6c>)
 800ba58:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ba5a:	4b03      	ldr	r3, [pc, #12]	; (800ba68 <TL_Init+0x48>)
 800ba5c:	4a0c      	ldr	r2, [pc, #48]	; (800ba90 <TL_Init+0x70>)
 800ba5e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ba60:	f7f5 ff82 	bl	8001968 <HW_IPCC_Init>

  return;
 800ba64:	bf00      	nop
}
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	20030000 	.word	0x20030000
 800ba6c:	20030038 	.word	0x20030038
 800ba70:	20030058 	.word	0x20030058
 800ba74:	20030068 	.word	0x20030068
 800ba78:	20030078 	.word	0x20030078
 800ba7c:	20030080 	.word	0x20030080
 800ba80:	20030088 	.word	0x20030088
 800ba84:	20030090 	.word	0x20030090
 800ba88:	200300ac 	.word	0x200300ac
 800ba8c:	200300b0 	.word	0x200300b0
 800ba90:	200300bc 	.word	0x200300bc

0800ba94 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ba9a:	e01c      	b.n	800bad6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ba9c:	1d3b      	adds	r3, r7, #4
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4812      	ldr	r0, [pc, #72]	; (800baec <HW_IPCC_BLE_RxEvtNot+0x58>)
 800baa2:	f000 fe0e 	bl	800c6c2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	7a5b      	ldrb	r3, [r3, #9]
 800baaa:	2b0f      	cmp	r3, #15
 800baac:	d003      	beq.n	800bab6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	7a5b      	ldrb	r3, [r3, #9]
 800bab2:	2b0e      	cmp	r3, #14
 800bab4:	d105      	bne.n	800bac2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4619      	mov	r1, r3
 800baba:	2002      	movs	r0, #2
 800babc:	f000 f9be 	bl	800be3c <OutputDbgTrace>
 800bac0:	e004      	b.n	800bacc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4619      	mov	r1, r3
 800bac6:	2003      	movs	r0, #3
 800bac8:	f000 f9b8 	bl	800be3c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800bacc:	4b08      	ldr	r3, [pc, #32]	; (800baf0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	4610      	mov	r0, r2
 800bad4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800bad6:	4805      	ldr	r0, [pc, #20]	; (800baec <HW_IPCC_BLE_RxEvtNot+0x58>)
 800bad8:	f000 fd64 	bl	800c5a4 <LST_is_empty>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d0dc      	beq.n	800ba9c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800bae2:	bf00      	nop
}
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200300d8 	.word	0x200300d8
 800baf0:	200008b4 	.word	0x200008b4

0800baf4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800baf8:	4b02      	ldr	r3, [pc, #8]	; (800bb04 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4798      	blx	r3

  return;
 800bafe:	bf00      	nop
}
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	200008b8 	.word	0x200008b8

0800bb08 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800bb14:	480d      	ldr	r0, [pc, #52]	; (800bb4c <TL_SYS_Init+0x44>)
 800bb16:	f000 fd35 	bl	800c584 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800bb1a:	4b0d      	ldr	r3, [pc, #52]	; (800bb50 <TL_SYS_Init+0x48>)
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	689a      	ldr	r2, [r3, #8]
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	4a08      	ldr	r2, [pc, #32]	; (800bb4c <TL_SYS_Init+0x44>)
 800bb2c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800bb2e:	f7f5 ff49 	bl	80019c4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a07      	ldr	r2, [pc, #28]	; (800bb54 <TL_SYS_Init+0x4c>)
 800bb38:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	4a06      	ldr	r2, [pc, #24]	; (800bb58 <TL_SYS_Init+0x50>)
 800bb40:	6013      	str	r3, [r2, #0]

  return 0;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	200300e0 	.word	0x200300e0
 800bb50:	20030000 	.word	0x20030000
 800bb54:	200008bc 	.word	0x200008bc
 800bb58:	200008c0 	.word	0x200008c0

0800bb5c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800bb68:	4b09      	ldr	r3, [pc, #36]	; (800bb90 <TL_SYS_SendCmd+0x34>)
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2210      	movs	r2, #16
 800bb70:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800bb72:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <TL_SYS_SendCmd+0x34>)
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4619      	mov	r1, r3
 800bb7a:	2004      	movs	r0, #4
 800bb7c:	f000 f95e 	bl	800be3c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800bb80:	f7f5 ff2a 	bl	80019d8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20030000 	.word	0x20030000

0800bb94 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800bb98:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4619      	mov	r1, r3
 800bba0:	2005      	movs	r0, #5
 800bba2:	f000 f94b 	bl	800be3c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800bba6:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a03      	ldr	r2, [pc, #12]	; (800bbb8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800bbac:	68d2      	ldr	r2, [r2, #12]
 800bbae:	6812      	ldr	r2, [r2, #0]
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	4798      	blx	r3

  return;
 800bbb4:	bf00      	nop
}
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	20030000 	.word	0x20030000
 800bbbc:	200008bc 	.word	0x200008bc

0800bbc0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800bbc6:	e00e      	b.n	800bbe6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800bbc8:	1d3b      	adds	r3, r7, #4
 800bbca:	4619      	mov	r1, r3
 800bbcc:	480b      	ldr	r0, [pc, #44]	; (800bbfc <HW_IPCC_SYS_EvtNot+0x3c>)
 800bbce:	f000 fd78 	bl	800c6c2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	2006      	movs	r0, #6
 800bbd8:	f000 f930 	bl	800be3c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800bbdc:	4b08      	ldr	r3, [pc, #32]	; (800bc00 <HW_IPCC_SYS_EvtNot+0x40>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800bbe6:	4805      	ldr	r0, [pc, #20]	; (800bbfc <HW_IPCC_SYS_EvtNot+0x3c>)
 800bbe8:	f000 fcdc 	bl	800c5a4 <LST_is_empty>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d0ea      	beq.n	800bbc8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800bbf2:	bf00      	nop
}
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	200300e0 	.word	0x200300e0
 800bc00:	200008c0 	.word	0x200008c0

0800bc04 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800bc0c:	4b0c      	ldr	r3, [pc, #48]	; (800bc40 <TL_THREAD_Init+0x3c>)
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	689a      	ldr	r2, [r3, #8]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	601a      	str	r2, [r3, #0]
  p_thread_table->clinot_buffer = p_Config->p_ThreadCliNotBuffer;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68da      	ldr	r2, [r3, #12]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	60da      	str	r2, [r3, #12]

  HW_IPCC_THREAD_Init();
 800bc32:	f7f5 fef7 	bl	8001a24 <HW_IPCC_THREAD_Init>

  return;
 800bc36:	bf00      	nop
}
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	20030000 	.word	0x20030000

0800bc44 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800bc48:	4b04      	ldr	r3, [pc, #16]	; (800bc5c <TL_OT_SendCmd+0x18>)
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	2208      	movs	r2, #8
 800bc50:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800bc52:	f7f5 fef5 	bl	8001a40 <HW_IPCC_OT_SendCmd>

  return;
 800bc56:	bf00      	nop
}
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	20030000 	.word	0x20030000

0800bc60 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800bc64:	4b04      	ldr	r3, [pc, #16]	; (800bc78 <TL_CLI_SendCmd+0x18>)
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	220a      	movs	r2, #10
 800bc6c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800bc6e:	f7f5 fef5 	bl	8001a5c <HW_IPCC_CLI_SendCmd>

  return;
 800bc72:	bf00      	nop
}
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20030000 	.word	0x20030000

0800bc7c <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800bc80:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <TL_THREAD_SendAck+0x18>)
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	220d      	movs	r2, #13
 800bc88:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800bc8a:	f7f5 fef1 	bl	8001a70 <HW_IPCC_THREAD_SendAck>

  return;
 800bc8e:	bf00      	nop
}
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20030000 	.word	0x20030000

0800bc98 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800bc9c:	4b04      	ldr	r3, [pc, #16]	; (800bcb0 <TL_THREAD_CliSendAck+0x18>)
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	220d      	movs	r2, #13
 800bca4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800bca6:	f7f5 fef1 	bl	8001a8c <HW_IPCC_THREAD_CliSendAck>

  return;
 800bcaa:	bf00      	nop
}
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	20030000 	.word	0x20030000

0800bcb4 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800bcb8:	4b03      	ldr	r3, [pc, #12]	; (800bcc8 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7f5 fb56 	bl	8001370 <TL_OT_CmdEvtReceived>

  return;
 800bcc4:	bf00      	nop
}
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	20030000 	.word	0x20030000

0800bccc <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800bcd0:	4b03      	ldr	r3, [pc, #12]	; (800bce0 <HW_IPCC_THREAD_EvtNot+0x14>)
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7f5 fb5a 	bl	8001390 <TL_THREAD_NotReceived>

  return;
 800bcdc:	bf00      	nop
}
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20030000 	.word	0x20030000

0800bce4 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clinot_buffer) );
 800bce8:	4b03      	ldr	r3, [pc, #12]	; (800bcf8 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7f5 fc24 	bl	800153c <TL_THREAD_CliNotReceived>

  return;
 800bcf4:	bf00      	nop
}
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	20030000 	.word	0x20030000

0800bcfc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800bd04:	4817      	ldr	r0, [pc, #92]	; (800bd64 <TL_MM_Init+0x68>)
 800bd06:	f000 fc3d 	bl	800c584 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800bd0a:	4817      	ldr	r0, [pc, #92]	; (800bd68 <TL_MM_Init+0x6c>)
 800bd0c:	f000 fc3a 	bl	800c584 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800bd10:	4b16      	ldr	r3, [pc, #88]	; (800bd6c <TL_MM_Init+0x70>)
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	4a16      	ldr	r2, [pc, #88]	; (800bd70 <TL_MM_Init+0x74>)
 800bd16:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800bd18:	4b15      	ldr	r3, [pc, #84]	; (800bd70 <TL_MM_Init+0x74>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	6892      	ldr	r2, [r2, #8]
 800bd20:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800bd22:	4b13      	ldr	r3, [pc, #76]	; (800bd70 <TL_MM_Init+0x74>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	68d2      	ldr	r2, [r2, #12]
 800bd2a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800bd2c:	4b10      	ldr	r3, [pc, #64]	; (800bd70 <TL_MM_Init+0x74>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a0c      	ldr	r2, [pc, #48]	; (800bd64 <TL_MM_Init+0x68>)
 800bd32:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800bd34:	4b0e      	ldr	r3, [pc, #56]	; (800bd70 <TL_MM_Init+0x74>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	6812      	ldr	r2, [r2, #0]
 800bd3c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800bd3e:	4b0c      	ldr	r3, [pc, #48]	; (800bd70 <TL_MM_Init+0x74>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	6852      	ldr	r2, [r2, #4]
 800bd46:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800bd48:	4b09      	ldr	r3, [pc, #36]	; (800bd70 <TL_MM_Init+0x74>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	6912      	ldr	r2, [r2, #16]
 800bd50:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800bd52:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <TL_MM_Init+0x74>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	6952      	ldr	r2, [r2, #20]
 800bd5a:	619a      	str	r2, [r3, #24]

  return;
 800bd5c:	bf00      	nop
}
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	200300c8 	.word	0x200300c8
 800bd68:	200008ac 	.word	0x200008ac
 800bd6c:	20030000 	.word	0x20030000
 800bd70:	200008c4 	.word	0x200008c4

0800bd74 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	4807      	ldr	r0, [pc, #28]	; (800bd9c <TL_MM_EvtDone+0x28>)
 800bd80:	f000 fc58 	bl	800c634 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800bd84:	6879      	ldr	r1, [r7, #4]
 800bd86:	2000      	movs	r0, #0
 800bd88:	f000 f858 	bl	800be3c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800bd8c:	4804      	ldr	r0, [pc, #16]	; (800bda0 <TL_MM_EvtDone+0x2c>)
 800bd8e:	f7f5 feaf 	bl	8001af0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800bd92:	bf00      	nop
}
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	200008ac 	.word	0x200008ac
 800bda0:	0800bda5 	.word	0x0800bda5

0800bda4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bdaa:	e00c      	b.n	800bdc6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800bdac:	1d3b      	adds	r3, r7, #4
 800bdae:	4619      	mov	r1, r3
 800bdb0:	480a      	ldr	r0, [pc, #40]	; (800bddc <SendFreeBuf+0x38>)
 800bdb2:	f000 fc86 	bl	800c6c2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800bdb6:	4b0a      	ldr	r3, [pc, #40]	; (800bde0 <SendFreeBuf+0x3c>)
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f000 fc37 	bl	800c634 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bdc6:	4805      	ldr	r0, [pc, #20]	; (800bddc <SendFreeBuf+0x38>)
 800bdc8:	f000 fbec 	bl	800c5a4 <LST_is_empty>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d0ec      	beq.n	800bdac <SendFreeBuf+0x8>
  }

  return;
 800bdd2:	bf00      	nop
}
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	200008ac 	.word	0x200008ac
 800bde0:	20030000 	.word	0x20030000

0800bde4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800bde8:	4805      	ldr	r0, [pc, #20]	; (800be00 <TL_TRACES_Init+0x1c>)
 800bdea:	f000 fbcb 	bl	800c584 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800bdee:	4b05      	ldr	r3, [pc, #20]	; (800be04 <TL_TRACES_Init+0x20>)
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	4a03      	ldr	r2, [pc, #12]	; (800be00 <TL_TRACES_Init+0x1c>)
 800bdf4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800bdf6:	f7f5 feb1 	bl	8001b5c <HW_IPCC_TRACES_Init>

  return;
 800bdfa:	bf00      	nop
}
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	200300d0 	.word	0x200300d0
 800be04:	20030000 	.word	0x20030000

0800be08 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800be0e:	e008      	b.n	800be22 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800be10:	1d3b      	adds	r3, r7, #4
 800be12:	4619      	mov	r1, r3
 800be14:	4808      	ldr	r0, [pc, #32]	; (800be38 <HW_IPCC_TRACES_EvtNot+0x30>)
 800be16:	f000 fc54 	bl	800c6c2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7f6 f8d1 	bl	8001fc4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800be22:	4805      	ldr	r0, [pc, #20]	; (800be38 <HW_IPCC_TRACES_EvtNot+0x30>)
 800be24:	f000 fbbe 	bl	800c5a4 <LST_is_empty>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d0f0      	beq.n	800be10 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800be2e:	bf00      	nop
}
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	200300d0 	.word	0x200300d0

0800be3c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	4603      	mov	r3, r0
 800be44:	6039      	str	r1, [r7, #0]
 800be46:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	2b06      	cmp	r3, #6
 800be4c:	d845      	bhi.n	800beda <OutputDbgTrace+0x9e>
 800be4e:	a201      	add	r2, pc, #4	; (adr r2, 800be54 <OutputDbgTrace+0x18>)
 800be50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be54:	0800be71 	.word	0x0800be71
 800be58:	0800be95 	.word	0x0800be95
 800be5c:	0800be9b 	.word	0x0800be9b
 800be60:	0800beaf 	.word	0x0800beaf
 800be64:	0800bebb 	.word	0x0800bebb
 800be68:	0800bec1 	.word	0x0800bec1
 800be6c:	0800becf 	.word	0x0800becf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	7a5b      	ldrb	r3, [r3, #9]
 800be78:	2bff      	cmp	r3, #255	; 0xff
 800be7a:	d005      	beq.n	800be88 <OutputDbgTrace+0x4c>
 800be7c:	2bff      	cmp	r3, #255	; 0xff
 800be7e:	dc05      	bgt.n	800be8c <OutputDbgTrace+0x50>
 800be80:	2b0e      	cmp	r3, #14
 800be82:	d005      	beq.n	800be90 <OutputDbgTrace+0x54>
 800be84:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800be86:	e001      	b.n	800be8c <OutputDbgTrace+0x50>
          break;
 800be88:	bf00      	nop
 800be8a:	e027      	b.n	800bedc <OutputDbgTrace+0xa0>
          break;
 800be8c:	bf00      	nop
 800be8e:	e025      	b.n	800bedc <OutputDbgTrace+0xa0>
          break;
 800be90:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800be92:	e023      	b.n	800bedc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800be98:	e020      	b.n	800bedc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	7a5b      	ldrb	r3, [r3, #9]
 800bea2:	2b0e      	cmp	r3, #14
 800bea4:	d001      	beq.n	800beaa <OutputDbgTrace+0x6e>
 800bea6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800bea8:	e000      	b.n	800beac <OutputDbgTrace+0x70>
          break;
 800beaa:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800beac:	e016      	b.n	800bedc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	7a5b      	ldrb	r3, [r3, #9]
 800beb6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800beb8:	e010      	b.n	800bedc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800bebe:	e00d      	b.n	800bedc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	7a5b      	ldrb	r3, [r3, #9]
 800bec8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800beca:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800becc:	e006      	b.n	800bedc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	7a5b      	ldrb	r3, [r3, #9]
 800bed6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800bed8:	e000      	b.n	800bedc <OutputDbgTrace+0xa0>

    default:
      break;
 800beda:	bf00      	nop
  }

  return;
 800bedc:	bf00      	nop
}
 800bede:	3714      	adds	r7, #20
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800beee:	f3ef 8310 	mrs	r3, PRIMASK
 800bef2:	60fb      	str	r3, [r7, #12]
  return(result);
 800bef4:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800bef6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bef8:	b672      	cpsid	i
}
 800befa:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800befc:	1cbb      	adds	r3, r7, #2
 800befe:	4619      	mov	r1, r3
 800bf00:	4812      	ldr	r0, [pc, #72]	; (800bf4c <DbgTrace_TxCpltCallback+0x64>)
 800bf02:	f000 fe56 	bl	800cbb2 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800bf06:	1cbb      	adds	r3, r7, #2
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4810      	ldr	r0, [pc, #64]	; (800bf4c <DbgTrace_TxCpltCallback+0x64>)
 800bf0c:	f000 ff42 	bl	800cd94 <CircularQueue_Sense>
 800bf10:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00c      	beq.n	800bf32 <DbgTrace_TxCpltCallback+0x4a>
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f383 8810 	msr	PRIMASK, r3
}
 800bf22:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800bf24:	887b      	ldrh	r3, [r7, #2]
 800bf26:	4a0a      	ldr	r2, [pc, #40]	; (800bf50 <DbgTrace_TxCpltCallback+0x68>)
 800bf28:	4619      	mov	r1, r3
 800bf2a:	6938      	ldr	r0, [r7, #16]
 800bf2c:	f7f6 f865 	bl	8001ffa <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800bf30:	e008      	b.n	800bf44 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800bf32:	4b08      	ldr	r3, [pc, #32]	; (800bf54 <DbgTrace_TxCpltCallback+0x6c>)
 800bf34:	2201      	movs	r2, #1
 800bf36:	701a      	strb	r2, [r3, #0]
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f383 8810 	msr	PRIMASK, r3
}
 800bf42:	bf00      	nop
}
 800bf44:	bf00      	nop
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	200008c8 	.word	0x200008c8
 800bf50:	0800bee9 	.word	0x0800bee9
 800bf54:	20000025 	.word	0x20000025

0800bf58 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800bf5e:	f7f6 f846 	bl	8001fee <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800bf62:	2302      	movs	r3, #2
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	2300      	movs	r3, #0
 800bf68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bf6c:	4903      	ldr	r1, [pc, #12]	; (800bf7c <DbgTraceInit+0x24>)
 800bf6e:	4804      	ldr	r0, [pc, #16]	; (800bf80 <DbgTraceInit+0x28>)
 800bf70:	f000 fbc6 	bl	800c700 <CircularQueue_Init>
#endif 
#endif
  return;
 800bf74:	bf00      	nop
}
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	200008e8 	.word	0x200008e8
 800bf80:	200008c8 	.word	0x200008c8

0800bf84 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	68b9      	ldr	r1, [r7, #8]
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f000 f805 	bl	800bfa4 <DbgTraceWrite>
 800bf9a:	4603      	mov	r3, r0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b08a      	sub	sp, #40	; 0x28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfb4:	f3ef 8310 	mrs	r3, PRIMASK
 800bfb8:	61bb      	str	r3, [r7, #24]
  return(result);
 800bfba:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800bfbc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc4:	d102      	bne.n	800bfcc <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfca:	e037      	b.n	800c03c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d006      	beq.n	800bfe0 <DbgTraceWrite+0x3c>
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d003      	beq.n	800bfe0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800bfd8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfdc:	627b      	str	r3, [r7, #36]	; 0x24
 800bfde:	e02d      	b.n	800c03c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d02a      	beq.n	800c03c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800bfea:	b672      	cpsid	i
}
 800bfec:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	2301      	movs	r3, #1
 800bff4:	68b9      	ldr	r1, [r7, #8]
 800bff6:	4814      	ldr	r0, [pc, #80]	; (800c048 <DbgTraceWrite+0xa4>)
 800bff8:	f000 fbb4 	bl	800c764 <CircularQueue_Add>
 800bffc:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d015      	beq.n	800c030 <DbgTraceWrite+0x8c>
 800c004:	4b11      	ldr	r3, [pc, #68]	; (800c04c <DbgTraceWrite+0xa8>)
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d010      	beq.n	800c030 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800c00e:	4b0f      	ldr	r3, [pc, #60]	; (800c04c <DbgTraceWrite+0xa8>)
 800c010:	2200      	movs	r2, #0
 800c012:	701a      	strb	r2, [r3, #0]
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	f383 8810 	msr	PRIMASK, r3
}
 800c01e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	b29b      	uxth	r3, r3
 800c024:	4a0a      	ldr	r2, [pc, #40]	; (800c050 <DbgTraceWrite+0xac>)
 800c026:	4619      	mov	r1, r3
 800c028:	69f8      	ldr	r0, [r7, #28]
 800c02a:	f7f5 ffe6 	bl	8001ffa <DbgOutputTraces>
 800c02e:	e005      	b.n	800c03c <DbgTraceWrite+0x98>
 800c030:	6a3b      	ldr	r3, [r7, #32]
 800c032:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	f383 8810 	msr	PRIMASK, r3
}
 800c03a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3728      	adds	r7, #40	; 0x28
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	200008c8 	.word	0x200008c8
 800c04c:	20000025 	.word	0x20000025
 800c050:	0800bee9 	.word	0x0800bee9

0800c054 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	4603      	mov	r3, r0
 800c05c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c05e:	4b0f      	ldr	r3, [pc, #60]	; (800c09c <OTP_Read+0x48>)
 800c060:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c062:	e002      	b.n	800c06a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	3b08      	subs	r3, #8
 800c068:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3307      	adds	r3, #7
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	79fa      	ldrb	r2, [r7, #7]
 800c072:	429a      	cmp	r2, r3
 800c074:	d003      	beq.n	800c07e <OTP_Read+0x2a>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	4a09      	ldr	r2, [pc, #36]	; (800c0a0 <OTP_Read+0x4c>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d1f2      	bne.n	800c064 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3307      	adds	r3, #7
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	79fa      	ldrb	r2, [r7, #7]
 800c086:	429a      	cmp	r2, r3
 800c088:	d001      	beq.n	800c08e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c08a:	2300      	movs	r3, #0
 800c08c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c08e:	68fb      	ldr	r3, [r7, #12]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	1fff73f8 	.word	0x1fff73f8
 800c0a0:	1fff7000 	.word	0x1fff7000

0800c0a4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c0a8:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <UTIL_LPM_Init+0x1c>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c0ae:	4b05      	ldr	r3, [pc, #20]	; (800c0c4 <UTIL_LPM_Init+0x20>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c0b4:	bf00      	nop
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	200018e8 	.word	0x200018e8
 800c0c4:	200018ec 	.word	0x200018ec

0800c0c8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b087      	sub	sp, #28
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c0d8:	613b      	str	r3, [r7, #16]
  return(result);
 800c0da:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c0dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0de:	b672      	cpsid	i
}
 800c0e0:	bf00      	nop

  switch( state )
 800c0e2:	78fb      	ldrb	r3, [r7, #3]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d008      	beq.n	800c0fa <UTIL_LPM_SetStopMode+0x32>
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d10e      	bne.n	800c10a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800c0ec:	4b0d      	ldr	r3, [pc, #52]	; (800c124 <UTIL_LPM_SetStopMode+0x5c>)
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	4a0b      	ldr	r2, [pc, #44]	; (800c124 <UTIL_LPM_SetStopMode+0x5c>)
 800c0f6:	6013      	str	r3, [r2, #0]
      break;
 800c0f8:	e008      	b.n	800c10c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	43da      	mvns	r2, r3
 800c0fe:	4b09      	ldr	r3, [pc, #36]	; (800c124 <UTIL_LPM_SetStopMode+0x5c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4013      	ands	r3, r2
 800c104:	4a07      	ldr	r2, [pc, #28]	; (800c124 <UTIL_LPM_SetStopMode+0x5c>)
 800c106:	6013      	str	r3, [r2, #0]
      break;
 800c108:	e000      	b.n	800c10c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800c10a:	bf00      	nop
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f383 8810 	msr	PRIMASK, r3
}
 800c116:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c118:	bf00      	nop
 800c11a:	371c      	adds	r7, #28
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr
 800c124:	200018e8 	.word	0x200018e8

0800c128 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c128:	b480      	push	{r7}
 800c12a:	b087      	sub	sp, #28
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	460b      	mov	r3, r1
 800c132:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c134:	f3ef 8310 	mrs	r3, PRIMASK
 800c138:	613b      	str	r3, [r7, #16]
  return(result);
 800c13a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c13c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c13e:	b672      	cpsid	i
}
 800c140:	bf00      	nop
  
  switch(state)
 800c142:	78fb      	ldrb	r3, [r7, #3]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d008      	beq.n	800c15a <UTIL_LPM_SetOffMode+0x32>
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d10e      	bne.n	800c16a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c14c:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <UTIL_LPM_SetOffMode+0x5c>)
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4313      	orrs	r3, r2
 800c154:	4a0b      	ldr	r2, [pc, #44]	; (800c184 <UTIL_LPM_SetOffMode+0x5c>)
 800c156:	6013      	str	r3, [r2, #0]
      break;
 800c158:	e008      	b.n	800c16c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	43da      	mvns	r2, r3
 800c15e:	4b09      	ldr	r3, [pc, #36]	; (800c184 <UTIL_LPM_SetOffMode+0x5c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4013      	ands	r3, r2
 800c164:	4a07      	ldr	r2, [pc, #28]	; (800c184 <UTIL_LPM_SetOffMode+0x5c>)
 800c166:	6013      	str	r3, [r2, #0]
      break;
 800c168:	e000      	b.n	800c16c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c16a:	bf00      	nop
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f383 8810 	msr	PRIMASK, r3
}
 800c176:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c178:	bf00      	nop
 800c17a:	371c      	adds	r7, #28
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr
 800c184:	200018ec 	.word	0x200018ec

0800c188 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b090      	sub	sp, #64	; 0x40
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c190:	4b73      	ldr	r3, [pc, #460]	; (800c360 <UTIL_SEQ_Run+0x1d8>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c196:	4b72      	ldr	r3, [pc, #456]	; (800c360 <UTIL_SEQ_Run+0x1d8>)
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4013      	ands	r3, r2
 800c19e:	4a70      	ldr	r2, [pc, #448]	; (800c360 <UTIL_SEQ_Run+0x1d8>)
 800c1a0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c1a2:	4b70      	ldr	r3, [pc, #448]	; (800c364 <UTIL_SEQ_Run+0x1dc>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c1a8:	4b6f      	ldr	r3, [pc, #444]	; (800c368 <UTIL_SEQ_Run+0x1e0>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c1ae:	4b6f      	ldr	r3, [pc, #444]	; (800c36c <UTIL_SEQ_Run+0x1e4>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c1b4:	4b6e      	ldr	r3, [pc, #440]	; (800c370 <UTIL_SEQ_Run+0x1e8>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c1ba:	e08d      	b.n	800c2d8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c1c0:	e002      	b.n	800c1c8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c1c8:	4a6a      	ldr	r2, [pc, #424]	; (800c374 <UTIL_SEQ_Run+0x1ec>)
 800c1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d2:	401a      	ands	r2, r3
 800c1d4:	4b62      	ldr	r3, [pc, #392]	; (800c360 <UTIL_SEQ_Run+0x1d8>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4013      	ands	r3, r2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d0f1      	beq.n	800c1c2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c1de:	4a65      	ldr	r2, [pc, #404]	; (800c374 <UTIL_SEQ_Run+0x1ec>)
 800c1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	401a      	ands	r2, r3
 800c1ea:	4b5d      	ldr	r3, [pc, #372]	; (800c360 <UTIL_SEQ_Run+0x1d8>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c1f2:	4a60      	ldr	r2, [pc, #384]	; (800c374 <UTIL_SEQ_Run+0x1ec>)
 800c1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	4413      	add	r3, r2
 800c1fa:	685a      	ldr	r2, [r3, #4]
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fe:	4013      	ands	r3, r2
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c204:	4a5b      	ldr	r2, [pc, #364]	; (800c374 <UTIL_SEQ_Run+0x1ec>)
 800c206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c208:	00db      	lsls	r3, r3, #3
 800c20a:	4413      	add	r3, r2
 800c20c:	f04f 32ff 	mov.w	r2, #4294967295
 800c210:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c212:	4a58      	ldr	r2, [pc, #352]	; (800c374 <UTIL_SEQ_Run+0x1ec>)
 800c214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	4413      	add	r3, r2
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	4013      	ands	r3, r2
 800c220:	4618      	mov	r0, r3
 800c222:	f000 f973 	bl	800c50c <SEQ_BitPosition>
 800c226:	4603      	mov	r3, r0
 800c228:	461a      	mov	r2, r3
 800c22a:	4b53      	ldr	r3, [pc, #332]	; (800c378 <UTIL_SEQ_Run+0x1f0>)
 800c22c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c22e:	4a51      	ldr	r2, [pc, #324]	; (800c374 <UTIL_SEQ_Run+0x1ec>)
 800c230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c232:	00db      	lsls	r3, r3, #3
 800c234:	4413      	add	r3, r2
 800c236:	685a      	ldr	r2, [r3, #4]
 800c238:	4b4f      	ldr	r3, [pc, #316]	; (800c378 <UTIL_SEQ_Run+0x1f0>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2101      	movs	r1, #1
 800c23e:	fa01 f303 	lsl.w	r3, r1, r3
 800c242:	43db      	mvns	r3, r3
 800c244:	401a      	ands	r2, r3
 800c246:	494b      	ldr	r1, [pc, #300]	; (800c374 <UTIL_SEQ_Run+0x1ec>)
 800c248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c24a:	00db      	lsls	r3, r3, #3
 800c24c:	440b      	add	r3, r1
 800c24e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c250:	f3ef 8310 	mrs	r3, PRIMASK
 800c254:	61bb      	str	r3, [r7, #24]
  return(result);
 800c256:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c258:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c25a:	b672      	cpsid	i
}
 800c25c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c25e:	4b46      	ldr	r3, [pc, #280]	; (800c378 <UTIL_SEQ_Run+0x1f0>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2201      	movs	r2, #1
 800c264:	fa02 f303 	lsl.w	r3, r2, r3
 800c268:	43da      	mvns	r2, r3
 800c26a:	4b3e      	ldr	r3, [pc, #248]	; (800c364 <UTIL_SEQ_Run+0x1dc>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4013      	ands	r3, r2
 800c270:	4a3c      	ldr	r2, [pc, #240]	; (800c364 <UTIL_SEQ_Run+0x1dc>)
 800c272:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c274:	2302      	movs	r3, #2
 800c276:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c278:	e013      	b.n	800c2a2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27c:	3b01      	subs	r3, #1
 800c27e:	4a3d      	ldr	r2, [pc, #244]	; (800c374 <UTIL_SEQ_Run+0x1ec>)
 800c280:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c284:	4b3c      	ldr	r3, [pc, #240]	; (800c378 <UTIL_SEQ_Run+0x1f0>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2201      	movs	r2, #1
 800c28a:	fa02 f303 	lsl.w	r3, r2, r3
 800c28e:	43da      	mvns	r2, r3
 800c290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c292:	3b01      	subs	r3, #1
 800c294:	400a      	ands	r2, r1
 800c296:	4937      	ldr	r1, [pc, #220]	; (800c374 <UTIL_SEQ_Run+0x1ec>)
 800c298:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e8      	bne.n	800c27a <UTIL_SEQ_Run+0xf2>
 800c2a8:	6a3b      	ldr	r3, [r7, #32]
 800c2aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	f383 8810 	msr	PRIMASK, r3
}
 800c2b2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c2b4:	4b30      	ldr	r3, [pc, #192]	; (800c378 <UTIL_SEQ_Run+0x1f0>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a30      	ldr	r2, [pc, #192]	; (800c37c <UTIL_SEQ_Run+0x1f4>)
 800c2ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2be:	4798      	blx	r3

    local_taskset = TaskSet;
 800c2c0:	4b28      	ldr	r3, [pc, #160]	; (800c364 <UTIL_SEQ_Run+0x1dc>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c2c6:	4b28      	ldr	r3, [pc, #160]	; (800c368 <UTIL_SEQ_Run+0x1e0>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c2cc:	4b27      	ldr	r3, [pc, #156]	; (800c36c <UTIL_SEQ_Run+0x1e4>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c2d2:	4b27      	ldr	r3, [pc, #156]	; (800c370 <UTIL_SEQ_Run+0x1e8>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c2d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2dc:	401a      	ands	r2, r3
 800c2de:	4b20      	ldr	r3, [pc, #128]	; (800c360 <UTIL_SEQ_Run+0x1d8>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4013      	ands	r3, r2
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d005      	beq.n	800c2f4 <UTIL_SEQ_Run+0x16c>
 800c2e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f43f af64 	beq.w	800c1bc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c2f4:	4b20      	ldr	r3, [pc, #128]	; (800c378 <UTIL_SEQ_Run+0x1f0>)
 800c2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2fa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c2fc:	f000 f8f8 	bl	800c4f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c300:	f3ef 8310 	mrs	r3, PRIMASK
 800c304:	613b      	str	r3, [r7, #16]
  return(result);
 800c306:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c308:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c30a:	b672      	cpsid	i
}
 800c30c:	bf00      	nop
  local_taskset = TaskSet;
 800c30e:	4b15      	ldr	r3, [pc, #84]	; (800c364 <UTIL_SEQ_Run+0x1dc>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c314:	4b14      	ldr	r3, [pc, #80]	; (800c368 <UTIL_SEQ_Run+0x1e0>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c31a:	4b14      	ldr	r3, [pc, #80]	; (800c36c <UTIL_SEQ_Run+0x1e4>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	401a      	ands	r2, r3
 800c326:	4b0e      	ldr	r3, [pc, #56]	; (800c360 <UTIL_SEQ_Run+0x1d8>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4013      	ands	r3, r2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d107      	bne.n	800c340 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c330:	4b0f      	ldr	r3, [pc, #60]	; (800c370 <UTIL_SEQ_Run+0x1e8>)
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c336:	4013      	ands	r3, r2
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c33c:	f7f5 fdee 	bl	8001f1c <UTIL_SEQ_Idle>
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f383 8810 	msr	PRIMASK, r3
}
 800c34a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c34c:	f000 f8d7 	bl	800c4fe <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c350:	4a03      	ldr	r2, [pc, #12]	; (800c360 <UTIL_SEQ_Run+0x1d8>)
 800c352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c354:	6013      	str	r3, [r2, #0]

  return;
 800c356:	bf00      	nop
}
 800c358:	3740      	adds	r7, #64	; 0x40
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	2000002c 	.word	0x2000002c
 800c364:	200018f0 	.word	0x200018f0
 800c368:	200018f4 	.word	0x200018f4
 800c36c:	20000028 	.word	0x20000028
 800c370:	200018f8 	.word	0x200018f8
 800c374:	20001980 	.word	0x20001980
 800c378:	200018fc 	.word	0x200018fc
 800c37c:	20001900 	.word	0x20001900

0800c380 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c38c:	f3ef 8310 	mrs	r3, PRIMASK
 800c390:	617b      	str	r3, [r7, #20]
  return(result);
 800c392:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c394:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c396:	b672      	cpsid	i
}
 800c398:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f000 f8b6 	bl	800c50c <SEQ_BitPosition>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	4a06      	ldr	r2, [pc, #24]	; (800c3c0 <UTIL_SEQ_RegTask+0x40>)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	f383 8810 	msr	PRIMASK, r3
}
 800c3b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c3b8:	bf00      	nop
}
 800c3ba:	3720      	adds	r7, #32
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	20001900 	.word	0x20001900

0800c3c4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b087      	sub	sp, #28
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3ce:	f3ef 8310 	mrs	r3, PRIMASK
 800c3d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c3d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3d8:	b672      	cpsid	i
}
 800c3da:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c3dc:	4b0d      	ldr	r3, [pc, #52]	; (800c414 <UTIL_SEQ_SetTask+0x50>)
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	4a0b      	ldr	r2, [pc, #44]	; (800c414 <UTIL_SEQ_SetTask+0x50>)
 800c3e6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c3e8:	4a0b      	ldr	r2, [pc, #44]	; (800c418 <UTIL_SEQ_SetTask+0x54>)
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	431a      	orrs	r2, r3
 800c3f4:	4908      	ldr	r1, [pc, #32]	; (800c418 <UTIL_SEQ_SetTask+0x54>)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	f383 8810 	msr	PRIMASK, r3
}
 800c406:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c408:	bf00      	nop
}
 800c40a:	371c      	adds	r7, #28
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr
 800c414:	200018f0 	.word	0x200018f0
 800c418:	20001980 	.word	0x20001980

0800c41c <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c41c:	b480      	push	{r7}
 800c41e:	b087      	sub	sp, #28
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c424:	f3ef 8310 	mrs	r3, PRIMASK
 800c428:	60fb      	str	r3, [r7, #12]
  return(result);
 800c42a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c42c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c42e:	b672      	cpsid	i
}
 800c430:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c432:	4b09      	ldr	r3, [pc, #36]	; (800c458 <UTIL_SEQ_SetEvt+0x3c>)
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4313      	orrs	r3, r2
 800c43a:	4a07      	ldr	r2, [pc, #28]	; (800c458 <UTIL_SEQ_SetEvt+0x3c>)
 800c43c:	6013      	str	r3, [r2, #0]
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	f383 8810 	msr	PRIMASK, r3
}
 800c448:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c44a:	bf00      	nop
}
 800c44c:	371c      	adds	r7, #28
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	200018f4 	.word	0x200018f4

0800c45c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b088      	sub	sp, #32
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c464:	4b1f      	ldr	r3, [pc, #124]	; (800c4e4 <UTIL_SEQ_WaitEvt+0x88>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c46a:	4b1e      	ldr	r3, [pc, #120]	; (800c4e4 <UTIL_SEQ_WaitEvt+0x88>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c472:	d102      	bne.n	800c47a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c474:	2300      	movs	r3, #0
 800c476:	61fb      	str	r3, [r7, #28]
 800c478:	e005      	b.n	800c486 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c47a:	4b1a      	ldr	r3, [pc, #104]	; (800c4e4 <UTIL_SEQ_WaitEvt+0x88>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2201      	movs	r2, #1
 800c480:	fa02 f303 	lsl.w	r3, r2, r3
 800c484:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c486:	4b18      	ldr	r3, [pc, #96]	; (800c4e8 <UTIL_SEQ_WaitEvt+0x8c>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c48c:	4a16      	ldr	r2, [pc, #88]	; (800c4e8 <UTIL_SEQ_WaitEvt+0x8c>)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c492:	e003      	b.n	800c49c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c494:	6879      	ldr	r1, [r7, #4]
 800c496:	69f8      	ldr	r0, [r7, #28]
 800c498:	f7f5 fd48 	bl	8001f2c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c49c:	4b13      	ldr	r3, [pc, #76]	; (800c4ec <UTIL_SEQ_WaitEvt+0x90>)
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d0f5      	beq.n	800c494 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c4a8:	4a0e      	ldr	r2, [pc, #56]	; (800c4e4 <UTIL_SEQ_WaitEvt+0x88>)
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c4b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c4b4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c4b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c4b8:	b672      	cpsid	i
}
 800c4ba:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	43da      	mvns	r2, r3
 800c4c0:	4b0a      	ldr	r3, [pc, #40]	; (800c4ec <UTIL_SEQ_WaitEvt+0x90>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	4a09      	ldr	r2, [pc, #36]	; (800c4ec <UTIL_SEQ_WaitEvt+0x90>)
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f383 8810 	msr	PRIMASK, r3
}
 800c4d4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c4d6:	4a04      	ldr	r2, [pc, #16]	; (800c4e8 <UTIL_SEQ_WaitEvt+0x8c>)
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	6013      	str	r3, [r2, #0]
  return;
 800c4dc:	bf00      	nop
}
 800c4de:	3720      	adds	r7, #32
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	200018fc 	.word	0x200018fc
 800c4e8:	200018f8 	.word	0x200018f8
 800c4ec:	200018f4 	.word	0x200018f4

0800c4f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c4f4:	bf00      	nop
}
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr

0800c4fe <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c4fe:	b480      	push	{r7}
 800c500:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c502:	bf00      	nop
}
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c514:	2300      	movs	r3, #0
 800c516:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	0c1b      	lsrs	r3, r3, #16
 800c520:	041b      	lsls	r3, r3, #16
 800c522:	2b00      	cmp	r3, #0
 800c524:	d104      	bne.n	800c530 <SEQ_BitPosition+0x24>
 800c526:	2310      	movs	r3, #16
 800c528:	73fb      	strb	r3, [r7, #15]
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	041b      	lsls	r3, r3, #16
 800c52e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c536:	2b00      	cmp	r3, #0
 800c538:	d105      	bne.n	800c546 <SEQ_BitPosition+0x3a>
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
 800c53c:	3308      	adds	r3, #8
 800c53e:	73fb      	strb	r3, [r7, #15]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	021b      	lsls	r3, r3, #8
 800c544:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d105      	bne.n	800c55c <SEQ_BitPosition+0x50>
 800c550:	7bfb      	ldrb	r3, [r7, #15]
 800c552:	3304      	adds	r3, #4
 800c554:	73fb      	strb	r3, [r7, #15]
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	011b      	lsls	r3, r3, #4
 800c55a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	0f1b      	lsrs	r3, r3, #28
 800c560:	4a07      	ldr	r2, [pc, #28]	; (800c580 <SEQ_BitPosition+0x74>)
 800c562:	5cd2      	ldrb	r2, [r2, r3]
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	4413      	add	r3, r2
 800c568:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c56a:	7bfb      	ldrb	r3, [r7, #15]
 800c56c:	f1c3 031f 	rsb	r3, r3, #31
 800c570:	b2db      	uxtb	r3, r3
}
 800c572:	4618      	mov	r0, r3
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	0800ed20 	.word	0x0800ed20

0800c584 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	605a      	str	r2, [r3, #4]
}
 800c598:	bf00      	nop
 800c59a:	370c      	adds	r7, #12
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b087      	sub	sp, #28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5ac:	f3ef 8310 	mrs	r3, PRIMASK
 800c5b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c5b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5b6:	b672      	cpsid	i
}
 800c5b8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d102      	bne.n	800c5ca <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	75fb      	strb	r3, [r7, #23]
 800c5c8:	e001      	b.n	800c5ce <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	75fb      	strb	r3, [r7, #23]
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	f383 8810 	msr	PRIMASK, r3
}
 800c5d8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c5da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	371c      	adds	r7, #28
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b087      	sub	sp, #28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5f2:	f3ef 8310 	mrs	r3, PRIMASK
 800c5f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c5fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5fc:	b672      	cpsid	i
}
 800c5fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	683a      	ldr	r2, [r7, #0]
 800c612:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	605a      	str	r2, [r3, #4]
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	f383 8810 	msr	PRIMASK, r3
}
 800c626:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c628:	bf00      	nop
 800c62a:	371c      	adds	r7, #28
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c634:	b480      	push	{r7}
 800c636:	b087      	sub	sp, #28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c63e:	f3ef 8310 	mrs	r3, PRIMASK
 800c642:	60fb      	str	r3, [r7, #12]
  return(result);
 800c644:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c646:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c648:	b672      	cpsid	i
}
 800c64a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	685a      	ldr	r2, [r3, #4]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	683a      	ldr	r2, [r7, #0]
 800c65e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	601a      	str	r2, [r3, #0]
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	f383 8810 	msr	PRIMASK, r3
}
 800c672:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c674:	bf00      	nop
 800c676:	371c      	adds	r7, #28
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c680:	b480      	push	{r7}
 800c682:	b087      	sub	sp, #28
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c688:	f3ef 8310 	mrs	r3, PRIMASK
 800c68c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c68e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c690:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c692:	b672      	cpsid	i
}
 800c694:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	6812      	ldr	r2, [r2, #0]
 800c69e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	6852      	ldr	r2, [r2, #4]
 800c6a8:	605a      	str	r2, [r3, #4]
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	f383 8810 	msr	PRIMASK, r3
}
 800c6b4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c6b6:	bf00      	nop
 800c6b8:	371c      	adds	r7, #28
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b086      	sub	sp, #24
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6cc:	f3ef 8310 	mrs	r3, PRIMASK
 800c6d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c6d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6d6:	b672      	cpsid	i
}
 800c6d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff ffca 	bl	800c680 <LST_remove_node>
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f383 8810 	msr	PRIMASK, r3
}
 800c6f6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c6f8:	bf00      	nop
 800c6fa:	3718      	adds	r7, #24
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]
 800c70c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2200      	movs	r2, #0
 800c71e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2200      	movs	r2, #0
 800c724:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	887a      	ldrh	r2, [r7, #2]
 800c736:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	7e3a      	ldrb	r2, [r7, #24]
 800c73c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800c73e:	7e3b      	ldrb	r3, [r7, #24]
 800c740:	f003 0302 	and.w	r3, r3, #2
 800c744:	2b00      	cmp	r3, #0
 800c746:	d006      	beq.n	800c756 <CircularQueue_Init+0x56>
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	891b      	ldrh	r3, [r3, #8]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d002      	beq.n	800c756 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800c750:	f04f 33ff 	mov.w	r3, #4294967295
 800c754:	e000      	b.n	800c758 <CircularQueue_Init+0x58>
  }
  return 0;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b08e      	sub	sp, #56	; 0x38
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	603b      	str	r3, [r7, #0]
 800c770:	4613      	mov	r3, r2
 800c772:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800c774:	2300      	movs	r3, #0
 800c776:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800c778:	2300      	movs	r3, #0
 800c77a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800c77c:	2300      	movs	r3, #0
 800c77e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800c780:	2300      	movs	r3, #0
 800c782:	62bb      	str	r3, [r7, #40]	; 0x28
 800c784:	2300      	movs	r3, #0
 800c786:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800c788:	2300      	movs	r3, #0
 800c78a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800c78c:	2300      	movs	r3, #0
 800c78e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	891b      	ldrh	r3, [r3, #8]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d101      	bne.n	800c79c <CircularQueue_Add+0x38>
 800c798:	2302      	movs	r3, #2
 800c79a:	e000      	b.n	800c79e <CircularQueue_Add+0x3a>
 800c79c:	2300      	movs	r3, #0
 800c79e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	695b      	ldr	r3, [r3, #20]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d02a      	beq.n	800c7fe <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	891b      	ldrh	r3, [r3, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d123      	bne.n	800c7f8 <CircularQueue_Add+0x94>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6819      	ldr	r1, [r3, #0]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	1c58      	adds	r0, r3, #1
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	4298      	cmp	r0, r3
 800c7ce:	d306      	bcc.n	800c7de <CircularQueue_Add+0x7a>
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6918      	ldr	r0, [r3, #16]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	1ac3      	subs	r3, r0, r3
 800c7da:	3301      	adds	r3, #1
 800c7dc:	e002      	b.n	800c7e4 <CircularQueue_Add+0x80>
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	440b      	add	r3, r1
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	021b      	lsls	r3, r3, #8
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	4413      	add	r3, r2
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	3302      	adds	r3, #2
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	e001      	b.n	800c7fc <CircularQueue_Add+0x98>
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	891b      	ldrh	r3, [r3, #8]
 800c7fc:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	891b      	ldrh	r3, [r3, #8]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d002      	beq.n	800c80c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	891b      	ldrh	r3, [r3, #8]
 800c80a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	691a      	ldr	r2, [r3, #16]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	429a      	cmp	r2, r3
 800c816:	d307      	bcc.n	800c828 <CircularQueue_Add+0xc4>
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6919      	ldr	r1, [r3, #16]
 800c820:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c822:	440b      	add	r3, r1
 800c824:	1ad3      	subs	r3, r2, r3
 800c826:	e000      	b.n	800c82a <CircularQueue_Add+0xc6>
 800c828:	2300      	movs	r3, #0
 800c82a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800c82c:	88fa      	ldrh	r2, [r7, #6]
 800c82e:	7ffb      	ldrb	r3, [r7, #31]
 800c830:	4413      	add	r3, r2
 800c832:	461a      	mov	r2, r3
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	fb02 f303 	mul.w	r3, r2, r3
 800c83a:	69ba      	ldr	r2, [r7, #24]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d80b      	bhi.n	800c858 <CircularQueue_Add+0xf4>
 800c840:	88fa      	ldrh	r2, [r7, #6]
 800c842:	7ffb      	ldrb	r3, [r7, #31]
 800c844:	4413      	add	r3, r2
 800c846:	461a      	mov	r2, r3
 800c848:	69bb      	ldr	r3, [r7, #24]
 800c84a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c84e:	fb01 f202 	mul.w	r2, r1, r2
 800c852:	1a9b      	subs	r3, r3, r2
 800c854:	b2db      	uxtb	r3, r3
 800c856:	e000      	b.n	800c85a <CircularQueue_Add+0xf6>
 800c858:	2300      	movs	r3, #0
 800c85a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800c85c:	7dfa      	ldrb	r2, [r7, #23]
 800c85e:	7ffb      	ldrb	r3, [r7, #31]
 800c860:	429a      	cmp	r2, r3
 800c862:	bf8c      	ite	hi
 800c864:	2301      	movhi	r3, #1
 800c866:	2300      	movls	r3, #0
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800c86c:	7fbb      	ldrb	r3, [r7, #30]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d008      	beq.n	800c884 <CircularQueue_Add+0x120>
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	7f1b      	ldrb	r3, [r3, #28]
 800c876:	f003 0301 	and.w	r3, r3, #1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <CircularQueue_Add+0x120>
 800c87e:	7dfb      	ldrb	r3, [r7, #23]
 800c880:	b29b      	uxth	r3, r3
 800c882:	e000      	b.n	800c886 <CircularQueue_Add+0x122>
 800c884:	8bbb      	ldrh	r3, [r7, #28]
 800c886:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800c888:	7fbb      	ldrb	r3, [r7, #30]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d008      	beq.n	800c8a0 <CircularQueue_Add+0x13c>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	7f1b      	ldrb	r3, [r3, #28]
 800c892:	f003 0302 	and.w	r3, r3, #2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d002      	beq.n	800c8a0 <CircularQueue_Add+0x13c>
 800c89a:	7ffb      	ldrb	r3, [r7, #31]
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	e000      	b.n	800c8a2 <CircularQueue_Add+0x13e>
 800c8a0:	8bbb      	ldrh	r3, [r7, #28]
 800c8a2:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800c8a4:	88fb      	ldrh	r3, [r7, #6]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	f000 817e 	beq.w	800cba8 <CircularQueue_Add+0x444>
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	695a      	ldr	r2, [r3, #20]
 800c8b0:	88f9      	ldrh	r1, [r7, #6]
 800c8b2:	7ffb      	ldrb	r3, [r7, #31]
 800c8b4:	440b      	add	r3, r1
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	fb01 f303 	mul.w	r3, r1, r3
 800c8be:	441a      	add	r2, r3
 800c8c0:	8bbb      	ldrh	r3, [r7, #28]
 800c8c2:	441a      	add	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	f200 816d 	bhi.w	800cba8 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8d2:	e14a      	b.n	800cb6a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	691a      	ldr	r2, [r3, #16]
 800c8d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c8da:	441a      	add	r2, r3
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d307      	bcc.n	800c8f4 <CircularQueue_Add+0x190>
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	691a      	ldr	r2, [r3, #16]
 800c8e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c8ea:	441a      	add	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	e003      	b.n	800c8fc <CircularQueue_Add+0x198>
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	691a      	ldr	r2, [r3, #16]
 800c8f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c8fa:	4413      	add	r3, r2
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	891b      	ldrh	r3, [r3, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d130      	bne.n	800c970 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c914:	1c59      	adds	r1, r3, #1
 800c916:	6339      	str	r1, [r7, #48]	; 0x30
 800c918:	4413      	add	r3, r2
 800c91a:	88fa      	ldrh	r2, [r7, #6]
 800c91c:	b2d2      	uxtb	r2, r2
 800c91e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c926:	429a      	cmp	r2, r3
 800c928:	d304      	bcc.n	800c934 <CircularQueue_Add+0x1d0>
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	e000      	b.n	800c936 <CircularQueue_Add+0x1d2>
 800c934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c936:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800c938:	88fb      	ldrh	r3, [r7, #6]
 800c93a:	0a1b      	lsrs	r3, r3, #8
 800c93c:	b298      	uxth	r0, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	1c59      	adds	r1, r3, #1
 800c946:	6339      	str	r1, [r7, #48]	; 0x30
 800c948:	4413      	add	r3, r2
 800c94a:	b2c2      	uxtb	r2, r0
 800c94c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c954:	429a      	cmp	r2, r3
 800c956:	d304      	bcc.n	800c962 <CircularQueue_Add+0x1fe>
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	e000      	b.n	800c964 <CircularQueue_Add+0x200>
 800c962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c964:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	1c9a      	adds	r2, r3, #2
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800c970:	88fa      	ldrh	r2, [r7, #6]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6859      	ldr	r1, [r3, #4]
 800c976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c978:	1acb      	subs	r3, r1, r3
 800c97a:	4293      	cmp	r3, r2
 800c97c:	bf28      	it	cs
 800c97e:	4613      	movcs	r3, r2
 800c980:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800c982:	88fb      	ldrh	r3, [r7, #6]
 800c984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c986:	429a      	cmp	r2, r3
 800c988:	d007      	beq.n	800c99a <CircularQueue_Add+0x236>
 800c98a:	88fb      	ldrh	r3, [r7, #6]
 800c98c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c98e:	429a      	cmp	r2, r3
 800c990:	d225      	bcs.n	800c9de <CircularQueue_Add+0x27a>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	7f1b      	ldrb	r3, [r3, #28]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d121      	bne.n	800c9de <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	18d0      	adds	r0, r2, r3
 800c9a2:	88fb      	ldrh	r3, [r7, #6]
 800c9a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9a6:	fb02 f303 	mul.w	r3, r2, r3
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	f000 fad1 	bl	800cf58 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	695a      	ldr	r2, [r3, #20]
 800c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9bc:	441a      	add	r2, r3
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c8:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800c9ca:	88fa      	ldrh	r2, [r7, #6]
 800c9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800c9d2:	7ffb      	ldrb	r3, [r7, #31]
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	88fb      	ldrh	r3, [r7, #6]
 800c9d8:	4413      	add	r3, r2
 800c9da:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c9dc:	e0a4      	b.n	800cb28 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 80a1 	beq.w	800cb28 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	7f1b      	ldrb	r3, [r3, #28]
 800c9ea:	f003 0301 	and.w	r3, r3, #1
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d03a      	beq.n	800ca68 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	891b      	ldrh	r3, [r3, #8]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10d      	bne.n	800ca16 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	3b02      	subs	r3, #2
 800ca02:	4413      	add	r3, r2
 800ca04:	22ff      	movs	r2, #255	; 0xff
 800ca06:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	4413      	add	r3, r2
 800ca12:	22ff      	movs	r2, #255	; 0xff
 800ca14:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	695a      	ldr	r2, [r3, #20]
 800ca1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1c:	441a      	add	r2, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800ca22:	2300      	movs	r3, #0
 800ca24:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800ca26:	88fb      	ldrh	r3, [r7, #6]
 800ca28:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	891b      	ldrh	r3, [r3, #8]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d16f      	bne.n	800cb16 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	1c59      	adds	r1, r3, #1
 800ca3e:	6339      	str	r1, [r7, #48]	; 0x30
 800ca40:	4413      	add	r3, r2
 800ca42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca44:	b2d2      	uxtb	r2, r2
 800ca46:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4a:	0a18      	lsrs	r0, r3, #8
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca52:	1c59      	adds	r1, r3, #1
 800ca54:	6339      	str	r1, [r7, #48]	; 0x30
 800ca56:	4413      	add	r3, r2
 800ca58:	b2c2      	uxtb	r2, r0
 800ca5a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	695b      	ldr	r3, [r3, #20]
 800ca60:	1c9a      	adds	r2, r3, #2
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	615a      	str	r2, [r3, #20]
 800ca66:	e056      	b.n	800cb16 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	7f1b      	ldrb	r3, [r3, #28]
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d050      	beq.n	800cb16 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	891b      	ldrh	r3, [r3, #8]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d14a      	bne.n	800cb12 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca82:	3b02      	subs	r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca88:	b2d2      	uxtb	r2, r2
 800ca8a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ca8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8e:	0a19      	lsrs	r1, r3, #8
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca96:	3b01      	subs	r3, #1
 800ca98:	4413      	add	r3, r2
 800ca9a:	b2ca      	uxtb	r2, r1
 800ca9c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa4:	18d0      	adds	r0, r2, r3
 800caa6:	88fb      	ldrh	r3, [r7, #6]
 800caa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caaa:	fb02 f303 	mul.w	r3, r2, r3
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	4413      	add	r3, r2
 800cab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cab4:	4619      	mov	r1, r3
 800cab6:	f000 fa4f 	bl	800cf58 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	695a      	ldr	r2, [r3, #20]
 800cabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac0:	441a      	add	r2, r3
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800cac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac8:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800caca:	88fa      	ldrh	r2, [r7, #6]
 800cacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800cadc:	2300      	movs	r3, #0
 800cade:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae6:	1c59      	adds	r1, r3, #1
 800cae8:	6339      	str	r1, [r7, #48]	; 0x30
 800caea:	4413      	add	r3, r2
 800caec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caee:	b2d2      	uxtb	r2, r2
 800caf0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800caf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf4:	0a18      	lsrs	r0, r3, #8
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafc:	1c59      	adds	r1, r3, #1
 800cafe:	6339      	str	r1, [r7, #48]	; 0x30
 800cb00:	4413      	add	r3, r2
 800cb02:	b2c2      	uxtb	r2, r0
 800cb04:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	1c9a      	adds	r2, r3, #2
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	615a      	str	r2, [r3, #20]
 800cb10:	e001      	b.n	800cb16 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800cb12:	2300      	movs	r3, #0
 800cb14:	e049      	b.n	800cbaa <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800cb16:	7ffb      	ldrb	r3, [r7, #31]
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	4413      	add	r3, r2
 800cb20:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2200      	movs	r2, #0
 800cb26:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800cb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d015      	beq.n	800cb5a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	18d0      	adds	r0, r2, r3
 800cb36:	88fb      	ldrh	r3, [r7, #6]
 800cb38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb3a:	fb03 f202 	mul.w	r2, r3, r2
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	4413      	add	r3, r2
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	4413      	add	r3, r2
 800cb46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb48:	4619      	mov	r1, r3
 800cb4a:	f000 fa05 	bl	800cf58 <memcpy>
        q->byteCount += NbBytesToCopy;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	695a      	ldr	r2, [r3, #20]
 800cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb54:	441a      	add	r2, r3
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800cb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb66:	3301      	adds	r3, #1
 800cb68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	f4ff aeb0 	bcc.w	800c8d4 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6919      	ldr	r1, [r3, #16]
 800cb7c:	7ffb      	ldrb	r3, [r7, #31]
 800cb7e:	4419      	add	r1, r3
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	4299      	cmp	r1, r3
 800cb86:	d307      	bcc.n	800cb98 <CircularQueue_Add+0x434>
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6919      	ldr	r1, [r3, #16]
 800cb8c:	7ffb      	ldrb	r3, [r7, #31]
 800cb8e:	4419      	add	r1, r3
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	1acb      	subs	r3, r1, r3
 800cb96:	e003      	b.n	800cba0 <CircularQueue_Add+0x43c>
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6919      	ldr	r1, [r3, #16]
 800cb9c:	7ffb      	ldrb	r3, [r7, #31]
 800cb9e:	440b      	add	r3, r1
 800cba0:	4413      	add	r3, r2
 800cba2:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800cba4:	6a3b      	ldr	r3, [r7, #32]
 800cba6:	e000      	b.n	800cbaa <CircularQueue_Add+0x446>
    return NULL;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3738      	adds	r7, #56	; 0x38
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	b085      	sub	sp, #20
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	891b      	ldrh	r3, [r3, #8]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d101      	bne.n	800cbd0 <CircularQueue_Remove+0x1e>
 800cbcc:	2302      	movs	r3, #2
 800cbce:	e000      	b.n	800cbd2 <CircularQueue_Remove+0x20>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 80cc 	beq.w	800cd7a <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	891b      	ldrh	r3, [r3, #8]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d121      	bne.n	800cc2e <CircularQueue_Remove+0x7c>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6819      	ldr	r1, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	1c58      	adds	r0, r3, #1
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	4298      	cmp	r0, r3
 800cc08:	d306      	bcc.n	800cc18 <CircularQueue_Remove+0x66>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	68d8      	ldr	r0, [r3, #12]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	1ac3      	subs	r3, r0, r3
 800cc14:	3301      	adds	r3, #1
 800cc16:	e002      	b.n	800cc1e <CircularQueue_Remove+0x6c>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	440b      	add	r3, r1
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	021b      	lsls	r3, r3, #8
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	4413      	add	r3, r2
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	e001      	b.n	800cc32 <CircularQueue_Remove+0x80>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	891b      	ldrh	r3, [r3, #8]
 800cc32:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	7f1b      	ldrb	r3, [r3, #28]
 800cc38:	f003 0301 	and.w	r3, r3, #1
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d057      	beq.n	800ccf0 <CircularQueue_Remove+0x13e>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	7f1b      	ldrb	r3, [r3, #28]
 800cc44:	f003 0302 	and.w	r3, r3, #2
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d151      	bne.n	800ccf0 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800cc4c:	897b      	ldrh	r3, [r7, #10]
 800cc4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d103      	bne.n	800cc5e <CircularQueue_Remove+0xac>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	891b      	ldrh	r3, [r3, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d012      	beq.n	800cc84 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	68da      	ldr	r2, [r3, #12]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d942      	bls.n	800ccf0 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	891b      	ldrh	r3, [r3, #8]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d03e      	beq.n	800ccf0 <CircularQueue_Remove+0x13e>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	685a      	ldr	r2, [r3, #4]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	8912      	ldrh	r2, [r2, #8]
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d235      	bcs.n	800ccf0 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	695a      	ldr	r2, [r3, #20]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68d9      	ldr	r1, [r3, #12]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	1acb      	subs	r3, r1, r3
 800cc92:	441a      	add	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	891b      	ldrh	r3, [r3, #8]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d121      	bne.n	800ccea <CircularQueue_Remove+0x138>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	4413      	add	r3, r2
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6819      	ldr	r1, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	1c58      	adds	r0, r3, #1
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	4298      	cmp	r0, r3
 800ccc4:	d306      	bcc.n	800ccd4 <CircularQueue_Remove+0x122>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	68d8      	ldr	r0, [r3, #12]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	1ac3      	subs	r3, r0, r3
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	e002      	b.n	800ccda <CircularQueue_Remove+0x128>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	440b      	add	r3, r1
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	021b      	lsls	r3, r3, #8
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	4413      	add	r3, r2
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	e001      	b.n	800ccee <CircularQueue_Remove+0x13c>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	891b      	ldrh	r3, [r3, #8]
 800ccee:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68d9      	ldr	r1, [r3, #12]
 800ccf8:	7a7b      	ldrb	r3, [r7, #9]
 800ccfa:	4419      	add	r1, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	4299      	cmp	r1, r3
 800cd02:	d307      	bcc.n	800cd14 <CircularQueue_Remove+0x162>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	68d9      	ldr	r1, [r3, #12]
 800cd08:	7a7b      	ldrb	r3, [r7, #9]
 800cd0a:	4419      	add	r1, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	1acb      	subs	r3, r1, r3
 800cd12:	e003      	b.n	800cd1c <CircularQueue_Remove+0x16a>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	68d9      	ldr	r1, [r3, #12]
 800cd18:	7a7b      	ldrb	r3, [r7, #9]
 800cd1a:	440b      	add	r3, r1
 800cd1c:	4413      	add	r3, r2
 800cd1e:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	695b      	ldr	r3, [r3, #20]
 800cd24:	8979      	ldrh	r1, [r7, #10]
 800cd26:	7a7a      	ldrb	r2, [r7, #9]
 800cd28:	440a      	add	r2, r1
 800cd2a:	1a9a      	subs	r2, r3, r2
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	695b      	ldr	r3, [r3, #20]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d01b      	beq.n	800cd70 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	68da      	ldr	r2, [r3, #12]
 800cd3c:	897b      	ldrh	r3, [r7, #10]
 800cd3e:	441a      	add	r2, r3
 800cd40:	7a7b      	ldrb	r3, [r7, #9]
 800cd42:	441a      	add	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d309      	bcc.n	800cd60 <CircularQueue_Remove+0x1ae>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	68da      	ldr	r2, [r3, #12]
 800cd50:	897b      	ldrh	r3, [r7, #10]
 800cd52:	441a      	add	r2, r3
 800cd54:	7a7b      	ldrb	r3, [r7, #9]
 800cd56:	441a      	add	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	e005      	b.n	800cd6c <CircularQueue_Remove+0x1ba>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	68da      	ldr	r2, [r3, #12]
 800cd64:	897b      	ldrh	r3, [r7, #10]
 800cd66:	441a      	add	r2, r3
 800cd68:	7a7b      	ldrb	r3, [r7, #9]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	1e5a      	subs	r2, r3, #1
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	897a      	ldrh	r2, [r7, #10]
 800cd84:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800cd86:	68fb      	ldr	r3, [r7, #12]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3714      	adds	r7, #20
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b087      	sub	sp, #28
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800cda2:	2300      	movs	r3, #0
 800cda4:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	891b      	ldrh	r3, [r3, #8]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <CircularQueue_Sense+0x1e>
 800cdae:	2302      	movs	r3, #2
 800cdb0:	e000      	b.n	800cdb4 <CircularQueue_Sense+0x20>
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	695b      	ldr	r3, [r3, #20]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f000 8090 	beq.w	800cee8 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	891b      	ldrh	r3, [r3, #8]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d121      	bne.n	800ce1a <CircularQueue_Sense+0x86>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	4413      	add	r3, r2
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6819      	ldr	r1, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	1c58      	adds	r0, r3, #1
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	4298      	cmp	r0, r3
 800cdf4:	d306      	bcc.n	800ce04 <CircularQueue_Sense+0x70>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	68d8      	ldr	r0, [r3, #12]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	1ac3      	subs	r3, r0, r3
 800ce00:	3301      	adds	r3, #1
 800ce02:	e002      	b.n	800ce0a <CircularQueue_Sense+0x76>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	440b      	add	r3, r1
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	021b      	lsls	r3, r3, #8
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	4413      	add	r3, r2
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	e001      	b.n	800ce1e <CircularQueue_Sense+0x8a>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	891b      	ldrh	r3, [r3, #8]
 800ce1e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	7f1b      	ldrb	r3, [r3, #28]
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d048      	beq.n	800cebe <CircularQueue_Sense+0x12a>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	7f1b      	ldrb	r3, [r3, #28]
 800ce30:	f003 0302 	and.w	r3, r3, #2
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d142      	bne.n	800cebe <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ce38:	8a7b      	ldrh	r3, [r7, #18]
 800ce3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d103      	bne.n	800ce4a <CircularQueue_Sense+0xb6>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	891b      	ldrh	r3, [r3, #8]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d012      	beq.n	800ce70 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	68da      	ldr	r2, [r3, #12]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d933      	bls.n	800cebe <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	891b      	ldrh	r3, [r3, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d02f      	beq.n	800cebe <CircularQueue_Sense+0x12a>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	8912      	ldrh	r2, [r2, #8]
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d226      	bcs.n	800cebe <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800ce70:	2300      	movs	r3, #0
 800ce72:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	891b      	ldrh	r3, [r3, #8]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d11d      	bne.n	800ceb8 <CircularQueue_Sense+0x124>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	4413      	add	r3, r2
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6819      	ldr	r1, [r3, #0]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	1c58      	adds	r0, r3, #1
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	4298      	cmp	r0, r3
 800ce96:	d305      	bcc.n	800cea4 <CircularQueue_Sense+0x110>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	1ac3      	subs	r3, r0, r3
 800cea0:	3301      	adds	r3, #1
 800cea2:	e001      	b.n	800cea8 <CircularQueue_Sense+0x114>
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	3301      	adds	r3, #1
 800cea8:	440b      	add	r3, r1
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	021b      	lsls	r3, r3, #8
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	4413      	add	r3, r2
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	e001      	b.n	800cebc <CircularQueue_Sense+0x128>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	891b      	ldrh	r3, [r3, #8]
 800cebc:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	7af9      	ldrb	r1, [r7, #11]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	4419      	add	r1, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	4299      	cmp	r1, r3
 800cece:	d306      	bcc.n	800cede <CircularQueue_Sense+0x14a>
 800ced0:	7af9      	ldrb	r1, [r7, #11]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	4419      	add	r1, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	1acb      	subs	r3, r1, r3
 800cedc:	e002      	b.n	800cee4 <CircularQueue_Sense+0x150>
 800cede:	7af9      	ldrb	r1, [r7, #11]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	440b      	add	r3, r1
 800cee4:	4413      	add	r3, r2
 800cee6:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d002      	beq.n	800cef4 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	8a7a      	ldrh	r2, [r7, #18]
 800cef2:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800cef4:	697b      	ldr	r3, [r7, #20]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	371c      	adds	r7, #28
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
	...

0800cf04 <__errno>:
 800cf04:	4b01      	ldr	r3, [pc, #4]	; (800cf0c <__errno+0x8>)
 800cf06:	6818      	ldr	r0, [r3, #0]
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop
 800cf0c:	20000030 	.word	0x20000030

0800cf10 <__libc_init_array>:
 800cf10:	b570      	push	{r4, r5, r6, lr}
 800cf12:	4d0d      	ldr	r5, [pc, #52]	; (800cf48 <__libc_init_array+0x38>)
 800cf14:	4c0d      	ldr	r4, [pc, #52]	; (800cf4c <__libc_init_array+0x3c>)
 800cf16:	1b64      	subs	r4, r4, r5
 800cf18:	10a4      	asrs	r4, r4, #2
 800cf1a:	2600      	movs	r6, #0
 800cf1c:	42a6      	cmp	r6, r4
 800cf1e:	d109      	bne.n	800cf34 <__libc_init_array+0x24>
 800cf20:	4d0b      	ldr	r5, [pc, #44]	; (800cf50 <__libc_init_array+0x40>)
 800cf22:	4c0c      	ldr	r4, [pc, #48]	; (800cf54 <__libc_init_array+0x44>)
 800cf24:	f001 f9d8 	bl	800e2d8 <_init>
 800cf28:	1b64      	subs	r4, r4, r5
 800cf2a:	10a4      	asrs	r4, r4, #2
 800cf2c:	2600      	movs	r6, #0
 800cf2e:	42a6      	cmp	r6, r4
 800cf30:	d105      	bne.n	800cf3e <__libc_init_array+0x2e>
 800cf32:	bd70      	pop	{r4, r5, r6, pc}
 800cf34:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf38:	4798      	blx	r3
 800cf3a:	3601      	adds	r6, #1
 800cf3c:	e7ee      	b.n	800cf1c <__libc_init_array+0xc>
 800cf3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf42:	4798      	blx	r3
 800cf44:	3601      	adds	r6, #1
 800cf46:	e7f2      	b.n	800cf2e <__libc_init_array+0x1e>
 800cf48:	0800edd0 	.word	0x0800edd0
 800cf4c:	0800edd0 	.word	0x0800edd0
 800cf50:	0800edd0 	.word	0x0800edd0
 800cf54:	0800edd4 	.word	0x0800edd4

0800cf58 <memcpy>:
 800cf58:	440a      	add	r2, r1
 800cf5a:	4291      	cmp	r1, r2
 800cf5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf60:	d100      	bne.n	800cf64 <memcpy+0xc>
 800cf62:	4770      	bx	lr
 800cf64:	b510      	push	{r4, lr}
 800cf66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf6e:	4291      	cmp	r1, r2
 800cf70:	d1f9      	bne.n	800cf66 <memcpy+0xe>
 800cf72:	bd10      	pop	{r4, pc}

0800cf74 <memset>:
 800cf74:	4402      	add	r2, r0
 800cf76:	4603      	mov	r3, r0
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d100      	bne.n	800cf7e <memset+0xa>
 800cf7c:	4770      	bx	lr
 800cf7e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf82:	e7f9      	b.n	800cf78 <memset+0x4>

0800cf84 <iprintf>:
 800cf84:	b40f      	push	{r0, r1, r2, r3}
 800cf86:	4b0a      	ldr	r3, [pc, #40]	; (800cfb0 <iprintf+0x2c>)
 800cf88:	b513      	push	{r0, r1, r4, lr}
 800cf8a:	681c      	ldr	r4, [r3, #0]
 800cf8c:	b124      	cbz	r4, 800cf98 <iprintf+0x14>
 800cf8e:	69a3      	ldr	r3, [r4, #24]
 800cf90:	b913      	cbnz	r3, 800cf98 <iprintf+0x14>
 800cf92:	4620      	mov	r0, r4
 800cf94:	f000 f8d4 	bl	800d140 <__sinit>
 800cf98:	ab05      	add	r3, sp, #20
 800cf9a:	9a04      	ldr	r2, [sp, #16]
 800cf9c:	68a1      	ldr	r1, [r4, #8]
 800cf9e:	9301      	str	r3, [sp, #4]
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	f000 fb87 	bl	800d6b4 <_vfiprintf_r>
 800cfa6:	b002      	add	sp, #8
 800cfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfac:	b004      	add	sp, #16
 800cfae:	4770      	bx	lr
 800cfb0:	20000030 	.word	0x20000030

0800cfb4 <sniprintf>:
 800cfb4:	b40c      	push	{r2, r3}
 800cfb6:	b530      	push	{r4, r5, lr}
 800cfb8:	4b17      	ldr	r3, [pc, #92]	; (800d018 <sniprintf+0x64>)
 800cfba:	1e0c      	subs	r4, r1, #0
 800cfbc:	681d      	ldr	r5, [r3, #0]
 800cfbe:	b09d      	sub	sp, #116	; 0x74
 800cfc0:	da08      	bge.n	800cfd4 <sniprintf+0x20>
 800cfc2:	238b      	movs	r3, #139	; 0x8b
 800cfc4:	602b      	str	r3, [r5, #0]
 800cfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfca:	b01d      	add	sp, #116	; 0x74
 800cfcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfd0:	b002      	add	sp, #8
 800cfd2:	4770      	bx	lr
 800cfd4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cfd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cfdc:	bf14      	ite	ne
 800cfde:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cfe2:	4623      	moveq	r3, r4
 800cfe4:	9304      	str	r3, [sp, #16]
 800cfe6:	9307      	str	r3, [sp, #28]
 800cfe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfec:	9002      	str	r0, [sp, #8]
 800cfee:	9006      	str	r0, [sp, #24]
 800cff0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cff4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cff6:	ab21      	add	r3, sp, #132	; 0x84
 800cff8:	a902      	add	r1, sp, #8
 800cffa:	4628      	mov	r0, r5
 800cffc:	9301      	str	r3, [sp, #4]
 800cffe:	f000 fa2f 	bl	800d460 <_svfiprintf_r>
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	bfbc      	itt	lt
 800d006:	238b      	movlt	r3, #139	; 0x8b
 800d008:	602b      	strlt	r3, [r5, #0]
 800d00a:	2c00      	cmp	r4, #0
 800d00c:	d0dd      	beq.n	800cfca <sniprintf+0x16>
 800d00e:	9b02      	ldr	r3, [sp, #8]
 800d010:	2200      	movs	r2, #0
 800d012:	701a      	strb	r2, [r3, #0]
 800d014:	e7d9      	b.n	800cfca <sniprintf+0x16>
 800d016:	bf00      	nop
 800d018:	20000030 	.word	0x20000030

0800d01c <_vsniprintf_r>:
 800d01c:	b530      	push	{r4, r5, lr}
 800d01e:	4614      	mov	r4, r2
 800d020:	2c00      	cmp	r4, #0
 800d022:	b09b      	sub	sp, #108	; 0x6c
 800d024:	4605      	mov	r5, r0
 800d026:	461a      	mov	r2, r3
 800d028:	da05      	bge.n	800d036 <_vsniprintf_r+0x1a>
 800d02a:	238b      	movs	r3, #139	; 0x8b
 800d02c:	6003      	str	r3, [r0, #0]
 800d02e:	f04f 30ff 	mov.w	r0, #4294967295
 800d032:	b01b      	add	sp, #108	; 0x6c
 800d034:	bd30      	pop	{r4, r5, pc}
 800d036:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d03a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d03e:	bf14      	ite	ne
 800d040:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d044:	4623      	moveq	r3, r4
 800d046:	9302      	str	r3, [sp, #8]
 800d048:	9305      	str	r3, [sp, #20]
 800d04a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d04e:	9100      	str	r1, [sp, #0]
 800d050:	9104      	str	r1, [sp, #16]
 800d052:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d056:	4669      	mov	r1, sp
 800d058:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d05a:	f000 fa01 	bl	800d460 <_svfiprintf_r>
 800d05e:	1c43      	adds	r3, r0, #1
 800d060:	bfbc      	itt	lt
 800d062:	238b      	movlt	r3, #139	; 0x8b
 800d064:	602b      	strlt	r3, [r5, #0]
 800d066:	2c00      	cmp	r4, #0
 800d068:	d0e3      	beq.n	800d032 <_vsniprintf_r+0x16>
 800d06a:	9b00      	ldr	r3, [sp, #0]
 800d06c:	2200      	movs	r2, #0
 800d06e:	701a      	strb	r2, [r3, #0]
 800d070:	e7df      	b.n	800d032 <_vsniprintf_r+0x16>
	...

0800d074 <vsniprintf>:
 800d074:	b507      	push	{r0, r1, r2, lr}
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	4613      	mov	r3, r2
 800d07a:	460a      	mov	r2, r1
 800d07c:	4601      	mov	r1, r0
 800d07e:	4803      	ldr	r0, [pc, #12]	; (800d08c <vsniprintf+0x18>)
 800d080:	6800      	ldr	r0, [r0, #0]
 800d082:	f7ff ffcb 	bl	800d01c <_vsniprintf_r>
 800d086:	b003      	add	sp, #12
 800d088:	f85d fb04 	ldr.w	pc, [sp], #4
 800d08c:	20000030 	.word	0x20000030

0800d090 <std>:
 800d090:	2300      	movs	r3, #0
 800d092:	b510      	push	{r4, lr}
 800d094:	4604      	mov	r4, r0
 800d096:	e9c0 3300 	strd	r3, r3, [r0]
 800d09a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d09e:	6083      	str	r3, [r0, #8]
 800d0a0:	8181      	strh	r1, [r0, #12]
 800d0a2:	6643      	str	r3, [r0, #100]	; 0x64
 800d0a4:	81c2      	strh	r2, [r0, #14]
 800d0a6:	6183      	str	r3, [r0, #24]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	2208      	movs	r2, #8
 800d0ac:	305c      	adds	r0, #92	; 0x5c
 800d0ae:	f7ff ff61 	bl	800cf74 <memset>
 800d0b2:	4b05      	ldr	r3, [pc, #20]	; (800d0c8 <std+0x38>)
 800d0b4:	6263      	str	r3, [r4, #36]	; 0x24
 800d0b6:	4b05      	ldr	r3, [pc, #20]	; (800d0cc <std+0x3c>)
 800d0b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0ba:	4b05      	ldr	r3, [pc, #20]	; (800d0d0 <std+0x40>)
 800d0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0be:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <std+0x44>)
 800d0c0:	6224      	str	r4, [r4, #32]
 800d0c2:	6323      	str	r3, [r4, #48]	; 0x30
 800d0c4:	bd10      	pop	{r4, pc}
 800d0c6:	bf00      	nop
 800d0c8:	0800dc5d 	.word	0x0800dc5d
 800d0cc:	0800dc7f 	.word	0x0800dc7f
 800d0d0:	0800dcb7 	.word	0x0800dcb7
 800d0d4:	0800dcdb 	.word	0x0800dcdb

0800d0d8 <_cleanup_r>:
 800d0d8:	4901      	ldr	r1, [pc, #4]	; (800d0e0 <_cleanup_r+0x8>)
 800d0da:	f000 b8af 	b.w	800d23c <_fwalk_reent>
 800d0de:	bf00      	nop
 800d0e0:	0800dfb5 	.word	0x0800dfb5

0800d0e4 <__sfmoreglue>:
 800d0e4:	b570      	push	{r4, r5, r6, lr}
 800d0e6:	2268      	movs	r2, #104	; 0x68
 800d0e8:	1e4d      	subs	r5, r1, #1
 800d0ea:	4355      	muls	r5, r2
 800d0ec:	460e      	mov	r6, r1
 800d0ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d0f2:	f000 f8e5 	bl	800d2c0 <_malloc_r>
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	b140      	cbz	r0, 800d10c <__sfmoreglue+0x28>
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	e9c0 1600 	strd	r1, r6, [r0]
 800d100:	300c      	adds	r0, #12
 800d102:	60a0      	str	r0, [r4, #8]
 800d104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d108:	f7ff ff34 	bl	800cf74 <memset>
 800d10c:	4620      	mov	r0, r4
 800d10e:	bd70      	pop	{r4, r5, r6, pc}

0800d110 <__sfp_lock_acquire>:
 800d110:	4801      	ldr	r0, [pc, #4]	; (800d118 <__sfp_lock_acquire+0x8>)
 800d112:	f000 b8b3 	b.w	800d27c <__retarget_lock_acquire_recursive>
 800d116:	bf00      	nop
 800d118:	20001991 	.word	0x20001991

0800d11c <__sfp_lock_release>:
 800d11c:	4801      	ldr	r0, [pc, #4]	; (800d124 <__sfp_lock_release+0x8>)
 800d11e:	f000 b8ae 	b.w	800d27e <__retarget_lock_release_recursive>
 800d122:	bf00      	nop
 800d124:	20001991 	.word	0x20001991

0800d128 <__sinit_lock_acquire>:
 800d128:	4801      	ldr	r0, [pc, #4]	; (800d130 <__sinit_lock_acquire+0x8>)
 800d12a:	f000 b8a7 	b.w	800d27c <__retarget_lock_acquire_recursive>
 800d12e:	bf00      	nop
 800d130:	20001992 	.word	0x20001992

0800d134 <__sinit_lock_release>:
 800d134:	4801      	ldr	r0, [pc, #4]	; (800d13c <__sinit_lock_release+0x8>)
 800d136:	f000 b8a2 	b.w	800d27e <__retarget_lock_release_recursive>
 800d13a:	bf00      	nop
 800d13c:	20001992 	.word	0x20001992

0800d140 <__sinit>:
 800d140:	b510      	push	{r4, lr}
 800d142:	4604      	mov	r4, r0
 800d144:	f7ff fff0 	bl	800d128 <__sinit_lock_acquire>
 800d148:	69a3      	ldr	r3, [r4, #24]
 800d14a:	b11b      	cbz	r3, 800d154 <__sinit+0x14>
 800d14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d150:	f7ff bff0 	b.w	800d134 <__sinit_lock_release>
 800d154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d158:	6523      	str	r3, [r4, #80]	; 0x50
 800d15a:	4b13      	ldr	r3, [pc, #76]	; (800d1a8 <__sinit+0x68>)
 800d15c:	4a13      	ldr	r2, [pc, #76]	; (800d1ac <__sinit+0x6c>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	62a2      	str	r2, [r4, #40]	; 0x28
 800d162:	42a3      	cmp	r3, r4
 800d164:	bf04      	itt	eq
 800d166:	2301      	moveq	r3, #1
 800d168:	61a3      	streq	r3, [r4, #24]
 800d16a:	4620      	mov	r0, r4
 800d16c:	f000 f820 	bl	800d1b0 <__sfp>
 800d170:	6060      	str	r0, [r4, #4]
 800d172:	4620      	mov	r0, r4
 800d174:	f000 f81c 	bl	800d1b0 <__sfp>
 800d178:	60a0      	str	r0, [r4, #8]
 800d17a:	4620      	mov	r0, r4
 800d17c:	f000 f818 	bl	800d1b0 <__sfp>
 800d180:	2200      	movs	r2, #0
 800d182:	60e0      	str	r0, [r4, #12]
 800d184:	2104      	movs	r1, #4
 800d186:	6860      	ldr	r0, [r4, #4]
 800d188:	f7ff ff82 	bl	800d090 <std>
 800d18c:	68a0      	ldr	r0, [r4, #8]
 800d18e:	2201      	movs	r2, #1
 800d190:	2109      	movs	r1, #9
 800d192:	f7ff ff7d 	bl	800d090 <std>
 800d196:	68e0      	ldr	r0, [r4, #12]
 800d198:	2202      	movs	r2, #2
 800d19a:	2112      	movs	r1, #18
 800d19c:	f7ff ff78 	bl	800d090 <std>
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	61a3      	str	r3, [r4, #24]
 800d1a4:	e7d2      	b.n	800d14c <__sinit+0xc>
 800d1a6:	bf00      	nop
 800d1a8:	0800ed30 	.word	0x0800ed30
 800d1ac:	0800d0d9 	.word	0x0800d0d9

0800d1b0 <__sfp>:
 800d1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b2:	4607      	mov	r7, r0
 800d1b4:	f7ff ffac 	bl	800d110 <__sfp_lock_acquire>
 800d1b8:	4b1e      	ldr	r3, [pc, #120]	; (800d234 <__sfp+0x84>)
 800d1ba:	681e      	ldr	r6, [r3, #0]
 800d1bc:	69b3      	ldr	r3, [r6, #24]
 800d1be:	b913      	cbnz	r3, 800d1c6 <__sfp+0x16>
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	f7ff ffbd 	bl	800d140 <__sinit>
 800d1c6:	3648      	adds	r6, #72	; 0x48
 800d1c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	d503      	bpl.n	800d1d8 <__sfp+0x28>
 800d1d0:	6833      	ldr	r3, [r6, #0]
 800d1d2:	b30b      	cbz	r3, 800d218 <__sfp+0x68>
 800d1d4:	6836      	ldr	r6, [r6, #0]
 800d1d6:	e7f7      	b.n	800d1c8 <__sfp+0x18>
 800d1d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d1dc:	b9d5      	cbnz	r5, 800d214 <__sfp+0x64>
 800d1de:	4b16      	ldr	r3, [pc, #88]	; (800d238 <__sfp+0x88>)
 800d1e0:	60e3      	str	r3, [r4, #12]
 800d1e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d1e6:	6665      	str	r5, [r4, #100]	; 0x64
 800d1e8:	f000 f847 	bl	800d27a <__retarget_lock_init_recursive>
 800d1ec:	f7ff ff96 	bl	800d11c <__sfp_lock_release>
 800d1f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d1f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d1f8:	6025      	str	r5, [r4, #0]
 800d1fa:	61a5      	str	r5, [r4, #24]
 800d1fc:	2208      	movs	r2, #8
 800d1fe:	4629      	mov	r1, r5
 800d200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d204:	f7ff feb6 	bl	800cf74 <memset>
 800d208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d20c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d210:	4620      	mov	r0, r4
 800d212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d214:	3468      	adds	r4, #104	; 0x68
 800d216:	e7d9      	b.n	800d1cc <__sfp+0x1c>
 800d218:	2104      	movs	r1, #4
 800d21a:	4638      	mov	r0, r7
 800d21c:	f7ff ff62 	bl	800d0e4 <__sfmoreglue>
 800d220:	4604      	mov	r4, r0
 800d222:	6030      	str	r0, [r6, #0]
 800d224:	2800      	cmp	r0, #0
 800d226:	d1d5      	bne.n	800d1d4 <__sfp+0x24>
 800d228:	f7ff ff78 	bl	800d11c <__sfp_lock_release>
 800d22c:	230c      	movs	r3, #12
 800d22e:	603b      	str	r3, [r7, #0]
 800d230:	e7ee      	b.n	800d210 <__sfp+0x60>
 800d232:	bf00      	nop
 800d234:	0800ed30 	.word	0x0800ed30
 800d238:	ffff0001 	.word	0xffff0001

0800d23c <_fwalk_reent>:
 800d23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d240:	4606      	mov	r6, r0
 800d242:	4688      	mov	r8, r1
 800d244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d248:	2700      	movs	r7, #0
 800d24a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d24e:	f1b9 0901 	subs.w	r9, r9, #1
 800d252:	d505      	bpl.n	800d260 <_fwalk_reent+0x24>
 800d254:	6824      	ldr	r4, [r4, #0]
 800d256:	2c00      	cmp	r4, #0
 800d258:	d1f7      	bne.n	800d24a <_fwalk_reent+0xe>
 800d25a:	4638      	mov	r0, r7
 800d25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d260:	89ab      	ldrh	r3, [r5, #12]
 800d262:	2b01      	cmp	r3, #1
 800d264:	d907      	bls.n	800d276 <_fwalk_reent+0x3a>
 800d266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d26a:	3301      	adds	r3, #1
 800d26c:	d003      	beq.n	800d276 <_fwalk_reent+0x3a>
 800d26e:	4629      	mov	r1, r5
 800d270:	4630      	mov	r0, r6
 800d272:	47c0      	blx	r8
 800d274:	4307      	orrs	r7, r0
 800d276:	3568      	adds	r5, #104	; 0x68
 800d278:	e7e9      	b.n	800d24e <_fwalk_reent+0x12>

0800d27a <__retarget_lock_init_recursive>:
 800d27a:	4770      	bx	lr

0800d27c <__retarget_lock_acquire_recursive>:
 800d27c:	4770      	bx	lr

0800d27e <__retarget_lock_release_recursive>:
 800d27e:	4770      	bx	lr

0800d280 <sbrk_aligned>:
 800d280:	b570      	push	{r4, r5, r6, lr}
 800d282:	4e0e      	ldr	r6, [pc, #56]	; (800d2bc <sbrk_aligned+0x3c>)
 800d284:	460c      	mov	r4, r1
 800d286:	6831      	ldr	r1, [r6, #0]
 800d288:	4605      	mov	r5, r0
 800d28a:	b911      	cbnz	r1, 800d292 <sbrk_aligned+0x12>
 800d28c:	f000 fcd6 	bl	800dc3c <_sbrk_r>
 800d290:	6030      	str	r0, [r6, #0]
 800d292:	4621      	mov	r1, r4
 800d294:	4628      	mov	r0, r5
 800d296:	f000 fcd1 	bl	800dc3c <_sbrk_r>
 800d29a:	1c43      	adds	r3, r0, #1
 800d29c:	d00a      	beq.n	800d2b4 <sbrk_aligned+0x34>
 800d29e:	1cc4      	adds	r4, r0, #3
 800d2a0:	f024 0403 	bic.w	r4, r4, #3
 800d2a4:	42a0      	cmp	r0, r4
 800d2a6:	d007      	beq.n	800d2b8 <sbrk_aligned+0x38>
 800d2a8:	1a21      	subs	r1, r4, r0
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	f000 fcc6 	bl	800dc3c <_sbrk_r>
 800d2b0:	3001      	adds	r0, #1
 800d2b2:	d101      	bne.n	800d2b8 <sbrk_aligned+0x38>
 800d2b4:	f04f 34ff 	mov.w	r4, #4294967295
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	bd70      	pop	{r4, r5, r6, pc}
 800d2bc:	20001998 	.word	0x20001998

0800d2c0 <_malloc_r>:
 800d2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c4:	1ccd      	adds	r5, r1, #3
 800d2c6:	f025 0503 	bic.w	r5, r5, #3
 800d2ca:	3508      	adds	r5, #8
 800d2cc:	2d0c      	cmp	r5, #12
 800d2ce:	bf38      	it	cc
 800d2d0:	250c      	movcc	r5, #12
 800d2d2:	2d00      	cmp	r5, #0
 800d2d4:	4607      	mov	r7, r0
 800d2d6:	db01      	blt.n	800d2dc <_malloc_r+0x1c>
 800d2d8:	42a9      	cmp	r1, r5
 800d2da:	d905      	bls.n	800d2e8 <_malloc_r+0x28>
 800d2dc:	230c      	movs	r3, #12
 800d2de:	603b      	str	r3, [r7, #0]
 800d2e0:	2600      	movs	r6, #0
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e8:	4e2e      	ldr	r6, [pc, #184]	; (800d3a4 <_malloc_r+0xe4>)
 800d2ea:	f000 ff31 	bl	800e150 <__malloc_lock>
 800d2ee:	6833      	ldr	r3, [r6, #0]
 800d2f0:	461c      	mov	r4, r3
 800d2f2:	bb34      	cbnz	r4, 800d342 <_malloc_r+0x82>
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	4638      	mov	r0, r7
 800d2f8:	f7ff ffc2 	bl	800d280 <sbrk_aligned>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	4604      	mov	r4, r0
 800d300:	d14d      	bne.n	800d39e <_malloc_r+0xde>
 800d302:	6834      	ldr	r4, [r6, #0]
 800d304:	4626      	mov	r6, r4
 800d306:	2e00      	cmp	r6, #0
 800d308:	d140      	bne.n	800d38c <_malloc_r+0xcc>
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	4631      	mov	r1, r6
 800d30e:	4638      	mov	r0, r7
 800d310:	eb04 0803 	add.w	r8, r4, r3
 800d314:	f000 fc92 	bl	800dc3c <_sbrk_r>
 800d318:	4580      	cmp	r8, r0
 800d31a:	d13a      	bne.n	800d392 <_malloc_r+0xd2>
 800d31c:	6821      	ldr	r1, [r4, #0]
 800d31e:	3503      	adds	r5, #3
 800d320:	1a6d      	subs	r5, r5, r1
 800d322:	f025 0503 	bic.w	r5, r5, #3
 800d326:	3508      	adds	r5, #8
 800d328:	2d0c      	cmp	r5, #12
 800d32a:	bf38      	it	cc
 800d32c:	250c      	movcc	r5, #12
 800d32e:	4629      	mov	r1, r5
 800d330:	4638      	mov	r0, r7
 800d332:	f7ff ffa5 	bl	800d280 <sbrk_aligned>
 800d336:	3001      	adds	r0, #1
 800d338:	d02b      	beq.n	800d392 <_malloc_r+0xd2>
 800d33a:	6823      	ldr	r3, [r4, #0]
 800d33c:	442b      	add	r3, r5
 800d33e:	6023      	str	r3, [r4, #0]
 800d340:	e00e      	b.n	800d360 <_malloc_r+0xa0>
 800d342:	6822      	ldr	r2, [r4, #0]
 800d344:	1b52      	subs	r2, r2, r5
 800d346:	d41e      	bmi.n	800d386 <_malloc_r+0xc6>
 800d348:	2a0b      	cmp	r2, #11
 800d34a:	d916      	bls.n	800d37a <_malloc_r+0xba>
 800d34c:	1961      	adds	r1, r4, r5
 800d34e:	42a3      	cmp	r3, r4
 800d350:	6025      	str	r5, [r4, #0]
 800d352:	bf18      	it	ne
 800d354:	6059      	strne	r1, [r3, #4]
 800d356:	6863      	ldr	r3, [r4, #4]
 800d358:	bf08      	it	eq
 800d35a:	6031      	streq	r1, [r6, #0]
 800d35c:	5162      	str	r2, [r4, r5]
 800d35e:	604b      	str	r3, [r1, #4]
 800d360:	4638      	mov	r0, r7
 800d362:	f104 060b 	add.w	r6, r4, #11
 800d366:	f000 fef9 	bl	800e15c <__malloc_unlock>
 800d36a:	f026 0607 	bic.w	r6, r6, #7
 800d36e:	1d23      	adds	r3, r4, #4
 800d370:	1af2      	subs	r2, r6, r3
 800d372:	d0b6      	beq.n	800d2e2 <_malloc_r+0x22>
 800d374:	1b9b      	subs	r3, r3, r6
 800d376:	50a3      	str	r3, [r4, r2]
 800d378:	e7b3      	b.n	800d2e2 <_malloc_r+0x22>
 800d37a:	6862      	ldr	r2, [r4, #4]
 800d37c:	42a3      	cmp	r3, r4
 800d37e:	bf0c      	ite	eq
 800d380:	6032      	streq	r2, [r6, #0]
 800d382:	605a      	strne	r2, [r3, #4]
 800d384:	e7ec      	b.n	800d360 <_malloc_r+0xa0>
 800d386:	4623      	mov	r3, r4
 800d388:	6864      	ldr	r4, [r4, #4]
 800d38a:	e7b2      	b.n	800d2f2 <_malloc_r+0x32>
 800d38c:	4634      	mov	r4, r6
 800d38e:	6876      	ldr	r6, [r6, #4]
 800d390:	e7b9      	b.n	800d306 <_malloc_r+0x46>
 800d392:	230c      	movs	r3, #12
 800d394:	603b      	str	r3, [r7, #0]
 800d396:	4638      	mov	r0, r7
 800d398:	f000 fee0 	bl	800e15c <__malloc_unlock>
 800d39c:	e7a1      	b.n	800d2e2 <_malloc_r+0x22>
 800d39e:	6025      	str	r5, [r4, #0]
 800d3a0:	e7de      	b.n	800d360 <_malloc_r+0xa0>
 800d3a2:	bf00      	nop
 800d3a4:	20001994 	.word	0x20001994

0800d3a8 <__ssputs_r>:
 800d3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ac:	688e      	ldr	r6, [r1, #8]
 800d3ae:	429e      	cmp	r6, r3
 800d3b0:	4682      	mov	sl, r0
 800d3b2:	460c      	mov	r4, r1
 800d3b4:	4690      	mov	r8, r2
 800d3b6:	461f      	mov	r7, r3
 800d3b8:	d838      	bhi.n	800d42c <__ssputs_r+0x84>
 800d3ba:	898a      	ldrh	r2, [r1, #12]
 800d3bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3c0:	d032      	beq.n	800d428 <__ssputs_r+0x80>
 800d3c2:	6825      	ldr	r5, [r4, #0]
 800d3c4:	6909      	ldr	r1, [r1, #16]
 800d3c6:	eba5 0901 	sub.w	r9, r5, r1
 800d3ca:	6965      	ldr	r5, [r4, #20]
 800d3cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	444b      	add	r3, r9
 800d3d8:	106d      	asrs	r5, r5, #1
 800d3da:	429d      	cmp	r5, r3
 800d3dc:	bf38      	it	cc
 800d3de:	461d      	movcc	r5, r3
 800d3e0:	0553      	lsls	r3, r2, #21
 800d3e2:	d531      	bpl.n	800d448 <__ssputs_r+0xa0>
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	f7ff ff6b 	bl	800d2c0 <_malloc_r>
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	b950      	cbnz	r0, 800d404 <__ssputs_r+0x5c>
 800d3ee:	230c      	movs	r3, #12
 800d3f0:	f8ca 3000 	str.w	r3, [sl]
 800d3f4:	89a3      	ldrh	r3, [r4, #12]
 800d3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3fa:	81a3      	strh	r3, [r4, #12]
 800d3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d404:	6921      	ldr	r1, [r4, #16]
 800d406:	464a      	mov	r2, r9
 800d408:	f7ff fda6 	bl	800cf58 <memcpy>
 800d40c:	89a3      	ldrh	r3, [r4, #12]
 800d40e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d416:	81a3      	strh	r3, [r4, #12]
 800d418:	6126      	str	r6, [r4, #16]
 800d41a:	6165      	str	r5, [r4, #20]
 800d41c:	444e      	add	r6, r9
 800d41e:	eba5 0509 	sub.w	r5, r5, r9
 800d422:	6026      	str	r6, [r4, #0]
 800d424:	60a5      	str	r5, [r4, #8]
 800d426:	463e      	mov	r6, r7
 800d428:	42be      	cmp	r6, r7
 800d42a:	d900      	bls.n	800d42e <__ssputs_r+0x86>
 800d42c:	463e      	mov	r6, r7
 800d42e:	6820      	ldr	r0, [r4, #0]
 800d430:	4632      	mov	r2, r6
 800d432:	4641      	mov	r1, r8
 800d434:	f000 fe72 	bl	800e11c <memmove>
 800d438:	68a3      	ldr	r3, [r4, #8]
 800d43a:	1b9b      	subs	r3, r3, r6
 800d43c:	60a3      	str	r3, [r4, #8]
 800d43e:	6823      	ldr	r3, [r4, #0]
 800d440:	4433      	add	r3, r6
 800d442:	6023      	str	r3, [r4, #0]
 800d444:	2000      	movs	r0, #0
 800d446:	e7db      	b.n	800d400 <__ssputs_r+0x58>
 800d448:	462a      	mov	r2, r5
 800d44a:	f000 fed9 	bl	800e200 <_realloc_r>
 800d44e:	4606      	mov	r6, r0
 800d450:	2800      	cmp	r0, #0
 800d452:	d1e1      	bne.n	800d418 <__ssputs_r+0x70>
 800d454:	6921      	ldr	r1, [r4, #16]
 800d456:	4650      	mov	r0, sl
 800d458:	f000 fe86 	bl	800e168 <_free_r>
 800d45c:	e7c7      	b.n	800d3ee <__ssputs_r+0x46>
	...

0800d460 <_svfiprintf_r>:
 800d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d464:	4698      	mov	r8, r3
 800d466:	898b      	ldrh	r3, [r1, #12]
 800d468:	061b      	lsls	r3, r3, #24
 800d46a:	b09d      	sub	sp, #116	; 0x74
 800d46c:	4607      	mov	r7, r0
 800d46e:	460d      	mov	r5, r1
 800d470:	4614      	mov	r4, r2
 800d472:	d50e      	bpl.n	800d492 <_svfiprintf_r+0x32>
 800d474:	690b      	ldr	r3, [r1, #16]
 800d476:	b963      	cbnz	r3, 800d492 <_svfiprintf_r+0x32>
 800d478:	2140      	movs	r1, #64	; 0x40
 800d47a:	f7ff ff21 	bl	800d2c0 <_malloc_r>
 800d47e:	6028      	str	r0, [r5, #0]
 800d480:	6128      	str	r0, [r5, #16]
 800d482:	b920      	cbnz	r0, 800d48e <_svfiprintf_r+0x2e>
 800d484:	230c      	movs	r3, #12
 800d486:	603b      	str	r3, [r7, #0]
 800d488:	f04f 30ff 	mov.w	r0, #4294967295
 800d48c:	e0d1      	b.n	800d632 <_svfiprintf_r+0x1d2>
 800d48e:	2340      	movs	r3, #64	; 0x40
 800d490:	616b      	str	r3, [r5, #20]
 800d492:	2300      	movs	r3, #0
 800d494:	9309      	str	r3, [sp, #36]	; 0x24
 800d496:	2320      	movs	r3, #32
 800d498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d49c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4a0:	2330      	movs	r3, #48	; 0x30
 800d4a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d64c <_svfiprintf_r+0x1ec>
 800d4a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4aa:	f04f 0901 	mov.w	r9, #1
 800d4ae:	4623      	mov	r3, r4
 800d4b0:	469a      	mov	sl, r3
 800d4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4b6:	b10a      	cbz	r2, 800d4bc <_svfiprintf_r+0x5c>
 800d4b8:	2a25      	cmp	r2, #37	; 0x25
 800d4ba:	d1f9      	bne.n	800d4b0 <_svfiprintf_r+0x50>
 800d4bc:	ebba 0b04 	subs.w	fp, sl, r4
 800d4c0:	d00b      	beq.n	800d4da <_svfiprintf_r+0x7a>
 800d4c2:	465b      	mov	r3, fp
 800d4c4:	4622      	mov	r2, r4
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	4638      	mov	r0, r7
 800d4ca:	f7ff ff6d 	bl	800d3a8 <__ssputs_r>
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	f000 80aa 	beq.w	800d628 <_svfiprintf_r+0x1c8>
 800d4d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4d6:	445a      	add	r2, fp
 800d4d8:	9209      	str	r2, [sp, #36]	; 0x24
 800d4da:	f89a 3000 	ldrb.w	r3, [sl]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f000 80a2 	beq.w	800d628 <_svfiprintf_r+0x1c8>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4ee:	f10a 0a01 	add.w	sl, sl, #1
 800d4f2:	9304      	str	r3, [sp, #16]
 800d4f4:	9307      	str	r3, [sp, #28]
 800d4f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4fa:	931a      	str	r3, [sp, #104]	; 0x68
 800d4fc:	4654      	mov	r4, sl
 800d4fe:	2205      	movs	r2, #5
 800d500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d504:	4851      	ldr	r0, [pc, #324]	; (800d64c <_svfiprintf_r+0x1ec>)
 800d506:	f7f2 fe53 	bl	80001b0 <memchr>
 800d50a:	9a04      	ldr	r2, [sp, #16]
 800d50c:	b9d8      	cbnz	r0, 800d546 <_svfiprintf_r+0xe6>
 800d50e:	06d0      	lsls	r0, r2, #27
 800d510:	bf44      	itt	mi
 800d512:	2320      	movmi	r3, #32
 800d514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d518:	0711      	lsls	r1, r2, #28
 800d51a:	bf44      	itt	mi
 800d51c:	232b      	movmi	r3, #43	; 0x2b
 800d51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d522:	f89a 3000 	ldrb.w	r3, [sl]
 800d526:	2b2a      	cmp	r3, #42	; 0x2a
 800d528:	d015      	beq.n	800d556 <_svfiprintf_r+0xf6>
 800d52a:	9a07      	ldr	r2, [sp, #28]
 800d52c:	4654      	mov	r4, sl
 800d52e:	2000      	movs	r0, #0
 800d530:	f04f 0c0a 	mov.w	ip, #10
 800d534:	4621      	mov	r1, r4
 800d536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d53a:	3b30      	subs	r3, #48	; 0x30
 800d53c:	2b09      	cmp	r3, #9
 800d53e:	d94e      	bls.n	800d5de <_svfiprintf_r+0x17e>
 800d540:	b1b0      	cbz	r0, 800d570 <_svfiprintf_r+0x110>
 800d542:	9207      	str	r2, [sp, #28]
 800d544:	e014      	b.n	800d570 <_svfiprintf_r+0x110>
 800d546:	eba0 0308 	sub.w	r3, r0, r8
 800d54a:	fa09 f303 	lsl.w	r3, r9, r3
 800d54e:	4313      	orrs	r3, r2
 800d550:	9304      	str	r3, [sp, #16]
 800d552:	46a2      	mov	sl, r4
 800d554:	e7d2      	b.n	800d4fc <_svfiprintf_r+0x9c>
 800d556:	9b03      	ldr	r3, [sp, #12]
 800d558:	1d19      	adds	r1, r3, #4
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	9103      	str	r1, [sp, #12]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	bfbb      	ittet	lt
 800d562:	425b      	neglt	r3, r3
 800d564:	f042 0202 	orrlt.w	r2, r2, #2
 800d568:	9307      	strge	r3, [sp, #28]
 800d56a:	9307      	strlt	r3, [sp, #28]
 800d56c:	bfb8      	it	lt
 800d56e:	9204      	strlt	r2, [sp, #16]
 800d570:	7823      	ldrb	r3, [r4, #0]
 800d572:	2b2e      	cmp	r3, #46	; 0x2e
 800d574:	d10c      	bne.n	800d590 <_svfiprintf_r+0x130>
 800d576:	7863      	ldrb	r3, [r4, #1]
 800d578:	2b2a      	cmp	r3, #42	; 0x2a
 800d57a:	d135      	bne.n	800d5e8 <_svfiprintf_r+0x188>
 800d57c:	9b03      	ldr	r3, [sp, #12]
 800d57e:	1d1a      	adds	r2, r3, #4
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	9203      	str	r2, [sp, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	bfb8      	it	lt
 800d588:	f04f 33ff 	movlt.w	r3, #4294967295
 800d58c:	3402      	adds	r4, #2
 800d58e:	9305      	str	r3, [sp, #20]
 800d590:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d65c <_svfiprintf_r+0x1fc>
 800d594:	7821      	ldrb	r1, [r4, #0]
 800d596:	2203      	movs	r2, #3
 800d598:	4650      	mov	r0, sl
 800d59a:	f7f2 fe09 	bl	80001b0 <memchr>
 800d59e:	b140      	cbz	r0, 800d5b2 <_svfiprintf_r+0x152>
 800d5a0:	2340      	movs	r3, #64	; 0x40
 800d5a2:	eba0 000a 	sub.w	r0, r0, sl
 800d5a6:	fa03 f000 	lsl.w	r0, r3, r0
 800d5aa:	9b04      	ldr	r3, [sp, #16]
 800d5ac:	4303      	orrs	r3, r0
 800d5ae:	3401      	adds	r4, #1
 800d5b0:	9304      	str	r3, [sp, #16]
 800d5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5b6:	4826      	ldr	r0, [pc, #152]	; (800d650 <_svfiprintf_r+0x1f0>)
 800d5b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5bc:	2206      	movs	r2, #6
 800d5be:	f7f2 fdf7 	bl	80001b0 <memchr>
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	d038      	beq.n	800d638 <_svfiprintf_r+0x1d8>
 800d5c6:	4b23      	ldr	r3, [pc, #140]	; (800d654 <_svfiprintf_r+0x1f4>)
 800d5c8:	bb1b      	cbnz	r3, 800d612 <_svfiprintf_r+0x1b2>
 800d5ca:	9b03      	ldr	r3, [sp, #12]
 800d5cc:	3307      	adds	r3, #7
 800d5ce:	f023 0307 	bic.w	r3, r3, #7
 800d5d2:	3308      	adds	r3, #8
 800d5d4:	9303      	str	r3, [sp, #12]
 800d5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5d8:	4433      	add	r3, r6
 800d5da:	9309      	str	r3, [sp, #36]	; 0x24
 800d5dc:	e767      	b.n	800d4ae <_svfiprintf_r+0x4e>
 800d5de:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	2001      	movs	r0, #1
 800d5e6:	e7a5      	b.n	800d534 <_svfiprintf_r+0xd4>
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	3401      	adds	r4, #1
 800d5ec:	9305      	str	r3, [sp, #20]
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	f04f 0c0a 	mov.w	ip, #10
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5fa:	3a30      	subs	r2, #48	; 0x30
 800d5fc:	2a09      	cmp	r2, #9
 800d5fe:	d903      	bls.n	800d608 <_svfiprintf_r+0x1a8>
 800d600:	2b00      	cmp	r3, #0
 800d602:	d0c5      	beq.n	800d590 <_svfiprintf_r+0x130>
 800d604:	9105      	str	r1, [sp, #20]
 800d606:	e7c3      	b.n	800d590 <_svfiprintf_r+0x130>
 800d608:	fb0c 2101 	mla	r1, ip, r1, r2
 800d60c:	4604      	mov	r4, r0
 800d60e:	2301      	movs	r3, #1
 800d610:	e7f0      	b.n	800d5f4 <_svfiprintf_r+0x194>
 800d612:	ab03      	add	r3, sp, #12
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	462a      	mov	r2, r5
 800d618:	4b0f      	ldr	r3, [pc, #60]	; (800d658 <_svfiprintf_r+0x1f8>)
 800d61a:	a904      	add	r1, sp, #16
 800d61c:	4638      	mov	r0, r7
 800d61e:	f3af 8000 	nop.w
 800d622:	1c42      	adds	r2, r0, #1
 800d624:	4606      	mov	r6, r0
 800d626:	d1d6      	bne.n	800d5d6 <_svfiprintf_r+0x176>
 800d628:	89ab      	ldrh	r3, [r5, #12]
 800d62a:	065b      	lsls	r3, r3, #25
 800d62c:	f53f af2c 	bmi.w	800d488 <_svfiprintf_r+0x28>
 800d630:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d632:	b01d      	add	sp, #116	; 0x74
 800d634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d638:	ab03      	add	r3, sp, #12
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	462a      	mov	r2, r5
 800d63e:	4b06      	ldr	r3, [pc, #24]	; (800d658 <_svfiprintf_r+0x1f8>)
 800d640:	a904      	add	r1, sp, #16
 800d642:	4638      	mov	r0, r7
 800d644:	f000 f9d4 	bl	800d9f0 <_printf_i>
 800d648:	e7eb      	b.n	800d622 <_svfiprintf_r+0x1c2>
 800d64a:	bf00      	nop
 800d64c:	0800ed94 	.word	0x0800ed94
 800d650:	0800ed9e 	.word	0x0800ed9e
 800d654:	00000000 	.word	0x00000000
 800d658:	0800d3a9 	.word	0x0800d3a9
 800d65c:	0800ed9a 	.word	0x0800ed9a

0800d660 <__sfputc_r>:
 800d660:	6893      	ldr	r3, [r2, #8]
 800d662:	3b01      	subs	r3, #1
 800d664:	2b00      	cmp	r3, #0
 800d666:	b410      	push	{r4}
 800d668:	6093      	str	r3, [r2, #8]
 800d66a:	da08      	bge.n	800d67e <__sfputc_r+0x1e>
 800d66c:	6994      	ldr	r4, [r2, #24]
 800d66e:	42a3      	cmp	r3, r4
 800d670:	db01      	blt.n	800d676 <__sfputc_r+0x16>
 800d672:	290a      	cmp	r1, #10
 800d674:	d103      	bne.n	800d67e <__sfputc_r+0x1e>
 800d676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d67a:	f000 bb33 	b.w	800dce4 <__swbuf_r>
 800d67e:	6813      	ldr	r3, [r2, #0]
 800d680:	1c58      	adds	r0, r3, #1
 800d682:	6010      	str	r0, [r2, #0]
 800d684:	7019      	strb	r1, [r3, #0]
 800d686:	4608      	mov	r0, r1
 800d688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d68c:	4770      	bx	lr

0800d68e <__sfputs_r>:
 800d68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d690:	4606      	mov	r6, r0
 800d692:	460f      	mov	r7, r1
 800d694:	4614      	mov	r4, r2
 800d696:	18d5      	adds	r5, r2, r3
 800d698:	42ac      	cmp	r4, r5
 800d69a:	d101      	bne.n	800d6a0 <__sfputs_r+0x12>
 800d69c:	2000      	movs	r0, #0
 800d69e:	e007      	b.n	800d6b0 <__sfputs_r+0x22>
 800d6a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6a4:	463a      	mov	r2, r7
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	f7ff ffda 	bl	800d660 <__sfputc_r>
 800d6ac:	1c43      	adds	r3, r0, #1
 800d6ae:	d1f3      	bne.n	800d698 <__sfputs_r+0xa>
 800d6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6b4 <_vfiprintf_r>:
 800d6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b8:	460d      	mov	r5, r1
 800d6ba:	b09d      	sub	sp, #116	; 0x74
 800d6bc:	4614      	mov	r4, r2
 800d6be:	4698      	mov	r8, r3
 800d6c0:	4606      	mov	r6, r0
 800d6c2:	b118      	cbz	r0, 800d6cc <_vfiprintf_r+0x18>
 800d6c4:	6983      	ldr	r3, [r0, #24]
 800d6c6:	b90b      	cbnz	r3, 800d6cc <_vfiprintf_r+0x18>
 800d6c8:	f7ff fd3a 	bl	800d140 <__sinit>
 800d6cc:	4b89      	ldr	r3, [pc, #548]	; (800d8f4 <_vfiprintf_r+0x240>)
 800d6ce:	429d      	cmp	r5, r3
 800d6d0:	d11b      	bne.n	800d70a <_vfiprintf_r+0x56>
 800d6d2:	6875      	ldr	r5, [r6, #4]
 800d6d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6d6:	07d9      	lsls	r1, r3, #31
 800d6d8:	d405      	bmi.n	800d6e6 <_vfiprintf_r+0x32>
 800d6da:	89ab      	ldrh	r3, [r5, #12]
 800d6dc:	059a      	lsls	r2, r3, #22
 800d6de:	d402      	bmi.n	800d6e6 <_vfiprintf_r+0x32>
 800d6e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6e2:	f7ff fdcb 	bl	800d27c <__retarget_lock_acquire_recursive>
 800d6e6:	89ab      	ldrh	r3, [r5, #12]
 800d6e8:	071b      	lsls	r3, r3, #28
 800d6ea:	d501      	bpl.n	800d6f0 <_vfiprintf_r+0x3c>
 800d6ec:	692b      	ldr	r3, [r5, #16]
 800d6ee:	b9eb      	cbnz	r3, 800d72c <_vfiprintf_r+0x78>
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f000 fb5a 	bl	800ddac <__swsetup_r>
 800d6f8:	b1c0      	cbz	r0, 800d72c <_vfiprintf_r+0x78>
 800d6fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6fc:	07dc      	lsls	r4, r3, #31
 800d6fe:	d50e      	bpl.n	800d71e <_vfiprintf_r+0x6a>
 800d700:	f04f 30ff 	mov.w	r0, #4294967295
 800d704:	b01d      	add	sp, #116	; 0x74
 800d706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70a:	4b7b      	ldr	r3, [pc, #492]	; (800d8f8 <_vfiprintf_r+0x244>)
 800d70c:	429d      	cmp	r5, r3
 800d70e:	d101      	bne.n	800d714 <_vfiprintf_r+0x60>
 800d710:	68b5      	ldr	r5, [r6, #8]
 800d712:	e7df      	b.n	800d6d4 <_vfiprintf_r+0x20>
 800d714:	4b79      	ldr	r3, [pc, #484]	; (800d8fc <_vfiprintf_r+0x248>)
 800d716:	429d      	cmp	r5, r3
 800d718:	bf08      	it	eq
 800d71a:	68f5      	ldreq	r5, [r6, #12]
 800d71c:	e7da      	b.n	800d6d4 <_vfiprintf_r+0x20>
 800d71e:	89ab      	ldrh	r3, [r5, #12]
 800d720:	0598      	lsls	r0, r3, #22
 800d722:	d4ed      	bmi.n	800d700 <_vfiprintf_r+0x4c>
 800d724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d726:	f7ff fdaa 	bl	800d27e <__retarget_lock_release_recursive>
 800d72a:	e7e9      	b.n	800d700 <_vfiprintf_r+0x4c>
 800d72c:	2300      	movs	r3, #0
 800d72e:	9309      	str	r3, [sp, #36]	; 0x24
 800d730:	2320      	movs	r3, #32
 800d732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d736:	f8cd 800c 	str.w	r8, [sp, #12]
 800d73a:	2330      	movs	r3, #48	; 0x30
 800d73c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d900 <_vfiprintf_r+0x24c>
 800d740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d744:	f04f 0901 	mov.w	r9, #1
 800d748:	4623      	mov	r3, r4
 800d74a:	469a      	mov	sl, r3
 800d74c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d750:	b10a      	cbz	r2, 800d756 <_vfiprintf_r+0xa2>
 800d752:	2a25      	cmp	r2, #37	; 0x25
 800d754:	d1f9      	bne.n	800d74a <_vfiprintf_r+0x96>
 800d756:	ebba 0b04 	subs.w	fp, sl, r4
 800d75a:	d00b      	beq.n	800d774 <_vfiprintf_r+0xc0>
 800d75c:	465b      	mov	r3, fp
 800d75e:	4622      	mov	r2, r4
 800d760:	4629      	mov	r1, r5
 800d762:	4630      	mov	r0, r6
 800d764:	f7ff ff93 	bl	800d68e <__sfputs_r>
 800d768:	3001      	adds	r0, #1
 800d76a:	f000 80aa 	beq.w	800d8c2 <_vfiprintf_r+0x20e>
 800d76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d770:	445a      	add	r2, fp
 800d772:	9209      	str	r2, [sp, #36]	; 0x24
 800d774:	f89a 3000 	ldrb.w	r3, [sl]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 80a2 	beq.w	800d8c2 <_vfiprintf_r+0x20e>
 800d77e:	2300      	movs	r3, #0
 800d780:	f04f 32ff 	mov.w	r2, #4294967295
 800d784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d788:	f10a 0a01 	add.w	sl, sl, #1
 800d78c:	9304      	str	r3, [sp, #16]
 800d78e:	9307      	str	r3, [sp, #28]
 800d790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d794:	931a      	str	r3, [sp, #104]	; 0x68
 800d796:	4654      	mov	r4, sl
 800d798:	2205      	movs	r2, #5
 800d79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d79e:	4858      	ldr	r0, [pc, #352]	; (800d900 <_vfiprintf_r+0x24c>)
 800d7a0:	f7f2 fd06 	bl	80001b0 <memchr>
 800d7a4:	9a04      	ldr	r2, [sp, #16]
 800d7a6:	b9d8      	cbnz	r0, 800d7e0 <_vfiprintf_r+0x12c>
 800d7a8:	06d1      	lsls	r1, r2, #27
 800d7aa:	bf44      	itt	mi
 800d7ac:	2320      	movmi	r3, #32
 800d7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7b2:	0713      	lsls	r3, r2, #28
 800d7b4:	bf44      	itt	mi
 800d7b6:	232b      	movmi	r3, #43	; 0x2b
 800d7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d7c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d7c2:	d015      	beq.n	800d7f0 <_vfiprintf_r+0x13c>
 800d7c4:	9a07      	ldr	r2, [sp, #28]
 800d7c6:	4654      	mov	r4, sl
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	f04f 0c0a 	mov.w	ip, #10
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7d4:	3b30      	subs	r3, #48	; 0x30
 800d7d6:	2b09      	cmp	r3, #9
 800d7d8:	d94e      	bls.n	800d878 <_vfiprintf_r+0x1c4>
 800d7da:	b1b0      	cbz	r0, 800d80a <_vfiprintf_r+0x156>
 800d7dc:	9207      	str	r2, [sp, #28]
 800d7de:	e014      	b.n	800d80a <_vfiprintf_r+0x156>
 800d7e0:	eba0 0308 	sub.w	r3, r0, r8
 800d7e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	9304      	str	r3, [sp, #16]
 800d7ec:	46a2      	mov	sl, r4
 800d7ee:	e7d2      	b.n	800d796 <_vfiprintf_r+0xe2>
 800d7f0:	9b03      	ldr	r3, [sp, #12]
 800d7f2:	1d19      	adds	r1, r3, #4
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	9103      	str	r1, [sp, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	bfbb      	ittet	lt
 800d7fc:	425b      	neglt	r3, r3
 800d7fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d802:	9307      	strge	r3, [sp, #28]
 800d804:	9307      	strlt	r3, [sp, #28]
 800d806:	bfb8      	it	lt
 800d808:	9204      	strlt	r2, [sp, #16]
 800d80a:	7823      	ldrb	r3, [r4, #0]
 800d80c:	2b2e      	cmp	r3, #46	; 0x2e
 800d80e:	d10c      	bne.n	800d82a <_vfiprintf_r+0x176>
 800d810:	7863      	ldrb	r3, [r4, #1]
 800d812:	2b2a      	cmp	r3, #42	; 0x2a
 800d814:	d135      	bne.n	800d882 <_vfiprintf_r+0x1ce>
 800d816:	9b03      	ldr	r3, [sp, #12]
 800d818:	1d1a      	adds	r2, r3, #4
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	9203      	str	r2, [sp, #12]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	bfb8      	it	lt
 800d822:	f04f 33ff 	movlt.w	r3, #4294967295
 800d826:	3402      	adds	r4, #2
 800d828:	9305      	str	r3, [sp, #20]
 800d82a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d910 <_vfiprintf_r+0x25c>
 800d82e:	7821      	ldrb	r1, [r4, #0]
 800d830:	2203      	movs	r2, #3
 800d832:	4650      	mov	r0, sl
 800d834:	f7f2 fcbc 	bl	80001b0 <memchr>
 800d838:	b140      	cbz	r0, 800d84c <_vfiprintf_r+0x198>
 800d83a:	2340      	movs	r3, #64	; 0x40
 800d83c:	eba0 000a 	sub.w	r0, r0, sl
 800d840:	fa03 f000 	lsl.w	r0, r3, r0
 800d844:	9b04      	ldr	r3, [sp, #16]
 800d846:	4303      	orrs	r3, r0
 800d848:	3401      	adds	r4, #1
 800d84a:	9304      	str	r3, [sp, #16]
 800d84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d850:	482c      	ldr	r0, [pc, #176]	; (800d904 <_vfiprintf_r+0x250>)
 800d852:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d856:	2206      	movs	r2, #6
 800d858:	f7f2 fcaa 	bl	80001b0 <memchr>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d03f      	beq.n	800d8e0 <_vfiprintf_r+0x22c>
 800d860:	4b29      	ldr	r3, [pc, #164]	; (800d908 <_vfiprintf_r+0x254>)
 800d862:	bb1b      	cbnz	r3, 800d8ac <_vfiprintf_r+0x1f8>
 800d864:	9b03      	ldr	r3, [sp, #12]
 800d866:	3307      	adds	r3, #7
 800d868:	f023 0307 	bic.w	r3, r3, #7
 800d86c:	3308      	adds	r3, #8
 800d86e:	9303      	str	r3, [sp, #12]
 800d870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d872:	443b      	add	r3, r7
 800d874:	9309      	str	r3, [sp, #36]	; 0x24
 800d876:	e767      	b.n	800d748 <_vfiprintf_r+0x94>
 800d878:	fb0c 3202 	mla	r2, ip, r2, r3
 800d87c:	460c      	mov	r4, r1
 800d87e:	2001      	movs	r0, #1
 800d880:	e7a5      	b.n	800d7ce <_vfiprintf_r+0x11a>
 800d882:	2300      	movs	r3, #0
 800d884:	3401      	adds	r4, #1
 800d886:	9305      	str	r3, [sp, #20]
 800d888:	4619      	mov	r1, r3
 800d88a:	f04f 0c0a 	mov.w	ip, #10
 800d88e:	4620      	mov	r0, r4
 800d890:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d894:	3a30      	subs	r2, #48	; 0x30
 800d896:	2a09      	cmp	r2, #9
 800d898:	d903      	bls.n	800d8a2 <_vfiprintf_r+0x1ee>
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d0c5      	beq.n	800d82a <_vfiprintf_r+0x176>
 800d89e:	9105      	str	r1, [sp, #20]
 800d8a0:	e7c3      	b.n	800d82a <_vfiprintf_r+0x176>
 800d8a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e7f0      	b.n	800d88e <_vfiprintf_r+0x1da>
 800d8ac:	ab03      	add	r3, sp, #12
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	462a      	mov	r2, r5
 800d8b2:	4b16      	ldr	r3, [pc, #88]	; (800d90c <_vfiprintf_r+0x258>)
 800d8b4:	a904      	add	r1, sp, #16
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	f3af 8000 	nop.w
 800d8bc:	4607      	mov	r7, r0
 800d8be:	1c78      	adds	r0, r7, #1
 800d8c0:	d1d6      	bne.n	800d870 <_vfiprintf_r+0x1bc>
 800d8c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8c4:	07d9      	lsls	r1, r3, #31
 800d8c6:	d405      	bmi.n	800d8d4 <_vfiprintf_r+0x220>
 800d8c8:	89ab      	ldrh	r3, [r5, #12]
 800d8ca:	059a      	lsls	r2, r3, #22
 800d8cc:	d402      	bmi.n	800d8d4 <_vfiprintf_r+0x220>
 800d8ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8d0:	f7ff fcd5 	bl	800d27e <__retarget_lock_release_recursive>
 800d8d4:	89ab      	ldrh	r3, [r5, #12]
 800d8d6:	065b      	lsls	r3, r3, #25
 800d8d8:	f53f af12 	bmi.w	800d700 <_vfiprintf_r+0x4c>
 800d8dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8de:	e711      	b.n	800d704 <_vfiprintf_r+0x50>
 800d8e0:	ab03      	add	r3, sp, #12
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	462a      	mov	r2, r5
 800d8e6:	4b09      	ldr	r3, [pc, #36]	; (800d90c <_vfiprintf_r+0x258>)
 800d8e8:	a904      	add	r1, sp, #16
 800d8ea:	4630      	mov	r0, r6
 800d8ec:	f000 f880 	bl	800d9f0 <_printf_i>
 800d8f0:	e7e4      	b.n	800d8bc <_vfiprintf_r+0x208>
 800d8f2:	bf00      	nop
 800d8f4:	0800ed54 	.word	0x0800ed54
 800d8f8:	0800ed74 	.word	0x0800ed74
 800d8fc:	0800ed34 	.word	0x0800ed34
 800d900:	0800ed94 	.word	0x0800ed94
 800d904:	0800ed9e 	.word	0x0800ed9e
 800d908:	00000000 	.word	0x00000000
 800d90c:	0800d68f 	.word	0x0800d68f
 800d910:	0800ed9a 	.word	0x0800ed9a

0800d914 <_printf_common>:
 800d914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d918:	4616      	mov	r6, r2
 800d91a:	4699      	mov	r9, r3
 800d91c:	688a      	ldr	r2, [r1, #8]
 800d91e:	690b      	ldr	r3, [r1, #16]
 800d920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d924:	4293      	cmp	r3, r2
 800d926:	bfb8      	it	lt
 800d928:	4613      	movlt	r3, r2
 800d92a:	6033      	str	r3, [r6, #0]
 800d92c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d930:	4607      	mov	r7, r0
 800d932:	460c      	mov	r4, r1
 800d934:	b10a      	cbz	r2, 800d93a <_printf_common+0x26>
 800d936:	3301      	adds	r3, #1
 800d938:	6033      	str	r3, [r6, #0]
 800d93a:	6823      	ldr	r3, [r4, #0]
 800d93c:	0699      	lsls	r1, r3, #26
 800d93e:	bf42      	ittt	mi
 800d940:	6833      	ldrmi	r3, [r6, #0]
 800d942:	3302      	addmi	r3, #2
 800d944:	6033      	strmi	r3, [r6, #0]
 800d946:	6825      	ldr	r5, [r4, #0]
 800d948:	f015 0506 	ands.w	r5, r5, #6
 800d94c:	d106      	bne.n	800d95c <_printf_common+0x48>
 800d94e:	f104 0a19 	add.w	sl, r4, #25
 800d952:	68e3      	ldr	r3, [r4, #12]
 800d954:	6832      	ldr	r2, [r6, #0]
 800d956:	1a9b      	subs	r3, r3, r2
 800d958:	42ab      	cmp	r3, r5
 800d95a:	dc26      	bgt.n	800d9aa <_printf_common+0x96>
 800d95c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d960:	1e13      	subs	r3, r2, #0
 800d962:	6822      	ldr	r2, [r4, #0]
 800d964:	bf18      	it	ne
 800d966:	2301      	movne	r3, #1
 800d968:	0692      	lsls	r2, r2, #26
 800d96a:	d42b      	bmi.n	800d9c4 <_printf_common+0xb0>
 800d96c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d970:	4649      	mov	r1, r9
 800d972:	4638      	mov	r0, r7
 800d974:	47c0      	blx	r8
 800d976:	3001      	adds	r0, #1
 800d978:	d01e      	beq.n	800d9b8 <_printf_common+0xa4>
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	68e5      	ldr	r5, [r4, #12]
 800d97e:	6832      	ldr	r2, [r6, #0]
 800d980:	f003 0306 	and.w	r3, r3, #6
 800d984:	2b04      	cmp	r3, #4
 800d986:	bf08      	it	eq
 800d988:	1aad      	subeq	r5, r5, r2
 800d98a:	68a3      	ldr	r3, [r4, #8]
 800d98c:	6922      	ldr	r2, [r4, #16]
 800d98e:	bf0c      	ite	eq
 800d990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d994:	2500      	movne	r5, #0
 800d996:	4293      	cmp	r3, r2
 800d998:	bfc4      	itt	gt
 800d99a:	1a9b      	subgt	r3, r3, r2
 800d99c:	18ed      	addgt	r5, r5, r3
 800d99e:	2600      	movs	r6, #0
 800d9a0:	341a      	adds	r4, #26
 800d9a2:	42b5      	cmp	r5, r6
 800d9a4:	d11a      	bne.n	800d9dc <_printf_common+0xc8>
 800d9a6:	2000      	movs	r0, #0
 800d9a8:	e008      	b.n	800d9bc <_printf_common+0xa8>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	4652      	mov	r2, sl
 800d9ae:	4649      	mov	r1, r9
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	47c0      	blx	r8
 800d9b4:	3001      	adds	r0, #1
 800d9b6:	d103      	bne.n	800d9c0 <_printf_common+0xac>
 800d9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c0:	3501      	adds	r5, #1
 800d9c2:	e7c6      	b.n	800d952 <_printf_common+0x3e>
 800d9c4:	18e1      	adds	r1, r4, r3
 800d9c6:	1c5a      	adds	r2, r3, #1
 800d9c8:	2030      	movs	r0, #48	; 0x30
 800d9ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d9ce:	4422      	add	r2, r4
 800d9d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d9d8:	3302      	adds	r3, #2
 800d9da:	e7c7      	b.n	800d96c <_printf_common+0x58>
 800d9dc:	2301      	movs	r3, #1
 800d9de:	4622      	mov	r2, r4
 800d9e0:	4649      	mov	r1, r9
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	47c0      	blx	r8
 800d9e6:	3001      	adds	r0, #1
 800d9e8:	d0e6      	beq.n	800d9b8 <_printf_common+0xa4>
 800d9ea:	3601      	adds	r6, #1
 800d9ec:	e7d9      	b.n	800d9a2 <_printf_common+0x8e>
	...

0800d9f0 <_printf_i>:
 800d9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f4:	7e0f      	ldrb	r7, [r1, #24]
 800d9f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d9f8:	2f78      	cmp	r7, #120	; 0x78
 800d9fa:	4691      	mov	r9, r2
 800d9fc:	4680      	mov	r8, r0
 800d9fe:	460c      	mov	r4, r1
 800da00:	469a      	mov	sl, r3
 800da02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da06:	d807      	bhi.n	800da18 <_printf_i+0x28>
 800da08:	2f62      	cmp	r7, #98	; 0x62
 800da0a:	d80a      	bhi.n	800da22 <_printf_i+0x32>
 800da0c:	2f00      	cmp	r7, #0
 800da0e:	f000 80d8 	beq.w	800dbc2 <_printf_i+0x1d2>
 800da12:	2f58      	cmp	r7, #88	; 0x58
 800da14:	f000 80a3 	beq.w	800db5e <_printf_i+0x16e>
 800da18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da20:	e03a      	b.n	800da98 <_printf_i+0xa8>
 800da22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da26:	2b15      	cmp	r3, #21
 800da28:	d8f6      	bhi.n	800da18 <_printf_i+0x28>
 800da2a:	a101      	add	r1, pc, #4	; (adr r1, 800da30 <_printf_i+0x40>)
 800da2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da30:	0800da89 	.word	0x0800da89
 800da34:	0800da9d 	.word	0x0800da9d
 800da38:	0800da19 	.word	0x0800da19
 800da3c:	0800da19 	.word	0x0800da19
 800da40:	0800da19 	.word	0x0800da19
 800da44:	0800da19 	.word	0x0800da19
 800da48:	0800da9d 	.word	0x0800da9d
 800da4c:	0800da19 	.word	0x0800da19
 800da50:	0800da19 	.word	0x0800da19
 800da54:	0800da19 	.word	0x0800da19
 800da58:	0800da19 	.word	0x0800da19
 800da5c:	0800dba9 	.word	0x0800dba9
 800da60:	0800dacd 	.word	0x0800dacd
 800da64:	0800db8b 	.word	0x0800db8b
 800da68:	0800da19 	.word	0x0800da19
 800da6c:	0800da19 	.word	0x0800da19
 800da70:	0800dbcb 	.word	0x0800dbcb
 800da74:	0800da19 	.word	0x0800da19
 800da78:	0800dacd 	.word	0x0800dacd
 800da7c:	0800da19 	.word	0x0800da19
 800da80:	0800da19 	.word	0x0800da19
 800da84:	0800db93 	.word	0x0800db93
 800da88:	682b      	ldr	r3, [r5, #0]
 800da8a:	1d1a      	adds	r2, r3, #4
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	602a      	str	r2, [r5, #0]
 800da90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da98:	2301      	movs	r3, #1
 800da9a:	e0a3      	b.n	800dbe4 <_printf_i+0x1f4>
 800da9c:	6820      	ldr	r0, [r4, #0]
 800da9e:	6829      	ldr	r1, [r5, #0]
 800daa0:	0606      	lsls	r6, r0, #24
 800daa2:	f101 0304 	add.w	r3, r1, #4
 800daa6:	d50a      	bpl.n	800dabe <_printf_i+0xce>
 800daa8:	680e      	ldr	r6, [r1, #0]
 800daaa:	602b      	str	r3, [r5, #0]
 800daac:	2e00      	cmp	r6, #0
 800daae:	da03      	bge.n	800dab8 <_printf_i+0xc8>
 800dab0:	232d      	movs	r3, #45	; 0x2d
 800dab2:	4276      	negs	r6, r6
 800dab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dab8:	485e      	ldr	r0, [pc, #376]	; (800dc34 <_printf_i+0x244>)
 800daba:	230a      	movs	r3, #10
 800dabc:	e019      	b.n	800daf2 <_printf_i+0x102>
 800dabe:	680e      	ldr	r6, [r1, #0]
 800dac0:	602b      	str	r3, [r5, #0]
 800dac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dac6:	bf18      	it	ne
 800dac8:	b236      	sxthne	r6, r6
 800daca:	e7ef      	b.n	800daac <_printf_i+0xbc>
 800dacc:	682b      	ldr	r3, [r5, #0]
 800dace:	6820      	ldr	r0, [r4, #0]
 800dad0:	1d19      	adds	r1, r3, #4
 800dad2:	6029      	str	r1, [r5, #0]
 800dad4:	0601      	lsls	r1, r0, #24
 800dad6:	d501      	bpl.n	800dadc <_printf_i+0xec>
 800dad8:	681e      	ldr	r6, [r3, #0]
 800dada:	e002      	b.n	800dae2 <_printf_i+0xf2>
 800dadc:	0646      	lsls	r6, r0, #25
 800dade:	d5fb      	bpl.n	800dad8 <_printf_i+0xe8>
 800dae0:	881e      	ldrh	r6, [r3, #0]
 800dae2:	4854      	ldr	r0, [pc, #336]	; (800dc34 <_printf_i+0x244>)
 800dae4:	2f6f      	cmp	r7, #111	; 0x6f
 800dae6:	bf0c      	ite	eq
 800dae8:	2308      	moveq	r3, #8
 800daea:	230a      	movne	r3, #10
 800daec:	2100      	movs	r1, #0
 800daee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800daf2:	6865      	ldr	r5, [r4, #4]
 800daf4:	60a5      	str	r5, [r4, #8]
 800daf6:	2d00      	cmp	r5, #0
 800daf8:	bfa2      	ittt	ge
 800dafa:	6821      	ldrge	r1, [r4, #0]
 800dafc:	f021 0104 	bicge.w	r1, r1, #4
 800db00:	6021      	strge	r1, [r4, #0]
 800db02:	b90e      	cbnz	r6, 800db08 <_printf_i+0x118>
 800db04:	2d00      	cmp	r5, #0
 800db06:	d04d      	beq.n	800dba4 <_printf_i+0x1b4>
 800db08:	4615      	mov	r5, r2
 800db0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800db0e:	fb03 6711 	mls	r7, r3, r1, r6
 800db12:	5dc7      	ldrb	r7, [r0, r7]
 800db14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db18:	4637      	mov	r7, r6
 800db1a:	42bb      	cmp	r3, r7
 800db1c:	460e      	mov	r6, r1
 800db1e:	d9f4      	bls.n	800db0a <_printf_i+0x11a>
 800db20:	2b08      	cmp	r3, #8
 800db22:	d10b      	bne.n	800db3c <_printf_i+0x14c>
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	07de      	lsls	r6, r3, #31
 800db28:	d508      	bpl.n	800db3c <_printf_i+0x14c>
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	6861      	ldr	r1, [r4, #4]
 800db2e:	4299      	cmp	r1, r3
 800db30:	bfde      	ittt	le
 800db32:	2330      	movle	r3, #48	; 0x30
 800db34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db3c:	1b52      	subs	r2, r2, r5
 800db3e:	6122      	str	r2, [r4, #16]
 800db40:	f8cd a000 	str.w	sl, [sp]
 800db44:	464b      	mov	r3, r9
 800db46:	aa03      	add	r2, sp, #12
 800db48:	4621      	mov	r1, r4
 800db4a:	4640      	mov	r0, r8
 800db4c:	f7ff fee2 	bl	800d914 <_printf_common>
 800db50:	3001      	adds	r0, #1
 800db52:	d14c      	bne.n	800dbee <_printf_i+0x1fe>
 800db54:	f04f 30ff 	mov.w	r0, #4294967295
 800db58:	b004      	add	sp, #16
 800db5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db5e:	4835      	ldr	r0, [pc, #212]	; (800dc34 <_printf_i+0x244>)
 800db60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800db64:	6829      	ldr	r1, [r5, #0]
 800db66:	6823      	ldr	r3, [r4, #0]
 800db68:	f851 6b04 	ldr.w	r6, [r1], #4
 800db6c:	6029      	str	r1, [r5, #0]
 800db6e:	061d      	lsls	r5, r3, #24
 800db70:	d514      	bpl.n	800db9c <_printf_i+0x1ac>
 800db72:	07df      	lsls	r7, r3, #31
 800db74:	bf44      	itt	mi
 800db76:	f043 0320 	orrmi.w	r3, r3, #32
 800db7a:	6023      	strmi	r3, [r4, #0]
 800db7c:	b91e      	cbnz	r6, 800db86 <_printf_i+0x196>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	f023 0320 	bic.w	r3, r3, #32
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	2310      	movs	r3, #16
 800db88:	e7b0      	b.n	800daec <_printf_i+0xfc>
 800db8a:	6823      	ldr	r3, [r4, #0]
 800db8c:	f043 0320 	orr.w	r3, r3, #32
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	2378      	movs	r3, #120	; 0x78
 800db94:	4828      	ldr	r0, [pc, #160]	; (800dc38 <_printf_i+0x248>)
 800db96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db9a:	e7e3      	b.n	800db64 <_printf_i+0x174>
 800db9c:	0659      	lsls	r1, r3, #25
 800db9e:	bf48      	it	mi
 800dba0:	b2b6      	uxthmi	r6, r6
 800dba2:	e7e6      	b.n	800db72 <_printf_i+0x182>
 800dba4:	4615      	mov	r5, r2
 800dba6:	e7bb      	b.n	800db20 <_printf_i+0x130>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	6826      	ldr	r6, [r4, #0]
 800dbac:	6961      	ldr	r1, [r4, #20]
 800dbae:	1d18      	adds	r0, r3, #4
 800dbb0:	6028      	str	r0, [r5, #0]
 800dbb2:	0635      	lsls	r5, r6, #24
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	d501      	bpl.n	800dbbc <_printf_i+0x1cc>
 800dbb8:	6019      	str	r1, [r3, #0]
 800dbba:	e002      	b.n	800dbc2 <_printf_i+0x1d2>
 800dbbc:	0670      	lsls	r0, r6, #25
 800dbbe:	d5fb      	bpl.n	800dbb8 <_printf_i+0x1c8>
 800dbc0:	8019      	strh	r1, [r3, #0]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	6123      	str	r3, [r4, #16]
 800dbc6:	4615      	mov	r5, r2
 800dbc8:	e7ba      	b.n	800db40 <_printf_i+0x150>
 800dbca:	682b      	ldr	r3, [r5, #0]
 800dbcc:	1d1a      	adds	r2, r3, #4
 800dbce:	602a      	str	r2, [r5, #0]
 800dbd0:	681d      	ldr	r5, [r3, #0]
 800dbd2:	6862      	ldr	r2, [r4, #4]
 800dbd4:	2100      	movs	r1, #0
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	f7f2 faea 	bl	80001b0 <memchr>
 800dbdc:	b108      	cbz	r0, 800dbe2 <_printf_i+0x1f2>
 800dbde:	1b40      	subs	r0, r0, r5
 800dbe0:	6060      	str	r0, [r4, #4]
 800dbe2:	6863      	ldr	r3, [r4, #4]
 800dbe4:	6123      	str	r3, [r4, #16]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbec:	e7a8      	b.n	800db40 <_printf_i+0x150>
 800dbee:	6923      	ldr	r3, [r4, #16]
 800dbf0:	462a      	mov	r2, r5
 800dbf2:	4649      	mov	r1, r9
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	47d0      	blx	sl
 800dbf8:	3001      	adds	r0, #1
 800dbfa:	d0ab      	beq.n	800db54 <_printf_i+0x164>
 800dbfc:	6823      	ldr	r3, [r4, #0]
 800dbfe:	079b      	lsls	r3, r3, #30
 800dc00:	d413      	bmi.n	800dc2a <_printf_i+0x23a>
 800dc02:	68e0      	ldr	r0, [r4, #12]
 800dc04:	9b03      	ldr	r3, [sp, #12]
 800dc06:	4298      	cmp	r0, r3
 800dc08:	bfb8      	it	lt
 800dc0a:	4618      	movlt	r0, r3
 800dc0c:	e7a4      	b.n	800db58 <_printf_i+0x168>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	4632      	mov	r2, r6
 800dc12:	4649      	mov	r1, r9
 800dc14:	4640      	mov	r0, r8
 800dc16:	47d0      	blx	sl
 800dc18:	3001      	adds	r0, #1
 800dc1a:	d09b      	beq.n	800db54 <_printf_i+0x164>
 800dc1c:	3501      	adds	r5, #1
 800dc1e:	68e3      	ldr	r3, [r4, #12]
 800dc20:	9903      	ldr	r1, [sp, #12]
 800dc22:	1a5b      	subs	r3, r3, r1
 800dc24:	42ab      	cmp	r3, r5
 800dc26:	dcf2      	bgt.n	800dc0e <_printf_i+0x21e>
 800dc28:	e7eb      	b.n	800dc02 <_printf_i+0x212>
 800dc2a:	2500      	movs	r5, #0
 800dc2c:	f104 0619 	add.w	r6, r4, #25
 800dc30:	e7f5      	b.n	800dc1e <_printf_i+0x22e>
 800dc32:	bf00      	nop
 800dc34:	0800eda5 	.word	0x0800eda5
 800dc38:	0800edb6 	.word	0x0800edb6

0800dc3c <_sbrk_r>:
 800dc3c:	b538      	push	{r3, r4, r5, lr}
 800dc3e:	4d06      	ldr	r5, [pc, #24]	; (800dc58 <_sbrk_r+0x1c>)
 800dc40:	2300      	movs	r3, #0
 800dc42:	4604      	mov	r4, r0
 800dc44:	4608      	mov	r0, r1
 800dc46:	602b      	str	r3, [r5, #0]
 800dc48:	f7f2 feac 	bl	80009a4 <_sbrk>
 800dc4c:	1c43      	adds	r3, r0, #1
 800dc4e:	d102      	bne.n	800dc56 <_sbrk_r+0x1a>
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	b103      	cbz	r3, 800dc56 <_sbrk_r+0x1a>
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	bd38      	pop	{r3, r4, r5, pc}
 800dc58:	2000199c 	.word	0x2000199c

0800dc5c <__sread>:
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	460c      	mov	r4, r1
 800dc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc64:	f000 fafc 	bl	800e260 <_read_r>
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	bfab      	itete	ge
 800dc6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc6e:	89a3      	ldrhlt	r3, [r4, #12]
 800dc70:	181b      	addge	r3, r3, r0
 800dc72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc76:	bfac      	ite	ge
 800dc78:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc7a:	81a3      	strhlt	r3, [r4, #12]
 800dc7c:	bd10      	pop	{r4, pc}

0800dc7e <__swrite>:
 800dc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc82:	461f      	mov	r7, r3
 800dc84:	898b      	ldrh	r3, [r1, #12]
 800dc86:	05db      	lsls	r3, r3, #23
 800dc88:	4605      	mov	r5, r0
 800dc8a:	460c      	mov	r4, r1
 800dc8c:	4616      	mov	r6, r2
 800dc8e:	d505      	bpl.n	800dc9c <__swrite+0x1e>
 800dc90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc94:	2302      	movs	r3, #2
 800dc96:	2200      	movs	r2, #0
 800dc98:	f000 f9c8 	bl	800e02c <_lseek_r>
 800dc9c:	89a3      	ldrh	r3, [r4, #12]
 800dc9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dca6:	81a3      	strh	r3, [r4, #12]
 800dca8:	4632      	mov	r2, r6
 800dcaa:	463b      	mov	r3, r7
 800dcac:	4628      	mov	r0, r5
 800dcae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb2:	f000 b869 	b.w	800dd88 <_write_r>

0800dcb6 <__sseek>:
 800dcb6:	b510      	push	{r4, lr}
 800dcb8:	460c      	mov	r4, r1
 800dcba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcbe:	f000 f9b5 	bl	800e02c <_lseek_r>
 800dcc2:	1c43      	adds	r3, r0, #1
 800dcc4:	89a3      	ldrh	r3, [r4, #12]
 800dcc6:	bf15      	itete	ne
 800dcc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800dcca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dcce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dcd2:	81a3      	strheq	r3, [r4, #12]
 800dcd4:	bf18      	it	ne
 800dcd6:	81a3      	strhne	r3, [r4, #12]
 800dcd8:	bd10      	pop	{r4, pc}

0800dcda <__sclose>:
 800dcda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcde:	f000 b8d3 	b.w	800de88 <_close_r>
	...

0800dce4 <__swbuf_r>:
 800dce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce6:	460e      	mov	r6, r1
 800dce8:	4614      	mov	r4, r2
 800dcea:	4605      	mov	r5, r0
 800dcec:	b118      	cbz	r0, 800dcf6 <__swbuf_r+0x12>
 800dcee:	6983      	ldr	r3, [r0, #24]
 800dcf0:	b90b      	cbnz	r3, 800dcf6 <__swbuf_r+0x12>
 800dcf2:	f7ff fa25 	bl	800d140 <__sinit>
 800dcf6:	4b21      	ldr	r3, [pc, #132]	; (800dd7c <__swbuf_r+0x98>)
 800dcf8:	429c      	cmp	r4, r3
 800dcfa:	d12b      	bne.n	800dd54 <__swbuf_r+0x70>
 800dcfc:	686c      	ldr	r4, [r5, #4]
 800dcfe:	69a3      	ldr	r3, [r4, #24]
 800dd00:	60a3      	str	r3, [r4, #8]
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	071a      	lsls	r2, r3, #28
 800dd06:	d52f      	bpl.n	800dd68 <__swbuf_r+0x84>
 800dd08:	6923      	ldr	r3, [r4, #16]
 800dd0a:	b36b      	cbz	r3, 800dd68 <__swbuf_r+0x84>
 800dd0c:	6923      	ldr	r3, [r4, #16]
 800dd0e:	6820      	ldr	r0, [r4, #0]
 800dd10:	1ac0      	subs	r0, r0, r3
 800dd12:	6963      	ldr	r3, [r4, #20]
 800dd14:	b2f6      	uxtb	r6, r6
 800dd16:	4283      	cmp	r3, r0
 800dd18:	4637      	mov	r7, r6
 800dd1a:	dc04      	bgt.n	800dd26 <__swbuf_r+0x42>
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	4628      	mov	r0, r5
 800dd20:	f000 f948 	bl	800dfb4 <_fflush_r>
 800dd24:	bb30      	cbnz	r0, 800dd74 <__swbuf_r+0x90>
 800dd26:	68a3      	ldr	r3, [r4, #8]
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	60a3      	str	r3, [r4, #8]
 800dd2c:	6823      	ldr	r3, [r4, #0]
 800dd2e:	1c5a      	adds	r2, r3, #1
 800dd30:	6022      	str	r2, [r4, #0]
 800dd32:	701e      	strb	r6, [r3, #0]
 800dd34:	6963      	ldr	r3, [r4, #20]
 800dd36:	3001      	adds	r0, #1
 800dd38:	4283      	cmp	r3, r0
 800dd3a:	d004      	beq.n	800dd46 <__swbuf_r+0x62>
 800dd3c:	89a3      	ldrh	r3, [r4, #12]
 800dd3e:	07db      	lsls	r3, r3, #31
 800dd40:	d506      	bpl.n	800dd50 <__swbuf_r+0x6c>
 800dd42:	2e0a      	cmp	r6, #10
 800dd44:	d104      	bne.n	800dd50 <__swbuf_r+0x6c>
 800dd46:	4621      	mov	r1, r4
 800dd48:	4628      	mov	r0, r5
 800dd4a:	f000 f933 	bl	800dfb4 <_fflush_r>
 800dd4e:	b988      	cbnz	r0, 800dd74 <__swbuf_r+0x90>
 800dd50:	4638      	mov	r0, r7
 800dd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd54:	4b0a      	ldr	r3, [pc, #40]	; (800dd80 <__swbuf_r+0x9c>)
 800dd56:	429c      	cmp	r4, r3
 800dd58:	d101      	bne.n	800dd5e <__swbuf_r+0x7a>
 800dd5a:	68ac      	ldr	r4, [r5, #8]
 800dd5c:	e7cf      	b.n	800dcfe <__swbuf_r+0x1a>
 800dd5e:	4b09      	ldr	r3, [pc, #36]	; (800dd84 <__swbuf_r+0xa0>)
 800dd60:	429c      	cmp	r4, r3
 800dd62:	bf08      	it	eq
 800dd64:	68ec      	ldreq	r4, [r5, #12]
 800dd66:	e7ca      	b.n	800dcfe <__swbuf_r+0x1a>
 800dd68:	4621      	mov	r1, r4
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	f000 f81e 	bl	800ddac <__swsetup_r>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	d0cb      	beq.n	800dd0c <__swbuf_r+0x28>
 800dd74:	f04f 37ff 	mov.w	r7, #4294967295
 800dd78:	e7ea      	b.n	800dd50 <__swbuf_r+0x6c>
 800dd7a:	bf00      	nop
 800dd7c:	0800ed54 	.word	0x0800ed54
 800dd80:	0800ed74 	.word	0x0800ed74
 800dd84:	0800ed34 	.word	0x0800ed34

0800dd88 <_write_r>:
 800dd88:	b538      	push	{r3, r4, r5, lr}
 800dd8a:	4d07      	ldr	r5, [pc, #28]	; (800dda8 <_write_r+0x20>)
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	4608      	mov	r0, r1
 800dd90:	4611      	mov	r1, r2
 800dd92:	2200      	movs	r2, #0
 800dd94:	602a      	str	r2, [r5, #0]
 800dd96:	461a      	mov	r2, r3
 800dd98:	f7fe f8f4 	bl	800bf84 <_write>
 800dd9c:	1c43      	adds	r3, r0, #1
 800dd9e:	d102      	bne.n	800dda6 <_write_r+0x1e>
 800dda0:	682b      	ldr	r3, [r5, #0]
 800dda2:	b103      	cbz	r3, 800dda6 <_write_r+0x1e>
 800dda4:	6023      	str	r3, [r4, #0]
 800dda6:	bd38      	pop	{r3, r4, r5, pc}
 800dda8:	2000199c 	.word	0x2000199c

0800ddac <__swsetup_r>:
 800ddac:	4b32      	ldr	r3, [pc, #200]	; (800de78 <__swsetup_r+0xcc>)
 800ddae:	b570      	push	{r4, r5, r6, lr}
 800ddb0:	681d      	ldr	r5, [r3, #0]
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	460c      	mov	r4, r1
 800ddb6:	b125      	cbz	r5, 800ddc2 <__swsetup_r+0x16>
 800ddb8:	69ab      	ldr	r3, [r5, #24]
 800ddba:	b913      	cbnz	r3, 800ddc2 <__swsetup_r+0x16>
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	f7ff f9bf 	bl	800d140 <__sinit>
 800ddc2:	4b2e      	ldr	r3, [pc, #184]	; (800de7c <__swsetup_r+0xd0>)
 800ddc4:	429c      	cmp	r4, r3
 800ddc6:	d10f      	bne.n	800dde8 <__swsetup_r+0x3c>
 800ddc8:	686c      	ldr	r4, [r5, #4]
 800ddca:	89a3      	ldrh	r3, [r4, #12]
 800ddcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddd0:	0719      	lsls	r1, r3, #28
 800ddd2:	d42c      	bmi.n	800de2e <__swsetup_r+0x82>
 800ddd4:	06dd      	lsls	r5, r3, #27
 800ddd6:	d411      	bmi.n	800ddfc <__swsetup_r+0x50>
 800ddd8:	2309      	movs	r3, #9
 800ddda:	6033      	str	r3, [r6, #0]
 800dddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dde0:	81a3      	strh	r3, [r4, #12]
 800dde2:	f04f 30ff 	mov.w	r0, #4294967295
 800dde6:	e03e      	b.n	800de66 <__swsetup_r+0xba>
 800dde8:	4b25      	ldr	r3, [pc, #148]	; (800de80 <__swsetup_r+0xd4>)
 800ddea:	429c      	cmp	r4, r3
 800ddec:	d101      	bne.n	800ddf2 <__swsetup_r+0x46>
 800ddee:	68ac      	ldr	r4, [r5, #8]
 800ddf0:	e7eb      	b.n	800ddca <__swsetup_r+0x1e>
 800ddf2:	4b24      	ldr	r3, [pc, #144]	; (800de84 <__swsetup_r+0xd8>)
 800ddf4:	429c      	cmp	r4, r3
 800ddf6:	bf08      	it	eq
 800ddf8:	68ec      	ldreq	r4, [r5, #12]
 800ddfa:	e7e6      	b.n	800ddca <__swsetup_r+0x1e>
 800ddfc:	0758      	lsls	r0, r3, #29
 800ddfe:	d512      	bpl.n	800de26 <__swsetup_r+0x7a>
 800de00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de02:	b141      	cbz	r1, 800de16 <__swsetup_r+0x6a>
 800de04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de08:	4299      	cmp	r1, r3
 800de0a:	d002      	beq.n	800de12 <__swsetup_r+0x66>
 800de0c:	4630      	mov	r0, r6
 800de0e:	f000 f9ab 	bl	800e168 <_free_r>
 800de12:	2300      	movs	r3, #0
 800de14:	6363      	str	r3, [r4, #52]	; 0x34
 800de16:	89a3      	ldrh	r3, [r4, #12]
 800de18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de1c:	81a3      	strh	r3, [r4, #12]
 800de1e:	2300      	movs	r3, #0
 800de20:	6063      	str	r3, [r4, #4]
 800de22:	6923      	ldr	r3, [r4, #16]
 800de24:	6023      	str	r3, [r4, #0]
 800de26:	89a3      	ldrh	r3, [r4, #12]
 800de28:	f043 0308 	orr.w	r3, r3, #8
 800de2c:	81a3      	strh	r3, [r4, #12]
 800de2e:	6923      	ldr	r3, [r4, #16]
 800de30:	b94b      	cbnz	r3, 800de46 <__swsetup_r+0x9a>
 800de32:	89a3      	ldrh	r3, [r4, #12]
 800de34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de3c:	d003      	beq.n	800de46 <__swsetup_r+0x9a>
 800de3e:	4621      	mov	r1, r4
 800de40:	4630      	mov	r0, r6
 800de42:	f000 f92b 	bl	800e09c <__smakebuf_r>
 800de46:	89a0      	ldrh	r0, [r4, #12]
 800de48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de4c:	f010 0301 	ands.w	r3, r0, #1
 800de50:	d00a      	beq.n	800de68 <__swsetup_r+0xbc>
 800de52:	2300      	movs	r3, #0
 800de54:	60a3      	str	r3, [r4, #8]
 800de56:	6963      	ldr	r3, [r4, #20]
 800de58:	425b      	negs	r3, r3
 800de5a:	61a3      	str	r3, [r4, #24]
 800de5c:	6923      	ldr	r3, [r4, #16]
 800de5e:	b943      	cbnz	r3, 800de72 <__swsetup_r+0xc6>
 800de60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de64:	d1ba      	bne.n	800dddc <__swsetup_r+0x30>
 800de66:	bd70      	pop	{r4, r5, r6, pc}
 800de68:	0781      	lsls	r1, r0, #30
 800de6a:	bf58      	it	pl
 800de6c:	6963      	ldrpl	r3, [r4, #20]
 800de6e:	60a3      	str	r3, [r4, #8]
 800de70:	e7f4      	b.n	800de5c <__swsetup_r+0xb0>
 800de72:	2000      	movs	r0, #0
 800de74:	e7f7      	b.n	800de66 <__swsetup_r+0xba>
 800de76:	bf00      	nop
 800de78:	20000030 	.word	0x20000030
 800de7c:	0800ed54 	.word	0x0800ed54
 800de80:	0800ed74 	.word	0x0800ed74
 800de84:	0800ed34 	.word	0x0800ed34

0800de88 <_close_r>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	4d06      	ldr	r5, [pc, #24]	; (800dea4 <_close_r+0x1c>)
 800de8c:	2300      	movs	r3, #0
 800de8e:	4604      	mov	r4, r0
 800de90:	4608      	mov	r0, r1
 800de92:	602b      	str	r3, [r5, #0]
 800de94:	f7f2 fd52 	bl	800093c <_close>
 800de98:	1c43      	adds	r3, r0, #1
 800de9a:	d102      	bne.n	800dea2 <_close_r+0x1a>
 800de9c:	682b      	ldr	r3, [r5, #0]
 800de9e:	b103      	cbz	r3, 800dea2 <_close_r+0x1a>
 800dea0:	6023      	str	r3, [r4, #0]
 800dea2:	bd38      	pop	{r3, r4, r5, pc}
 800dea4:	2000199c 	.word	0x2000199c

0800dea8 <__sflush_r>:
 800dea8:	898a      	ldrh	r2, [r1, #12]
 800deaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deae:	4605      	mov	r5, r0
 800deb0:	0710      	lsls	r0, r2, #28
 800deb2:	460c      	mov	r4, r1
 800deb4:	d458      	bmi.n	800df68 <__sflush_r+0xc0>
 800deb6:	684b      	ldr	r3, [r1, #4]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	dc05      	bgt.n	800dec8 <__sflush_r+0x20>
 800debc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800debe:	2b00      	cmp	r3, #0
 800dec0:	dc02      	bgt.n	800dec8 <__sflush_r+0x20>
 800dec2:	2000      	movs	r0, #0
 800dec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800deca:	2e00      	cmp	r6, #0
 800decc:	d0f9      	beq.n	800dec2 <__sflush_r+0x1a>
 800dece:	2300      	movs	r3, #0
 800ded0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ded4:	682f      	ldr	r7, [r5, #0]
 800ded6:	602b      	str	r3, [r5, #0]
 800ded8:	d032      	beq.n	800df40 <__sflush_r+0x98>
 800deda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dedc:	89a3      	ldrh	r3, [r4, #12]
 800dede:	075a      	lsls	r2, r3, #29
 800dee0:	d505      	bpl.n	800deee <__sflush_r+0x46>
 800dee2:	6863      	ldr	r3, [r4, #4]
 800dee4:	1ac0      	subs	r0, r0, r3
 800dee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dee8:	b10b      	cbz	r3, 800deee <__sflush_r+0x46>
 800deea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800deec:	1ac0      	subs	r0, r0, r3
 800deee:	2300      	movs	r3, #0
 800def0:	4602      	mov	r2, r0
 800def2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800def4:	6a21      	ldr	r1, [r4, #32]
 800def6:	4628      	mov	r0, r5
 800def8:	47b0      	blx	r6
 800defa:	1c43      	adds	r3, r0, #1
 800defc:	89a3      	ldrh	r3, [r4, #12]
 800defe:	d106      	bne.n	800df0e <__sflush_r+0x66>
 800df00:	6829      	ldr	r1, [r5, #0]
 800df02:	291d      	cmp	r1, #29
 800df04:	d82c      	bhi.n	800df60 <__sflush_r+0xb8>
 800df06:	4a2a      	ldr	r2, [pc, #168]	; (800dfb0 <__sflush_r+0x108>)
 800df08:	40ca      	lsrs	r2, r1
 800df0a:	07d6      	lsls	r6, r2, #31
 800df0c:	d528      	bpl.n	800df60 <__sflush_r+0xb8>
 800df0e:	2200      	movs	r2, #0
 800df10:	6062      	str	r2, [r4, #4]
 800df12:	04d9      	lsls	r1, r3, #19
 800df14:	6922      	ldr	r2, [r4, #16]
 800df16:	6022      	str	r2, [r4, #0]
 800df18:	d504      	bpl.n	800df24 <__sflush_r+0x7c>
 800df1a:	1c42      	adds	r2, r0, #1
 800df1c:	d101      	bne.n	800df22 <__sflush_r+0x7a>
 800df1e:	682b      	ldr	r3, [r5, #0]
 800df20:	b903      	cbnz	r3, 800df24 <__sflush_r+0x7c>
 800df22:	6560      	str	r0, [r4, #84]	; 0x54
 800df24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df26:	602f      	str	r7, [r5, #0]
 800df28:	2900      	cmp	r1, #0
 800df2a:	d0ca      	beq.n	800dec2 <__sflush_r+0x1a>
 800df2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df30:	4299      	cmp	r1, r3
 800df32:	d002      	beq.n	800df3a <__sflush_r+0x92>
 800df34:	4628      	mov	r0, r5
 800df36:	f000 f917 	bl	800e168 <_free_r>
 800df3a:	2000      	movs	r0, #0
 800df3c:	6360      	str	r0, [r4, #52]	; 0x34
 800df3e:	e7c1      	b.n	800dec4 <__sflush_r+0x1c>
 800df40:	6a21      	ldr	r1, [r4, #32]
 800df42:	2301      	movs	r3, #1
 800df44:	4628      	mov	r0, r5
 800df46:	47b0      	blx	r6
 800df48:	1c41      	adds	r1, r0, #1
 800df4a:	d1c7      	bne.n	800dedc <__sflush_r+0x34>
 800df4c:	682b      	ldr	r3, [r5, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d0c4      	beq.n	800dedc <__sflush_r+0x34>
 800df52:	2b1d      	cmp	r3, #29
 800df54:	d001      	beq.n	800df5a <__sflush_r+0xb2>
 800df56:	2b16      	cmp	r3, #22
 800df58:	d101      	bne.n	800df5e <__sflush_r+0xb6>
 800df5a:	602f      	str	r7, [r5, #0]
 800df5c:	e7b1      	b.n	800dec2 <__sflush_r+0x1a>
 800df5e:	89a3      	ldrh	r3, [r4, #12]
 800df60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df64:	81a3      	strh	r3, [r4, #12]
 800df66:	e7ad      	b.n	800dec4 <__sflush_r+0x1c>
 800df68:	690f      	ldr	r7, [r1, #16]
 800df6a:	2f00      	cmp	r7, #0
 800df6c:	d0a9      	beq.n	800dec2 <__sflush_r+0x1a>
 800df6e:	0793      	lsls	r3, r2, #30
 800df70:	680e      	ldr	r6, [r1, #0]
 800df72:	bf08      	it	eq
 800df74:	694b      	ldreq	r3, [r1, #20]
 800df76:	600f      	str	r7, [r1, #0]
 800df78:	bf18      	it	ne
 800df7a:	2300      	movne	r3, #0
 800df7c:	eba6 0807 	sub.w	r8, r6, r7
 800df80:	608b      	str	r3, [r1, #8]
 800df82:	f1b8 0f00 	cmp.w	r8, #0
 800df86:	dd9c      	ble.n	800dec2 <__sflush_r+0x1a>
 800df88:	6a21      	ldr	r1, [r4, #32]
 800df8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df8c:	4643      	mov	r3, r8
 800df8e:	463a      	mov	r2, r7
 800df90:	4628      	mov	r0, r5
 800df92:	47b0      	blx	r6
 800df94:	2800      	cmp	r0, #0
 800df96:	dc06      	bgt.n	800dfa6 <__sflush_r+0xfe>
 800df98:	89a3      	ldrh	r3, [r4, #12]
 800df9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df9e:	81a3      	strh	r3, [r4, #12]
 800dfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa4:	e78e      	b.n	800dec4 <__sflush_r+0x1c>
 800dfa6:	4407      	add	r7, r0
 800dfa8:	eba8 0800 	sub.w	r8, r8, r0
 800dfac:	e7e9      	b.n	800df82 <__sflush_r+0xda>
 800dfae:	bf00      	nop
 800dfb0:	20400001 	.word	0x20400001

0800dfb4 <_fflush_r>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	690b      	ldr	r3, [r1, #16]
 800dfb8:	4605      	mov	r5, r0
 800dfba:	460c      	mov	r4, r1
 800dfbc:	b913      	cbnz	r3, 800dfc4 <_fflush_r+0x10>
 800dfbe:	2500      	movs	r5, #0
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	bd38      	pop	{r3, r4, r5, pc}
 800dfc4:	b118      	cbz	r0, 800dfce <_fflush_r+0x1a>
 800dfc6:	6983      	ldr	r3, [r0, #24]
 800dfc8:	b90b      	cbnz	r3, 800dfce <_fflush_r+0x1a>
 800dfca:	f7ff f8b9 	bl	800d140 <__sinit>
 800dfce:	4b14      	ldr	r3, [pc, #80]	; (800e020 <_fflush_r+0x6c>)
 800dfd0:	429c      	cmp	r4, r3
 800dfd2:	d11b      	bne.n	800e00c <_fflush_r+0x58>
 800dfd4:	686c      	ldr	r4, [r5, #4]
 800dfd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d0ef      	beq.n	800dfbe <_fflush_r+0xa>
 800dfde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfe0:	07d0      	lsls	r0, r2, #31
 800dfe2:	d404      	bmi.n	800dfee <_fflush_r+0x3a>
 800dfe4:	0599      	lsls	r1, r3, #22
 800dfe6:	d402      	bmi.n	800dfee <_fflush_r+0x3a>
 800dfe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfea:	f7ff f947 	bl	800d27c <__retarget_lock_acquire_recursive>
 800dfee:	4628      	mov	r0, r5
 800dff0:	4621      	mov	r1, r4
 800dff2:	f7ff ff59 	bl	800dea8 <__sflush_r>
 800dff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dff8:	07da      	lsls	r2, r3, #31
 800dffa:	4605      	mov	r5, r0
 800dffc:	d4e0      	bmi.n	800dfc0 <_fflush_r+0xc>
 800dffe:	89a3      	ldrh	r3, [r4, #12]
 800e000:	059b      	lsls	r3, r3, #22
 800e002:	d4dd      	bmi.n	800dfc0 <_fflush_r+0xc>
 800e004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e006:	f7ff f93a 	bl	800d27e <__retarget_lock_release_recursive>
 800e00a:	e7d9      	b.n	800dfc0 <_fflush_r+0xc>
 800e00c:	4b05      	ldr	r3, [pc, #20]	; (800e024 <_fflush_r+0x70>)
 800e00e:	429c      	cmp	r4, r3
 800e010:	d101      	bne.n	800e016 <_fflush_r+0x62>
 800e012:	68ac      	ldr	r4, [r5, #8]
 800e014:	e7df      	b.n	800dfd6 <_fflush_r+0x22>
 800e016:	4b04      	ldr	r3, [pc, #16]	; (800e028 <_fflush_r+0x74>)
 800e018:	429c      	cmp	r4, r3
 800e01a:	bf08      	it	eq
 800e01c:	68ec      	ldreq	r4, [r5, #12]
 800e01e:	e7da      	b.n	800dfd6 <_fflush_r+0x22>
 800e020:	0800ed54 	.word	0x0800ed54
 800e024:	0800ed74 	.word	0x0800ed74
 800e028:	0800ed34 	.word	0x0800ed34

0800e02c <_lseek_r>:
 800e02c:	b538      	push	{r3, r4, r5, lr}
 800e02e:	4d07      	ldr	r5, [pc, #28]	; (800e04c <_lseek_r+0x20>)
 800e030:	4604      	mov	r4, r0
 800e032:	4608      	mov	r0, r1
 800e034:	4611      	mov	r1, r2
 800e036:	2200      	movs	r2, #0
 800e038:	602a      	str	r2, [r5, #0]
 800e03a:	461a      	mov	r2, r3
 800e03c:	f7f2 fca5 	bl	800098a <_lseek>
 800e040:	1c43      	adds	r3, r0, #1
 800e042:	d102      	bne.n	800e04a <_lseek_r+0x1e>
 800e044:	682b      	ldr	r3, [r5, #0]
 800e046:	b103      	cbz	r3, 800e04a <_lseek_r+0x1e>
 800e048:	6023      	str	r3, [r4, #0]
 800e04a:	bd38      	pop	{r3, r4, r5, pc}
 800e04c:	2000199c 	.word	0x2000199c

0800e050 <__swhatbuf_r>:
 800e050:	b570      	push	{r4, r5, r6, lr}
 800e052:	460e      	mov	r6, r1
 800e054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e058:	2900      	cmp	r1, #0
 800e05a:	b096      	sub	sp, #88	; 0x58
 800e05c:	4614      	mov	r4, r2
 800e05e:	461d      	mov	r5, r3
 800e060:	da08      	bge.n	800e074 <__swhatbuf_r+0x24>
 800e062:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e066:	2200      	movs	r2, #0
 800e068:	602a      	str	r2, [r5, #0]
 800e06a:	061a      	lsls	r2, r3, #24
 800e06c:	d410      	bmi.n	800e090 <__swhatbuf_r+0x40>
 800e06e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e072:	e00e      	b.n	800e092 <__swhatbuf_r+0x42>
 800e074:	466a      	mov	r2, sp
 800e076:	f000 f905 	bl	800e284 <_fstat_r>
 800e07a:	2800      	cmp	r0, #0
 800e07c:	dbf1      	blt.n	800e062 <__swhatbuf_r+0x12>
 800e07e:	9a01      	ldr	r2, [sp, #4]
 800e080:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e084:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e088:	425a      	negs	r2, r3
 800e08a:	415a      	adcs	r2, r3
 800e08c:	602a      	str	r2, [r5, #0]
 800e08e:	e7ee      	b.n	800e06e <__swhatbuf_r+0x1e>
 800e090:	2340      	movs	r3, #64	; 0x40
 800e092:	2000      	movs	r0, #0
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	b016      	add	sp, #88	; 0x58
 800e098:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e09c <__smakebuf_r>:
 800e09c:	898b      	ldrh	r3, [r1, #12]
 800e09e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0a0:	079d      	lsls	r5, r3, #30
 800e0a2:	4606      	mov	r6, r0
 800e0a4:	460c      	mov	r4, r1
 800e0a6:	d507      	bpl.n	800e0b8 <__smakebuf_r+0x1c>
 800e0a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0ac:	6023      	str	r3, [r4, #0]
 800e0ae:	6123      	str	r3, [r4, #16]
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	6163      	str	r3, [r4, #20]
 800e0b4:	b002      	add	sp, #8
 800e0b6:	bd70      	pop	{r4, r5, r6, pc}
 800e0b8:	ab01      	add	r3, sp, #4
 800e0ba:	466a      	mov	r2, sp
 800e0bc:	f7ff ffc8 	bl	800e050 <__swhatbuf_r>
 800e0c0:	9900      	ldr	r1, [sp, #0]
 800e0c2:	4605      	mov	r5, r0
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	f7ff f8fb 	bl	800d2c0 <_malloc_r>
 800e0ca:	b948      	cbnz	r0, 800e0e0 <__smakebuf_r+0x44>
 800e0cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0d0:	059a      	lsls	r2, r3, #22
 800e0d2:	d4ef      	bmi.n	800e0b4 <__smakebuf_r+0x18>
 800e0d4:	f023 0303 	bic.w	r3, r3, #3
 800e0d8:	f043 0302 	orr.w	r3, r3, #2
 800e0dc:	81a3      	strh	r3, [r4, #12]
 800e0de:	e7e3      	b.n	800e0a8 <__smakebuf_r+0xc>
 800e0e0:	4b0d      	ldr	r3, [pc, #52]	; (800e118 <__smakebuf_r+0x7c>)
 800e0e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	6020      	str	r0, [r4, #0]
 800e0e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0ec:	81a3      	strh	r3, [r4, #12]
 800e0ee:	9b00      	ldr	r3, [sp, #0]
 800e0f0:	6163      	str	r3, [r4, #20]
 800e0f2:	9b01      	ldr	r3, [sp, #4]
 800e0f4:	6120      	str	r0, [r4, #16]
 800e0f6:	b15b      	cbz	r3, 800e110 <__smakebuf_r+0x74>
 800e0f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	f000 f8d3 	bl	800e2a8 <_isatty_r>
 800e102:	b128      	cbz	r0, 800e110 <__smakebuf_r+0x74>
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	f023 0303 	bic.w	r3, r3, #3
 800e10a:	f043 0301 	orr.w	r3, r3, #1
 800e10e:	81a3      	strh	r3, [r4, #12]
 800e110:	89a0      	ldrh	r0, [r4, #12]
 800e112:	4305      	orrs	r5, r0
 800e114:	81a5      	strh	r5, [r4, #12]
 800e116:	e7cd      	b.n	800e0b4 <__smakebuf_r+0x18>
 800e118:	0800d0d9 	.word	0x0800d0d9

0800e11c <memmove>:
 800e11c:	4288      	cmp	r0, r1
 800e11e:	b510      	push	{r4, lr}
 800e120:	eb01 0402 	add.w	r4, r1, r2
 800e124:	d902      	bls.n	800e12c <memmove+0x10>
 800e126:	4284      	cmp	r4, r0
 800e128:	4623      	mov	r3, r4
 800e12a:	d807      	bhi.n	800e13c <memmove+0x20>
 800e12c:	1e43      	subs	r3, r0, #1
 800e12e:	42a1      	cmp	r1, r4
 800e130:	d008      	beq.n	800e144 <memmove+0x28>
 800e132:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e13a:	e7f8      	b.n	800e12e <memmove+0x12>
 800e13c:	4402      	add	r2, r0
 800e13e:	4601      	mov	r1, r0
 800e140:	428a      	cmp	r2, r1
 800e142:	d100      	bne.n	800e146 <memmove+0x2a>
 800e144:	bd10      	pop	{r4, pc}
 800e146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e14a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e14e:	e7f7      	b.n	800e140 <memmove+0x24>

0800e150 <__malloc_lock>:
 800e150:	4801      	ldr	r0, [pc, #4]	; (800e158 <__malloc_lock+0x8>)
 800e152:	f7ff b893 	b.w	800d27c <__retarget_lock_acquire_recursive>
 800e156:	bf00      	nop
 800e158:	20001990 	.word	0x20001990

0800e15c <__malloc_unlock>:
 800e15c:	4801      	ldr	r0, [pc, #4]	; (800e164 <__malloc_unlock+0x8>)
 800e15e:	f7ff b88e 	b.w	800d27e <__retarget_lock_release_recursive>
 800e162:	bf00      	nop
 800e164:	20001990 	.word	0x20001990

0800e168 <_free_r>:
 800e168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e16a:	2900      	cmp	r1, #0
 800e16c:	d044      	beq.n	800e1f8 <_free_r+0x90>
 800e16e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e172:	9001      	str	r0, [sp, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	f1a1 0404 	sub.w	r4, r1, #4
 800e17a:	bfb8      	it	lt
 800e17c:	18e4      	addlt	r4, r4, r3
 800e17e:	f7ff ffe7 	bl	800e150 <__malloc_lock>
 800e182:	4a1e      	ldr	r2, [pc, #120]	; (800e1fc <_free_r+0x94>)
 800e184:	9801      	ldr	r0, [sp, #4]
 800e186:	6813      	ldr	r3, [r2, #0]
 800e188:	b933      	cbnz	r3, 800e198 <_free_r+0x30>
 800e18a:	6063      	str	r3, [r4, #4]
 800e18c:	6014      	str	r4, [r2, #0]
 800e18e:	b003      	add	sp, #12
 800e190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e194:	f7ff bfe2 	b.w	800e15c <__malloc_unlock>
 800e198:	42a3      	cmp	r3, r4
 800e19a:	d908      	bls.n	800e1ae <_free_r+0x46>
 800e19c:	6825      	ldr	r5, [r4, #0]
 800e19e:	1961      	adds	r1, r4, r5
 800e1a0:	428b      	cmp	r3, r1
 800e1a2:	bf01      	itttt	eq
 800e1a4:	6819      	ldreq	r1, [r3, #0]
 800e1a6:	685b      	ldreq	r3, [r3, #4]
 800e1a8:	1949      	addeq	r1, r1, r5
 800e1aa:	6021      	streq	r1, [r4, #0]
 800e1ac:	e7ed      	b.n	800e18a <_free_r+0x22>
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	b10b      	cbz	r3, 800e1b8 <_free_r+0x50>
 800e1b4:	42a3      	cmp	r3, r4
 800e1b6:	d9fa      	bls.n	800e1ae <_free_r+0x46>
 800e1b8:	6811      	ldr	r1, [r2, #0]
 800e1ba:	1855      	adds	r5, r2, r1
 800e1bc:	42a5      	cmp	r5, r4
 800e1be:	d10b      	bne.n	800e1d8 <_free_r+0x70>
 800e1c0:	6824      	ldr	r4, [r4, #0]
 800e1c2:	4421      	add	r1, r4
 800e1c4:	1854      	adds	r4, r2, r1
 800e1c6:	42a3      	cmp	r3, r4
 800e1c8:	6011      	str	r1, [r2, #0]
 800e1ca:	d1e0      	bne.n	800e18e <_free_r+0x26>
 800e1cc:	681c      	ldr	r4, [r3, #0]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	6053      	str	r3, [r2, #4]
 800e1d2:	4421      	add	r1, r4
 800e1d4:	6011      	str	r1, [r2, #0]
 800e1d6:	e7da      	b.n	800e18e <_free_r+0x26>
 800e1d8:	d902      	bls.n	800e1e0 <_free_r+0x78>
 800e1da:	230c      	movs	r3, #12
 800e1dc:	6003      	str	r3, [r0, #0]
 800e1de:	e7d6      	b.n	800e18e <_free_r+0x26>
 800e1e0:	6825      	ldr	r5, [r4, #0]
 800e1e2:	1961      	adds	r1, r4, r5
 800e1e4:	428b      	cmp	r3, r1
 800e1e6:	bf04      	itt	eq
 800e1e8:	6819      	ldreq	r1, [r3, #0]
 800e1ea:	685b      	ldreq	r3, [r3, #4]
 800e1ec:	6063      	str	r3, [r4, #4]
 800e1ee:	bf04      	itt	eq
 800e1f0:	1949      	addeq	r1, r1, r5
 800e1f2:	6021      	streq	r1, [r4, #0]
 800e1f4:	6054      	str	r4, [r2, #4]
 800e1f6:	e7ca      	b.n	800e18e <_free_r+0x26>
 800e1f8:	b003      	add	sp, #12
 800e1fa:	bd30      	pop	{r4, r5, pc}
 800e1fc:	20001994 	.word	0x20001994

0800e200 <_realloc_r>:
 800e200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e204:	4680      	mov	r8, r0
 800e206:	4614      	mov	r4, r2
 800e208:	460e      	mov	r6, r1
 800e20a:	b921      	cbnz	r1, 800e216 <_realloc_r+0x16>
 800e20c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e210:	4611      	mov	r1, r2
 800e212:	f7ff b855 	b.w	800d2c0 <_malloc_r>
 800e216:	b92a      	cbnz	r2, 800e224 <_realloc_r+0x24>
 800e218:	f7ff ffa6 	bl	800e168 <_free_r>
 800e21c:	4625      	mov	r5, r4
 800e21e:	4628      	mov	r0, r5
 800e220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e224:	f000 f850 	bl	800e2c8 <_malloc_usable_size_r>
 800e228:	4284      	cmp	r4, r0
 800e22a:	4607      	mov	r7, r0
 800e22c:	d802      	bhi.n	800e234 <_realloc_r+0x34>
 800e22e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e232:	d812      	bhi.n	800e25a <_realloc_r+0x5a>
 800e234:	4621      	mov	r1, r4
 800e236:	4640      	mov	r0, r8
 800e238:	f7ff f842 	bl	800d2c0 <_malloc_r>
 800e23c:	4605      	mov	r5, r0
 800e23e:	2800      	cmp	r0, #0
 800e240:	d0ed      	beq.n	800e21e <_realloc_r+0x1e>
 800e242:	42bc      	cmp	r4, r7
 800e244:	4622      	mov	r2, r4
 800e246:	4631      	mov	r1, r6
 800e248:	bf28      	it	cs
 800e24a:	463a      	movcs	r2, r7
 800e24c:	f7fe fe84 	bl	800cf58 <memcpy>
 800e250:	4631      	mov	r1, r6
 800e252:	4640      	mov	r0, r8
 800e254:	f7ff ff88 	bl	800e168 <_free_r>
 800e258:	e7e1      	b.n	800e21e <_realloc_r+0x1e>
 800e25a:	4635      	mov	r5, r6
 800e25c:	e7df      	b.n	800e21e <_realloc_r+0x1e>
	...

0800e260 <_read_r>:
 800e260:	b538      	push	{r3, r4, r5, lr}
 800e262:	4d07      	ldr	r5, [pc, #28]	; (800e280 <_read_r+0x20>)
 800e264:	4604      	mov	r4, r0
 800e266:	4608      	mov	r0, r1
 800e268:	4611      	mov	r1, r2
 800e26a:	2200      	movs	r2, #0
 800e26c:	602a      	str	r2, [r5, #0]
 800e26e:	461a      	mov	r2, r3
 800e270:	f7f2 fb47 	bl	8000902 <_read>
 800e274:	1c43      	adds	r3, r0, #1
 800e276:	d102      	bne.n	800e27e <_read_r+0x1e>
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	b103      	cbz	r3, 800e27e <_read_r+0x1e>
 800e27c:	6023      	str	r3, [r4, #0]
 800e27e:	bd38      	pop	{r3, r4, r5, pc}
 800e280:	2000199c 	.word	0x2000199c

0800e284 <_fstat_r>:
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	4d07      	ldr	r5, [pc, #28]	; (800e2a4 <_fstat_r+0x20>)
 800e288:	2300      	movs	r3, #0
 800e28a:	4604      	mov	r4, r0
 800e28c:	4608      	mov	r0, r1
 800e28e:	4611      	mov	r1, r2
 800e290:	602b      	str	r3, [r5, #0]
 800e292:	f7f2 fb5f 	bl	8000954 <_fstat>
 800e296:	1c43      	adds	r3, r0, #1
 800e298:	d102      	bne.n	800e2a0 <_fstat_r+0x1c>
 800e29a:	682b      	ldr	r3, [r5, #0]
 800e29c:	b103      	cbz	r3, 800e2a0 <_fstat_r+0x1c>
 800e29e:	6023      	str	r3, [r4, #0]
 800e2a0:	bd38      	pop	{r3, r4, r5, pc}
 800e2a2:	bf00      	nop
 800e2a4:	2000199c 	.word	0x2000199c

0800e2a8 <_isatty_r>:
 800e2a8:	b538      	push	{r3, r4, r5, lr}
 800e2aa:	4d06      	ldr	r5, [pc, #24]	; (800e2c4 <_isatty_r+0x1c>)
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	4608      	mov	r0, r1
 800e2b2:	602b      	str	r3, [r5, #0]
 800e2b4:	f7f2 fb5e 	bl	8000974 <_isatty>
 800e2b8:	1c43      	adds	r3, r0, #1
 800e2ba:	d102      	bne.n	800e2c2 <_isatty_r+0x1a>
 800e2bc:	682b      	ldr	r3, [r5, #0]
 800e2be:	b103      	cbz	r3, 800e2c2 <_isatty_r+0x1a>
 800e2c0:	6023      	str	r3, [r4, #0]
 800e2c2:	bd38      	pop	{r3, r4, r5, pc}
 800e2c4:	2000199c 	.word	0x2000199c

0800e2c8 <_malloc_usable_size_r>:
 800e2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2cc:	1f18      	subs	r0, r3, #4
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	bfbc      	itt	lt
 800e2d2:	580b      	ldrlt	r3, [r1, r0]
 800e2d4:	18c0      	addlt	r0, r0, r3
 800e2d6:	4770      	bx	lr

0800e2d8 <_init>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	bf00      	nop
 800e2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2de:	bc08      	pop	{r3}
 800e2e0:	469e      	mov	lr, r3
 800e2e2:	4770      	bx	lr

0800e2e4 <_fini>:
 800e2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2e6:	bf00      	nop
 800e2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ea:	bc08      	pop	{r3}
 800e2ec:	469e      	mov	lr, r3
 800e2ee:	4770      	bx	lr
